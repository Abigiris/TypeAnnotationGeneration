{
    "automatic-diary-master/setup.py": {},
    "automatic-diary-master/automatic_diary/cli.py": {
        "_obfuscate_char": {
            "name": "_obfuscate_char",
            "location": 23,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "char": [
                    "str",
                    "int"
                ]
            }
        },
        "obfuscate": {
            "name": "obfuscate",
            "location": 34,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "lib.model.category.category.AlbumCategory",
                "Dict[str, int]",
                "Optional[List[float]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "load_configs": {
            "name": "load_configs",
            "location": 38,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.dict]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "only_providers": [
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "call_providers": {
            "name": "call_providers",
            "location": 50,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "configs": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "no_cache": [
                    "bool",
                    "str",
                    "Optional[float]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "write_csv": {
            "name": "write_csv",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "items": [
                    "Mapping[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "bool",
                    "Dict[str, bool]",
                    "Dict[str, str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "automatic-diary-master/automatic_diary/model.py": {
        "Item.normalized": {
            "name": "normalized",
            "location": 22,
            "return": [
                "Tuple[float, float]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "tuple",
                    "type",
                    "Sequence[Any]",
                    "Callable",
                    "str"
                ],
                "datetime_": [
                    "datetime.datetime",
                    "str",
                    "datetime.date",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "Item.date": {
            "name": "date",
            "location": 30,
            "return": [
                "int",
                "datetime.datetime",
                "datetime.timedelta",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.clean_text": {
            "name": "clean_text",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.formatted_datetime": {
            "name": "formatted_datetime",
            "location": 38,
            "return": [
                "datetime.date",
                "datetime.datetime",
                "bool",
                "Tuple[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.__lt__": {
            "name": "__lt__",
            "location": 43,
            "return": [
                "int",
                "datetime.timedelta",
                "str",
                "float",
                "Dict[int, datetime.datetime]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[float, float]"
                ]
            }
        },
        "Item.astuple": {
            "name": "astuple",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.from_tuple": {
            "name": "from_tuple",
            "location": 55,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "datetime.timedelta",
                    "datetime.date"
                ],
                "row": [
                    "List[str]",
                    "str",
                    "Dict[str, List[int]]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/shell.py": {
        "run_shell_cmd": {
            "name": "run_shell_cmd",
            "location": 5,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "search_secret": {
            "name": "search_secret",
            "location": 16,
            "return": [
                "str",
                "Union[str, int]",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "val": [
                    "str",
                    "bytes"
                ],
                "label": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/visualize.py": {
        "_create_days_around": {
            "name": "_create_days_around",
            "location": 40,
            "return": [
                "typing.Iterator[Day]"
            ],
            "arguments": {
                "date": [
                    "str",
                    "int",
                    "Optional[str]",
                    "datetime.date",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Union[str, list]",
                    "datetime.date",
                    "Optional[datetime.date]"
                ],
                "stop": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Union[str, list]",
                    "datetime.date",
                    "Optional[datetime.date]"
                ]
            }
        },
        "_read_items": {
            "name": "_read_items",
            "location": 49,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "csv_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_group_items_in_days": {
            "name": "_group_items_in_days",
            "location": 56,
            "return": [
                "typing.Iterator[Day]"
            ],
            "arguments": {
                "items": [
                    "T",
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]"
                ]
            }
        },
        "_calc_perc": {
            "name": "_calc_perc",
            "location": 77,
            "return": [
                "str",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "part": [
                    "int"
                ],
                "whole": [
                    "int"
                ]
            }
        },
        "_calc_stats": {
            "name": "_calc_stats",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weeks": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_group_days_in_weeks": {
            "name": "_group_days_in_weeks",
            "location": 106,
            "return": [
                "typing.Iterator[Week]"
            ],
            "arguments": {
                "days": [
                    "list",
                    "str",
                    "Callable",
                    "List[str]",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "_matches_regex": {
            "name": "_matches_regex",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "regex": [
                    "str"
                ]
            }
        },
        "_render_template": {
            "name": "_render_template",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "package": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "pathlib.PosixPath"
                ],
                "output_html_path": [
                    "str",
                    "pathlib.Path"
                ],
                "highlight": [
                    "Optional[pathlib.Path]",
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "_visualize": {
            "name": "_visualize",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "csv_path": [
                    "pathlib.Path",
                    "str"
                ],
                "output_html_path": [
                    "str",
                    "path.Path"
                ],
                "highlight": [
                    "str",
                    "path.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Day.from_date": {
            "name": "from_date",
            "location": 30,
            "return": [
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "date": [
                    "str",
                    "datetime.date"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/__init__.py": {},
    "automatic-diary-master/automatic_diary/__main__.py": {},
    "automatic-diary-master/automatic_diary/providers/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/caldav/main.py": {
        "_read_events_data_from_cache": {
            "name": "_read_events_data_from_cache",
            "location": 18,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]",
                "asyncpg_migrate.model.Config"
            ],
            "arguments": {
                "cache_dir": [
                    "pathlib.Path",
                    "str",
                    "norfs.fs.base.Path"
                ],
                "no_cache": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "_write_events_to_cache": {
            "name": "_write_events_to_cache",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "events": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "List[str]",
                    "Union[str, List[str]]",
                    "bool"
                ],
                "cache_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "_download_events": {
            "name": "_download_events",
            "location": 39,
            "return": [
                "int",
                "Optional[str]",
                "dict",
                "\"Step\""
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "cache_dir": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "no_cache": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "_parse_events": {
            "name": "_parse_events",
            "location": 58,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "events_data": [
                    "Iterable[str]",
                    "dict",
                    "bool",
                    "str",
                    "Type[T]",
                    "Iterable",
                    "Dict[str, Any]"
                ],
                "subprovider": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "Optional[List[str]]",
                "bool",
                "list"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]",
                    "asyncpg_migrate.model.Config",
                    "Dict[str, Any]"
                ],
                "no_cache": [
                    "dict",
                    "Optional[dict]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/caldav/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/csfd/main.py": {
        "_download_ratings_page": {
            "name": "_download_ratings_page",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "profile_url": [
                    "str",
                    "Iterable[Any]",
                    "bool",
                    "dict"
                ],
                "cache_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ],
                "no_cache": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "page_no": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_download_all_ratings_pages": {
            "name": "_download_all_ratings_pages",
            "location": 48,
            "return": [
                "typing.Iterator[bs4.BeautifulSoup]"
            ],
            "arguments": {
                "profile_url": [
                    "pathlib.Path",
                    "str",
                    "Optional[path.Path]",
                    "Dict[str, Any]"
                ],
                "cache_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[path.Path]",
                    "Dict[str, Any]"
                ],
                "no_cache": [
                    "pathlib.Path",
                    "str",
                    "Optional[path.Path]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_parse_ratings_page": {
            "name": "_parse_ratings_page",
            "location": 67,
            "return": [
                "typing.Iterator[Film]"
            ],
            "arguments": {
                "soup": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parse_ratings_pages": {
            "name": "_parse_ratings_pages",
            "location": 77,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "soups": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "subprovider": [
                    "str",
                    "datetime.timedelta",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "parse_username": {
            "name": "parse_username",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 98,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "no_cache": [
                    "bool",
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/csfd/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/csv/main.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "Optional[List[str]]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/csv/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/facebook/main.py": {
        "parse_datetime": {
            "name": "parse_datetime",
            "location": 34,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "T",
                    "int"
                ]
            }
        },
        "_parse_timeline_page": {
            "name": "_parse_timeline_page",
            "location": 43,
            "return": [
                "typing.Iterator[Status]"
            ],
            "arguments": {
                "soup": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_read_html": {
            "name": "_read_html",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 68,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[dict]",
                    "dict"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/facebook/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/git/main.py": {
        "_find_git_repos": {
            "name": "_find_git_repos",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ]
            }
        },
        "_call_git_log": {
            "name": "_call_git_log",
            "location": 34,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "repo_path": [
                    "str"
                ],
                "author": [
                    "str"
                ]
            }
        },
        "_read_git_logs": {
            "name": "_read_git_logs",
            "location": 48,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "repo_paths": [
                    "Iterable[str]",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "author": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "dict",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/git/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/icalendar/main.py": {
        "quopri_decode": {
            "name": "quopri_decode",
            "location": 16,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_clean_ics_text": {
            "name": "_clean_ics_text",
            "location": 58,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]",
                    "List[Type]",
                    "pathlib.Path",
                    "list"
                ]
            }
        },
        "parse_calendar": {
            "name": "parse_calendar",
            "location": 71,
            "return": [
                "typing.Iterator[Event]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "_read_calendar": {
            "name": "_read_calendar",
            "location": 82,
            "return": [
                "typing.Iterator[Event]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "pathlib2.Path",
                    "Union[str, pathlib.Path]",
                    "Optional[str]",
                    "list",
                    "dict",
                    "pathlib.Path"
                ]
            }
        },
        "Event.from_ics_event": {
            "name": "from_ics_event",
            "location": 38,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Dict]",
                    "int",
                    "Dict[str, Any]"
                ],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Event.name": {
            "name": "name",
            "location": 50,
            "return": [
                "str",
                "Type",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/icalendar/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/maildir/main.py": {
        "_decode_header": {
            "name": "_decode_header",
            "location": 18,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "header": [
                    "Mapping",
                    "str"
                ]
            }
        },
        "_parse_address": {
            "name": "_parse_address",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "header": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Union[str, int]"
                ]
            }
        },
        "_parse_date": {
            "name": "_parse_date",
            "location": 38,
            "return": [
                "List[str]",
                "str",
                "Mapping[str, Any]",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "header": [
                    "bytes",
                    "Union[str, int]",
                    "int",
                    "Dict[str, object]"
                ]
            }
        },
        "_format_text": {
            "name": "_format_text",
            "location": 43,
            "return": [
                "List[Callable]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "from_": [
                    "int",
                    "str",
                    "Iterable[bytes]",
                    "List[int]",
                    "Optional[Any]"
                ],
                "to_": [
                    "int",
                    "str",
                    "Iterable[bytes]",
                    "List[int]",
                    "Optional[Any]"
                ],
                "subject": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "List[str]",
                    "Callable"
                ],
                "sent": [
                    "bool",
                    "list",
                    "List[dict]",
                    "List[str]",
                    "bytes",
                    "Iterable[list]"
                ]
            }
        },
        "_read_messages": {
            "name": "_read_messages",
            "location": 49,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "pathname": [
                    "dict",
                    "datetime.date"
                ],
                "sent": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "asyncpg_migrate.model.Config"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/maildir/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/orgmode/main.py": {
        "parse_orgmode": {
            "name": "parse_orgmode",
            "location": 17,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "int",
                    "List[str]",
                    "T",
                    "\"CategoricalDtype\"",
                    "bytes"
                ],
                "subprovider": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "pathlib.Path",
                    "Optional[str]",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/orgmode/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/orgmodelist/main.py": {
        "parse_orgmode_list": {
            "name": "parse_orgmode_list",
            "location": 21,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "org": [
                    "OrderedDict",
                    "bool",
                    "str"
                ],
                "subprovider": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "pathlib.Path",
                    "Optional[str]",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/orgmodelist/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/todotxt/main.py": {
        "_clean_text": {
            "name": "_clean_text",
            "location": 20,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "Set[int]",
                    "str",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "pathlib.Path",
                    "Optional[str]",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/todotxt/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/trakt/main.py": {
        "main": {
            "name": "main",
            "location": 80,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "Optional[dict]",
                    "type"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Application.auth": {
            "name": "auth",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.on_token_refreshed": {
            "name": "on_token_refreshed",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Application.save_token": {
            "name": "save_token",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.movies": {
            "name": "movies",
            "location": 69,
            "return": [
                "str",
                "bytearray",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.shows": {
            "name": "shows",
            "location": 74,
            "return": [
                "str",
                "bytearray",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/trakt/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/twitter/main.py": {
        "_parse_tweets_file": {
            "name": "_parse_tweets_file",
            "location": 13,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "pathlib.Path",
                    "Optional[str]",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/twitter/__init__.py": {},
    "automatic-diary-master/automatic_diary/providers/txt/main.py": {
        "parse_txt": {
            "name": "parse_txt",
            "location": 18,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "int",
                    "List[str]",
                    "T",
                    "\"CategoricalDtype\"",
                    "bytes"
                ],
                "subprovider": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "indent_spaces": [
                    "int",
                    "Tuple[float, float]",
                    "str",
                    "Optional[bytes]"
                ],
                "sep": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "max_indent": [
                    "int"
                ],
                "sep_after_max_indent": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "typing.Iterator[automatic_diary.model.Item]"
            ],
            "arguments": {
                "config": [
                    "pathlib.Path",
                    "Optional[str]",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/providers/txt/__init__.py": {},
    "automatic-diary-master/automatic_diary/tests/test_cli.py": {
        "TestCLI.test_obfuscate": {
            "name": "test_obfuscate",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_csfd.py": {
        "TestCSFD.test_parse_date_time": {
            "name": "test_parse_date_time",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Literal",
                    "List[str]",
                    "bool",
                    "list",
                    "Optional[str]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_facebook.py": {
        "TestFacebook.test_parse_datetime": {
            "name": "test_parse_datetime",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "List[str]",
                    "list",
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_icalendar.py": {
        "TestICalendar.test_parse_calendar": {
            "name": "test_parse_calendar",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_orgmode.py": {
        "TestOrgmode.test_parse_orgmode": {
            "name": "test_parse_orgmode",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_orgmodelist.py": {
        "TestOrgmode.test_parse_orgmode_list": {
            "name": "test_parse_orgmode_list",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_shell.py": {
        "TestShell.test_search_secret": {
            "name": "test_search_secret",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_method": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/test_txt.py": {
        "TestTxt.test_parse_txt": {
            "name": "test_parse_txt",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "automatic-diary-master/automatic_diary/tests/__init__.py": {}
}
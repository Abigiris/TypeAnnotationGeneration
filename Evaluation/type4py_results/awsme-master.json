{
    "awsme-master/setup.py": {},
    "awsme-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 29,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "Callable[[T], bool]",
                    "Optional[bytes]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 81,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "awsme-master/docs/conf.py": {},
    "awsme-master/src/awsme/async_recorder.py": {
        "AsyncRecorder.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recorder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncRecorder.put_metric": {
            "name": "put_metric",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "int",
                    "str",
                    "float",
                    "metric.Metric"
                ]
            }
        },
        "AsyncRecorder.flush": {
            "name": "flush",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complete": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "AsyncRecorder._start": {
            "name": "_start",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncRecorder._background_send": {
            "name": "_background_send",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncRecorder._pending_metrics": {
            "name": "_pending_metrics",
            "location": 42,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "awsme-master/src/awsme/awsme.py": {},
    "awsme-master/src/awsme/buffered_recorder.py": {
        "BufferedRecorder.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferedRecorder.put_metric": {
            "name": "put_metric",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "metric.Metric",
                    "str",
                    "Union[str, IO]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "BufferedRecorder.flush": {
            "name": "flush",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complete": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "BufferedRecorder._pop_batch": {
            "name": "_pop_batch",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "partial": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "awsme-master/src/awsme/cli.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "awsme-master/src/awsme/cloud_watch.py": {
        "CloudWatch.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "bool",
                    "str"
                ],
                "default_dimensions": [
                    "int",
                    "bool",
                    "Callable",
                    "Union[float, Tuple[float, float]]",
                    "List[str]"
                ],
                "recorder_class": [
                    "bool",
                    "str"
                ]
            }
        },
        "CloudWatch.log": {
            "name": "log",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "datetime.datetime",
                    "str",
                    "Tuple[str, str]",
                    "Optional[datetime.datetime]"
                ],
                "dimensions": [
                    "bool",
                    "datetime.date",
                    "Optional[int]",
                    "Optional[datetime.datetime]",
                    "str",
                    "datetime.datetime"
                ],
                "value": [
                    "datetime.datetime",
                    "str",
                    "Tuple[str, str]",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "CloudWatch.flush": {
            "name": "flush",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complete": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "CloudWatch._record_metric": {
            "name": "_record_metric",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "int",
                    "Tuple[Tuple[str, ...]]",
                    "float"
                ]
            }
        }
    },
    "awsme-master/src/awsme/dummy.py": {
        "DummyCloudWatch.log": {
            "name": "log",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCloudWatch.flush": {
            "name": "flush",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complete": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "awsme-master/src/awsme/factory.py": {
        "create_cloud_watch": {
            "name": "create_cloud_watch",
            "location": 12,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "namespace": [
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "asynchronous": [
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "buffered": [
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "dummy": [
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "dimensions": [
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "recorder_factory": {
            "name": "recorder_factory",
            "location": 28,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "asynchronous": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "buffered": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "dummy": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "recorder_factory.create_recorder": {
            "name": "create_recorder",
            "location": 31,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "client": [
                    "str",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "awsme-master/src/awsme/immediate_recorder.py": {
        "ImmediateRecorder.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "float",
                    "bool"
                ],
                "client": [
                    "float",
                    "bool"
                ]
            }
        },
        "ImmediateRecorder.put_metric": {
            "name": "put_metric",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "Dict[str, Any]",
                    "metric.Metric",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ImmediateRecorder.flush": {
            "name": "flush",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complete": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ImmediateRecorder.put_metric_data": {
            "name": "put_metric_data",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "awsme-master/src/awsme/metric.py": {
        "Metric.to_metric_data": {
            "name": "to_metric_data",
            "location": 18,
            "return": [
                "str",
                "Callable",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric._format_single_metric": {
            "name": "_format_single_metric",
            "location": 27,
            "return": [
                "bool",
                "Sequence[Any]",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dimensions": [
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "awsme-master/src/awsme/__init__.py": {},
    "awsme-master/tests/buffered_recorder_atexit.py": {
        "StdoutRecorder.put_metric_data": {
            "name": "put_metric_data",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_data": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "awsme-master/tests/test_awsme.py": {
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_put_metric": {
            "name": "test_put_metric",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "awsme-master/tests/test_buffered_recorder.py": {
        "test_buffered_recorder_buffers_incomplete_page": {
            "name": "test_buffered_recorder_buffers_incomplete_page",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_buffered_recorder_flushes_full_page": {
            "name": "test_buffered_recorder_flushes_full_page",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_buffered_recorder_rate_control": {
            "name": "test_buffered_recorder_rate_control",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "int"
                ]
            }
        },
        "test_buffered_recorder_complete_flush_keeps_nothing": {
            "name": "test_buffered_recorder_complete_flush_keeps_nothing",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_buffered_recorder_flush_atexit": {
            "name": "test_buffered_recorder_flush_atexit",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "make_recorder": {
            "name": "make_recorder",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dimensions_count": [
                    "str"
                ]
            }
        }
    },
    "awsme-master/tests/test_metric.py": {
        "test_sample_metric_formatting": {
            "name": "test_sample_metric_formatting",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
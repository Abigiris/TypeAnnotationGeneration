{
    "bamboolean-master/conf.py": {},
    "bamboolean-master/run_tests.py": {
        "do_call": {
            "name": "do_call",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "run_mypy": {
            "name": "run_mypy",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_flake8": {
            "name": "run_flake8",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_python_tests": {
            "name": "run_python_tests",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bamboolean-master/setup.py": {},
    "bamboolean-master/upload.py": {
        "upload": {
            "name": "upload",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "version_exists": {
            "name": "version_exists",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bamboolean-master/bamboolean/ast.py": {
        "AST.tree_repr": {
            "name": "tree_repr",
            "location": 7,
            "return": [
                "typing.List[typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AST.stringify": {
            "name": "stringify",
            "location": 16,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBasedAST.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "TokenBasedAST.tree_repr": {
            "name": "tree_repr",
            "location": 25,
            "return": [
                "type",
                "Union[None, str, List[str], Dict[str, str]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBasedAST.stringify": {
            "name": "stringify",
            "location": 28,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "as3.scanner.Token",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.stringify": {
            "name": "stringify",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Optional[List[str]]",
                    "str",
                    "Sequence[int]",
                    "float",
                    "List[str]",
                    "int"
                ],
                "rel_op": [
                    "Optional[List[str]]",
                    "str",
                    "Sequence[int]",
                    "float",
                    "List[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "int",
                    "T",
                    "List[str]"
                ]
            }
        },
        "Constraint.tree_repr": {
            "name": "tree_repr",
            "location": 58,
            "return": [
                "Union",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.stringify": {
            "name": "stringify",
            "location": 65,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinOp.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "op": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "right": [
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "BinOp.tree_repr": {
            "name": "tree_repr",
            "location": 76,
            "return": [
                "Tuple[int, int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinOp.stringify": {
            "name": "stringify",
            "location": 83,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOp.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Callable",
                    "str",
                    "bool",
                    "Sequence",
                    "Callable[[str], bool]"
                ],
                "right": [
                    "Callable",
                    "str",
                    "bool",
                    "Sequence",
                    "Callable[[str], bool]"
                ]
            }
        },
        "UnaryOp.tree_repr": {
            "name": "tree_repr",
            "location": 93,
            "return": [
                "list",
                "str",
                "Sequence[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOp.stringify": {
            "name": "stringify",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoOp.tree_repr": {
            "name": "tree_repr",
            "location": 104,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoOp.stringify": {
            "name": "stringify",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/exceptions.py": {},
    "bamboolean-master/bamboolean/factories.py": {
        "ParserFactory": {
            "name": "ParserFactory",
            "location": 9,
            "return": [
                "src.engine.parser.Parser",
                "Parser",
                "aule.parser.Parser"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "InterpreterFactory": {
            "name": "InterpreterFactory",
            "location": 14,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "symbol_table": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "interpret": {
            "name": "interpret",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict"
                ],
                "symbol_table": [
                    "str",
                    "dict"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 24,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "T",
                "str",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "extract_vars": {
            "name": "extract_vars",
            "location": 28,
            "return": [
                "xml_parsers.Parser",
                "Tuple[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Final[str]"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 32,
            "return": [
                "Sequence['cirq.Qid']",
                "float",
                "tuple"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "bamboolean-master/bamboolean/interpreter.py": {
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Set[str]",
                    "int",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "symbol_table": [
                    "Set[str]"
                ]
            }
        },
        "Interpreter.interpret": {
            "name": "interpret",
            "location": 16,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.error": {
            "name": "error",
            "location": 21,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Interpreter.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "ForwardRef"
                ]
            }
        },
        "Interpreter.visit_Constraint": {
            "name": "visit_Constraint",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter._handle_rel_op": {
            "name": "_handle_rel_op",
            "location": 47,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "op_type": [
                    "str",
                    "type",
                    "Union[str, List[str]]"
                ],
                "val1": [
                    "str",
                    "int"
                ],
                "val2": [
                    "str",
                    "int"
                ]
            }
        },
        "Interpreter.visit_Var": {
            "name": "visit_Var",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "Interpreter.visit_Num": {
            "name": "visit_Num",
            "location": 63,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_Bool": {
            "name": "visit_Bool",
            "location": 66,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_String": {
            "name": "visit_String",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Interpreter.visit_NoOp": {
            "name": "visit_NoOp",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "bamboolean-master/bamboolean/lexer.py": {
        "Lexer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "Lexer.error": {
            "name": "error",
            "location": 16,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._is_eof": {
            "name": "_is_eof",
            "location": 23,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "Sequence[T]",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Lexer.next": {
            "name": "next",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.peek": {
            "name": "peek",
            "location": 34,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.id": {
            "name": "id",
            "location": 41,
            "return": [
                "str",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.skip_whitespace": {
            "name": "skip_whitespace",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._is_quotation_mark": {
            "name": "_is_quotation_mark",
            "location": 59,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "Lexer.string": {
            "name": "string",
            "location": 62,
            "return": [
                "Optional[Callable]",
                "Type[T]",
                "List[str]",
                "bool",
                "Type",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.number": {
            "name": "number",
            "location": 72,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "bool",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._integer": {
            "name": "_integer",
            "location": 81,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.skip_n_chars": {
            "name": "skip_n_chars",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Lexer.is_token_equal": {
            "name": "is_token_equal",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "Tuple[int, int]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Lexer.get_next_token": {
            "name": "get_next_token",
            "location": 100,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[int]]",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/node_visitor.py": {
        "NodeVisitor.visit": {
            "name": "visit",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 19,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "bamboolean-master/bamboolean/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexer": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.error": {
            "name": "error",
            "location": 22,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "Callable",
                    "float",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "Parser.consume": {
            "name": "consume",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_type": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.compound_expr": {
            "name": "compound_expr",
            "location": 41,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.expr": {
            "name": "expr",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.simple_expr": {
            "name": "simple_expr",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_bin_op": {
            "name": "_parse_bin_op",
            "location": 62,
            "return": [
                "int",
                "Dict[str, Any]",
                "T"
            ],
            "arguments": {
                "self": [],
                "node_func": [
                    "str",
                    "Type",
                    "Dict[str, Any]"
                ],
                "token_type": []
            }
        },
        "Parser._parse_unary_op": {
            "name": "_parse_unary_op",
            "location": 72,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "node_func": [
                    "Type"
                ]
            }
        },
        "Parser.term": {
            "name": "term",
            "location": 77,
            "return": [
                "tuple",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.statement": {
            "name": "statement",
            "location": 92,
            "return": [
                "str",
                "Dict[str, Any]",
                "float",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.constraint": {
            "name": "constraint",
            "location": 101,
            "return": [
                "int",
                "List[int]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.variable": {
            "name": "variable",
            "location": 112,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.relational_op": {
            "name": "relational_op",
            "location": 120,
            "return": [
                "dict",
                "Iterable[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.value": {
            "name": "value",
            "location": 131,
            "return": [
                "Callable",
                "Iterable[str]",
                "Exception",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.empty": {
            "name": "empty",
            "location": 152,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tokens.py": {
        "flip_dict": {
            "name": "flip_dict",
            "location": 52,
            "return": [
                "dict",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "MutableMapping"
                ]
            }
        },
        "is_unary_op": {
            "name": "is_unary_op",
            "location": 56,
            "return": [
                "bool",
                "Tuple[int, bool]"
            ],
            "arguments": {
                "op": [
                    "int",
                    "str"
                ]
            }
        },
        "is_rel_op": {
            "name": "is_rel_op",
            "location": 60,
            "return": [
                "bool",
                "Tuple[int, bool]"
            ],
            "arguments": {
                "op": [
                    "float",
                    "Callable"
                ]
            }
        },
        "is_value": {
            "name": "is_value",
            "location": 64,
            "return": [
                "Iterable[Any]"
            ],
            "arguments": {
                "tok_type": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "Callable",
                    "int"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[BaseException]"
                ]
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__hash__": {
            "name": "__hash__",
            "location": 36,
            "return": [
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Token.stringify": {
            "name": "stringify",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.tree_repr": {
            "name": "tree_repr",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/__init__.py": {},
    "bamboolean-master/bamboolean/tests/fixtures.py": {},
    "bamboolean-master/bamboolean/tests/test_interpreter.py": {
        "InterpreterTestCase.test_interpreter__basic": {
            "name": "test_interpreter__basic",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.assertResults": {
            "name": "assertResults",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Optional[Type[BaseException]]",
                    "Optional[Sequence[str]]",
                    "bool",
                    "list",
                    "Optional[Dict[str, Any]]"
                ],
                "sym_tab": [
                    "Optional[Type[BaseException]]",
                    "Optional[Sequence[str]]",
                    "bool",
                    "list",
                    "Optional[Dict[str, Any]]"
                ],
                "results": [
                    "Optional[Type[BaseException]]",
                    "Optional[Sequence[str]]",
                    "bool",
                    "list",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "InterpreterTestCase.test_interpreter": {
            "name": "test_interpreter",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_parentheses": {
            "name": "test_parentheses",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_operators_precedence": {
            "name": "test_operators_precedence",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_implicit_boolean_cast": {
            "name": "test_implicit_boolean_cast",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_empty_expr_evaluates_to_true": {
            "name": "test_empty_expr_evaluates_to_true",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_variable_evaluates_to_its_truthness": {
            "name": "test_variable_evaluates_to_its_truthness",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_constant_evaluates_to_its_truthness": {
            "name": "test_constant_evaluates_to_its_truthness",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_complex_constant_statement": {
            "name": "test_complex_constant_statement",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_not": {
            "name": "test_not",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterpreterTestCase.test_multi_not": {
            "name": "test_multi_not",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_lexer.py": {
        "LexerTestCase.test_tokens": {
            "name": "test_tokens",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LexerTestCase.test_lexer": {
            "name": "test_lexer",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LexerTestCase.test_lexer_raises_on_invalid_token": {
            "name": "test_lexer_raises_on_invalid_token",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_normalize.py": {
        "NormalizeExpr.test_normalize_should_not_change_normalized_terms": {
            "name": "test_normalize_should_not_change_normalized_terms",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_negation": {
            "name": "test_normalize_negation",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_binop": {
            "name": "test_normalize_binop",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_empty": {
            "name": "test_normalize_empty",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_bool": {
            "name": "test_normalize_bool",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalizeExpr.test_normalize_relop": {
            "name": "test_normalize_relop",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_parser.py": {
        "ParserTestCase.test_parser": {
            "name": "test_parser",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parsing_parentheses": {
            "name": "test_parsing_parentheses",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_operators_precedence": {
            "name": "test_operators_precedence",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_implicit_boolean_cast": {
            "name": "test_implicit_boolean_cast",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_constant_statements": {
            "name": "test_constant_statements",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parser_raises_on_invalid_ast": {
            "name": "test_parser_raises_on_invalid_ast",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_empty_expression": {
            "name": "test_empty_expression",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_not": {
            "name": "test_not",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_not_nested": {
            "name": "test_not_nested",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/test_vars_extractor.py": {
        "VarsExtractorTestCase.test_simple_example": {
            "name": "test_simple_example",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_parentheses": {
            "name": "test_parentheses",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_operators_precedence": {
            "name": "test_operators_precedence",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_implicit_boolean_cast": {
            "name": "test_implicit_boolean_cast",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractorTestCase.test_many_vars": {
            "name": "test_many_vars",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bamboolean-master/bamboolean/tests/__init__.py": {},
    "bamboolean-master/bamboolean/walkers/normalize.py": {
        "ExprNegator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]"
                ]
            }
        },
        "ExprNegator.demorgan": {
            "name": "demorgan",
            "location": 10,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprNegator.visit_Constraint": {
            "name": "visit_Constraint",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asBinOp"
                ]
            }
        },
        "ExprNegator.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asBinOp"
                ]
            }
        },
        "ExprNegator.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asUnaryOp",
                    "ForwardRef"
                ]
            }
        },
        "ExprNegator.visit_Var": {
            "name": "visit_Var",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asAST"
                ]
            }
        },
        "ExprNegator.visit_Bool": {
            "name": "visit_Bool",
            "location": 30,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNegator.generic_visit": {
            "name": "generic_visit",
            "location": 34,
            "return": [
                "bamboolean.asAST"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asAST",
                    "List[None]"
                ]
            }
        },
        "ExprNormalizer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]"
                ]
            }
        },
        "ExprNormalizer.normalize": {
            "name": "normalize",
            "location": 42,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprNormalizer.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asUnaryOp",
                    "ForwardRef"
                ]
            }
        },
        "ExprNormalizer.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ExprNormalizer.generic_visit": {
            "name": "generic_visit",
            "location": 54,
            "return": [
                "bamboolean.asAST"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asAST",
                    "List[None]"
                ]
            }
        }
    },
    "bamboolean-master/bamboolean/walkers/vars_extractor.py": {
        "VarsExtractor.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]"
                ]
            }
        },
        "VarsExtractor.extract": {
            "name": "extract",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarsExtractor.visit_Constraint": {
            "name": "visit_Constraint",
            "location": 15,
            "return": [
                "Optional[typed_asast27.AST]",
                "Optional[typed_asast3.AST]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VarsExtractor.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VarsExtractor.visit_Var": {
            "name": "visit_Var",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]"
                ]
            }
        },
        "VarsExtractor.generic_visit": {
            "name": "generic_visit",
            "location": 24,
            "return": [
                "Set[str]",
                "Sequence[object]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bamboolean.asAST",
                    "List[None]"
                ]
            }
        }
    },
    "bamboolean-master/bamboolean/walkers/__init__.py": {}
}
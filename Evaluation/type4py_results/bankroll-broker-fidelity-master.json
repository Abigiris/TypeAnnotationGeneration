{
    "bankroll-broker-fidelity-master/setup.py": {},
    "bankroll-broker-fidelity-master/bankroll/brokers/fidelity/account.py": {
        "_parseFidelityPosition": {
            "name": "_parseFidelityPosition",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ],
                "instrumentFactory": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parseOptionsPosition": {
            "name": "_parseOptionsPosition",
            "location": 100,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        },
        "_parsePositions": {
            "name": "_parsePositions",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "lenient": [
                    "pathlib.Path",
                    "str",
                    "Path",
                    "pathlib2.Path",
                    "bool"
                ]
            }
        },
        "_parseCash": {
            "name": "_parseCash",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "str",
                    "list"
                ]
            }
        },
        "_parseBalance": {
            "name": "_parseBalance",
            "location": 179,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "lenient": [
                    "bool",
                    "pathlib.Path",
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "_parseOptionTransaction": {
            "name": "_parseOptionTransaction",
            "location": 223,
            "return": [
                "bool",
                "str",
                "Type[T]",
                "Tuple[str, List[str]]",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Set[str]"
                ],
                "currency": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "_guessInstrumentFromSymbol": {
            "name": "_guessInstrumentFromSymbol",
            "location": 245,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Optional[str]"
                ],
                "currency": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_parseFidelityTransactionDate": {
            "name": "_parseFidelityTransactionDate",
            "location": 254,
            "return": [
                "str",
                "datetime.date",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "datestr": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_forceParseFidelityTransaction": {
            "name": "_forceParseFidelityTransaction",
            "location": 258,
            "return": [
                "datetime.datetime",
                "Optional[str]",
                "str",
                "int",
                "bankroll.model.Currency",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "t": [
                    "int"
                ],
                "flags": [
                    "Optional[int]",
                    "Optional[datetime.date]"
                ]
            }
        },
        "_parseFidelityTransaction": {
            "name": "_parseFidelityTransaction",
            "location": 283,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "t": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "_parseTransactions": {
            "name": "_parseTransactions",
            "location": 313,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]"
                ],
                "lenient": [
                    "bool",
                    "int"
                ]
            }
        },
        "Settings.help": {
            "name": "help",
            "location": 47,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.sectionName": {
            "name": "sectionName",
            "location": 56,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "str",
                    "Callable",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "FidelityAccount.fromSettings": {
            "name": "fromSettings",
            "location": 346,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ],
                "settings": [
                    "Mapping[bankroll.broker.configuration.Settings, str]",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "lenient": [
                    "bool",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ]
            }
        },
        "FidelityAccount.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "str",
                    "dict"
                ],
                "transactions": [
                    "str",
                    "dict"
                ],
                "lenient": [
                    "int",
                    "list",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "FidelityAccount.positions": {
            "name": "positions",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FidelityAccount.activity": {
            "name": "activity",
            "location": 380,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FidelityAccount.balance": {
            "name": "balance",
            "location": 391,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-fidelity-master/bankroll/brokers/fidelity/__init__.py": {},
    "bankroll-broker-fidelity-master/tests/helpers.py": {
        "cashUSD": {
            "name": "cashUSD",
            "location": 5,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "amount": [
                    "decimal.Decimal",
                    "int",
                    "str"
                ]
            }
        }
    },
    "bankroll-broker-fidelity-master/tests/test_fidelity.py": {
        "TestFidelityPositions.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_positionValidity": {
            "name": "test_positionValidity",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_tBill": {
            "name": "test_tBill",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_aapl": {
            "name": "test_aapl",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_robo": {
            "name": "test_robo",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_spyCall": {
            "name": "test_spyCall",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_spyPut": {
            "name": "test_spyPut",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositions.test_v": {
            "name": "test_v",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.setUp": {
            "name": "setUp",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_activityValidity": {
            "name": "test_activityValidity",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_buySecurity": {
            "name": "test_buySecurity",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_dividendPayment": {
            "name": "test_dividendPayment",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_reinvestShares": {
            "name": "test_reinvestShares",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_shortSaleAndCover": {
            "name": "test_shortSaleAndCover",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_buyToOpenOption": {
            "name": "test_buyToOpenOption",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_sellToCloseOption": {
            "name": "test_sellToCloseOption",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_exercisedOption": {
            "name": "test_exercisedOption",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_assignedOption": {
            "name": "test_assignedOption",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_expiredShortOption": {
            "name": "test_expiredShortOption",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_buyToCloseOption": {
            "name": "test_buyToCloseOption",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_sellToOpenOption": {
            "name": "test_sellToOpenOption",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_securityTransferSale": {
            "name": "test_securityTransferSale",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactions.test_cashInterest": {
            "name": "test_cashInterest",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityBalance.setUp": {
            "name": "setUp",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityBalance.testUSDBalance": {
            "name": "testUSDBalance",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-fidelity-master/tests/__init__.py": {}
}
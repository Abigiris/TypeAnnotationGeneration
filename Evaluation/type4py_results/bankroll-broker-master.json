{
    "bankroll-broker-master/setup.py": {},
    "bankroll-broker-master/bankroll/broker/account.py": {
        "AccountData.fromSettings": {
            "name": "fromSettings",
            "location": 22,
            "return": [
                "\"AccountData\""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "settings": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "lenient": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ]
            }
        },
        "AccountData.positions": {
            "name": "positions",
            "location": 32,
            "return": [
                "typing.Iterable[bankroll.model.Position]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountData.activity": {
            "name": "activity",
            "location": 39,
            "return": [
                "typing.Iterable[bankroll.model.Activity]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountData.balance": {
            "name": "balance",
            "location": 46,
            "return": [
                "bankroll.model.AccountBalance"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/aggregator.py": {
        "AccountAggregator.allSettings": {
            "name": "allSettings",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Union[bool, str]]",
                "List[Dict[str, Any]]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "bool",
                    "dict"
                ],
                "config": [
                    "configuration.Configuration",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AccountAggregator._accountSubclasses": {
            "name": "_accountSubclasses",
            "location": 25,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "start": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "AccountAggregator._loadAccountFromSettings": {
            "name": "_loadAccountFromSettings",
            "location": 35,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Dict[str, Any]",
                "Optional['Job']",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "accountCls": [
                    "Mapping[configuration.Settings, str]",
                    "bool",
                    "str",
                    "BinaryIO",
                    "bytes",
                    "dict"
                ],
                "settings": [
                    "Mapping[configuration.Settings, str]",
                    "bool",
                    "str",
                    "BinaryIO",
                    "bytes",
                    "dict"
                ],
                "lenient": [
                    "Mapping[configuration.Settings, str]",
                    "bool",
                    "str",
                    "BinaryIO",
                    "bytes",
                    "dict"
                ]
            }
        },
        "AccountAggregator.fromSettings": {
            "name": "fromSettings",
            "location": 44,
            "return": [
                "Optional[str]",
                "Exception",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "settings": [
                    "bool",
                    "Mapping[configuration.Settings, str]",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "lenient": [
                    "bool",
                    "Mapping[configuration.Settings, str]",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "AccountAggregator.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "accounts": [
                    "List[int]",
                    "int"
                ],
                "lenient": [
                    "str",
                    "List[str]",
                    "lib.model.album.album.Album",
                    "Sized",
                    "list"
                ]
            }
        },
        "AccountAggregator._deduplicatePositions": {
            "name": "_deduplicatePositions",
            "location": 65,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "Union[List[str], str]",
                "List[Dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "Iterable[bankroll.model.Position]",
                    "dict",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "AccountAggregator.positions": {
            "name": "positions",
            "location": 76,
            "return": [
                "Iterable[str]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountAggregator.activity": {
            "name": "activity",
            "location": 82,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountAggregator.balance": {
            "name": "balance",
            "location": 85,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountAggregator.accounts": {
            "name": "accounts",
            "location": 93,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/configuration.py": {
        "addSettingsToArgumentGroup": {
            "name": "addSettingsToArgumentGroup",
            "location": 70,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "settings": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Type"
                ],
                "group": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Type"
                ]
            }
        },
        "Settings.help": {
            "name": "help",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.sectionName": {
            "name": "sectionName",
            "location": 19,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "str",
                    "Callable",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "searchPaths": [
                    "str",
                    "Optional['Directory']",
                    "Dict[str, str]"
                ],
                "defaultConfig": [
                    "str"
                ],
                "defaultConfigName": [
                    "str"
                ]
            }
        },
        "Configuration.section": {
            "name": "section",
            "location": 43,
            "return": [
                "Mapping",
                "Dict[str, str]",
                "Dict[str, float]",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Callable[..., Awaitable]",
                    "Callable[..., None]",
                    "Awaitable[T]"
                ],
                "overrides": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "addSettingsToArgumentGroup.readSettings": {
            "name": "readSettings",
            "location": 84,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "ns": [
                    "argparse.Namespace",
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/csvsectionslicer.py": {
        "parseSectionsForCSV": {
            "name": "parseSectionsForCSV",
            "location": 53,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "csvFile": [
                    "Iterator[str]",
                    "Union[List, set]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "criteria": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[T]",
                    "Iterable[pathlib.Path]",
                    "list"
                ]
            }
        },
        "CSVSectionCriterion.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "startSectionRowMatch": [
                    "int",
                    "str",
                    "Dict[int, int]",
                    "bool"
                ],
                "endSectionRowMatch": [
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "rowFilter": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "CSVSectionCriterion.startSectionRowMatch": {
            "name": "startSectionRowMatch",
            "location": 22,
            "return": [
                "bool",
                "int",
                "Union[int, float, complex]",
                "Mapping[Any, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.endSectionRowMatch": {
            "name": "endSectionRowMatch",
            "location": 26,
            "return": [
                "List[int]",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.rowFilter": {
            "name": "rowFilter",
            "location": 30,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [
                "str",
                "int",
                "Iterator",
                "Callable",
                "Iterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVSectionCriterion.__eq__": {
            "name": "__eq__",
            "location": 38,
            "return": [
                "str",
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict",
                    "int",
                    "Callable"
                ]
            }
        },
        "parseSectionsForCSV.rowEndsSection": {
            "name": "rowEndsSection",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "row": [
                    "List[str]",
                    "int",
                    "Iterable[str]",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/parsetools.py": {
        "lenientParse": {
            "name": "lenientParse",
            "location": 9,
            "return": [
                "bool",
                "list",
                "List[str]",
                "Counter",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "xs": [
                    "int"
                ],
                "transform": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "lenient": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "lenientParse.f": {
            "name": "f",
            "location": 12,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "bankroll-broker-master/bankroll/broker/__init__.py": {},
    "bankroll-broker-master/tests/helpers.py": {
        "optionals": {
            "name": "optionals",
            "location": 54,
            "return": [
                "bool",
                "Optional[str]",
                "Union[int, None]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "inner": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[int]",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "cashAmounts": {
            "name": "cashAmounts",
            "location": 58,
            "return": [
                "int",
                "bool",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "positionQuantities": {
            "name": "positionQuantities",
            "location": 67,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal",
                    "Optional[Tuple[int, ...]]",
                    "Optional[Sequence[Any]]",
                    "Optional[int]"
                ],
                "max_value": [
                    "decimal.Decimal",
                    "Optional[Tuple[int, ...]]",
                    "Optional[Sequence[Any]]",
                    "Optional[int]"
                ],
                "allow_zero": [
                    "bool",
                    "float",
                    "set"
                ]
            }
        },
        "multipliers": {
            "name": "multipliers",
            "location": 82,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "float",
                "str"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal"
                ],
                "max_value": [
                    "decimal.Decimal"
                ]
            }
        },
        "strikes": {
            "name": "strikes",
            "location": 90,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "min_value": [
                    "decimal.Decimal",
                    "list",
                    "str",
                    "Callable"
                ],
                "max_value": [
                    "decimal.Decimal",
                    "list",
                    "str",
                    "Callable"
                ]
            }
        },
        "cash": {
            "name": "cash",
            "location": 98,
            "return": [
                "str",
                "Settings",
                "bool"
            ],
            "arguments": {
                "currency": [
                    "int",
                    "Callable",
                    "str"
                ],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "exchanges": {
            "name": "exchanges",
            "location": 105,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "bonds": {
            "name": "bonds",
            "location": 109,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "symbol": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "stocks": {
            "name": "stocks",
            "location": 117,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "symbol": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "options": {
            "name": "options",
            "location": 125,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "underlying": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "optionType": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "expiration": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "strike": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "multiplier": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool"
                ]
            }
        },
        "futuresOptions": {
            "name": "futuresOptions",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "symbol": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "underlying": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "optionType": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "expiration": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "strike": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "multiplier": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]"
                ]
            }
        },
        "futures": {
            "name": "futures",
            "location": 169,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "symbol": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "str"
                ],
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "str"
                ],
                "multiplier": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "str"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "str"
                ]
            }
        },
        "forex": {
            "name": "forex",
            "location": 184,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "baseCurrency": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "bytes",
                    "Mapping"
                ],
                "quoteCurrency": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "bytes",
                    "Mapping"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "bytes",
                    "Mapping"
                ]
            }
        },
        "instruments": {
            "name": "instruments",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "currency": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "exchange": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[Optional[str]]",
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "positions": {
            "name": "positions",
            "location": 214,
            "return": [
                "str",
                "Settings",
                "bool"
            ],
            "arguments": {
                "instrument": [
                    "int",
                    "Callable",
                    "str"
                ],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ],
                "costBasis": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "dividendPayments": {
            "name": "dividendPayments",
            "location": 224,
            "return": [
                "str",
                "datetime.datetime",
                "Optional[str]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "date": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ],
                "stock": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ],
                "proceeds": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "trades": {
            "name": "trades",
            "location": 232,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "date": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ],
                "instrument": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ],
                "quantity": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ],
                "amount": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ],
                "fees": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ],
                "flags": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Instrument]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "datetime.datetime",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "activity": {
            "name": "activity",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Cash]",
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "quotes": {
            "name": "quotes",
            "location": 255,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "bid": [
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "bool",
                    "str",
                    "list",
                    "dict"
                ],
                "ask": [
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "bool",
                    "str",
                    "list",
                    "dict"
                ],
                "last": [
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "bool",
                    "str",
                    "list",
                    "dict"
                ],
                "close": [
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "bool",
                    "str",
                    "list",
                    "dict"
                ],
                "grow_ask": [
                    "hypothesis.strategies.SearchStrategy[Optional[bankroll.model.Cash]]",
                    "bool",
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "uniformCurrencyQuotes": {
            "name": "uniformCurrencyQuotes",
            "location": 273,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "bid": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "ask": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "last": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "close": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "grow_ask": [
                    "hypothesis.strategies.SearchStrategy[Optional[decimal.Decimal]]",
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "accountBalances": {
            "name": "accountBalances",
            "location": 292,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "currencies": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "int"
                ],
                "quantities": [
                    "hypothesis.strategies.SearchStrategy[bankroll.model.Currency]",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "cashUSD": {
            "name": "cashUSD",
            "location": 417,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "amount": [
                    "decimal.Decimal",
                    "int",
                    "str"
                ]
            }
        },
        "splitAndStripCSVString": {
            "name": "splitAndStripCSVString",
            "location": 421,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "StubAccount.fromSettings": {
            "name": "fromSettings",
            "location": 380,
            "return": [
                "\"StubAccount\""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "settings": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "lenient": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ]
            }
        },
        "StubAccount.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "activity": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "balance": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "StubAccount.positions": {
            "name": "positions",
            "location": 396,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubAccount.activity": {
            "name": "activity",
            "location": 399,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubAccount.balance": {
            "name": "balance",
            "location": 402,
            "return": [
                "int",
                "List[List[int]]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_aggregator.py": {
        "StubRecursiveAccount.fromSettings": {
            "name": "fromSettings",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "settings": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ],
                "lenient": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[bankroll.broker.configuration.Settings, str]"
                ]
            }
        },
        "StubRecursiveAccount.positions": {
            "name": "positions",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubRecursiveAccount.activity": {
            "name": "activity",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubRecursiveAccount.balance": {
            "name": "balance",
            "location": 31,
            "return": [
                "int",
                "Exception",
                "Dict[str, str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountAggregator.testDataAddsUp": {
            "name": "testDataAddsUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "accounts": []
            }
        },
        "TestAccountAggregator.testDiscoversRecursiveDescendants": {
            "name": "testDiscoversRecursiveDescendants",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_configuration.py": {
        "TestSettings.sectionName": {
            "name": "sectionName",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "str",
                    "Callable",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "TestConfiguration.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfiguration.testSettingsApplied": {
            "name": "testSettingsApplied",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfiguration.testOverrides": {
            "name": "testOverrides",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "TestConfiguration.testAddSettingsToArgumentGroup": {
            "name": "testAddSettingsToArgumentGroup",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_csvsectionslicer.py": {
        "TestFidelityPositionSections.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositionSections.test_stocksSection": {
            "name": "test_stocksSection",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositionSections.test_bondsSection": {
            "name": "test_bondsSection",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityPositionSections.test_optionsSection": {
            "name": "test_optionsSection",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactionsSections.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFidelityTransactionsSections.test_transactionsSection": {
            "name": "test_transactionsSection",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVanguardSections.setUp": {
            "name": "setUp",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVanguardSections.test_investmentsSection": {
            "name": "test_investmentsSection",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVanguardSections.test_tradesSection": {
            "name": "test_tradesSection",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bankroll-broker-master/tests/test_parsetools.py": {
        "failingTransform": {
            "name": "failingTransform",
            "location": 19,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestParsetools.test_lenientParseNonLenient": {
            "name": "test_lenientParseNonLenient",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Iterable[Any]",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "TestParsetools.test_lenientParseEmpty": {
            "name": "test_lenientParseEmpty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [],
                "lenient": []
            }
        },
        "TestParsetools.test_lenientParseLenient": {
            "name": "test_lenientParseLenient",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Iterable[Any]",
                    "int"
                ]
            }
        }
    },
    "bankroll-broker-master/tests/__init__.py": {}
}
{
    "basic-utils-master/setup.py": {},
    "basic-utils-master/basic_utils/core.py": {
        "slurp": {
            "name": "slurp",
            "location": 18,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "to_string": {
            "name": "to_string",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "objects": [
                    "str",
                    "List[object]",
                    "dict",
                    "Optional[Dict]",
                    "bool"
                ],
                "sep": [
                    "str",
                    "List[object]",
                    "dict",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "getattrs": {
            "name": "getattrs",
            "location": 44,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Sequence[str]",
                    "List[int]",
                    "List[str]",
                    "Dict[str, str]",
                    "MutableMapping[Any, Any]",
                    "str"
                ],
                "keys": [
                    "Sequence[str]",
                    "List[int]",
                    "List[str]",
                    "Dict[str, str]",
                    "MutableMapping[Any, Any]",
                    "str"
                ]
            }
        },
        "map_getattr": {
            "name": "map_getattr",
            "location": 49,
            "return": [
                "str",
                "Iterable[int]",
                "float"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Sequence[object]",
                    "Dict[str, Any]"
                ],
                "object_seq": [
                    "str",
                    "Sequence[object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "rgetattr": {
            "name": "rgetattr",
            "location": 56,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "attrs": [
                    "str"
                ]
            }
        },
        "rsetattr": {
            "name": "rsetattr",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable",
                    "float",
                    "Dict[str, Any]"
                ],
                "attr": [
                    "str"
                ],
                "val": [
                    "str",
                    "Callable",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "basic-utils-master/basic_utils/date_helpers.py": {
        "dates_between": {
            "name": "dates_between",
            "location": 12,
            "return": [
                "typing.Iterator[datetime.datetime]"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "Union[str, list]"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "str"
                ]
            }
        },
        "date_ranges_overlap": {
            "name": "date_ranges_overlap",
            "location": 19,
            "return": [
                "datetime.datetime",
                "float",
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "datesX": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "int",
                    "str"
                ],
                "datesY": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "int",
                    "str"
                ]
            }
        }
    },
    "basic-utils-master/basic_utils/dict_helpers.py": {
        "get_keys": {
            "name": "get_keys",
            "location": 15,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "str",
                    "Dict[str, Callable]"
                ],
                "keys": [
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "str",
                    "Dict[str, Callable]"
                ],
                "default": [
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "str",
                    "Dict[str, Callable]"
                ]
            }
        },
        "get_in_dict": {
            "name": "get_in_dict",
            "location": 28,
            "return": [
                "str",
                "Optional[Any]",
                "dict"
            ],
            "arguments": {
                "d": [
                    "Sequence[str]",
                    "dict",
                    "str",
                    "KT",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "keys": [
                    "Sequence[str]",
                    "dict",
                    "str",
                    "KT",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_in_dict": {
            "name": "set_in_dict",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Sequence[str]",
                    "str",
                    "Optional[str]"
                ],
                "keys": [
                    "dict",
                    "Sequence[str]",
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "dict",
                    "Sequence[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "prune_dict": {
            "name": "prune_dict",
            "location": 51,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "List[str]",
                    "int",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "filter_keys": {
            "name": "filter_keys",
            "location": 61,
            "return": [
                "dict",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Callable",
                    "Dict[str, \"Outcome\"]"
                ],
                "predicate": [
                    "dict",
                    "Callable",
                    "Dict[str, \"Outcome\"]"
                ]
            }
        },
        "filter_values": {
            "name": "filter_values",
            "location": 71,
            "return": [
                "dict",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "Callable",
                    "dict",
                    "int",
                    "str",
                    "T"
                ],
                "predicate": [
                    "Callable",
                    "dict",
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "basic-utils-master/basic_utils/primitives.py": {
        "natural_nums": {
            "name": "natural_nums",
            "location": 20,
            "return": [
                "typing.Iterator[builtins.int]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "T"
                ],
                "end": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "comp": {
            "name": "comp",
            "location": 47,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "complement": {
            "name": "complement",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "inc": {
            "name": "inc",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "dec": {
            "name": "dec",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "even": {
            "name": "even",
            "location": 87,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "odd": {
            "name": "odd",
            "location": 97,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "basic-utils-master/basic_utils/seq_helpers.py": {
        "first": {
            "name": "first",
            "location": 28,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "second": {
            "name": "second",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 48,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "seq": [
                    "bool",
                    "Type",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "butlast": {
            "name": "butlast",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "rest": {
            "name": "rest",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "cons": {
            "name": "cons",
            "location": 88,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "item": [
                    "float",
                    "int",
                    "dict",
                    "Type[object]",
                    "list"
                ],
                "seq": [
                    "float",
                    "int",
                    "dict",
                    "Type[object]",
                    "list"
                ]
            }
        },
        "lazy_flatten": {
            "name": "lazy_flatten",
            "location": 97,
            "return": [
                "typing.Iterable"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 109,
            "return": [],
            "arguments": {
                "seq": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "partial_flatten": {
            "name": "partial_flatten",
            "location": 118,
            "return": [],
            "arguments": {
                "seq": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "lazy_dedupe": {
            "name": "lazy_dedupe",
            "location": 128,
            "return": [
                "typing.Iterable"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "Callable"
                ],
                "key": [
                    "Optional[str]",
                    "int",
                    "Callable[[None], Any]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "sorted_index": {
            "name": "sorted_index",
            "location": 141,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "seq": [
                    "Dict[int, Dict[str, Any]]",
                    "List[List]",
                    "List[Dict]",
                    "float",
                    "Dict[str, Any]"
                ],
                "item": [
                    "Dict[int, Dict[str, Any]]",
                    "List[Dict]",
                    "Dict[str, Type]",
                    "float",
                    "str",
                    "Dict[str, float]"
                ],
                "key": [
                    "Optional[str]",
                    "bool",
                    "\"State\"",
                    "int"
                ]
            }
        },
        "dedupe": {
            "name": "dedupe",
            "location": 151,
            "return": [
                "List[str]",
                "Type[Any]",
                "dict"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "bytes",
                    "Optional[bool]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 161,
            "return": [
                "Type[Any]",
                "List[Dict[str, Any]]",
                "Type",
                "bool",
                "int"
            ],
            "arguments": {
                "seqX": [
                    "Optional[int]",
                    "callable"
                ],
                "seqY": [
                    "str"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 175,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "int"
                ]
            }
        },
        "nth": {
            "name": "nth",
            "location": 185,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "n": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "default": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "all_equal": {
            "name": "all_equal",
            "location": 195,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "quantify": {
            "name": "quantify",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pred": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "basic-utils-master/basic_utils/__init__.py": {},
    "basic-utils-master/docs/conf.py": {},
    "basic-utils-master/tests/test_core.py": {
        "test_slurp": {
            "name": "test_slurp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clear": {
            "name": "test_clear",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_to_string": {
            "name": "test_to_string",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getattrs": {
            "name": "test_getattrs",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_getattr": {
            "name": "test_map_getattr",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRecursiveGettersAndSetters.setup_class": {
            "name": "setup_class",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ]
            }
        },
        "TestRecursiveGettersAndSetters.test_rgetattr": {
            "name": "test_rgetattr",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursiveGettersAndSetters.test_rsetattr": {
            "name": "test_rsetattr",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "basic-utils-master/tests/test_date_helpers.py": {
        "test_dates_between": {
            "name": "test_dates_between",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ranges_overlap": {
            "name": "test_ranges_overlap",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "basic-utils-master/tests/test_dict_helpers.py": {
        "test_get_in_dict": {
            "name": "test_get_in_dict",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "list",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "keys": [
                    "dict",
                    "str",
                    "list",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "expected": [
                    "dict",
                    "str",
                    "list",
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "test_get_keys": {
            "name": "test_get_keys",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "expected": [
                    "str",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "default": [
                    "str",
                    "Union[Mapping[str, Any], str, None]"
                ]
            }
        },
        "test_filter_values": {
            "name": "test_filter_values",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "Optional[\"Game\"]",
                    "dict",
                    "Container"
                ]
            }
        },
        "test_filter_keys": {
            "name": "test_filter_keys",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_prune_dict": {
            "name": "test_prune_dict",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_set_in_dict": {
            "name": "test_set_in_dict",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict",
                    "Union['Contributor', 'Coverage']",
                    "List[int]"
                ],
                "keys": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[Dict]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[Dict]"
                ],
                "expected": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "basic-utils-master/tests/test_primitives.py": {
        "test_natural_nums": {
            "name": "test_natural_nums",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_identity": {
            "name": "test_identity",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict"
                ]
            }
        },
        "test_comp": {
            "name": "test_comp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_complement": {
            "name": "test_complement",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inc": {
            "name": "test_inc",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "i": []
            }
        },
        "test_dec": {
            "name": "test_dec",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "i": []
            }
        },
        "test_odd": {
            "name": "test_odd",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [
                    "bool",
                    "int",
                    "Tuple[int, int, int, int]"
                ]
            }
        },
        "test_even": {
            "name": "test_even",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [
                    "bool",
                    "int",
                    "Tuple[int, int, int, int]"
                ]
            }
        }
    },
    "basic-utils-master/tests/test_seq_helpers.py": {
        "test_first": {
            "name": "test_first",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_second": {
            "name": "test_second",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_last": {
            "name": "test_last",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_rest": {
            "name": "test_rest",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_butlast": {
            "name": "test_butlast",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_reverse": {
            "name": "test_reverse",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_flatten": {
            "name": "test_flatten",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_partial_flatten": {
            "name": "test_partial_flatten",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_dedupe": {
            "name": "test_dedupe",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_cons": {
            "name": "test_cons",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_concat": {
            "name": "test_concat",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_sorted_index": {
            "name": "test_sorted_index",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_take": {
            "name": "test_take",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_nth": {
            "name": "test_nth",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_all_equal": {
            "name": "test_all_equal",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "test_quantify": {
            "name": "test_quantify",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "basic-utils-master/tests/__init__.py": {}
}
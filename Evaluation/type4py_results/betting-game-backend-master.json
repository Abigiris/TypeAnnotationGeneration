{
    "betting-game-backend-master/setup.py": {},
    "betting-game-backend-master/app/errors.py": {
        "register_error_handler": {
            "name": "register_error_handler",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "Optional[\"Game\"]",
                    "flask.Flask"
                ]
            }
        },
        "InputValidationError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "InputValidationError.build_general_error": {
            "name": "build_general_error",
            "location": 19,
            "return": [],
            "arguments": {
                "type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SchemaValidationError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "register_error_handler.catch_all": {
            "name": "catch_all",
            "location": 30,
            "return": [
                "tuple"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Exception",
                    "bool",
                    "dict",
                    "werkzeug.exceptions.NotFound"
                ]
            }
        },
        "register_error_handler.input_validation_error": {
            "name": "input_validation_error",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int",
                    "logging.Logger",
                    "Exception",
                    "Callable",
                    "T"
                ]
            }
        },
        "register_error_handler.not_found": {
            "name": "not_found",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "werkzeug.exceptions.NotFound",
                    "str",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "register_error_handler.schema_validation_error": {
            "name": "schema_validation_error",
            "location": 43,
            "return": [
                "List[str]",
                "Optional[List[str]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "error": [
                    "str",
                    "type",
                    "jsonrpc.exceptions.JSONRPCError",
                    "Exception"
                ]
            }
        }
    },
    "betting-game-backend-master/app/jwt.py": {
        "add_claims_to_access_token": {
            "name": "add_claims_to_access_token",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "models.User",
                    "Optional[str]",
                    "flask_appbuilder.security.sqla.models.User",
                    "django.contrib.auth.models.User",
                    "zerver.models.UserProfile",
                    "tracim.models.auth.User"
                ]
            }
        },
        "check_if_token_in_blacklist": {
            "name": "check_if_token_in_blacklist",
            "location": 20,
            "return": [
                "bool",
                "allennlp.models.model.Model",
                "Optional[bytes]",
                "int"
            ],
            "arguments": {
                "decrypted_token": [
                    "float",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "user_identity_lookup": {
            "name": "user_identity_lookup",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "user": [
                    "models.User",
                    "zerver.models.UserProfile",
                    "mediaarchiver.models.Account",
                    "daylighdb.models.Photo",
                    "daylighdb.models.User",
                    "users.models.JustfixUser",
                    "str",
                    "server.models.User",
                    "django.contrib.auth.models.AbstractBaseUser"
                ]
            }
        }
    },
    "betting-game-backend-master/app/mail.py": {
        "send_mail": {
            "name": "send_mail",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "email": [
                    "str",
                    "TextIO",
                    "Type",
                    "type"
                ],
                "template": [
                    "str",
                    "Dict[str, Any]"
                ],
                "params": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "betting-game-backend-master/app/models.py": {
        "_DeleteMixin.delete": {
            "name": "delete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SaveMixin.save": {
            "name": "save",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invitation.find_by_email": {
            "name": "find_by_email",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "ignore_id": [
                    "Optional[str]",
                    "Set[int]",
                    "Optional[int]",
                    "List[Optional[int]]",
                    "Optional[List[str]]",
                    "str",
                    "int"
                ]
            }
        },
        "Invitation.find_by_id": {
            "name": "find_by_id",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "id": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]",
                    "Optional[int]"
                ]
            }
        },
        "Invitation.get_all": {
            "name": "get_all",
            "location": 44,
            "return": [
                "str",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, slice]",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "Token.find_by_jti": {
            "name": "find_by_jti",
            "location": 58,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "type"
                ],
                "jti": [
                    "str",
                    "List[str]",
                    "type"
                ]
            }
        },
        "Token.is_jti_blacklisted": {
            "name": "is_jti_blacklisted",
            "location": 62,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "jti": [
                    "str"
                ]
            }
        },
        "User.find_by_username": {
            "name": "find_by_username",
            "location": 77,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "type"
                ],
                "username": [
                    "str",
                    "List[str]",
                    "type"
                ]
            }
        },
        "User.generate_hash": {
            "name": "generate_hash",
            "location": 81,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "User.verify_hash": {
            "name": "verify_hash",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ],
                "hash": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "betting-game-backend-master/app/request.py": {
        "get_json": {
            "name": "get_json",
            "location": 6,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/resource.py": {
        "admin_required": {
            "name": "admin_required",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "wrapped": [
                    "tuple",
                    "List[str]",
                    "list",
                    "bool",
                    "Dict[str, Any]"
                ],
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            }
        }
    },
    "betting-game-backend-master/app/response.py": {
        "no_content": {
            "name": "no_content",
            "location": 6,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/time.py": {
        "get_invitation_expire": {
            "name": "get_invitation_expire",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime",
                "bool",
                "datetime.datetime.datetime"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/uuid.py": {
        "generate": {
            "name": "generate",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 12,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/config/cli.py": {},
    "betting-game-backend-master/app/config/default.py": {},
    "betting-game-backend-master/app/config/dev.py": {},
    "betting-game-backend-master/app/config/prod.py": {},
    "betting-game-backend-master/app/config/smtp.py": {},
    "betting-game-backend-master/app/config/__init__.py": {
        "get": {
            "name": "get",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "betting-game-backend-master/app/modules/auth.py": {
        "Login.post": {
            "name": "post",
            "location": 22,
            "return": [
                "str",
                "core.models.Recipe",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "Logout.post": {
            "name": "post",
            "location": 49,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/modules/invitations.py": {
        "Invitations.get": {
            "name": "get",
            "location": 20,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {}
        },
        "Invitations.post": {
            "name": "post",
            "location": 41,
            "return": [
                "str",
                "dict",
                "werkzeug.datastructures.FileStorage"
            ],
            "arguments": {}
        },
        "Invitation.put": {
            "name": "put",
            "location": 78,
            "return": [
                "str",
                "dict",
                "werkzeug.datastructures.FileStorage"
            ],
            "arguments": {
                "id": [
                    "int",
                    "uuid.UUID"
                ]
            }
        },
        "Invitation.delete": {
            "name": "delete",
            "location": 92,
            "return": [
                "str",
                "uuid.UUID"
            ],
            "arguments": {
                "id": [
                    "int",
                    "Optional[str]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "betting-game-backend-master/app/modules/secret.py": {
        "SecretResource.get": {
            "name": "get",
            "location": 15,
            "return": [
                "Optional[bool]",
                "str",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/modules/users.py": {
        "Users.post": {
            "name": "post",
            "location": 25,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/app/modules/__init__.py": {
        "register_blueprints": {
            "name": "register_blueprints",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "betting-game-backend-master/app/validator/matcher.py": {
        "_error": {
            "name": "_error",
            "location": 7,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool",
                    "annofabapi.models.JobType",
                    "Optional[Dict[str, Any]]"
                ],
                "options": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Type",
                    "int",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "Matcher.validate": {
            "name": "validate",
            "location": 17,
            "return": [
                "typing.List[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "params": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "And.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.validate": {
            "name": "validate",
            "location": 26,
            "return": [
                "str",
                "int",
                "List[app.models.Subject]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "bool"
                ],
                "params": [
                    "Dict[str, Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MinLength.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_length": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MinLength.validate": {
            "name": "validate",
            "location": 38,
            "return": [
                "bool",
                "dict",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "T",
                    "dict",
                    "Dict[str, str]"
                ],
                "params": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "Required.validate": {
            "name": "validate",
            "location": 46,
            "return": [
                "str",
                "int",
                "List[app.models.Subject]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "params": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "UniqueInvitationEmail.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "UniqueInvitationEmail.validate": {
            "name": "validate",
            "location": 57,
            "return": [
                "dict",
                "Optional[Union[str, Any, Any, Any]]",
                "str",
                "Dict[str, str]",
                "Dict[str, Set[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict",
                    "MutableMapping"
                ],
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict",
                    "MutableMapping"
                ]
            }
        },
        "UniqueUsername.validate": {
            "name": "validate",
            "location": 68,
            "return": [
                "str",
                "bool",
                "projects.models.Project",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]"
                ],
                "params": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "betting-game-backend-master/app/validator/schemas.py": {},
    "betting-game-backend-master/app/validator/__init__.py": {
        "_validate_input": {
            "name": "_validate_input",
            "location": 13,
            "return": [
                "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                "bool"
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "bytes",
                    "str"
                ],
                "wrapped": [
                    "tuple",
                    "List[str]",
                    "list",
                    "bool",
                    "Dict[str, Any]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "validate_input": {
            "name": "validate_input",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_validate_schema": {
            "name": "_validate_schema",
            "location": 38,
            "return": [
                "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                "bool"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ],
                "wrapped": [
                    "tuple",
                    "List[str]",
                    "list",
                    "bool",
                    "Dict[str, Any]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "validate_schema": {
            "name": "validate_schema",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_input.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [],
            "arguments": {
                "wrapped": [],
                "instance": [],
                "args": [],
                "kwargs": []
            }
        },
        "validate_schema.wrapper": {
            "name": "wrapper",
            "location": 51,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "wrapped": [
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "Callable",
                    "Dict[str, Callable[[], None]]"
                ],
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            }
        }
    },
    "betting-game-backend-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "betting-game-backend-master/migrations/versions/7d3413ca5e8d_add_new_fields_for_user.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/migrations/versions/a9661794a1ad_add_invitation.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/migrations/versions/af302421c6dc_initial_setup.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/migrations/versions/d0ea8aad1947_add_columns_in_invitation.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 6,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/errors_test.py": {
        "TestInputValidationError.test_build_general_eror": {
            "name": "test_build_general_eror",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputValidationError.test_init": {
            "name": "test_init",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputValidationError.test_subclass": {
            "name": "test_subclass",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchemaValidationError.test_init": {
            "name": "test_init",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchemaValidationError.test_subclass": {
            "name": "test_subclass",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterErrorHandler.test_catch_all": {
            "name": "test_catch_all",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aioapp.app.Application",
                    "abilian.app.Application",
                    "app.GrpyApp"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "TestRegisterErrorHandler.test_input_validation_error": {
            "name": "test_input_validation_error",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aioapp.app.Application",
                    "abilian.app.Application",
                    "app.GrpyApp"
                ]
            }
        },
        "TestRegisterErrorHandler.test_not_found": {
            "name": "test_not_found",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aioapp.app.Application",
                    "app.GrpyApp"
                ]
            }
        },
        "TestRegisterErrorHandler.test_schema_validation_error": {
            "name": "test_schema_validation_error",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "str"
                ]
            }
        },
        "TestRegisterErrorHandler._get_response": {
            "name": "_get_response",
            "location": 96,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "app.App"
                ],
                "exception": [
                    "Exception",
                    "routemaster.app.App",
                    "flask.Flask"
                ]
            }
        },
        "TestRegisterErrorHandler._get_response.test_route": {
            "name": "test_route",
            "location": 100,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/init_test.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_flask": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_db": [
                    "unittesmock.Mock"
                ],
                "mock_jwt": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_mail": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_cors": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_migrate": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_basic_config": [
                    "unittesmock.Mock"
                ],
                "mock_error_handler": [
                    "unittesmock.Mock",
                    "Tuple[str, mock.Mock]"
                ],
                "mock_blueprints": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/jwt_test.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_claims_to_access_token": {
            "name": "test_add_claims_to_access_token",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "is_admin": [
                    "bool"
                ]
            }
        },
        "test_check_if_token_in_blacklist": {
            "name": "test_check_if_token_in_blacklist",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_token": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_user_identity_lookup": {
            "name": "test_user_identity_lookup",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/mail_test.py": {
        "test_init": {
            "name": "test_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_mail": {
            "name": "test_send_mail",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_message": [
                    "unittesmock.Mock"
                ],
                "mock_config": [
                    "unittesmock.Mock"
                ],
                "mock_render": [
                    "unittesmock.Mock"
                ],
                "mock_mail": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_send_mail_with_exception": {
            "name": "test_send_mail_with_exception",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_message": [
                    "unittesmock.Mock"
                ],
                "mock_config": [
                    "unittesmock.Mock"
                ],
                "mock_render": [
                    "unittesmock.Mock"
                ],
                "mock_mail": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/models_test.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_helper_column": {
            "name": "_helper_column",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "column": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "name": [
                    "str",
                    "Optional[Dict]"
                ],
                "type_cls": [
                    "str",
                    "bool",
                    "Optional[Iterable]",
                    "Optional[str]"
                ],
                "primary_key": [
                    "str",
                    "bool",
                    "Optional[bytes]"
                ],
                "nullable": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "unique": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "string_length": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tracim.models.data.Workspace",
                    "readicomponents.User",
                    "str"
                ]
            }
        },
        "_BinaryExpressionMatcher.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_BinaryExpressionMatcher.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "TestInvitation.test_subclass": {
            "name": "test_subclass",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitation.test_properties": {
            "name": "test_properties",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitation.test_delete": {
            "name": "test_delete",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitation.test_find_by_email": {
            "name": "test_find_by_email",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestInvitation.test_find_by_email_with_id": {
            "name": "test_find_by_email_with_id",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": []
            }
        },
        "TestInvitation.test_find_by_id": {
            "name": "test_find_by_id",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestInvitation.test_get_all": {
            "name": "test_get_all",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": []
            }
        },
        "TestInvitation.test_save": {
            "name": "test_save",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_subclass": {
            "name": "test_subclass",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_properties": {
            "name": "test_properties",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_find_by_jti": {
            "name": "test_find_by_jti",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestToken.test_is_jti_blacklisted": {
            "name": "test_is_jti_blacklisted",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "unittesmock.Mock",
                    "bool"
                ],
                "return_value": [
                    "unittesmock.Mock",
                    "bool",
                    "str",
                    "list",
                    "Callable"
                ],
                "expected": [
                    "str",
                    "float",
                    "bool",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "TestToken.test_save": {
            "name": "test_save",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_subclass": {
            "name": "test_subclass",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_properties": {
            "name": "test_properties",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_find_by_username": {
            "name": "test_find_by_username",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUser.test_generate_hash": {
            "name": "test_generate_hash",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_hash": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestUser.test_save": {
            "name": "test_save",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_verify_hash": {
            "name": "test_verify_hash",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_hash": [
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/request_test.py": {
        "test_get_json": {
            "name": "test_get_json",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        }
    },
    "betting-game-backend-master/tests/resource_test.py": {
        "test_admin_required": {
            "name": "test_admin_required",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_verify_jwt_in_request": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_get_jwt_claims": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_admin_required_when_not_admin": {
            "name": "test_admin_required_when_not_admin",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_verify_jwt_in_request": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_get_jwt_claims": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_admin_required_with_invalid_jwt": {
            "name": "test_admin_required_with_invalid_jwt",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_verify_jwt_in_request": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "mock_get_jwt_claims": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_resource": {
            "name": "test_resource",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_admin_resource": {
            "name": "test_admin_resource",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_authenticated_resource": {
            "name": "test_authenticated_resource",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_readable_resource": {
            "name": "test_user_readable_resource",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_admin_required.function": {
            "name": "function",
            "location": 18,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "test_admin_required_when_not_admin.function": {
            "name": "function",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_admin_required_with_invalid_jwt.function": {
            "name": "function",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/response_test.py": {
        "test_no_content": {
            "name": "test_no_content",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/time_test.py": {
        "test_get_invitation_expire": {
            "name": "test_get_invitation_expire",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/uuid_test.py": {
        "test_generate": {
            "name": "test_generate",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_uuid": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/__init__.py": {},
    "betting-game-backend-master/tests/config/init_test.py": {
        "test_get": {
            "name": "test_get",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "routemaster.app.App"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/config/__init__.py": {},
    "betting-game-backend-master/tests/modules/auth_test.py": {
        "test_module": {
            "name": "test_module",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLogin.test_subclass": {
            "name": "test_subclass",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogin.test_post": {
            "name": "test_post",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_user": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_token": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_create_token": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_decode_token": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestLogin.test_post_with_wrong_password": {
            "name": "test_post_with_wrong_password",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "flask.Flask",
                    "mock.Mock"
                ],
                "mock_user": [
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "tests.async_mock.Mock"
                ],
                "mock_build_general_error": [
                    "unittesmock.Mock",
                    "flask.Flask"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock",
                    "app.GrpyApp",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestLogin.test_post_with_no_user": {
            "name": "test_post_with_no_user",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "flask.Flask",
                    "mock.Mock"
                ],
                "mock_user": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "mock_build_general_error": [
                    "unittesmock.Mock",
                    "flask.Flask"
                ],
                "app": [
                    "flask.Flask",
                    "app.GrpyApp",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestLogout.test_subclass": {
            "name": "test_subclass",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogout.test_post": {
            "name": "test_post",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_jwt": [
                    "unittesmock.Mock"
                ],
                "mock_token": [
                    "unittesmock.Mock"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestLogout.test_post_with_no_token": {
            "name": "test_post_with_no_token",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_jwt": [
                    "unittesmock.Mock"
                ],
                "mock_token": [
                    "unittesmock.Mock"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestLogout.test_post_with_no_jwt": {
            "name": "test_post_with_no_jwt",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_jwt": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/modules/init_test.py": {
        "test_register_blueprint": {
            "name": "test_register_blueprint",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/modules/invitations_test.py": {
        "test_module": {
            "name": "test_module",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestInvitations.test_subclass": {
            "name": "test_subclass",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitations.test_get": {
            "name": "test_get",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_all": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "TestInvitations.test_post": {
            "name": "test_post",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "flask.Flask"
                ],
                "mock_validate_input": [
                    "unittesmock.Mock",
                    "flask.Flask",
                    "mock.Mock"
                ],
                "mock_uuid": [
                    "unittesmock.Mock"
                ],
                "mock_config": [
                    "unittesmock.Mock"
                ],
                "mock_send_mail": [
                    "unittesmock.Mock"
                ],
                "mock_get_invitation_expire": [
                    "unittesmock.Mock"
                ],
                "mock_invitation": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "app": [
                    "unittesmock.Mock",
                    "flask.Flask",
                    "mock.MagicMock"
                ]
            }
        },
        "TestInvitations.test_post_with_error": {
            "name": "test_post_with_error",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "flask.Flask"
                ],
                "mock_validate_input": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_uuid": [
                    "unittesmock.Mock"
                ],
                "mock_config": [
                    "unittesmock.Mock"
                ],
                "mock_send_mail": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "mock_build_general_error": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "app": [
                    "unittesmock.Mock",
                    "flask.Flask",
                    "mock.MagicMock"
                ]
            }
        },
        "TestInvitation.test_subclass": {
            "name": "test_subclass",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitation.test_put": {
            "name": "test_put",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock"
                ],
                "mock_validate_input": [
                    "unittesmock.Mock"
                ],
                "mock_invitation": [
                    "unittesmock.Mock"
                ],
                "app": [
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "flask.Flask"
                ]
            }
        },
        "TestInvitation.test_put_when_not_found": {
            "name": "test_put_when_not_found",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_validate_input": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_invitation": [
                    "unittesmock.Mock",
                    "flask.Flask"
                ],
                "app": [
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "flask.Flask"
                ]
            }
        },
        "TestInvitation.test_delete": {
            "name": "test_delete",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_invitation": [
                    "unittesmock.Mock",
                    "app.executor.Application"
                ],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "TestInvitation.test_delete_when_not_found": {
            "name": "test_delete_when_not_found",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_invitation": [
                    "unittesmock.Mock"
                ],
                "app": [
                    "unittesmock.Mock",
                    "flask.Flask"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/modules/users_test.py": {
        "test_module": {
            "name": "test_module",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestUsers.test_subclass": {
            "name": "test_subclass",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUsers.test_post": {
            "name": "test_post",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_validate_schema": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_validate_input": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_user": [
                    "unittesmock.Mock",
                    "tests.async_mock.Mock",
                    "mock.MagicMock"
                ],
                "app": [
                    "flask.Flask",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/modules/utils.py": {
        "build_authorization_headers": {
            "name": "build_authorization_headers",
            "location": 10,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "dict",
                    "Dict[str, Any]"
                ],
                "is_admin": [
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "List[Tuple[str, str]]",
                    "int",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "get_validator_schema": {
            "name": "get_validator_schema",
            "location": 25,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "mock": [
                    "unittesmock.Mock"
                ]
            }
        },
        "validator_call_through": {
            "name": "validator_call_through",
            "location": 35,
            "return": [
                "bool",
                "Iterable[int]",
                "Tuple[str]"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "Exception",
                    "Callable",
                    "Optional[bool]"
                ],
                "wrapped": [
                    "tuple",
                    "List[str]",
                    "bool",
                    "Type",
                    "Union",
                    "list"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "build_authorization_headers.add_claims_to_access_token": {
            "name": "add_claims_to_access_token",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[str]",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/modules/__init__.py": {},
    "betting-game-backend-master/tests/validator/init_test.py": {
        "test_validate_input": {
            "name": "test_validate_input",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_json": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_validate_input_with_error": {
            "name": "test_validate_input_with_error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_json": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_validate_schema": {
            "name": "test_validate_schema",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_validator": [
                    "unittesmock.Mock"
                ],
                "mock_get_json": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_validate_schema_with_error": {
            "name": "test_validate_schema_with_error",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_validator": [
                    "unittesmock.Mock"
                ],
                "mock_get_json": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_validate_input.function": {
            "name": "function",
            "location": 27,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "test_validate_input_with_error.function": {
            "name": "function",
            "location": 59,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "test_validate_schema.function": {
            "name": "function",
            "location": 107,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "test_validate_schema_with_error.function": {
            "name": "function",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/validator/matcher_test.py": {
        "TestAnd.test_subclass": {
            "name": "test_subclass",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_success": {
            "name": "test_success",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_fail": {
            "name": "test_fail",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinLength.test_subclass": {
            "name": "test_subclass",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinLength.test_success": {
            "name": "test_success",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "TestMinLength.test_fail": {
            "name": "test_fail",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "TestRequired.test_subclass": {
            "name": "test_subclass",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequired.test_success": {
            "name": "test_success",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "TestRequired.test_fail": {
            "name": "test_fail",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUniqueInvitationEmail.test_subclass": {
            "name": "test_subclass",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUniqueInvitationEmail.test_success": {
            "name": "test_success",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_find_by_email": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUniqueInvitationEmail.test_fail": {
            "name": "test_fail",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_find_by_email": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUniqueInvitationEmail.test_success_with_id": {
            "name": "test_success_with_id",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_find_by_email": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestUniqueInvitationEmail.test_fail_with_id": {
            "name": "test_fail_with_id",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_find_by_email": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestUniqueUsername.test_subclass": {
            "name": "test_subclass",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUniqueUsername.test_success": {
            "name": "test_success",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_find_by_username": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestUniqueUsername.test_fail": {
            "name": "test_fail",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_find_by_username": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "betting-game-backend-master/tests/validator/schemas_test.py": {
        "test_schemas": {
            "name": "test_schemas",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_schema_validation": {
            "name": "test_schema_validation",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "betting-game-backend-master/tests/validator/__init__.py": {}
}
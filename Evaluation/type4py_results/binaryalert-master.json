{
    "binaryalert-master/manage.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "binaryalert-master/cli/config.py": {
        "get_input": {
            "name": "get_input",
            "location": 21,
            "return": [
                "set",
                "bool",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "prompt": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "default_value": [
                    "str"
                ],
                "config": [
                    "str",
                    "bool"
                ],
                "property_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "BinaryAlertConfig.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.aws_account_id": {
            "name": "aws_account_id",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BinaryAlertConfig.aws_region": {
            "name": "aws_region",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BinaryAlertConfig.name_prefix": {
            "name": "name_prefix",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BinaryAlertConfig.enable_carbon_black_downloader": {
            "name": "enable_carbon_black_downloader",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Union[str, int]]",
                    "str",
                    "AnyStr"
                ]
            }
        },
        "BinaryAlertConfig.carbon_black_url": {
            "name": "carbon_black_url",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "BinaryAlertConfig.carbon_black_timeout": {
            "name": "carbon_black_timeout",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "AnyStr"
                ]
            }
        },
        "BinaryAlertConfig.encrypted_carbon_black_api_token": {
            "name": "encrypted_carbon_black_api_token",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "BinaryAlertConfig.plaintext_carbon_black_api_token": {
            "name": "plaintext_carbon_black_api_token",
            "location": 177,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.force_destroy": {
            "name": "force_destroy",
            "location": 182,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.binaryalert_analyzer_name": {
            "name": "binaryalert_analyzer_name",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.binaryalert_analyzer_queue_name": {
            "name": "binaryalert_analyzer_queue_name",
            "location": 190,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.binaryalert_downloader_queue_name": {
            "name": "binaryalert_downloader_queue_name",
            "location": 194,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.binaryalert_dynamo_table_name": {
            "name": "binaryalert_dynamo_table_name",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.binaryalert_s3_bucket_name": {
            "name": "binaryalert_s3_bucket_name",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.retro_batch_size": {
            "name": "retro_batch_size",
            "location": 208,
            "return": [
                "str",
                "bool",
                "Mapping[str, str]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig._encrypt_cb_api_token": {
            "name": "_encrypt_cb_api_token",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig._configure_carbon_black": {
            "name": "_configure_carbon_black",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.configure": {
            "name": "configure",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.validate": {
            "name": "validate",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfig.save": {
            "name": "save",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/cli/enqueue_task.py": {
        "EnqueueTask.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EnqueueTask.run": {
            "name": "run",
            "location": 16,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "sqs_queue": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqs_queue_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Callable"
                ],
                "task_queue": [
                    "Optional[Mapping[str, str]]",
                    "dict",
                    "Tuple[List[int], List[int], List[int]]",
                    "List[str]",
                    "Optional[str]",
                    "Dict[int, bool]"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 49,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/cli/exceptions.py": {},
    "binaryalert-master/cli/manager.py": {
        "Manager.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.commands": {
            "name": "commands",
            "location": 34,
            "return": [
                "bytes",
                "Tuple[str, str]",
                "bool",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.help": {
            "name": "help",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.run": {
            "name": "run",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Manager._enqueue": {
            "name": "_enqueue",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "queue_name": [
                    "int",
                    "str"
                ],
                "messages": [
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "summary_func": [
                    "bool",
                    "Optional[str]",
                    "datetime.datetime",
                    "Sequence",
                    "str"
                ]
            }
        },
        "Manager.apply": {
            "name": "apply",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.build": {
            "name": "build",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.cb_copy_all": {
            "name": "cb_copy_all",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.clone_rules": {
            "name": "clone_rules",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.compile_rules": {
            "name": "compile_rules",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.configure": {
            "name": "configure",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.deploy": {
            "name": "deploy",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.destroy": {
            "name": "destroy",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.live_test": {
            "name": "live_test",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.purge_queue": {
            "name": "purge_queue",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager._most_recent_manifest": {
            "name": "_most_recent_manifest",
            "location": 206,
            "return": [
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[bool]",
                "str",
                "Optional[BaseException]",
                "bool",
                "list"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ]
            }
        },
        "Manager._inventory_object_iterator": {
            "name": "_inventory_object_iterator",
            "location": 229,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "manifest_path": [
                    "str"
                ]
            }
        },
        "Manager._s3_batch_iterator": {
            "name": "_s3_batch_iterator",
            "location": 250,
            "return": [
                "typing.Generator[typing.Dict[builtins.str, typing.Any], None, None]"
            ],
            "arguments": {
                "self": [],
                "object_keys": [
                    "Iterable[str]",
                    "str",
                    "core.models.GroupingKey",
                    "Callable"
                ]
            }
        },
        "Manager._s3_msg_summary": {
            "name": "_s3_msg_summary",
            "location": 282,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "simulation.core.common.Resources",
                "float"
            ],
            "arguments": {
                "sqs_message": [
                    "list",
                    "Sequence['cirq.Qid']",
                    "int",
                    "List['cirq.Qid']",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Manager.retro_fast": {
            "name": "retro_fast",
            "location": 288,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.retro_slow": {
            "name": "retro_slow",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.unit_test": {
            "name": "unit_test",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "binaryalert-master/cli/__init__.py": {},
    "binaryalert-master/docs/source/conf.py": {},
    "binaryalert-master/lambda_functions/build.py": {
        "_build_function": {
            "name": "_build_function",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "function_name": [
                    "str",
                    "Optional[str]"
                ],
                "target_directory": [
                    "str",
                    "Iterator[str]",
                    "Optional[str]"
                ],
                "pre_zip_func": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "_build_analyzer_callback": {
            "name": "_build_analyzer_callback",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_package_dir": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "target_directory": [
                    "pathlib.Path",
                    "os.PathLike",
                    "List[pathlib.Path]"
                ],
                "downloader": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        }
    },
    "binaryalert-master/lambda_functions/__init__.py": {},
    "binaryalert-master/lambda_functions/analyzer/analyzer_aws_lib.py": {
        "download_from_s3": {
            "name": "download_from_s3",
            "location": 28,
            "return": [
                "bytes",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "bucket_name": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "object_key": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "download_path": [
                    "str"
                ]
            }
        },
        "_elide_string_middle": {
            "name": "_elide_string_middle",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "max_length": [
                    "int",
                    "str"
                ]
            }
        },
        "publish_to_sns": {
            "name": "publish_to_sns",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "binary": [
                    "str",
                    "lambda_functions.analyzer.binary_info.BinaryInfo"
                ],
                "topic_arn": [
                    "str",
                    "lambda_functions.analyzer.binary_info.BinaryInfo"
                ],
                "subject": [
                    "str",
                    "lambda_functions.analyzer.binary_info.BinaryInfo"
                ]
            }
        },
        "_compute_statistics": {
            "name": "_compute_statistics",
            "location": 87,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "values": [
                    "List[Union[int, float]]",
                    "list",
                    "str",
                    "float",
                    "bytes",
                    "bytearray",
                    "List[str]"
                ]
            }
        },
        "put_metric_data": {
            "name": "put_metric_data",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "num_yara_rules": [
                    "int",
                    "list",
                    "str",
                    "Tuple[int, int]"
                ],
                "binaries": [
                    "int",
                    "list",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "DynamoMatchTable.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "DynamoMatchTable._most_recent_item": {
            "name": "_most_recent_item",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "sha": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "DynamoMatchTable._replace_empty_strings": {
            "name": "_replace_empty_strings",
            "location": 196,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "DynamoMatchTable._create_new_entry": {
            "name": "_create_new_entry",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "analyzer_version": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "DynamoMatchTable._add_s3_key": {
            "name": "_add_s3_key",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "str"
                ],
                "analyzer_version": [
                    "str"
                ]
            }
        },
        "DynamoMatchTable.save_matches": {
            "name": "save_matches",
            "location": 232,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "analyzer_version": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "binaryalert-master/lambda_functions/analyzer/binary_info.py": {
        "BinaryInfo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]"
                ],
                "object_key": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "yara_analyzer": [
                    "list",
                    "str"
                ]
            }
        },
        "BinaryInfo.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryInfo._download_from_s3": {
            "name": "_download_from_s3",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryInfo.__enter__": {
            "name": "__enter__",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryInfo.__exit__": {
            "name": "__exit__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "Optional[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[Exception]"
                ],
                "exception_value": [
                    "Optional[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[Exception]"
                ],
                "traceback": [
                    "Optional[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[Exception]"
                ]
            }
        },
        "BinaryInfo.matched_rule_ids": {
            "name": "matched_rule_ids",
            "location": 78,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryInfo.filepath": {
            "name": "filepath",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryInfo.save_matches_and_alert": {
            "name": "save_matches_and_alert",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "analyzer_version": [
                    "bool",
                    "str"
                ],
                "dynamo_table_name": [
                    "str"
                ],
                "sns_topic_arn": [
                    "str",
                    "int"
                ],
                "sns_enabled": [
                    "bool",
                    "str"
                ]
            }
        },
        "BinaryInfo.publish_negative_match_result": {
            "name": "publish_negative_match_result",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sns_topic_arn": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BinaryInfo.summary": {
            "name": "summary",
            "location": 120,
            "return": [
                "str",
                "dict",
                "Dict[str, Dict[str, str]]",
                "float",
                "int",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/lambda_functions/analyzer/common.py": {},
    "binaryalert-master/lambda_functions/analyzer/file_hash.py": {
        "_read_in_chunks": {
            "name": "_read_in_chunks",
            "location": 8,
            "return": [
                "DefaultDict",
                "str",
                "bytes"
            ],
            "arguments": {
                "file_object": [
                    "bytes",
                    "str",
                    "int"
                ],
                "chunk_size": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "compute_hashes": {
            "name": "compute_hashes",
            "location": 26,
            "return": [
                "bool",
                "str",
                "IO[Any]",
                "float",
                "Tuple[bytes]",
                "int"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "binaryalert-master/lambda_functions/analyzer/main.py": {
        "_objects_to_analyze": {
            "name": "_objects_to_analyze",
            "location": 25,
            "return": [
                "str",
                "dict",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "analyze_lambda_handler": {
            "name": "analyze_lambda_handler",
            "location": 55,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ],
                "lambda_context": [
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "binaryalert-master/lambda_functions/analyzer/yara_analyzer.py": {
        "_convert_yextend_to_yara_match": {
            "name": "_convert_yextend_to_yara_match",
            "location": 33,
            "return": [
                "str",
                "OrderedDict",
                "bool",
                "dict",
                "Iterable[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "yextend_json": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "YaraAnalyzer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compiled_rules_file": [
                    "str",
                    "Set[str]",
                    "Optional[Callable[..., Any]]",
                    "Pattern"
                ]
            }
        },
        "YaraAnalyzer.num_rules": {
            "name": "num_rules",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YaraAnalyzer._yara_variables": {
            "name": "_yara_variables",
            "location": 82,
            "return": [
                "List[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "original_target_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "YaraAnalyzer._yextend_matches": {
            "name": "_yextend_matches",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "target_file": [
                    "str",
                    "int"
                ]
            }
        },
        "YaraAnalyzer.analyze": {
            "name": "analyze",
            "location": 143,
            "return": [
                "str",
                "Sequence[Sequence[T]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "target_file": [
                    "str"
                ],
                "original_target_path": [
                    "str"
                ]
            }
        }
    },
    "binaryalert-master/lambda_functions/analyzer/__init__.py": {},
    "binaryalert-master/lambda_functions/downloader/main.py": {
        "_iter_download_records": {
            "name": "_iter_download_records",
            "location": 38,
            "return": [
                "typing.Generator[typing.Tuple[builtins.str, builtins.int], None, None]"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        },
        "_build_metadata": {
            "name": "_build_metadata",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "binary": [
                    "Type[T]",
                    "int",
                    "dict",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "_upload_to_s3": {
            "name": "_upload_to_s3",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "binary": [
                    "os.DirEntry",
                    "bool",
                    "str"
                ]
            }
        },
        "_process_md5": {
            "name": "_process_md5",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "md5": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "int"
                ]
            }
        },
        "_publish_metrics": {
            "name": "_publish_metrics",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "receive_counts": [
                    "int",
                    "Sequence[T]",
                    "Callable[[], float]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "download_lambda_handler": {
            "name": "download_lambda_handler",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "int",
                    "Mapping",
                    "Dict[str, Any]",
                    "List[dict]",
                    "Type[T]",
                    "zam_repondeur.models.Lecture"
                ],
                "_": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        }
    },
    "binaryalert-master/lambda_functions/downloader/__init__.py": {},
    "binaryalert-master/rules/clone_rules.py": {
        "_copy_required": {
            "name": "_copy_required",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[List[str]]"
                ],
                "include": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ],
                "exclude": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_files_to_copy": {
            "name": "_files_to_copy",
            "location": 32,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "cloned_repo_root": [
                    "str",
                    "int"
                ],
                "include": [
                    "Optional[List[str]]",
                    "str"
                ],
                "exclude": [
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "_clone_repo": {
            "name": "_clone_repo",
            "location": 44,
            "return": [
                "str",
                "List[bytes]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "include": [
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "exclude": [
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "clone_remote_rules": {
            "name": "clone_remote_rules",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "binaryalert-master/rules/compile_rules.py": {
        "_find_yara_files": {
            "name": "_find_yara_files",
            "location": 10,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {}
        },
        "compile_rules": {
            "name": "compile_rules",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "target_path": [
                    "str"
                ]
            }
        }
    },
    "binaryalert-master/rules/__init__.py": {},
    "binaryalert-master/rules/public/hacktool/linux/__init__.py": {},
    "binaryalert-master/rules/public/malware/linux/__init__.py": {},
    "binaryalert-master/rules/public/ransomware/linux/__init__.py": {},
    "binaryalert-master/rules/public/ransomware/macos/__init__.py": {},
    "binaryalert-master/rules/public/ransomware/multi/__init__.py": {},
    "binaryalert-master/tests/common.py": {
        "MockLambdaContext.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_version": [
                    "int",
                    "bool",
                    "Callable",
                    "float"
                ],
                "time_limit_ms": [
                    "int",
                    "bool"
                ],
                "decrement_ms": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "binaryalert-master/tests/live_test.py": {
        "_upload_test_files_to_s3": {
            "name": "_upload_test_files_to_s3",
            "location": 15,
            "return": [
                "dict",
                "List[dict]",
                "Union[dict, List[Any]]",
                "list",
                "str"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ]
            }
        },
        "_lambda_production_version": {
            "name": "_lambda_production_version",
            "location": 36,
            "return": [
                "Optional[int]",
                "Type[T]",
                "List[str]"
            ],
            "arguments": {
                "function_name": [
                    "str"
                ]
            }
        },
        "_query_dynamo_for_test_files": {
            "name": "_query_dynamo_for_test_files",
            "location": 46,
            "return": [
                "set",
                "Mapping[str, Any]",
                "str",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "table_name": [
                    "Dict[str, 'LabwareDefinition']",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Optional[Dict[str, str]]"
                ],
                "file_info": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "analyzer_version": [
                    "Dict[str, 'LabwareDefinition']",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Optional[Dict[str, str]]"
                ],
                "max_attempts": [
                    "int",
                    "Callable[[], float]"
                ]
            }
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ],
                "file_info": [
                    "Dict[str, str]",
                    "str"
                ],
                "table_name": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, Any]"
                ],
                "analyzer_version": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ],
                "analyzer_function_name": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]",
                    "int"
                ],
                "table_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "binaryalert-master/tests/__init__.py": {},
    "binaryalert-master/tests/cli/config_test.py": {
        "BinaryAlertConfigTestFakeFilesystem.test_property_accesses": {
            "name": "test_property_accesses",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_variable_not_defined": {
            "name": "test_variable_not_defined",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_invalid_aws_account_id": {
            "name": "test_invalid_aws_account_id",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_invalid_aws_region": {
            "name": "test_invalid_aws_region",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_invalid_name_prefix": {
            "name": "test_invalid_name_prefix",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_invalid_enable_carbon_black_downloader": {
            "name": "test_invalid_enable_carbon_black_downloader",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_invalid_carbon_black_url": {
            "name": "test_invalid_carbon_black_url",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_invalid_encrypted_carbon_black_api_token": {
            "name": "test_invalid_encrypted_carbon_black_api_token",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_encrypt_cb_api_token": {
            "name": "test_encrypt_cb_api_token",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": [],
                "mock_print": [],
                "mock_getpass": [],
                "mock_client": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_configure_with_defaults": {
            "name": "test_configure_with_defaults",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_encrypt": [],
                "mock_user_input": [
                    "mock.Mock"
                ]
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_configure_with_no_defaults": {
            "name": "test_configure_with_no_defaults",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_encrypt": [],
                "mock_user_input": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_validate_valid_with_downloader": {
            "name": "test_validate_valid_with_downloader",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_validate_valid_without_downloader": {
            "name": "test_validate_valid_without_downloader",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_validate_invalid": {
            "name": "test_validate_invalid",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryAlertConfigTestFakeFilesystem.test_save": {
            "name": "test_save",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/tests/cli/enqueue_task_test.py": {
        "MockQueue.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockQueue.send_messages": {
            "name": "send_messages",
            "location": 20,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTask.run": {
            "name": "run",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "bool"
                ]
            }
        },
        "EnqueueTaskTest.test_task_run": {
            "name": "test_task_run",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": []
            }
        },
        "WorkerTest.test_worker_run": {
            "name": "test_worker_run",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_resource": []
            }
        }
    },
    "binaryalert-master/tests/cli/manager_test.py": {
        "ManagerTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_commands": {
            "name": "test_commands",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_help": {
            "name": "test_help",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_enqueue": {
            "name": "test_enqueue",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_print": [],
                "mock_worker": [],
                "mock_task_queue": []
            }
        },
        "ManagerTest.test_apply": {
            "name": "test_apply",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": [
                    "mock.Mock"
                ]
            }
        },
        "ManagerTest.test_build": {
            "name": "test_build",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_build": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "ManagerTest.test_cb_copy_all_not_enabled": {
            "name": "test_cb_copy_all_not_enabled",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_clone_rules": {
            "name": "test_clone_rules",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_clone": []
            }
        },
        "ManagerTest.test_compile_rules": {
            "name": "test_compile_rules",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_print": [],
                "mock_compile": []
            }
        },
        "ManagerTest.test_configure": {
            "name": "test_configure",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_print": [],
                "mock_configure": []
            }
        },
        "ManagerTest.test_deploy": {
            "name": "test_deploy",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_apply": [],
                "mock_build": [],
                "mock_test": []
            }
        },
        "ManagerTest.test_destroy": {
            "name": "test_destroy",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_check_call": [
                    "mock.MagicMock"
                ],
                "mock_call": [],
                "mock_print": [],
                "mock_user_input": [
                    "mock.Mock"
                ]
            }
        },
        "ManagerTest.test_live_test": {
            "name": "test_live_test",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_live_test": [
                    "mock.Mock"
                ]
            }
        },
        "ManagerTest.test_purge_queue": {
            "name": "test_purge_queue",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_resource": []
            }
        },
        "ManagerTest.test_most_recent_manifest_found": {
            "name": "test_most_recent_manifest_found",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_most_recent_manifest_not_found": {
            "name": "test_most_recent_manifest_not_found",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_s3_batch_iterator": {
            "name": "test_s3_batch_iterator",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_s3_msg_summary": {
            "name": "test_s3_msg_summary",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerTest.test_retro_fast_no_manifest": {
            "name": "test_retro_fast_no_manifest",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_print": [],
                "mock_manifest": [],
                "mock_resource": []
            }
        },
        "ManagerTest.test_retro_fast": {
            "name": "test_retro_fast",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_print": [],
                "mock_manifest": [],
                "mock_enqueue": [],
                "mock_resource": []
            }
        },
        "ManagerTest.test_retro_slow": {
            "name": "test_retro_slow",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_enqueue": [],
                "mock_resource": []
            }
        }
    },
    "binaryalert-master/tests/cli/_common.py": {
        "mock_input": {
            "name": "mock_input",
            "location": 10,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "prompt": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FakeFilesystemBase._write_config": {
            "name": "_write_config",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "account_id": [
                    "str",
                    "bool"
                ],
                "region": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "bool"
                ],
                "enable_downloader": [
                    "str",
                    "bool"
                ],
                "cb_url": [
                    "str",
                    "bool"
                ],
                "encrypted_api_token": [
                    "str",
                    "bool"
                ]
            }
        },
        "FakeFilesystemBase.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/tests/cli/__init__.py": {},
    "binaryalert-master/tests/lambda_functions/build_test.py": {
        "_mock_pip_main": {
            "name": "_mock_pip_main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "args_list": [
                    "str",
                    "list",
                    "List[Tuple[bool, str]]",
                    "List[str]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "BuildTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildTest._verify_filenames": {
            "name": "_verify_filenames",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "archive_path": [
                    "str"
                ],
                "expected_filenames": [
                    "str",
                    "Optional[str]"
                ],
                "subset": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BuildTest.test_build_all": {
            "name": "test_build_all",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_pip": [],
                "mock_print": []
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/__init__.py": {},
    "binaryalert-master/tests/lambda_functions/analyzer/analyzer_aws_lib_test.py": {
        "AnalyzerAWSLibStandaloneTest.test_elide_string_middle": {
            "name": "test_elide_string_middle",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoMatchTableTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoMatchTableTest.test_new_sha": {
            "name": "test_new_sha",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_table": []
            }
        },
        "DynamoMatchTableTest.test_new_version_same_rules_same_objects": {
            "name": "test_new_version_same_rules_same_objects",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_table": []
            }
        },
        "DynamoMatchTableTest.test_new_version_multiple_objects": {
            "name": "test_new_version_multiple_objects",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_table": []
            }
        },
        "DynamoMatchTableTest.test_new_version_new_rules_same_objects": {
            "name": "test_new_version_new_rules_same_objects",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_table": []
            }
        },
        "DynamoMatchTableTest.test_same_version_same_rules_new_object": {
            "name": "test_same_version_same_rules_new_object",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_table": [
                    "mock.MagicMock"
                ]
            }
        },
        "DynamoMatchTableTest.test_old_version": {
            "name": "test_old_version",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_logger": [],
                "mock_table": []
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/analyzer/file_hash_test.py": {
        "FileUtilsTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileUtilsTest.test_read_in_chunks": {
            "name": "test_read_in_chunks",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileUtilsTest.test_read_in_chunks_empty_file": {
            "name": "test_read_in_chunks_empty_file",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileUtilsTest.test_compute_hashes": {
            "name": "test_compute_hashes",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileUtilsTest.test_compute_hashes_empty_file": {
            "name": "test_compute_hashes_empty_file",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/analyzer/main_test.py": {
        "MockS3Object.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]",
                    "Collection[str]",
                    "List[str]"
                ],
                "object_key": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Collection[str]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "MockS3Object.download_file": {
            "name": "download_file",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "download_path": [
                    "str"
                ]
            }
        },
        "MockS3Object.last_modified": {
            "name": "last_modified",
            "location": 45,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockS3Object.metadata": {
            "name": "metadata",
            "location": 49,
            "return": [
                "IO",
                "Callable",
                "IO[str]",
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainTest.setUp": {
            "name": "setUp",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainTest.test_objects_to_analyze_simple": {
            "name": "test_objects_to_analyze_simple",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainTest.test_objects_to_analyze_sqs_event": {
            "name": "test_objects_to_analyze_sqs_event",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainTest.test_analyze_lambda_handler": {
            "name": "test_analyze_lambda_handler",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_output": [],
                "mock_call": []
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/analyzer/yara_analyzer_test.py": {
        "YaraAnalyzerTest.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YaraAnalyzerTest._rule_id": {
            "name": "_rule_id",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "str",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "YaraAnalyzerTest._assert_subprocess_calls": {
            "name": "_assert_subprocess_calls",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "mock_subprocess": [
                    "bytes",
                    "List[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "dict"
                ]
            }
        },
        "YaraAnalyzerTest.test_yara_variables": {
            "name": "test_yara_variables",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YaraAnalyzerTest.test_yara_variables_no_file_extension": {
            "name": "test_yara_variables_no_file_extension",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YaraAnalyzerTest.test_yara_variables_no_file_path": {
            "name": "test_yara_variables_no_file_path",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YaraAnalyzerTest.test_analyze": {
            "name": "test_analyze",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": []
            }
        },
        "YaraAnalyzerTest.test_analyze_no_matches": {
            "name": "test_analyze_no_matches",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": []
            }
        },
        "YaraAnalyzerTest.test_analyze_match_with_target_path": {
            "name": "test_analyze_match_with_target_path",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": []
            }
        },
        "YaraAnalyzerTest.test_analyze_with_yextend": {
            "name": "test_analyze_with_yextend",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": []
            }
        },
        "YaraAnalyzerTest.test_analyze_yextend_exception": {
            "name": "test_analyze_yextend_exception",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_subprocess": []
            }
        },
        "YextendConversionTest.setUp": {
            "name": "setUp",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YextendConversionTest.test_convert_no_matches": {
            "name": "test_convert_no_matches",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YextendConversionTest.test_convert_one_match": {
            "name": "test_convert_one_match",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YextendConversionTest.test_convert_complex_matches": {
            "name": "test_convert_complex_matches",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/analyzer/yara_mocks.py": {
        "mock_yara_load": {
            "name": "mock_yara_load",
            "location": 45,
            "return": [
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "rules_file": [
                    "str"
                ]
            }
        },
        "save_test_yara_rules": {
            "name": "save_test_yara_rules",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "rules_save_file": [
                    "str",
                    "io.BytesIO"
                ],
                "empty_rules_file": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "YaraRulesMock.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yara_rules_object": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "YaraRulesMock.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "YaraRulesMock.match": {
            "name": "match",
            "location": 39,
            "return": [
                "bool",
                "Callable[[Any], bool]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "target_file": [
                    "str",
                    "float"
                ],
                "externals": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "BinaryIO",
                    "IO",
                    "io.TextIOBase"
                ]
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/analyzer/__init__.py": {},
    "binaryalert-master/tests/lambda_functions/downloader/main_test.py": {
        "MockBinary.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "dict",
                    "bytes",
                    "List[Callable]"
                ]
            }
        },
        "MockBinary.__getattr__": {
            "name": "__getattr__",
            "location": 26,
            "return": [
                "TextIO",
                "IO[bytes]",
                "cdp.io.StreamHandle",
                "BinaryIO",
                "int",
                "trezor.io.HID"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "MainTest.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainTest.test_upload_to_s3": {
            "name": "test_upload_to_s3",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBinary.MockVirusTotal.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "binaryalert-master/tests/lambda_functions/downloader/__init__.py": {},
    "binaryalert-master/tests/rules/clone_rules_test.py": {
        "CopyRequiredTest.test_copy_required_no_lists": {
            "name": "test_copy_required_no_lists",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyRequiredTest.test_copy_required_include_list": {
            "name": "test_copy_required_include_list",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyRequiredTest.test_copy_required_exclude_list": {
            "name": "test_copy_required_exclude_list",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyRequiredTest.test_copy_required_include_and_exclude": {
            "name": "test_copy_required_include_and_exclude",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CloneRulesTest.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CloneRulesTest._mock_git_clone": {
            "name": "_mock_git_clone",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CloneRulesTest.test_clone_remote_rules": {
            "name": "test_clone_remote_rules",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_print": []
            }
        }
    },
    "binaryalert-master/tests/rules/compile_rules_test.py": {
        "FindYaraFilesTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FindYaraFilesTest._sorted_find": {
            "name": "_sorted_find",
            "location": 22,
            "return": [
                "str",
                "Tuple[str]",
                "AbstractSet[str]"
            ],
            "arguments": {}
        },
        "FindYaraFilesTest.test_find_yara_rules": {
            "name": "test_find_yara_rules",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FindYaraFilesTest.test_find_yara_rules_mixed_case": {
            "name": "test_find_yara_rules_mixed_case",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FindYaraFilesTest.test_find_yara_rules_skip_other_files": {
            "name": "test_find_yara_rules_skip_other_files",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileRulesTest.tearDown": {
            "name": "tearDown",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompileRulesTest.test_compilation": {
            "name": "test_compilation",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/tests/rules/eicar_rule_test.py": {
        "EicarRuleTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EicarRuleTest.test_match_eicar_string": {
            "name": "test_match_eicar_string",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EicarRuleTest.test_match_eicar_with_trailing_spaces": {
            "name": "test_match_eicar_with_trailing_spaces",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EicarRuleTest.test_no_match_if_eicar_is_not_beginning": {
            "name": "test_no_match_if_eicar_is_not_beginning",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EicarRuleTest.test_no_match_if_eicar_is_not_end": {
            "name": "test_no_match_if_eicar_is_not_end",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binaryalert-master/tests/rules/__init__.py": {}
}
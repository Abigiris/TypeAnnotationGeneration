{
    "biosearch-master/ftp_tests.py": {},
    "biosearch-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 54,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "biosearch-master/biosearch/Config.py": {},
    "biosearch-master/biosearch/main.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "biosearch-master/biosearch/__init__.py": {},
    "biosearch-master/biosearch/__version__.py": {},
    "biosearch-master/biosearch/common/db.py": {},
    "biosearch-master/biosearch/common/es.py": {
        "get_all_index_names": {
            "name": "get_all_index_names",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "es": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "add_pubmed_alias": {
            "name": "add_pubmed_alias",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "es": [
                    "int",
                    "str"
                ],
                "index_name": [
                    "int",
                    "str"
                ],
                "alias_name": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "index_exists": {
            "name": "index_exists",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "es": [
                    "str"
                ],
                "index_name": [
                    "str"
                ]
            }
        },
        "delete_index": {
            "name": "delete_index",
            "location": 40,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "es": [
                    "str",
                    "Sequence[str]",
                    "dict"
                ],
                "index_name": [
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "create_pubmed_index": {
            "name": "create_pubmed_index",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "es": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "index_name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "delete_pubmed_indexes": {
            "name": "delete_pubmed_indexes",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "es": [
                    "str",
                    "Set[str]",
                    "Tuple[str]",
                    "dict"
                ],
                "index_name": [
                    "str",
                    "Set[str]",
                    "Tuple[str]",
                    "dict"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 73,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Optional[str]",
                "List[str]",
                "int",
                "Callable[[], T]",
                "Optional[Type[Exception]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "bulk_load_docs": {
            "name": "bulk_load_docs",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "es": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "float"
                ],
                "docs": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "biosearch-master/biosearch/common/__init__.py": {},
    "biosearch-master/biosearch/pubmed/collect.py": {
        "Downloader.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str",
                    "Optional[Union[Any, str]]",
                    "List[str]"
                ]
            }
        },
        "Downloader.xml_file_generator": {
            "name": "xml_file_generator",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "biosearch-master/biosearch/pubmed/convert.py": {
        "cleanup_text": {
            "name": "cleanup_text",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "chunk": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "xml_to_json": {
            "name": "xml_to_json",
            "location": 423,
            "return": [
                "Iterator[object]",
                "Dict[str, Any]",
                "int",
                "set"
            ],
            "arguments": {
                "xml_chunk": [
                    "TextIO",
                    "BinaryIO",
                    "str",
                    "IO[str]"
                ]
            }
        },
        "PubMed_XML_Parser.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_chunk": [
                    "bool",
                    "IO[Any]",
                    "Sequence[str]",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_pmid": {
            "name": "get_pmid",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "PubMed_XML_Parser.get_title": {
            "name": "get_title",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "FrozenSet[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_abstract": {
            "name": "get_abstract",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "BinaryIO",
                    "Optional[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_author_info": {
            "name": "get_author_info",
            "location": 95,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "str"
                ]
            }
        },
        "PubMed_XML_Parser.get_pub_type": {
            "name": "get_pub_type",
            "location": 138,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "Exception"
                ]
            }
        },
        "PubMed_XML_Parser.get_journal_info": {
            "name": "get_journal_info",
            "location": 160,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "str",
                    "IO[Any]",
                    "Dict[str, str]",
                    "Sequence[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_mesh_terms": {
            "name": "get_mesh_terms",
            "location": 265,
            "return": [
                "List[str]",
                "bytes",
                "Optional[str]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "FrozenSet[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_chemical_substances": {
            "name": "get_chemical_substances",
            "location": 291,
            "return": [
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "FrozenSet[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_keywords": {
            "name": "get_keywords",
            "location": 317,
            "return": [
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "str"
                ]
            }
        },
        "PubMed_XML_Parser.get_reference_list": {
            "name": "get_reference_list",
            "location": 338,
            "return": [
                "str",
                "set",
                "Callable[[str], str]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "str",
                    "FrozenSet[str]",
                    "Optional[str]"
                ]
            }
        },
        "PubMed_XML_Parser.get_articles_ids": {
            "name": "get_articles_ids",
            "location": 379,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "xml_record": [
                    "str",
                    "int",
                    "List[str]",
                    "TextIO",
                    "bool"
                ]
            }
        }
    },
    "biosearch-master/biosearch/pubmed/load.py": {},
    "biosearch-master/biosearch/pubmed/test1.py": {},
    "biosearch-master/biosearch/pubmed/__init__.py": {},
    "biosearch-master/tests/test_config.py": {
        "test_config_no_envs": {
            "name": "test_config_no_envs",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    }
}
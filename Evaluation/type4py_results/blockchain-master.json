{
    "blockchain-master/bridge/setup.py": {},
    "blockchain-master/bridge/end2end-tests/tests/test_transfer.py": {
        "assert_within_timeout": {
            "name": "assert_within_timeout",
            "location": 73,
            "return": [],
            "arguments": {
                "check_function": [],
                "timeout": [],
                "poll_period": []
            }
        },
        "assert_after_timout": {
            "name": "assert_after_timout",
            "location": 95,
            "return": [],
            "arguments": {
                "check_function": [],
                "timeout": []
            }
        },
        "mine_min_blocks": {
            "name": "mine_min_blocks",
            "location": 259,
            "return": [],
            "arguments": {
                "web3": [],
                "number_of_blocks": []
            }
        },
        "accounts": {
            "name": "accounts",
            "location": 274,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "account_keys": {
            "name": "account_keys",
            "location": 279,
            "return": [],
            "arguments": {
                "account_keys": []
            }
        },
        "node_home": {
            "name": "node_home",
            "location": 284,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "node_foreign": {
            "name": "node_foreign",
            "location": 296,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "web3_home": {
            "name": "web3_home",
            "location": 308,
            "return": [],
            "arguments": {
                "node_home": [],
                "accounts": [],
                "account_keys": []
            }
        },
        "web3_foreign": {
            "name": "web3_foreign",
            "location": 322,
            "return": [],
            "arguments": {
                "node_foreign": [],
                "accounts": [],
                "account_keys": []
            }
        },
        "deploy_contract_on_chain": {
            "name": "deploy_contract_on_chain",
            "location": 336,
            "return": [],
            "arguments": {
                "contract_assets": [],
                "account_keys": []
            }
        },
        "token_contract": {
            "name": "token_contract",
            "location": 354,
            "return": [],
            "arguments": {
                "deploy_contract_on_chain": [],
                "web3_foreign": [],
                "accounts": []
            }
        },
        "foreign_bridge_contract": {
            "name": "foreign_bridge_contract",
            "location": 382,
            "return": [],
            "arguments": {
                "deploy_contract_on_chain": [],
                "web3_foreign": [],
                "token_contract": []
            }
        },
        "validators": {
            "name": "validators",
            "location": 390,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "validator_keys": {
            "name": "validator_keys",
            "location": 395,
            "return": [],
            "arguments": {
                "account_keys": []
            }
        },
        "bridge_addresses": {
            "name": "bridge_addresses",
            "location": 400,
            "return": [],
            "arguments": {
                "validators": []
            }
        },
        "system_address": {
            "name": "system_address",
            "location": 405,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "validator_proxy_contract": {
            "name": "validator_proxy_contract",
            "location": 411,
            "return": [],
            "arguments": {
                "deploy_contract_on_chain": [],
                "web3_home": [],
                "system_address": []
            }
        },
        "validator_proxy_with_validators": {
            "name": "validator_proxy_with_validators",
            "location": 423,
            "return": [],
            "arguments": {
                "validator_proxy_contract": [],
                "system_address": [],
                "validators": []
            }
        },
        "home_bridge_contract": {
            "name": "home_bridge_contract",
            "location": 434,
            "return": [],
            "arguments": {
                "deploy_contract_on_chain": [],
                "validator_proxy_with_validators": [],
                "web3_home": [],
                "accounts": []
            }
        },
        "bridges": {
            "name": "bridges",
            "location": 457,
            "return": [],
            "arguments": {
                "validator_keys": [],
                "token_contract": [],
                "home_bridge_contract": [],
                "foreign_bridge_contract": [],
                "tmp_path_factory": []
            }
        },
        "started_bridges": {
            "name": "started_bridges",
            "location": 484,
            "return": [],
            "arguments": {
                "bridges": []
            }
        },
        "test_simple_transfer": {
            "name": "test_simple_transfer",
            "location": 494,
            "return": [],
            "arguments": {
                "web3_home": [],
                "web3_foreign": [],
                "foreign_bridge_contract": [],
                "token_contract": [],
                "accounts": [],
                "started_bridges": []
            }
        },
        "test_offline_validators_validates_not_complete_transfer": {
            "name": "test_offline_validators_validates_not_complete_transfer",
            "location": 529,
            "return": [],
            "arguments": {
                "web3_home": [],
                "web3_foreign": [],
                "foreign_bridge_contract": [],
                "token_contract": [],
                "accounts": [],
                "bridges": []
            }
        },
        "test_offline_validators_do_not_validates_complete_transfer": {
            "name": "test_offline_validators_do_not_validates_complete_transfer",
            "location": 572,
            "return": [],
            "arguments": {
                "web3_home": [],
                "web3_foreign": [],
                "foreign_bridge_contract": [],
                "token_contract": [],
                "accounts": [],
                "bridges": [],
                "validators": []
            }
        },
        "test_openethereum_node_restarting": {
            "name": "test_openethereum_node_restarting",
            "location": 620,
            "return": [],
            "arguments": {
                "web3_home": [],
                "web3_foreign": [],
                "foreign_bridge_contract": [],
                "token_contract": [],
                "accounts": [],
                "bridges": [],
                "node_home": [],
                "node_foreign": []
            }
        },
        "test_validator_set_changes_transfer": {
            "name": "test_validator_set_changes_transfer",
            "location": 664,
            "return": [],
            "arguments": {
                "web3_home": [],
                "web3_foreign": [],
                "foreign_bridge_contract": [],
                "token_contract": [],
                "accounts": [],
                "bridges": [],
                "bridge_addresses": [],
                "validator_proxy_contract": [],
                "system_address": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.is_timed_out": {
            "name": "is_timed_out",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.is_started": {
            "name": "is_started",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.time_left": {
            "name": "time_left",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.time_passed": {
            "name": "time_passed",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Service.start": {
            "name": "start",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.is_up": {
            "name": "is_up",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service._wait_for_up": {
            "name": "_wait_for_up",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service.terminate": {
            "name": "terminate",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Node.is_up": {
            "name": "is_up",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bridge.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bridge.is_up": {
            "name": "is_up",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "deploy_contract_on_chain.deploy": {
            "name": "deploy",
            "location": 339,
            "return": [],
            "arguments": {
                "web3": [],
                "contract_identifier": []
            }
        },
        "test_simple_transfer.check_balance": {
            "name": "check_balance",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "test_offline_validators_validates_not_complete_transfer.check_balances_bridge_transfer_not_complete": {
            "name": "check_balances_bridge_transfer_not_complete",
            "location": 551,
            "return": [],
            "arguments": {}
        },
        "test_offline_validators_validates_not_complete_transfer.check_balance_transfer_complete": {
            "name": "check_balance_transfer_complete",
            "location": 564,
            "return": [],
            "arguments": {}
        },
        "test_offline_validators_do_not_validates_complete_transfer.check_balance_transfer_complete": {
            "name": "check_balance_transfer_complete",
            "location": 603,
            "return": [],
            "arguments": {}
        },
        "test_offline_validators_do_not_validates_complete_transfer.check_no_transaction_sent": {
            "name": "check_no_transaction_sent",
            "location": 612,
            "return": [],
            "arguments": {}
        },
        "test_openethereum_node_restarting.check_balance_transfer_complete": {
            "name": "check_balance_transfer_complete",
            "location": 657,
            "return": [],
            "arguments": {}
        },
        "test_validator_set_changes_transfer.check_balance_transfer_complete": {
            "name": "check_balance_transfer_complete",
            "location": 710,
            "return": [],
            "arguments": {}
        }
    },
    "blockchain-master/bridge/src/bridge/boot.py": {
        "setup_basic_logging": {
            "name": "setup_basic_logging",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CurrentGreenletLogger._log": {
            "name": "_log",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int"
                ],
                "msg": [
                    "str",
                    "int"
                ],
                "args": [],
                "exc_info": [
                    "str",
                    "int"
                ],
                "extra": [
                    "bool",
                    "str",
                    "Awaitable"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/config.py": {
        "load_config": {
            "name": "load_config",
            "location": 177,
            "return": [
                "str",
                "raiden.constants.Environment",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LoggingField._serialize": {
            "name": "_serialize",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict"
                ],
                "attr": [
                    "str",
                    "dict"
                ],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "LoggingField._deserialize": {
            "name": "_deserialize",
            "location": 28,
            "return": [
                "str",
                "int",
                "Callable",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ],
                "attr": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ],
                "data": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "AddressField._serialize": {
            "name": "_serialize",
            "location": 40,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "Union[str, bytes, int]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "AddressField._deserialize": {
            "name": "_deserialize",
            "location": 43,
            "return": [
                "dict",
                "List[str]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ],
                "attr": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "PrivateKeyField._serialize": {
            "name": "_serialize",
            "location": 58,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "PrivateKeyField._deserialize": {
            "name": "_deserialize",
            "location": 61,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "attr": [
                    "Optional[str]",
                    "str",
                    "Callable[[str], str]"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "PrivateKeySchema.validate_schema": {
            "name": "validate_schema",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_data": []
            }
        },
        "WebserviceSchema.validate_host_and_port_if_enabled": {
            "name": "validate_host_and_port_if_enabled",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/confirmation_sender.py": {
        "make_sanity_check_transfer": {
            "name": "make_sanity_check_transfer",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "foreign_bridge_contract_address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "is_nonce_too_low_exception": {
            "name": "is_nonce_too_low_exception",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "exception": [
                    "Optional[str]",
                    "str",
                    "Type"
                ]
            }
        },
        "make_sanity_check_transfer.sanity_check_transfer": {
            "name": "sanity_check_transfer",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event": [
                    "Mapping[str, Any]",
                    "List[Dict[str, Any]]",
                    "web3.Web3",
                    "Dict[str, Any]",
                    "int",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]"
                ]
            }
        },
        "ConfirmationSender.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationSender._rpc_send_raw_transaction": {
            "name": "_rpc_send_raw_transaction",
            "location": 105,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "raw_transaction": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "List[int]",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "ConfirmationSender.get_next_nonce": {
            "name": "get_next_nonce",
            "location": 118,
            "return": [
                "str",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationSender.send_confirmation_from_transfer_event": {
            "name": "send_confirmation_from_transfer_event",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transfer_event": [
                    "bool",
                    "Sequence[int]",
                    "dict",
                    "int",
                    "raiden.utils.BalanceHash"
                ]
            }
        },
        "ConfirmationSender.send_confirmation_transactions": {
            "name": "send_confirmation_transactions",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationSender.prepare_confirmation_transaction": {
            "name": "prepare_confirmation_transaction",
            "location": 157,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "transfer_event": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "List[raiden.utils.Address]"
                ],
                "nonce": [
                    "int",
                    "web3.types.Nonce",
                    "bool",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "Optional[str]",
                    "Any"
                ],
                "chain_id": [
                    "int",
                    "web3.types.Nonce",
                    "bool",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "Optional[str]",
                    "Any"
                ]
            }
        },
        "ConfirmationSender.send_confirmation_transaction": {
            "name": "send_confirmation_transaction",
            "location": 196,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "raiden.tests.fuzz.utils.Scrambling",
                    "Type['Declared']",
                    "raiden.constants.EthClient"
                ]
            }
        },
        "ConfirmationWatcher.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationWatcher._log_txreceipt": {
            "name": "_log_txreceipt",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "receipt": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ConfirmationWatcher._rpc_get_receipt": {
            "name": "_rpc_get_receipt",
            "location": 226,
            "return": [
                "bool",
                "Optional[int]",
                "dict",
                "Optional[Dict]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "txhash": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ConfirmationWatcher._rpc_latest_block": {
            "name": "_rpc_latest_block",
            "location": 237,
            "return": [
                "str",
                "Type",
                "BaseException",
                "bool",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationWatcher._wait_for_next_block": {
            "name": "_wait_for_next_block",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationWatcher.watch_pending_transactions": {
            "name": "watch_pending_transactions",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationWatcher.wait_for_transaction": {
            "name": "wait_for_transaction",
            "location": 255,
            "return": [
                "str",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "pending_transaction": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/confirmation_task_planner.py": {
        "ConfirmationTaskPlanner.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recorder": [
                    "bool",
                    "str"
                ],
                "sync_persistence_time": [
                    "float",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Optional[Union[int, float]]",
                    "Union[int, float]"
                ],
                "control_queue": [
                    "gevenqueue.Queue",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "transfer_event_queue": [
                    "str"
                ],
                "home_bridge_event_queue": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "confirmation_task_queue": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConfirmationTaskPlanner.run": {
            "name": "run",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationTaskPlanner.process_events_from_queue": {
            "name": "process_events_from_queue",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "ConfirmationTaskPlanner.check_for_confirmation_tasks": {
            "name": "check_for_confirmation_tasks",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/constants.py": {},
    "blockchain-master/bridge/src/bridge/contract_abis.py": {},
    "blockchain-master/bridge/src/bridge/contract_validation.py": {
        "validate_contract_existence": {
            "name": "validate_contract_existence",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "contract": [
                    "int"
                ]
            }
        },
        "get_validator_proxy_contract": {
            "name": "get_validator_proxy_contract",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "home_bridge_contract": [
                    "Dict[str, Any]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "is_bridge_validator": {
            "name": "is_bridge_validator",
            "location": 69,
            "return": [
                "Container[T]"
            ],
            "arguments": {
                "home_bridge_contract": [
                    "List[List[int]]",
                    "web3.contracContract"
                ],
                "address": [
                    "bytes",
                    "float",
                    "int"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/events.py": {
        "ChainRole.configuration_key": {
            "name": "configuration_key",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/event_fetcher.py": {
        "EventFetcher.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventFetcher._rpc_get_cached_node_status": {
            "name": "_rpc_get_cached_node_status",
            "location": 61,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventFetcher._rpc_cached_latest_block": {
            "name": "_rpc_cached_latest_block",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventFetcher._rpc_cached_is_syncing": {
            "name": "_rpc_cached_is_syncing",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventFetcher._rpc_get_logs": {
            "name": "_rpc_get_logs",
            "location": 79,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str"
                ],
                "from_block_number": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str"
                ],
                "to_block_number": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str"
                ],
                "argument_filters": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str"
                ]
            }
        },
        "EventFetcher.fetch_events_in_range": {
            "name": "fetch_events_in_range",
            "location": 93,
            "return": [
                "dict",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "from_block_number": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "raiden.utils.Address",
                    "cmk.utils.type_defs.UserId"
                ],
                "to_block_number": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "raiden.utils.Address",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "EventFetcher.fetch_some_events": {
            "name": "fetch_some_events",
            "location": 124,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventFetcher.fetch_events": {
            "name": "fetch_events",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "poll_interval": [
                    "List[dict]",
                    "int",
                    "str",
                    "bool",
                    "cmk.utils.type_defs.EventRule",
                    "Callable"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/main.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 54,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "make_w3": {
            "name": "make_w3",
            "location": 70,
            "return": [],
            "arguments": {
                "config": [],
                "chain": []
            }
        },
        "make_w3_home": {
            "name": "make_w3_home",
            "location": 79,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "make_w3_foreign": {
            "name": "make_w3_foreign",
            "location": 83,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "get_max_pending_transactions": {
            "name": "get_max_pending_transactions",
            "location": 87,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "make_validator_address": {
            "name": "make_validator_address",
            "location": 95,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "sanity_check_home_bridge_contracts": {
            "name": "sanity_check_home_bridge_contracts",
            "location": 100,
            "return": [],
            "arguments": {
                "home_bridge_contract": []
            }
        },
        "make_transfer_event_fetcher": {
            "name": "make_transfer_event_fetcher",
            "location": 118,
            "return": [],
            "arguments": {
                "config": [],
                "transfer_event_queue": []
            }
        },
        "make_home_bridge_event_fetcher": {
            "name": "make_home_bridge_event_fetcher",
            "location": 139,
            "return": [],
            "arguments": {
                "config": [],
                "home_bridge_event_queue": []
            }
        },
        "make_recorder": {
            "name": "make_recorder",
            "location": 160,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "make_confirmation_task_planner": {
            "name": "make_confirmation_task_planner",
            "location": 165,
            "return": [],
            "arguments": {
                "config": [],
                "recorder": [],
                "control_queue": [],
                "transfer_event_queue": [],
                "home_bridge_event_queue": [],
                "confirmation_task_queue": []
            }
        },
        "make_confirmation_sender": {
            "name": "make_confirmation_sender",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "make_confirmation_watcher": {
            "name": "make_confirmation_watcher",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "make_validator_status_watcher": {
            "name": "make_validator_status_watcher",
            "location": 217,
            "return": [],
            "arguments": {
                "config": [],
                "control_queue": []
            }
        },
        "make_validator_balance_watcher": {
            "name": "make_validator_balance_watcher",
            "location": 237,
            "return": [],
            "arguments": {
                "config": [],
                "control_queue": []
            }
        },
        "make_webservice": {
            "name": "make_webservice",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "make_main_services": {
            "name": "make_main_services",
            "location": 274,
            "return": [],
            "arguments": {
                "config": [],
                "recorder": []
            }
        },
        "reload_logging_config": {
            "name": "reload_logging_config",
            "location": 332,
            "return": [],
            "arguments": {
                "config_path": []
            }
        },
        "install_signal_handler": {
            "name": "install_signal_handler",
            "location": 347,
            "return": [],
            "arguments": {
                "signum": [],
                "name": [],
                "f": []
            }
        },
        "log_internal_state": {
            "name": "log_internal_state",
            "location": 356,
            "return": [],
            "arguments": {
                "recorder": []
            }
        },
        "shutdown_raw": {
            "name": "shutdown_raw",
            "location": 365,
            "return": [],
            "arguments": {
                "timeout": [],
                "exitcode": []
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 387,
            "return": [],
            "arguments": {
                "timeout": [],
                "exitcode": []
            }
        },
        "handle_greenlet_exception": {
            "name": "handle_greenlet_exception",
            "location": 393,
            "return": [],
            "arguments": {
                "gr": []
            }
        },
        "start_services_in_main_pool": {
            "name": "start_services_in_main_pool",
            "location": 401,
            "return": [],
            "arguments": {
                "services": []
            }
        },
        "wait_for_node_fully_synced": {
            "name": "wait_for_node_fully_synced",
            "location": 409,
            "return": [],
            "arguments": {
                "config": [],
                "chain": []
            }
        },
        "wait_until_home_node_is_ready": {
            "name": "wait_until_home_node_is_ready",
            "location": 426,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "wait_until_foreign_node_is_ready": {
            "name": "wait_until_foreign_node_is_ready",
            "location": 437,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "start_system": {
            "name": "start_system",
            "location": 449,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "main": {
            "name": "main",
            "location": 484,
            "return": [],
            "arguments": {
                "ctx": [],
                "config_path": []
            }
        },
        "make_webservice.encode_address": {
            "name": "encode_address",
            "location": 262,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "install_signal_handler.handler": {
            "name": "handler",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "wait_for_node_fully_synced.is_synced": {
            "name": "is_synced",
            "location": 413,
            "return": [],
            "arguments": {
                "node_status": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/node_status.py": {
        "_get_node_status_parity": {
            "name": "_get_node_status_parity",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "w3": [
                    "List[str]"
                ]
            }
        },
        "_get_node_status_geth": {
            "name": "_get_node_status_geth",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "w3": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "get_node_status": {
            "name": "get_node_status",
            "location": 77,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "w3": [
                    "str",
                    "int"
                ]
            }
        },
        "wait_for_node_status": {
            "name": "wait_for_node_status",
            "location": 91,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "w3": [
                    "Dict[int, dict]",
                    "Optional[int]"
                ],
                "predicate": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ],
                "sleep_time": [
                    "int",
                    "float",
                    "Union[str, float]"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/service.py": {
        "start_services": {
            "name": "start_services",
            "location": 16,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "services": [
                    "List[str]",
                    "bool",
                    "Optional[int]",
                    "Sequence[str]",
                    "float"
                ],
                "start": [
                    "int",
                    "tuple",
                    "List[List[int]]",
                    "float"
                ],
                "link_exception_callback": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[Tuple[float, float]]",
                    "Optional[Callable[[str], bool]]",
                    "Optional[float]"
                ]
            }
        },
        "run_services": {
            "name": "run_services",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "services": [
                    "Collection[T]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "run": [
                    "str",
                    "bool",
                    "Callable",
                    "int",
                    "Optional[str]",
                    "List[Dict]"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/transfer_recorder.py": {
        "get_state_summary": {
            "name": "get_state_summary",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "transfer_recorder": [
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "TransferRecorder.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minimum_balance": [
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "TransferRecorder.log_current_state": {
            "name": "log_current_state",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRecorder.is_validating": {
            "name": "is_validating",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRecorder.is_balance_sufficient": {
            "name": "is_balance_sufficient",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRecorder.clear_transfers": {
            "name": "clear_transfers",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRecorder.pull_transfers_to_confirm": {
            "name": "pull_transfers_to_confirm",
            "location": 87,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRecorder._apply_web3_event": {
            "name": "_apply_web3_event",
            "location": 107,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "nose2.events.Event",
                    "dict"
                ]
            }
        },
        "TransferRecorder._apply_is_validator_check": {
            "name": "_apply_is_validator_check",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "raiden.utils.ABI",
                    "Callable",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "TransferRecorder._apply_balance_check": {
            "name": "_apply_balance_check",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "apscheduler.events.JobExecutionEvent",
                    "dict",
                    "data.Event",
                    "Event"
                ]
            }
        },
        "TransferRecorder._apply_fetcher_reached_head_event": {
            "name": "_apply_fetcher_reached_head_event",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "aioquic.quic.events.QuicEvent",
                    "int"
                ]
            }
        },
        "TransferRecorder.apply_event": {
            "name": "apply_event",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Event",
                    "events.events_base.EventType",
                    "relay.streams.Event",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "blockchain-master/bridge/src/bridge/utils.py": {
        "compute_transfer_hash": {
            "name": "compute_transfer_hash",
            "location": 9,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "transfer_event": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_validator_private_key": {
            "name": "get_validator_private_key",
            "location": 22,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "sort_events": {
            "name": "sort_events",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "events": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/validator_balance_watcher.py": {
        "ValidatorBalanceWatcher.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w3": [
                    "int",
                    "bool",
                    "float"
                ],
                "validator_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "poll_interval": [
                    "int",
                    "bool",
                    "float"
                ],
                "control_queue": [
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "ValidatorBalanceWatcher._rpc_get_balance": {
            "name": "_rpc_get_balance",
            "location": 24,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorBalanceWatcher.run": {
            "name": "run",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/validator_status_watcher.py": {
        "ValidatorStatusWatcher.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_proxy_contract": [
                    "int",
                    "bool",
                    "float"
                ],
                "validator_address": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "poll_interval": [
                    "int",
                    "bool",
                    "float"
                ],
                "control_queue": [
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "stop_validating_callback": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ValidatorStatusWatcher._wait_for_validator_status": {
            "name": "_wait_for_validator_status",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorStatusWatcher._wait_for_non_validator_status": {
            "name": "_wait_for_non_validator_status",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorStatusWatcher.run": {
            "name": "run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorStatusWatcher.check_validator_status": {
            "name": "check_validator_status",
            "location": 70,
            "return": [
                "Container[T]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/version.py": {},
    "blockchain-master/bridge/src/bridge/webservice.py": {
        "get_internal_state_summary": {
            "name": "get_internal_state_summary",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "tuple",
                    "int",
                    "bool"
                ]
            }
        },
        "_identity": {
            "name": "_identity",
            "location": 57,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "Mapping",
                    "bool",
                    "dict",
                    "types.StrucInput",
                    "Optional[types.StrucInput]",
                    "deque"
                ]
            }
        },
        "_function_summary": {
            "name": "_function_summary",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "Type[T]",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "get_process_summary": {
            "name": "get_process_summary",
            "location": 66,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "get_bridge_version": {
            "name": "get_bridge_version",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "WelcomePage.on_get": {
            "name": "on_get",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "str"
                ]
            }
        },
        "InternalState.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalState.on_get": {
            "name": "on_get",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "str",
                    "type"
                ]
            }
        },
        "Webservice.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Webservice.enable_internal_state": {
            "name": "enable_internal_state",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "internal_state": [
                    "str"
                ]
            }
        },
        "Webservice.run": {
            "name": "run",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/bridge/src/bridge/__init__.py": {},
    "blockchain-master/bridge/tests/conftest.py": {
        "pool": {
            "name": "pool",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spawn": {
            "name": "spawn",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pool": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tester_foreign": {
            "name": "tester_foreign",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tester_home": {
            "name": "tester_home",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "w3_foreign": {
            "name": "w3_foreign",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tester_foreign": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "w3_home": {
            "name": "w3_home",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tester_home": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "transfer_event_queue": {
            "name": "transfer_event_queue",
            "location": 66,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "premint_token_address": {
            "name": "premint_token_address",
            "location": 71,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Callable",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ]
            }
        },
        "deploy_contract_on_chain": {
            "name": "deploy_contract_on_chain",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "contract_assets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "token_contract": {
            "name": "token_contract",
            "location": 94,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "deploy_contract_on_chain": [
                    "Optional[bool]",
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "w3_foreign": [
                    "Optional[bool]",
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "premint_token_address": [
                    "Optional[bool]",
                    "dict",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "foreign_bridge_contract": {
            "name": "foreign_bridge_contract",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract_on_chain": [
                    "int",
                    "str"
                ],
                "w3_foreign": [
                    "int",
                    "str"
                ],
                "token_contract": [
                    "int",
                    "str"
                ]
            }
        },
        "number_of_validators": {
            "name": "number_of_validators",
            "location": 118,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {}
        },
        "proxy_validator_accounts_and_keys": {
            "name": "proxy_validator_accounts_and_keys",
            "location": 124,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "accounts": [
                    "str"
                ],
                "account_keys": [
                    "str"
                ],
                "number_of_validators": [
                    "str"
                ]
            }
        },
        "proxy_validators": {
            "name": "proxy_validators",
            "location": 130,
            "return": [
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "proxy_validator_accounts_and_keys": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "proxy_validator_keys": {
            "name": "proxy_validator_keys",
            "location": 137,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "proxy_validator_accounts_and_keys": [
                    "str",
                    "Type[Exception]",
                    "Optional[str]"
                ]
            }
        },
        "validator_account_and_key": {
            "name": "validator_account_and_key",
            "location": 144,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "proxy_validator_accounts_and_keys": [
                    "str",
                    "int"
                ]
            }
        },
        "validator_address": {
            "name": "validator_address",
            "location": 151,
            "return": [
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "validator_account_and_key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "non_validator_account_and_key": {
            "name": "non_validator_account_and_key",
            "location": 158,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "accounts": [
                    "str"
                ],
                "account_keys": [
                    "str"
                ],
                "number_of_validators": [
                    "str"
                ]
            }
        },
        "non_validator_address": {
            "name": "non_validator_address",
            "location": 164,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "non_validator_account_and_key": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "non_validator_key": {
            "name": "non_validator_key",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "non_validator_account_and_key": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "system_address": {
            "name": "system_address",
            "location": 178,
            "return": [
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "validator_proxy_contract": {
            "name": "validator_proxy_contract",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract_on_chain": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "w3_home": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "system_address": []
            }
        },
        "validator_proxy_with_validators": {
            "name": "validator_proxy_with_validators",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "validator_proxy_contract": [
                    "float",
                    "tuple",
                    "int",
                    "Type"
                ],
                "system_address": [
                    "float",
                    "tuple",
                    "int",
                    "Type"
                ],
                "proxy_validators": [
                    "float",
                    "tuple",
                    "int",
                    "Type"
                ]
            }
        },
        "home_bridge_contract": {
            "name": "home_bridge_contract",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract_on_chain": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "validator_proxy_with_validators": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "w3_home": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "tester_home": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "write_config": {
            "name": "write_config",
            "location": 227,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "tmp_path": [
                    "Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "minimal_config": {
            "name": "minimal_config",
            "location": 240,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "webservice_config": {
            "name": "webservice_config",
            "location": 259,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        },
        "load_config_from_string": {
            "name": "load_config_from_string",
            "location": 270,
            "return": [
                "bool",
                "str",
                "Tuple[str, List[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "deploy_contract_on_chain.deploy": {
            "name": "deploy",
            "location": 80,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "web3.Web3",
                    "int",
                    "float"
                ],
                "contract_identifier": [
                    "str",
                    "web3.Web3",
                    "int",
                    "float"
                ]
            }
        },
        "write_config.write": {
            "name": "write",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_config_from_string.load": {
            "name": "load",
            "location": 273,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "dict"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_config.py": {
        "test_load_minimal_config": {
            "name": "test_load_minimal_config",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "write_config": [
                    "Callable"
                ],
                "minimal_config": [
                    "Callable"
                ]
            }
        },
        "test_logging_key": {
            "name": "test_logging_key",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "write_config": [
                    "str"
                ],
                "minimal_config": [
                    "str"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_confirmation_sender.py": {
        "transfer_queue": {
            "name": "transfer_queue",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "validator_key": {
            "name": "validator_key",
            "location": 31,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "validator_account_and_key": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "max_reorg_depth": {
            "name": "max_reorg_depth",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gas_price": {
            "name": "gas_price",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pending_transaction_queue": {
            "name": "pending_transaction_queue",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "confirmation_sender": {
            "name": "confirmation_sender",
            "location": 55,
            "return": [
                "Optional[cmk.utils.type_defs.HostAddress]",
                "str",
                "bytes"
            ],
            "arguments": {
                "transfer_queue": [
                    "bool"
                ],
                "home_bridge_contract": [
                    "bool"
                ],
                "validator_key": [
                    "bool"
                ],
                "max_reorg_depth": [
                    "bool"
                ],
                "gas_price": [
                    "bool"
                ],
                "foreign_bridge_contract": [
                    "bool"
                ],
                "pending_transaction_queue": [
                    "bool"
                ]
            }
        },
        "confirmation_watcher": {
            "name": "confirmation_watcher",
            "location": 79,
            "return": [
                "str",
                "Callable",
                "trezor.utils.Writer",
                "list"
            ],
            "arguments": {
                "w3_home": [
                    "bool",
                    "raiden.utils.TokenAmount",
                    "int"
                ],
                "pending_transaction_queue": [
                    "bool",
                    "raiden.utils.TokenAmount",
                    "int"
                ],
                "max_reorg_depth": [
                    "bool",
                    "raiden.utils.TokenAmount",
                    "int"
                ]
            }
        },
        "transfer_event": {
            "name": "transfer_event",
            "location": 88,
            "return": [
                "dict",
                "Dict[int, List[str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "test_transfer_hash_computation": {
            "name": "test_transfer_hash_computation",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event": [
                    "float"
                ]
            }
        },
        "test_transaction_preparation": {
            "name": "test_transaction_preparation",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_sender": [],
                "validator_address": [
                    "bool",
                    "Iterable[Any]"
                ],
                "gas_price": [
                    "bool",
                    "Iterable[Any]"
                ],
                "home_bridge_contract": [
                    "bool"
                ],
                "transfer_event": []
            }
        },
        "disallow_w3_rpc": {
            "name": "disallow_w3_rpc",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "make_request": [],
                "w3": []
            }
        },
        "test_transaction_preparation_no_rpc": {
            "name": "test_transaction_preparation_no_rpc",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_sender": [],
                "transfer_event": [],
                "w3_home": []
            }
        },
        "test_transaction_sending": {
            "name": "test_transaction_sending",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_sender": [],
                "w3_home": [],
                "tester_home": [
                    "str",
                    "Dict[str, Any]"
                ],
                "home_bridge_contract": [
                    "raiden.utils.Address",
                    "Tuple[str, int]"
                ],
                "transfer_event": [],
                "validator_address": [
                    "Container"
                ]
            }
        },
        "test_transfers_are_handled": {
            "name": "test_transfers_are_handled",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_sender": [],
                "w3_home": [
                    "web3.Web3",
                    "str"
                ],
                "tester_home": [
                    "Callable[[], int]",
                    "str",
                    "bool"
                ],
                "transfer_queue": [],
                "transfer_event": [],
                "home_bridge_contract": [],
                "spawn": []
            }
        },
        "test_pending_transfers_are_cleared": {
            "name": "test_pending_transfers_are_cleared",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_sender": [],
                "confirmation_watcher": [],
                "tester_home": [
                    "Union[int, float]"
                ],
                "transfer_queue": [],
                "transfer_event": [],
                "max_reorg_depth": [
                    "int",
                    "float",
                    "Iterable[Any]"
                ],
                "caplog": [
                    "Callable[[], int]",
                    "str",
                    "bool"
                ],
                "spawn": [
                    "Dict[str, Any]"
                ]
            }
        },
        "disallow_w3_rpc.middleware": {
            "name": "middleware",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ],
                "params": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "test_pending_transfers_are_cleared.confirmed": {
            "name": "confirmed",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "blockchain-master/bridge/tests/test_confirmation_task_planner.py": {
        "assert_events_in_queue": {
            "name": "assert_events_in_queue",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "queue": [
                    "threading.Event",
                    "set",
                    "Event",
                    "events.Event",
                    "dict",
                    "Dict[str, Any]"
                ],
                "events": [
                    "threading.Event",
                    "set",
                    "Event",
                    "events.Event",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "control_queue": {
            "name": "control_queue",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "transfer_event_queue": {
            "name": "transfer_event_queue",
            "location": 36,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "home_bridge_event_queue": {
            "name": "home_bridge_event_queue",
            "location": 41,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "confirmation_task_queue": {
            "name": "confirmation_task_queue",
            "location": 46,
            "return": [
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "transfer_recorder_mock": {
            "name": "transfer_recorder_mock",
            "location": 51,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "confirmation_task_planner": {
            "name": "confirmation_task_planner",
            "location": 56,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "control_queue": [
                    "str",
                    "tuple"
                ],
                "transfer_event_queue": [
                    "str",
                    "tuple"
                ],
                "home_bridge_event_queue": [
                    "str",
                    "tuple"
                ],
                "confirmation_task_queue": [
                    "str",
                    "tuple"
                ],
                "transfer_recorder_mock": [
                    "str",
                    "tuple"
                ],
                "spawn": [
                    "Optional[int]"
                ]
            }
        },
        "test_process_events_from_queue": {
            "name": "test_process_events_from_queue",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_task_planner": [
                    "Callable[[], int]"
                ],
                "transfer_recorder_mock": [],
                "transfer_event_queue": [
                    "bool"
                ]
            }
        },
        "test_check_for_confirmation_tasks": {
            "name": "test_check_for_confirmation_tasks",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_task_planner": [],
                "transfer_recorder_mock": [],
                "confirmation_task_queue": []
            }
        },
        "test_wait_for_fetcher_reached_head_event": {
            "name": "test_wait_for_fetcher_reached_head_event",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_task_planner": [
                    "Callable[[], int]"
                ],
                "transfer_recorder_mock": [],
                "transfer_event_queue": [],
                "control_queue": [
                    "bytes",
                    "str",
                    "dict"
                ],
                "confirmation_task_queue": []
            }
        },
        "test_too_old_fetcher_reached_head_event": {
            "name": "test_too_old_fetcher_reached_head_event",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_task_planner": [],
                "transfer_recorder_mock": [],
                "control_queue": [],
                "confirmation_task_queue": []
            }
        },
        "test_wrong_chain_fetcher_reached_head_event": {
            "name": "test_wrong_chain_fetcher_reached_head_event",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "confirmation_task_planner": [],
                "transfer_recorder_mock": [],
                "control_queue": [],
                "confirmation_task_queue": []
            }
        },
        "TransferRecorderMock.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferRecorderMock.apply_event": {
            "name": "apply_event",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "raiden_libs.events.Event",
                    "monitoring_service.events.ScheduledEvent"
                ]
            }
        },
        "TransferRecorderMock.pull_transfers_to_confirm": {
            "name": "pull_transfers_to_confirm",
            "location": 26,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/bridge/tests/test_contract_validation.py": {
        "internal_home_bridge_contract": {
            "name": "internal_home_bridge_contract",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w3_home": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "home_bridge_contract": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_validate_contract_existence_successfully": {
            "name": "test_validate_contract_existence_successfully",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "internal_home_bridge_contract": [
                    "str",
                    "float"
                ]
            }
        },
        "test_validate_contract_existence_undeployed_address": {
            "name": "test_validate_contract_existence_undeployed_address",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "internal_home_bridge_contract": []
            }
        },
        "test_validate_contract_existence_not_matching_abi": {
            "name": "test_validate_contract_existence_not_matching_abi",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "internal_home_bridge_contract": []
            }
        },
        "test_validate_confirmation_permissions_successfully": {
            "name": "test_validate_confirmation_permissions_successfully",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "home_bridge_contract": [
                    "dict"
                ],
                "validator_address": [
                    "dict"
                ]
            }
        },
        "test_validate_confirmation_permissions_not_permissioned": {
            "name": "test_validate_confirmation_permissions_not_permissioned",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "home_bridge_contract": [
                    "slice"
                ],
                "non_validator_address": [
                    "slice"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_event_fetcher.py": {
        "fetch_all_events": {
            "name": "fetch_all_events",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "fetcher": [
                    "set",
                    "List[str]"
                ]
            }
        },
        "transfer_event_filter_definition": {
            "name": "transfer_event_filter_definition",
            "location": 21,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "foreign_bridge_contract": [
                    "Dict[str, Any]"
                ]
            }
        },
        "foreign_chain_max_reorg_depth": {
            "name": "foreign_chain_max_reorg_depth",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "foreign_chain_event_fetch_start_block_number": {
            "name": "foreign_chain_event_fetch_start_block_number",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "transfer_event_fetcher_init_kwargs": {
            "name": "transfer_event_fetcher_init_kwargs",
            "location": 39,
            "return": [
                "int",
                "str",
                "Sequence[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "w3_foreign": [
                    "Iterable[Sequence[str]]",
                    "tuple"
                ],
                "token_contract": [
                    "Iterable[Sequence[str]]",
                    "tuple"
                ],
                "transfer_event_filter_definition": [
                    "Iterable[Sequence[str]]",
                    "tuple"
                ],
                "transfer_event_queue": [
                    "Iterable[Sequence[str]]",
                    "tuple"
                ],
                "foreign_chain_max_reorg_depth": [
                    "Iterable[Sequence[str]]",
                    "tuple"
                ],
                "foreign_chain_event_fetch_start_block_number": [
                    "Iterable[Sequence[str]]",
                    "tuple"
                ]
            }
        },
        "make_transfer_event_fetcher": {
            "name": "make_transfer_event_fetcher",
            "location": 64,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "transfer_event_fetcher_init_kwargs": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "transfer_event_fetcher": {
            "name": "transfer_event_fetcher",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "make_transfer_event_fetcher": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "transfer_tokens_to": {
            "name": "transfer_tokens_to",
            "location": 84,
            "return": [
                "complex",
                "float",
                "Optional[BaseException]"
            ],
            "arguments": {
                "token_contract": [
                    "Optional[Mapping[str, Any]]",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "premint_token_address": [
                    "Optional[Mapping[str, Any]]",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "transfer_tokens_to_foreign_bridge": {
            "name": "transfer_tokens_to_foreign_bridge",
            "location": 100,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "foreign_bridge_contract": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "transfer_tokens_to": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_instantiate_event_fetcher_with_negative_event_fetch_limit": {
            "name": "test_instantiate_event_fetcher_with_negative_event_fetch_limit",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": []
            }
        },
        "test_instantiate_event_fetcher_with_negative_max_reorg_depth": {
            "name": "test_instantiate_event_fetcher_with_negative_max_reorg_depth",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": []
            }
        },
        "test_instantiate_event_fetcher_with_negative_start_block_number": {
            "name": "test_instantiate_event_fetcher_with_negative_start_block_number",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": [
                    "tuple"
                ]
            }
        },
        "test_fetch_events_in_range": {
            "name": "test_fetch_events_in_range",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": [
                    "float"
                ],
                "w3_foreign": [
                    "float"
                ],
                "transfer_event_filter_definition": [
                    "str"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "bool"
                ]
            }
        },
        "test_fetch_events_in_range_ignore_not_matching_arguments": {
            "name": "test_fetch_events_in_range_ignore_not_matching_arguments",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": [
                    "float",
                    "tuple"
                ],
                "transfer_tokens_to": [
                    "List[str]",
                    "bool",
                    "str",
                    "dict"
                ],
                "w3_foreign": [
                    "float",
                    "tuple"
                ]
            }
        },
        "test_fetch_events_in_range_negative_from_number": {
            "name": "test_fetch_events_in_range_negative_from_number",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": []
            }
        },
        "test_fetch_events_in_range_negative_range": {
            "name": "test_fetch_events_in_range_negative_range",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": []
            }
        },
        "test_fetch_events_ignore_last_reorg_depth_blocks": {
            "name": "test_fetch_events_ignore_last_reorg_depth_blocks",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": [],
                "w3_foreign": [
                    "bool"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "Callable",
                    "bool",
                    "Callable[[], None]"
                ],
                "foreign_chain_max_reorg_depth": [
                    "bool"
                ]
            }
        },
        "test_fetch_some_events": {
            "name": "test_fetch_some_events",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": [],
                "tester_foreign": [
                    "float",
                    "Hashable",
                    "bool"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "Callable",
                    "bool",
                    "Callable[[], None]",
                    "List[Tuple[str, Any]]"
                ],
                "foreign_chain_max_reorg_depth": [
                    "float",
                    "Hashable",
                    "bool"
                ]
            }
        },
        "test_fetch_some_events_with_different_transfer_counts": {
            "name": "test_fetch_some_events_with_different_transfer_counts",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": [],
                "tester_foreign": [
                    "str",
                    "float",
                    "bool",
                    "Hashable",
                    "Sequence[Hashable]"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "List[Tuple[str, Any]]"
                ],
                "foreign_chain_max_reorg_depth": [
                    "str",
                    "float",
                    "bool",
                    "Hashable",
                    "Sequence[Hashable]"
                ],
                "transfer_count": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_fetch_events_with_start_block_number": {
            "name": "test_fetch_events_with_start_block_number",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "w3_foreign": [
                    "Sequence['cirq.Qid']",
                    "Callable",
                    "bool"
                ],
                "tester_foreign": [
                    "Optional[int]"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "dict"
                ],
                "foreign_chain_max_reorg_depth": [
                    "Optional[int]"
                ],
                "make_transfer_event_fetcher": []
            }
        },
        "test_fetch_event_synthetic_sync_event": {
            "name": "test_fetch_event_synthetic_sync_event",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": [],
                "transfer_event_queue": [
                    "Dict[str, Any]"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "spawn": []
            }
        },
        "test_fetch_events_continuously": {
            "name": "test_fetch_events_continuously",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": [],
                "transfer_event_queue": [
                    "Dict[str, Any]",
                    "Callable"
                ],
                "transfer_tokens_to_foreign_bridge": [
                    "List[str]",
                    "bool",
                    "dict",
                    "List[Tuple[str, Any]]"
                ],
                "spawn": []
            }
        },
        "test_fetch_events_negative_poll_interval": {
            "name": "test_fetch_events_negative_poll_interval",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "transfer_event_fetcher": []
            }
        },
        "test_fetch_multiple_events": {
            "name": "test_fetch_multiple_events",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "make_transfer_event_fetcher": [
                    "Dict[str, Any]",
                    "float"
                ],
                "token_contract": [],
                "premint_token_address": [],
                "tester_foreign": [
                    "Sequence[Hashable]",
                    "int"
                ],
                "foreign_chain_max_reorg_depth": [
                    "Sequence[Hashable]",
                    "int"
                ]
            }
        },
        "make_transfer_event_fetcher.make_fetcher": {
            "name": "make_fetcher",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "transfer_tokens_to.transfer": {
            "name": "transfer",
            "location": 91,
            "return": [],
            "arguments": {
                "receiver": []
            }
        },
        "transfer_tokens_to_foreign_bridge.transfer": {
            "name": "transfer",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "blockchain-master/bridge/tests/test_main.py": {
        "test_reload_logging_config": {
            "name": "test_reload_logging_config",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "write_config": [
                    "Dict[str, Any]"
                ],
                "caplog": [
                    "logging.Logger"
                ],
                "minimal_config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_reload_logging_config_does_not_throw_config_gone": {
            "name": "test_reload_logging_config_does_not_throw_config_gone",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_reload_logging_config_does_not_throw_malformed_toml": {
            "name": "test_reload_logging_config_does_not_throw_malformed_toml",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "write_config": [],
                "caplog": []
            }
        },
        "test_reload_logging_config_does_not_throw_schema_error": {
            "name": "test_reload_logging_config_does_not_throw_schema_error",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "write_config": [
                    "str"
                ],
                "caplog": [
                    "logging.Logger",
                    "str"
                ]
            }
        },
        "test_make_webservice_no_config": {
            "name": "test_make_webservice_no_config",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "minimal_config": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[dict]"
                ],
                "load_config_from_string": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[dict]"
                ]
            }
        },
        "test_make_webservice": {
            "name": "test_make_webservice",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "minimal_config": [
                    "str"
                ],
                "webservice_config": [
                    "str"
                ],
                "load_config_from_string": [
                    "str"
                ]
            }
        },
        "test_reload_logging_config.config_with_loglevel": {
            "name": "config_with_loglevel",
            "location": 9,
            "return": [
                "str",
                "int",
                "Optional[dict]"
            ],
            "arguments": {
                "level": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_service.py": {
        "service": {
            "name": "service",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "error_raising_service": {
            "name": "error_raising_service",
            "location": 20,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        },
        "test_start_service_will_start_greenlets": {
            "name": "test_start_service_will_start_greenlets",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "str"
                ]
            }
        },
        "test_start_service_arguments": {
            "name": "test_start_service_arguments",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_start_service_callback": {
            "name": "test_start_service_callback",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "error_raising_service": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "test_run_services": {
            "name": "test_run_services",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "service.run": {
            "name": "run",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "error_raising_service.run": {
            "name": "run",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "blockchain-master/bridge/tests/test_transfer_recorder.py": {
        "hashes": {
            "name": "hashes",
            "location": 22,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "hash_": {
            "name": "hash_",
            "location": 28,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "hashes": [
                    "str"
                ]
            }
        },
        "make_transfer_event": {
            "name": "make_transfer_event",
            "location": 33,
            "return": [
                "Optional[Exception]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "transaction_hash": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "from_": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "to": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "value": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "make_transfer_hash_event": {
            "name": "make_transfer_hash_event",
            "location": 51,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "event_name": [
                    "str",
                    "List[Dict[str, str]]",
                    "constants.HttpStatusCode",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ],
                "transfer_hash": [
                    "str",
                    "List[Dict[str, str]]",
                    "constants.HttpStatusCode",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ],
                "transaction_hash": [
                    "str",
                    "List[Dict[str, str]]",
                    "constants.HttpStatusCode",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ]
            }
        },
        "transfer_events": {
            "name": "transfer_events",
            "location": 65,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "hashes": [
                    "int",
                    "Dict[int, dict]"
                ]
            }
        },
        "transfer_event": {
            "name": "transfer_event",
            "location": 71,
            "return": [
                "bool",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "transfer_events": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "\"Step\""
                ]
            }
        },
        "confirmation_events": {
            "name": "confirmation_events",
            "location": 77,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "hashes": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Mapping]",
                    "Mapping"
                ]
            }
        },
        "confirmation_event": {
            "name": "confirmation_event",
            "location": 88,
            "return": [
                "bool",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "confirmation_events": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "\"Step\""
                ]
            }
        },
        "completion_events": {
            "name": "completion_events",
            "location": 94,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "hashes": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Mapping]",
                    "Mapping"
                ]
            }
        },
        "completion_event": {
            "name": "completion_event",
            "location": 103,
            "return": [
                "bool",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "completion_events": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "\"Step\""
                ]
            }
        },
        "minimum_balance": {
            "name": "minimum_balance",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "recorder": {
            "name": "recorder",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "minimum_balance": [
                    "web3.Web3",
                    "bool",
                    "float",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "fresh_recorder": {
            "name": "fresh_recorder",
            "location": 123,
            "return": [
                "str",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "minimum_balance": [
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "test_log_current_state_fresh": {
            "name": "test_log_current_state_fresh",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "fresh_recorder": [
                    "bool",
                    "str",
                    "Union[int, float]"
                ],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_log_current_state": {
            "name": "test_log_current_state",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_is_balance_sufficient": {
            "name": "test_is_balance_sufficient",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "fresh_recorder": [
                    "int"
                ]
            }
        },
        "test_is_validating": {
            "name": "test_is_validating",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "fresh_recorder": []
            }
        },
        "test_skip_bad_transfer_zero_amount": {
            "name": "test_skip_bad_transfer_zero_amount",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "int"
                ]
            }
        },
        "test_skip_bad_transfer_zero_address": {
            "name": "test_skip_bad_transfer_zero_address",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "int"
                ]
            }
        },
        "test_recorder_pull_transfers": {
            "name": "test_recorder_pull_transfers",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": []
            }
        },
        "test_recorder_plans_transfers": {
            "name": "test_recorder_plans_transfers",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [],
                "transfer_event": []
            }
        },
        "test_recorder_does_not_plan_transfers_twice": {
            "name": "test_recorder_does_not_plan_transfers_twice",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "int"
                ],
                "transfer_event": [
                    "int"
                ]
            }
        },
        "test_recorder_does_not_plan_confirmed_transfer": {
            "name": "test_recorder_does_not_plan_confirmed_transfer",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "Callable",
                    "web3.contracContract",
                    "str"
                ],
                "hashes": [
                    "Dict[str, Any]",
                    "web3.contracContract"
                ]
            }
        },
        "test_recorder_does_not_plan_completed_transfer": {
            "name": "test_recorder_does_not_plan_completed_transfer",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "Callable",
                    "web3.contracContract",
                    "str"
                ],
                "hashes": [
                    "Dict[str, Any]",
                    "web3.contracContract"
                ]
            }
        },
        "test_recorder_does_not_plan_transfers_if_not_validating": {
            "name": "test_recorder_does_not_plan_transfers_if_not_validating",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "int"
                ],
                "minimum_balance": [
                    "int"
                ],
                "transfer_event": [
                    "int"
                ]
            }
        },
        "test_recorder_not_validating_if_balance_below_minimum": {
            "name": "test_recorder_not_validating_if_balance_below_minimum",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "web3.Web3",
                    "raiden.utils.ChannelID"
                ],
                "minimum_balance": [
                    "qutebrowser.utils.usertypes.Backend",
                    "web3.Web3"
                ]
            }
        },
        "test_recorder_not_validating_if_not_validator": {
            "name": "test_recorder_not_validating_if_not_validator",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": []
            }
        },
        "test_transfer_recorder_drops_completed_transfers": {
            "name": "test_transfer_recorder_drops_completed_transfers",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "recorder": [
                    "List[List[int]]",
                    "web3.Web3",
                    "str",
                    "raiden.utils.TokenNetworkID"
                ],
                "hashes": [
                    "str",
                    "raiden.utils.TokenNetworkID"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_utils.py": {
        "validator_private_key_bytes": {
            "name": "validator_private_key_bytes",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "validator_private_key_raw": {
            "name": "validator_private_key_raw",
            "location": 15,
            "return": [
                "str",
                "bool",
                "int",
                "Mapping[str, Any]",
                "IO"
            ],
            "arguments": {}
        },
        "keystore_folder": {
            "name": "keystore_folder",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "not_existing_path": {
            "name": "not_existing_path",
            "location": 25,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "float"
            ],
            "arguments": {}
        },
        "validator_private_key_keystore_path": {
            "name": "validator_private_key_keystore_path",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "keystore_folder": [
                    "List[str]",
                    "str",
                    "int",
                    "IO",
                    "bytes"
                ]
            }
        },
        "validator_private_key_keystore_password_path": {
            "name": "validator_private_key_keystore_password_path",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "keystore_folder": [
                    "str",
                    "IO",
                    "bytes"
                ]
            }
        },
        "validator_private_key_keystore_password_path_not_matching": {
            "name": "validator_private_key_keystore_password_path_not_matching",
            "location": 44,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "dict"
                ]
            }
        },
        "configuration_with_validator_private_key_raw": {
            "name": "configuration_with_validator_private_key_raw",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "\"Step\"",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "validator_private_key_raw": [
                    "str",
                    "Optional[Exception]",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "configuration_with_validator_private_key_keystore": {
            "name": "configuration_with_validator_private_key_keystore",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "validator_private_key_keystore_path": [
                    "str",
                    "bytes"
                ],
                "validator_private_key_keystore_password_path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_get_validator_validator_private_key_raw": {
            "name": "test_get_validator_validator_private_key_raw",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_with_validator_private_key_raw": [
                    "bytes",
                    "str"
                ],
                "validator_private_key_bytes": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_get_validator_private_key_kestore": {
            "name": "test_get_validator_private_key_kestore",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_with_validator_private_key_keystore": [
                    "bytes",
                    "str"
                ],
                "validator_private_key_bytes": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_get_validator_private_key_kestore_not_existing_keystore_path": {
            "name": "test_get_validator_private_key_kestore_not_existing_keystore_path",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_with_validator_private_key_keystore": [
                    "bool",
                    "str",
                    "os.PathLike",
                    "Optional[str]"
                ],
                "not_existing_path": [
                    "str",
                    "bool",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_get_validator_private_key_kestore_not_existing_keystore_password_path": {
            "name": "test_get_validator_private_key_kestore_not_existing_keystore_password_path",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_with_validator_private_key_keystore": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ],
                "not_existing_path": [
                    "str",
                    "bool",
                    "Optional[\"Address\"]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_get_validator_private_key_kestore_not_matching_password": {
            "name": "test_get_validator_private_key_kestore_not_matching_password",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_with_validator_private_key_keystore": [
                    "bool"
                ],
                "validator_private_key_keystore_password_path_not_matching": [
                    "str",
                    "Optional[bytes]",
                    "Callable[[T], Any]",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_validator_balance_watcher.py": {
        "poll_interval": {
            "name": "poll_interval",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "control_queue": {
            "name": "control_queue",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "address": {
            "name": "address",
            "location": 20,
            "return": [
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "another_address": {
            "name": "another_address",
            "location": 25,
            "return": [
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "watcher": {
            "name": "watcher",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "w3_home": [],
                "address": [],
                "poll_interval": [],
                "control_queue": [],
                "spawn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_balance_watcher": {
            "name": "test_balance_watcher",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "w3_home": [
                    "int"
                ],
                "watcher": [],
                "poll_interval": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ],
                "address": [
                    "int"
                ],
                "another_address": [],
                "control_queue": []
            }
        }
    },
    "blockchain-master/bridge/tests/test_validator_status_watcher.py": {
        "test_watcher_checks_initial_validator_status_correctly": {
            "name": "test_watcher_checks_initial_validator_status_correctly",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_with_validators": [],
                "validator_address": [],
                "spawn": []
            }
        },
        "test_watcher_checks_initial_non_validator_status_correctly": {
            "name": "test_watcher_checks_initial_non_validator_status_correctly",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_with_validators": [],
                "non_validator_address": [],
                "spawn": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_watcher_notices_validator_set_joining": {
            "name": "test_watcher_notices_validator_set_joining",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_contract": [],
                "non_validator_address": [],
                "system_address": [
                    "int"
                ],
                "spawn": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_watcher_notices_validator_set_leaving": {
            "name": "test_watcher_notices_validator_set_leaving",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_with_validators": [],
                "validator_address": [],
                "system_address": [
                    "Dict[str, Any]",
                    "Callable[[Any, Any], Any]"
                ],
                "spawn": [
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "blockchain-master/bridge/tests/test_webservice.py": {
        "webservice": {
            "name": "webservice",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "minimal_config": [
                    "str",
                    "bool",
                    "int"
                ],
                "webservice_config": [
                    "str",
                    "bool",
                    "int"
                ],
                "load_config_from_string": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "webservice": []
            }
        },
        "test_welcome_page": {
            "name": "test_welcome_page",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_internal_state": {
            "name": "test_internal_state",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "blockchain-master/contracts/tests/conftest.py": {
        "auction_duration_in_days": {
            "name": "auction_duration_in_days",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "auction_start_price": {
            "name": "auction_start_price",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "release_timestamp": {
            "name": "release_timestamp",
            "location": 42,
            "return": [],
            "arguments": {
                "web3": []
            }
        },
        "deposit_locker_init": {
            "name": "deposit_locker_init",
            "location": 49,
            "return": [],
            "arguments": {
                "release_timestamp": [],
                "web3": []
            }
        },
        "token_deposit_locker_init": {
            "name": "token_deposit_locker_init",
            "location": 62,
            "return": [],
            "arguments": {
                "release_timestamp": [],
                "web3": []
            }
        },
        "deposit_amount": {
            "name": "deposit_amount",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "maximal_number_of_auction_participants": {
            "name": "maximal_number_of_auction_participants",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "minimal_number_of_auction_participants": {
            "name": "minimal_number_of_auction_participants",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "fake_auction_address": {
            "name": "fake_auction_address",
            "location": 92,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "malicious_non_validator_address": {
            "name": "malicious_non_validator_address",
            "location": 97,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "malicious_non_validator_key": {
            "name": "malicious_non_validator_key",
            "location": 102,
            "return": [],
            "arguments": {
                "account_keys": []
            }
        },
        "malicious_validator_address": {
            "name": "malicious_validator_address",
            "location": 107,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "malicious_validator_key": {
            "name": "malicious_validator_key",
            "location": 112,
            "return": [],
            "arguments": {
                "account_keys": []
            }
        },
        "validators": {
            "name": "validators",
            "location": 117,
            "return": [],
            "arguments": {
                "accounts": [],
                "malicious_validator_address": []
            }
        },
        "validator_set_contract_session": {
            "name": "validator_set_contract_session",
            "location": 122,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "validator_proxy_contract": [],
                "validators": [],
                "system_address": [],
                "web3": []
            }
        },
        "equivocation_inspector_contract_session": {
            "name": "equivocation_inspector_contract_session",
            "location": 139,
            "return": [],
            "arguments": {
                "deploy_contract": []
            }
        },
        "non_initialized_validator_slasher_contract_session": {
            "name": "non_initialized_validator_slasher_contract_session",
            "location": 144,
            "return": [],
            "arguments": {
                "deploy_contract": []
            }
        },
        "non_initialized_deposit_locker_contract_session": {
            "name": "non_initialized_deposit_locker_contract_session",
            "location": 149,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "web3": [],
                "chain": []
            }
        },
        "initialized_deposit_and_slasher_contracts": {
            "name": "initialized_deposit_and_slasher_contracts",
            "location": 155,
            "return": [],
            "arguments": {
                "validators": [],
                "deploy_contract": [],
                "fake_auction_address": [],
                "web3": [],
                "release_timestamp": []
            }
        },
        "validator_slasher_contract": {
            "name": "validator_slasher_contract",
            "location": 190,
            "return": [],
            "arguments": {
                "initialized_deposit_and_slasher_contracts": []
            }
        },
        "deposit_locker_contract": {
            "name": "deposit_locker_contract",
            "location": 196,
            "return": [],
            "arguments": {
                "initialized_deposit_and_slasher_contracts": []
            }
        },
        "deposit_locker_contract_with_deposits": {
            "name": "deposit_locker_contract_with_deposits",
            "location": 202,
            "return": [],
            "arguments": {
                "chain_cleanup": [],
                "initialized_deposit_and_slasher_contracts": [],
                "validators": [],
                "malicious_validator_address": [],
                "deposit_amount": [],
                "fake_auction_address": []
            }
        },
        "block_header_by_malicious_validator": {
            "name": "block_header_by_malicious_validator",
            "location": 226,
            "return": [],
            "arguments": {
                "malicious_validator_key": []
            }
        },
        "block_header_by_malicious_non_validator": {
            "name": "block_header_by_malicious_non_validator",
            "location": 231,
            "return": [],
            "arguments": {
                "malicious_non_validator_key": []
            }
        },
        "validator_auction_contract": {
            "name": "validator_auction_contract",
            "location": 236,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "web3": [],
                "deposit_locker_init": []
            }
        },
        "real_price_validator_auction_contract": {
            "name": "real_price_validator_auction_contract",
            "location": 249,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "maximal_number_of_auction_participants": [],
                "minimal_number_of_auction_participants": [],
                "web3": [],
                "deposit_locker_init": [],
                "auction_duration_in_days": [],
                "auction_start_price": []
            }
        },
        "almost_filled_real_price_validator_auction_contract": {
            "name": "almost_filled_real_price_validator_auction_contract",
            "location": 279,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "web3": [],
                "deposit_locker_init": [],
                "auction_duration_in_days": [],
                "auction_start_price": []
            }
        },
        "no_whitelist_eth_validator_auction_contract": {
            "name": "no_whitelist_eth_validator_auction_contract",
            "location": 322,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "web3": [],
                "maximal_number_of_auction_participants": [],
                "minimal_number_of_auction_participants": [],
                "auction_duration_in_days": [],
                "auction_start_price": []
            }
        },
        "almost_filled_validator_auction": {
            "name": "almost_filled_validator_auction",
            "location": 345,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "maximal_number_of_auction_participants": [],
                "web3": [],
                "deposit_locker_init": []
            }
        },
        "token_validator_auction_contract": {
            "name": "token_validator_auction_contract",
            "location": 372,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "web3": [],
                "token_deposit_locker_init": [],
                "auctionnable_token_contract": []
            }
        },
        "almost_filled_token_validator_auction": {
            "name": "almost_filled_token_validator_auction",
            "location": 394,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "maximal_number_of_auction_participants": [],
                "auctionnable_token_contract": [],
                "web3": [],
                "token_deposit_locker_init": []
            }
        },
        "real_price_token_validator_auction_contract": {
            "name": "real_price_token_validator_auction_contract",
            "location": 428,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "maximal_number_of_auction_participants": [],
                "minimal_number_of_auction_participants": [],
                "auctionnable_token_contract": [],
                "web3": [],
                "token_deposit_locker_init": [],
                "auction_duration_in_days": [],
                "auction_start_price": []
            }
        },
        "almost_filled_real_price_token_validator_auction_contract": {
            "name": "almost_filled_real_price_token_validator_auction_contract",
            "location": 462,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "web3": [],
                "token_deposit_locker_init": [],
                "auction_duration_in_days": [],
                "auctionnable_token_contract": [],
                "auction_start_price": []
            }
        },
        "no_whitelist_token_validator_auction_contract": {
            "name": "no_whitelist_token_validator_auction_contract",
            "location": 509,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "web3": [],
                "maximal_number_of_auction_participants": [],
                "minimal_number_of_auction_participants": [],
                "auction_duration_in_days": [],
                "auction_start_price": [],
                "auctionnable_token_contract": []
            }
        },
        "whitelist": {
            "name": "whitelist",
            "location": 534,
            "return": [],
            "arguments": {
                "chain": [],
                "maximal_number_of_auction_participants": []
            }
        },
        "send_ether_to_whitelisted_accounts": {
            "name": "send_ether_to_whitelisted_accounts",
            "location": 548,
            "return": [],
            "arguments": {
                "chain": [],
                "whitelist": []
            }
        },
        "add_whitelist_to_validator_auction_contract": {
            "name": "add_whitelist_to_validator_auction_contract",
            "location": 557,
            "return": [],
            "arguments": {
                "contract": [],
                "whitelist": []
            }
        },
        "block_reward_amount": {
            "name": "block_reward_amount",
            "location": 563,
            "return": [],
            "arguments": {
                "chain": [],
                "web3": []
            }
        },
        "tln_token_contract": {
            "name": "tln_token_contract",
            "location": 572,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "premint_token_address": [],
                "premint_token_value": []
            }
        },
        "auctionnable_token_contract": {
            "name": "auctionnable_token_contract",
            "location": 588,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "whitelist": [],
                "auction_start_price": []
            }
        },
        "premint_token_address": {
            "name": "premint_token_address",
            "location": 614,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "premint_token_value": {
            "name": "premint_token_value",
            "location": 619,
            "return": [],
            "arguments": {}
        },
        "validator_proxy_contract": {
            "name": "validator_proxy_contract",
            "location": 624,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "web3": [],
                "system_address": [],
                "accounts": []
            }
        },
        "validator_proxy_with_validators": {
            "name": "validator_proxy_with_validators",
            "location": 635,
            "return": [],
            "arguments": {
                "validator_proxy_contract": [],
                "system_address": [],
                "proxy_validators": [],
                "chain": []
            }
        },
        "foreign_bridge_contract": {
            "name": "foreign_bridge_contract",
            "location": 647,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "tln_token_contract": []
            }
        },
        "proxy_validators": {
            "name": "proxy_validators",
            "location": 654,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "system_address": {
            "name": "system_address",
            "location": 659,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "home_bridge_contract": {
            "name": "home_bridge_contract",
            "location": 664,
            "return": [],
            "arguments": {
                "deploy_contract": [],
                "validator_proxy_with_validators": [],
                "chain": []
            }
        },
        "deposit_locker_init.init": {
            "name": "init",
            "location": 50,
            "return": [],
            "arguments": {
                "deposit_locker": [],
                "depositors_proxy": []
            }
        },
        "token_deposit_locker_init.init": {
            "name": "init",
            "location": 63,
            "return": [],
            "arguments": {
                "deposit_locker": [],
                "depositors_proxy": [],
                "token": []
            }
        }
    },
    "blockchain-master/contracts/tests/data_generation.py": {
        "random_hash": {
            "name": "random_hash",
            "location": 17,
            "return": [
                "str",
                "bool",
                "dict",
                "Callable",
                "List[List[int]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "random_number": {
            "name": "random_number",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "random_private_key": {
            "name": "random_private_key",
            "location": 25,
            "return": [
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "make_short_block_header_list": {
            "name": "make_short_block_header_list",
            "location": 29,
            "return": [
                "Optional[int]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "block_header": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "make_full_block_header_list": {
            "name": "make_full_block_header_list",
            "location": 51,
            "return": [
                "Container[T]",
                "str"
            ],
            "arguments": {
                "block_header": [
                    "str",
                    "int"
                ]
            }
        },
        "sign_data": {
            "name": "sign_data",
            "location": 59,
            "return": [
                "dict",
                "str",
                "Exception",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]"
                ],
                "private_key": [
                    "Optional[str]",
                    "str",
                    "Iterator[Any]",
                    "Type[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "make_block_header": {
            "name": "make_block_header",
            "location": 64,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "timestamp": [
                    "int",
                    "dict",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "private_key": [
                    "int",
                    "dict",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "use_short_list": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "make_random_signed_data": {
            "name": "make_random_signed_data",
            "location": 107,
            "return": [
                "int",
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {}
        }
    },
    "blockchain-master/contracts/tests/deploy_util.py": {
        "initialize_validator_set": {
            "name": "initialize_validator_set",
            "location": 4,
            "return": [
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "test_validator_set_contract": [
                    "str"
                ],
                "validators": [
                    "str"
                ],
                "validator_proxy_address": [
                    "str"
                ],
                "web3": [
                    "Dict[str, Any]"
                ]
            }
        },
        "initialize_test_validator_slasher": {
            "name": "initialize_test_validator_slasher",
            "location": 14,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "deployed_contract": [
                    "Mapping[str, Any]"
                ],
                "fund_contract_address": [
                    "Mapping[str, Any]"
                ],
                "web3": [
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "initialize_deposit_locker": {
            "name": "initialize_deposit_locker",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deployed_contract": [],
                "release_timestamp": [],
                "validator_contract_address": [],
                "auction_contract_address": [],
                "web3": []
            }
        }
    },
    "blockchain-master/contracts/tests/test_deposit_locker.py": {
        "get_balance_function": {
            "name": "get_balance_function",
            "location": 10,
            "return": [],
            "arguments": {
                "web3": [],
                "token_contract": []
            }
        },
        "test_init_already_initialized": {
            "name": "test_init_already_initialized",
            "location": 17,
            "return": [],
            "arguments": {
                "deposit_locker_contract": [],
                "accounts": [],
                "deposit_locker_init": []
            }
        },
        "test_init_not_owner": {
            "name": "test_init_not_owner",
            "location": 27,
            "return": [],
            "arguments": {
                "non_initialized_deposit_locker_contract_session": [],
                "accounts": [],
                "release_timestamp": []
            }
        },
        "test_init_release_time_in_the_past": {
            "name": "test_init_release_time_in_the_past",
            "location": 41,
            "return": [],
            "arguments": {
                "non_initialized_deposit_locker_contract_session": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_owner_after_init": {
            "name": "test_owner_after_init",
            "location": 57,
            "return": [],
            "arguments": {
                "deposit_locker_contract": []
            }
        },
        "test_withdraw_not_initialized": {
            "name": "test_withdraw_not_initialized",
            "location": 66,
            "return": [],
            "arguments": {
                "non_initialized_deposit_locker_contract_session": [],
                "accounts": []
            }
        },
        "test_slash_not_initialized": {
            "name": "test_slash_not_initialized",
            "location": 75,
            "return": [],
            "arguments": {
                "non_initialized_deposit_locker_contract_session": [],
                "accounts": []
            }
        },
        "test_register_depositor_not_initialized": {
            "name": "test_register_depositor_not_initialized",
            "location": 84,
            "return": [],
            "arguments": {
                "non_initialized_deposit_locker_contract_session": [],
                "accounts": []
            }
        },
        "test_deposit_not_initialized": {
            "name": "test_deposit_not_initialized",
            "location": 93,
            "return": [],
            "arguments": {
                "non_initialized_deposit_locker_contract_session": [],
                "accounts": []
            }
        },
        "testenv": {
            "name": "testenv",
            "location": 148,
            "return": [],
            "arguments": {
                "request": [],
                "deploy_contract": [],
                "accounts": [],
                "web3": [],
                "release_timestamp": [],
                "premint_token_address": [],
                "premint_token_value": []
            }
        },
        "value_per_depositor": {
            "name": "value_per_depositor",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "testenv_deposited": {
            "name": "testenv_deposited",
            "location": 217,
            "return": [],
            "arguments": {
                "testenv": [],
                "value_per_depositor": [],
                "premint_token_address": []
            }
        },
        "testenv_deposits_released": {
            "name": "testenv_deposits_released",
            "location": 225,
            "return": [],
            "arguments": {
                "testenv_deposited": [],
                "release_timestamp": [],
                "chain": []
            }
        },
        "test_withdraw": {
            "name": "test_withdraw",
            "location": 232,
            "return": [],
            "arguments": {
                "testenv_deposits_released": [],
                "accounts": [],
                "web3": [],
                "value_per_depositor": []
            }
        },
        "test_withdraw_too_soon": {
            "name": "test_withdraw_too_soon",
            "location": 251,
            "return": [],
            "arguments": {
                "testenv_deposited": [],
                "accounts": []
            }
        },
        "test_event_withdraw": {
            "name": "test_event_withdraw",
            "location": 261,
            "return": [],
            "arguments": {
                "testenv_deposits_released": [],
                "value_per_depositor": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_register_from_non_proxy_throws": {
            "name": "test_register_from_non_proxy_throws",
            "location": 277,
            "return": [],
            "arguments": {
                "testenv": [],
                "web3": []
            }
        },
        "test_register_same_depositor_throws": {
            "name": "test_register_same_depositor_throws",
            "location": 285,
            "return": [],
            "arguments": {
                "testenv": [],
                "web3": []
            }
        },
        "test_register_after_deposit_throws": {
            "name": "test_register_after_deposit_throws",
            "location": 294,
            "return": [],
            "arguments": {
                "testenv_deposited": []
            }
        },
        "test_deposit_with_no_depositors_throws": {
            "name": "test_deposit_with_no_depositors_throws",
            "location": 299,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_register_logs_event": {
            "name": "test_register_logs_event",
            "location": 305,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_deposit_with_right_amount_logs_event": {
            "name": "test_deposit_with_right_amount_logs_event",
            "location": 328,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_deposit_right_amount": {
            "name": "test_deposit_right_amount",
            "location": 344,
            "return": [],
            "arguments": {
                "testenv": [],
                "web3": []
            }
        },
        "test_deposit_twice_throws": {
            "name": "test_deposit_twice_throws",
            "location": 359,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_deposit_unequal_amount": {
            "name": "test_deposit_unequal_amount",
            "location": 366,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_deposit_overflow_throws": {
            "name": "test_deposit_overflow_throws",
            "location": 377,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_zero_deposit_throws": {
            "name": "test_zero_deposit_throws",
            "location": 388,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_slash_from_non_slasher_throws": {
            "name": "test_slash_from_non_slasher_throws",
            "location": 395,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_slash_after_deposit_can_not_withdraw": {
            "name": "test_slash_after_deposit_can_not_withdraw",
            "location": 407,
            "return": [],
            "arguments": {
                "testenv_deposited": []
            }
        },
        "test_slash_after_deposit_burn_deposit": {
            "name": "test_slash_after_deposit_burn_deposit",
            "location": 414,
            "return": [],
            "arguments": {
                "testenv_deposited": [],
                "web3": [],
                "value_per_depositor": []
            }
        },
        "test_slash_twice_throws": {
            "name": "test_slash_twice_throws",
            "location": 430,
            "return": [],
            "arguments": {
                "testenv_deposited": []
            }
        },
        "test_slash_non_depositor_throws": {
            "name": "test_slash_non_depositor_throws",
            "location": 438,
            "return": [],
            "arguments": {
                "testenv_deposited": []
            }
        },
        "test_event_slash": {
            "name": "test_event_slash",
            "location": 443,
            "return": [],
            "arguments": {
                "testenv_deposited": [],
                "value_per_depositor": [],
                "web3": []
            }
        },
        "Env.use_token": {
            "name": "use_token",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Env.register_depositor": {
            "name": "register_depositor",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "depositor": []
            }
        },
        "Env.register_all_depositors": {
            "name": "register_all_depositors",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Env.deposit": {
            "name": "deposit",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "value_per_depositor": [],
                "total_value": []
            }
        },
        "Env.slash": {
            "name": "slash",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "depositor": []
            }
        },
        "Env.withdraw": {
            "name": "withdraw",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "depositor": []
            }
        },
        "Env.can_withdraw": {
            "name": "can_withdraw",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "depositor": []
            }
        },
        "Env.balance_of": {
            "name": "balance_of",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "address": []
            }
        }
    },
    "blockchain-master/contracts/tests/test_equivocation_inspector.py": {
        "test_get_signer_address_valid": {
            "name": "test_get_signer_address_valid",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "equivocation_inspector_contract_session": [],
                "block_header_by_malicious_validator": [],
                "malicious_validator_address": [
                    "bool"
                ]
            }
        },
        "test_fail_prove_equivcation_for_duplicated_block": {
            "name": "test_fail_prove_equivcation_for_duplicated_block",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "equivocation_inspector_contract_session": [
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "block_header_by_malicious_validator": [
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_fail_prove_equivocation_for_incorrect_header_formats": {
            "name": "test_fail_prove_equivocation_for_incorrect_header_formats",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "equivocation_inspector_contract_session": [
                    "Callable"
                ],
                "block_header_one": [
                    "Callable"
                ],
                "block_header_two": [
                    "Callable"
                ]
            }
        },
        "test_fail_prove_equivocation_for_different_block_signers": {
            "name": "test_fail_prove_equivocation_for_different_block_signers",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "equivocation_inspector_contract_session": [
                    "Callable"
                ],
                "block_header_by_malicious_validator": [
                    "Callable"
                ],
                "block_header_by_malicious_non_validator": [
                    "Callable"
                ]
            }
        },
        "test_fail_prove_equivocation_for_different_block_step": {
            "name": "test_fail_prove_equivocation_for_different_block_step",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "equivocation_inspector_contract_session": [
                    "Callable",
                    "float"
                ],
                "signed_block_header_one": [
                    "Callable",
                    "float"
                ],
                "signed_block_header_two": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_prove_equivocation_successfully": {
            "name": "test_prove_equivocation_successfully",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "equivocation_inspector_contract_session": [
                    "float",
                    "Callable"
                ],
                "signed_block_header_one": [
                    "float",
                    "Callable"
                ],
                "signed_block_header_two": [
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/test_rlp_reader.py": {
        "test_rlp_reader_contract": {
            "name": "test_rlp_reader_contract",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_fails_empty_to_rlp_item": {
            "name": "test_fails_empty_to_rlp_item",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_int_to_rlp_item": {
            "name": "test_int_to_rlp_item",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_string_to_rlp_item": {
            "name": "test_string_to_rlp_item",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_list_to_rlp_item": {
            "name": "test_list_to_rlp_item",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_is_list_true": {
            "name": "test_is_list_true",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_is_list_false": {
            "name": "test_is_list_false",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_to_bytes": {
            "name": "test_to_bytes",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_to_boolean": {
            "name": "test_to_boolean",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_to_uint_small": {
            "name": "test_to_uint_small",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_to_uint_big": {
            "name": "test_to_uint_big",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_uint_from_list": {
            "name": "test_get_uint_from_list",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_get_uint_from_big_list": {
            "name": "test_get_uint_from_big_list",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_to_address": {
            "name": "test_to_address",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_fails_get_uint_from_list_out_of_bounds": {
            "name": "test_fails_get_uint_from_list_out_of_bounds",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_get_uint_from_empty_list_": {
            "name": "test_fails_get_uint_from_empty_list_",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_get_uint_from_list_not_a_list": {
            "name": "test_fails_get_uint_from_list_not_a_list",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_get_uint_from_list_empty_byte_string": {
            "name": "test_fails_get_uint_from_list_empty_byte_string",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_to_uint_empty_byte_string": {
            "name": "test_fails_to_uint_empty_byte_string",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_to_boolean": {
            "name": "test_fails_to_boolean",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_to_bytes_from_empty_byte_string": {
            "name": "test_fails_to_bytes_from_empty_byte_string",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        },
        "test_fails_is_list_false_empty_byte_string": {
            "name": "test_fails_is_list_false_empty_byte_string",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "test_rlp_reader_contract": [
                    "str"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/test_token.py": {
        "tln_token_contract_with_allowance": {
            "name": "tln_token_contract_with_allowance",
            "location": 6,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "tln_token_contract": [
                    "int",
                    "Dict[str, Any]"
                ],
                "allowed_spender": [
                    "int",
                    "Dict[str, Any]"
                ],
                "allowance": [
                    "int",
                    "Dict[str, Any]"
                ],
                "premint_token_address": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "allowed_spender": {
            "name": "allowed_spender",
            "location": 24,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[bool]",
                "Tuple[Dict[str, Any], int]"
            ],
            "arguments": {
                "accounts": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "allowance": {
            "name": "allowance",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_premint": {
            "name": "test_premint",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract": [
                    "str",
                    "Tuple[int]",
                    "int"
                ],
                "premint_token_address": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "premint_token_value": [
                    "str",
                    "Tuple[int]",
                    "int"
                ]
            }
        },
        "test_race_condition_fix_on_allowance": {
            "name": "test_race_condition_fix_on_allowance",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract_with_allowance": [
                    "Sequence[Hashable]"
                ],
                "chain": [
                    "str",
                    "Tuple[str, dict]",
                    "Hashable",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "accounts": [
                    "str",
                    "List[int]",
                    "Sequence[str]"
                ],
                "premint_token_address": [
                    "Callable",
                    "list",
                    "int",
                    "Set[str]",
                    "str"
                ],
                "allowed_spender": [
                    "str",
                    "List[int]",
                    "Sequence[str]"
                ],
                "allowance": [
                    "Sequence[Hashable]"
                ]
            }
        },
        "test_unlimited_allowance": {
            "name": "test_unlimited_allowance",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract": [
                    "int"
                ],
                "premint_token_address": [
                    "int"
                ],
                "accounts": [
                    "bytes",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "test_burning": {
            "name": "test_burning",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract": [
                    "Callable",
                    "Tuple[int]",
                    "str"
                ],
                "premint_token_address": [
                    "Callable",
                    "Tuple[int]",
                    "str"
                ],
                "premint_token_value": [
                    "int"
                ]
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract": [
                    "Callable"
                ],
                "premint_token_address": [
                    "Callable"
                ],
                "premint_token_value": [
                    "int",
                    "str"
                ],
                "accounts": [
                    "Optional[bool]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_approve": {
            "name": "test_approve",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract": [
                    "Callable",
                    "dict"
                ],
                "accounts": []
            }
        },
        "test_transfer_from": {
            "name": "test_transfer_from",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "tln_token_contract_with_allowance": [
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "float"
                ],
                "premint_token_address": [
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "float"
                ],
                "premint_token_value": [
                    "int",
                    "str"
                ],
                "allowed_spender": [
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "float"
                ],
                "allowance": [
                    "int",
                    "Callable"
                ],
                "accounts": [
                    "List[str]",
                    "int",
                    "Optional[bool]",
                    "List[int]"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/test_validator_auction.py": {
        "send_transaction_with_optional_sender": {
            "name": "send_transaction_with_optional_sender",
            "location": 124,
            "return": [],
            "arguments": {
                "transaction": [],
                "sender": []
            }
        },
        "testenv": {
            "name": "testenv",
            "location": 132,
            "return": [],
            "arguments": {
                "request": [],
                "make_requested_testenv_for_contracts": [],
                "validator_auction_contract": [],
                "token_validator_auction_contract": [],
                "auctionnable_token_contract": []
            }
        },
        "testenv_started_auction": {
            "name": "testenv_started_auction",
            "location": 150,
            "return": [],
            "arguments": {
                "testenv": [],
                "make_requested_testenv_for_contracts": [],
                "accounts": []
            }
        },
        "testenv_almost_filled_auction": {
            "name": "testenv_almost_filled_auction",
            "location": 161,
            "return": [],
            "arguments": {
                "request": [],
                "make_requested_testenv_for_contracts": [],
                "almost_filled_validator_auction": [],
                "almost_filled_token_validator_auction": [],
                "auctionnable_token_contract": []
            }
        },
        "testenv_deposit_pending_auction": {
            "name": "testenv_deposit_pending_auction",
            "location": 180,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": []
            }
        },
        "testenv_deposit_pending_almost_filled_auction": {
            "name": "testenv_deposit_pending_almost_filled_auction",
            "location": 188,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "testenv_real_price_auction": {
            "name": "testenv_real_price_auction",
            "location": 201,
            "return": [],
            "arguments": {
                "request": [],
                "make_requested_testenv_for_contracts": [],
                "real_price_validator_auction_contract": [],
                "real_price_token_validator_auction_contract": [],
                "auctionnable_token_contract": []
            }
        },
        "testenv_almost_filled_real_price_auction": {
            "name": "testenv_almost_filled_real_price_auction",
            "location": 220,
            "return": [],
            "arguments": {
                "request": [],
                "make_requested_testenv_for_contracts": [],
                "almost_filled_real_price_validator_auction_contract": [],
                "almost_filled_real_price_token_validator_auction_contract": [],
                "auctionnable_token_contract": []
            }
        },
        "testenv_not_initialized_deposit_locker": {
            "name": "testenv_not_initialized_deposit_locker",
            "location": 239,
            "return": [],
            "arguments": {
                "request": [],
                "make_requested_testenv_for_contracts": [],
                "deploy_contract": [],
                "non_initialized_deposit_locker_contract_session": [],
                "auctionnable_token_contract": []
            }
        },
        "testenv_no_whitelist_auction": {
            "name": "testenv_no_whitelist_auction",
            "location": 288,
            "return": [],
            "arguments": {
                "request": [],
                "make_requested_testenv_for_contracts": [],
                "no_whitelist_eth_validator_auction_contract": [],
                "no_whitelist_token_validator_auction_contract": [],
                "auctionnable_token_contract": []
            }
        },
        "make_requested_testenv_for_contracts": {
            "name": "make_requested_testenv_for_contracts",
            "location": 305,
            "return": [],
            "arguments": {
                "web3": []
            }
        },
        "time_travel_to_end_of_auction": {
            "name": "time_travel_to_end_of_auction",
            "location": 321,
            "return": [],
            "arguments": {
                "chain": []
            }
        },
        "test_auction_state_deployed": {
            "name": "test_auction_state_deployed",
            "location": 329,
            "return": [],
            "arguments": {
                "testenv": []
            }
        },
        "test_cannot_bid_when_not_started": {
            "name": "test_cannot_bid_when_not_started",
            "location": 333,
            "return": [],
            "arguments": {
                "testenv": [],
                "accounts": []
            }
        },
        "test_auction_start_deposit_not_init": {
            "name": "test_auction_start_deposit_not_init",
            "location": 338,
            "return": [],
            "arguments": {
                "testenv_not_initialized_deposit_locker": []
            }
        },
        "test_auction_start": {
            "name": "test_auction_start",
            "location": 345,
            "return": [],
            "arguments": {
                "testenv": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_auction_start_not_owner": {
            "name": "test_auction_start_not_owner",
            "location": 355,
            "return": [],
            "arguments": {
                "testenv": [],
                "accounts": []
            }
        },
        "test_bidding_not_whitelisted": {
            "name": "test_bidding_not_whitelisted",
            "location": 361,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": []
            }
        },
        "test_bidding_bid_below_current_price": {
            "name": "test_bidding_bid_below_current_price",
            "location": 367,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": []
            }
        },
        "test_bidding": {
            "name": "test_bidding",
            "location": 373,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": []
            }
        },
        "test_bidding_too_late": {
            "name": "test_bidding_too_late",
            "location": 386,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_already_bid": {
            "name": "test_already_bid",
            "location": 394,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": []
            }
        },
        "test_auction_failed": {
            "name": "test_auction_failed",
            "location": 402,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_bidding_auction_failed": {
            "name": "test_bidding_auction_failed",
            "location": 409,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_close_auction_too_soon": {
            "name": "test_close_auction_too_soon",
            "location": 418,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": []
            }
        },
        "test_enough_bidders_ends_auction": {
            "name": "test_enough_bidders_ends_auction",
            "location": 425,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": []
            }
        },
        "test_end_auction_not_filled": {
            "name": "test_end_auction_not_filled",
            "location": 433,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_bidding_auction_ended": {
            "name": "test_bidding_auction_ended",
            "location": 446,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": []
            }
        },
        "test_send_bids_to_locker": {
            "name": "test_send_bids_to_locker",
            "location": 456,
            "return": [],
            "arguments": {
                "testenv_deposit_pending_auction": [],
                "accounts": [],
                "maximal_number_of_auction_participants": []
            }
        },
        "test_send_bids_to_locker_almost_filled_auction": {
            "name": "test_send_bids_to_locker_almost_filled_auction",
            "location": 479,
            "return": [],
            "arguments": {
                "testenv_deposit_pending_almost_filled_auction": [],
                "maximal_number_of_auction_participants": []
            }
        },
        "test_withdraw_overbid": {
            "name": "test_withdraw_overbid",
            "location": 505,
            "return": [],
            "arguments": {
                "testenv_almost_filled_real_price_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_cannot_withdraw_too_soon": {
            "name": "test_cannot_withdraw_too_soon",
            "location": 529,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": []
            }
        },
        "test_cannot_withdraw_twice": {
            "name": "test_cannot_withdraw_twice",
            "location": 537,
            "return": [],
            "arguments": {
                "testenv_almost_filled_real_price_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_withdraw_auction_failed": {
            "name": "test_withdraw_auction_failed",
            "location": 559,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": [],
                "chain": []
            }
        },
        "test_cannot_withdraw_overbid_not_bidder": {
            "name": "test_cannot_withdraw_overbid_not_bidder",
            "location": 582,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": []
            }
        },
        "test_withdraw_final_bid_exact_price_failed_auction": {
            "name": "test_withdraw_final_bid_exact_price_failed_auction",
            "location": 591,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "whitelist": [],
                "chain": []
            }
        },
        "test_event_bid_submitted": {
            "name": "test_event_bid_submitted",
            "location": 611,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_event_auction_started": {
            "name": "test_event_auction_started",
            "location": 628,
            "return": [],
            "arguments": {
                "testenv": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_event_auction_deployed": {
            "name": "test_event_auction_deployed",
            "location": 643,
            "return": [],
            "arguments": {
                "testenv_real_price_auction": [],
                "minimal_number_of_auction_participants": [],
                "maximal_number_of_auction_participants": []
            }
        },
        "test_event_auction_failed": {
            "name": "test_event_auction_failed",
            "location": 664,
            "return": [],
            "arguments": {
                "testenv_started_auction": [],
                "accounts": [],
                "chain": [],
                "web3": []
            }
        },
        "test_event_deposit_pending": {
            "name": "test_event_deposit_pending",
            "location": 683,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_event_auction_ended": {
            "name": "test_event_auction_ended",
            "location": 704,
            "return": [],
            "arguments": {
                "testenv_almost_filled_auction": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_event_whitelist": {
            "name": "test_event_whitelist",
            "location": 721,
            "return": [],
            "arguments": {
                "testenv_no_whitelist_auction": [],
                "whitelist": [],
                "web3": []
            }
        },
        "generate_price_test_data": {
            "name": "generate_price_test_data",
            "location": 736,
            "return": [],
            "arguments": {}
        },
        "auction_price_at_elapsed_time": {
            "name": "auction_price_at_elapsed_time",
            "location": 749,
            "return": [],
            "arguments": {
                "seconds_from_start": []
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 763,
            "return": [],
            "arguments": {
                "metafunc": []
            }
        },
        "test_verify_auction_duration_in_days_value": {
            "name": "test_verify_auction_duration_in_days_value",
            "location": 772,
            "return": [],
            "arguments": {
                "auction_duration_in_days": [],
                "auction_start_price": []
            }
        },
        "test_against_python_price_function": {
            "name": "test_against_python_price_function",
            "location": 782,
            "return": [],
            "arguments": {
                "testenv_real_price_auction": [],
                "hours_since_start": [],
                "python_price": []
            }
        },
        "test_price": {
            "name": "test_price",
            "location": 804,
            "return": [],
            "arguments": {
                "testenv_real_price_auction": [],
                "hours_since_start": [],
                "price_min": [],
                "price_max": []
            }
        },
        "test_bid_real_price_auction": {
            "name": "test_bid_real_price_auction",
            "location": 817,
            "return": [],
            "arguments": {
                "testenv_real_price_auction": [],
                "accounts": [],
                "chain": [],
                "web3": []
            }
        },
        "test_current_price_auction_not_started_fails": {
            "name": "test_current_price_auction_not_started_fails",
            "location": 833,
            "return": [],
            "arguments": {
                "testenv_real_price_auction": []
            }
        },
        "test_too_low_bid_fails_real_price_auction": {
            "name": "test_too_low_bid_fails_real_price_auction",
            "location": 841,
            "return": [],
            "arguments": {
                "testenv_real_price_auction": [],
                "accounts": [],
                "chain": [],
                "web3": []
            }
        },
        "TestEnv.use_token": {
            "name": "use_token",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.auction_start_time": {
            "name": "auction_start_time",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.current_price": {
            "name": "current_price",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.lowest_slot_price": {
            "name": "lowest_slot_price",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.close_time": {
            "name": "close_time",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.deposit_locker_address": {
            "name": "deposit_locker_address",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.auction_balance": {
            "name": "auction_balance",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.deposit_locker_balance": {
            "name": "deposit_locker_balance",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnv.assert_auction_state": {
            "name": "assert_auction_state",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "expected_auction_state": []
            }
        },
        "TestEnv.bid": {
            "name": "bid",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "bidder": [],
                "value": []
            }
        },
        "TestEnv.withdraw": {
            "name": "withdraw",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "TestEnv.get_bid": {
            "name": "get_bid",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "bidder": []
            }
        },
        "TestEnv.get_price_at_elapsed_time": {
            "name": "get_price_at_elapsed_time",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "seconds_since_start": []
            }
        },
        "TestEnv.start_auction": {
            "name": "start_auction",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "TestEnv.close_auction": {
            "name": "close_auction",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "TestEnv.deposit_bids": {
            "name": "deposit_bids",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "TestEnv.balance_of": {
            "name": "balance_of",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "TestEnv.add_to_whitelist": {
            "name": "add_to_whitelist",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "whitelist": [],
                "sender": []
            }
        },
        "make_requested_testenv_for_contracts.make_testenv": {
            "name": "make_testenv",
            "location": 306,
            "return": [],
            "arguments": {}
        }
    },
    "blockchain-master/contracts/tests/test_validator_proxy.py": {
        "test_update_validators": {
            "name": "test_update_validators",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_contract": [
                    "Type"
                ],
                "system_address": [
                    "Type"
                ],
                "accounts": []
            }
        },
        "test_update_validators_not_system": {
            "name": "test_update_validators_not_system",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_contract": [
                    "Type"
                ],
                "system_address": [],
                "accounts": []
            }
        },
        "test_number_of_validators": {
            "name": "test_number_of_validators",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_with_validators": [],
                "proxy_validators": []
            }
        },
        "test_get_validators": {
            "name": "test_get_validators",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_with_validators": [
                    "str",
                    "int"
                ],
                "proxy_validators": [
                    "str",
                    "int"
                ]
            }
        },
        "test_is_validator": {
            "name": "test_is_validator",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "validator_proxy_with_validators": [],
                "proxy_validators": [
                    "bool",
                    "str"
                ],
                "accounts": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/test_validator_set.py": {
        "test_get_validator": {
            "name": "test_get_validator",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "bool",
                    "web3.Web3"
                ],
                "validators": [
                    "str",
                    "bool",
                    "web3.Web3"
                ]
            }
        },
        "test_init_already_initialized": {
            "name": "test_init_already_initialized",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "accounts": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_remove_validator1": {
            "name": "test_remove_validator1",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Optional[str]"
                ],
                "validators": [
                    "web3.contracContract"
                ],
                "accounts": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_remove_validator0": {
            "name": "test_remove_validator0",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Optional[str]"
                ],
                "validators": [
                    "web3.contracContract"
                ],
                "accounts": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_remove_validator_not_finalized": {
            "name": "test_remove_validator_not_finalized",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Optional[str]"
                ],
                "validators": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "accounts": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ]
            }
        },
        "test_removing_validator_emits_initiate_change_event": {
            "name": "test_removing_validator_emits_initiate_change_event",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Optional[str]"
                ],
                "validators": [
                    "Callable",
                    "str"
                ],
                "accounts": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_initiate_change_event_parent_hash": {
            "name": "test_initiate_change_event_parent_hash",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "Optional[Dict]"
                ],
                "validator_set_contract_session": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "validators": [
                    "Callable"
                ],
                "accounts": [
                    "Callable"
                ]
            }
        },
        "test_initiate_change_event_new_set": {
            "name": "test_initiate_change_event_new_set",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "validators": [
                    "Callable",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "accounts": [
                    "Callable",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_get_validator_function_signature": {
            "name": "test_get_validator_function_signature",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_finalize_change_function_signature": {
            "name": "test_finalize_change_function_signature",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str"
                ]
            }
        },
        "test_cannot_call_finalize_change": {
            "name": "test_cannot_call_finalize_change",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "dict",
                    "int"
                ],
                "accounts": [
                    "web3.contracContract",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_change_validator_set_without_finalizing_do_not_touch_history": {
            "name": "test_change_validator_set_without_finalizing_do_not_touch_history",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "Callable"
                ],
                "accounts": [
                    "Dict[str, Sequence[str]]",
                    "List[Dict]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "test_finalize_change_stores_new_epoch_height": {
            "name": "test_finalize_change_stores_new_epoch_height",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "web3.contracContract"
                ],
                "accounts": [
                    "Dict[str, Sequence[str]]",
                    "List[str]",
                    "List[Dict]",
                    "Callable",
                    "str"
                ],
                "web3": [
                    "Optional[str]"
                ]
            }
        },
        "test_finalize_change_stores_new_validator_set": {
            "name": "test_finalize_change_stores_new_validator_set",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [],
                "accounts": [
                    "Dict[str, Sequence[str]]",
                    "bool",
                    "str",
                    "List[Dict]",
                    "List[str]",
                    "int"
                ],
                "web3": []
            }
        },
        "test_cannot_call_initiate_change": {
            "name": "test_cannot_call_initiate_change",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "dict",
                    "int"
                ],
                "accounts": [
                    "web3.contracContract",
                    "int",
                    "Callable"
                ],
                "validators": [
                    "web3.contracContract",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_report_validator_malicious_valdiator": {
            "name": "test_report_validator_malicious_valdiator",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bytes"
                ],
                "malicious_validator_address": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[Any]"
                ],
                "malicious_validator_key": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "validators": [
                    "str",
                    "Union[str, None]",
                    "Optional[Callable]",
                    "dict"
                ]
            }
        },
        "test_report_validator_malicious_non_validator": {
            "name": "test_report_validator_malicious_non_validator",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [
                    "str",
                    "int",
                    "Union[str, None]"
                ],
                "malicious_non_validator_key": [
                    "str",
                    "list"
                ]
            }
        },
        "test_changing_validator_set_updates_proxy": {
            "name": "test_changing_validator_set_updates_proxy",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract_session": [],
                "validator_proxy_contract": [
                    "str",
                    "Optional[str]"
                ],
                "validators": [],
                "system_address": []
            }
        }
    },
    "blockchain-master/contracts/tests/test_validator_slashing.py": {
        "test_init_already_initialized": {
            "name": "test_init_already_initialized",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "validator_slasher_contract": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "accounts": [
                    "dict"
                ]
            }
        },
        "test_init_not_owner": {
            "name": "test_init_not_owner",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "non_initialized_validator_slasher_contract_session": [
                    "bool",
                    "str",
                    "int"
                ],
                "accounts": [
                    "dict",
                    "List[Dict]"
                ],
                "validators": [
                    "List[str]",
                    "Callable[[], None]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_report_malicious_validator_malicious_validator": {
            "name": "test_report_malicious_validator_malicious_validator",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "validator_slasher_contract": [],
                "deposit_locker_contract_with_deposits": [],
                "malicious_validator_address": [],
                "malicious_validator_key": []
            }
        },
        "test_report_malicious_validator_malicious_non_validator": {
            "name": "test_report_malicious_validator_malicious_non_validator",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "validator_slasher_contract": [
                    "Dict[str, Union[str, Any]]"
                ],
                "malicious_non_validator_key": [
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/__init__.py": {},
    "blockchain-master/contracts/tests/bridge/test_foreign_bridge.py": {
        "foreign_bridge_with_token_balance": {
            "name": "foreign_bridge_with_token_balance",
            "location": 6,
            "return": [
                "int",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "foreign_bridge_contract": [
                    "str",
                    "float",
                    "Dict[str, str]"
                ],
                "tln_token_contract": [
                    "str",
                    "float",
                    "Dict[str, str]"
                ],
                "premint_token_address": [
                    "str",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "test_burn_token": {
            "name": "test_burn_token",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "foreign_bridge_with_token_balance": [
                    "int",
                    "list"
                ],
                "tln_token_contract": []
            }
        },
        "test_burn_token_with_zero_balance": {
            "name": "test_burn_token_with_zero_balance",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "foreign_bridge_with_token_balance": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_deploy_with_zero_token_address_fails": {
            "name": "test_deploy_with_zero_token_address_fails",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "set"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/bridge/test_home_bridge.py": {
        "non_payable_recipient": {
            "name": "non_payable_recipient",
            "location": 6,
            "return": [],
            "arguments": {
                "deploy_contract": []
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 12,
            "return": [],
            "arguments": {
                "home_bridge_contract": []
            }
        },
        "test_confirm_transfer_zero_address_recipient_throws": {
            "name": "test_confirm_transfer_zero_address_recipient_throws",
            "location": 47,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "confirm": []
            }
        },
        "test_confirm_transfer_zero_amount_throws": {
            "name": "test_confirm_transfer_zero_amount_throws",
            "location": 53,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "confirm": []
            }
        },
        "test_multi_confirm_transfer": {
            "name": "test_multi_confirm_transfer",
            "location": 59,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "confirm": [],
                "web3": []
            }
        },
        "test_confirm_transfer_emits_event": {
            "name": "test_confirm_transfer_emits_event",
            "location": 78,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "web3": [],
                "accounts": [],
                "confirm": []
            }
        },
        "test_confirm_throws_for_non_validator": {
            "name": "test_confirm_throws_for_non_validator",
            "location": 95,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "accounts": [],
                "confirm": []
            }
        },
        "test_complete_transfer": {
            "name": "test_complete_transfer",
            "location": 100,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "proxy_validators": [],
                "confirm": [],
                "web3": []
            }
        },
        "test_complete_transfer_send_fails": {
            "name": "test_complete_transfer_send_fails",
            "location": 153,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "proxy_validators": [],
                "confirm": [],
                "web3": [],
                "non_payable_recipient": []
            }
        },
        "test_complete_transfer_validator_set_change": {
            "name": "test_complete_transfer_validator_set_change",
            "location": 190,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "proxy_validators": [],
                "validator_proxy_with_validators": [],
                "confirm": [],
                "web3": [],
                "system_address": []
            }
        },
        "test_recheck_after_validator_set_change": {
            "name": "test_recheck_after_validator_set_change",
            "location": 249,
            "return": [],
            "arguments": {
                "home_bridge_contract": [],
                "proxy_validators": [],
                "validator_proxy_with_validators": [],
                "confirm": [],
                "web3": [],
                "system_address": []
            }
        },
        "test_multi_confirm_transfer.confirm_and_check": {
            "name": "confirm_and_check",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "confirm.Confirm.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "confirm.Confirm.assert_event_matches": {
            "name": "assert_event_matches",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "confirm.Confirm.reconfirm_completes_transfer": {
            "name": "reconfirm_completes_transfer",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blockchain-master/contracts/tests/bridge/test_measure_gas_home_bridge.py": {
        "number_of_validators": {
            "name": "number_of_validators",
            "location": 21,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "required_confirmations": {
            "name": "required_confirmations",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "number_of_validators": [
                    "str",
                    "int"
                ]
            }
        },
        "all_proxy_validators": {
            "name": "all_proxy_validators",
            "location": 33,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "chain": [
                    "int",
                    "float",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "proxy_validators": {
            "name": "proxy_validators",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "all_proxy_validators": [
                    "int",
                    "str"
                ],
                "number_of_validators": [
                    "int",
                    "str"
                ]
            }
        },
        "confirm_nth": {
            "name": "confirm_nth",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "home_bridge_contract": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "proxy_validators": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "web3": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_gas_cost_complete_transfer": {
            "name": "test_gas_cost_complete_transfer",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "home_bridge_contract": [],
                "proxy_validators": [],
                "confirm_nth": [
                    "Iterable[Any]"
                ],
                "web3": [],
                "number_of_validators": [
                    "str",
                    "bool"
                ],
                "required_confirmations": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "test_gas_cost_complete_transfer_with_validator_set_changed": {
            "name": "test_gas_cost_complete_transfer_with_validator_set_changed",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "home_bridge_contract": [],
                "proxy_validators": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "confirm_nth": [],
                "web3": [],
                "number_of_validators": [
                    "str",
                    "bool"
                ],
                "required_confirmations": [
                    "bool",
                    "float",
                    "Iterable[Any]",
                    "Callable"
                ],
                "system_address": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "validator_proxy_with_validators": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "confirm_nth.ConfirmNth.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "confirm_nth.ConfirmNth.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Union[int, float]",
                    "Collection[\"Issue\"]"
                ],
                "fail_ok": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "blockchain-master/contracts/tests/bridge/__init__.py": {},
    "blockchain-master/contracts/tests/withdraw_drop/test_withdraw_drop.py": {
        "withdraw_drop_contract": {
            "name": "withdraw_drop_contract",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "Dict[type, Any]",
                    "List[int]",
                    "int"
                ],
                "tln_token_contract": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "airdrop_list": [
                    "Dict[type, Any]",
                    "List[int]",
                    "int"
                ],
                "airdrop_values": [
                    "Dict[type, Any]",
                    "List[int]",
                    "int"
                ],
                "owner": [
                    "Dict[type, Any]",
                    "List[int]",
                    "int"
                ],
                "airdrop_time_limit": [
                    "Dict[type, Any]",
                    "List[int]",
                    "int"
                ],
                "web3": [
                    "str",
                    "bool"
                ],
                "premint_token_address": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "airdrop_list": {
            "name": "airdrop_list",
            "location": 38,
            "return": [
                "List[int]",
                "List[List[int]]",
                "Set[str]",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "whitelist": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "airdrop_values": {
            "name": "airdrop_values",
            "location": 43,
            "return": [
                "Set[str]",
                "Optional[dict]",
                "list",
                "List[str]",
                "int",
                "Dict[int, int]"
            ],
            "arguments": {}
        },
        "owner": {
            "name": "owner",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Union[str, Dict]",
                "int",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ]
            }
        },
        "airdrop_time_limit": {
            "name": "airdrop_time_limit",
            "location": 54,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_constructor_values": {
            "name": "test_constructor_values",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [],
                "airdrop_list": [
                    "int",
                    "list",
                    "dict",
                    "Dict[str, List['WantedGallery']]"
                ],
                "airdrop_values": [
                    "int",
                    "list",
                    "dict",
                    "Dict[str, List['WantedGallery']]"
                ],
                "tln_token_contract": [
                    "Dict[str, List[str]]"
                ],
                "owner": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "airdrop_time_limit": [
                    "Dict[str, List[str]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_withdraws": {
            "name": "test_withdraws",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [
                    "Callable"
                ],
                "airdrop_list": [
                    "list",
                    "int",
                    "Dict[str, List['WantedGallery']]",
                    "dict",
                    "float"
                ],
                "airdrop_values": [
                    "list",
                    "int",
                    "Dict[str, List['WantedGallery']]",
                    "dict",
                    "float"
                ],
                "tln_token_contract": [
                    "Callable"
                ]
            }
        },
        "test_withdraw_twice": {
            "name": "test_withdraw_twice",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [],
                "airdrop_list": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "test_withdraw_not_listed": {
            "name": "test_withdraw_not_listed",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [],
                "accounts": [],
                "airdrop_list": []
            }
        },
        "test_close_aidrop": {
            "name": "test_close_aidrop",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [
                    "int"
                ],
                "tln_token_contract": [
                    "int"
                ],
                "owner": [
                    "int",
                    "str"
                ],
                "accounts": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "chain": [
                    "dict",
                    "bytes",
                    "str",
                    "Callable",
                    "bool"
                ],
                "airdrop_time_limit": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_close_aidrop_too_soon": {
            "name": "test_close_aidrop_too_soon",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [
                    "Dict[str, Union[str, Any]]"
                ],
                "owner": [
                    "Dict[str, Union[str, Any]]"
                ]
            }
        },
        "test_withdraw_after_closed_aidrop": {
            "name": "test_withdraw_after_closed_aidrop",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "withdraw_drop_contract": [],
                "tln_token_contract": [
                    "Callable"
                ],
                "owner": [
                    "Dict[str, List[str]]"
                ],
                "chain": [
                    "float",
                    "Callable",
                    "dict"
                ],
                "airdrop_time_limit": [
                    "Callable",
                    "dict",
                    "float",
                    "str"
                ],
                "airdrop_list": [
                    "List[Dict[str, str]]",
                    "List[int]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/setup.py": {},
    "blockchain-master/deploy-tools/auction-deploy/scripts/pack_contracts.py": {
        "pack_contracts": {
            "name": "pack_contracts",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "bool"
                ],
                "output_filename": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/src/auction_deploy/cli.py": {
        "validate_date": {
            "name": "validate_date",
            "location": 42,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "validate_optional_address": {
            "name": "validate_optional_address",
            "location": 53,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "get_errors_messages_on_contracts_links": {
            "name": "get_errors_messages_on_contracts_links",
            "location": 112,
            "return": [],
            "arguments": {
                "all_contracts": []
            }
        },
        "main": {
            "name": "main",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 232,
            "return": [],
            "arguments": {
                "start_price": [],
                "auction_duration": [],
                "minimal_number_of_participants": [],
                "maximal_number_of_participants": [],
                "use_token": [],
                "token_address": [],
                "release_timestamp": [],
                "release_date": [],
                "keystore": [],
                "jsonrpc": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": [],
                "already_deployed_auction": [],
                "already_deployed_locker": [],
                "already_deployed_slasher": []
            }
        },
        "start": {
            "name": "start",
            "location": 337,
            "return": [],
            "arguments": {
                "auction_address": [],
                "keystore": [],
                "jsonrpc": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": []
            }
        },
        "deposit_bids": {
            "name": "deposit_bids",
            "location": 378,
            "return": [],
            "arguments": {
                "auction_address": [],
                "keystore": [],
                "jsonrpc": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": []
            }
        },
        "close": {
            "name": "close",
            "location": 418,
            "return": [],
            "arguments": {
                "auction_address": [],
                "keystore": [],
                "jsonrpc": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": []
            }
        },
        "format_timestamp": {
            "name": "format_timestamp",
            "location": 449,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "status": {
            "name": "status",
            "location": 462,
            "return": [],
            "arguments": {
                "auction_address": [],
                "jsonrpc": []
            }
        },
        "whitelist": {
            "name": "whitelist",
            "location": 582,
            "return": [],
            "arguments": {
                "whitelist_file": [],
                "auction_address": [],
                "batch_size": [],
                "keystore": [],
                "jsonrpc": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": []
            }
        },
        "check_whitelist": {
            "name": "check_whitelist",
            "location": 627,
            "return": [],
            "arguments": {
                "whitelist_file": [],
                "auction_address": [],
                "jsonrpc": []
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/src/auction_deploy/core.py": {
        "deploy_auction_contracts": {
            "name": "deploy_auction_contracts",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "initialize_auction_contracts": {
            "name": "initialize_auction_contracts",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_deployed_auction_contracts": {
            "name": "get_deployed_auction_contracts",
            "location": 219,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "web3.Web3"
                ],
                "auction_address": [
                    "web3.Web3",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "int"
                ]
            }
        },
        "get_bid_token_address": {
            "name": "get_bid_token_address",
            "location": 247,
            "return": [
                "bool",
                "Iterable[Union[dict, str]]"
            ],
            "arguments": {
                "web3": [
                    "web3.Web3",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "List[str]"
                ],
                "auction_address": [
                    "web3.Web3",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "List[str]"
                ]
            }
        },
        "whitelist_addresses": {
            "name": "whitelist_addresses",
            "location": 258,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "auction_contract": [
                    "str",
                    "Dict[str, int]",
                    "bool",
                    "List[str]"
                ],
                "whitelist": [
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "missing_whitelisted_addresses": {
            "name": "missing_whitelisted_addresses",
            "location": 299,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "auction_contract": [
                    "Sequence[str]",
                    "web3.contracContract",
                    "str"
                ],
                "whitelist": [
                    "Sequence[str]",
                    "web3.contracContract",
                    "str"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/src/auction_deploy/__init__.py": {},
    "blockchain-master/deploy-tools/auction-deploy/tests/conftest.py": {
        "remove_click_options_environment_variables": {
            "name": "remove_click_options_environment_variables",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_address_string": {
            "name": "create_address_string",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "keystores": {
            "name": "keystores",
            "location": 41,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "List[str]"
                ],
                "account_keys": [
                    "str"
                ],
                "key_password": [
                    "str"
                ]
            }
        },
        "keystore_file_path": {
            "name": "keystore_file_path",
            "location": 59,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "keystores": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "key_password": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "key_password": {
            "name": "key_password",
            "location": 65,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "private_key": {
            "name": "private_key",
            "location": 71,
            "return": [
                "str",
                "dict",
                "bytes",
                "Optional[Mapping[str, str]]"
            ],
            "arguments": {
                "account_keys": [
                    "int",
                    "str",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "whitelist": {
            "name": "whitelist",
            "location": 77,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "ether_owning_whitelist": {
            "name": "ether_owning_whitelist",
            "location": 82,
            "return": [
                "bool",
                "int",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ]
            }
        },
        "release_timestamp": {
            "name": "release_timestamp",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": []
            }
        },
        "token_contract": {
            "name": "token_contract",
            "location": 94,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "ether_owning_whitelist": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "use_token": {
            "name": "use_token",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "auction_options": {
            "name": "auction_options",
            "location": 132,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "release_timestamp": [
                    "bool",
                    "str",
                    "int",
                    "Set[str]"
                ],
                "use_token": [
                    "Callable"
                ],
                "token_contract": [
                    "Callable"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/tests/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "extract_auction_address": {
            "name": "extract_auction_address",
            "location": 24,
            "return": [],
            "arguments": {
                "output": []
            }
        },
        "deployed_auction_address": {
            "name": "deployed_auction_address",
            "location": 34,
            "return": [],
            "arguments": {
                "auction_options": [],
                "runner": [],
                "use_token": [],
                "token_contract": []
            }
        },
        "whitelisted_auction_address": {
            "name": "whitelisted_auction_address",
            "location": 56,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "whitelist_file": []
            }
        },
        "whitelist_file": {
            "name": "whitelist_file",
            "location": 69,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "whitelist": []
            }
        },
        "contracts": {
            "name": "contracts",
            "location": 82,
            "return": [],
            "arguments": {
                "deployed_auction_address": []
            }
        },
        "contracts_not_initialized": {
            "name": "contracts_not_initialized",
            "location": 88,
            "return": [],
            "arguments": {
                "auction_options": []
            }
        },
        "ensure_auction_state": {
            "name": "ensure_auction_state",
            "location": 99,
            "return": [],
            "arguments": {
                "contracts": []
            }
        },
        "bid": {
            "name": "bid",
            "location": 109,
            "return": [],
            "arguments": {
                "auction_contract": [],
                "token_contract": [],
                "sender": [],
                "bid_value": [],
                "use_token": []
            }
        },
        "deposit_pending_auction": {
            "name": "deposit_pending_auction",
            "location": 120,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "contracts": [],
                "token_contract": [],
                "auction_options": [],
                "use_token": [],
                "ether_owning_whitelist": [],
                "ensure_auction_state": []
            }
        },
        "test_cli_release_date_option": {
            "name": "test_cli_release_date_option",
            "location": 156,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_cli_contract_parameters_set": {
            "name": "test_cli_contract_parameters_set",
            "location": 169,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_cli_deploy_token_auction": {
            "name": "test_cli_deploy_token_auction",
            "location": 180,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_cli_resume_deployment": {
            "name": "test_cli_resume_deployment",
            "location": 190,
            "return": [],
            "arguments": {
                "runner": [],
                "contracts_not_initialized": []
            }
        },
        "test_cli_transaction_parameters_set": {
            "name": "test_cli_transaction_parameters_set",
            "location": 205,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_cli_private_key": {
            "name": "test_cli_private_key",
            "location": 214,
            "return": [],
            "arguments": {
                "runner": [],
                "keystore_file_path": [],
                "key_password": []
            }
        },
        "test_cli_start_auction": {
            "name": "test_cli_start_auction",
            "location": 226,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": []
            }
        },
        "test_cli_close_auction": {
            "name": "test_cli_close_auction",
            "location": 235,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "ensure_auction_state": [],
                "contracts": []
            }
        },
        "test_cli_start_auction_with_auto_nonce": {
            "name": "test_cli_start_auction_with_auto_nonce",
            "location": 261,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "keystores": [],
                "key_password": []
            }
        },
        "test_cli_start_auction_key_not_owner": {
            "name": "test_cli_start_auction_key_not_owner",
            "location": 275,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "keystore_file_path": [],
                "key_password": []
            }
        },
        "test_cli_deposit_bids": {
            "name": "test_cli_deposit_bids",
            "location": 293,
            "return": [],
            "arguments": {
                "runner": [],
                "deposit_pending_auction": [],
                "ensure_auction_state": []
            }
        },
        "replace_bad_function_call_output": {
            "name": "replace_bad_function_call_output",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_cli_auction_status": {
            "name": "test_cli_auction_status",
            "location": 315,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": []
            }
        },
        "test_cli_auction_status_locker_not_init": {
            "name": "test_cli_auction_status_locker_not_init",
            "location": 324,
            "return": [],
            "arguments": {
                "runner": [],
                "contracts_not_initialized": []
            }
        },
        "test_cli_whitelist": {
            "name": "test_cli_whitelist",
            "location": 335,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "whitelist_file": [],
                "whitelist": []
            }
        },
        "test_cli_check_whitelist_not_whitelisted": {
            "name": "test_cli_check_whitelist_not_whitelisted",
            "location": 345,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": [],
                "whitelist_file": [],
                "whitelist": []
            }
        },
        "test_cli_check_whitelist_all_whitelisted": {
            "name": "test_cli_check_whitelist_all_whitelisted",
            "location": 360,
            "return": [],
            "arguments": {
                "runner": [],
                "whitelisted_auction_address": [],
                "whitelist_file": [],
                "whitelist": []
            }
        },
        "test_cli_not_checksummed_address": {
            "name": "test_cli_not_checksummed_address",
            "location": 373,
            "return": [],
            "arguments": {
                "runner": [],
                "deployed_auction_address": []
            }
        },
        "test_cli_incorrect_address_parameter_fails": {
            "name": "test_cli_incorrect_address_parameter_fails",
            "location": 382,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "ensure_auction_state.ensure_state": {
            "name": "ensure_state",
            "location": 102,
            "return": [],
            "arguments": {
                "expected_state": []
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/tests/test_deploy.py": {
        "deployed_contracts": {
            "name": "deployed_contracts",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "str",
                    "int"
                ],
                "auction_options": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_deploy_contracts": {
            "name": "test_deploy_contracts",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Dict[str, Any]"
                ],
                "auction_options": [
                    "str"
                ]
            }
        },
        "already_deployed_auction_address": {
            "name": "already_deployed_auction_address",
            "location": 59,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ],
                "deployed_contracts": [
                    "Callable"
                ]
            }
        },
        "already_deployed_locker_address": {
            "name": "already_deployed_locker_address",
            "location": 67,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ],
                "deployed_contracts": [
                    "Callable"
                ]
            }
        },
        "already_initialized_locker_contract": {
            "name": "already_initialized_locker_contract",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "deployed_contracts": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "use_token": [
                    "str"
                ],
                "token_contract": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "already_deployed_slasher_address": {
            "name": "already_deployed_slasher_address",
            "location": 91,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ],
                "deployed_contracts": [
                    "Callable"
                ]
            }
        },
        "already_initialized_slasher_contract": {
            "name": "already_initialized_slasher_contract",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ],
                "deployed_contracts": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "already_deployed_contract_addresses": {
            "name": "already_deployed_contract_addresses",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "already_deployed_auction_address": [
                    "List[str]",
                    "Callable[[dict], None]",
                    "bool",
                    "Optional[str]"
                ],
                "already_deployed_locker_address": [
                    "List[str]",
                    "Callable[[dict], None]",
                    "bool",
                    "Optional[str]"
                ],
                "already_deployed_slasher_address": [
                    "List[str]",
                    "Callable[[dict], None]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "already_initialized_contract_addresses": {
            "name": "already_initialized_contract_addresses",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deployed_contracts": [
                    "int",
                    "Callable",
                    "str"
                ],
                "already_initialized_locker_contract": [
                    "int",
                    "Callable",
                    "str"
                ],
                "already_initialized_slasher_contract": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_resume_deploy_contracts": {
            "name": "test_resume_deploy_contracts",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [],
                "auction_options": [],
                "already_deployed_contract_addresses": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "test_init_contracts": {
            "name": "test_init_contracts",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "deployed_contracts": [
                    "src.core.model.scripScript",
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "web3": [
                    "src.core.model.scripScript"
                ],
                "release_timestamp": [
                    "src.core.model.scripScript"
                ],
                "auction_options": [
                    "src.core.model.scripScript"
                ]
            }
        },
        "test_resume_init_contracts": {
            "name": "test_resume_init_contracts",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "already_initialized_contract_addresses": [
                    "bool"
                ],
                "web3": [
                    "str"
                ],
                "release_timestamp": [
                    "str"
                ],
                "auction_options": [
                    "str"
                ]
            }
        },
        "test_whitelist_addresses": {
            "name": "test_whitelist_addresses",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "deployed_contracts": [
                    "str",
                    "float"
                ],
                "whitelist": [
                    "blurr.core.aggregate.Aggregate",
                    "str",
                    "float",
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "web3": [
                    "float",
                    "str"
                ]
            }
        },
        "test_whitelist_addresses_with_nonce": {
            "name": "test_whitelist_addresses_with_nonce",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "deployed_contracts": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "whitelist": [
                    "int"
                ],
                "web3": [
                    "bool"
                ],
                "default_account": [
                    "Callable",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "account_keys": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_whitelist_filter": {
            "name": "test_whitelist_filter",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "deployed_contracts": [
                    "str",
                    "Callable"
                ],
                "whitelist": [],
                "web3": [
                    "int"
                ]
            }
        },
        "test_whitelist_only_not_whitelisted": {
            "name": "test_whitelist_only_not_whitelisted",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "deployed_contracts": [
                    "str",
                    "float"
                ],
                "whitelist": [
                    "int",
                    "core.models.Grouping"
                ],
                "web3": [
                    "int",
                    "core.models.Grouping"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/auction-deploy/tests/__init__.py": {},
    "blockchain-master/deploy-tools/bridge-deploy/setup.py": {},
    "blockchain-master/deploy-tools/bridge-deploy/src/bridge_deploy/cli.py": {
        "validate_address": {
            "name": "validate_address",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "validate_percentage_value": {
            "name": "validate_percentage_value",
            "location": 32,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[T]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Tuple[str]",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "param": [
                    "click.Context",
                    "Tuple[str]",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "value": [
                    "str",
                    "Awaitable",
                    "int",
                    "Iterable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "deploy_foreign": {
            "name": "deploy_foreign",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "keystore": [
                    "Tuple[int, int]"
                ],
                "jsonrpc": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "gas": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "gas_price": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "nonce": [
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Callable[[str, str], None]",
                    "Hashable"
                ],
                "auto_nonce": [
                    "int",
                    "bool",
                    "Optional[Union[int, str]]",
                    "Callable"
                ],
                "token_address": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "deploy_home": {
            "name": "deploy_home",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "keystore": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "gas": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "gas_price": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "nonce": [
                    "str",
                    "bool"
                ],
                "auto_nonce": [
                    "str",
                    "slice"
                ],
                "jsonrpc": [
                    "bool",
                    "str",
                    "int"
                ],
                "validator_proxy_address": [
                    "int",
                    "str"
                ],
                "validators_required_percent": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/bridge-deploy/src/bridge_deploy/core.py": {
        "load_contract": {
            "name": "load_contract",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "contract_name": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "deploy_foreign_bridge_contract": {
            "name": "deploy_foreign_bridge_contract",
            "location": 18,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "deploy_home_bridge_contract": {
            "name": "deploy_home_bridge_contract",
            "location": 41,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "blockchain-master/deploy-tools/bridge-deploy/src/bridge_deploy/__init__.py": {},
    "blockchain-master/deploy-tools/bridge-deploy/tests/conftest.py": {
        "abitrary_address": {
            "name": "abitrary_address",
            "location": 5,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "blockchain-master/deploy-tools/bridge-deploy/tests/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_deploy_foreign": {
            "name": "test_deploy_foreign",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "abitrary_address": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_deploy_home": {
            "name": "test_deploy_home",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "abitrary_address": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_deploy_home_with_valid_required_percentage_argument_lower_bound": {
            "name": "test_deploy_home_with_valid_required_percentage_argument_lower_bound",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "abitrary_address": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_deploy_home_with_valid_required_percentage_argument_upper_bound": {
            "name": "test_deploy_home_with_valid_required_percentage_argument_upper_bound",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "abitrary_address": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_deploy_home_with_invalid_required_percentage_argument_lower_bound": {
            "name": "test_deploy_home_with_invalid_required_percentage_argument_lower_bound",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "abitrary_address": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_deploy_home_with_invalid_required_percentage_argument_upper_bound": {
            "name": "test_deploy_home_with_invalid_required_percentage_argument_upper_bound",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "abitrary_address": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/bridge-deploy/tests/test_core.py": {
        "test_deploy_foreign_bridge_contract": {
            "name": "test_deploy_foreign_bridge_contract",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "abitrary_address": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_deploy_home_bridge_contract": {
            "name": "test_deploy_home_bridge_contract",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "abitrary_address": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/validator-set-deploy/setup.py": {},
    "blockchain-master/deploy-tools/validator-set-deploy/scripts/pack_contracts.py": {
        "pack_contracts": {
            "name": "pack_contracts",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "bool"
                ],
                "output_filename": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/validator-set-deploy/src/validator_set_deploy/cli.py": {
        "validate_address": {
            "name": "validate_address",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "keystore": [
                    "TextIO",
                    "IO[str]"
                ],
                "validators_file": [
                    "Optional[str]",
                    "str"
                ],
                "validator_proxy_address": [
                    "str"
                ],
                "jsonrpc": [
                    "str"
                ],
                "gas": [
                    "str",
                    "Callable",
                    "Optional[Dict]",
                    "Union[List, set]",
                    "Dict[str, str]"
                ],
                "gas_price": [
                    "str",
                    "Callable",
                    "Optional[Dict]",
                    "Union[List, set]",
                    "Dict[str, str]"
                ],
                "nonce": [
                    "float",
                    "str",
                    "IO"
                ],
                "auto_nonce": [
                    "int",
                    "str",
                    "Union[str, IO[bytes]]"
                ]
            }
        },
        "deploy_proxy": {
            "name": "deploy_proxy",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "keystore": [
                    "TextIO",
                    "IO[str]"
                ],
                "validators_file": [
                    "Optional[str]",
                    "str"
                ],
                "jsonrpc": [
                    "str"
                ],
                "gas": [
                    "str",
                    "Callable",
                    "Optional[Dict]",
                    "Union[List, set]",
                    "Dict[str, str]"
                ],
                "gas_price": [
                    "str",
                    "Callable",
                    "Optional[Dict]",
                    "Union[List, set]",
                    "Dict[str, str]"
                ],
                "nonce": [
                    "float",
                    "str",
                    "IO"
                ],
                "auto_nonce": [
                    "int",
                    "str",
                    "Union[str, IO[bytes]]"
                ]
            }
        },
        "check_validators": {
            "name": "check_validators",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "validator_contract_address": [
                    "int",
                    "str"
                ],
                "validators_file": [
                    "str",
                    "bytes",
                    "Optional[\"Source\"]",
                    "Dict[str, float]"
                ],
                "jsonrpc": [
                    "str",
                    "TextIO",
                    "bool",
                    "int"
                ]
            }
        },
        "print_validators": {
            "name": "print_validators",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "validator_contract_address": [
                    "List[int]",
                    "str"
                ],
                "jsonrpc": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/validator-set-deploy/src/validator_set_deploy/core.py": {
        "deploy_validator_set_contract": {
            "name": "deploy_validator_set_contract",
            "location": 11,
            "return": [
                "Set[str]",
                "str",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]",
                "Mapping[str, int]"
            ],
            "arguments": {}
        },
        "initialize_validator_set_contract": {
            "name": "initialize_validator_set_contract",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_validator_proxy_contract": {
            "name": "deploy_validator_proxy_contract",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_validator_contract": {
            "name": "get_validator_contract",
            "location": 82,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "blockchain-master/deploy-tools/validator-set-deploy/src/validator_set_deploy/__init__.py": {},
    "blockchain-master/deploy-tools/validator-set-deploy/tests/conftest.py": {
        "validator_list": {
            "name": "validator_list",
            "location": 6,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "validator_list.create_address_string": {
            "name": "create_address_string",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/validator-set-deploy/tests/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "validators_file": {
            "name": "validators_file",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "list",
                    "Iterable[str]",
                    "int",
                    "Optional[str]"
                ],
                "validator_list": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "validators_file_missing_validators": {
            "name": "validators_file_missing_validators",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "validator_list": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "deployed_validator_contract_address": {
            "name": "deployed_validator_contract_address",
            "location": 48,
            "return": [
                "float",
                "bytearray",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "runner": [
                    "bool",
                    "IO"
                ],
                "validators_file": [
                    "bool",
                    "IO"
                ]
            }
        },
        "extract_validator_contract_address": {
            "name": "extract_validator_contract_address",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "output": [
                    "str"
                ]
            }
        },
        "test_deploy": {
            "name": "test_deploy",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "validators_file": [
                    "str"
                ]
            }
        },
        "test_deploy_proxy": {
            "name": "test_deploy_proxy",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [],
                "validators_file": []
            }
        },
        "test_deploy_proxy_no_validators": {
            "name": "test_deploy_proxy_no_validators",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_check_validators": {
            "name": "test_check_validators",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "deployed_validator_contract_address": [
                    "str"
                ],
                "validators_file": [
                    "str"
                ]
            }
        },
        "test_check_missing_validators": {
            "name": "test_check_missing_validators",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "deployed_validator_contract_address": [
                    "str"
                ],
                "validators_file_missing_validators": [
                    "str"
                ]
            }
        },
        "test_print_validators": {
            "name": "test_print_validators",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Iterable[Any]"
                ],
                "deployed_validator_contract_address": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "blockchain-master/deploy-tools/validator-set-deploy/tests/test_deploy.py": {
        "validator_set_contract": {
            "name": "validator_set_contract",
            "location": 14,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "initialized_validator_set_contract": {
            "name": "initialized_validator_set_contract",
            "location": 22,
            "return": [
                "Set[str]",
                "str",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]",
                "Mapping[str, int]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "validator_list": [
                    "Optional[str]",
                    "str",
                    "Union[int, float]"
                ],
                "validator_set_contract": [
                    "List[Tuple[int, int]]",
                    "list",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "test_deploy_validator_set": {
            "name": "test_deploy_validator_set",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "str"
                ]
            }
        },
        "test_init_validator_set": {
            "name": "test_init_validator_set",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "validator_set_contract": [
                    "str",
                    "int"
                ],
                "validator_list": [
                    "str",
                    "int"
                ],
                "web3": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Dict[int, str]"
                ]
            }
        },
        "test_deploy_proxy": {
            "name": "test_deploy_proxy",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_deploy_proxy_no_validators": {
            "name": "test_deploy_proxy_no_validators",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "web3": []
            }
        }
    },
    "blockchain-master/quickstart/setup.py": {},
    "blockchain-master/quickstart/src/quickstart/bridge.py": {
        "setup_interactively": {
            "name": "setup_interactively",
            "location": 24,
            "return": [],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "bridge_config_file": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "foreign_chain_name": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "copy_default_bridge_config": {
            "name": "copy_default_bridge_config",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "user_file": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "List[pathlib.Path]",
                    "Union[pathlib.Path, str, None]",
                    "Optional[str]"
                ],
                "bridge_config_file": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "List[pathlib.Path]",
                    "Union[pathlib.Path, str, None]",
                    "Optional[str]"
                ]
            }
        },
        "_should_overwrite_prompt": {
            "name": "_should_overwrite_prompt",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "bridge_config_file": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "_write_bridge_config_dialog": {
            "name": "_write_bridge_config_dialog",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "read_json_rpc_url": {
            "name": "read_json_rpc_url",
            "location": 136,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "bridge_config_file": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "is_default_json_url": {
            "name": "is_default_json_url",
            "location": 166,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "template_path": [
                    "str",
                    "pathlib.Path",
                    "pathlib2.Path"
                ],
                "url": [
                    "Sequence[str]",
                    "type",
                    "bool",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "change_json_rpc_url": {
            "name": "change_json_rpc_url",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]"
                ],
                "url": [
                    "bool",
                    "str"
                ]
            }
        },
        "is_bridge_using_template_json_rpc_url": {
            "name": "is_bridge_using_template_json_rpc_url",
            "location": 179,
            "return": [
                "bool",
                "int",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Optional[Dict]"
                ],
                "template_path": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "blockchain-master/quickstart/src/quickstart/cli.py": {
        "docker_compose_file_getter": {
            "name": "docker_compose_file_getter",
            "location": 16,
            "return": [],
            "arguments": {
                "config_name": []
            }
        },
        "bridge_config_file_getter": {
            "name": "bridge_config_file_getter",
            "location": 20,
            "return": [],
            "arguments": {
                "config_name": []
            }
        },
        "config_file_getter": {
            "name": "config_file_getter",
            "location": 24,
            "return": [],
            "arguments": {
                "config_name": [],
                "filename": []
            }
        },
        "project_name_option": {
            "name": "project_name_option",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "base_dir_option": {
            "name": "base_dir_option",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "confirm_expose_ports": {
            "name": "confirm_expose_ports",
            "location": 80,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "main": {
            "name": "main",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "tlbc": {
            "name": "tlbc",
            "location": 118,
            "return": [],
            "arguments": {
                "host_base_dir": [],
                "project_name": [],
                "base_dir": [],
                "expose_node_ports": []
            }
        },
        "laika": {
            "name": "laika",
            "location": 146,
            "return": [],
            "arguments": {
                "host_base_dir": [],
                "project_name": [],
                "base_dir": [],
                "expose_node_ports": []
            }
        },
        "custom": {
            "name": "custom",
            "location": 211,
            "return": [],
            "arguments": {
                "host_base_dir": [],
                "docker_compose_file": [],
                "base_dir": [],
                "project_name": [],
                "bridge_config": [],
                "netstats_url": [],
                "chain_dir": [],
                "expose_node_ports": []
            }
        },
        "run": {
            "name": "run",
            "location": 246,
            "return": [],
            "arguments": {
                "setup_name": []
            }
        },
        "should_foreign_node_be_started": {
            "name": "should_foreign_node_be_started",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "DefaultPathType.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "default_path_lookups": []
            }
        },
        "DefaultPathType.convert": {
            "name": "convert",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        }
    },
    "blockchain-master/quickstart/src/quickstart/constants.py": {},
    "blockchain-master/quickstart/src/quickstart/docker.py": {
        "setup_interactivaly": {
            "name": "setup_interactivaly",
            "location": 60,
            "return": [],
            "arguments": {
                "base_dir": [],
                "docker_compose_file": [],
                "expose_node_ports": []
            }
        },
        "create_docker_readme": {
            "name": "create_docker_readme",
            "location": 156,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "update_and_start": {
            "name": "update_and_start",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "wait_for_chain_spec": {
            "name": "wait_for_chain_spec",
            "location": 294,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "get_optional_docker_service_names": {
            "name": "get_optional_docker_service_names",
            "location": 299,
            "return": [],
            "arguments": {
                "base_dir": [],
                "start_foreign_node": []
            }
        },
        "does_docker_compose_file_exist": {
            "name": "does_docker_compose_file_exist",
            "location": 313,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "does_docker_compose_override_file_exist": {
            "name": "does_docker_compose_override_file_exist",
            "location": 317,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "copy_default_docker_file": {
            "name": "copy_default_docker_file",
            "location": 321,
            "return": [],
            "arguments": {
                "base_dir": [],
                "docker_compose_file": []
            }
        },
        "copy_default_docker_override_file": {
            "name": "copy_default_docker_override_file",
            "location": 334,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "delete_docker_override_file": {
            "name": "delete_docker_override_file",
            "location": 349,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "show_diff": {
            "name": "show_diff",
            "location": 356,
            "return": [],
            "arguments": {
                "base_dir": [],
                "docker_compose_file": []
            }
        },
        "show_override_diff": {
            "name": "show_override_diff",
            "location": 364,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "get_docker_compose_override_file": {
            "name": "get_docker_compose_override_file",
            "location": 372,
            "return": [],
            "arguments": {}
        }
    },
    "blockchain-master/quickstart/src/quickstart/monitor.py": {
        "setup_interactively": {
            "name": "setup_interactively",
            "location": 10,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        }
    },
    "blockchain-master/quickstart/src/quickstart/netstats.py": {
        "setup_interactively": {
            "name": "setup_interactively",
            "location": 19,
            "return": [],
            "arguments": {
                "base_dir": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "netstats_url": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "check_credentials": {
            "name": "check_credentials",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "netstats_url": [
                    "bytes",
                    "str",
                    "int",
                    "List[str]"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "blockchain-master/quickstart/src/quickstart/utils.py": {
        "ensure_clean_setup": {
            "name": "ensure_clean_setup",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "chain_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "non_empty_file_exists": {
            "name": "non_empty_file_exists",
            "location": 56,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "is_validator_account_prepared": {
            "name": "is_validator_account_prepared",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "is_author_address_prepared": {
            "name": "is_author_address_prepared",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        },
        "is_netstats_prepared": {
            "name": "is_netstats_prepared",
            "location": 72,
            "return": [
                "bool",
                "Union[List, str]"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        },
        "is_bridge_prepared": {
            "name": "is_bridge_prepared",
            "location": 76,
            "return": [
                "bool",
                "Union[List, str]"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        },
        "is_monitor_prepared": {
            "name": "is_monitor_prepared",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "is_wrong_password_error": {
            "name": "is_wrong_password_error",
            "location": 106,
            "return": [
                "type",
                "Callable",
                "bool"
            ],
            "arguments": {
                "err": [
                    "bool",
                    "Callable",
                    "int",
                    "bytes"
                ]
            }
        },
        "get_keystore_path": {
            "name": "get_keystore_path",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_private_key": {
            "name": "read_private_key",
            "location": 141,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "read_address": {
            "name": "read_address",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "read_encryption_password": {
            "name": "read_encryption_password",
            "location": 170,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {}
        },
        "read_decryption_password": {
            "name": "read_decryption_password",
            "location": 186,
            "return": [
                "str",
                "Dict[str, type]",
                "Optional[str]"
            ],
            "arguments": {
                "keyfile_dict": [
                    "dict",
                    "Dict[str, str]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[str, bool]",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "show_file_diff": {
            "name": "show_file_diff",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "user_file": [
                    "str"
                ],
                "default_file": [
                    "str",
                    "List[pathlib.Path]"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "file_hash": {
            "name": "file_hash",
            "location": 239,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "TrustlinesFiles.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "password_path": [
                    "str",
                    "pathlib.Path"
                ],
                "address_path": [
                    "str",
                    "pathlib.Path"
                ],
                "keystore_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TrustlinesFiles.store": {
            "name": "store",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "pathlib.Path"
                ],
                "password": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "blockchain-master/quickstart/src/quickstart/validator_account.py": {
        "setup_interactively": {
            "name": "setup_interactively",
            "location": 33,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "chain_dir": [
                    "str"
                ]
            }
        },
        "make_required_dirs": {
            "name": "make_required_dirs",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Optional[str]"
                ],
                "chain_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "setup_author_address": {
            "name": "setup_author_address",
            "location": 80,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "setup_name": [
                    "str"
                ],
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "prompt_setup_as_validator": {
            "name": "prompt_setup_as_validator",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "import_keystore_file": {
            "name": "import_keystore_file",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "chain_dir": [
                    "str"
                ]
            }
        },
        "import_private_key": {
            "name": "import_private_key",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "chain_dir": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "generate_new_account": {
            "name": "generate_new_account",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "chain_dir": [
                    "str",
                    "Union[str, BinaryIO]"
                ]
            }
        },
        "get_validator_address": {
            "name": "get_validator_address",
            "location": 161,
            "return": [
                "str",
                "Iterable[str]",
                "list"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        },
        "get_author_address": {
            "name": "get_author_address",
            "location": 169,
            "return": [
                "bool",
                "TextIO",
                "List[str]"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        },
        "handle_legacy_validator_key_file": {
            "name": "handle_legacy_validator_key_file",
            "location": 182,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "bool"
                ],
                "chain_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "validator_key_file_exists": {
            "name": "validator_key_file_exists",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "chain_dir": [
                    "str"
                ]
            }
        },
        "validator_key_file_path": {
            "name": "validator_key_file_path",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "bytes"
                ],
                "chain_dir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "legacy_validator_key_paths": {
            "name": "legacy_validator_key_paths",
            "location": 213,
            "return": [
                "str",
                "Tuple[str, str]",
                "Tuple[str]"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "chain_dir": [
                    "str"
                ]
            }
        },
        "rename_legacy_key_file": {
            "name": "rename_legacy_key_file",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Optional[str]"
                ],
                "chain_dir": [
                    "str",
                    "Optional[str]"
                ],
                "legacy_key_file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "blockchain-master/quickstart/src/quickstart/__init__.py": {},
    "blockchain-master/quickstart/tests/test_utils.py": {
        "test_is_wrong_password": {
            "name": "test_is_wrong_password",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_wrong_password.try_wrong_password": {
            "name": "try_wrong_password",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        }
    }
}
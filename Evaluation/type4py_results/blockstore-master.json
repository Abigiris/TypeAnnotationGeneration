{
    "blockstore-master/manage.py": {},
    "blockstore-master/provision-testserver-data.py": {},
    "blockstore-master/blockstore/urls.py": {},
    "blockstore-master/blockstore/wsgi.py": {},
    "blockstore-master/blockstore/__init__.py": {},
    "blockstore-master/blockstore/apps/__init__.py": {},
    "blockstore-master/blockstore/apps/api/constants.py": {},
    "blockstore-master/blockstore/apps/api/permissions.py": {
        "IsSuperUserOrAuthorizedApplication.has_permission": {
            "name": "has_permission",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "view": []
            }
        }
    },
    "blockstore-master/blockstore/apps/api/relations.py": {
        "HyperlinkedRelatedField.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperlinkedRelatedField.get_url": {
            "name": "get_url",
            "location": 21,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[int]"
                ],
                "view_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "dict",
                    "Sequence[str]"
                ],
                "request": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "dict",
                    "Sequence[str]"
                ],
                "format": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "HyperlinkedRelatedField.use_pk_only_optimization": {
            "name": "use_pk_only_optimization",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperlinkedIdentityField.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/api/routers.py": {
        "DefaultRouter.get_lookup_regex": {
            "name": "get_lookup_regex",
            "location": 12,
            "return": [
                "bool",
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "viewset": [
                    "bool",
                    "str"
                ],
                "lookup_prefix": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/api/urls.py": {},
    "blockstore-master/blockstore/apps/api/__init__.py": {},
    "blockstore-master/blockstore/apps/api/v1/urls.py": {},
    "blockstore-master/blockstore/apps/api/v1/__init__.py": {},
    "blockstore-master/blockstore/apps/api/v1/serializers/bundles.py": {
        "BundleSerializer.DraftLinksField.to_representation": {
            "name": "to_representation",
            "location": 35,
            "return": [
                "bool",
                "str",
                "audiopyle.lib.models.plugin.VampyPlugin",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "BundleSerializer.DraftLinksField.to_internal_value": {
            "name": "to_internal_value",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_data": [
                    "Set[str]",
                    "bool",
                    "Iterable[bytes]",
                    "Optional[dict]",
                    "tuple",
                    "dict"
                ]
            }
        },
        "BundleVersionWithFileDataSerializer.SnapshotField._serialized_dep": {
            "name": "_serialized_dep",
            "location": 128,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BundleVersionWithFileDataSerializer.SnapshotField._expand_url": {
            "name": "_expand_url",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "BundleVersionWithFileDataSerializer.SnapshotField.to_representation": {
            "name": "to_representation",
            "location": 141,
            "return": [
                "str",
                "OrderedDict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "BundleVersionWithFileDataSerializer.SnapshotField.to_internal_value": {
            "name": "to_internal_value",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_data": [
                    "Set[str]",
                    "bool",
                    "Iterable[bytes]",
                    "Optional[dict]",
                    "tuple",
                    "dict"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/serializers/collections.py": {},
    "blockstore-master/blockstore/apps/api/v1/serializers/drafts.py": {
        "DraftFileUpdateSerializer.to_internal_value": {
            "name": "to_internal_value",
            "location": 122,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "DraftFileUpdateSerializer._parse_files": {
            "name": "_parse_files",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "str",
                    "List[str]",
                    "BinaryIO"
                ]
            }
        },
        "DraftFileUpdateSerializer._parse_links": {
            "name": "_parse_links",
            "location": 165,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "links": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Iterable[str]"
                ]
            }
        },
        "DraftWithFileDataSerializer.StagedDraftField._expand_url": {
            "name": "_expand_url",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "DraftWithFileDataSerializer.StagedDraftField.to_representation": {
            "name": "to_representation",
            "location": 67,
            "return": [
                "str",
                "int",
                "core.D.VersionedIdentifier"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "DraftWithFileDataSerializer.StagedDraftField._serialized_dep": {
            "name": "_serialized_dep",
            "location": 105,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DraftWithFileDataSerializer.StagedDraftField.to_internal_value": {
            "name": "to_internal_value",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_data": [
                    "Set[str]",
                    "bool",
                    "Iterable[bytes]",
                    "Optional[dict]",
                    "tuple",
                    "dict"
                ]
            }
        },
        "DraftFileUpdateSerializer._parse_files._parse_file_data": {
            "name": "_parse_file_data",
            "location": 144,
            "return": [
                "str",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "b64_encoded_str": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/serializers/__init__.py": {},
    "blockstore-master/blockstore/apps/api/v1/tests/helpers.py": {
        "create_bundle_with_history": {
            "name": "create_bundle_with_history",
            "location": 8,
            "return": [],
            "arguments": {
                "client": [],
                "col_uuid_str": [],
                "bundle_title": [],
                "commit_data": []
            }
        },
        "encode_str_for_draft": {
            "name": "encode_str_for_draft",
            "location": 42,
            "return": [],
            "arguments": {
                "input_str": []
            }
        },
        "response_str_file": {
            "name": "response_str_file",
            "location": 47,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "response_data": {
            "name": "response_data",
            "location": 52,
            "return": [],
            "arguments": {
                "response": []
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/tests/test_authorization.py": {
        "ApiAuthorizationTestCase.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthorizationTestCase.check_endpoints": {
            "name": "check_endpoints",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthorizationTestCase.test_unauthenticated_user_cannot_read": {
            "name": "test_unauthenticated_user_cannot_read",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthorizationTestCase.test_regular_user_cannot_read": {
            "name": "test_regular_user_cannot_read",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthorizationTestCase.test_superuser_can_access": {
            "name": "test_superuser_can_access",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthorizationTestCase.test_service_user_can_access": {
            "name": "test_service_user_can_access",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/tests/test_contract.py": {
        "ApiTestCase.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionsTestCase.test_list_of_one": {
            "name": "test_list_of_one",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionsTestCase.test_list_multiple": {
            "name": "test_list_multiple",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionsTestCase.test_create": {
            "name": "test_create",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionsTestCase.test_update": {
            "name": "test_update",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BundlesMetadataTestCase.setUp": {
            "name": "setUp",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BundlesMetadataTestCase.test_create": {
            "name": "test_create",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BundlesMetadataTestCase.test_create_no_description": {
            "name": "test_create_no_description",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BundlesMetadataTestCase.test_list": {
            "name": "test_list",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftsTest.setUp": {
            "name": "setUp",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftsTest.test_basic_draft_commit": {
            "name": "test_basic_draft_commit",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftsTest.test_editing_errors": {
            "name": "test_editing_errors",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftsTest.test_editing_draft": {
            "name": "test_editing_draft",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftsTest.test_deleting_draft": {
            "name": "test_deleting_draft",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinksTest.setUp": {
            "name": "setUp",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinksTest.test_simple_links": {
            "name": "test_simple_links",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinksTest.test_link_cycle": {
            "name": "test_link_cycle",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/tests/__init__.py": {},
    "blockstore-master/blockstore/apps/api/v1/views/bundles.py": {
        "BundleVersionViewSet.get_object": {
            "name": "get_object",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleVersionViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 58,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/views/collections.py": {},
    "blockstore-master/blockstore/apps/api/v1/views/drafts.py": {
        "DraftViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 83,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DraftViewSet.partial_update": {
            "name": "partial_update",
            "location": 96,
            "return": [
                "bool",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": [
                    "str",
                    "projects.models.projects.Project",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DraftViewSet.commit": {
            "name": "commit",
            "location": 138,
            "return": [
                "List[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": [
                    "Dict[str, Any]"
                ]
            }
        },
        "DraftViewSet.destroy": {
            "name": "destroy",
            "location": 182,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": [
                    "Exception"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/api/v1/views/__init__.py": {},
    "blockstore-master/blockstore/apps/bundles/admin.py": {
        "BundleVersionInline.snapshot_data": {
            "name": "snapshot_data",
            "location": 27,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Generator",
                    "bool"
                ]
            }
        },
        "BundleVersionInline.raw_summary": {
            "name": "raw_summary",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "BundleVersionInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "DraftInline.get_max_num": {
            "name": "get_max_num",
            "location": 70,
            "return": [
                "list",
                "Callable",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest"
                ],
                "obj": [
                    "str",
                    "Optional[django.http.HttpRequest]",
                    "Optional[int]",
                    "int",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "List[int]"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/apps.py": {},
    "blockstore-master/blockstore/apps/bundles/links.py": {
        "bytes_from_hex_str": {
            "name": "bytes_from_hex_str",
            "location": 242,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "hex_str": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "Dependency.check_type": {
            "name": "check_type",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attrib": [
                    "int",
                    "str",
                    "Union[Iterable[str], str]",
                    "Optional[List[str]]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Dependency.from_json_dict": {
            "name": "from_json_dict",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Callable",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "str"
                ],
                "json_dict": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "LinkCollection.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "dict",
                    "str"
                ],
                "links": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LinkCollection.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "bool",
                    "float"
                ]
            }
        },
        "LinkCollection.__getitem__": {
            "name": "__getitem__",
            "location": 102,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "LinkCollection.__iter__": {
            "name": "__iter__",
            "location": 105,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkCollection.__bool__": {
            "name": "__bool__",
            "location": 108,
            "return": [
                "str",
                "Iterable[str]",
                "dict",
                "tuple",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkCollection.from_json_dict": {
            "name": "from_json_dict",
            "location": 112,
            "return": [
                "List[str]",
                "Generator",
                "dict",
                "Optional[str]",
                "Iterable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "bundle_uuid": [
                    "bool",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "json_dict": [
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, dict]",
                    "Mapping[str, Mapping[str, Any]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "LinkCollection.get_direct_dep": {
            "name": "get_direct_dep",
            "location": 131,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "LinkCollection._check_for_duplicates": {
            "name": "_check_for_duplicates",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "links": [
                    "List[str]",
                    "str",
                    "int",
                    "Iterator[str]"
                ]
            }
        },
        "LinkCollection._check_for_cycles": {
            "name": "_check_for_cycles",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "bool",
                    "bytes",
                    "str"
                ],
                "links": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "LinkCollection.all_dependencies": {
            "name": "all_dependencies",
            "location": 163,
            "return": [
                "list",
                "Tuple[List, List]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkCollection.with_updated_link": {
            "name": "with_updated_link",
            "location": 169,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "List[List[str]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "LinkCollection.with_updated_links": {
            "name": "with_updated_links",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "links": [
                    "str",
                    "List[str]",
                    "Iterable[Any]",
                    "Set[str]"
                ],
                "deletes": [
                    "str",
                    "Set[Tuple[int, Any, Any]]",
                    "list"
                ]
            }
        },
        "LinkChangeSet.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "puts": [
                    "List[str]",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "deletes": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "LinkChangeSet.__eq__": {
            "name": "__eq__",
            "location": 210,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "LinkChangeSet.apply_to": {
            "name": "apply_to",
            "location": 213,
            "return": [
                "bool",
                "tuple",
                "List[Dict]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "links": [
                    "int",
                    "bytes",
                    "List[List[str]]",
                    "List[str]",
                    "Hashable",
                    "str"
                ]
            }
        },
        "LinkChangeSet.from_json_dict": {
            "name": "from_json_dict",
            "location": 218,
            "return": [
                "str",
                "Union[str, Dict]",
                "Callable[[str], T]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Dict[str, str]"
                ],
                "json_dict": [
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "LinkCollection.from_json_dict._parse_dep": {
            "name": "_parse_dep",
            "location": 114,
            "return": [
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dep_info": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/models.py": {
        "Collection.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bundle.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bundle.get_bundle_version": {
            "name": "get_bundle_version",
            "location": 104,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "zerver.models.Realm",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "version_num": [
                    "str"
                ]
            }
        },
        "Bundle.new_version_from_snapshot": {
            "name": "new_version_from_snapshot",
            "location": 110,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "str",
                    "bool"
                ]
            }
        },
        "BundleVersion.snapshot_digest_bytes": {
            "name": "snapshot_digest_bytes",
            "location": 141,
            "return": [
                "salon.models.Stylist",
                "str",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleVersion.create_new_version": {
            "name": "create_new_version",
            "location": 145,
            "return": [
                "bool",
                "Tuple[float, float]",
                "int",
                "str",
                "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable[[Any], T]",
                    "bool",
                    "str",
                    "List[int]",
                    "Type[django.db.models.base.Model]"
                ],
                "bundle_uuid": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[str, Optional[str]]",
                    "Sequence"
                ],
                "snapshot_digest": [
                    "bool",
                    "Optional[int]",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "BundleVersion.snapshot": {
            "name": "snapshot",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleVersion.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleVersion.get_bundle_version": {
            "name": "get_bundle_version",
            "location": 170,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Callable]",
                    "bool"
                ],
                "bundle_uuid": [
                    "int",
                    "bool",
                    "Optional[bool]"
                ],
                "version_num": [
                    "bool",
                    "str"
                ]
            }
        },
        "Draft.save": {
            "name": "save",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Draft.staged_draft": {
            "name": "staged_draft",
            "location": 212,
            "return": [
                "str",
                "models.Profile",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Draft.bundle_uuid": {
            "name": "bundle_uuid",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Draft.__str__": {
            "name": "__str__",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/store.py": {
        "files_from_disk": {
            "name": "files_from_disk",
            "location": 748,
            "return": [
                ""
            ],
            "arguments": {
                "bundle_data_path": [
                    "pathlib.Path",
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "is_safe_file_path": {
            "name": "is_safe_file_path",
            "location": 768,
            "return": [
                "bool",
                "str",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[List, str]",
                    "Optional[str]"
                ]
            }
        },
        "create_hash": {
            "name": "create_hash",
            "location": 789,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "start_data": [
                    "str",
                    "int",
                    "dict",
                    "Union[int, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_utc_iso8601_datetime": {
            "name": "parse_utc_iso8601_datetime",
            "location": 794,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "datetime_str": [
                    "str",
                    "datetime.timezone",
                    "datetime.datetime"
                ]
            }
        },
        "bytes_from_hex_str": {
            "name": "bytes_from_hex_str",
            "location": 811,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "hex_str": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "FileInfo.generate_hash": {
            "name": "generate_hash",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "django_file": [
                    "str",
                    "IO",
                    "TextIO",
                    "AsyncGenerator",
                    "Coroutine",
                    "bool"
                ]
            }
        },
        "FileInfo.from_json_dict": {
            "name": "from_json_dict",
            "location": 55,
            "return": [
                "List[str]",
                "str",
                "Callable[[Any, Any], Any]",
                "lib.Path",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Union[Any, Any]]"
                ],
                "json_dict": [
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Snapshot.create": {
            "name": "create",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "List[str]",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "MutableMapping",
                    "str"
                ],
                "bundle_uuid": [],
                "files": [
                    "Mapping[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "MutableMapping",
                    "str"
                ],
                "links": [
                    "static_frame.core.store.StoreConfigMapInitializer",
                    "Optional[str]",
                    "baseplate.lib.experiments.targeting.base.Targeting",
                    "MutableMapping",
                    "cmk.base.config.HostConfig"
                ],
                "created_at": [
                    "datetime.datetime",
                    "str",
                    "django.tesTestCase"
                ]
            }
        },
        "StagedDraft.files": {
            "name": "files",
            "location": 149,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "StagedDraft.composed_files": {
            "name": "composed_files",
            "location": 153,
            "return": [
                "str",
                "pathlib.Path",
                "bool",
                "path.Path"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "StagedDraft.composed_links": {
            "name": "composed_links",
            "location": 176,
            "return": [
                "str",
                "int",
                "core.Year.Month",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StagedDraft.is_deleted": {
            "name": "is_deleted",
            "location": 187,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "SnapshotRepo.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str",
                    "int",
                    "BinaryIO",
                    "Exception"
                ]
            }
        },
        "SnapshotRepo.get": {
            "name": "get",
            "location": 251,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "str",
                    "uuid.UUID",
                    "bytes",
                    "BinaryIO",
                    "pathlib.Path"
                ],
                "snapshot_digest": [
                    "str",
                    "uuid.UUID",
                    "bytes",
                    "BinaryIO",
                    "pathlib.Path"
                ]
            }
        },
        "SnapshotRepo.create": {
            "name": "create",
            "location": 283,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "IO[str]",
                "core.D.VersionedIdentifier"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Dict[str, cerulean.Path]"
                ],
                "paths_to_files": [
                    "Dict[str, str]",
                    "dict",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "links": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str, None]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "SnapshotRepo.url": {
            "name": "url",
            "location": 296,
            "return": [
                "str",
                "Tuple[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PurePath"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "SnapshotRepo.open": {
            "name": "open",
            "location": 302,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "pathlib.Path",
                    "str"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "SnapshotRepo._summary_path": {
            "name": "_summary_path",
            "location": 308,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[..., Awaitable]",
                    "str",
                    "Callable",
                    "pathlib.Path",
                    "List[str]"
                ],
                "bundle_uuid": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "Mapping[str, Any]"
                ],
                "snapshot_digest": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "SnapshotRepo._file_data_path": {
            "name": "_file_data_path",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list",
                    "Iterable[Any]",
                    "List[dict]"
                ],
                "bundle_uuid": [
                    "str",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[path.Path]"
                ],
                "file_hash": [
                    "str",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[path.Path]"
                ]
            }
        },
        "SnapshotRepo._save_file": {
            "name": "_save_file",
            "location": 315,
            "return": [
                "pathlib.Path",
                "str",
                "azure.datalake.store.core.AzureDLFileSystem",
                "Tuple[str, str, str, str]"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "pathlib.Path",
                    "str",
                    "google.cloud.storage.Client",
                    "Optional[str]"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "data": [
                    "pathlib.Path",
                    "IO[Any]",
                    "dbcontracts.files.FilePath",
                    "str"
                ],
                "public": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "SnapshotRepo._create": {
            "name": "_create",
            "location": 327,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "pathlib.Path",
                    "pathlib.PurePosixPath",
                    "str"
                ],
                "files": [
                    "pathlib.Path",
                    "pathlib.PurePosixPath"
                ],
                "links": [
                    "pathlib.Path",
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "DraftRepo.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "snapshot_repo": [
                    "str",
                    "bool"
                ],
                "storage": [
                    "str",
                    "pathlib.Path",
                    "Exception",
                    "BinaryIO"
                ]
            }
        },
        "DraftRepo._data_file_path": {
            "name": "_data_file_path",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "django.http.requesHttpRequest",
                    "int",
                    "bool",
                    "Union[str, pathlib.Path]",
                    "Iterable[Optional[Any]]"
                ],
                "draft_uuid": [
                    "str",
                    "pathlib.Path"
                ],
                "file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "DraftRepo._summary_path": {
            "name": "_summary_path",
            "location": 378,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[..., Awaitable]",
                    "str",
                    "Callable",
                    "pathlib.Path",
                    "List[str]"
                ],
                "draft_uuid": [
                    "str",
                    "int"
                ]
            }
        },
        "DraftRepo._overwrite": {
            "name": "_overwrite",
            "location": 381,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "file_obj": [
                    "pathlib.Path"
                ]
            }
        },
        "DraftRepo._save_summary_file": {
            "name": "_save_summary_file",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "draft": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DraftRepo.serialized_draft_summary": {
            "name": "serialized_draft_summary",
            "location": 399,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]"
                ],
                "draft": [
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DraftRepo.get": {
            "name": "get",
            "location": 402,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "draft_uuid": [
                    "str",
                    "uuid.UUID",
                    "pathlib.Path"
                ]
            }
        },
        "DraftRepo.create": {
            "name": "create",
            "location": 439,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "draft_uuid": [
                    "str",
                    "bool",
                    "dict"
                ],
                "bundle_uuid": [
                    "str",
                    "bool",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "base_snapshot": [
                    "str",
                    "bool",
                    "dict"
                ],
                "created_at": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "int",
                    "bool"
                ]
            }
        },
        "DraftRepo.open": {
            "name": "open",
            "location": 456,
            "return": [
                "str",
                "Dict[str, str]",
                "Union[str, pathlib.Path, None]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "draft": [
                    "str",
                    "pathlib.Path"
                ],
                "file_path": [
                    "str",
                    "pathlib.Path"
                ],
                "mode": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DraftRepo.delete": {
            "name": "delete",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "draft_uuid": [
                    "str",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "DraftRepo.commit": {
            "name": "commit",
            "location": 488,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Dict[str, Any]",
                "base.ConfigOptions"
            ],
            "arguments": {
                "self": [],
                "draft": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]",
                    "path.Path"
                ],
                "paths": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "committed_at": [
                    "str",
                    "dict",
                    "Optional[datetime.datetime]",
                    "Optional[str]",
                    "Union[str, datetime.datetime, None]",
                    "int"
                ]
            }
        },
        "DraftRepo.file_mapping": {
            "name": "file_mapping",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "draft": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path"
                ],
                "paths": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "DraftRepo.update": {
            "name": "update",
            "location": 564,
            "return": [
                "int",
                "set",
                "Sequence[str]",
                "shapely.geometry.base.BaseGeometry",
                "str"
            ],
            "arguments": {
                "self": [],
                "draft_uuid": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "static_frame.core.store.StoreConfigMapInitializer"
                ],
                "files": [
                    "FrozenSet[str]",
                    "IO[str]",
                    "Optional[int]",
                    "pathlib.Path",
                    "Iterator[Tuple[str, str]]"
                ],
                "dependencies": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ],
                "updated_at": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "path.Path"
                ]
            }
        },
        "DraftRepo._merge_links_for_update": {
            "name": "_merge_links_for_update",
            "location": 595,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "existing_draft": [
                    "Dict[str, Any]",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "dependencies": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "DraftRepo._get_indirects": {
            "name": "_get_indirects",
            "location": 627,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DraftRepo._new_files_for_update": {
            "name": "_new_files_for_update",
            "location": 636,
            "return": [
                "list",
                "List[str]",
                "bool",
                "List[Tuple[str, str, str]]",
                "Generator[pathlib.Path, None, None]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "existing_draft": [
                    "pathlib.Path",
                    "abilian.core.models.subjects.User",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[pathlib.Path]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "files": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[int, Dict[int, Any]]",
                    "Union[Dict, List]"
                ]
            }
        },
        "DraftRepo.url": {
            "name": "url",
            "location": 664,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Union[str, pathlib.Path, None]"
            ],
            "arguments": {
                "self": [],
                "draft": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "Optional[str]",
                    "Dict[str, pathlib.Path]"
                ],
                "path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "Optional[str]",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "BundleDataJSONEncoder.default": {
            "name": "default",
            "location": 678,
            "return": [
                "List[int]",
                "int",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "Optional[BaseException]",
                    "Union[str, float]"
                ]
            }
        },
        "DraftRepo.file_mapping.file_for_path": {
            "name": "file_for_path",
            "location": 550,
            "return": [
                "str",
                "Tuple[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "dbparser.base.BaseParser",
                    "waterbutler.core.streams.BaseStream"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/__init__.py": {},
    "blockstore-master/blockstore/apps/bundles/management/__init__.py": {},
    "blockstore-master/blockstore/apps/bundles/management/commands/createbundle.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/management/commands/createbundleversion.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/management/commands/createcollection.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/management/commands/__init__.py": {},
    "blockstore-master/blockstore/apps/bundles/migrations/0001_initial.py": {},
    "blockstore-master/blockstore/apps/bundles/migrations/0002_create_drafts.py": {},
    "blockstore-master/blockstore/apps/bundles/migrations/__init__.py": {},
    "blockstore-master/blockstore/apps/bundles/tests/factories.py": {},
    "blockstore-master/blockstore/apps/bundles/tests/storage_utils.py": {
        "create_timestamped_path": {
            "name": "create_timestamped_path",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "pathlib.Path",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "isolate_class_storage": {
            "name": "isolate_class_storage",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "isolate_test_storage": {
            "name": "isolate_test_storage",
            "location": 58,
            "return": [
                "str",
                "django.db.models.Model",
                "int",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "serve_media": {
            "name": "serve_media",
            "location": 88,
            "return": [
                "str",
                "Callable",
                "List[str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "IO",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "IO",
                    "pathlib.Path"
                ]
            }
        },
        "url_for_test_media": {
            "name": "url_for_test_media",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "isolate_test_storage.setUp": {
            "name": "setUp",
            "location": 74,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": [
                    "str"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/tests/test_models.py": {
        "TestBundleVersionCreation.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundleVersionCreation.test_create_and_rollback": {
            "name": "test_create_and_rollback",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToString.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToString.test_collection_str": {
            "name": "test_collection_str",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToString.test_bundle_str": {
            "name": "test_bundle_str",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToString.test_version_str": {
            "name": "test_version_str",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDraftCreation.test_save_creates_staged_draft": {
            "name": "test_save_creates_staged_draft",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/tests/test_store.py": {
        "TestFileInfo.test_serialization": {
            "name": "test_serialization",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSnapshots.test_basic_creation": {
            "name": "test_basic_creation",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "snapshot_created_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestSnapshots.test_multiple_snapshots": {
            "name": "test_multiple_snapshots",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "snapshot_created_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestSnapshots.test_snapshot_not_found": {
            "name": "test_snapshot_not_found",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.setUp": {
            "name": "setUp",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.test_draft_with_no_base_snapshot": {
            "name": "test_draft_with_no_base_snapshot",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.test_empty_draft": {
            "name": "test_empty_draft",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.test_basic_commit": {
            "name": "test_basic_commit",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.test_partial_commit": {
            "name": "test_partial_commit",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.test_delete_file": {
            "name": "test_delete_file",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrafts.test_delete_draft": {
            "name": "test_delete_draft",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransitiveLinks._create_dep": {
            "name": "_create_dep",
            "location": 288,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "bundle_uuid": [
                    "bytes",
                    "str",
                    "dict",
                    "Tuple[int]"
                ],
                "version": [
                    "bytes",
                    "str",
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "TestTransitiveLinks.setUp": {
            "name": "setUp",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransitiveLinks.test_transitive_dependencies": {
            "name": "test_transitive_dependencies",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransitiveLinks.test_link_version_bump": {
            "name": "test_link_version_bump",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransitiveLinks.test_cycle_detection": {
            "name": "test_cycle_detection",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/bundles/tests/__init__.py": {},
    "blockstore-master/blockstore/apps/core/admin.py": {},
    "blockstore-master/blockstore/apps/core/constants.py": {},
    "blockstore-master/blockstore/apps/core/context_processors.py": {
        "core": {
            "name": "core",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "_request": [
                    "bool"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/core/models.py": {
        "User.access_token": {
            "name": "access_token",
            "location": 14,
            "return": [
                "Mapping[str, Any]",
                "Optional[Exception]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_full_name": {
            "name": "get_full_name",
            "location": 27,
            "return": [
                "dict",
                "users.models.CustomUser",
                "Optional[Any]",
                "List[str]",
                "Tuple[int, List[str]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/core/views.py": {
        "health": {
            "name": "health",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AutoAuth.get": {
            "name": "get",
            "location": 66,
            "return": [
                "str",
                "list",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "blockstore-master/blockstore/apps/core/__init__.py": {},
    "blockstore-master/blockstore/apps/core/migrations/0001_initial.py": {},
    "blockstore-master/blockstore/apps/core/migrations/__init__.py": {},
    "blockstore-master/blockstore/apps/core/tests/test_context_processors.py": {
        "CoreContextProcessorTests.test_core": {
            "name": "test_core",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/core/tests/test_models.py": {
        "UserTests.test_access_token": {
            "name": "test_access_token",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTests.test_get_full_name": {
            "name": "test_get_full_name",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTests.test_string": {
            "name": "test_string",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/core/tests/test_views.py": {
        "HealthTests.test_all_services_available": {
            "name": "test_all_services_available",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthTests.test_database_outage": {
            "name": "test_database_outage",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthTests._assert_health": {
            "name": "_assert_health",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "overall_status": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "database_status": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "AutoAuthTests.test_setting_disabled": {
            "name": "test_setting_disabled",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoAuthTests.test_setting_enabled": {
            "name": "test_setting_enabled",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/blockstore/apps/core/tests/__init__.py": {},
    "blockstore-master/blockstore/apps/mysql_unicode/__init__.py": {},
    "blockstore-master/blockstore/apps/mysql_unicode/migrations/0001_initial.py": {},
    "blockstore-master/blockstore/apps/mysql_unicode/migrations/__init__.py": {},
    "blockstore-master/blockstore/settings/base.py": {
        "here": {
            "name": "here",
            "location": 11,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "root": {
            "name": "root",
            "location": 18,
            "return": [
                "Dict[str, Sequence[Any]]"
            ],
            "arguments": {}
        }
    },
    "blockstore-master/blockstore/settings/local.py": {},
    "blockstore-master/blockstore/settings/production.py": {},
    "blockstore-master/blockstore/settings/test.py": {},
    "blockstore-master/blockstore/settings/utils.py": {
        "get_env_setting": {
            "name": "get_env_setting",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "setting": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "blockstore-master/blockstore/settings/__init__.py": {},
    "blockstore-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        }
    },
    "blockstore-master/docs/__init__.py": {},
    "blockstore-master/tagstore/constants.py": {},
    "blockstore-master/tagstore/tagstore.py": {
        "Tagstore.create_taxonomy": {
            "name": "create_taxonomy",
            "location": 20,
            "return": [
                "models.Taxonomy"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "owner_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Tagstore.get_taxonomy": {
            "name": "get_taxonomy",
            "location": 24,
            "return": [
                "typing.Optional[models.Taxonomy]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "models.Taxonomy.Id",
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Tagstore.add_tag_to_taxonomy": {
            "name": "add_tag_to_taxonomy",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[object]"
                ],
                "taxonomy_uid": [
                    "str",
                    "List[str]"
                ],
                "parent_tag": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "Tagstore._add_tag_to_taxonomy": {
            "name": "_add_tag_to_taxonomy",
            "location": 59,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "str",
                    "Optional[str]",
                    "models.Taxonomy.Id",
                    "dict",
                    "Optional[bool]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "models.Taxonomy.Id",
                    "dict",
                    "Optional[bool]",
                    "bool"
                ],
                "parent_tag": [
                    "str",
                    "Optional[str]",
                    "models.Taxonomy.Id",
                    "dict",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Tagstore.get_tag_in_taxonomy": {
            "name": "get_tag_in_taxonomy",
            "location": 68,
            "return": [
                "typing.Optional[models.Tag]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "models.Taxonomy.Id",
                    "bool",
                    "int"
                ],
                "taxonomy_uid": [
                    "str",
                    "models.Taxonomy.Id",
                    "bool",
                    "int"
                ]
            }
        },
        "Tagstore.list_tags_in_taxonomy": {
            "name": "list_tags_in_taxonomy",
            "location": 76,
            "return": [
                "typing.Iterator[models.Tag]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "models.Taxonomy.Id",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Tagstore.list_tags_in_taxonomy_hierarchically": {
            "name": "list_tags_in_taxonomy_hierarchically",
            "location": 83,
            "return": [
                "typing.Iterator[typing.Tuple[models.Tag, models.Tag]]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "models.Taxonomy.Id",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Tagstore.list_tags_in_taxonomy_containing": {
            "name": "list_tags_in_taxonomy_containing",
            "location": 93,
            "return": [
                "typing.Iterator[models.Tag]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "str",
                    "models.Taxonomy.Id",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "models.Taxonomy.Id",
                    "Optional[str]"
                ]
            }
        },
        "Tagstore.add_tag_to": {
            "name": "add_tag_to",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "models.EntityId",
                    "models.Tag",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "Tagstore.remove_tag_from": {
            "name": "remove_tag_from",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "models.EntityId",
                    "models.Tag",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "Tagstore.get_tags_applied_to": {
            "name": "get_tags_applied_to",
            "location": 120,
            "return": [
                "typing.Set[models.Tag]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tagstore.get_entities_tagged_with": {
            "name": "get_entities_tagged_with",
            "location": 126,
            "return": [
                "typing.Iterator[models.EntityId]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Tagstore.get_entities_tagged_with_all": {
            "name": "get_entities_tagged_with_all",
            "location": 137,
            "return": [
                "typing.Iterator[models.EntityId]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "entity_types": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "external_id_prefix": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "entity_ids": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "include_child_tags": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "blockstore-master/tagstore/__init__.py": {},
    "blockstore-master/tagstore/backends/django.py": {
        "DjangoTagstore.create_taxonomy": {
            "name": "create_taxonomy",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "owner_id": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Collection[str]]",
                    "Optional[int]"
                ]
            }
        },
        "DjangoTagstore.get_taxonomy": {
            "name": "get_taxonomy",
            "location": 29,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Dict]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "DjangoTagstore._add_tag_to_taxonomy": {
            "name": "_add_tag_to_taxonomy",
            "location": 36,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "str",
                    "models.Taxonomy.Id"
                ],
                "name": [
                    "str",
                    "models.Taxonomy.Id"
                ],
                "parent_tag": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "DjangoTagstore.get_tag_in_taxonomy": {
            "name": "get_tag_in_taxonomy",
            "location": 56,
            "return": [
                "str",
                "type",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[int]",
                    "models.Taxonomy.Id",
                    "Optional[str]"
                ],
                "taxonomy_uid": [
                    "str",
                    "Optional[int]",
                    "models.Taxonomy.Id",
                    "Optional[str]"
                ]
            }
        },
        "DjangoTagstore.list_tags_in_taxonomy": {
            "name": "list_tags_in_taxonomy",
            "location": 68,
            "return": [
                "typing.Iterator[models.Tag]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "models.Taxonomy.Id",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DjangoTagstore.list_tags_in_taxonomy_hierarchically": {
            "name": "list_tags_in_taxonomy_hierarchically",
            "location": 72,
            "return": [
                "typing.Iterator[typing.Tuple[models.Tag, models.Tag]]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "models.Taxonomy.Id",
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "DjangoTagstore.get_tags_in_taxonomy_hierarchically_as_dict": {
            "name": "get_tags_in_taxonomy_hierarchically_as_dict",
            "location": 82,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "str",
                    "int"
                ]
            }
        },
        "DjangoTagstore.list_tags_in_taxonomy_containing": {
            "name": "list_tags_in_taxonomy_containing",
            "location": 102,
            "return": [
                "typing.Iterator[models.Tag]"
            ],
            "arguments": {
                "self": [],
                "taxonomy_uid": [
                    "models.Taxonomy.Id",
                    "str"
                ],
                "text": [
                    "str",
                    "models.Taxonomy.Id"
                ]
            }
        },
        "DjangoTagstore.add_tag_to": {
            "name": "add_tag_to",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bytes",
                    "models.Tag"
                ]
            }
        },
        "DjangoTagstore.remove_tag_from": {
            "name": "remove_tag_from",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "models.Tag",
                    "int",
                    "List[int]"
                ]
            }
        },
        "DjangoTagstore.get_tags_applied_to": {
            "name": "get_tags_applied_to",
            "location": 136,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoTagstore.get_entities_tagged_with_all": {
            "name": "get_entities_tagged_with_all",
            "location": 151,
            "return": [
                "typing.Iterator[models.EntityId]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "entity_types": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "str",
                    "Optional[cmk.utils.type_defs.UserId]"
                ],
                "external_id_prefix": [
                    "Optional[str]",
                    "Optional[List[int]]",
                    "Optional[List[str]]"
                ],
                "entity_ids": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Type[Dict[str, str]]",
                    "Set[int]",
                    "str"
                ],
                "include_child_tags": [
                    "Set[models.Tag]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "blockstore-master/tagstore/backends/__init__.py": {},
    "blockstore-master/tagstore/backends/tagstore_django/admin.py": {
        "CustomTagAdminForm.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TagAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ]
            }
        },
        "TagAdmin.save_model": {
            "name": "save_model",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ],
                "obj": [
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ],
                "form": [
                    "Dict[str, str]",
                    "str",
                    "Mapping"
                ],
                "change": [
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        }
    },
    "blockstore-master/tagstore/backends/tagstore_django/models.py": {
        "Entity.as_tuple": {
            "name": "as_tuple",
            "location": 37,
            "return": [
                "bool",
                "db.models.Name",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxonomy.as_tuple": {
            "name": "as_tuple",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "tagstore": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Taxonomy.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.make_path": {
            "name": "make_path",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[Optional[str]]",
                    "int",
                    "Optional[Exception]"
                ],
                "taxonomy_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "parent_path": [
                    "str",
                    "int"
                ]
            }
        },
        "Tag.parent_tag_tuple": {
            "name": "parent_tag_tuple",
            "location": 107,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/tagstore/backends/tagstore_django/__init__.py": {},
    "blockstore-master/tagstore/backends/tagstore_django/migrations/0001_initial.py": {},
    "blockstore-master/tagstore/backends/tagstore_django/migrations/__init__.py": {},
    "blockstore-master/tagstore/backends/tagstore_django/templatetags/tagstore_admin.py": {
        "tag_hierarchy": {
            "name": "tag_hierarchy",
            "location": 10,
            "return": [
                "str",
                "Callable",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "taxonomy_uid": [
                    "str",
                    "bool",
                    "Hashable"
                ]
            }
        }
    },
    "blockstore-master/tagstore/backends/tagstore_django/templatetags/__init__.py": {},
    "blockstore-master/tagstore/backends/tests/test_backends.py": {
        "AbstractBackendTest.get_tagstore": {
            "name": "get_tagstore",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_create_taxonomy": {
            "name": "test_create_taxonomy",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_get_taxonomy": {
            "name": "test_get_taxonomy",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_get_taxonomy_nonexistent": {
            "name": "test_get_taxonomy_nonexistent",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy": {
            "name": "test_add_tag_to_taxonomy",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_case_sensitive_tags": {
            "name": "test_case_sensitive_tags",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_allowed_tag_names": {
            "name": "test_allowed_tag_names",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_forbidden_tag_names": {
            "name": "test_forbidden_tag_names",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy_idempotent": {
            "name": "test_add_tag_to_taxonomy_idempotent",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy_idempotent_parent": {
            "name": "test_add_tag_to_taxonomy_idempotent_parent",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy_exists_elsewhere": {
            "name": "test_add_tag_to_taxonomy_exists_elsewhere",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy_circular": {
            "name": "test_add_tag_to_taxonomy_circular",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy_bad_parent": {
            "name": "test_add_tag_to_taxonomy_bad_parent",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to_taxonomy_nonexistent_parent": {
            "name": "test_add_tag_to_taxonomy_nonexistent_parent",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_get_tag_in_taxonomy": {
            "name": "test_get_tag_in_taxonomy",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest._create_taxonomy_with_tags": {
            "name": "_create_taxonomy_with_tags",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "tags": []
            }
        },
        "AbstractBackendTest.test_list_tags_in_taxonomy": {
            "name": "test_list_tags_in_taxonomy",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_list_tags_in_taxonomy_hierarchically": {
            "name": "test_list_tags_in_taxonomy_hierarchically",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_get_tags_in_taxonomy_hierarchically_as_dict": {
            "name": "test_get_tags_in_taxonomy_hierarchically_as_dict",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_list_tags_in_taxonomy_containing": {
            "name": "test_list_tags_in_taxonomy_containing",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_add_tag_to": {
            "name": "test_add_tag_to",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_remove_tag_from": {
            "name": "test_remove_tag_from",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_entity_ids": {
            "name": "test_entity_ids",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_get_entities_tagged_with": {
            "name": "test_get_entities_tagged_with",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBackendTest.test_get_entities_tagged_with_all_invalid": {
            "name": "test_get_entities_tagged_with_all_invalid",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DjangoBackendTest.get_tagstore": {
            "name": "get_tagstore",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/tagstore/backends/tests/__init__.py": {},
    "blockstore-master/tagstore/models/entity.py": {},
    "blockstore-master/tagstore/models/tag.py": {},
    "blockstore-master/tagstore/models/taxonomy.py": {
        "Taxonomy.add_tag": {
            "name": "add_tag",
            "location": 31,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ],
                "parent_tag": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "Taxonomy.get_tag": {
            "name": "get_tag",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "Dict[str, List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Taxonomy.list_tags": {
            "name": "list_tags",
            "location": 52,
            "return": [
                "bool",
                "Optional[Union[int, str]]",
                "List[Tuple[Any, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxonomy.list_tags_hierarchically": {
            "name": "list_tags_hierarchically",
            "location": 58,
            "return": [
                "bool",
                "Optional[Union[int, str]]",
                "List[Tuple[Any, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxonomy.list_tags_containing": {
            "name": "list_tags_containing",
            "location": 67,
            "return": [
                "bool",
                "Optional[Union[int, str]]",
                "List[Tuple[Any, str]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "blockstore-master/tagstore/models/user.py": {},
    "blockstore-master/tagstore/models/__init__.py": {},
    "blockstore-master/tagstore/tagstore_rest/routers.py": {
        "EntityRouter.get_lookup_regex": {
            "name": "get_lookup_regex",
            "location": 37,
            "return": [
                "bool",
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "viewset": [
                    "bool",
                    "str"
                ],
                "lookup_prefix": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "blockstore-master/tagstore/tagstore_rest/urls.py": {},
    "blockstore-master/tagstore/tagstore_rest/__init__.py": {},
    "blockstore-master/tagstore/tagstore_rest/v1/urls.py": {},
    "blockstore-master/tagstore/tagstore_rest/v1/__init__.py": {},
    "blockstore-master/tagstore/tagstore_rest/v1/serializers/entities.py": {},
    "blockstore-master/tagstore/tagstore_rest/v1/serializers/__init__.py": {},
    "blockstore-master/tagstore/tagstore_rest/v1/tests/test_serializers.py": {
        "SerializerBaseTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntitySerializerTestCase.test_entity_serializer_data": {
            "name": "test_entity_serializer_data",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTagSerializerTestCase.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTagSerializerTestCase.test_entity_tag_serializer_data": {
            "name": "test_entity_tag_serializer_data",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/tagstore/tagstore_rest/v1/tests/test_views.py": {
        "ViewsBaseTestCase.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsBaseTestCase.response": {
            "name": "response",
            "location": 40,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "str",
                    "Optional[str]"
                ],
                "kwargs": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "dict"
                ],
                "query_params": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[Any, Any], None]]",
                    "bool",
                    "int",
                    "Optional[dict]"
                ],
                "expected_response_code": [
                    "int"
                ],
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "EntityTagViewSetTestCase.test_list": {
            "name": "test_list",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTagViewSetTestCase.test_query_params_for_taxonomy": {
            "name": "test_query_params_for_taxonomy",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTagViewSetTestCase.test_query_params_for_taxonomy_by_name": {
            "name": "test_query_params_for_taxonomy_by_name",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTagViewSetTestCase.test_post": {
            "name": "test_post",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTagViewSetTestCase.test_post_with_complex_tag_json": {
            "name": "test_post_with_complex_tag_json",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blockstore-master/tagstore/tagstore_rest/v1/tests/__init__.py": {},
    "blockstore-master/tagstore/tagstore_rest/v1/views/entities.py": {
        "EntityViewSet.list": {
            "name": "list",
            "location": 33,
            "return": [
                "dict",
                "aiocometd.constants.TransportState",
                "Optional[str]",
                "django.db.models.QuerySet",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        },
        "EntityViewSet.retrieve": {
            "name": "retrieve",
            "location": 40,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "recidiviz.persistence.entity.county.entities.Booking",
                    "bool",
                    "List[str]",
                    "float",
                    "Optional[str]"
                ],
                "pk": [
                    "int",
                    "Dict[str,str]",
                    "grouper.models.group.Group",
                    "str",
                    "tracim.models.data.Workspace",
                    "models.User"
                ],
                "entity_type": [
                    "int",
                    "Dict[str,str]",
                    "grouper.models.group.Group",
                    "str",
                    "tracim.models.data.Workspace",
                    "models.User"
                ]
            }
        },
        "EntityViewSet._convert": {
            "name": "_convert",
            "location": 48,
            "return": [
                "bool",
                "str",
                "Type[T]",
                "type"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bs4.Tag",
                    "Optional[str]",
                    "Type[recidiviz.persistence.entity.base_entity.Entity]"
                ]
            }
        },
        "EntityViewSet.serialize_tags": {
            "name": "serialize_tags",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "cleancoderscom.entities.entity.Entity",
                    "esm.models.service_type.ServiceType",
                    "recidiviz.persistence.entity.base_entity.Entity"
                ],
                "taxonomies": [
                    "recidiviz.persistence.entity.base_entity.Entity",
                    "Optional[str]",
                    "zerver.models.Realm",
                    "dict"
                ]
            }
        },
        "EntityViewSet.tags": {
            "name": "tags",
            "location": 73,
            "return": [
                "Dict[str, Any]",
                "dict",
                "aiocometd.constants.TransportState",
                "flask.Response",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "rest_framework.requesRequest",
                    "int",
                    "Optional[bool]"
                ],
                "entity_type": [
                    "str",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]"
                ],
                "pk": [
                    "str",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]"
                ]
            }
        },
        "EntityViewSet.update_tags": {
            "name": "update_tags",
            "location": 85,
            "return": [
                "core.models.User",
                "zerver.models.UserProfile",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "entity_type": [
                    "str",
                    "type",
                    "apistar.backends.sqlalchemy_backend.Session"
                ],
                "pk": [
                    "str",
                    "type",
                    "apistar.backends.sqlalchemy_backend.Session"
                ]
            }
        }
    },
    "blockstore-master/tagstore/tagstore_rest/v1/views/__init__.py": {}
}
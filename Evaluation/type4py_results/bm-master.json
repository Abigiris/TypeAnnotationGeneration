{
    "bm-master/ebsetenv.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bm-master/locustfile.py": {},
    "bm-master/manage.py": {},
    "bm-master/bm/routing.py": {},
    "bm-master/bm/__init__.py": {},
    "bm-master/bm/contrib/__init__.py": {},
    "bm-master/bm/contrib/sites/__init__.py": {},
    "bm-master/bm/contrib/sites/migrations/0001_initial.py": {},
    "bm-master/bm/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "bm-master/bm/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "bm-master/bm/contrib/sites/migrations/__init__.py": {},
    "bm-master/bm/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "Union[str, int]",
                    "dict",
                    "int",
                    "Union[str, float]"
                ]
            }
        },
        "CeleryConfig.ready": {
            "name": "ready",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/taskapp/__init__.py": {},
    "bm-master/bm/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 9,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AccountAdapter.send_mail": {
            "name": "send_mail",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "template_prefix": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 30,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "bm-master/bm/users/admin.py": {
        "MyUserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/dot_dict.py": {},
    "bm-master/bm/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/serializer.py": {
        "UserSerializer.get_profile_url": {
            "name": "get_profile_url",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bm-master/bm/users/urls.py": {},
    "bm-master/bm/users/utils.py": {
        "to_datetime_format": {
            "name": "to_datetime_format",
            "location": 10,
            "return": [
                "Optional[str]",
                "datetime.date",
                "str",
                "bool",
                "Optional[datetime.date]"
            ],
            "arguments": {
                "date": [
                    "str"
                ],
                "date_format": [
                    "str"
                ]
            }
        },
        "to_datetime_object": {
            "name": "to_datetime_object",
            "location": 30,
            "return": [
                "Optional[str]",
                "datetime.date",
                "str",
                "bool",
                "int",
                "Optional[datetime.date]",
                "datetime.datetime"
            ],
            "arguments": {
                "date": [
                    "str"
                ],
                "date_format": [
                    "str"
                ]
            }
        },
        "days_to_secs": {
            "name": "days_to_secs",
            "location": 55,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "days": [
                    "int",
                    "list",
                    "str",
                    "Tuple[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "import_class": {
            "name": "import_class",
            "location": 59,
            "return": [],
            "arguments": {
                "value": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_cache": {
            "name": "set_cache",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Any",
                    "bool",
                    "float",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "Any",
                    "bool",
                    "float",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "Any",
                    "bool",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "get_cache": {
            "name": "get_cache",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "diff_date_months": {
            "name": "diff_date_months",
            "location": 82,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "date1": [
                    "datetime.datetime",
                    "str",
                    "datetime.date"
                ],
                "date2": [
                    "datetime.datetime",
                    "str",
                    "datetime.date"
                ]
            }
        }
    },
    "bm-master/bm/users/views.py": {
        "redirect_password_rest_done": {
            "name": "redirect_password_rest_done",
            "location": 24,
            "return": [
                "app.models.GameMember",
                "app.models.course.Course",
                "arxiv.users.domain.User",
                "Optional[str]",
                "arxiv.users.domain.Authorizations",
                "Callable[[List, bool], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "list"
                ],
                "uidb64": [
                    "str",
                    "Optional[MutableMapping[Any, Any]]"
                ],
                "token": [
                    "str",
                    "Optional[MutableMapping[Any, Any]]"
                ]
            }
        },
        "handling_mail_confirm": {
            "name": "handling_mail_confirm",
            "location": 43,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "str",
                    "List[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "handling_user": {
            "name": "handling_user",
            "location": 55,
            "return": [
                "Dict[str, Any]",
                "Response",
                "str",
                "Dict[str, str]",
                "flask.wrappers.Response"
            ],
            "arguments": {}
        },
        "display_home_page": {
            "name": "display_home_page",
            "location": 60,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "str"
                ]
            }
        },
        "redirect_after_email_confirm": {
            "name": "redirect_after_email_confirm",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[str]",
                "bool",
                "List[str]",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "request": [
                    "Set[str]"
                ]
            }
        },
        "password_reset_done": {
            "name": "password_reset_done",
            "location": 176,
            "return": [
                "bool",
                "Dict[int, dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 184,
            "return": [
                "int",
                "dict",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "str",
                    "bool"
                ],
                "uidb64": [
                    "str",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest"
                ],
                "token": [
                    "str",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "change_password_done": {
            "name": "change_password_done",
            "location": 192,
            "return": [
                "Iterable['Notification']",
                "flask.Response",
                "Tuple[Dict, int]"
            ],
            "arguments": {
                "requests": [
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "str"
                ]
            }
        },
        "LoginAfterPasswordChangeView.success_url": {
            "name": "success_url",
            "location": 82,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 99,
            "return": [
                "str",
                "Dict[str, object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 110,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_object": {
            "name": "get_object",
            "location": 113,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 125,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[zerver.models.UserProfile]",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 128,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserListView.get_object": {
            "name": "get_object",
            "location": 144,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMPasswordResetView.post": {
            "name": "post",
            "location": 150,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "trezor.messages.TxRequesTxRequest",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "bm-master/bm/users/__init__.py": {},
    "bm-master/bm/users/migrations/0001_initial.py": {},
    "bm-master/bm/users/migrations/__init__.py": {},
    "bm-master/bm/users/tests/factories.py": {},
    "bm-master/bm/users/tests/test_admin.py": {
        "TestMyUserCreationForm.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyUserCreationForm.test_clean_username_success": {
            "name": "test_clean_username_success",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyUserCreationForm.test_clean_username_false": {
            "name": "test_clean_username_false",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/test_models.py": {
        "TestUser.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test__str__": {
            "name": "test__str__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/test_urls.py": {
        "TestUserURLs.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_list_reverse": {
            "name": "test_list_reverse",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_list_resolve": {
            "name": "test_list_resolve",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_redirect_reverse": {
            "name": "test_redirect_reverse",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_redirect_resolve": {
            "name": "test_redirect_resolve",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_detail_reverse": {
            "name": "test_detail_reverse",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_detail_resolve": {
            "name": "test_detail_resolve",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_update_reverse": {
            "name": "test_update_reverse",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_update_resolve": {
            "name": "test_update_resolve",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/test_utils.py": {
        "TestUserURLs.test_import_class": {
            "name": "test_import_class",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "User",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "bm-master/bm/users/tests/test_views.py": {
        "BaseUserTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/bm/users/tests/__init__.py": {},
    "bm-master/config/asgi.py": {},
    "bm-master/config/urls.py": {},
    "bm-master/config/wsgi.py": {},
    "bm-master/config/__init__.py": {},
    "bm-master/config/settings/base.py": {},
    "bm-master/config/settings/local.py": {},
    "bm-master/config/settings/production.py": {},
    "bm-master/config/settings/test.py": {},
    "bm-master/config/settings/__init__.py": {},
    "bm-master/docs/conf.py": {},
    "bm-master/docs/__init__.py": {},
    "bm-master/load_test/user_behaviour.py": {
        "UserBehavior.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "UserBehavior.base_url": {
            "name": "base_url",
            "location": 23,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.packages_url": {
            "name": "packages_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.user_details": {
            "name": "user_details",
            "location": 45,
            "return": [
                "str",
                "bool",
                "int",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.on_start": {
            "name": "on_start",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.login": {
            "name": "login",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.currency_details": {
            "name": "currency_details",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/load_test/__init__.py": {},
    "bm-master/packages/admin.py": {},
    "bm-master/packages/apps.py": {},
    "bm-master/packages/config.py": {
        "PaymentTypeNumber.default_type": {
            "name": "default_type",
            "location": 17,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "PaymentTypeNumber.paytm_type": {
            "name": "paytm_type",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {}
        },
        "PaymentTypeNumber.excel_type": {
            "name": "excel_type",
            "location": 25,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {}
        }
    },
    "bm-master/packages/consumers.py": {
        "BMNotifcationConsumer.validation_jwt": {
            "name": "validation_jwt",
            "location": 71,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "bm-master/packages/models.py": {
        "after_user_signed_up": {
            "name": "after_user_signed_up",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "Optional[str]",
                    "django.http.HttpRequest",
                    "zerver.models.Client"
                ],
                "request": [
                    "bool",
                    "Optional[str]",
                    "django.http.HttpRequest",
                    "zerver.models.Client"
                ],
                "user": [
                    "bool",
                    "models.Channel",
                    "Sequence[str]",
                    "asgard.models.app.AppStats",
                    "List[annofabapi.models.ProjectMember]",
                    "Dict[str, Any]",
                    "str",
                    "list"
                ]
            }
        },
        "validate_country_code_": {
            "name": "validate_country_code_",
            "location": 134,
            "return": [
                "Optional[Callable]",
                "Dict[str, Any]",
                "Dict[str, Callable[[], Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, int, float]",
                    "Optional[str]"
                ]
            }
        },
        "post_save_items_list": {
            "name": "post_save_items_list",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor",
                    "django.db.migrations.state.StateApps"
                ]
            }
        },
        "MonthBudgetAmount.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsList.__str__": {
            "name": "__str__",
            "location": 109,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageSettings.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsGroupLog.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/routing.py": {},
    "bm-master/packages/serializers.py": {
        "ItemsListSerializer.get_total_amount": {
            "name": "get_total_amount",
            "location": 38,
            "return": [
                "int",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "str",
                    "Set[models.Route]",
                    "models.Name",
                    "List[str]",
                    "Optional[AbstractSet[str]]",
                    "int"
                ]
            }
        },
        "ItemsListSerializer.to_representation": {
            "name": "to_representation",
            "location": 64,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "MonthBudgetAmountSerializer.Meta.get_month": {
            "name": "get_month",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "posts.models.Post",
                    "List[str]",
                    "float"
                ]
            }
        },
        "ItemsListSerializer.get_total_amount.flat": {
            "name": "flat",
            "location": 40,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "Set[str]",
                "Optional[dict]",
                "int",
                "List[T]"
            ],
            "arguments": {
                "e": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "bm-master/packages/tasks.py": {},
    "bm-master/packages/urls.py": {},
    "bm-master/packages/utils.py": {
        "flatter_list": {
            "name": "flatter_list",
            "location": 14,
            "return": [
                "list",
                "List[str]",
                "Set[str]",
                "Optional[dict]",
                "int",
                "str"
            ],
            "arguments": {
                "items": [
                    "List[List[Any]]",
                    "List[str]",
                    "List[superseutils.core.DatasourceName]",
                    "snakescale.utils.ProcessReturn",
                    "Tuple[List[Any], List[Any]]",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "to_hexdigit": {
            "name": "to_hexdigit",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "to_hrs": {
            "name": "to_hrs",
            "location": 33,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int",
                "Tuple[str]",
                "bool",
                "cmk.utils.type_defs.HostName",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "mins": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "float",
                    "int",
                    "List[str]"
                ],
                "secs": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "float",
                    "int",
                    "List[str]"
                ],
                "time_format": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "to_percentage": {
            "name": "to_percentage",
            "location": 52,
            "return": [
                "int",
                "datetime.datetime",
                "tuple",
                "bool",
                "str"
            ],
            "arguments": {
                "current_value": [
                    "int",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "bool",
                    "str"
                ],
                "total_value": [
                    "int",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "bool",
                    "str"
                ]
            }
        },
        "validate_bm_standard_date_format": {
            "name": "validate_bm_standard_date_format",
            "location": 57,
            "return": [
                "Tuple[float, float]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "Tuple[cmk.utils.prediction.Timegroup, cmk.utils.prediction.Timestamp]"
                ]
            }
        },
        "validate_less_than_today": {
            "name": "validate_less_than_today",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "datetime.datetime",
                    "str",
                    "datetime.time",
                    "float"
                ]
            }
        },
        "to_query_string_dict": {
            "name": "to_query_string_dict",
            "location": 97,
            "return": [
                "str",
                "waterbutler.core.streams.BaseStream"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "bytes",
                    "bool"
                ]
            }
        },
        "find_dict_value": {
            "name": "find_dict_value",
            "location": 111,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "key_word": [
                    "str",
                    "List[str]",
                    "int",
                    "Union[str, list]",
                    "list"
                ],
                "_items": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "bool",
                    "str",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "start_and_end_month": {
            "name": "start_and_end_month",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "month": [
                    "int",
                    "str",
                    "Union[datetime.datetime, datetime.date]"
                ],
                "operation": [
                    "str",
                    "bool",
                    "Union[str, Pattern[str]]"
                ],
                "date_format": [
                    "str",
                    "float"
                ]
            }
        },
        "start_month_year": {
            "name": "start_month_year",
            "location": 152,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "month": [
                    "str",
                    "int",
                    "float"
                ],
                "operation": [
                    "str",
                    "int",
                    "float"
                ],
                "date_format": [
                    "str",
                    "int",
                    "Optional[cmk.utils.type_defs.ServiceName]"
                ]
            }
        },
        "sending_mail_pdf": {
            "name": "sending_mail_pdf",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "mail_to": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str, float]"
                ],
                "content": [
                    "str",
                    "Optional[django.core.files.File]",
                    "int",
                    "Callable[[], str]",
                    "Optional[int]"
                ],
                "file_pointer": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "bm-master/packages/views.py": {},
    "bm-master/packages/__init__.py": {},
    "bm-master/packages/flat_file_interface/api.py": {
        "FlatFileInterFaceAPI.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Optional[bool]",
                    "Union[int,str]",
                    "Tuple[Optional[str], str]",
                    "str"
                ]
            }
        },
        "FlatFileInterFaceAPI.read_file": {
            "name": "read_file",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_format": [
                    "str",
                    "Union[str, List[Any]]",
                    "Iterable[str]",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "bm-master/packages/flat_file_interface/base_excel_interface.py": {
        "BaseExcelClass.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseExcelClass.read_excel": {
            "name": "read_excel",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "BaseExcelClass.read_csv": {
            "name": "read_csv",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "BaseExcelClass.data": {
            "name": "data",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExcelClass.mapping_fields": {
            "name": "mapping_fields",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "List[str]",
                    "List[dict]"
                ]
            }
        },
        "BaseExcelClass.paytm_process": {
            "name": "paytm_process",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExcelClass.insert_db": {
            "name": "insert_db",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseExcelClass.get_info": {
            "name": "get_info",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExcelClass.api_name": {
            "name": "api_name",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/flat_file_interface/pandas_interface.py": {
        "PandasExcelAPI.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "jgikbase.idmapping.core.object_id.NamespaceID",
                    "jgikbase.idmapping.core.user.User",
                    "excars.models.locations.Location"
                ]
            }
        },
        "PandasExcelAPI.read_excel": {
            "name": "read_excel",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "PandasExcelAPI.read_csv": {
            "name": "read_csv",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "PandasExcelAPI.data": {
            "name": "data",
            "location": 71,
            "return": [
                "str",
                "Dict[str, List[int]]",
                "Optional[float]",
                "dict",
                "Set[cmk.utils.type_defs.HostName]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.mapping_fields": {
            "name": "mapping_fields",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_type": [
                    "str"
                ],
                "options": [
                    "str",
                    "int"
                ]
            }
        },
        "PandasExcelAPI.paytm_process": {
            "name": "paytm_process",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.get_info": {
            "name": "get_info",
            "location": 135,
            "return": [
                "str",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.get_mem_info": {
            "name": "get_mem_info",
            "location": 142,
            "return": [
                "dict",
                "Callable",
                "Dict[str, Any]",
                "OrderedDict",
                "str",
                "django.http.HttpRequest",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.insert_db": {
            "name": "insert_db",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.api_name": {
            "name": "api_name",
            "location": 199,
            "return": [
                "str",
                "bytes",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasExcelAPI.as_msg_client": {
            "name": "as_msg_client",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_value": [
                    "str",
                    "Dict[int, datetime.datetime]",
                    "datetime.datetime",
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "pandas.DataFrame"
                ],
                "total_value": [
                    "str",
                    "Dict[int, datetime.datetime]",
                    "datetime.datetime",
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "pandas.DataFrame"
                ]
            }
        },
        "PandasExcelAPI.close_connection": {
            "name": "close_connection",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/flat_file_interface/__init__.py": {},
    "bm-master/packages/migrations/0001_initial.py": {},
    "bm-master/packages/migrations/__init__.py": {},
    "bm-master/packages/packages_task/task_generate_summary.py": {
        "celery_generate_summary": {
            "name": "celery_generate_summary",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "content": [
                    "str",
                    "grouper.models.base.session.Session",
                    "zerver.models.UserProfile",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "asgard.backends.users.UsersBackend",
                    "asgard.models.user.User",
                    "dict"
                ],
                "cache_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "bm-master/packages/packages_task/task_upload_flat_file.py": {
        "celery_upload_flat_file": {
            "name": "celery_upload_flat_file",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "bool",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]"
                ],
                "request": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "file_name": [
                    "str",
                    "bool"
                ],
                "file_format": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "bool"
                ],
                "use_fields": [
                    "int",
                    "str",
                    "BinaryIO",
                    "Callable[[int, int], None]",
                    "dict"
                ],
                "entry_type": [
                    "str",
                    "Dict[Any, bool]",
                    "Dict[Tuple[str, str], Dict[str, int]]",
                    "int",
                    "Optional[str]"
                ],
                "temp_location": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bm-master/packages/packages_views/viewItemsAll.py": {
        "get_months": {
            "name": "get_months",
            "location": 117,
            "return": [
                "Optional[int]",
                "cmk.utils.type_defs.UserId",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "float",
                    "zerver.models.UserProfile"
                ],
                "start": [
                    "int",
                    "datetime.datetime",
                    "datetime.date",
                    "models.Project"
                ],
                "end": [
                    "int",
                    "Optional[str]",
                    "Type[T]",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "itemlist_get_by_months": {
            "name": "itemlist_get_by_months",
            "location": 160,
            "return": [
                "dict",
                "int",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "request": [
                    "int",
                    "zerver.models.UserProfile",
                    "bytes",
                    "float",
                    "bool"
                ],
                "start": [
                    "int",
                    "datetime.datetime",
                    "models.Project",
                    "datetime.date"
                ],
                "end": [
                    "int",
                    "models.Project",
                    "str"
                ]
            }
        },
        "get_all_group_in_itemslist": {
            "name": "get_all_group_in_itemslist",
            "location": 203,
            "return": [
                "zerver.models.UserProfile",
                "Optional[zerver.models.UserProfile]",
                "int",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "request": [
                    "float",
                    "str",
                    "Dict[str, services.user.transfer.models.User]",
                    "grouper.models.user.User",
                    "bool"
                ],
                "start": [
                    "float",
                    "str",
                    "datetime.datetime",
                    "int"
                ],
                "end": [
                    "float",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "delete_bulk": {
            "name": "delete_bulk",
            "location": 244,
            "return": [
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "ItemsListCreateView.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsListCreateView.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemsListCreateView.save_or_error_response": {
            "name": "save_or_error_response",
            "location": 45,
            "return": [
                "dict",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "core.models.User"
            ],
            "arguments": {
                "self": [],
                "save_object": [
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ItemsListCreateView.create_or_update_entry": {
            "name": "create_or_update_entry",
            "location": 65,
            "return": [
                "Optional[Dict]",
                "str",
                "zam_repondeur.models.Lecture",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "custom_request_data": [
                    "django.http.HttpResponse",
                    "dict",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]"
                ],
                "update": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "ItemsListCreateView.create": {
            "name": "create",
            "location": 78,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "ItemsListCreateView.update": {
            "name": "update",
            "location": 84,
            "return": [
                "str",
                "asgard.models.user.User",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "ItemsListCreateView.partial_update": {
            "name": "partial_update",
            "location": 90,
            "return": [
                "str",
                "cmk.utils.type_defs.EventRule",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "int",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "ItemsListCreateView.destroy": {
            "name": "destroy",
            "location": 96,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Dict[str, Any]]",
                "lunch_buddies.models.poll_responses.PollResponse",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "pk": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "bm-master/packages/packages_views/viewMBA.py": {
        "get_range_mba": {
            "name": "get_range_mba",
            "location": 133,
            "return": [
                "dict",
                "int",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "request": [
                    "core.models.DepositAccount",
                    "zerver.models.UserProfile",
                    "datetime.datetime",
                    "models.Project"
                ],
                "start": [
                    "datetime.datetime",
                    "float",
                    "Type[T]",
                    "Union[str, \"TrackingCode\"]"
                ],
                "end": [
                    "int",
                    "OrderedDict"
                ]
            }
        },
        "MonthBudgetAmountView.get_queryset": {
            "name": "get_queryset",
            "location": 36,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthBudgetAmountView.get_valid_date_or_error_response": {
            "name": "get_valid_date_or_error_response",
            "location": 40,
            "return": [
                "app.models.dto.LoginResponse",
                "bool",
                "src.models.generic_task.TaskState",
                "aiohttp.web.Response",
                "Optional[ocspdash.models.Location]",
                "django.http.HttpResponse",
                "asgard.models.job.ScheduledJob"
            ],
            "arguments": {
                "self": [],
                "month_year": [
                    "str",
                    "Set[str]",
                    "int",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "MonthBudgetAmountView.save_or_error_response": {
            "name": "save_or_error_response",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Response",
                "str"
            ],
            "arguments": {
                "self": [],
                "save_object": [
                    "int",
                    "float",
                    "dict",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MonthBudgetAmountView.return_only_monthYear": {
            "name": "return_only_monthYear",
            "location": 72,
            "return": [
                "Optional[str]",
                "str",
                "datetime.datetime",
                "datetime.datetime.datetime",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "month_year": [
                    "float",
                    "datetime.datetime",
                    "int",
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "MonthBudgetAmountView.create_or_update_entry": {
            "name": "create_or_update_entry",
            "location": 77,
            "return": [
                "Optional[Dict]",
                "str",
                "zam_repondeur.models.Lecture",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "custom_request_data": [
                    "dict"
                ],
                "update": [
                    "int"
                ]
            }
        },
        "MonthBudgetAmountView.retrieve": {
            "name": "retrieve",
            "location": 88,
            "return": [
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "zerver.models.UserProfile",
                    "django.db.models.query.QuerySet",
                    "str",
                    "bool"
                ],
                "month_year": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonthBudgetAmountView.create": {
            "name": "create",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "MonthBudgetAmountView.update": {
            "name": "update",
            "location": 110,
            "return": [
                "int",
                "salon.models.Stylist",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "month_year": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "MonthBudgetAmountView.partial_update": {
            "name": "partial_update",
            "location": 121,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "month_year": [
                    "django.http.HttpRequest",
                    "str",
                    "django.db.models.query.QuerySet",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "bm-master/packages/packages_views/viewMiscellaneous.py": {
        "get_currency": {
            "name": "get_currency",
            "location": 32,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Dict[str, str]",
                "Sequence[int]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "print_summary_config": {
            "name": "print_summary_config",
            "location": 47,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "print_summary_key": {
            "name": "print_summary_key",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "str",
                "django.http.HttpResponse"
            ],
            "arguments": {
                "request": [
                    "django.forms.Form",
                    "bool"
                ]
            }
        },
        "print_summary": {
            "name": "print_summary",
            "location": 104,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "arxiv.users.domain.Session",
                    "int"
                ],
                "key_value": [
                    "int",
                    "dict",
                    "bytes",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[users.models.JustfixUser]",
                    "users.models.JustfixUser"
                ]
            }
        },
        "get_timezone_list": {
            "name": "get_timezone_list",
            "location": 139,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        }
    },
    "bm-master/packages/packages_views/viewSettings.py": {
        "PackageSettingsView": {
            "name": "PackageSettingsView",
            "location": 11,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": []
            }
        },
        "PackageSettingsView.save_or_error_response": {
            "name": "save_or_error_response",
            "location": 13,
            "return": [
                "bool",
                "dict",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "save_object": [
                    "Dict[str, Any]",
                    "types.Response",
                    "\"Task\"",
                    "Optional[Union[str, int]]",
                    "Tuple[int, Any]"
                ]
            }
        },
        "PackageSettingsView.create_or_update_entry": {
            "name": "create_or_update_entry",
            "location": 29,
            "return": [
                "Optional[Dict]",
                "str",
                "zam_repondeur.models.Lecture",
                "bool",
                "int"
            ],
            "arguments": {
                "custom_request_data": [
                    "_models.Response",
                    "str"
                ],
                "update": [
                    "_models.Response",
                    "str"
                ]
            }
        }
    },
    "bm-master/packages/packages_views/viewUpload.py": {
        "upload_term_condition": {
            "name": "upload_term_condition",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "upload_file_wrapper": {
            "name": "upload_file_wrapper",
            "location": 42,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]",
                "requests.models.Response"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "temp_location": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "zerver.models.UserProfile",
                    "zerver.models.Message",
                    "Set[int]"
                ],
                "file_name": [
                    "str"
                ],
                "file_format": [
                    "str"
                ]
            }
        },
        "upload_flat_file": {
            "name": "upload_flat_file",
            "location": 104,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Callable[[str], str]",
                "int"
            ],
            "arguments": {
                "request": [
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "django.core.files.File",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "file_name": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "file_format": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "use_fields": [
                    "str",
                    "core_lib.core.models.Venue",
                    "int",
                    "Optional[float]"
                ],
                "entry_type": [
                    "str",
                    "core_lib.core.models.Venue",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "is_paytm_active": {
            "name": "is_paytm_active",
            "location": 145,
            "return": [
                "List[str]",
                "Optional[str]",
                "bytes",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "request": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, Any]",
                    "Set[str]",
                    "clients.models.Client"
                ],
                "file_name": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "file_format": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "upload_file_wrapper.upload_file_handler": {
            "name": "upload_file_handler",
            "location": 44,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "file_pointer": [
                    "Optional[int]",
                    "str",
                    "List[str]",
                    "bool",
                    "List[Tuple[str, str, str]]",
                    "list"
                ],
                "_file_name": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "bm-master/packages/serializers_childs/filter_nested_items.py": {
        "FilterNestedItems.to_representation": {
            "name": "to_representation",
            "location": 6,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "bm-master/packages/serializers_childs/package_rest_exceptionHandling.py": {
        "custom_exception_handler": {
            "name": "custom_exception_handler",
            "location": 4,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "exc": [
                    "Exception",
                    "dict"
                ],
                "context": [
                    "Exception",
                    "dict"
                ]
            }
        }
    },
    "bm-master/packages/templatetags/find_dict_value.py": {
        "find_dict_value_payment": {
            "name": "find_dict_value_payment",
            "location": 11,
            "return": [
                "List[Dict[str, str]]",
                "int",
                "bool",
                "str",
                "dict",
                "List[object]"
            ],
            "arguments": {
                "key_word": [
                    "bool",
                    "List[str]",
                    "str",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        }
    },
    "bm-master/packages/tests/test_upload_list.py": {
        "TestUploadKeys.setUpClass": {
            "name": "setUpClass",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "TestUploadKeys.setUpClass.test__str__": {
            "name": "test__str__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/packages/tests/test_utils.py": {
        "TestPackagesUtils.test_to_hexdigit": {
            "name": "test_to_hexdigit",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_to_percentage": {
            "name": "test_to_percentage",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_todays": {
            "name": "test_todays",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_find_dict_value": {
            "name": "test_find_dict_value",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackagesUtils.test_to_percentage.test__str__": {
            "name": "test__str__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather/admin.py": {},
    "bm-master/weather/apps.py": {},
    "bm-master/weather/exceptions.py": {
        "LatLonDoesNotExit.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "Iterable[str]",
                "int",
                "core.models.Recipe",
                "IO[str]",
                "Iterable[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateDoesNotExit.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather/havesine.py": {
        "Haversine.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coord1": [
                    "int",
                    "bool",
                    "float"
                ],
                "coord2": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "bm-master/weather/models.py": {
        "AirPollution.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "int",
                "bool",
                "Dict[str, zam_repondeur.models.Amendement]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AirPollutionData.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather/serializers.py": {},
    "bm-master/weather/tasks.py": {
        "delete_all_airpollution": {
            "name": "delete_all_airpollution",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "lat": [
                    "zerver.models.Realm",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "article.transfer.models.ArticleNumber",
                    "Optional[str]",
                    "str"
                ],
                "lon": [
                    "zerver.models.Realm",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "article.transfer.models.ArticleNumber",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "celery_update_air_pollution_db": {
            "name": "celery_update_air_pollution_db",
            "location": 31,
            "return": [
                "Iterable[str]",
                "bool",
                "salon.models.Stylist",
                "str"
            ],
            "arguments": {
                "self": [
                    "bool",
                    "List[str]",
                    "Iterable"
                ],
                "lat": [
                    "Optional[str]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "lon": [
                    "Optional[str]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "delete_all": [
                    "bool",
                    "List[str]",
                    "Iterable"
                ]
            }
        }
    },
    "bm-master/weather/tests.py": {},
    "bm-master/weather/urls.py": {},
    "bm-master/weather/views.py": {
        "air_pollution": {
            "name": "air_pollution",
            "location": 18,
            "return": [
                "str",
                "flask.Response",
                "dict",
                "Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "weather_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "int"
                ],
                "lat": [
                    "int",
                    "str",
                    "Optional[str]",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "lon": [
                    "int",
                    "str",
                    "Optional[str]",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "get_air_pollution": {
            "name": "get_air_pollution",
            "location": 59,
            "return": [
                "str",
                "models.Dashboard",
                "int",
                "bool",
                "Optional[zerver.models.UserProfile]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "datetime.datetime",
                    "str",
                    "bool"
                ],
                "weather_date": [
                    "str",
                    "datetime.datetime",
                    "dict",
                    "zerver.models.Realm",
                    "bool",
                    "django.http.HttpRequest"
                ],
                "lat": [
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "bool",
                    "Optional[planetsclub.users.models.UserModel]",
                    "dict",
                    "datetime.datetime",
                    "str"
                ],
                "lon": [
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "bool",
                    "Optional[planetsclub.users.models.UserModel]",
                    "dict",
                    "datetime.datetime",
                    "str"
                ]
            }
        }
    },
    "bm-master/weather/__init__.py": {},
    "bm-master/weather/weatherTask/task_weather.py": {},
    "bm-master/weather2/admin.py": {},
    "bm-master/weather2/apps.py": {},
    "bm-master/weather2/models.py": {},
    "bm-master/weather2/tasks.py": {
        "celery_get_co_data": {
            "name": "celery_get_co_data",
            "location": 15,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "lat": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "lon": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "celery_get_so2_data": {
            "name": "celery_get_so2_data",
            "location": 35,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "lat": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "lon": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "bm-master/weather2/tests.py": {
        "TestAirPollution.test_result_airpollution_equal": {
            "name": "test_result_airpollution_equal",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bm-master/weather2/urls.py": {},
    "bm-master/weather2/utils.py": {
        "get_air_pollution_data": {
            "name": "get_air_pollution_data",
            "location": 19,
            "return": [
                "str",
                "int",
                "django.db.models.Model"
            ],
            "arguments": {
                "lat": [
                    "str"
                ],
                "lon": [
                    "str"
                ],
                "gtype_code": [
                    "str"
                ]
            }
        },
        "empty_gas_type": {
            "name": "empty_gas_type",
            "location": 102,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "bm-master/weather2/views.py": {
        "get_openweather_data": {
            "name": "get_openweather_data",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Callable[[None, None], bool]",
                "Iterable"
            ],
            "arguments": {
                "lat": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "type"
                ],
                "lon": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "type"
                ],
                "gcode_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_count_days": {
            "name": "get_count_days",
            "location": 37,
            "return": [
                "int",
                "str",
                "datetime.timedelta",
                "List[str]",
                "datetime.date"
            ],
            "arguments": {
                "last_upate": [
                    "int",
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "set_caches_redis": {
            "name": "set_caches_redis",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "lat": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "lon": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "gcode_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "caches_name": [
                    "str",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "get_caches_redis": {
            "name": "get_caches_redis",
            "location": 132,
            "return": [
                "Type[BaseException]",
                "BaseException",
                "Optional[str]",
                "bool",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "caches_content": [
                    "str",
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "django.contrib.auth.models.User",
                    "float"
                ],
                "gcode_name": [
                    "str",
                    "Union[bytes, str]",
                    "logging.Logger"
                ]
            }
        },
        "get_air_pollution": {
            "name": "get_air_pollution",
            "location": 183,
            "return": [
                "str",
                "int",
                "core.types.FBAccessToken",
                "core.types.FBUserID"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "boucanpy.core.security.TokenPayload",
                    "dict",
                    "Iterable",
                    "List[str]",
                    "Optional[int]"
                ],
                "weather_date": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "lat": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "lon": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "bm-master/weather2/__init__.py": {}
}
{
    "board-game-scraper-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 107,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/cluster.py": {
        "abs_comp": {
            "name": "abs_comp",
            "location": 39,
            "return": [
                "Optional[str]",
                "Optional[BaseException]",
                "str",
                "Optional[int]",
                "float",
                "list"
            ],
            "arguments": {
                "field_1": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "field_2": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "_fields": {
            "name": "_fields",
            "location": 47,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "resource": [
                    "Dict[str, pathlib.Path]",
                    "Hashable",
                    "Exception"
                ]
            }
        },
        "smart_exists": {
            "name": "smart_exists",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ],
                "raise_exc": [
                    "pathlib.Path",
                    "str",
                    "Path",
                    "pathlib2.Path",
                    "bool"
                ]
            }
        },
        "_parse_value_id": {
            "name": "_parse_value_id",
            "location": 101,
            "return": [
                "Optional[float]",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "regex": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "_parse_game": {
            "name": "_parse_game",
            "location": 108,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "game": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "_load_games": {
            "name": "_load_games",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_make_id": {
            "name": "_make_id",
            "location": 146,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[Any]",
                "Optional[Dict]",
                "Optional[str]"
            ],
            "arguments": {
                "game": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "id_field": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "id_prefix": [
                    "str"
                ]
            }
        },
        "_make_data": {
            "name": "_make_data",
            "location": 153,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "games": [
                    "str",
                    "int",
                    "Dict[str, List[Any]]"
                ],
                "id_field": [
                    "str",
                    "int",
                    "Dict[str, List[Any]]"
                ],
                "id_prefix": [
                    "str",
                    "int",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "_process_item": {
            "name": "_process_item",
            "location": 157,
            "return": [
                "dict",
                "Set[str]",
                "Dict[int, Dict[int, Any]]",
                "str"
            ],
            "arguments": {
                "item": [
                    "T",
                    "List[str]",
                    "Dict[int, Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "_process_game": {
            "name": "_process_game",
            "location": 169,
            "return": [
                "Optional[List[str]]",
                "bool",
                "Union[int, float, complex]",
                "IO",
                "str",
                "Tuple[int, List[str]]"
            ],
            "arguments": {
                "game": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "fields": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_process_training": {
            "name": "_process_training",
            "location": 173,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "training": [
                    "dict",
                    "List['cirq.Qid']"
                ]
            }
        },
        "_write_training": {
            "name": "_write_training",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str, int]",
                    "Callable"
                ],
                "file_obj": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_train_gazetteer": {
            "name": "_train_gazetteer",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data_1": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "data_2": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "fields": [
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]"
                ],
                "training_file": [
                    "str",
                    "Path",
                    "pathlib.Path"
                ],
                "manual_labelling": [
                    "bool",
                    "Optional[bytes]",
                    "pathlib.Path",
                    "str"
                ],
                "pretty_print": [
                    "bool",
                    "Optional[bytes]",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "_extract_site": {
            "name": "_extract_site",
            "location": 235,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "Optional[str]"
                ]
            }
        },
        "link_games": {
            "name": "link_games",
            "location": 240,
            "return": [
                "str",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "gazetteer": [
                    "str",
                    "pathlib.Path"
                ],
                "paths": [
                    "list",
                    "List[List[str]]",
                    "Sequence[T]",
                    "List[pathlib.Path]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "id_prefixes": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "id_fields": [
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "list",
                    "Callable[[List[str]], Iterable[str]]"
                ],
                "training_file": [
                    "str",
                    "Optional[str]",
                    "int",
                    "pathlib.Path",
                    "bool"
                ],
                "manual_labelling": [
                    "str",
                    "Optional[str]",
                    "int",
                    "pathlib.Path",
                    "bool"
                ],
                "threshold": [
                    "str",
                    "Optional[str]"
                ],
                "output": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "pretty_print": [
                    "str",
                    "Optional[str]",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 340,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "_main": {
            "name": "_main",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/extensions.py": {
        "PullQueueExtension.from_crawler": {
            "name": "from_crawler",
            "location": 26,
            "return": [
                "IO",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "float"
                ],
                "crawler": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "PullQueueExtension.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "crawler": [
                    "Optional[bool]",
                    "str",
                    "Callable[[str], None]"
                ],
                "interval": [
                    "Optional[bool]",
                    "str",
                    "Callable[[str], None]"
                ],
                "project": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[Union[str, pathlib.Path]]",
                    "pathlib.PurePosixPath",
                    "Optional[str]"
                ],
                "subscription": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[Union[str, pathlib.Path]]",
                    "pathlib.PurePosixPath",
                    "Optional[str]"
                ],
                "max_messages": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "prevent_rescrape_for": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "pull_timeout": [
                    "bool",
                    "recidiviz.utils.regions.Region",
                    "Optional[int]"
                ]
            }
        },
        "PullQueueExtension._pull_queue": {
            "name": "_pull_queue",
            "location": 90,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "spider": [
                    "pywirelessmbus.utils.IMSTMessage"
                ]
            }
        },
        "PullQueueExtension.process_message": {
            "name": "process_message",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "spider": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "encoding": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "StateTag.from_crawler": {
            "name": "from_crawler",
            "location": 158,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "crawler": [
                    "str",
                    "dict",
                    "purplship.core.utils.pipeline.Job"
                ]
            }
        },
        "StateTag.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "jobdir": [
                    "Optional[str]",
                    "str"
                ],
                "state_file": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "pid_file": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "List[pathlib.Path]",
                    "Callable[[pathlib.Path], str]",
                    "list"
                ]
            }
        },
        "StateTag._write": {
            "name": "_write",
            "location": 181,
            "return": [
                "str",
                "int",
                "Callable",
                "IO",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "List[str]"
                ],
                "content": [
                    "str",
                    "bytes",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "StateTag._delete": {
            "name": "_delete",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "cmk.utils.type_defs.HostName",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "StateTag._spider_opened": {
            "name": "_spider_opened",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StateTag._spider_closed": {
            "name": "_spider_closed",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spider": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "reason": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DontRunBeforeTag.from_crawler": {
            "name": "from_crawler",
            "location": 219,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Union[Any, str]]",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "crawler": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DontRunBeforeTag.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tag_file": [
                    "Optional[str]",
                    "os.PathLike",
                    "pathlib.Path",
                    "pathlib.PurePosixPath",
                    "Dict[str, Any]"
                ],
                "date": [
                    "str",
                    "datetime.date",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "seconds": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ]
            }
        },
        "DontRunBeforeTag._spider_opened": {
            "name": "_spider_opened",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/full_merge.py": {
        "merge_config": {
            "name": "merge_config",
            "location": 26,
            "return": [
                "dict",
                "Dict[str, str]",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "spider": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]",
                    "pathx.Path"
                ],
                "item": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "argparse.Namespace"
                ],
                "in_paths": [
                    "str",
                    "pathlib.Path"
                ],
                "out_path": [
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]",
                    "pathlib.Path"
                ],
                "full": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        },
        "merge_configs": {
            "name": "merge_configs",
            "location": 58,
            "return": [],
            "arguments": {
                "spider": [
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "full": [
                    "dict",
                    "utils.mssql_counters.Section",
                    "Mapping[Any, Any]"
                ]
            }
        },
        "_parse_timeout": {
            "name": "_parse_timeout",
            "location": 153,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "timeout": [
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "_docker_container": {
            "name": "_docker_container",
            "location": 169,
            "return": [
                "dict",
                "logging.LogRecord",
                "Optional[int]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_docker_start": {
            "name": "_docker_start",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Tuple[str, int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_docker_stop": {
            "name": "_docker_stop",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, int]",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_docker_compose": {
            "name": "_docker_compose",
            "location": 243,
            "return": [
                "Dict[str, Any]",
                "Optional[dict]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "service": [
                    "str",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "_stop_merge_start": {
            "name": "_stop_merge_start",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "spider": [
                    "str",
                    "Dict[str, Any]"
                ],
                "compose_file": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "full": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Path",
                    "lib.Path"
                ],
                "timeout": [
                    "Optional[int]",
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "cool_down": [
                    "str"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 297,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/items.py": {
        "_clear_list": {
            "name": "_clear_list",
            "location": 81,
            "return": [
                "int",
                "Optional[Union[str, Any]]",
                "bool"
            ],
            "arguments": {
                "items": [
                    "float",
                    "Counter[str]",
                    "dict",
                    "List[List[Any]]",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_json_output": {
            "name": "_json_output",
            "location": 85,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "_serialize_bool": {
            "name": "_serialize_bool",
            "location": 89,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "str",
                    "Iterable[T]"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/loaders.py": {},
    "board-game-scraper-master/board_game_scraper/merge.py": {
        "_spark_session": {
            "name": "_spark_session",
            "location": 30,
            "return": [
                "Optional[bool]",
                "str",
                "Optional[float]",
                "argparse.Namespace",
                "Optional[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "log_level": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Union[str, int]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_compare": {
            "name": "_compare",
            "location": 62,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "first": [
                    "List[str]",
                    "list",
                    "Optional[Sequence[str]]",
                    "str",
                    "int"
                ],
                "second": [
                    "List[str]",
                    "list",
                    "Optional[Sequence[str]]",
                    "str",
                    "int"
                ],
                "column": [
                    "List[str]",
                    "list",
                    "Optional[Sequence[str]]",
                    "str",
                    "int"
                ]
            }
        },
        "_column_type": {
            "name": "_column_type",
            "location": 70,
            "return": [
                "Optional[Iterable[str]]",
                "Optional[Union[str, Any]]",
                "Hashable"
            ],
            "arguments": {
                "column": [
                    "Type[Any]"
                ],
                "column_type": [
                    "Type[Any]"
                ]
            }
        },
        "_remove_empty": {
            "name": "_remove_empty",
            "location": 81,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Sized",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "remove_false": [
                    "bool",
                    "list"
                ]
            }
        },
        "merge_files": {
            "name": "merge_files",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "in_paths": [
                    "pathlib.Path",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "out_path": [
                    "str",
                    "\"CharSource\"",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "keys": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "\"VersionedAnalyzer\"",
                    "dict"
                ],
                "key_types": [
                    "Tuple[int, int]",
                    "bool",
                    "Optional[bool]",
                    "Set[str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "latest": [
                    "Set[str]",
                    "bytes",
                    "Collection",
                    "str"
                ],
                "latest_types": [
                    "str",
                    "Type[T]",
                    "bool",
                    "Tuple[type]",
                    "List[str]"
                ],
                "latest_min": [
                    "Optional[str]",
                    "str",
                    "Optional[object]"
                ],
                "latest_required": [
                    "str",
                    "Sequence[str]"
                ],
                "fieldnames": [
                    "List[float]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "fieldnames_exclude": [
                    "str",
                    "Tuple[Literal, Literal]",
                    "Callable",
                    "List[str]"
                ],
                "sort_keys": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "int"
                ],
                "sort_latest": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "int"
                ],
                "sort_fields": [
                    "str",
                    "int",
                    "float"
                ],
                "sort_descending": [
                    "str"
                ],
                "concat_output": [
                    "str",
                    "Sequence[str]"
                ],
                "log_level": [
                    "str"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 250,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/news.py": {
        "update_news": {
            "name": "update_news",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "s3_src": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ],
                "path_feeds": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "List[str]"
                ],
                "path_merged": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ],
                "path_split": [
                    "pathlib.Path",
                    "str",
                    "logging.Logger",
                    "List[str]"
                ],
                "s3_dst": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Optional[str]",
                    "logging.Logger"
                ],
                "split_size": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "log_level": [
                    "str"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 97,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/pipelines.py": {
        "DataTypePipeline.process_item": {
            "name": "process_item",
            "location": 33,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[Dict, Tuple]",
                    "dict"
                ],
                "spider": [
                    "scrapy.Spider",
                    "List[str]",
                    "scrapy.spiders.Spider",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        },
        "ResolveLabelPipeline.from_crawler": {
            "name": "from_crawler",
            "location": 65,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Callable",
                "Callable[..., None]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "crawler": [
                    "dict",
                    "str"
                ]
            }
        },
        "ResolveLabelPipeline.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Tuple[str, str]]"
                ],
                "fields": [
                    "List[int]",
                    "AbstractSet[str]",
                    "Optional[List[\"DeliveryItem\"]]",
                    "dict",
                    "bool"
                ],
                "lang_priorities": [
                    "str",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "ResolveLabelPipeline._extract_labels": {
            "name": "_extract_labels",
            "location": 87,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "dict",
                    "list"
                ],
                "value": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ResolveLabelPipeline._deferred_value": {
            "name": "_deferred_value",
            "location": 103,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "spider": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ResolveLabelPipeline._add_value": {
            "name": "_add_value",
            "location": 114,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "Callable",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Dict[str, int]",
                    "List[Dict]",
                    "dict",
                    "Optional[Iterable[str]]"
                ],
                "field": [
                    "dict",
                    "Type",
                    "type",
                    "bool",
                    "Dict[str, Any]"
                ],
                "item": [
                    "dict",
                    "Type",
                    "type",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResolveLabelPipeline._deferred_field": {
            "name": "_deferred_field",
            "location": 120,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "twisted.internedefer.Deferred",
                    "Type",
                    "type",
                    "Callable",
                    "bool"
                ],
                "item": [
                    "Dict[str, Any]",
                    "twisted.internedefer.Deferred"
                ],
                "spider": [
                    "bool",
                    "int",
                    "twisted.internedefer.Deferred",
                    "range"
                ]
            }
        },
        "ResolveLabelPipeline.process_item": {
            "name": "process_item",
            "location": 132,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "float"
                ],
                "spider": [
                    "str",
                    "Exception",
                    "list"
                ]
            }
        },
        "ResolveImagePipeline._parse_url": {
            "name": "_parse_url",
            "location": 161,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ResolveImagePipeline.process_item": {
            "name": "process_item",
            "location": 179,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[Dict, Tuple]",
                    "dict"
                ],
                "spider": [
                    "scrapy.Spider",
                    "List[str]",
                    "scrapy.spiders.Spider",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        },
        "LimitImagesPipeline.from_crawler": {
            "name": "from_crawler",
            "location": 195,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "IO",
                    "Iterable[T]",
                    "Optional[str]"
                ],
                "crawler": [
                    "dict",
                    "str"
                ]
            }
        },
        "LimitImagesPipeline.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_field": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "target_field": [
                    "int",
                    "Optional[float]",
                    "List[str]",
                    "Sequence[Any]",
                    "tuple"
                ],
                "limit": [
                    "bool",
                    "int",
                    "torch.utils.data.DataLoader",
                    "Optional[bool]"
                ]
            }
        },
        "LimitImagesPipeline.process_item": {
            "name": "process_item",
            "location": 220,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "List[dict]",
                    "Dict[str, Any]"
                ],
                "spider": [
                    "scrapy.Spider",
                    "List[str]",
                    "scrapy.spiders.Spider",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        },
        "CleanItemPipeline.from_crawler": {
            "name": "from_crawler",
            "location": 249,
            "return": [
                "Optional[int]",
                "str",
                "float",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, int]",
                    "int",
                    "docutils.utils.Reporter",
                    "bool"
                ],
                "crawler": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "CleanItemPipeline.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "drop_falsey": [
                    "int",
                    "Union[str, float]",
                    "bool"
                ],
                "drop_values": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "CleanItemPipeline.process_item": {
            "name": "process_item",
            "location": 268,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "Type",
                    "bool"
                ],
                "spider": [
                    "scrapy.Spider",
                    "List[str]",
                    "scrapy.spiders.Spider",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/prefixes.py": {
        "_parse_key": {
            "name": "_parse_key",
            "location": 27,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_process_file": {
            "name": "_process_file",
            "location": 33,
            "return": [
                "Set[str]",
                "str",
                "Tuple[int, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Sequence[str]",
                    "Union[str, bool]",
                    "BinaryIO"
                ],
                "fields": [
                    "str",
                    "Iterator[str]",
                    "Callable[[None], bool]"
                ],
                "sep": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[Container[str]]",
                    "dict",
                    "float"
                ],
                "count": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[Container[str]]",
                    "dict",
                    "float"
                ]
            }
        },
        "_make_trie": {
            "name": "_make_trie",
            "location": 53,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "file": [
                    "dict",
                    "str",
                    "IO[bytes]",
                    "bytes"
                ],
                "fields": [
                    "dict",
                    "str",
                    "IO[bytes]",
                    "bytes"
                ],
                "sep": [
                    "dict",
                    "str",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "_count": {
            "name": "_count",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trie": [
                    "int",
                    "Callable",
                    "str"
                ],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_prefixes": {
            "name": "_prefixes",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "trie": [
                    "str",
                    "Iterable[Sequence[str]]"
                ],
                "prefix": [
                    "str",
                    "bool"
                ],
                "limit": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "logging.LogRecord"
                ]
            }
        },
        "_prefixes_from_file": {
            "name": "_prefixes_from_file",
            "location": 71,
            "return": [
                "Set[str]",
                "List[str]",
                "str",
                "Dict[str, Any]",
                "Tuple[int, str]",
                "bool"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]",
                    "IO",
                    "BinaryIO",
                    "IO[bytes]"
                ]
            }
        },
        "_trie_from_file": {
            "name": "_trie_from_file",
            "location": 87,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "_save_to_prefixes": {
            "name": "_save_to_prefixes",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "dst": [
                    "str",
                    "BinaryIO"
                ],
                "trie": [],
                "file": [],
                "fields": [],
                "sep": []
            }
        },
        "split_file": {
            "name": "split_file",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "in_file": [
                    "str",
                    "Optional[List[str]]"
                ],
                "out_file": [
                    "str",
                    "Optional[List[str]]"
                ],
                "fields": [
                    "str",
                    "Iterator[str]",
                    "FrozenSet[str]",
                    "Optional[Union[str, Any]]",
                    "Optional[dict]"
                ],
                "trie_file": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "limits": [
                    "List[str]",
                    "str",
                    "List[Tuple[Any, ...]]"
                ],
                "construct": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 164,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "_main": {
            "name": "_main",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/pubsub_pull.py": {
        "_process_messages_csv": {
            "name": "_process_messages_csv",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_process_messages_raw": {
            "name": "_process_messages_raw",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_format_from_path": {
            "name": "_format_from_path",
            "location": 84,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 91,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/settings.py": {},
    "board-game-scraper-master/board_game_scraper/split.py": {
        "_is_empty": {
            "name": "_is_empty",
            "location": 44,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "IO[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "item": [
                    "int",
                    "dict",
                    "Tuple[str, str]",
                    "str",
                    "object",
                    "List[str]"
                ]
            }
        },
        "_filter_fields": {
            "name": "_filter_fields",
            "location": 50,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]",
                    "Type['DataclassT']",
                    "type"
                ],
                "fields": [
                    "Dict[str, Any]",
                    "Type['DataclassT']",
                    "type"
                ],
                "exclude_empty": [
                    "Dict[str, Any]",
                    "Type['DataclassT']",
                    "type"
                ]
            }
        },
        "_load_items": {
            "name": "_load_items",
            "location": 58,
            "return": [
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Optional[pathlib.Path]",
                    "Union[str, BinaryIO]"
                ],
                "fields": [
                    "dict",
                    "str"
                ],
                "exclude_empty": [
                    "List[str]"
                ]
            }
        },
        "split_files": {
            "name": "split_files",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "path_in": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "Union[str, pathlib.Path]"
                ],
                "path_out": [
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "Optional[Any]",
                    "Union[str, pathlib.Path]"
                ],
                "size": [
                    "int",
                    "bytes",
                    "List[str]",
                    "bool"
                ],
                "fields": [
                    "Optional[\"FieldContainer\"]",
                    "str"
                ],
                "exclude_empty": [
                    "Optional[\"FieldContainer\"]",
                    "str"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 117,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "_main": {
            "name": "_main",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/utils.py": {
        "to_lower": {
            "name": "to_lower",
            "location": 53,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 59,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_replace_utf_entities": {
            "name": "_replace_utf_entities",
            "location": 64,
            "return": [],
            "arguments": {
                "match": []
            }
        },
        "replace_utf_entities": {
            "name": "replace_utf_entities",
            "location": 74,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "replace_all_entities": {
            "name": "replace_all_entities",
            "location": 79,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "extract_query_param": {
            "name": "extract_query_param",
            "location": 90,
            "return": [],
            "arguments": {
                "url": [],
                "field": []
            }
        },
        "now": {
            "name": "now",
            "location": 100,
            "return": [],
            "arguments": {
                "tzinfo": []
            }
        },
        "serialize_date": {
            "name": "serialize_date",
            "location": 107,
            "return": [],
            "arguments": {
                "date": [],
                "tzinfo": []
            }
        },
        "parse_json": {
            "name": "parse_json",
            "location": 114,
            "return": [],
            "arguments": {
                "file_or_string": []
            }
        },
        "_json_default": {
            "name": "_json_default",
            "location": 133,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "serialize_json": {
            "name": "serialize_json",
            "location": 145,
            "return": [],
            "arguments": {
                "obj": [],
                "file": []
            }
        },
        "date_from_file": {
            "name": "date_from_file",
            "location": 169,
            "return": [],
            "arguments": {
                "path": [],
                "tzinfo": [],
                "format_str": []
            }
        },
        "validate_range": {
            "name": "validate_range",
            "location": 191,
            "return": [],
            "arguments": {
                "value": [],
                "lower": [],
                "upper": []
            }
        },
        "json_from_response": {
            "name": "json_from_response",
            "location": 201,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "extract_meta": {
            "name": "extract_meta",
            "location": 207,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "extract_item": {
            "name": "extract_item",
            "location": 216,
            "return": [],
            "arguments": {
                "item": [],
                "response": [],
                "item_cls": []
            }
        },
        "extract_url": {
            "name": "extract_url",
            "location": 224,
            "return": [],
            "arguments": {
                "item": [],
                "response": [],
                "default": []
            }
        },
        "_match": {
            "name": "_match",
            "location": 238,
            "return": [],
            "arguments": {
                "string": [],
                "comparison": []
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 246,
            "return": [],
            "arguments": {
                "url": [],
                "hostnames": []
            }
        },
        "validate_url": {
            "name": "validate_url",
            "location": 266,
            "return": [],
            "arguments": {
                "url": [],
                "hostnames": [],
                "schemes": []
            }
        },
        "extract_bgg_id": {
            "name": "extract_bgg_id",
            "location": 281,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_bgg_user_name": {
            "name": "extract_bgg_user_name",
            "location": 291,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_wikidata_id": {
            "name": "extract_wikidata_id",
            "location": 303,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_wikipedia_id": {
            "name": "extract_wikipedia_id",
            "location": 312,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_dbpedia_id": {
            "name": "extract_dbpedia_id",
            "location": 322,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_luding_id": {
            "name": "extract_luding_id",
            "location": 331,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_spielen_id": {
            "name": "extract_spielen_id",
            "location": 344,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_freebase_id": {
            "name": "extract_freebase_id",
            "location": 358,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_bga_id": {
            "name": "extract_bga_id",
            "location": 371,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "extract_ids": {
            "name": "extract_ids",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "pubsub_client": {
            "name": "pubsub_client",
            "location": 400,
            "return": [],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/version_env.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 18,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/__init__.py": {},
    "board-game-scraper-master/board_game_scraper/__main__.py": {
        "_find_states": {
            "name": "_find_states",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "path_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "state_file": [
                    "str",
                    "bool"
                ],
                "delete": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "delete_non_state": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 70,
            "return": [
                "utils.parser.BinaryParser",
                "Tuple[Dict[str, str], List[str]]",
                "argparse.ArgumentParser",
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                "int",
                "Set[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "board-game-scraper-master/board_game_scraper/__version__.py": {},
    "board-game-scraper-master/board_game_scraper/spiders/bga.py": {
        "_extract_bga_id": {
            "name": "_extract_bga_id",
            "location": 30,
            "return": [
                "dict",
                "Callable",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "response": [
                    "str",
                    "Optional[\"Response\"]",
                    "float"
                ]
            }
        },
        "_extract_requests": {
            "name": "_extract_requests",
            "location": 40,
            "return": [
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, str]]",
                "dict",
                "Dict[str, Dict]",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "response": [
                    "List[Dict[str, Any]]",
                    "scrapy.http.Response",
                    "dict"
                ]
            }
        },
        "BgaSpider.from_crawler": {
            "name": "from_crawler",
            "location": 63,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Sequence[str]",
                    "int",
                    "Exception",
                    "tuple",
                    "Dict[str, Any]",
                    "Mapping[str, int]"
                ],
                "crawler": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "BgaSpider.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BgaSpider._api_url": {
            "name": "_api_url",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.DirEntry",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "query": [
                    "str",
                    "bool",
                    "int",
                    "raiden.utils.Address"
                ]
            }
        },
        "BgaSpider._game_requests": {
            "name": "_game_requests",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bga_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BgaSpider._next_request_or_item": {
            "name": "_next_request_or_item",
            "location": 96,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "dict",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "scrapy.http.Response",
                    "str"
                ],
                "requests": [
                    "purplship.core.utils.xml.Element",
                    "dict",
                    "raiden.utils.ABI",
                    "str",
                    "Optional[\"Response\"]",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "BgaSpider.start_requests": {
            "name": "start_requests",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BgaSpider.parse": {
            "name": "parse",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.TextResponse",
                    "dict"
                ]
            }
        },
        "BgaSpider.parse_images": {
            "name": "parse_images",
            "location": 196,
            "return": [
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "item": [
                    "Optional[TextIO]",
                    "dict"
                ]
            }
        },
        "BgaSpider.parse_videos": {
            "name": "parse_videos",
            "location": 216,
            "return": [
                "Dict[str, List[str]]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "Dict[str, dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "item": [
                    "dict",
                    "Optional[TextIO]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "BgaSpider.parse_reviews": {
            "name": "parse_reviews",
            "location": 236,
            "return": [
                "Dict[str, List[str]]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "Dict[str, dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "item": [
                    "dict",
                    "Optional[TextIO]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "BgaSpider.parse_user_reviews": {
            "name": "parse_user_reviews",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "aiohttp.web.Request",
                    "str"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/bgg.py": {
        "_parse_int": {
            "name": "_parse_int",
            "location": 32,
            "return": [
                "bool",
                "type",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Optional[str]"
                ],
                "xpath": [
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "Exception",
                    "Optional[str]",
                    "Type",
                    "dict"
                ],
                "lenient": [
                    "Optional[str]",
                    "Type",
                    "Optional[int]",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_parse_player_count": {
            "name": "_parse_player_count",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "poll": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parse_votes": {
            "name": "_parse_votes",
            "location": 71,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "poll": [
                    "str",
                    "T",
                    "bool",
                    "int"
                ],
                "attr": [
                    "str",
                    "cmk.gui.plugins.views.utils.ABCDataSource",
                    "Dict[str, Optional[str]]",
                    "kitovu.utils.JsonType",
                    "Match[str]"
                ],
                "enum": [
                    "str",
                    "cmk.gui.plugins.views.utils.ABCDataSource",
                    "Dict[str, Optional[str]]",
                    "kitovu.utils.JsonType",
                    "Match[str]"
                ]
            }
        },
        "_value_id": {
            "name": "_value_id",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "items": [
                    "str",
                    "Iterable[str]",
                    "Tuple[bytes]",
                    "Dict[str, int]",
                    "List[Dict[str, Any]]",
                    "raiden.utils.Dict"
                ],
                "sep": [
                    "Optional[str]",
                    "T",
                    "str",
                    "Callable[[T], bool]",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "_remove_rank": {
            "name": "_remove_rank",
            "location": 90,
            "return": [
                "bool",
                "int",
                "Union[int, Tuple[int, ...]]",
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Union[bool, str]",
                    "int",
                    "list"
                ]
            }
        },
        "_value_id_rank": {
            "name": "_value_id_rank",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "items": [
                    "str",
                    "Iterable[str]",
                    "Tuple[bytes]",
                    "Dict[str, int]",
                    "List[Dict[str, Any]]",
                    "raiden.utils.Dict"
                ],
                "sep": [
                    "Optional[str]",
                    "T",
                    "str",
                    "Callable[[T], bool]",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "BggSpider.from_crawler": {
            "name": "from_crawler",
            "location": 142,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ],
                "crawler": [
                    "Sequence[str]",
                    "Optional[BaseException]",
                    "Exception",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "BggSpider.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BggSpider._spider_opened": {
            "name": "_spider_opened",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BggSpider._api_url": {
            "name": "_api_url",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "IO"
                ]
            }
        },
        "BggSpider._game_requests": {
            "name": "_game_requests",
            "location": 192,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BggSpider._game_request": {
            "name": "_game_request",
            "location": 237,
            "return": [
                "bool",
                "Optional[bytes]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "bgg_id": [
                    "str",
                    "dict",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "dict",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BggSpider.collection_request": {
            "name": "collection_request",
            "location": 240,
            "return": [
                "int",
                "raiden.utils.Address"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BggSpider._filter_votes": {
            "name": "_filter_votes",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "votes_best": [
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ],
                "votes_rec": [
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ],
                "votes_not": [
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ],
                "best": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "BggSpider._player_count_votes": {
            "name": "_player_count_votes",
            "location": 277,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "BggSpider._poll": {
            "name": "_poll",
            "location": 300,
            "return": [
                "int",
                "bool",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "attr": [
                    "str",
                    "bool",
                    "Callable[..., str]"
                ],
                "enum": [
                    "str",
                    "bool",
                    "Callable[..., str]"
                ],
                "func": [
                    "str",
                    "bool",
                    "Callable[..., str]"
                ],
                "default": [
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BggSpider._user_item_or_request": {
            "name": "_user_item_or_request",
            "location": 316,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "Optional[Type[Exception]]"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Union[str, urllib.parse.ParseResult, None]"
                ],
                "priority": [
                    "List[str]",
                    "list",
                    "bytes"
                ],
                "from_request": [
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "BggSpider.parse": {
            "name": "parse",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.TextResponse",
                    "scrapy.http.Response",
                    "purplship.core.utils.serializable.Deserializable[str]"
                ]
            }
        },
        "BggSpider.parse_game": {
            "name": "parse_game",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "Iterator"
                ]
            }
        },
        "BggSpider.parse_collection": {
            "name": "parse_collection",
            "location": 595,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "purplship.core.utils.serializable.Deserializable[str]"
                ]
            }
        },
        "BggSpider.parse_user": {
            "name": "parse_user",
            "location": 673,
            "return": [
                "str",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "item": [
                    "Dict[str, Any]",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/bgg_geeklist.py": {
        "BggGeekListSpider.parse_game": {
            "name": "parse_game",
            "location": 46,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bool",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "T",
                    "acquisition.items.Items",
                    "Dict[str, Any]"
                ],
                "response": [
                    "int",
                    "Tuple[str, dict, int, Any]",
                    "dict"
                ]
            }
        },
        "BggGeekListSpider.parse_geeklist": {
            "name": "parse_geeklist",
            "location": 74,
            "return": [
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[Hashable]",
                    "Type[object]",
                    "T"
                ],
                "response": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "int",
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "BggGeekListSpider.parse_item": {
            "name": "parse_item",
            "location": 84,
            "return": [
                "str",
                "List[cmk.gui.plugins.visuals.utils.Filter]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "raiden.utils.Any",
                    "list"
                ],
                "response": [
                    "purplship.core.utils.serializable.Deserializable[str]"
                ]
            }
        },
        "BggGeekListSpider.parse": {
            "name": "parse",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "purplship.core.utils.serializable.Deserializable[str]"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/bgg_hotness.py": {
        "BggHotnessSpider._local_requests": {
            "name": "_local_requests",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_dir": [
                    "str",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "cerulean.Path",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "BggHotnessSpider.start_requests": {
            "name": "start_requests",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BggHotnessSpider.parse": {
            "name": "parse",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/bgg_rankings.py": {
        "_parse_int": {
            "name": "_parse_int",
            "location": 27,
            "return": [
                "bool",
                "type",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "element": [
                    "float",
                    "int",
                    "Optional[bool]"
                ],
                "xpath": [
                    "float",
                    "int",
                    "Optional[bool]"
                ],
                "css": [
                    "float",
                    "int",
                    "Optional[bool]"
                ],
                "default": [
                    "Mapping",
                    "Dict[str, Any]",
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "type",
                    "dict",
                    "int",
                    "Optional[List[Any]]"
                ],
                "lenient": [
                    "Optional[int]",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Tuple[Type]"
                ]
            }
        },
        "_extract_bgg_id": {
            "name": "_extract_bgg_id",
            "location": 46,
            "return": [
                "Optional[cmk.utils.type_defs.SectionName]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "_start_urls": {
            "name": "_start_urls",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "bgg_domains": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "prefix_urls": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "_parse_date": {
            "name": "_parse_date",
            "location": 86,
            "return": [
                "datetime.datetime",
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "Optional[str]",
                "datetime.date"
            ],
            "arguments": {
                "date": [
                    "str",
                    "Union[int, str, datetime.datetime]",
                    "datetime.date",
                    "datetime.datetime",
                    "int",
                    "Optional[str]",
                    "Tuple[str, str]",
                    "Optional[datetime.date]"
                ],
                "tzinfo": [
                    "str",
                    "int"
                ],
                "format_str": [
                    "str",
                    "datetime.date",
                    "datetime.datetime",
                    "Union[int, str, datetime.datetime]"
                ]
            }
        },
        "_extract_date": {
            "name": "_extract_date",
            "location": 101,
            "return": [
                "str",
                "int",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "tzinfo": [
                    "str",
                    "Optional[dict]",
                    "Dict[str, dict]",
                    "Union[int, str]"
                ],
                "format_str": [
                    "str",
                    "Optional[dict]",
                    "Dict[str, dict]",
                    "Union[int, str]"
                ]
            }
        },
        "BggRankingsSpider.start_requests": {
            "name": "start_requests",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BggRankingsSpider.parse": {
            "name": "parse",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.Response",
                    "scrapy.http.TextResponse"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/dbpedia.py": {
        "_sparql_xpath": {
            "name": "_sparql_xpath",
            "location": 19,
            "return": [],
            "arguments": {
                "prop": []
            }
        },
        "DBpediaSpider._api_url": {
            "name": "_api_url",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "DBpediaSpider._type_requests": {
            "name": "_type_requests",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "types": [],
                "batch_size": []
            }
        },
        "DBpediaSpider.start_requests": {
            "name": "start_requests",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBpediaSpider.parse": {
            "name": "parse",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "DBpediaSpider.parse_games": {
            "name": "parse_games",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "DBpediaSpider.parse_game": {
            "name": "parse_game",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/luding.py": {
        "LudingSpider.parse": {
            "name": "parse",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Iterable"
                ]
            }
        },
        "LudingSpider.parse_game": {
            "name": "parse_game",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "bytes",
                    "OrderedDict",
                    "dict"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/spielen.py": {
        "_parse_interval": {
            "name": "_parse_interval",
            "location": 16,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_parse_int": {
            "name": "_parse_int",
            "location": 23,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "SpielenSpider.parse": {
            "name": "parse",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "SpielenSpider.parse_game": {
            "name": "parse_game",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/wikidata.py": {
        "WikidataSpider._api_url": {
            "name": "_api_url",
            "location": 84,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Callable",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "WikidataSpider._entity_url": {
            "name": "_entity_url",
            "location": 88,
            "return": [
                "str",
                "dict",
                "type"
            ],
            "arguments": {
                "self": [],
                "wikidata_id": [
                    "int"
                ],
                "fformat": [
                    "int"
                ]
            }
        },
        "WikidataSpider._type_requests": {
            "name": "_type_requests",
            "location": 91,
            "return": [
                "Iterator[Tuple[str, str]]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Type",
                    "Callable"
                ],
                "batch_size": [
                    "str",
                    "Type"
                ]
            }
        },
        "WikidataSpider.start_requests": {
            "name": "start_requests",
            "location": 117,
            "return": [
                "Iterator[object]",
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikidataSpider.parse": {
            "name": "parse",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "purplship.providers.dhl.utils.Settings",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "WikidataSpider.parse_games": {
            "name": "parse_games",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "WikidataSpider.parse_game": {
            "name": "parse_game",
            "location": 178,
            "return": [
                "Union[tuple, list]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "purplship.core.utils.Element",
                    "scrapy.http.Response",
                    "purplship.core.utils.serializable.Deserializable[str]"
                ]
            }
        }
    },
    "board-game-scraper-master/board_game_scraper/spiders/__init__.py": {}
}
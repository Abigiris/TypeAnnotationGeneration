{
    "bonsai-master/setup.py": {
        "silent_stderr": {
            "name": "silent_stderr",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BuildExt._have_krb5": {
            "name": "_have_krb5",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "libs": [
                    "str",
                    "bool",
                    "IO",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BuildExt.build_extensions": {
            "name": "build_extensions",
            "location": 67,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/.ci/delay.py": {
        "LinuxDelayHandler.get_interface_name": {
            "name": "get_interface_name",
            "location": 16,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "LinuxDelayHandler.set_delay": {
            "name": "set_delay",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sec": [
                    "str",
                    "bool",
                    "int"
                ],
                "duration": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LinuxDelayHandler.remove_delay": {
            "name": "remove_delay",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacDelayHandler.set_delay": {
            "name": "set_delay",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sec": [
                    "str",
                    "int"
                ],
                "duration": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MacDelayHandler.remove_delay": {
            "name": "remove_delay",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WinDelayHandler.delay": {
            "name": "delay",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sec": [
                    "int",
                    "Callable",
                    "str"
                ],
                "duration": [
                    "int",
                    "float"
                ]
            }
        },
        "WinDelayHandler.set_delay": {
            "name": "set_delay",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sec": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "duration": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "WinDelayHandler.remove_delay": {
            "name": "remove_delay",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/docs/conf.py": {
        "Mock.__getattr__": {
            "name": "__getattr__",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Type[T]",
                    "bool"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/errors.py": {
        "_get_error": {
            "name": "_get_error",
            "location": 247,
            "return": [
                "dict",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str"
                ]
            }
        },
        "LDAPError.create": {
            "name": "create",
            "location": 10,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "code": [
                    "int",
                    "str"
                ]
            }
        },
        "LDAPError.hexcode": {
            "name": "hexcode",
            "location": 16,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPError.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordPolicyError.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/ldapclient.py": {
        "LDAPClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict"
                ],
                "tls": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "asyncio.LifoQueue"
                ]
            }
        },
        "LDAPClient.set_raw_attributes": {
            "name": "set_raw_attributes",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_list": [
                    "List[str]",
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "LDAPClient.set_credentials": {
            "name": "set_credentials",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mechanism": [
                    "Union[str, bytes]",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "Pattern[bytes]",
                    "Union[str, List[Any]]",
                    "float",
                    "str"
                ],
                "user": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "password": [
                    "bool",
                    "Optional[int]",
                    "Sequence[str]",
                    "str"
                ],
                "realm": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "authz_id": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "keytab": [
                    "bool",
                    "Optional[int]",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "LDAPClient.set_cert_policy": {
            "name": "set_cert_policy",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "LDAPClient.set_ca_cert": {
            "name": "set_ca_cert",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Tuple[str, str]]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "LDAPClient.set_ca_cert_dir": {
            "name": "set_ca_cert_dir",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LDAPClient.set_client_cert": {
            "name": "set_client_cert",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "LDAPClient.set_client_key": {
            "name": "set_client_key",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LDAPClient.set_async_connection_class": {
            "name": "set_async_connection_class",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "Exception"
                ]
            }
        },
        "LDAPClient.set_password_policy": {
            "name": "set_password_policy",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ppolicy": [
                    "bool",
                    "str",
                    "float",
                    "Optional[bool]",
                    "Optional[Exception]"
                ]
            }
        },
        "LDAPClient.set_extended_dn": {
            "name": "set_extended_dn",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extdn_format": [
                    "Optional[float]",
                    "int",
                    "List[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "LDAPClient.set_sd_flags": {
            "name": "set_sd_flags",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "LDAPClient.set_auto_page_acquire": {
            "name": "set_auto_page_acquire",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "int",
                    "Tuple[str, str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "LDAPClient.set_ignore_referrals": {
            "name": "set_ignore_referrals",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "int",
                    "Tuple[str, str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "LDAPClient.set_server_chase_referrals": {
            "name": "set_server_chase_referrals",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "int",
                    "Tuple[str, str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "LDAPClient.set_managedsait": {
            "name": "set_managedsait",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "int",
                    "Tuple[str, str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "LDAPClient.set_url": {
            "name": "set_url",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "LDAPClient.set_sasl_security_properties": {
            "name": "set_sasl_security_properties",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "no_anonymous": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Pattern]"
                ],
                "no_dict": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "Optional[Pattern]",
                    "Dict[str, Any]"
                ],
                "no_plain": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Pattern]"
                ],
                "forward_sec": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "Optional[Pattern]"
                ],
                "pass_cred": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "Optional[Pattern]"
                ],
                "min_ssf": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[float]"
                ],
                "max_ssf": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "T",
                    "str",
                    "Optional[float]"
                ],
                "max_bufsize": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "T",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "LDAPClient.url": {
            "name": "url",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "LDAPClient.mechanism": {
            "name": "mechanism",
            "location": 472,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPClient.credentials": {
            "name": "credentials",
            "location": 477,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPClient.tls": {
            "name": "tls",
            "location": 482,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPClient.cert_policy": {
            "name": "cert_policy",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LDAPClient.ca_cert": {
            "name": "ca_cert",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LDAPClient.ca_cert_dir": {
            "name": "ca_cert_dir",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "List[str]",
                    "bool",
                    "\"Location\""
                ]
            }
        },
        "LDAPClient.client_cert": {
            "name": "client_cert",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "LDAPClient.client_key": {
            "name": "client_key",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Callable[[str], Any]",
                    "Union[bytes, str, None]",
                    "list",
                    "bytes"
                ]
            }
        },
        "LDAPClient.raw_attributes": {
            "name": "raw_attributes",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LDAPClient.password_policy": {
            "name": "password_policy",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "LDAPClient.extended_dn_format": {
            "name": "extended_dn_format",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "LDAPClient.sd_flags": {
            "name": "sd_flags",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Union[int, str]"
                ]
            }
        },
        "LDAPClient.auto_page_acquire": {
            "name": "auto_page_acquire",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "LDAPClient.ignore_referrals": {
            "name": "ignore_referrals",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LDAPClient.server_chase_referrals": {
            "name": "server_chase_referrals",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "LDAPClient.managedsait": {
            "name": "managedsait",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "LDAPClient.sasl_security_properties": {
            "name": "sasl_security_properties",
            "location": 615,
            "return": [
                "str",
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPClient.get_rootDSE": {
            "name": "get_rootDSE",
            "location": 619,
            "return": [
                "Optional[str]",
                "Optional[dict]",
                "Tuple[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPClient.connect": {
            "name": "connect",
            "location": 655,
            "return": [
                "Optional[int]",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "int",
                    "bool",
                    "Union[str, dict]",
                    "Iterable[int]",
                    "str"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/ldapconnection.py": {
        "BaseLDAPConnection.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "is_async": [
                    "bool",
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "BaseLDAPConnection.__enter__": {
            "name": "__enter__",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLDAPConnection.__exit__": {
            "name": "__exit__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "BaseLDAPConnection.add": {
            "name": "add",
            "location": 39,
            "return": [
                "Optional[int]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "ldapentry.LDAPEntry",
                    "Optional[float]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "timeout": [
                    "ldapentry.LDAPEntry",
                    "Optional[float]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseLDAPConnection.delete": {
            "name": "delete",
            "location": 42,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "dname": [
                    "str"
                ],
                "timeout": [
                    "str",
                    "dict"
                ],
                "recursive": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseLDAPConnection.open": {
            "name": "open",
            "location": 52,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "BaseLDAPConnection.modify_password": {
            "name": "modify_password",
            "location": 55,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "Dict[str, str]"
                ],
                "new_password": [
                    "Optional[str]",
                    "Callable",
                    "Optional[float]",
                    "Pattern",
                    "List[str]",
                    "dict",
                    "Hashable"
                ],
                "old_password": [
                    "Optional[str]",
                    "Callable",
                    "Optional[float]",
                    "Pattern",
                    "List[str]",
                    "dict",
                    "Hashable"
                ],
                "timeout": [
                    "Optional[str]",
                    "Callable",
                    "Optional[float]",
                    "Pattern",
                    "List[str]",
                    "dict",
                    "Hashable"
                ]
            }
        },
        "BaseLDAPConnection.__base_search": {
            "name": "__base_search",
            "location": 68,
            "return": [
                "str",
                "List[Union[int, Any]]",
                "List[Union[int, str]]",
                "\"SqlFile\""
            ],
            "arguments": {
                "self": [],
                "base": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "scope": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Optional[T]"
                ],
                "filter_exp": [
                    "str",
                    "Optional[str]",
                    "Union[bytes, str, SupportsInt]",
                    "int"
                ],
                "attrlist": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Mapping[Any, str]",
                    "Optional[T]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]"
                ],
                "sizelimit": [
                    "int",
                    "float"
                ],
                "attrsonly": [
                    "int",
                    "float"
                ],
                "sort_order": [
                    "Optional[int]",
                    "str",
                    "bytes",
                    "Optional[Tuple[str, int]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[\"GraphQLFieldResolver\"]"
                ],
                "page_size": [
                    "int",
                    "float"
                ],
                "offset": [
                    "int",
                    "float"
                ],
                "before_count": [
                    "int",
                    "float"
                ],
                "after_count": [
                    "int",
                    "float"
                ],
                "est_list_count": [
                    "int",
                    "float"
                ],
                "attrvalue": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseLDAPConnection.__create_sort_list": {
            "name": "__create_sort_list",
            "location": 114,
            "return": [
                "dict"
            ],
            "arguments": {
                "sort_list": [
                    "List[str]",
                    "list",
                    "bool",
                    "dict",
                    "bytes",
                    "Union[bytes, str]"
                ]
            }
        },
        "BaseLDAPConnection.search": {
            "name": "search",
            "location": 139,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "scope": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "filter_exp": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "attrlist": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "sizelimit": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "attrsonly": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "sort_order": [
                    "Optional[Tuple[str]]",
                    "str",
                    "List[str]",
                    "List[Tuple]",
                    "Callable",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BaseLDAPConnection.paged_search": {
            "name": "paged_search",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "scope": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "filter_exp": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "attrlist": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "timeout": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "sizelimit": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "attrsonly": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "sort_order": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "page_size": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ]
            }
        },
        "BaseLDAPConnection.virtual_list_search": {
            "name": "virtual_list_search",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "scope": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "filter_exp": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "attrlist": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "timeout": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "sizelimit": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "attrsonly": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "sort_order": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "offset": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ],
                "before_count": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "after_count": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "est_list_count": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "attrvalue": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]"
                ]
            }
        },
        "BaseLDAPConnection.whoami": {
            "name": "whoami",
            "location": 220,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BaseLDAPConnection._evaluate": {
            "name": "_evaluate",
            "location": 224,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "str"
                ],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "str"
                ]
            }
        },
        "LDAPConnection.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "LDAPClient",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "LDAPConnection._evaluate": {
            "name": "_evaluate",
            "location": 238,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LDAPConnection.add": {
            "name": "add",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "ldapentry.LDAPEntry",
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "timeout": [
                    "ldapentry.LDAPEntry",
                    "Optional[float]",
                    "float",
                    "int"
                ]
            }
        },
        "LDAPConnection.delete": {
            "name": "delete",
            "location": 259,
            "return": [
                "bool",
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dname": [
                    "str",
                    "Optional[int]"
                ],
                "timeout": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "recursive": [
                    "bool",
                    "str",
                    "Union[int, str]",
                    "Optional[float]"
                ]
            }
        },
        "LDAPConnection.open": {
            "name": "open",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "LDAPConnection.search": {
            "name": "search",
            "location": 299,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "scope": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "filter_exp": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "attrlist": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "timeout": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "sizelimit": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "attrsonly": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ],
                "sort_order": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LDAPConnection.paged_search": {
            "name": "paged_search",
            "location": 317,
            "return": [
                "bool",
                "int",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "scope": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "filter_exp": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "attrlist": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "timeout": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "sizelimit": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "attrsonly": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "sort_order": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "page_size": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[float]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LDAPConnection.virtual_list_search": {
            "name": "virtual_list_search",
            "location": 341,
            "return": [
                "str",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "scope": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "filter_exp": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "attrlist": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "sizelimit": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "attrsonly": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "sort_order": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "offset": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "before_count": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "after_count": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "est_list_count": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "attrvalue": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "LDAPConnection.modify_password": {
            "name": "modify_password",
            "location": 373,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[str]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[float]",
                    "int"
                ],
                "new_password": [
                    "Optional[str]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[float]",
                    "int"
                ],
                "old_password": [
                    "Optional[str]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[float]",
                    "int"
                ],
                "timeout": [
                    "Optional[str]",
                    "Optional[Union[str, ldapdn.LDAPDN]]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "LDAPConnection.whoami": {
            "name": "whoami",
            "location": 396,
            "return": [
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/ldapdn.py": {
        "LDAPDN.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strdn": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "LDAPDN.__str_rdn_to_tuple": {
            "name": "__str_rdn_to_tuple",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "str_rdn": [
                    "str"
                ]
            }
        },
        "LDAPDN.__sanitize": {
            "name": "__sanitize",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "strdn": [
                    "str",
                    "dict",
                    "float"
                ],
                "reverse": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LDAPDN.__getitem__": {
            "name": "__getitem__",
            "location": 66,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "LDAPDN.__setitem__": {
            "name": "__setitem__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Union[int, slice]",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "AnyStr",
                    "float"
                ]
            }
        },
        "LDAPDN.__eq__": {
            "name": "__eq__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "LDAPDN.__str__": {
            "name": "__str__",
            "location": 115,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPDN.__len__": {
            "name": "__len__",
            "location": 119,
            "return": [
                "IO[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPDN.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPDN.rdns": {
            "name": "rdns",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/ldapentry.py": {
        "LDAPEntry.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dn": [
                    "str",
                    "float",
                    "int"
                ],
                "conn": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Union[str, dict]"
                ]
            }
        },
        "LDAPEntry.delete": {
            "name": "delete",
            "location": 50,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "float",
                    "int"
                ],
                "recursive": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "float",
                    "int"
                ]
            }
        },
        "LDAPEntry.modify": {
            "name": "modify",
            "location": 68,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "LDAPEntry.rename": {
            "name": "rename",
            "location": 78,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "newdn": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[str]"
                ],
                "timeout": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "dict"
                ],
                "delete_old_rdn": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "dict"
                ]
            }
        },
        "LDAPEntry.update": {
            "name": "update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.clear": {
            "name": "clear",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.get": {
            "name": "get",
            "location": 127,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "LDAPEntry.pop": {
            "name": "pop",
            "location": 137,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.popitem": {
            "name": "popitem",
            "location": 163,
            "return": [
                "int",
                "Sequence[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.__eq__": {
            "name": "__eq__",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "LDAPEntry._status": {
            "name": "_status",
            "location": 191,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.extended_dn": {
            "name": "extended_dn",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.change_attribute": {
            "name": "change_attribute",
            "location": 209,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "IO",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "optype": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[int]",
                    "Dict[str, T]"
                ]
            }
        },
        "LDAPEntry.clear_attribute_changes": {
            "name": "clear_attribute_changes",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "LDAPEntry.items": {
            "name": "items",
            "location": 256,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "str",
                "Iterable[str]",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.keys": {
            "name": "keys",
            "location": 271,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, List[str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPEntry.values": {
            "name": "values",
            "location": 286,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "Iterable[str]",
                "str",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/ldapreference.py": {
        "LDAPReference.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]",
                    "int"
                ],
                "references": [
                    "str",
                    "set"
                ]
            }
        },
        "LDAPReference.client": {
            "name": "client",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "LDAPReference.references": {
            "name": "references",
            "location": 43,
            "return": [
                "List[str]",
                "Iterable[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/ldapurl.py": {
        "LDAPURL.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strurl": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LDAPURL.__delattr__": {
            "name": "__delattr__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "LDAPURL.__str2url": {
            "name": "__str2url",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strurl": [
                    "str",
                    "Tuple[Tuple[int, ...]]",
                    "Iterable[str]",
                    "List[Tuple[Any, str]]"
                ]
            }
        },
        "LDAPURL.is_valid_hostname": {
            "name": "is_valid_hostname",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "hostname": [
                    "str",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "List[str]",
                    "list",
                    "set"
                ]
            }
        },
        "LDAPURL.host": {
            "name": "host",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LDAPURL.port": {
            "name": "port",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "bool",
                    "T"
                ]
            }
        },
        "LDAPURL.scheme": {
            "name": "scheme",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "LDAPURL.basedn": {
            "name": "basedn",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Tuple[float]"
                ]
            }
        },
        "LDAPURL.attributes": {
            "name": "attributes",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPURL.scope": {
            "name": "scope",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[bool, str]",
                    "Union[str, int, float]"
                ]
            }
        },
        "LDAPURL.scope_num": {
            "name": "scope_num",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPURL.filter_exp": {
            "name": "filter_exp",
            "location": 202,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPURL.get_address": {
            "name": "get_address",
            "location": 206,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPURL.__eq__": {
            "name": "__eq__",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Union[tuple, list]"
                ]
            }
        },
        "LDAPURL.__str__": {
            "name": "__str__",
            "location": 242,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPURL.__repr__": {
            "name": "__repr__",
            "location": 269,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/ldapvaluelist.py": {
        "LDAPValueList.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Type[Exception]"
                ]
            }
        },
        "LDAPValueList.__balance": {
            "name": "__balance",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "lst1": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "lst2": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, bool]",
                    "List[str]",
                    "str"
                ],
                "value": [
                    "dict",
                    "Tuple[str]",
                    "Hashable",
                    "int"
                ]
            }
        },
        "LDAPValueList._append_unchecked": {
            "name": "_append_unchecked",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[str]",
                    "List[float]",
                    "List[List[Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "LDAPValueList._remove_unchecked": {
            "name": "_remove_unchecked",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "LDAPValueList._status_dict": {
            "name": "_status_dict",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPValueList.__contains__": {
            "name": "__contains__",
            "location": 58,
            "return": [
                "int",
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "LDAPValueList.__delitem__": {
            "name": "__delitem__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LDAPValueList.__mul__": {
            "name": "__mul__",
            "location": 70,
            "return": [
                "\"LDAPValueList\""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "LDAPValueList.__add__": {
            "name": "__add__",
            "location": 73,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List['Entity']",
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "LDAPValueList.__iadd__": {
            "name": "__iadd__",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, slice]"
                ]
            }
        },
        "LDAPValueList.__setitem__": {
            "name": "__setitem__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "LDAPValueList.append": {
            "name": "append",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "LDAPValueList.extend": {
            "name": "extend",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "list",
                    "Callable",
                    "Counter[str]"
                ]
            }
        },
        "LDAPValueList.insert": {
            "name": "insert",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "LDAPValueList.remove": {
            "name": "remove",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LDAPValueList.pop": {
            "name": "pop",
            "location": 162,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "LDAPValueList.clear": {
            "name": "clear",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPValueList.copy": {
            "name": "copy",
            "location": 179,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPValueList.added": {
            "name": "added",
            "location": 196,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPValueList.deleted": {
            "name": "deleted",
            "location": 201,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int",
                "Tuple[int, str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPValueList.status": {
            "name": "status",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bytes",
                    "List[str]",
                    "float",
                    "str",
                    "Optional[Union[int, float]]"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/ldif.py": {
        "LDIFReader.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str",
                    "IO",
                    "TextIO",
                    "AsyncGenerator",
                    "Coroutine",
                    "List[str]"
                ],
                "autoload": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ],
                "max_length": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "LDIFReader.__read_attributes": {
            "name": "__read_attributes",
            "location": 47,
            "return": [
                "typing.Iterator[typing.List[builtins.str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDIFReader.__convert": {
            "name": "__convert",
            "location": 78,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "val": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Tuple[int]"
                ]
            }
        },
        "LDIFReader.__find_key": {
            "name": "__find_key",
            "location": 89,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "searched_key": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "keylist": [
                    "List[str]",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "Sequence[T]"
                ]
            }
        },
        "LDIFReader.__load_file": {
            "name": "__load_file",
            "location": 96,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LDIFReader.load_resource": {
            "name": "load_resource",
            "location": 104,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LDIFReader.__iter__": {
            "name": "__iter__",
            "location": 111,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDIFReader.__next__": {
            "name": "__next__",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDIFReader.input_file": {
            "name": "input_file",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "io.TextIOBase",
                    "str"
                ]
            }
        },
        "LDIFReader.autoload": {
            "name": "autoload",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LDIFReader.resource_handlers": {
            "name": "resource_handlers",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDIFWriter.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_file": [
                    "str"
                ],
                "max_length": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LDIFWriter._get_attr_lines": {
            "name": "_get_attr_lines",
            "location": 227,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "attrname": [
                    "str"
                ],
                "attrvalue": [
                    "Iterable[Any]",
                    "int",
                    "str"
                ]
            }
        },
        "LDIFWriter.write_entry": {
            "name": "write_entry",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "bool",
                    "Dict[str, float]"
                ]
            }
        },
        "LDIFWriter.write_entries": {
            "name": "write_entries",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "bool",
                    "dict",
                    "Iterable[str]",
                    "float",
                    "str"
                ],
                "write_version": [
                    "bool",
                    "dict",
                    "Iterable[str]",
                    "float",
                    "str"
                ]
            }
        },
        "LDIFWriter.write_changes": {
            "name": "write_changes",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "LDIFWriter.output_file": {
            "name": "output_file",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "io.TextIOBase",
                    "str"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/pool.py": {
        "ConnectionPool.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ],
                "minconn": [
                    "str",
                    "float"
                ],
                "maxconn": [
                    "str",
                    "float"
                ]
            }
        },
        "ConnectionPool.open": {
            "name": "open",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.get": {
            "name": "get",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.put": {
            "name": "put",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ConnectionPool.close": {
            "name": "close",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.spawn": {
            "name": "spawn",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.empty": {
            "name": "empty",
            "location": 141,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.closed": {
            "name": "closed",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.shared_connection": {
            "name": "shared_connection",
            "location": 157,
            "return": [
                "float",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.idle_connection": {
            "name": "idle_connection",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.max_connection": {
            "name": "max_connection",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ThreadedConnectionPool.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "bool"
                ],
                "minconn": [
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "bool"
                ],
                "maxconn": [
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "bool"
                ],
                "block": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ThreadedConnectionPool.get": {
            "name": "get",
            "location": 210,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Type",
                    "int",
                    "Optional[Union[Any, str]]",
                    "float"
                ]
            }
        },
        "ThreadedConnectionPool.put": {
            "name": "put",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "List[str]"
                ]
            }
        },
        "ThreadedConnectionPool.close": {
            "name": "close",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedConnectionPool.open": {
            "name": "open",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/utils.py": {
        "escape_attribute_value": {
            "name": "escape_attribute_value",
            "location": 11,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "attrval": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "escape_filter_exp": {
            "name": "escape_filter_exp",
            "location": 32,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]",
                "dict"
            ],
            "arguments": {
                "filter_exp": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/__init__.py": {},
    "bonsai-master/src/bonsai/active_directory/acl.py": {
        "ACEFlag.short_name": {
            "name": "short_name",
            "location": 22,
            "return": [
                "Type[BaseException]",
                "BaseException",
                "Exception",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACEType.short_name": {
            "name": "short_name",
            "location": 61,
            "return": [
                "Type[BaseException]",
                "BaseException",
                "Exception",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACEType.is_object_type": {
            "name": "is_object_type",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ACERight.short_name": {
            "name": "short_name",
            "location": 127,
            "return": [
                "Type[BaseException]",
                "BaseException",
                "Exception",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ace_type": [
                    "bool",
                    "List[str]",
                    "str",
                    "set"
                ],
                "flags": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "mask": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "trustee_sid": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "object_type": [
                    "int",
                    "str"
                ],
                "inherited_object_type": [
                    "str",
                    "List[str]"
                ],
                "application_data": [
                    "str",
                    "dict",
                    "int",
                    "Optional[List[str]]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "ACE.from_binary": {
            "name": "from_binary",
            "location": 196,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "bytes",
                    "MutableMapping[str, Any]"
                ],
                "data": [
                    "bytes",
                    "list",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ACE.__str__": {
            "name": "__str__",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.to_binary": {
            "name": "to_binary",
            "location": 259,
            "return": [
                "str",
                "Optional[float]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.type": {
            "name": "type",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ACE.flags": {
            "name": "flags",
            "location": 294,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.size": {
            "name": "size",
            "location": 299,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.mask": {
            "name": "mask",
            "location": 313,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.rights": {
            "name": "rights",
            "location": 318,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.object_type": {
            "name": "object_type",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ACE.inherited_object_type": {
            "name": "inherited_object_type",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ACE.trustee_sid": {
            "name": "trustee_sid",
            "location": 333,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACE.application_data": {
            "name": "application_data",
            "location": 338,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACL.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "int",
                    "bool",
                    "float"
                ],
                "aces": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ACL.from_binary": {
            "name": "from_binary",
            "location": 358,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "data": [
                    "int",
                    "List['PlotInfo']",
                    "list"
                ]
            }
        },
        "ACL.to_binary": {
            "name": "to_binary",
            "location": 385,
            "return": [
                "str",
                "Optional[float]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACL.revision": {
            "name": "revision",
            "location": 400,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACL.size": {
            "name": "size",
            "location": 405,
            "return": [
                "int",
                "Sequence[Any]",
                "Dict[int, int]",
                "List[Tuple[int, str, str]]",
                "Optional[dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACL.aces": {
            "name": "aces",
            "location": 410,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/active_directory/sid.py": {
        "SID.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str_rep": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "bytes_le": [
                    "Optional[int]",
                    "Optional[Union[int, str]]",
                    "int",
                    "tuple",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "SID.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsInt",
                    "int",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "SID.__hash__": {
            "name": "__hash__",
            "location": 92,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.revision": {
            "name": "revision",
            "location": 96,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.identifier_authority": {
            "name": "identifier_authority",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.subauthorities": {
            "name": "subauthorities",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.bytes_le": {
            "name": "bytes_le",
            "location": 117,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.sddl_alias": {
            "name": "sddl_alias",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SID.size": {
            "name": "size",
            "location": 208,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/active_directory/__init__.py": {
        "SecurityDescriptor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control": [
                    "str",
                    "Sequence"
                ],
                "owner_sid": [
                    "str",
                    "Sequence"
                ],
                "group_sid": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "sacl": [
                    "str",
                    "Sequence"
                ],
                "dacl": [
                    "str",
                    "Sequence"
                ],
                "revision": [
                    "str",
                    "Sequence"
                ],
                "sbz1": [
                    "str",
                    "Sequence"
                ]
            }
        },
        "SecurityDescriptor.__convert_ctrl": {
            "name": "__convert_ctrl",
            "location": 58,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "ctrl": [
                    "Dict[str, str]",
                    "dict",
                    "Mapping",
                    "str",
                    "Dict[int, int]"
                ],
                "to_int": [
                    "List[str]",
                    "float",
                    "str"
                ]
            }
        },
        "SecurityDescriptor.from_binary": {
            "name": "from_binary",
            "location": 83,
            "return": [
                "Dict[str, bool]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "Sequence[Sequence[Any]]",
                    "Callable",
                    "List[str]",
                    "Tuple[str]"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "Union[int, bytes]",
                    "int"
                ]
            }
        },
        "SecurityDescriptor.to_binary": {
            "name": "to_binary",
            "location": 119,
            "return": [
                "str",
                "Optional[float]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.sbz1": {
            "name": "sbz1",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.revision": {
            "name": "revision",
            "location": 172,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.control": {
            "name": "control",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.owner_sid": {
            "name": "owner_sid",
            "location": 182,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.group_sid": {
            "name": "group_sid",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.sacl": {
            "name": "sacl",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDescriptor.dacl": {
            "name": "dacl",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAccountControl.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "bool",
                    "Dict[int, int]",
                    "dict",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "UserAccountControl.properties": {
            "name": "properties",
            "location": 242,
            "return": [
                "Dict[str, Any]",
                "set",
                "dict",
                "Mapping[str, str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAccountControl.value": {
            "name": "value",
            "location": 247,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, Set[str]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/asyncio/aioconnection.py": {
        "AIOLDAPConnection.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "Dict[str, Any]"
                ],
                "loop": [
                    "aioquic.asyncio.QuicConnectionProtocol",
                    "asyncio.Task",
                    "Optional[float]",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "AIOLDAPConnection.__await__": {
            "name": "__await__",
            "location": 31,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AIOLDAPConnection._ready": {
            "name": "_ready",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "str"
                ],
                "fut": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "AIOLDAPConnection._evaluate": {
            "name": "_evaluate",
            "location": 61,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "AIOLDAPConnection.open": {
            "name": "open",
            "location": 64,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bytes"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/asyncio/aiopool.py": {
        "AIOPoolContextManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AIOConnectionPool.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "bool"
                ],
                "minconn": [
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "bool"
                ],
                "maxconn": [
                    "int",
                    "LDAPClient",
                    "Dict[str, Any]",
                    "bool"
                ],
                "loop": [
                    "int"
                ]
            }
        },
        "AIOConnectionPool.spawn": {
            "name": "spawn",
            "location": 100,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/src/bonsai/asyncio/__init__.py": {},
    "bonsai-master/src/bonsai/gevent/geventconnection.py": {
        "GeventLDAPConnection.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "LDAPClient",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "GeventLDAPConnection._poll": {
            "name": "_poll",
            "location": 24,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "Optional[Union[float, int]]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "GeventLDAPConnection._evaluate": {
            "name": "_evaluate",
            "location": 31,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "GeventLDAPConnection.delete": {
            "name": "delete",
            "location": 34,
            "return": [
                "bool",
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dname": [
                    "str",
                    "Optional[int]"
                ],
                "timeout": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "recursive": [
                    "bool",
                    "str",
                    "Union[int, str]",
                    "Optional[float]"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/gevent/__init__.py": {},
    "bonsai-master/src/bonsai/tornado/tornadoconnection.py": {
        "TornadoLDAPConnection.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "Dict[str, Any]"
                ],
                "ioloop": [
                    "str",
                    "float"
                ]
            }
        },
        "TornadoLDAPConnection._io_callback": {
            "name": "_io_callback",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "msg_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "fd": [
                    "str",
                    "int"
                ],
                "events": [
                    "str",
                    "int"
                ]
            }
        },
        "TornadoLDAPConnection._timeout_callback": {
            "name": "_timeout_callback",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "BaseException",
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "TornadoLDAPConnection._evaluate": {
            "name": "_evaluate",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "str"
                ],
                "timeout": [
                    "Optional[int]",
                    "Optional[bool]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "TornadoLDAPConnection.delete": {
            "name": "delete",
            "location": 69,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dname": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "dict"
                ],
                "timeout": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[IO[bytes]]",
                    "Optional[Any]"
                ],
                "recursive": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TornadoLDAPConnection._search_iter_anext": {
            "name": "_search_iter_anext",
            "location": 86,
            "return": [
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "search_iter": [
                    "Iterable",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TornadoLDAPConnection.get_result": {
            "name": "get_result",
            "location": 97,
            "return": [
                "str",
                "bytes",
                "Tuple[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "Optional[float]",
                    "str",
                    "bool",
                    "dict"
                ],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/tornado/__init__.py": {},
    "bonsai-master/src/bonsai/trio/trioconnection.py": {
        "TrioLDAPConnection.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TrioLDAPConnection.__await__": {
            "name": "__await__",
            "location": 30,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrioLDAPConnection.open": {
            "name": "open",
            "location": 33,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bytes"
                ]
            }
        },
        "TrioLDAPConnection._evaluate": {
            "name": "_evaluate",
            "location": 48,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "bonsai-master/src/bonsai/trio/__init__.py": {},
    "bonsai-master/tests/conftest.py": {
        "get_config": {
            "name": "get_config",
            "location": 11,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "network_delay": {
            "name": "network_delay",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "delay": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 34,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "basedn": {
            "name": "basedn",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "cfg": {
            "name": "cfg",
            "location": 58,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_ad_acl.py": {
        "test_ace_from_binary": {
            "name": "test_ace_from_binary",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ace_to_binary": {
            "name": "test_ace_to_binary",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_acl_from_binary": {
            "name": "test_acl_from_binary",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_acl_to_binary": {
            "name": "test_acl_to_binary",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_ad_securitydescriptor.py": {
        "client": {
            "name": "client",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_from_binary": {
            "name": "test_from_binary",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_binary": {
            "name": "test_to_binary",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "test_sd_flags": {
            "name": "test_sd_flags",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "tuple"
                ],
                "sd_flags": [
                    "float",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "owner_sid": [
                    "Optional[\"Page\"]",
                    "Optional[int]",
                    "int"
                ],
                "group_sid": [
                    "int"
                ],
                "dacl": [
                    "int"
                ],
                "sacl": [
                    "int"
                ]
            }
        }
    },
    "bonsai-master/tests/test_ad_sid.py": {
        "test_create_from_bytes_le": {
            "name": "test_create_from_bytes_le",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_from_str_rep": {
            "name": "test_create_from_str_rep",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bytes_le": {
            "name": "test_bytes_le",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hash": {
            "name": "test_hash",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sddl_alias": {
            "name": "test_sddl_alias",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "sid": [
                    "str",
                    "float"
                ],
                "alias": [
                    "str",
                    "float"
                ]
            }
        },
        "test_size": {
            "name": "test_size",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "sid": [
                    "float",
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        }
    },
    "bonsai-master/tests/test_ad_useraccountcontrol.py": {
        "test_init": {
            "name": "test_init",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_value": {
            "name": "test_value",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_properties": {
            "name": "test_properties",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_asyncio.py": {
        "asyncio_test": {
            "name": "asyncio_test",
            "location": 19,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "func": [
                    "List[List[Any]]",
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "asyncio_test.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_gevent.py": {
        "gclient": {
            "name": "gclient",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "turn_async_conn": {
            "name": "turn_async_conn",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_connection": {
            "name": "test_connection",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": []
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": [
                    "Callable"
                ]
            }
        },
        "test_add_and_delete": {
            "name": "test_add_and_delete",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": [],
                "basedn": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_recursive_delete": {
            "name": "test_recursive_delete",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": [
                    "Callable"
                ],
                "basedn": []
            }
        },
        "test_modify_and_rename": {
            "name": "test_modify_and_rename",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": [],
                "basedn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_obj_err": {
            "name": "test_obj_err",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": [],
                "basedn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_whoami": {
            "name": "test_whoami",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": []
            }
        },
        "test_connection_timeout": {
            "name": "test_connection_timeout",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "gclient": [
                    "Callable"
                ],
                "turn_async_conn": []
            }
        }
    },
    "bonsai-master/tests/test_ldapclient.py": {
        "url": {
            "name": "url",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ldaps_url": {
            "name": "ldaps_url",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_ldapurl": {
            "name": "test_ldapurl",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "Union[str, TextIO]",
                    "bytes"
                ]
            }
        },
        "test_connect": {
            "name": "test_connect",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Optional[Iterable[Any]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_rootdse": {
            "name": "test_rootdse",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_raw_attributes": {
            "name": "test_raw_attributes",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_set_credentials": {
            "name": "test_set_credentials",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "url": []
            }
        },
        "test_vendor_info": {
            "name": "test_vendor_info",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tls_impl_name": {
            "name": "test_tls_impl_name",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_debug": {
            "name": "test_debug",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_connection_timeout": {
            "name": "test_connection_timeout",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_ppolicy": {
            "name": "test_ppolicy",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "test_extended_dn": {
            "name": "test_extended_dn",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "test_readonly_attributes": {
            "name": "test_readonly_attributes",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_auto_acquire_prop": {
            "name": "test_auto_acquire_prop",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_server_chase_referrals": {
            "name": "test_server_chase_referrals",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_ignore_referrals": {
            "name": "test_ignore_referrals",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_managedsait": {
            "name": "test_managedsait",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_ldap_over_tls": {
            "name": "test_ldap_over_tls",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "ldaps_url": [
                    "str"
                ]
            }
        },
        "test_starttls": {
            "name": "test_starttls",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "test_tls_timeout": {
            "name": "test_tls_timeout",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "test_ldapi": {
            "name": "test_ldapi",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_sasl_sec_properties": {
            "name": "test_set_sasl_sec_properties",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "url": []
            }
        }
    },
    "bonsai-master/tests/test_ldapconnection.py": {
        "ipaddr": {
            "name": "ipaddr",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ktpath": {
            "name": "ktpath",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "binding": {
            "name": "binding",
            "location": 45,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "kinit": {
            "name": "kinit",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "large_org": {
            "name": "large_org",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "external_binding": {
            "name": "external_binding",
            "location": 148,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "_generate_client": {
            "name": "_generate_client",
            "location": 170,
            "return": [],
            "arguments": {
                "cfg": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "conn": {
            "name": "conn",
            "location": 182,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "anonym_conn": {
            "name": "anonym_conn",
            "location": 190,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "async_conn": {
            "name": "async_conn",
            "location": 199,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, List[str]]",
                "Sequence[Sequence[T]]"
            ],
            "arguments": {}
        },
        "test_bind_digest": {
            "name": "test_bind_digest",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "binding": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bind_digest_with_authzid": {
            "name": "test_bind_digest_with_authzid",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "binding": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bind_ntlm": {
            "name": "test_bind_ntlm",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "binding": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bind_not_supported_auth": {
            "name": "test_bind_not_supported_auth",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "binding": [
                    "int"
                ]
            }
        },
        "test_bind_gssapi_kinit": {
            "name": "test_bind_gssapi_kinit",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "kinit": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bind_gssapi_with_authzid_kinit": {
            "name": "test_bind_gssapi_with_authzid_kinit",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "kinit": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bind_gssapi": {
            "name": "test_bind_gssapi",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "binding": [
                    "Optional[str]"
                ],
                "cfg": [
                    "Optional[str]"
                ]
            }
        },
        "test_bind_gssapi_error": {
            "name": "test_bind_gssapi_error",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "str"
                ]
            }
        },
        "test_bind_gssapi_keytab_error": {
            "name": "test_bind_gssapi_keytab_error",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "ktpath": []
            }
        },
        "test_bind_gssapi_keytab": {
            "name": "test_bind_gssapi_keytab",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "ktpath": [
                    "str"
                ]
            }
        },
        "test_bind_winlogon": {
            "name": "test_bind_winlogon",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": []
            }
        },
        "test_bind_spnego": {
            "name": "test_bind_spnego",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "binding": [
                    "Optional[str]"
                ],
                "cfg": [
                    "Optional[str]"
                ]
            }
        },
        "test_bind_external": {
            "name": "test_bind_external",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "external_binding": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bind_external_with_authzid": {
            "name": "test_bind_external_with_authzid",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "external_binding": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str"
                ],
                "basedn": [
                    "str"
                ]
            }
        },
        "test_search_ldapdn": {
            "name": "test_search_ldapdn",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "List[Dict[str, Any]]"
                ],
                "basedn": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_search_attr": {
            "name": "test_search_attr",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "List[Dict[str, Any]]"
                ],
                "basedn": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_search_attrsonly": {
            "name": "test_search_attrsonly",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "Optional[Dict[str, Any]]"
                ],
                "basedn": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_add_and_delete": {
            "name": "test_add_and_delete",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[int]",
                    "Dict[str, Any]"
                ],
                "basedn": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_recursive_delete": {
            "name": "test_recursive_delete",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [],
                "basedn": []
            }
        },
        "test_whoami": {
            "name": "test_whoami",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "float"
                ],
                "cfg": [
                    "str",
                    "float"
                ]
            }
        },
        "test_connection_error": {
            "name": "test_connection_error",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_auth_error": {
            "name": "test_simple_auth_error",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_digest_auth_error": {
            "name": "test_digest_auth_error",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": []
            }
        },
        "test_sort_order": {
            "name": "test_sort_order",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "basedn": [
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_fileno": {
            "name": "test_fileno",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "List[Tuple[int, int, float]]",
                    "bool"
                ],
                "cfg": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "conn": []
            }
        },
        "test_abandon": {
            "name": "test_abandon",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "async_conn": [],
                "basedn": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_async_close_remove_pendig_ops": {
            "name": "test_async_close_remove_pendig_ops",
            "location": 526,
            "return": [
                ""
            ],
            "arguments": {
                "async_conn": [],
                "basedn": [
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_vlv_offset": {
            "name": "test_vlv_offset",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "bool"
                ],
                "basedn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_vlv_attrvalue": {
            "name": "test_vlv_attrvalue",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "bool"
                ],
                "basedn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_vlv_without_sort_order": {
            "name": "test_vlv_without_sort_order",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "int",
                    "Iterable[Any]"
                ],
                "basedn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_paged_search": {
            "name": "test_paged_search",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str"
                ],
                "basedn": []
            }
        },
        "test_paged_search_with_auto_acq": {
            "name": "test_paged_search_with_auto_acq",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [],
                "basedn": []
            }
        },
        "test_search_timeout": {
            "name": "test_search_timeout",
            "location": 624,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "basedn": []
            }
        },
        "test_whoami_timeout": {
            "name": "test_whoami_timeout",
            "location": 637,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str"
                ]
            }
        },
        "test_wrong_conn_param": {
            "name": "test_wrong_conn_param",
            "location": 650,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrong_search_param": {
            "name": "test_wrong_search_param",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "ipaddr": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_wrong_add_param": {
            "name": "test_wrong_add_param",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [],
                "ipaddr": []
            }
        },
        "test_wrong_delete_param": {
            "name": "test_wrong_delete_param",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [],
                "ipaddr": []
            }
        },
        "test_password_lockout": {
            "name": "test_password_lockout",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str"
                ],
                "ipaddr": []
            }
        },
        "test_password_expire": {
            "name": "test_password_expire",
            "location": 714,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str"
                ],
                "ipaddr": []
            }
        },
        "test_password_modify_extop": {
            "name": "test_password_modify_extop",
            "location": 751,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str"
                ],
                "ipaddr": []
            }
        },
        "test_search_with_managedsait_ctrl": {
            "name": "test_search_with_managedsait_ctrl",
            "location": 791,
            "return": [
                ""
            ],
            "arguments": {
                "ipaddr": []
            }
        },
        "test_add_and_delete_referrals": {
            "name": "test_add_and_delete_referrals",
            "location": 809,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "float"
                ],
                "ipaddr": []
            }
        },
        "test_client_sizelimit_error": {
            "name": "test_client_sizelimit_error",
            "location": 838,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "basedn": [
                    "str"
                ]
            }
        },
        "test_server_sizelimit_error": {
            "name": "test_server_sizelimit_error",
            "location": 846,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "anonym_conn": [],
                "basedn": [
                    "str",
                    "int"
                ],
                "large_org": [
                    "str",
                    "int"
                ]
            }
        },
        "test_paged_search_large_result": {
            "name": "test_paged_search_large_result",
            "location": 880,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [],
                "anonym_conn": [
                    "bool",
                    "float",
                    "str"
                ],
                "basedn": [],
                "large_org": []
            }
        },
        "SimpleAsyncConn.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "LDAPClient",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "SimpleAsyncConn._evaluate": {
            "name": "_evaluate",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "str"
                ],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "str"
                ]
            }
        },
        "binding._create_binding": {
            "name": "_create_binding",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "auth": [
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "mech": [
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "authzid": [
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "realm": [
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "kinit._create_kinit": {
            "name": "_create_kinit",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "authzid": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "large_org._create_org": {
            "name": "_create_org",
            "location": 109,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "org_dn": [
                    "bool",
                    "str",
                    "List[int]",
                    "list"
                ],
                "entry_num": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "external_binding._create_external": {
            "name": "_create_external",
            "location": 151,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "authzid": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bonsai-master/tests/test_ldapdn.py": {
        "dnobj": {
            "name": "dnobj",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_rdn": {
            "name": "test_rdn",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "dnobj": [
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "dnobj": [
                    "str"
                ]
            }
        },
        "test_emptydn": {
            "name": "test_emptydn",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_equal": {
            "name": "test_equal",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "dnobj": [
                    "str"
                ]
            }
        },
        "test_invaliddn": {
            "name": "test_invaliddn",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_special_char": {
            "name": "test_special_char",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_setitem": {
            "name": "test_setitem",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "dnobj": [
                    "str",
                    "float"
                ]
            }
        },
        "test_space_after_comma": {
            "name": "test_space_after_comma",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_ldapentry.py": {
        "test_entry": {
            "name": "test_entry",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_ad_user": {
            "name": "test_ad_user",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_set_get": {
            "name": "test_set_get",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_append_extend": {
            "name": "test_append_extend",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_popitem": {
            "name": "test_popitem",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_popitem_empty": {
            "name": "test_popitem_empty",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_clear": {
            "name": "test_clear",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_items": {
            "name": "test_items",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_keys": {
            "name": "test_keys",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_values": {
            "name": "test_values",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_equal": {
            "name": "test_equal",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_special_char": {
            "name": "test_special_char",
            "location": 221,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": []
            }
        },
        "test_dn_with_space": {
            "name": "test_dn_with_space",
            "location": 233,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": []
            }
        },
        "test_unicode": {
            "name": "test_unicode",
            "location": 246,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": []
            }
        },
        "test_binary": {
            "name": "test_binary",
            "location": 259,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": []
            }
        },
        "test_connection": {
            "name": "test_connection",
            "location": 277,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": []
            }
        },
        "test_rename": {
            "name": "test_rename",
            "location": 291,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": [],
                "test_entry": []
            }
        },
        "test_rename_with_old_rdn": {
            "name": "test_rename_with_old_rdn",
            "location": 306,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": [],
                "test_entry": []
            }
        },
        "test_rename_error": {
            "name": "test_rename_error",
            "location": 320,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": [],
                "test_entry": []
            }
        },
        "test_sync_operations": {
            "name": "test_sync_operations",
            "location": 341,
            "return": [],
            "arguments": {
                "client": [],
                "basedn": []
            }
        },
        "test_dn_attr": {
            "name": "test_dn_attr",
            "location": 380,
            "return": [],
            "arguments": {
                "basedn": []
            }
        },
        "test_wrong_params": {
            "name": "test_wrong_params",
            "location": 391,
            "return": [],
            "arguments": {}
        },
        "test_password_modify": {
            "name": "test_password_modify",
            "location": 402,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_extended_dn_attr": {
            "name": "test_extended_dn_attr",
            "location": 434,
            "return": [],
            "arguments": {}
        },
        "test_change_attribute": {
            "name": "test_change_attribute",
            "location": 441,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_change_attribute_error": {
            "name": "test_change_attribute_error",
            "location": 478,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_clear_attribute_changes": {
            "name": "test_clear_attribute_changes",
            "location": 494,
            "return": [],
            "arguments": {}
        },
        "test_modify_referrals": {
            "name": "test_modify_referrals",
            "location": 511,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_create_ad_user": {
            "name": "test_create_ad_user",
            "location": 533,
            "return": [],
            "arguments": {
                "cfg": [],
                "basedn": [],
                "test_ad_user": []
            }
        },
        "test_entry._create_entry": {
            "name": "_create_entry",
            "location": 21,
            "return": [],
            "arguments": {
                "conn": [],
                "dname": []
            }
        },
        "test_ad_user._create_entry": {
            "name": "_create_entry",
            "location": 54,
            "return": [],
            "arguments": {
                "conn": [],
                "dname": [],
                "password": []
            }
        }
    },
    "bonsai-master/tests/test_ldapreference.py": {
        "host_url": {
            "name": "host_url",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_init_errors": {
            "name": "test_init_errors",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "host_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_client_prop": {
            "name": "test_client_prop",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "host_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_references_prop": {
            "name": "test_references_prop",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "host_url": [
                    "str"
                ]
            }
        },
        "test_referral_chasing": {
            "name": "test_referral_chasing",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "host_url": [
                    "str"
                ]
            }
        },
        "test_ignore_referrals": {
            "name": "test_ignore_referrals",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "host_url": [
                    "str"
                ]
            }
        }
    },
    "bonsai-master/tests/test_ldapurl.py": {
        "valid_ldapurl": {
            "name": "valid_ldapurl",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_get_address": {
            "name": "test_get_address",
            "location": 15,
            "return": [],
            "arguments": {
                "valid_ldapurl": []
            }
        },
        "test_get_host_properties": {
            "name": "test_get_host_properties",
            "location": 22,
            "return": [],
            "arguments": {
                "valid_ldapurl": []
            }
        },
        "test_set_host_properties": {
            "name": "test_set_host_properties",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_get_bind_properties": {
            "name": "test_get_bind_properties",
            "location": 50,
            "return": [],
            "arguments": {
                "valid_ldapurl": []
            }
        },
        "test_set_bind_properties": {
            "name": "test_set_bind_properties",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 68,
            "return": [],
            "arguments": {
                "valid_ldapurl": []
            }
        },
        "test_conversion": {
            "name": "test_conversion",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_del_attr": {
            "name": "test_del_attr",
            "location": 87,
            "return": [],
            "arguments": {
                "valid_ldapurl": []
            }
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_scope": {
            "name": "test_scope",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_ipv6": {
            "name": "test_ipv6",
            "location": 118,
            "return": [],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_ldapvaluelist.py": {
        "test_append": {
            "name": "test_append",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_insert": {
            "name": "test_insert",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove": {
            "name": "test_remove",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set": {
            "name": "test_set",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extend": {
            "name": "test_extend",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mul": {
            "name": "test_mul",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_status": {
            "name": "test_set_status",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clear": {
            "name": "test_clear",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_readonly_attrs": {
            "name": "test_readonly_attrs",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_ldifreader.py": {
        "test_init_params": {
            "name": "test_init_params",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_dn": {
            "name": "test_missing_dn",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_file": {
            "name": "test_invalid_file",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_comment": {
            "name": "test_comment",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_file": {
            "name": "test_input_file",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_autoload": {
            "name": "test_autoload",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resource_handlers": {
            "name": "test_resource_handlers",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiline_attribute": {
            "name": "test_multiline_attribute",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_entries": {
            "name": "test_multiple_entries",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_encoded_attributes": {
            "name": "test_encoded_attributes",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_resource": {
            "name": "test_load_resource",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_url_attribute": {
            "name": "test_url_attribute",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_changetype": {
            "name": "test_changetype",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_attribute": {
            "name": "test_missing_attribute",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modify_change": {
            "name": "test_modify_change",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_ldifwriter.py": {
        "test_init_params": {
            "name": "test_init_params",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_write_entry": {
            "name": "test_write_entry",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_write_entries": {
            "name": "test_write_entries",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_write_changes": {
            "name": "test_write_changes",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_output_file": {
            "name": "test_output_file",
            "location": 119,
            "return": [],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_pool.py": {
        "test_init": {
            "name": "test_init",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_open": {
            "name": "test_open",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_put": {
            "name": "test_put",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_max_connection": {
            "name": "test_max_connection",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_spawn": {
            "name": "test_spawn",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "keep": {
            "name": "keep",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "pool": [
                    "int",
                    "Callable",
                    "str"
                ],
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_threaded_pool_block": {
            "name": "test_threaded_pool_block",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_threaded_pool_raise": {
            "name": "test_threaded_pool_raise",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        },
        "test_threaded_pool_close": {
            "name": "test_threaded_pool_close",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        }
    },
    "bonsai-master/tests/test_tornado.py": {
        "dummy": {
            "name": "dummy",
            "location": 12,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "dummy.dummy_f": {
            "name": "dummy_f",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[[], Any]",
                    "Type"
                ]
            }
        },
        "TornadoLDAPConnectionTest.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_connection": {
            "name": "test_connection",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_search": {
            "name": "test_search",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_add_and_delete": {
            "name": "test_add_and_delete",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_recursive_delete": {
            "name": "test_recursive_delete",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_modify_and_rename": {
            "name": "test_modify_and_rename",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_obj_err": {
            "name": "test_obj_err",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_whoami": {
            "name": "test_whoami",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_connection_timeout": {
            "name": "test_connection_timeout",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_search_timeout": {
            "name": "test_search_timeout",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_paged_search": {
            "name": "test_paged_search",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoLDAPConnectionTest.test_paged_search_with_auto_acq": {
            "name": "test_paged_search_with_auto_acq",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bonsai-master/tests/test_trio.py": {
        "trio_test": {
            "name": "trio_test",
            "location": 18,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "func": [
                    "List[List[Any]]",
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "tclient": {
            "name": "tclient",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "trio_test.wrapper": {
            "name": "wrapper",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bonsai-master/tests/test_utils.py": {
        "test_escape_attribute_value": {
            "name": "test_escape_attribute_value",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_escape_filter_exp": {
            "name": "test_escape_filter_exp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_async_connect": {
            "name": "test_set_async_connect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    }
}
{
    "bowtie-master/bowtie/auth.py": {
        "Auth.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "flaskapp.App"
                ]
            }
        },
        "Auth.before_request": {
            "name": "before_request",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Auth.socketio_auth": {
            "name": "socketio_auth",
            "location": 41,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuth.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "credentials": [
                    "flask.Flask",
                    "App",
                    "str"
                ]
            }
        },
        "BasicAuth._check_auth": {
            "name": "_check_auth",
            "location": 71,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "BasicAuth.socketio_auth": {
            "name": "socketio_auth",
            "location": 78,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuth.before_request": {
            "name": "before_request",
            "location": 85,
            "return": [
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bowtie-master/bowtie/control.py": {
        "_Controller._instantiate": {
            "name": "_instantiate",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool"
                ]
            }
        },
        "Button.on_click": {
            "name": "on_click",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multiple": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Upload.on_upload": {
            "name": "on_upload",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Dropdown.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]",
                    "dict",
                    "Optional[float]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "values": [
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]",
                    "dict",
                    "Optional[float]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "multi": [
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bool",
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "default": [
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bool",
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "Dropdown.on_change": {
            "name": "on_change",
            "location": 139,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dropdown.do_options": {
            "name": "do_options",
            "location": 148,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, bool]",
                "Dict[str, Dict]",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "Iterable[Hashable]"
                ],
                "values": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "Iterable[Hashable]"
                ]
            }
        },
        "Dropdown.do_choose": {
            "name": "do_choose",
            "location": 166,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "Dropdown.get": {
            "name": "get",
            "location": 181,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Switch.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Switch.on_switch": {
            "name": "on_switch",
            "location": 208,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.get": {
            "name": "get",
            "location": 222,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "_DatePickers.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_type": [
                    "bool",
                    "List[int]",
                    "int"
                ],
                "month_type": [
                    "bool",
                    "List[int]",
                    "int"
                ],
                "range_type": [
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "DatePicker.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatePicker.on_change": {
            "name": "on_change",
            "location": 265,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatePicker.get": {
            "name": "get",
            "location": 279,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "MonthPicker.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthPicker.on_change": {
            "name": "on_change",
            "location": 302,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthPicker.get": {
            "name": "get",
            "location": 316,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "RangePicker.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePicker.on_change": {
            "name": "on_change",
            "location": 339,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePicker.get": {
            "name": "get",
            "location": 353,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[float]",
                    "int",
                    "T"
                ],
                "minimum": [
                    "Optional[float]",
                    "int",
                    "T"
                ],
                "maximum": [
                    "Optional[float]",
                    "int",
                    "T"
                ],
                "step": [
                    "Optional[float]",
                    "int",
                    "T"
                ],
                "size": [
                    "Optional[float]",
                    "int",
                    "T"
                ]
            }
        },
        "Number.on_change": {
            "name": "on_change",
            "location": 407,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.get": {
            "name": "get",
            "location": 421,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Textbox.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "placeholder": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ],
                "size": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ],
                "area": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ],
                "autosize": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ],
                "disabled": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "Textbox.do_text": {
            "name": "do_text",
            "location": 478,
            "return": [
                "str",
                "Component",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "Textbox.on_enter": {
            "name": "on_enter",
            "location": 489,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Textbox.on_change": {
            "name": "on_change",
            "location": 502,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Textbox.get": {
            "name": "get",
            "location": 516,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Slider.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Sequence[int]"
                ],
                "ranged": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "float"
                ],
                "minimum": [
                    "int",
                    "bool",
                    "float"
                ],
                "maximum": [
                    "float",
                    "int",
                    "bool"
                ],
                "step": [
                    "int",
                    "float"
                ],
                "vertical": [
                    "int",
                    "float"
                ]
            }
        },
        "Slider.do_max": {
            "name": "do_max",
            "location": 592,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "Slider.do_min": {
            "name": "do_min",
            "location": 603,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "Slider.do_value": {
            "name": "do_value",
            "location": 614,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int]",
                    "float",
                    "T",
                    "str",
                    "bool",
                    "Sequence[Union[int, str]]"
                ]
            }
        },
        "Slider.do_inc": {
            "name": "do_inc",
            "location": 625,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "Slider.do_min_max_value": {
            "name": "do_min_max_value",
            "location": 636,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "bool",
                    "str",
                    "Union[str, bytes]"
                ],
                "maximum": [
                    "bool",
                    "str",
                    "Union[str, bytes]"
                ],
                "value": [
                    "bool",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "Slider.on_change": {
            "name": "on_change",
            "location": 651,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slider.on_after_change": {
            "name": "on_after_change",
            "location": 664,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slider.get": {
            "name": "get",
            "location": 677,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Nouislider.__init__": {
            "name": "__init__",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "minimum": [
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "maximum": [
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "tooltips": [
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "Nouislider.on_update": {
            "name": "on_update",
            "location": 735,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nouislider.on_slide": {
            "name": "on_slide",
            "location": 750,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nouislider.on_set": {
            "name": "on_set",
            "location": 765,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nouislider.on_change": {
            "name": "on_change",
            "location": 780,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nouislider.on_start": {
            "name": "on_start",
            "location": 795,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nouislider.on_end": {
            "name": "on_end",
            "location": 810,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nouislider.get": {
            "name": "get",
            "location": 826,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Checkbox.__init__": {
            "name": "__init__",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "dict",
                    "Optional[dict]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Dict[str, Exception]"
                ],
                "values": [
                    "dict",
                    "Optional[dict]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Dict[str, Exception]"
                ],
                "defaults": [
                    "bool",
                    "Optional[int]",
                    "Optional[Union[float, str]]",
                    "Tuple[Optional[str], Any]"
                ]
            }
        },
        "Checkbox.do_values": {
            "name": "do_values",
            "location": 876,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkbox.do_options": {
            "name": "do_options",
            "location": 887,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "dict",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "values": [
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Checkbox.do_check": {
            "name": "do_check",
            "location": 905,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "Checkbox.on_change": {
            "name": "on_change",
            "location": 916,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkbox.get": {
            "name": "get",
            "location": 929,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Radio.__init__": {
            "name": "__init__",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "dict",
                    "Optional[dict]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Dict[str, Exception]"
                ],
                "values": [
                    "dict",
                    "Optional[dict]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Dict[str, Exception]"
                ],
                "default": [
                    "Dict[str, Set[str]]",
                    "Iterable[str]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Radio.do_select": {
            "name": "do_select",
            "location": 977,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "Radio.do_options": {
            "name": "do_options",
            "location": 988,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "dict",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "values": [
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Radio.on_change": {
            "name": "on_change",
            "location": 1005,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Radio.get": {
            "name": "get",
            "location": 1018,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        }
    },
    "bowtie-master/bowtie/exceptions.py": {},
    "bowtie-master/bowtie/html.py": {
        "_HTML._instantiate": {
            "name": "_instantiate",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Markdown.do_text": {
            "name": "do_text",
            "location": 44,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Markdown.get": {
            "name": "get",
            "location": 59,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Div.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "Tuple[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Div.do_text": {
            "name": "do_text",
            "location": 118,
            "return": [
                "str",
                "Component",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "Div.get": {
            "name": "get",
            "location": 133,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "Header.do_text": {
            "name": "do_text",
            "location": 173,
            "return": [
                "str",
                "Component",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "Header.get": {
            "name": "get",
            "location": 188,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "bowtie-master/bowtie/pager.py": {
        "Pager._next_uuid": {
            "name": "_next_uuid",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Collection[str]",
                    "T",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        },
        "Pager.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pager.notify": {
            "name": "notify",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bowtie-master/bowtie/visual.py": {
        "_Visual.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Visual._instantiate": {
            "name": "_instantiate",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "columns": [
                    "int",
                    "List[str]",
                    "float",
                    "str"
                ],
                "results_per_page": [
                    "int",
                    "Dict[str, int]",
                    "list",
                    "bytes",
                    "Tuple[Set[Any], Dict[int, int]]"
                ]
            }
        },
        "Table._make_columns": {
            "name": "_make_columns",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "columns": [
                    "dict",
                    "List[str]",
                    "list",
                    "IO[bytes]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Table._make_data": {
            "name": "_make_data",
            "location": 75,
            "return": [
                "int",
                "Optional[str]",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Table.do_data": {
            "name": "do_data",
            "location": 87,
            "return": [
                "bytes",
                "IO[bytes]",
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ]
            }
        },
        "Table.do_columns": {
            "name": "do_columns",
            "location": 101,
            "return": [
                "int",
                "List[List[int]]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "List[\"Outcome\"]"
                ]
            }
        },
        "SmartGrid.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartGrid.do_update": {
            "name": "do_update",
            "location": 131,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SmartGrid.get": {
            "name": "get",
            "location": 145,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "SVG.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preserve_aspect_ratio": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "SVG.do_image": {
            "name": "do_image",
            "location": 186,
            "return": [
                "int",
                "str",
                "tuple",
                "float"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "float"
                ]
            }
        },
        "Plotly.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Plotly.on_click": {
            "name": "on_click",
            "location": 253,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotly.on_beforehover": {
            "name": "on_beforehover",
            "location": 266,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotly.on_hover": {
            "name": "on_hover",
            "location": 279,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotly.on_unhover": {
            "name": "on_unhover",
            "location": 292,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotly.on_select": {
            "name": "on_select",
            "location": 305,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotly.on_relayout": {
            "name": "on_relayout",
            "location": 318,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotly.do_all": {
            "name": "do_all",
            "location": 334,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "plot": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Plotly.do_data": {
            "name": "do_data",
            "location": 350,
            "return": [
                "str",
                "Dict[str, List[int]]",
                "Sequence",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "Plotly.do_layout": {
            "name": "do_layout",
            "location": 365,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Plotly.do_config": {
            "name": "do_config",
            "location": 380,
            "return": [
                "str",
                "Optional[dict]",
                "Sequence",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Plotly.get": {
            "name": "get",
            "location": 395,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Plotly.get_select": {
            "name": "get_select",
            "location": 405,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Plotly.get_click": {
            "name": "get_click",
            "location": 415,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Plotly.get_hover": {
            "name": "get_hover",
            "location": 425,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Plotly.get_layout": {
            "name": "get_layout",
            "location": 435,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        }
    },
    "bowtie-master/bowtie/_app.py": {
        "raise_not_number": {
            "name": "raise_not_number",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "Tuple[int, int, int]",
                    "dict",
                    "str"
                ]
            }
        },
        "_check_index": {
            "name": "_check_index",
            "location": 302,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "bool"
                ],
                "length": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "float"
                ],
                "bound": [
                    "bool",
                    "int",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "_slice_to_start_end": {
            "name": "_slice_to_start_end",
            "location": 312,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "slc": [
                    "int"
                ],
                "length": [
                    "int",
                    "str",
                    "bytes",
                    "Environment"
                ]
            }
        },
        "node_version": {
            "name": "node_version",
            "location": 1084,
            "return": [
                "int",
                "Optional[dict]",
                "Iterable",
                "str"
            ],
            "arguments": {}
        },
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "flask.Flask"
                ],
                "seconds": [
                    "str",
                    "Mapping[str, str]",
                    "List[str]",
                    "Callable",
                    "bool"
                ],
                "func": [
                    "str",
                    "Mapping[str, str]",
                    "List[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Scheduler.context": {
            "name": "context",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Scheduler.start": {
            "name": "start",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.run": {
            "name": "run",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.stop": {
            "name": "stop",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row_start": [
                    "int",
                    "float"
                ],
                "column_start": [
                    "int"
                ],
                "row_end": [
                    "int",
                    "Optional[int]"
                ],
                "column_end": [
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Span._key": {
            "name": "_key",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.__hash__": {
            "name": "__hash__",
            "location": 128,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.__eq__": {
            "name": "__eq__",
            "location": 132,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "OrderedDict",
                "str",
                "Mapping",
                "List[str]",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "Optional[Dict[str, str]]",
                    "Mapping"
                ]
            }
        },
        "Span.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.overlap": {
            "name": "overlap",
            "location": 149,
            "return": [
                "str",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[Any]",
                    "Union['FixedPoint', int]",
                    "List[str]"
                ]
            }
        },
        "Span.cells": {
            "name": "cells",
            "location": 161,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.int], None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.auto": {
            "name": "auto",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.min_auto": {
            "name": "min_auto",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.pixels": {
            "name": "pixels",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.min_pixels": {
            "name": "min_pixels",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.ems": {
            "name": "ems",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.min_ems": {
            "name": "min_ems",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.fraction": {
            "name": "fraction",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.percent": {
            "name": "percent",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.min_percent": {
            "name": "min_percent",
            "location": 246,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Size.__repr__": {
            "name": "__repr__",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap.pixels": {
            "name": "pixels",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Gap.ems": {
            "name": "ems",
            "location": 285,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Gap.percent": {
            "name": "percent",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Union[str, int, float]"
                ]
            }
        },
        "Gap.__repr__": {
            "name": "__repr__",
            "location": 297,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Components.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "Optional[bytes]",
                    "bool"
                ]
            }
        },
        "Components.__len__": {
            "name": "__len__",
            "location": 357,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Components.append": {
            "name": "append",
            "location": 361,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "int",
                    "str"
                ]
            }
        },
        "Components.__iter__": {
            "name": "__iter__",
            "location": 365,
            "return": [
                "T",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Components.__getitem__": {
            "name": "__getitem__",
            "location": 369,
            "return": [
                "str",
                "Dict[str, str]",
                "Mapping",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Components._add": {
            "name": "_add",
            "location": 373,
            "return": [
                "str",
                "Iterable[str]",
                "Callable",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Callable",
                    "Callable[[], Any]",
                    "bytes"
                ],
                "other": [
                    "str",
                    "List[float]",
                    "dict"
                ]
            }
        },
        "Components.__iadd__": {
            "name": "__iadd__",
            "location": 383,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['IndexBase', 'Series']",
                    "List['cirq.Qid']"
                ]
            }
        },
        "Components.__add__": {
            "name": "__add__",
            "location": 387,
            "return": [
                "str",
                "float",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[bowtie._componenComponent, Sequence[bowtie._componenComponent]]"
                ]
            }
        },
        "View._next_uuid": {
            "name": "_next_uuid",
            "location": 398,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Collection[str]",
                    "T",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "float"
                ],
                "columns": [
                    "int"
                ],
                "sidebar": [
                    "int",
                    "Tuple[int, int]"
                ],
                "background_color": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "View._all_components": {
            "name": "_all_components",
            "location": 431,
            "return": [
                "typing.Generator[bowtie._component.Component, None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._packages": {
            "name": "_packages",
            "location": 436,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._templates": {
            "name": "_templates",
            "location": 443,
            "return": [
                "Sequence[str]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._imports": {
            "name": "_imports",
            "location": 448,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._components": {
            "name": "_components",
            "location": 455,
            "return": [
                "str",
                "Iterable[Sequence[str]]",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._key_to_span": {
            "name": "_key_to_span",
            "location": 458,
            "return": [
                "str",
                "defaultdict",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[int, slice]"
                ]
            }
        },
        "View.__getitem__": {
            "name": "__getitem__",
            "location": 506,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "View.__setitem__": {
            "name": "__setitem__",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ],
                "component": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "View.add": {
            "name": "add",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "View._available_cell": {
            "name": "_available_cell",
            "location": 543,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.add_sidebar": {
            "name": "add_sidebar",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": []
            }
        },
        "View._columns_sidebar": {
            "name": "_columns_sidebar",
            "location": 576,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "str"
                ],
                "app": [
                    "bool",
                    "Callable[[dict], dict]"
                ],
                "rows": [
                    "bool",
                    "Hashable",
                    "Optional[str]",
                    "str"
                ],
                "columns": [
                    "bool",
                    "Hashable",
                    "Optional[str]",
                    "str"
                ],
                "sidebar": [
                    "bool",
                    "Hashable",
                    "Optional[str]",
                    "str"
                ],
                "title": [
                    "bool",
                    "Optional[List[str]]"
                ],
                "theme": [
                    "bool",
                    "Optional[List[str]]"
                ],
                "background_color": [
                    "bool",
                    "Hashable",
                    "Optional[str]",
                    "str"
                ],
                "socketio": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "int",
                    "Optional[IO[bytes]]"
                ],
                "debug": [
                    "int",
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "App.wsgi_app": {
            "name": "wsgi_app",
            "location": 657,
            "return": [
                "Optional[List[Any]]",
                "pathlib.Path",
                "str",
                "flask.Flask"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        },
        "App.__call__": {
            "name": "__call__",
            "location": 661,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Callable",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "start_response": [
                    "Callable",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "App.__getattr__": {
            "name": "__getattr__",
            "location": 665,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "App.__setattr__": {
            "name": "__setattr__",
            "location": 681,
            "return": [
                "str",
                "list",
                "Optional[bool]",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "App.__getitem__": {
            "name": "__getitem__",
            "location": 687,
            "return": [
                "str",
                "dict",
                "Sequence[str]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "App.__setitem__": {
            "name": "__setitem__",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "App.add": {
            "name": "add",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "App.add_sidebar": {
            "name": "add_sidebar",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int"
                ]
            }
        },
        "App.add_route": {
            "name": "add_route",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "apistar.http.Path"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "exact": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "apistar.http.Path"
                ]
            }
        },
        "App.subscribe": {
            "name": "subscribe",
            "location": 740,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.load": {
            "name": "load",
            "location": 824,
            "return": [
                "str",
                "Callable[[KT], VT]",
                "Tuple[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "App.schedule": {
            "name": "schedule",
            "location": 836,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "App._write_templates": {
            "name": "_write_templates",
            "location": 851,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._build": {
            "name": "_build",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notebook": [
                    "Optional[Exception]",
                    "Dict[str, Any]"
                ]
            }
        },
        "App._endpoints": {
            "name": "_endpoints",
            "location": 951,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App._serve": {
            "name": "_serve",
            "location": 1050,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "dict"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "dict"
                ]
            }
        },
        "App._installed_packages": {
            "name": "_installed_packages",
            "location": 1059,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._create_jspath": {
            "name": "_create_jspath",
            "location": 1065,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._run": {
            "name": "_run",
            "location": 1071,
            "return": [
                "str",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "notebook": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Scheduler.context.wrap": {
            "name": "wrap",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "App.subscribe.decorator": {
            "name": "decorator",
            "location": 801,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Callable[[], None]",
                    "Callable"
                ]
            }
        },
        "App.schedule.wrap": {
            "name": "wrap",
            "location": 847,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "dict",
                    "Callable",
                    "leabra7.events.Event",
                    "list",
                    "events.Event"
                ]
            }
        },
        "App._endpoints.generate_sio_handler": {
            "name": "generate_sio_handler",
            "location": 952,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "main_event": [
                    "str",
                    "events.Event",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "supports": [
                    "str",
                    "events.Event",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "App._endpoints.gen_upload": {
            "name": "gen_upload",
            "location": 1002,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "List[List[Any]]",
                    "int",
                    "list",
                    "Type[Exception]",
                    "str"
                ]
            }
        },
        "App._endpoints.bowtiebundlejs": {
            "name": "bowtiebundlejs",
            "location": 1024,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "App._endpoints.generate_sio_handler.handler": {
            "name": "handler",
            "location": 966,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "App._endpoints.gen_upload.upload": {
            "name": "upload",
            "location": 1003,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[Dict[str, bytes]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "App._endpoints.generate_sio_handler.handler.wrapuser": {
            "name": "wrapuser",
            "location": 967,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/_cache.py": {
        "validate": {
            "name": "validate",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "_Cache.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [
                "bool",
                "List[Tuple[str, int]]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Sequence[Hashable]",
                    "List[Dict]"
                ]
            }
        },
        "_Cache.__setitem__": {
            "name": "__setitem__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "int"
                ],
                "value": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "bowtie-master/bowtie/_command.py": {
        "numargs": {
            "name": "numargs",
            "location": 23,
            "return": [
                "dict",
                "Iterable[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "command": {
            "name": "command",
            "location": 28,
            "return": [
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "command.cmd": {
            "name": "cmd",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "command.build": {
            "name": "build",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "command.run": {
            "name": "run",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "bool",
                    "int",
                    "str",
                    "Union[str, List[str]]",
                    "Iterable"
                ],
                "port": [
                    "bool",
                    "int",
                    "str",
                    "Union[str, List[str]]",
                    "Iterable"
                ]
            }
        },
        "command.serve": {
            "name": "serve",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "str"
                ],
                "port": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "command.dev": {
            "name": "dev",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "extra": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "command.prod": {
            "name": "prod",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "extra": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "bowtie-master/bowtie/_component.py": {
        "jsbool": {
            "name": "jsbool",
            "location": 67,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "jsnull": {
            "name": "jsnull",
            "location": 72,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "Optional[T]",
                    "T",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "json_conversion": {
            "name": "json_conversion",
            "location": 79,
            "return": [
                "bowtie._JSON",
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "jdumps": {
            "name": "jdumps",
            "location": 111,
            "return": [
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Tuple[int, int]",
                    "[[]]",
                    "Iterable[bytes]"
                ]
            }
        },
        "encoders": {
            "name": "encoders",
            "location": 116,
            "return": [
                "bowtie._JSON",
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "pack": {
            "name": "pack",
            "location": 150,
            "return": [
                "bool",
                "List[str]",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 160,
            "return": [
                "bool",
                "numpy.ndarray",
                "pandas.DataFrame"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "make_event": {
            "name": "make_event",
            "location": 165,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_event": {
            "name": "is_event",
            "location": 182,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "make_command": {
            "name": "make_command",
            "location": 187,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "is_command": {
            "name": "is_command",
            "location": 208,
            "return": [
                "Iterable[int]",
                "str",
                "Callable",
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "make_getter": {
            "name": "make_getter",
            "location": 213,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "getter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_getter": {
            "name": "is_getter",
            "location": 237,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "uuid": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "getter": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "Event.signal": {
            "name": "signal",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event._key": {
            "name": "_key",
            "location": 50,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__eq__": {
            "name": "__eq__",
            "location": 57,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "OrderedDict",
                "str",
                "Mapping",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "Optional[Dict[str, str]]",
                    "Mapping"
                ]
            }
        },
        "Event.__hash__": {
            "name": "__hash__",
            "location": 62,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_event.actualevent": {
            "name": "actualevent",
            "location": 169,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [
                    "bool",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "make_command.actualcommand": {
            "name": "actualcommand",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "bytes",
                    "datetime.date"
                ]
            }
        },
        "make_getter.get": {
            "name": "get",
            "location": 215,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "timeout": [
                    "Optional[float]",
                    "dict",
                    "bool",
                    "Sequence[str]",
                    "Callable[[dict], None]",
                    "str",
                    "Union[int, float]",
                    "pandas.DataFrame"
                ]
            }
        },
        "_Maker.__new__": {
            "name": "__new__",
            "location": 246,
            "return": [
                "str",
                "Type",
                "Type[Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "namespace": [
                    "str",
                    "int",
                    "Union[str, Pattern[str]]"
                ]
            }
        },
        "FormatDict.__missing__": {
            "name": "__missing__",
            "location": 262,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "Component._TEMPLATE": {
            "name": "_TEMPLATE",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._COMPONENT": {
            "name": "_COMPONENT",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._PACKAGE": {
            "name": "_PACKAGE",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._ATTRS": {
            "name": "_ATTRS",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._instantiate": {
            "name": "_instantiate",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._next_uuid": {
            "name": "_next_uuid",
            "location": 297,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Collection[str]",
                    "T",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._insert": {
            "name": "_insert",
            "location": 315,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "wrap": [
                    "str",
                    "List[Optional[bytes]]",
                    "List[str]"
                ],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Component.__eq__": {
            "name": "__eq__",
            "location": 328,
            "return": [
                "int",
                "Type[Any]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Component.__hash__": {
            "name": "__hash__",
            "location": 333,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bowtie-master/bowtie/_magic.py": {
        "get_notebook_name": {
            "name": "get_notebook_name",
            "location": 27,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "load_notebook": {
            "name": "load_notebook",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fullname": [
                    "Type",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "BowtieMagic.bowtie_stop": {
            "name": "bowtie_stop",
            "location": 97,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "BowtieMagic.bowtie": {
            "name": "bowtie",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Mapping[str, Mapping[str, float]]"
                ]
            }
        }
    },
    "bowtie-master/bowtie/_progress.py": {
        "Progress.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress._instantiate": {
            "name": "_instantiate",
            "location": 54,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.do_percent": {
            "name": "do_percent",
            "location": 62,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "percent": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Progress.do_inc": {
            "name": "do_inc",
            "location": 77,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "inc": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Progress.do_visible": {
            "name": "do_visible",
            "location": 92,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "visible": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Progress.do_active": {
            "name": "do_active",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.do_success": {
            "name": "do_success",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.do_error": {
            "name": "do_error",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bowtie-master/bowtie/_typing.py": {},
    "bowtie-master/bowtie/_utils.py": {
        "func_name": {
            "name": "func_name",
            "location": 6,
            "return": [
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/__init__.py": {
        "load_ipython_extension": {
            "name": "load_ipython_extension",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "ipython": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bowtie-master/bowtie/feedback/message.py": {
        "_message": {
            "name": "_message",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "status": [
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "content": [
                    "dict",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "success": {
            "name": "success",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "loading": {
            "name": "loading",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        }
    },
    "bowtie-master/bowtie/feedback/__init__.py": {},
    "bowtie-master/bowtie/tests/conftest.py": {
        "build_reset": {
            "name": "build_reset",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "chrome_driver": {
            "name": "chrome_driver",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/tests/test_app.py": {
        "test_subscribe_error": {
            "name": "test_subscribe_error",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/tests/test_cache.py": {
        "click": {
            "name": "click",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keys": {
            "name": "test_keys",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dummy": {
            "name": "dummy",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "build_reset": [
                    "dict",
                    "str"
                ],
                "monkeypatch": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_cache": {
            "name": "test_cache",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "dummy": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "chrome_driver": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_command.py": {
        "test_numargs": {
            "name": "test_numargs",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_numargs.onearg": {
            "name": "onearg",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_numargs.zeroarg": {
            "name": "zeroarg",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_numargs.varargs": {
            "name": "varargs",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_numargs.onevarargs": {
            "name": "onevarargs",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_compile.py": {
        "callback": {
            "name": "callback",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build": {
            "name": "test_build",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "build_reset": [
                    "dict"
                ],
                "monkeypatch": [
                    "dict"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_components.py": {
        "create_components": {
            "name": "create_components",
            "location": 13,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "components": {
            "name": "components",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "build_reset": [
                    "dict",
                    "str"
                ],
                "monkeypatch": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_components": {
            "name": "test_components",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "components": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "chrome_driver": []
            }
        }
    },
    "bowtie-master/bowtie/tests/test_editor.py": {
        "write": {
            "name": "write",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Callable[[str], T]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "markdown": {
            "name": "markdown",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "build_reset": [
                    "dict",
                    "str"
                ],
                "monkeypatch": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_markdown": {
            "name": "test_markdown",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "markdown": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "chrome_driver": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_layout.py": {
        "check_all_cells_used": {
            "name": "check_all_cells_used",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "view": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Callable"
                ]
            }
        },
        "count_used_cells": {
            "name": "count_used_cells",
            "location": 17,
            "return": [
                "List[int]",
                "int",
                "List[Tuple[int, str, str]]",
                "list",
                "Tuple[int]",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "buttons": {
            "name": "buttons",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_add_list": {
            "name": "test_add_list",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": [
                    "bocadillo.App"
                ]
            }
        },
        "test_set_tuple": {
            "name": "test_set_tuple",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_set_list": {
            "name": "test_set_list",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_append_no_init": {
            "name": "test_append_no_init",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_append_to_partial": {
            "name": "test_append_to_partial",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_append_to_partial_superset": {
            "name": "test_append_to_partial_superset",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_all_used": {
            "name": "test_all_used",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_used": {
            "name": "test_used",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_grid_index": {
            "name": "test_grid_index",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": []
            }
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "buttons": [
                    "int",
                    "BaseException"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_multiple.py": {
        "callback": {
            "name": "callback",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "multiple_views": {
            "name": "multiple_views",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "build_reset": [
                    "dict",
                    "str"
                ],
                "monkeypatch": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_multiple": {
            "name": "test_multiple",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "multiple_views": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "chrome_driver": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_plotly.py": {
        "callback": {
            "name": "callback",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "plotly": {
            "name": "plotly",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "build_reset": [
                    "dict",
                    "str"
                ],
                "monkeypatch": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_plotly": {
            "name": "test_plotly",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "plotly": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "chrome_driver": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "bowtie-master/bowtie/tests/test_serialize.py": {
        "test_json": {
            "name": "test_json",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_msgpack": {
            "name": "test_msgpack",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/tests/test_tags.py": {
        "test_markdown": {
            "name": "test_markdown",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/tests/test_utils.py": {
        "hello": {
            "name": "hello",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_function_names": {
            "name": "test_function_names",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bowtie-master/bowtie/tests/utils.py": {
        "reset_uuid": {
            "name": "reset_uuid",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "server_check": {
            "name": "server_check",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "bowtie-master/bowtie/tests/__init__.py": {},
    "bowtie-master/doc/conf.py": {
        "setup": {
            "name": "setup",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        }
    },
    "bowtie-master/examples/random_walk.py": {
        "initialize": {
            "name": "initialize",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "upgraph": {
            "name": "upgraph",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "walk": {
            "name": "walk",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "bool",
                "Callable",
                "float"
            ],
            "arguments": {}
        }
    }
}
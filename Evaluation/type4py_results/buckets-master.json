{
    "buckets-master/action.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "str",
                    "bool"
                ],
                "target": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Action.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buckets-master/dot.py": {
        "_name": {
            "name": "_name",
            "location": 7,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "state": [
                    "type_aliases.BucketFilledState",
                    "Sequence[str]",
                    "int",
                    "Type[\"SerializationDialect\"]"
                ]
            }
        },
        "_state_label": {
            "name": "_state_label",
            "location": 11,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "state": [
                    "type_aliases.BucketFilledState",
                    "Action",
                    "float",
                    "dict",
                    "int"
                ]
            }
        },
        "_link_label": {
            "name": "_link_label",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "action": [
                    "action.Action",
                    "str",
                    "bool"
                ]
            }
        },
        "_state_row": {
            "name": "_state_row",
            "location": 21,
            "return": [
                "str",
                "int",
                "Optional[Mapping[str, Any]]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "state": [
                    "type_aliases.BucketValueType",
                    "type_aliases.BucketFilledState",
                    "int",
                    "List[bytes]"
                ],
                "target": [
                    "type_aliases.BucketValueType",
                    "type_aliases.BucketFilledState",
                    "int",
                    "List[bytes]"
                ]
            }
        },
        "_link_row": {
            "name": "_link_row",
            "location": 25,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "state": [
                    "type_aliases.BucketFilledState",
                    "action.Action",
                    "bool",
                    "Optional[Callable]"
                ],
                "action": [
                    "type_aliases.BucketFilledState",
                    "action.Action",
                    "bool",
                    "Optional[Callable]"
                ],
                "parent": [
                    "type_aliases.BucketFilledState",
                    "action.Action",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "to_dot": {
            "name": "to_dot",
            "location": 29,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "graph": [
                    "type_aliases.Graph",
                    "type_aliases.BucketValueType"
                ],
                "target": [
                    "type_aliases.Graph",
                    "type_aliases.BucketValueType"
                ]
            }
        }
    },
    "buckets-master/enums.py": {
        "Target.other": {
            "name": "other",
            "location": 17,
            "return": [
                "str",
                "deque",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buckets-master/main.py": {
        "usage": {
            "name": "usage",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {}
        }
    },
    "buckets-master/performer.py": {
        "get_performer": {
            "name": "get_performer",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "max_left": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "max_right": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_performer.perform": {
            "name": "perform",
            "location": 14,
            "return": [
                "Callable"
            ],
            "arguments": {
                "action": [
                    "dict",
                    "Action",
                    "int"
                ],
                "initial_state": []
            }
        }
    },
    "buckets-master/solver.py": {
        "solve": {
            "name": "solve",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "max_left": [
                    "type_aliases.BucketValueType",
                    "int",
                    "float"
                ],
                "max_right": [
                    "type_aliases.BucketValueType",
                    "int",
                    "float"
                ],
                "target_amount": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "generate_graph": {
            "name": "generate_graph",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "max_left": [
                    "type_aliases.BucketValueType",
                    "int",
                    "float"
                ],
                "max_right": [
                    "type_aliases.BucketValueType",
                    "int",
                    "float"
                ],
                "break_out_early": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "UnsolvableError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "solve.break_out_early": {
            "name": "break_out_early",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "current": [
                    "type_aliases.BucketFilledState",
                    "Optional[int]",
                    "int",
                    "str"
                ]
            }
        },
        "generate_graph.put_all": {
            "name": "put_all",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "current": [
                    "type_aliases.BucketFilledState",
                    "str",
                    "List[str]",
                    "Callable[[str], None]"
                ]
            }
        }
    },
    "buckets-master/test_dot.py": {
        "test_01": {
            "name": "test_01",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_011": {
            "name": "test_011",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "buckets-master/test_graph.py": {
        "cleanup_generate": {
            "name": "cleanup_generate",
            "location": 11,
            "return": [
                "dict",
                "str",
                "List[Match]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "left": [
                    "int",
                    "List[int]"
                ],
                "right": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_01": {
            "name": "test_01",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "buckets-master/test_main.py": {
        "test_normal": {
            "name": "test_normal",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_non_integral": {
            "name": "test_non_integral",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_non_float": {
            "name": "test_non_float",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_zeroes": {
            "name": "test_zeroes",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_letters": {
            "name": "test_letters",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_negative_bucket_sizes": {
            "name": "test_negative_bucket_sizes",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_negative_water_size": {
            "name": "test_negative_water_size",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_bad_args": {
            "name": "test_bad_args",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_two_args": {
            "name": "test_two_args",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_strange_options": {
            "name": "test_strange_options",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_graph": {
            "name": "test_graph",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "buckets-master/test_perform.py": {
        "_wrap_performer": {
            "name": "_wrap_performer",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "right": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fill": {
            "name": "test_fill",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_wrap_performer.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "int",
                "Callable[..., None]",
                "Tuple[type]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "action": [
                    "Tuple[int, int]",
                    "str"
                ],
                "input_state": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        }
    },
    "buckets-master/test_solver.py": {
        "to_tuples": {
            "name": "to_tuples",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "actions": [
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "bool"
                ]
            }
        },
        "_solve": {
            "name": "_solve",
            "location": 21,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_fill": {
            "name": "test_simple_fill",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_impossible": {
            "name": "assert_impossible",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_532": {
            "name": "test_532",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_and_half": {
            "name": "test_one_and_half",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_534": {
            "name": "test_534",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_53": {
            "name": "test_53",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "buckets-master/type_aliases.py": {}
}
{
    "bullwatcher-master/bullwatcher.api/application.py": {},
    "bullwatcher-master/bullwatcher.api/app/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "setup_routes.handle_known_error": {
            "name": "handle_known_error",
            "location": 20,
            "return": [
                "int",
                "str",
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "httpError": [
                    "str",
                    "dict",
                    "int",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "setup_routes.handle_http_exception": {
            "name": "handle_http_exception",
            "location": 29,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "http_ex": [
                    "werkzeug.exceptions.HTTPException",
                    "dict",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "setup_routes.handle_unknown_error": {
            "name": "handle_unknown_error",
            "location": 38,
            "return": [
                "type",
                "int",
                "float"
            ],
            "arguments": {
                "ex": [
                    "Exception"
                ]
            }
        },
        "setup_routes.login": {
            "name": "login",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "setup_routes.get_users": {
            "name": "get_users",
            "location": 53,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {}
        },
        "setup_routes.get_user": {
            "name": "get_user",
            "location": 57,
            "return": [
                "Optional[str]",
                "app.models.User",
                "str",
                "tuple"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "setup_routes.get_user_watchlists": {
            "name": "get_user_watchlists",
            "location": 61,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Sequence",
                "int",
                "Hashable"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "setup_routes.create_user_watchlist": {
            "name": "create_user_watchlist",
            "location": 65,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "setup_routes.delete_user_watchlist": {
            "name": "delete_user_watchlist",
            "location": 74,
            "return": [
                "dict",
                "float",
                "datetime.date",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "watchlist_id": [
                    "str",
                    "int"
                ]
            }
        },
        "setup_routes.get_user_watchlist_items": {
            "name": "get_user_watchlist_items",
            "location": 79,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "dict",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "watchlist_id": [
                    "str",
                    "int"
                ]
            }
        },
        "setup_routes.update_user_watchlist_items": {
            "name": "update_user_watchlist_items",
            "location": 86,
            "return": [
                "List[str]",
                "int",
                "list",
                "dict"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "watchlist_id": [
                    "str",
                    "int"
                ]
            }
        },
        "setup_routes.sync": {
            "name": "sync",
            "location": 101,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {}
        },
        "setup_routes.stock_price": {
            "name": "stock_price",
            "location": 108,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "ticker": [
                    "Callable",
                    "int"
                ]
            }
        },
        "setup_routes.stock_history": {
            "name": "stock_history",
            "location": 113,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "ticker": [
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "setup_routes.search_stock_metadata": {
            "name": "search_stock_metadata",
            "location": 120,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "setup_routes.get_stock_metadata": {
            "name": "get_stock_metadata",
            "location": 126,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "int",
                    "IO"
                ]
            }
        },
        "setup_routes.get_stock_rankings": {
            "name": "get_stock_rankings",
            "location": 134,
            "return": [
                "tuple",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "lib.traceback.traceback.Traceback",
                    "int"
                ]
            }
        },
        "setup_routes.get_patterns": {
            "name": "get_patterns",
            "location": 138,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "setup_routes.get_patterns_for_date": {
            "name": "get_patterns_for_date",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "setup_routes.pattern_vote": {
            "name": "pattern_vote",
            "location": 151,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "setup_routes.get_pattern_votes_for_user": {
            "name": "get_pattern_votes_for_user",
            "location": 156,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "datetime.timedelta"
                ],
                "date_str": [
                    "str",
                    "datetime.date",
                    "datetime.datetime.datetime",
                    "int"
                ]
            }
        },
        "setup_routes.db_stock_tickers": {
            "name": "db_stock_tickers",
            "location": 161,
            "return": [
                "Callable[[list], None]"
            ],
            "arguments": {}
        },
        "setup_routes.get_sector_performances": {
            "name": "get_sector_performances",
            "location": 167,
            "return": [
                "dict",
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "setup_routes.get_rankings": {
            "name": "get_rankings",
            "location": 173,
            "return": [
                "tuple",
                "int"
            ],
            "arguments": {
                "ranking_type": [
                    "str",
                    "Dict[str, Any]",
                    "List[Callable]",
                    "int"
                ],
                "time_window": [
                    "str",
                    "Dict[str, Any]",
                    "List[Callable]",
                    "int"
                ]
            }
        },
        "setup_routes.get_market_news": {
            "name": "get_market_news",
            "location": 185,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "setup_routes.get_stock_news": {
            "name": "get_stock_news",
            "location": 189,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "int",
                    "IO"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/database/conversion.py": {
        "convert_stock_metadata": {
            "name": "convert_stock_metadata",
            "location": 4,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "domain": [
                    "str"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/database/models.py": {},
    "bullwatcher-master/bullwatcher.api/app/data_access/alphavantage.py": {
        "get_url": {
            "name": "get_url",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Callable",
                    "Iterable[str]",
                    "int"
                ],
                "symbol": [
                    "str"
                ]
            }
        },
        "_make_request": {
            "name": "_make_request",
            "location": 24,
            "return": [
                "bytes",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict"
                ]
            }
        },
        "get_sector_performances": {
            "name": "get_sector_performances",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_stock_daily": {
            "name": "get_stock_daily",
            "location": 80,
            "return": [
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_moving_average": {
            "name": "get_moving_average",
            "location": 93,
            "return": [
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "interval": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_on_balance_volume": {
            "name": "get_on_balance_volume",
            "location": 103,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "get_stochastics": {
            "name": "get_stochastics",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_bollinger_bands": {
            "name": "get_bollinger_bands",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "ticker": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_sector_performance": {
            "name": "get_sector_performance",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/exchanges.py": {
        "get_stock_metadata": {
            "name": "get_stock_metadata",
            "location": 16,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "_parse_stock_info": {
            "name": "_parse_stock_info",
            "location": 42,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "search.domain.DocMeta",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "csv": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/http.py": {
        "get_json": {
            "name": "get_json",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "raise_on_error": {
            "name": "raise_on_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/iex.py": {
        "get_ticker_list": {
            "name": "get_ticker_list",
            "location": 8,
            "return": [
                "List[str]",
                "AbstractSet[str]",
                "List[float]"
            ],
            "arguments": {}
        },
        "get_stock_metadata": {
            "name": "get_stock_metadata",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tickers": [
                    "str",
                    "Sequence",
                    "int"
                ]
            }
        },
        "get_stock_dailies": {
            "name": "get_stock_dailies",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tickers": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "range_": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_stock_current": {
            "name": "get_stock_current",
            "location": 103,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/newsapi.py": {
        "_get_client": {
            "name": "_get_client",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "get_news": {
            "name": "get_news",
            "location": 23,
            "return": [
                "bool",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "keywords": [
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "max_results": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Union['Context', int]"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/bullwatcherdb.py": {
        "get_sync_statuses": {
            "name": "get_sync_statuses",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "set_sync_job_synced_until": {
            "name": "set_sync_job_synced_until",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "sync_job": [
                    "str",
                    "datetime.date.time",
                    "models.Person.Person",
                    "List[Dict[str, Any]]"
                ],
                "synced_until": [
                    "str",
                    "datetime.date.time",
                    "models.Person.Person",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_stock_sync_statuses": {
            "name": "get_stock_sync_statuses",
            "location": 47,
            "return": [
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {}
        },
        "save_stock_sync_statuses": {
            "name": "save_stock_sync_statuses",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "statuses": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "get_all_stock_daily_tickers": {
            "name": "get_all_stock_daily_tickers",
            "location": 80,
            "return": [
                "List[str]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {}
        },
        "save_batch_stock_daily": {
            "name": "save_batch_stock_daily",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "dailies_dict": [
                    "Mapping[str, Any]",
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        },
        "get_batch_stock_daily": {
            "name": "get_batch_stock_daily",
            "location": 140,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "tickers": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "datetime.date.time",
                    "Optional[str]",
                    "datetime.date"
                ],
                "min_date": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "datetime.date.time",
                    "Optional[str]",
                    "datetime.date"
                ],
                "max_date": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "datetime.date.time",
                    "Optional[str]",
                    "datetime.date"
                ]
            }
        },
        "get_batch_stock_daily_for_dates": {
            "name": "get_batch_stock_daily_for_dates",
            "location": 172,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "tickers": [
                    "flask_sqlalchemy.BaseQuery",
                    "List[str]",
                    "List[datetime.date]",
                    "str",
                    "int",
                    "float"
                ],
                "dates": [
                    "flask_sqlalchemy.BaseQuery",
                    "List[str]",
                    "List[datetime.date]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "get_max_pattern_sync_date": {
            "name": "get_max_pattern_sync_date",
            "location": 211,
            "return": [
                "Optional[str]",
                "str",
                "datetime.datetime",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "get_flag_pattern_tickers": {
            "name": "get_flag_pattern_tickers",
            "location": 228,
            "return": [
                "str",
                "IO",
                "Mapping[str, Any]",
                "Set[str]",
                "bool",
                "Iterable[str]",
                "sqlalchemy.Column"
            ],
            "arguments": {
                "date": [
                    "datetime.date",
                    "str",
                    "datetime.date.time",
                    "datetime.datetime",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "set_flag_pattern_tickers": {
            "name": "set_flag_pattern_tickers",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "date": [
                    "datetime.date",
                    "Optional[str]",
                    "\"Date\"",
                    "str",
                    "datetime.datetime"
                ],
                "tickers": [
                    "str",
                    "Union[bytes, bytearray, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_vote_for_flag_pattern": {
            "name": "add_vote_for_flag_pattern",
            "location": 291,
            "return": [
                "bool",
                "T"
            ],
            "arguments": {
                "vote": [
                    "bool",
                    "str",
                    "float",
                    "zerver.models.Realm"
                ]
            }
        },
        "get_flag_pattern_user_votes": {
            "name": "get_flag_pattern_user_votes",
            "location": 348,
            "return": [
                "datetime.datetime",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "datetime.date",
                    "int",
                    "esm.models.last_operation.LastOperation",
                    "app.models.SpamResult",
                    "bool"
                ],
                "date": [
                    "str",
                    "datetime.date",
                    "int",
                    "esm.models.last_operation.LastOperation",
                    "app.models.SpamResult",
                    "bool"
                ]
            }
        },
        "_to_date_int": {
            "name": "_to_date_int",
            "location": 366,
            "return": [
                "datetime.datetime",
                "bool",
                "Optional[str]",
                "datetime.date",
                "int"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "str",
                    "datetime.date"
                ]
            }
        },
        "_to_date_str": {
            "name": "_to_date_str",
            "location": 370,
            "return": [
                "Optional[str]",
                "str",
                "datetime.datetime",
                "datetime.datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "date_int": [
                    "str",
                    "datetime.date"
                ]
            }
        },
        "_date_int_to_date": {
            "name": "_date_int_to_date",
            "location": 375,
            "return": [
                "str",
                "datetime.date",
                "Optional[str]"
            ],
            "arguments": {
                "date_int": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "datetime.datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "_print_debug_queries": {
            "name": "_print_debug_queries",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "save_stock_sync_statuses.create_status": {
            "name": "create_status",
            "location": 67,
            "return": [
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "str",
                "bool",
                "pathfinding_service.database.PFSDatabase"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int",
                    "Callable[[str], int]",
                    "tracim.models.data.Content",
                    "Optional[str]"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/common.py": {
        "commit_with_rollback": {
            "name": "commit_with_rollback",
            "location": 1,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/rankings.py": {
        "merge_rankings": {
            "name": "merge_rankings",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "rankings": [
                    "List[app.domain.rankings.Ranking]",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "time_window": [
                    "app.domain.common.TimeWindow",
                    "int",
                    "bool"
                ],
                "ranking_type": [
                    "app.domain.common.TimeWindow",
                    "int",
                    "bool"
                ]
            }
        },
        "get_rankings": {
            "name": "get_rankings",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "time_window": [
                    "str",
                    "bool",
                    "correios.models.posting.Package",
                    "datetime.date",
                    "Optional[grpy.core.models.UserPreferences]",
                    "daylighdb.models.User"
                ],
                "ranking_type": [
                    "str",
                    "bool",
                    "correios.models.posting.Package",
                    "datetime.date",
                    "Optional[grpy.core.models.UserPreferences]",
                    "daylighdb.models.User"
                ]
            }
        },
        "get_stock_rankings": {
            "name": "get_stock_rankings",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ticker": [
                    "str"
                ]
            }
        },
        "_db_ranking_to_domain": {
            "name": "_db_ranking_to_domain",
            "location": 101,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "ranking": [
                    "Optional[recidiviz.common.constants.state.state_supervision.StateSupervisionType]",
                    "recidiviz.common.constants.state.state_supervision_violation.StateSupervisionViolationType",
                    "Optional[recidiviz.common.constants.state.state_assessmenStateAssessmentType]",
                    "recidiviz.persistence.database.schema.state.schema.SchemaSentenceType",
                    "str"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/sectors.py": {
        "get_sector_performances": {
            "name": "get_sector_performances",
            "location": 12,
            "return": [
                "str",
                "bool",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {}
        },
        "update_sector_performances": {
            "name": "update_sector_performances",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "sector_performances": [
                    "esm.models.service_instance.ServiceInstance",
                    "Dict[str, Any]",
                    "db.models.Region",
                    "str"
                ]
            }
        },
        "convert_db_sector_to_domain": {
            "name": "convert_db_sector_to_domain",
            "location": 67,
            "return": [
                "str",
                "Optional[str]",
                "OrderedDict",
                "Iterable[str]"
            ],
            "arguments": {
                "sector": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/stock_metadata.py": {
        "save_batch_stock_metadata": {
            "name": "save_batch_stock_metadata",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "stock_metadatas": [
                    "int",
                    "audiopyle.lib.models.resulAnalysisRequest"
                ]
            }
        },
        "get_all_stock_metadata": {
            "name": "get_all_stock_metadata",
            "location": 27,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Tuple[float, float]"
            ],
            "arguments": {}
        },
        "search_stock_metadata_by_prefix": {
            "name": "search_stock_metadata_by_prefix",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Tuple[float, float]",
                "type",
                "List[str]"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "max_results": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_batch_stock_metadata": {
            "name": "get_batch_stock_metadata",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tickers": [
                    "str",
                    "int"
                ]
            }
        },
        "get_stock_metadata": {
            "name": "get_stock_metadata",
            "location": 86,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "Optional[int]",
                "dict",
                "socialhome.users.models.Profile"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "bool",
                    "zam_repondeur.models.Texte"
                ]
            }
        },
        "_convert_model_to_domain": {
            "name": "_convert_model_to_domain",
            "location": 104,
            "return": [
                "str",
                "bool",
                "Iterable[int]",
                "IO[str]"
            ],
            "arguments": {
                "db_metadata": [
                    "str",
                    "Optional[int]",
                    "abilian.core.sqlalchemy.SQLAlchemy"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/users.py": {
        "get_all_users": {
            "name": "get_all_users",
            "location": 10,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "int",
                "telethon.tl.types.User",
                "dict"
            ],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 15,
            "return": [
                "Optional[str]",
                "Optional[Dict]",
                "Optional[List[str]]",
                "server.models.User",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.Catalog.ID",
                    "transfer.models.Order.ID",
                    "Optional[int]"
                ]
            }
        },
        "upsert_user": {
            "name": "upsert_user",
            "location": 22,
            "return": [
                "models.User",
                "daylighdb.models.User",
                "arxiv.users.domain.User"
            ],
            "arguments": {
                "user": [
                    "app.domain.users.User",
                    "zerver.models.UserProfile",
                    "str",
                    "users.models.JustfixUser",
                    "asgard.models.job.ScheduledJob",
                    "List[zerver.models.UserProfile]",
                    "user_models.User"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "bool",
                    "Callable[[], str]",
                    "domain.repositories.UserRepository"
                ]
            }
        },
        "_convert_db_user_to_domain": {
            "name": "_convert_db_user_to_domain",
            "location": 41,
            "return": [
                "dict",
                "reader_server.types.User",
                "bool",
                "Tuple[List[Any], int]",
                "Optional[aw_core.models.Event]",
                "\"User\"",
                "str"
            ],
            "arguments": {
                "db_user": [
                    "django.contrib.auth.models.User",
                    "arxiv.users.domain.User",
                    "zerver.models.UserGroup",
                    "zerver.models.PreregistrationUser",
                    "zerver.models.UserProfile",
                    "User"
                ]
            }
        },
        "_convert_domain_user_to_db": {
            "name": "_convert_domain_user_to_db",
            "location": 49,
            "return": [
                "float",
                "models.Submission",
                "List[Dict[str, Any]]",
                "str",
                "Union[List, Dict]",
                "List[Dict]",
                "amundsen_application.models.user.User"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "datetime.datetime",
                    "zerver.models.UserGroup",
                    "arxiv.users.domain.User",
                    "readicomponents.User",
                    "src.domain.entity.user.User",
                    "rocketbomodels.User"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/watchlist.py": {
        "get_watchlists": {
            "name": "get_watchlists",
            "location": 13,
            "return": [
                "str",
                "int",
                "zerver.models.DefaultStreamGroup",
                "Optional[Dict[str, Any]]",
                "bool",
                "flask_appbuilder.security.sqla.models.User",
                "Callable"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_watchlist": {
            "name": "create_watchlist",
            "location": 26,
            "return": [
                "authentication.session.models.current_user.CurrentUser",
                "flask_appbuilder.security.sqla.models.User",
                "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "watchlist_name": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "delete_watchlist": {
            "name": "delete_watchlist",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "transfer.models.Channel.ID"
                ],
                "watchlist_id": [
                    "int",
                    "str",
                    "transfer.models.Channel.ID"
                ]
            }
        },
        "get_watchlist_items": {
            "name": "get_watchlist_items",
            "location": 62,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ],
                "watchlist_id": [
                    "int",
                    "str"
                ]
            }
        },
        "edit_watchlist_items": {
            "name": "edit_watchlist_items",
            "location": 83,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]",
                    "List[Dict[str, Any]]"
                ],
                "watchlist_id": [
                    "int",
                    "str",
                    "transfer.models.PostingID"
                ],
                "items": [
                    "List[app.domain.watchlisUserWatchlisItem]",
                    "str",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "int"
                ]
            }
        },
        "watchlist_database_to_domain": {
            "name": "watchlist_database_to_domain",
            "location": 121,
            "return": [
                "bool",
                "audiopyle.lib.models.resulAnalysisRequest",
                "audiopyle.lib.models.resulFeatureMeta",
                "audiopyle.lib.models.resulAnalysisStats"
            ],
            "arguments": {
                "db_model": [
                    "str",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/data_access/bullwatcherdb/__init__.py": {},
    "bullwatcher-master/bullwatcher.api/app/domain/common.py": {
        "TimeWindow.is_valid": {
            "name": "is_valid",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[..., Awaitable]",
                    "Optional[bool]",
                    "Callable[[], None]",
                    "List[str]",
                    "str"
                ],
                "time_window": [
                    "str",
                    "List[Callable[[datetime.datetime], bool]]",
                    "bool"
                ]
            }
        },
        "TimeWindow.to_time_delta_dict": {
            "name": "to_time_delta_dict",
            "location": 30,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Optional[Callable[[dict], None]]"
                ]
            }
        },
        "TimeWindow.to_asc_delta_tuple_array": {
            "name": "to_asc_delta_tuple_array",
            "location": 44,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[Tuple[int, int]]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/exceptions.py": {
        "HttpError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "dict",
                    "str"
                ],
                "message": [
                    "bytes",
                    "Optional[\"TrackingData\"]",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Callable[[dict], None]",
                    "Optional[str]"
                ],
                "url": [
                    "Optional[float]",
                    "dict",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Mapping[str, str]"
                ],
                "response_data": [
                    "bytes",
                    "Optional[float]",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/news.py": {
        "News.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "articles": []
            }
        },
        "News.to_json": {
            "name": "to_json",
            "location": 10,
            "return": [
                "Dict[str, int]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsArticle.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "article_url": [
                    "str",
                    "Dict[str, str]"
                ],
                "description": [
                    "str"
                ],
                "image_url": [
                    "str",
                    "int",
                    "Dict[str, List[Any]]",
                    "bool"
                ],
                "published_at": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "source": [
                    "str",
                    "Dict[str, str]"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "NewsArticle.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/patterns.py": {
        "PatternStock.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stock_metadata": [
                    "int",
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "pattern_type": [
                    "str"
                ],
                "votes": [
                    "int",
                    "Optional[bool]",
                    "bool",
                    "str"
                ]
            }
        },
        "PatternStock.to_json": {
            "name": "to_json",
            "location": 13,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatternTicker.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "pattern_type": [
                    "str",
                    "bool"
                ],
                "votes": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "DailyPatterns.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "datetime.date",
                    "datetime.datetime"
                ],
                "pattern_stocks": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "DailyPatterns.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "Optional[datetime.tzinfo]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatternVote.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "datetime.datetime",
                    "int",
                    "datetime.date"
                ],
                "ticker": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "user_id": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "int",
                    "Sequence[Sequence[int]]",
                    "datetime.datetime",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "PatternVote.from_json": {
            "name": "from_json",
            "location": 46,
            "return": [
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "dict",
                    "Optional[str]",
                    "datetime.date",
                    "str"
                ]
            }
        },
        "PatternVote.to_json": {
            "name": "to_json",
            "location": 54,
            "return": [
                "str",
                "Optional[datetime.datetime]",
                "Optional[int]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/rankings.py": {
        "RankingType.is_valid": {
            "name": "is_valid",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str, int]",
                    "Optional[Dict]"
                ],
                "ranking_type": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "Ranking.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "str",
                    "int"
                ],
                "ranking_type": [
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "time_window": [
                    "app.domain.common.TimeWindow",
                    "Dict[str, Any]"
                ],
                "rank": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Union[int, str]"
                ],
                "value": [
                    "float",
                    "int"
                ]
            }
        },
        "Ranking.to_json": {
            "name": "to_json",
            "location": 28,
            "return": [
                "bytes",
                "int",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/sectors.py": {
        "Sector.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Sector.get_name_for_id": {
            "name": "get_name_for_id",
            "location": 44,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sector_id": [
                    "str"
                ]
            }
        },
        "Sector.from_json": {
            "name": "from_json",
            "location": 50,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Sector.to_json": {
            "name": "to_json",
            "location": 53,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SectorPerformance.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Optional[List[str]]",
                    "Optional[List[\"custom_index\"]]",
                    "Optional[str]",
                    "Optional[float]",
                    "bool"
                ],
                "time_window": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[app.models.User]",
                    "Dict[str, str]"
                ],
                "percent_change": [
                    "float",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "SectorPerformance.to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/stocks.py": {
        "StockMetadata.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "int",
                    "str",
                    "bool"
                ],
                "company_name": [
                    "str",
                    "Optional[str]"
                ],
                "market_cap": [
                    "int",
                    "str",
                    "bool"
                ],
                "sector": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "StockMetadata.to_json": {
            "name": "to_json",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Type",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockMetadata.from_json": {
            "name": "from_json",
            "location": 21,
            "return": [
                "List[str]",
                "int",
                "dict",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "StockSyncStatus.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "int",
                    "bool",
                    "float"
                ],
                "synced_until": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StockSyncStatus.to_json": {
            "name": "to_json",
            "location": 35,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockDaily.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date_str": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "datetime.date",
                    "datetime.timezone"
                ],
                "open_": [
                    "int",
                    "str",
                    "float"
                ],
                "high": [
                    "int",
                    "str",
                    "float"
                ],
                "low": [
                    "int",
                    "str",
                    "float"
                ],
                "close": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "List[str]",
                    "int"
                ],
                "volume": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "StockDaily.to_json": {
            "name": "to_json",
            "location": 51,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.datetime]",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockCurrent.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "after_hours_price": [
                    "float",
                    "bool",
                    "datetime.timedelta",
                    "int"
                ],
                "after_hours_updated_time": [
                    "datetime.datetime",
                    "int"
                ],
                "current_price": [
                    "float",
                    "bool",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "high": [
                    "float",
                    "bool",
                    "datetime.timedelta"
                ],
                "last_updated_time": [
                    "datetime.datetime",
                    "int"
                ],
                "low": [
                    "float",
                    "bool",
                    "datetime.timedelta"
                ],
                "open_": [
                    "float",
                    "bool",
                    "datetime.timedelta"
                ],
                "previous_close": [
                    "float",
                    "bool",
                    "datetime.timedelta",
                    "int"
                ],
                "volume": [
                    "int"
                ]
            }
        },
        "StockCurrent.to_json": {
            "name": "to_json",
            "location": 83,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovingAverage.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "int",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]"
                ],
                "interval": [
                    "datetime.timedelta",
                    "float",
                    "datetime.datetime",
                    "bool"
                ],
                "value": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "T"
                ]
            }
        },
        "OnBalanceVolume.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "str"
                ],
                "value": [
                    "datetime.timedelta",
                    "T",
                    "str",
                    "datetime.date",
                    "float"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/users.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "full_name": [
                    "str",
                    "bool"
                ],
                "email": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "User.to_json": {
            "name": "to_json",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/domain/watchlist.py": {
        "UserWatchlist.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "watchlist_id": [
                    "int",
                    "Optional[int]",
                    "dict",
                    "str"
                ],
                "display_name": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "UserWatchlist.to_json": {
            "name": "to_json",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatchlistItem.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stock_metadata": [
                    "str",
                    "app.domain.stocks.StockMetadata",
                    "bytes"
                ],
                "position": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "UserWatchlistItem.to_json": {
            "name": "to_json",
            "location": 27,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWatchlistItem.from_json": {
            "name": "from_json",
            "location": 34,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/db_handler.py": {
        "stock_metadata": {
            "name": "stock_metadata",
            "location": 7,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "models.Payment",
                    "abilian.core.models.subjects.User",
                    "int",
                    "bool",
                    "scheduler.models.Group",
                    "salon.models.Stylist",
                    "db.models.Cowboy"
                ]
            }
        },
        "stock_tickers": {
            "name": "stock_tickers",
            "location": 17,
            "return": [
                "bool",
                "dict",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/news_handler.py": {
        "get_market_news": {
            "name": "get_market_news",
            "location": 8,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "get_stock_news": {
            "name": "get_stock_news",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "app.domain.stocks.StockMetadata",
                    "dict",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/user_handler.py": {
        "login": {
            "name": "login",
            "location": 7,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "user_info": [
                    "django.contrib.auth.models.User",
                    "bool",
                    "Optional[List[Any]]",
                    "User",
                    "tracim.models.auth.User",
                    "tildes.models.user.User"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 26,
            "return": [
                "str",
                "Optional[List[Any]]",
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "get_users": {
            "name": "get_users",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "str",
                "tracim.models.auth.User",
                "int",
                "User",
                "dict"
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/watchlist_handler.py": {
        "create_user_watchlist": {
            "name": "create_user_watchlist",
            "location": 7,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "watchlist_name": [
                    "str"
                ]
            }
        },
        "get_watchlists": {
            "name": "get_watchlists",
            "location": 11,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "delete_user_watchlist": {
            "name": "delete_user_watchlist",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "watchlist_id": [
                    "int"
                ]
            }
        },
        "get_user_watchlist_items": {
            "name": "get_user_watchlist_items",
            "location": 19,
            "return": [
                "bool",
                "app.models.GameMember"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "List[int]"
                ],
                "watchlist_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "update_user_watchlist_items": {
            "name": "update_user_watchlist_items",
            "location": 23,
            "return": [
                "bool",
                "arxiv.users.domain.User",
                "str",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "List[int]",
                    "str",
                    "list"
                ],
                "watchlist_id": [
                    "int",
                    "List[int]",
                    "str",
                    "list"
                ],
                "items": [
                    "int",
                    "List[int]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/patterns_handler.py": {
        "sync_patterns": {
            "name": "sync_patterns",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "sync_date": [
                    "bool",
                    "datetime.date",
                    "int"
                ]
            }
        },
        "get_flags": {
            "name": "get_flags",
            "location": 30,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "get_flags_for_date": {
            "name": "get_flags_for_date",
            "location": 37,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[List[int]]",
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "date": [
                    "Optional[datetime.date]",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "datetime.date"
                ]
            }
        },
        "flag_vote": {
            "name": "flag_vote",
            "location": 46,
            "return": [
                "float",
                "str",
                "Optional[float]",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "vote": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_pattern_votes_for_user": {
            "name": "get_pattern_votes_for_user",
            "location": 54,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Optional[cmk.utils.type_defs.UserId]"
                ],
                "date": [
                    "str",
                    "int",
                    "Optional[cmk.utils.type_defs.UserId]"
                ]
            }
        },
        "_sync_tickers": {
            "name": "_sync_tickers",
            "location": 61,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tickers": [
                    "bool",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "_get_sorted_metadata_for_tickers": {
            "name": "_get_sorted_metadata_for_tickers",
            "location": 70,
            "return": [
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "str",
                "search.domain.DocMeta"
            ],
            "arguments": {
                "date": [
                    "datetime.date",
                    "str"
                ],
                "pattern_tickers": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/rankings_handler.py": {
        "get_rankings": {
            "name": "get_rankings",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ranking_type": [
                    "str"
                ],
                "time_window": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Dict[int, Dict[str, float]]",
                    "Optional[List[str]]"
                ],
                "min_market_cap": [
                    "str",
                    "Union[int, float]"
                ],
                "sector": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "sync_rankings": {
            "name": "sync_rankings",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "sync_date": [
                    "bool",
                    "datetime.date",
                    "int"
                ]
            }
        },
        "handle_price_diff_percent": {
            "name": "handle_price_diff_percent",
            "location": 137,
            "return": [
                "int",
                "Union[List, Dict]"
            ],
            "arguments": {
                "dailies": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "handle_price_percent_change": {
            "name": "handle_price_percent_change",
            "location": 174,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "dailies": [
                    "int"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/sectors_handler.py": {
        "get_sector_performances": {
            "name": "get_sector_performances",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/stocks_handler.py": {
        "search_stock_metadata": {
            "name": "search_stock_metadata",
            "location": 9,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "prefix": [
                    "Optional[str]",
                    "str"
                ],
                "max_results": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_stock_metadata": {
            "name": "get_stock_metadata",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ticker": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_stock_history": {
            "name": "get_stock_history",
            "location": 38,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "Callable",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "get_stock_current": {
            "name": "get_stock_current",
            "location": 45,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "float"
                ]
            }
        },
        "get_stock_rankings": {
            "name": "get_stock_rankings",
            "location": 49,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/stocks_sync.py": {
        "sync": {
            "name": "sync",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "count": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "sync_date": [
                    "datetime.datetime",
                    "str",
                    "int"
                ]
            }
        },
        "_get_tickers_that_need_to_sync": {
            "name": "_get_tickers_that_need_to_sync",
            "location": 25,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "list",
                "raiden.utils.List[raiden.utils.Tuple[str, datetime.datetime]]",
                "Set[str]"
            ],
            "arguments": {
                "input_tickers": [
                    "search.domain.DocMeta",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "_sync_metadata": {
            "name": "_sync_metadata",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "tickers": [
                    "TextIO",
                    "List[List[int]]"
                ]
            }
        },
        "_sync_daily": {
            "name": "_sync_daily",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "tickers": [
                    "bool",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/sync/sync_handler.py": {
        "sync": {
            "name": "sync",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "has_been_synced": {
            "name": "has_been_synced",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "sync_status": [
                    "datetime.date",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "sync_job": [
                    "datetime.date",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "sync_date": [
                    "datetime.date",
                    "int",
                    "datetime.datetime",
                    "Tuple[int, int]",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/handlers/stocks/sync/patterns/flags.py": {
        "pick_tickers": {
            "name": "pick_tickers",
            "location": 1,
            "return": [
                "List[str]",
                "Tuple[int, int]",
                "bool",
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "dailies_dict": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "is_flag": {
            "name": "is_flag",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "dailies": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "has_spike": {
            "name": "has_spike",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "dailies": [
                    "str",
                    "bool"
                ],
                "percentage": [
                    "str"
                ]
            }
        },
        "is_larger_percent_difference": {
            "name": "is_larger_percent_difference",
            "location": 52,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "one": [
                    "str",
                    "int"
                ],
                "two": [
                    "str",
                    "int"
                ],
                "percent": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/app/utils/date_utils.py": {
        "next_market_day": {
            "name": "next_market_day",
            "location": 4,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {}
        },
        "previous_market_day": {
            "name": "previous_market_day",
            "location": 33,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/app/utils/list_utils.py": {
        "KeyList.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "original": [
                    "str",
                    "int",
                    "Sequence"
                ],
                "key_func": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "KeyList.__len__": {
            "name": "__len__",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyList.__getitem__": {
            "name": "__getitem__",
            "location": 9,
            "return": [
                "str",
                "Mapping[str, bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/0c2e298d1b31_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/0df1e8056918_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/2431a4e5e4b4_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/433c659f4b0a_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/78a29ba0195d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/879f34251d7d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/8ffa6d92ba0d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/a1c2bf125ac9_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/b3e4418689d3_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/b8480c0c2f30_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/bf65a720f13c_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/c6f8bb0ae305_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/ea24e1af0040_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/ed15971496bf_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/ef5ca922f72d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/migrations/versions/fb9bba796a59_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "bullwatcher-master/bullwatcher.api/scripts/postgres.py": {
        "query": {
            "name": "query",
            "location": 4,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "Callable",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "query": [
                    "Optional[int]",
                    "str",
                    "Optional[bool]",
                    "Sized"
                ]
            }
        },
        "command": {
            "name": "command",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "bullwatcher-master/bullwatcher.api/scripts/resync_all.py": {
        "_to_date_int": {
            "name": "_to_date_int",
            "location": 5,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "date": [
                    "str"
                ]
            }
        },
        "resync_all_tickers": {
            "name": "resync_all_tickers",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
{
    "burnthe.world-master/main.py": {},
    "burnthe.world-master/tests/conftest.py": {
        "camberwell": {
            "name": "camberwell",
            "location": 9,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "media": {
            "name": "media",
            "location": 16,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "burnthe.world-master/tests/test_analyse.py": {
        "test_feed_to_trips": {
            "name": "test_feed_to_trips",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "burnthe.world-master/tests/test_insta.py": {
        "test_can_get_profile": {
            "name": "test_can_get_profile",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_feed": {
            "name": "test_get_feed",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_media_location": {
            "name": "test_get_media_location",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "media": [],
                "camberwell": [
                    "Iterable[int]"
                ]
            }
        },
        "test_get_location_info": {
            "name": "test_get_location_info",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "camberwell": []
            }
        },
        "test_get_all_locations": {
            "name": "test_get_all_locations",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "burnthe.world-master/tests/test_integration.py": {
        "test_unpopular": {
            "name": "test_unpopular",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_popular": {
            "name": "test_popular",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "burnthe.world-master/tests/__init__.py": {},
    "burnthe.world-master/travelfootprint/analyse.py": {
        "feed_to_trips": {
            "name": "feed_to_trips",
            "location": 49,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "feed": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Trip.distance": {
            "name": "distance",
            "location": 21,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Summary.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trips": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Summary.total_distance": {
            "name": "total_distance",
            "location": 34,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Summary.carbon": {
            "name": "carbon",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Summary.duration": {
            "name": "duration",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "burnthe.world-master/travelfootprint/forms.py": {},
    "burnthe.world-master/travelfootprint/location.py": {},
    "burnthe.world-master/travelfootprint/settings.py": {},
    "burnthe.world-master/travelfootprint/settings_prod.py": {},
    "burnthe.world-master/travelfootprint/urls.py": {},
    "burnthe.world-master/travelfootprint/views.py": {
        "_get_context": {
            "name": "_get_context",
            "location": 13,
            "return": [
                "int",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "ProfileView.get_context_data": {
            "name": "get_context_data",
            "location": 23,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexView.get_success_url": {
            "name": "get_success_url",
            "location": 31,
            "return": [
                "str",
                "float",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "burnthe.world-master/travelfootprint/wsgi.py": {},
    "burnthe.world-master/travelfootprint/__init__.py": {},
    "burnthe.world-master/travelfootprint/insta/api.py": {
        "catch_keyerrors": {
            "name": "catch_keyerrors",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_location": {
            "name": "_location",
            "location": 51,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "basic": [
                    "reader_server.types.Feed",
                    "str"
                ],
                "info": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_location_info": {
            "name": "_location_info",
            "location": 63,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "info": [
                    "dict"
                ]
            }
        },
        "_feed_item": {
            "name": "_feed_item",
            "location": 73,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "list",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "_profile": {
            "name": "_profile",
            "location": 91,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "user_info": [
                    "dict",
                    "str",
                    "bool",
                    "Callable[[], str]"
                ]
            }
        },
        "get_profile": {
            "name": "get_profile",
            "location": 105,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "bytes",
                "tuple",
                "bool",
                "dict"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "get_feed": {
            "name": "get_feed",
            "location": 110,
            "return": [
                "bool",
                "list",
                "List[str]",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "Counter"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "core.types.UserRole",
                    "int"
                ]
            }
        },
        "get_full_location": {
            "name": "get_full_location",
            "location": 115,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "location": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "get_media_location": {
            "name": "get_media_location",
            "location": 120,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[mypy.types.Type]",
                "bool",
                "types.CommandCoroutine"
            ],
            "arguments": {
                "media": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "populate_location": {
            "name": "populate_location",
            "location": 127,
            "return": [
                "int",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "feeditem": [
                    "list",
                    "dict",
                    "NamedTuple",
                    "int",
                    "str"
                ]
            }
        },
        "_populate_location": {
            "name": "_populate_location",
            "location": 134,
            "return": [
                "typing.Union[travelfootprint.insta.types.NoLocation, travelfootprint.insta.types.BasicLocation, travelfootprint.insta.types.FullLocation]"
            ],
            "arguments": {
                "location": [
                    "List[dict]",
                    "travelfootprininsta.types.FeedItem",
                    "str"
                ],
                "media": [
                    "List[dict]",
                    "travelfootprininsta.types.FeedItem",
                    "str"
                ]
            }
        },
        "_get_location_none": {
            "name": "_get_location_none",
            "location": 141,
            "return": [
                "str",
                "float",
                "Dict[str, str]"
            ],
            "arguments": {
                "location": [
                    "travelfootprininsta.types.FeedItem",
                    "int",
                    "bool",
                    "List[Dict[str, str]]"
                ],
                "media": [
                    "travelfootprininsta.types.FeedItem",
                    "int",
                    "bool",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "_get_location_notfound": {
            "name": "_get_location_notfound",
            "location": 146,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "location": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "media": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_get_location_basic": {
            "name": "_get_location_basic",
            "location": 154,
            "return": [
                "str",
                "Optional[List[str]]",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "location": [
                    "travelfootprininsta.types.BasicLocation",
                    "str"
                ]
            }
        },
        "_get_location_full": {
            "name": "_get_location_full",
            "location": 159,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "location": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "location_populated_feed": {
            "name": "location_populated_feed",
            "location": 163,
            "return": [
                "typing.Iterator[concurrent.futures.Future]"
            ],
            "arguments": {
                "feed": [
                    "Iterator[travelfootprininsta.types.FeedItem]",
                    "str",
                    "bytes",
                    "int",
                    "types.PILVideo"
                ]
            }
        },
        "filter_feed_for_locations": {
            "name": "filter_feed_for_locations",
            "location": 168,
            "return": [
                "typing.Iterator[travelfootprint.insta.types.FeedItem]"
            ],
            "arguments": {
                "feed": [
                    "Iterator[travelfootprininsta.types.FeedItem]",
                    "str",
                    "bool",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "MyClient._extract_rhx_gis": {
            "name": "_extract_rhx_gis",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "catch_keyerrors.wrapped": {
            "name": "wrapped",
            "location": 41,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {}
        }
    },
    "burnthe.world-master/travelfootprint/insta/types.py": {},
    "burnthe.world-master/travelfootprint/insta/__init__.py": {}
}
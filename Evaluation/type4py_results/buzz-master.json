{
    "buzz-master/setup.py": {
        "read": {
            "name": "read",
            "location": 6,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "buzz-master/buzz/conc.py": {
        "_get_right": {
            "name": "_get_right",
            "location": 31,
            "return": [
                "str",
                "int",
                "bytes",
                "Iterable[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "allwords": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "window": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "multiword": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "_get_left": {
            "name": "_get_left",
            "location": 42,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ],
                "allwords": [
                    "int",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "Optional[int]"
                ],
                "multiword": [
                    "int",
                    "bool"
                ]
            }
        },
        "multiword_matches": {
            "name": "multiword_matches",
            "location": 51,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "matches": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "multiword": [
                    "Tuple[List[int], List[int]]",
                    "Union[int, float]",
                    "List[Tuple[Any, Any]]",
                    "int",
                    "List[List[str]]",
                    "Optional[str]"
                ],
                "preserve_case": [
                    "T",
                    "bool"
                ]
            }
        },
        "_concordance": {
            "name": "_concordance",
            "location": 73,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "data_in": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "reference": [
                    "str",
                    "List[str]",
                    "Dict[str, float]",
                    "bool",
                    "pandas.DataFrame",
                    "Type"
                ],
                "show": [
                    "int",
                    "str",
                    "bool",
                    "bytes",
                    "float",
                    "Dict[str, Any]"
                ],
                "n": [
                    "dict",
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "Tuple[str, str, str]",
                    "Optional[Set[str]]"
                ],
                "window": [
                    "int",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "metadata": [
                    "int",
                    "dict",
                    "Union[str, List[str]]",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "preserve_case": [
                    "Optional[float]",
                    "str",
                    "Optional[\"AbstractPurpose\"]",
                    "bool"
                ],
                "preserve_index": [
                    "bool",
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Concordance.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Dict[str, Any]]",
                    "Type[T]",
                    "Optional[str]"
                ],
                "reference": [
                    "list",
                    "List[str]",
                    "str",
                    "\"Future[None]\"",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Concordance._constructor": {
            "name": "_constructor",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concordance.view": {
            "name": "view",
            "location": 27,
            "return": [
                "bool",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/buzz/constants.py": {},
    "buzz-master/buzz/contents.py": {
        "Contents.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[[Any], None]",
                    "dict",
                    "OrderedDict",
                    "Optional[Union[str, bytes]]"
                ],
                "is_parsed": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Contents.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contents.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contents.__bool__": {
            "name": "__bool__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contents._try_to_get_same": {
            "name": "_try_to_get_same",
            "location": 26,
            "return": [
                "int",
                "Set[str]",
                "List[int]",
                "List[List[int]]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Dict[str, str]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "Contents.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict"
                ]
            }
        },
        "Contents.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Contents.__delitem__": {
            "name": "__delitem__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "Contents.__setitem__": {
            "name": "__setitem__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "T",
                    "raiden.utils.SecreHash"
                ],
                "v": [
                    "int",
                    "str",
                    "T",
                    "raiden.utils.SecreHash"
                ]
            }
        },
        "Contents.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "Iterable[T]"
                ]
            }
        },
        "Contents.insert": {
            "name": "insert",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "v": [
                    "bool",
                    "Set[str]",
                    "int",
                    "Dict[str, Tuple[int, int]]"
                ]
            }
        },
        "Contents.load": {
            "name": "load",
            "location": 78,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/buzz/corpus.py": {
        "Collection.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Collection.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.new": {
            "name": "new",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Collection.parse": {
            "name": "parse",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str"
                ],
                "multiprocess": [
                    "str",
                    "int"
                ],
                "constituencies": [
                    "str",
                    "int"
                ],
                "speakers": [
                    "str",
                    "int"
                ],
                "just_missing": [
                    "str",
                    "int"
                ]
            }
        },
        "Collection.load": {
            "name": "load",
            "location": 86,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[T], List[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.extract": {
            "name": "extract",
            "location": 94,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "multiprocess": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "coordinates": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "page_numbers": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "output": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "in_collection": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Corpus.__len__": {
            "name": "__len__",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__lt__": {
            "name": "__lt__",
            "location": 143,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Corpus.__eq__": {
            "name": "__eq__",
            "location": 148,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Corpus.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__getitem__": {
            "name": "__getitem__",
            "location": 158,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "Corpus.__delitem__": {
            "name": "__delitem__",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "Corpus.__setitem__": {
            "name": "__setitem__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "T",
                    "raiden.utils.SecreHash"
                ],
                "v": [
                    "int",
                    "str",
                    "T",
                    "raiden.utils.SecreHash"
                ]
            }
        },
        "Corpus.insert": {
            "name": "insert",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "v": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "Corpus.tgrep": {
            "name": "tgrep",
            "location": 173,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "float",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "Corpus.table": {
            "name": "table",
            "location": 179,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "subcorpora": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Corpus.depgrep": {
            "name": "depgrep",
            "location": 192,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "Corpus.parse": {
            "name": "parse",
            "location": 198,
            "return": [
                "List[str]",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str"
                ],
                "multiprocess": [
                    "str",
                    "int"
                ],
                "constituencies": [
                    "str",
                    "int"
                ],
                "speakers": [
                    "str",
                    "int"
                ]
            }
        },
        "Corpus.load": {
            "name": "load",
            "location": 222,
            "return": [
                "bool",
                "raiden.constants.Environment",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.vector": {
            "name": "vector",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.to_spacy": {
            "name": "to_spacy",
            "location": 252,
            "return": [
                "str",
                "IO[bytes]",
                "Optional[Dict[str, Any]]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "Callable[..., bool]",
                    "Optional[str]"
                ],
                "concat": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        },
        "Corpus._get_subcorpora_and_files": {
            "name": "_get_subcorpora_and_files",
            "location": 275,
            "return": [
                "str",
                "Optional[List[str]]",
                "Dict[Tuple, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.just": {
            "name": "just",
            "location": 309,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.skip": {
            "name": "skip",
            "location": 316,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.see": {
            "name": "see",
            "location": 323,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subcorpus.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SliceHelper.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "bool",
                    "float"
                ],
                "inverse": [
                    "int",
                    "bool",
                    "float"
                ],
                "see": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SliceHelper.__getattr__": {
            "name": "__getattr__",
            "location": 349,
            "return": [
                "List[str]",
                "Dict[str, Dict[str, int]]",
                "bool",
                "str",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "int",
                    "str",
                    "Sequence[object]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "SliceHelper.__call__": {
            "name": "__call__",
            "location": 353,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "Filter",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "T",
                    "int",
                    "Optional[Sequence[Any]]"
                ]
            }
        }
    },
    "buzz-master/buzz/dashview.py": {
        "_make_datatable": {
            "name": "_make_datatable",
            "location": 38,
            "return": [
                "Type"
            ],
            "arguments": {
                "df": [
                    "Optional[str]"
                ],
                "idx": [
                    "Optional[str]",
                    "int",
                    "type",
                    "float",
                    "Hashable"
                ]
            }
        },
        "_bar_chart": {
            "name": "_bar_chart",
            "location": 57,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "row_name": [
                    "str",
                    "int",
                    "dict"
                ],
                "row": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "_line_chart": {
            "name": "_line_chart",
            "location": 61,
            "return": [
                "dict",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "row_name": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "row": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_area_chart": {
            "name": "_area_chart",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "row_name": [
                    "str",
                    "callable",
                    "List[str]",
                    "bool",
                    "List[Tuple[str, int]]"
                ],
                "row": [
                    "str",
                    "callable",
                    "List[str]",
                    "bool",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "_heatmap": {
            "name": "_heatmap",
            "location": 78,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "df": [
                    "Set[str]",
                    "int"
                ]
            }
        },
        "_df_to_plot": {
            "name": "_df_to_plot",
            "location": 91,
            "return": [
                "bool",
                "Dict[str, float]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "kind": [
                    "str",
                    "dict",
                    "set"
                ],
                "idx": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "_df_to_figure": {
            "name": "_df_to_figure",
            "location": 108,
            "return": [
                "bytes",
                "dict",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "df": [
                    "str",
                    "bool",
                    "float",
                    "List[List[str]]"
                ],
                "kind": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_make_component": {
            "name": "_make_component",
            "location": 125,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "kind": [
                    "Union[Dict, Tuple]",
                    "dict"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "idx": []
            }
        },
        "DashSite.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "DashSite.add": {
            "name": "add",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "List[str]",
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "data": [
                    "dict",
                    "str"
                ],
                "idx": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "DashSite.run": {
            "name": "run",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DashSite.kill": {
            "name": "kill",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DashSite.reload": {
            "name": "reload",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DashSite.remove": {
            "name": "remove",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Union[int, str]",
                    "NameError",
                    "int",
                    "list"
                ]
            }
        },
        "DashSite.empty": {
            "name": "empty",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DashSite.run._flask_thread": {
            "name": "_flask_thread",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "buzz-master/buzz/dataset.py": {
        "Dataset._constructor": {
            "name": "_constructor",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[Dict]"
                ],
                "reference": [
                    "str",
                    "Optional[str]",
                    "BaseException"
                ],
                "name": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.tgrep": {
            "name": "tgrep",
            "location": 70,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "float",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "Dataset.depgrep": {
            "name": "depgrep",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "Dataset.conc": {
            "name": "conc",
            "location": 82,
            "return": [
                "bool",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.table": {
            "name": "table",
            "location": 99,
            "return": [
                "bool",
                "Optional[Sequence[Any]]",
                "int",
                "pandas.DataFrame",
                "List[Dict]",
                "Dict[str, Any]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.view": {
            "name": "view",
            "location": 102,
            "return": [
                "Container[T]",
                "str",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.sentences": {
            "name": "sentences",
            "location": 108,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.sent": {
            "name": "sent",
            "location": 114,
            "return": [
                "Optional[Any]",
                "str",
                "bool",
                "recidiviz.utils.regions.Region",
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Dataset.formality": {
            "name": "formality",
            "location": 121,
            "return": [
                "float",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.wordcloud": {
            "name": "wordcloud",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "pandas.DataFrame",
                    "Deque",
                    "bytes",
                    "Union[str, List[str]]",
                    "Optional[numpy.ndarray]"
                ],
                "preserve_case": [
                    "str",
                    "List[dict]",
                    "pandas._ArrayLike",
                    "trezor.utils.Writer",
                    "bool"
                ]
            }
        },
        "Dataset.describe": {
            "name": "describe",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "depgrep_query": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "queryset": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "drop_self": [
                    "str",
                    "bool"
                ],
                "multiprocess": [
                    "List[int]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Dataset.set": {
            "name": "set",
            "location": 177,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.tfidf_by": {
            "name": "tfidf_by",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "List[str]",
                    "pandas.DataFrame",
                    "Collection[\"Issue\"]"
                ],
                "n_top_members": [
                    "int",
                    "Union[int, str]"
                ],
                "show": [
                    "int",
                    "List[str]",
                    "pandas.DataFrame",
                    "Collection[\"Issue\"]"
                ]
            }
        },
        "Dataset.tfidf_score": {
            "name": "tfidf_score",
            "location": 194,
            "return": [
                "bool",
                "utils.Node",
                "List[int]",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "int",
                    "List[str]",
                    "List[int]",
                    "list"
                ],
                "show": [
                    "str",
                    "int",
                    "List[str]",
                    "List[int]",
                    "list"
                ],
                "text": [
                    "str",
                    "int",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "Dataset.prototypical": {
            "name": "prototypical",
            "location": 202,
            "return": [
                "Tuple[numpy.ndarray]",
                "list",
                "trezor.utils.Writer",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "list",
                    "List[int]",
                    "numpy.ndarray",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "show": [
                    "list",
                    "List[int]",
                    "numpy.ndarray",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "n_top_members": [
                    "list",
                    "List[int]",
                    "numpy.ndarray",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "only_correct": [
                    "list",
                    "List[int]",
                    "numpy.ndarray",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "top": [
                    "list",
                    "List[int]",
                    "numpy.ndarray",
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Dataset.to_spacy": {
            "name": "to_spacy",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "Dataset.vector": {
            "name": "vector",
            "location": 222,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.similarity": {
            "name": "similarity",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "save_as": [
                    "str",
                    "bytes",
                    "Optional[Tuple[str, int]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Dataset.site": {
            "name": "site",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Dataset.save": {
            "name": "save",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "savename": [
                    "int",
                    "Union[bytes, str]",
                    "list",
                    "bool"
                ],
                "use": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Dataset.load": {
            "name": "load",
            "location": 289,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "loadname": [
                    "str"
                ],
                "multiprocess": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "Iterable"
                ]
            }
        },
        "Dataset.content_table": {
            "name": "content_table",
            "location": 309,
            "return": [
                "int",
                "str",
                "bool",
                "pyats.topology.Device"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "int",
                    "list",
                    "List[List[str]]",
                    "bool",
                    "Iterable[\"Entity\"]",
                    "employees.common.constants.ColumnSettings"
                ],
                "subcorpora": [
                    "float",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ],
                "sort": [
                    "Optional[int]",
                    "Dict[int, Dict[int, Any]]"
                ],
                "top": [
                    "Optional[int]",
                    "Dict[int, Dict[int, Any]]"
                ],
                "relative": [
                    "bool"
                ],
                "keyness": [
                    "bool"
                ],
                "preserve_case": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "show_entities": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "show_frequencies": [
                    "bool",
                    "float"
                ]
            }
        },
        "Dataset.topology": {
            "name": "topology",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bool"
                ],
                "wordlist": [
                    "int",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bool"
                ],
                "min_occur": [
                    "int",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "buzz-master/buzz/exceptions.py": {},
    "buzz-master/buzz/extract.py": {
        "_pdf_to_tif": {
            "name": "_pdf_to_tif",
            "location": 10,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "bool"
                ]
            }
        },
        "_extract": {
            "name": "_extract",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "language": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "multiprocess": [
                    "bool",
                    "list"
                ],
                "coordinates": [
                    "bool",
                    "list"
                ],
                "page_numbers": [
                    "bool",
                    "list"
                ],
                "output": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "buzz-master/buzz/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "File.__ne__": {
            "name": "__ne__",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "File.__iter__": {
            "name": "__iter__",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.to_spacy": {
            "name": "to_spacy",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "File.__len__": {
            "name": "__len__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__bool__": {
            "name": "__bool__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.table": {
            "name": "table",
            "location": 53,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "subcorpora": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "File.load": {
            "name": "load",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.read": {
            "name": "read",
            "location": 84,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/buzz/formality.py": {
        "FormalityScorer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FormalityScorer.token": {
            "name": "token",
            "location": 55,
            "return": [
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "float",
                    "str",
                    "trezor.utils.Writer"
                ],
                "xpos": [
                    "dict"
                ]
            }
        },
        "FormalityScorer._formality_by_sent_length": {
            "name": "_formality_by_sent_length",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "FormalityScorer._sent_formality": {
            "name": "_sent_formality",
            "location": 93,
            "return": [
                "int",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "int",
                    "List[tuple]",
                    "pandas.DataFrame",
                    "float",
                    "List[float]",
                    "list"
                ]
            }
        },
        "FormalityScorer.sentences": {
            "name": "sentences",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "FormalityScorer.text": {
            "name": "text",
            "location": 115,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "buzz-master/buzz/html.py": {
        "MetadataStripper.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "speakers": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetadataStripper.handle_data": {
            "name": "handle_data",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "InputParser.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "speakers": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "InputParser._has_sent_meta": {
            "name": "_has_sent_meta",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]"
                ],
                "attrs": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "InputParser.feed": {
            "name": "feed",
            "location": 57,
            "return": [
                "str",
                "int",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "InputParser.handle_data": {
            "name": "handle_data",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "str",
                    "TextIO",
                    "Dict[str, str]",
                    "Union['Contributor', 'Coverage']"
                ]
            }
        }
    },
    "buzz-master/buzz/layouts.py": {},
    "buzz-master/buzz/multi.py": {
        "how_many": {
            "name": "how_many",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "multiprocess": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 29,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[str, Any]",
                "OrderedDict"
            ],
            "arguments": {
                "files": [
                    "List[Dict[str, str]]",
                    "List[Dict[str, Any]]",
                    "str",
                    "MutableMapping"
                ],
                "position": [
                    "List[Dict[str, str]]",
                    "List[Dict[str, Any]]",
                    "str",
                    "MutableMapping"
                ],
                "order": [
                    "str",
                    "int",
                    "Optional[MutableMapping[str, Any]]"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 49,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "files": [
                    "str",
                    "List[Dict[str, str]]",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ],
                "position": [
                    "str",
                    "List[Dict[str, str]]",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 67,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]",
                "OrderedDict",
                "List[int]"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "queries": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool"
                ],
                "position": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "Optional[str]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "position": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "Optional[str]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "save_as": [
                    "str",
                    "float",
                    "bool"
                ],
                "corpus_name": [
                    "str",
                    "float",
                    "bool"
                ],
                "language": [
                    "str",
                    "float",
                    "bool"
                ],
                "constituencies": [
                    "str",
                    "float",
                    "bool"
                ],
                "speakers": [
                    "str",
                    "float",
                    "bool"
                ],
                "plain_path": [
                    "str",
                    "float",
                    "bool"
                ],
                "hocr": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "topology": {
            "name": "topology",
            "location": 103,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "list"
                ],
                "queries": [
                    "dict",
                    "Iterable",
                    "Dict[str, Any]"
                ],
                "position": [
                    "dict",
                    "Iterable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "buzz-master/buzz/parse.py": {
        "_strip_metadata": {
            "name": "_strip_metadata",
            "location": 17,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "plain": [
                    "int",
                    "Callable",
                    "str"
                ],
                "speakers": [
                    "str",
                    "int"
                ]
            }
        },
        "to_stripped": {
            "name": "to_stripped",
            "location": 27,
            "return": [
                "OrderedDict",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, str]",
                "int",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "hocr": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_normalise_word": {
            "name": "_normalise_word",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "float"
                ],
                "wrap": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_get_line_with_meta": {
            "name": "_get_line_with_meta",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "start": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "plain": [
                    "int",
                    "str",
                    "T"
                ],
                "stripped": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_get_governor_id": {
            "name": "_get_governor_id",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "_strip_punct": {
            "name": "_strip_punct",
            "location": 84,
            "return": [
                "int",
                "List[float]",
                "Tuple[int]"
            ],
            "arguments": {
                "span": [
                    "int",
                    "Sequence[numpy.ndarray]",
                    "float",
                    "str",
                    "Callable[[str], object]"
                ]
            }
        },
        "_make_misc_field": {
            "name": "_make_misc_field",
            "location": 91,
            "return": [
                "Optional[List[str]]",
                "numpy.ndarray",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "token_meta": [
                    "bool",
                    "Optional[object]",
                    "str"
                ],
                "all_meta": [
                    "str",
                    "int"
                ]
            }
        },
        "_process_string": {
            "name": "_process_string",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "plain": [
                    "str",
                    "int"
                ],
                "path": [
                    "str"
                ],
                "save_as": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable[str]",
                    "Iterable[Dict]"
                ],
                "corpus_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable[str]",
                    "Iterable[Dict]"
                ],
                "language": [
                    "str",
                    "Sequence[int]"
                ],
                "constituencies": [
                    "str",
                    "Sequence[int]"
                ],
                "speakers": [
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "corpus_path": [
                    "str",
                    "bool"
                ],
                "hocr": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Union[List, str]"
                ]
            }
        },
        "_get_token_meta": {
            "name": "_get_token_meta",
            "location": 158,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "plain": [
                    "list",
                    "str",
                    "bytes",
                    "int",
                    "Callable"
                ],
                "word": [
                    "str",
                    "Union[str, List]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_get_tag_morph": {
            "name": "_get_tag_morph",
            "location": 173,
            "return": [
                "str",
                "IO",
                "cmk.utils.type_defs.SectionName",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "word": [
                    "List[List[Any]]",
                    "Optional[str]",
                    "list",
                    "Union[str, List[Any]]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "_process_sent": {
            "name": "_process_sent",
            "location": 179,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "sent_index": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "sent": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "file_meta": [
                    "str",
                    "bool",
                    "List[Tuple[str, str, str]]"
                ],
                "plain": [
                    "int",
                    "str"
                ],
                "stripped_data": [
                    "bool",
                    "list",
                    "str"
                ],
                "language": [
                    "bool",
                    "list",
                    "str"
                ],
                "constituencies": [
                    "bool",
                    "list",
                    "str"
                ],
                "speakers": [
                    "bool",
                    "str",
                    "Tuple[int]",
                    "int"
                ]
            }
        },
        "_parse_cmd_line": {
            "name": "_parse_cmd_line",
            "location": 227,
            "return": [
                "Dict[str, Any]",
                "argparse.Namespace",
                "\"Sequence\"",
                "\"Alternate\""
            ],
            "arguments": {}
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "bool",
                    "float"
                ],
                "multiprocess": [
                    "int",
                    "bool",
                    "float"
                ],
                "constituencies": [
                    "int",
                    "bool",
                    "float"
                ],
                "speakers": [
                    "int",
                    "bool",
                    "float"
                ],
                "just_missing": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Parser._spacy_parse": {
            "name": "_spacy_parse",
            "location": 267,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._best_corpus_to_parse": {
            "name": "_best_corpus_to_parse",
            "location": 316,
            "return": [
                "numpy.ndarray",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "Optional[bool]",
                    "list",
                    "float"
                ]
            }
        },
        "Parser.run": {
            "name": "run",
            "location": 321,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "Optional[float]",
                    "Optional[str]",
                    "str"
                ],
                "save_as": [
                    "str",
                    "TextIO",
                    "dict",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ],
                "files": [
                    "int",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "buzz-master/buzz/plot.py": {
        "filler": {
            "name": "filler",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "df": [
                    "BaseException"
                ]
            }
        },
        "p_string_formatter": {
            "name": "p_string_formatter",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "slice"
                ],
                "using_tex": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "isint": {
            "name": "isint",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "rotate_degrees": {
            "name": "rotate_degrees",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rotation": [
                    "Collection[int]",
                    "Optional[str]",
                    "Union[str, Callable[[], str]]",
                    "Optional[List[str]]",
                    "Union[str, bool]"
                ],
                "labels": [
                    "dict"
                ]
            }
        },
        "truncate_colormap": {
            "name": "truncate_colormap",
            "location": 56,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "cmap": [
                    "List[int]",
                    "numpy.ndarray"
                ],
                "minval": [
                    "List[int]",
                    "numpy.ndarray"
                ],
                "maxval": [
                    "List[int]",
                    "numpy.ndarray"
                ],
                "n": [
                    "List[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "get_savename": {
            "name": "get_savename",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "imagefolder": [
                    "str",
                    "Union[str, dict]"
                ],
                "save": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "title": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "ext": [
                    "str",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "rename_data_with_total": {
            "name": "rename_data_with_total",
            "location": 84,
            "return": [
                "str",
                "int",
                "Generator",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "dataframe": [
                    "bool",
                    "Sequence[numpy.ndarray]",
                    "List[str]",
                    "List[float]",
                    "Dict[str, Any]"
                ],
                "was_series": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "using_tex": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "absolutes": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "auto_explode": {
            "name": "auto_explode",
            "location": 120,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "dataframe": [
                    "List[str]",
                    "list",
                    "Tuple[int]",
                    "List[int]",
                    "Tuple[List, List, List]",
                    "Iterable[str]",
                    "str"
                ],
                "tinput": [
                    "float",
                    "int",
                    "Optional[List[\"CustomLineItemDraft\"]]"
                ],
                "was_series": [
                    "bool",
                    "Union[None, str, Iterable[str]]",
                    "float",
                    "List[str]",
                    "List[Dict[str, str]]"
                ],
                "num_to_plot": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "str",
                    "Union[None, int]"
                ]
            }
        },
        "plotter": {
            "name": "plotter",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "title": [
                    "bool",
                    "Optional[List[int]]"
                ],
                "kind": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "List[List[int]]",
                    "list"
                ],
                "x_label": [
                    "str",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "y_label": [
                    "str",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "style": [
                    "dict",
                    "int"
                ],
                "figsize": [
                    "numpy.ndarray",
                    "list",
                    "pandas.DataFrame",
                    "int",
                    "float"
                ],
                "save": [
                    "str",
                    "int"
                ],
                "legend_pos": [
                    "str",
                    "List[str]"
                ],
                "reverse_legend": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "num_to_plot": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "tex": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "colours": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "cumulative": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "pie_legend": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "List[List[int]]",
                    "list"
                ],
                "partial_pie": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "show_totals": [
                    "str",
                    "List[str]",
                    "bool",
                    "pandas._FilePathOrBuffer"
                ],
                "transparent": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "output_format": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "black_and_white": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "List[List[int]]",
                    "list"
                ],
                "show_p_val": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "indices": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "transpose": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ],
                "rot": [
                    "Sequence[int]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "multiplotter": {
            "name": "multiplotter",
            "location": 933,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [],
                "leftdict": [
                    "str",
                    "float",
                    "List[int]",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "int"
                ],
                "rightdict": [
                    "T",
                    "dict",
                    "bytes"
                ]
            }
        },
        "plotter.dummy_context_mgr.__enter__": {
            "name": "__enter__",
            "location": 657,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "plotter.dummy_context_mgr.__exit__": {
            "name": "__exit__",
            "location": 659,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "one": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "two": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "three": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "buzz-master/buzz/search.py": {
        "Searcher._understand_input_data": {
            "name": "_understand_input_data",
            "location": 20,
            "return": [
                "int",
                "bool",
                "pandas.DataFrame",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "corpus": []
            }
        },
        "Searcher._tgrep_iteration": {
            "name": "_tgrep_iteration",
            "location": 42,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "Searcher.depgrep": {
            "name": "depgrep",
            "location": 93,
            "return": [
                "List[int]",
                "List[str]",
                "List[float]",
                "int",
                "str",
                "Set[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str"
                ],
                "positions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "position": [
                    "dict"
                ]
            }
        },
        "Searcher._depgrep_iteration": {
            "name": "_depgrep_iteration",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "piece": [
                    "str",
                    "list",
                    "callable",
                    "int"
                ],
                "query": [
                    "bool",
                    "AnyStr",
                    "Dict[str, Any]"
                ],
                "position": [
                    "str",
                    "list",
                    "callable",
                    "int"
                ],
                "multiword": [
                    "List[dict]",
                    "bytes",
                    "bool",
                    "str",
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "Searcher.run": {
            "name": "run",
            "location": 145,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "List[int]",
                    "IO[str]"
                ],
                "target": [
                    "Iterable[Any]"
                ],
                "query": [
                    "Union[int, slice]"
                ],
                "case_sensitive": [
                    "str",
                    "AsyncIterator[T]",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "inverse": [
                    "int",
                    "str",
                    "type"
                ],
                "position": [
                    "str",
                    "bool",
                    "dict"
                ],
                "multiword": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "buzz-master/buzz/slice.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "float",
                    "Union[str, float]",
                    "tuple"
                ],
                "column": [
                    "int",
                    "List[Optional['Cell']]",
                    "str",
                    "List[str]",
                    "Callable"
                ],
                "inverse": [
                    "int",
                    "float",
                    "Union[str, float]",
                    "tuple"
                ],
                "distance": [
                    "int",
                    "float",
                    "Union[str, float]",
                    "tuple"
                ]
            }
        },
        "Filter._make_column_to_match_against": {
            "name": "_make_column_to_match_against",
            "location": 59,
            "return": [
                "int",
                "str",
                "pandas.DataFrame",
                "set",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "str",
                    "dict",
                    "bool"
                ],
                "entry": [
                    "int",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName"
                ]
            }
        },
        "Filter._normalise_entry": {
            "name": "_normalise_entry",
            "location": 88,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "int",
                "Set[str]",
                "Optional[dict]",
                "str",
                "list"
            ],
            "arguments": {
                "entry": [
                    "list",
                    "str",
                    "Sequence[int]",
                    "List[str]"
                ],
                "case": [
                    "List[str]",
                    "List[\"LoadableRelation\"]",
                    "Sequence[int]",
                    "bytes",
                    "list"
                ]
            }
        },
        "Filter._make_bool_index": {
            "name": "_make_bool_index",
            "location": 100,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "bool",
                "Optional[float]",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "bool",
                    "Iterable[\"Entity\"]",
                    "Tuple[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "strung": [
                    "Optional[Dict]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "exact_match": [
                    "str",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "multiword": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Filter._normalise": {
            "name": "_normalise",
            "location": 121,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "float"
                ],
                "case": [
                    "int",
                    "float"
                ],
                "exact_match": [
                    "int",
                    "float"
                ]
            }
        },
        "Filter.__call__": {
            "name": "__call__",
            "location": 144,
            "return": [
                "IO",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int"
                ],
                "case": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ],
                "exact_match": [
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "multiword": [
                    "Optional[Union[int, slice]]",
                    "List[int]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "Filter.__getattr__": {
            "name": "__getattr__",
            "location": 177,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "Interim.by": {
            "name": "by",
            "location": 192,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interim.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "tuple",
                    "bool",
                    "Type",
                    "Callable[..., Awaitable]",
                    "List[str]",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "Proto.by": {
            "name": "by",
            "location": 225,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proto.showing": {
            "name": "showing",
            "location": 232,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proto.__call__": {
            "name": "__call__",
            "location": 238,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "int",
                    "Union[int, float]",
                    "List[str]",
                    "bool"
                ],
                "top": [
                    "int",
                    "Union[int, float]",
                    "Dict[str, float]"
                ],
                "n_top_members": [
                    "int",
                    "Union[int, float]",
                    "Dict[str, float]"
                ],
                "only_correct": [
                    "int",
                    "Union[int, float]",
                    "Dict[str, float]"
                ]
            }
        },
        "Finder.__call__": {
            "name": "__call__",
            "location": 257,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Slice.__getattr__": {
            "name": "__getattr__",
            "location": 268,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Slice._grab": {
            "name": "_grab",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice._validate": {
            "name": "_validate",
            "location": 284,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Just._grab": {
            "name": "_grab",
            "location": 295,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "colname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Prototypical._grab": {
            "name": "_grab",
            "location": 305,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "colname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Skip._grab": {
            "name": "_grab",
            "location": 315,
            "return": [
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": [],
                "colname": [
                    "Callable",
                    "Optional[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "See._grab": {
            "name": "_grab",
            "location": 325,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "colname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Nearby.__call__": {
            "name": "__call__",
            "location": 330,
            "return": [
                "Set[str]",
                "Optional[Union[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "List[Tuple[str, str]]"
                ],
                "case": [
                    "List[Tuple[str, str]]"
                ],
                "exact_match": [
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Near._grab": {
            "name": "_grab",
            "location": 362,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "colname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Bigrams._grab": {
            "name": "_grab",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "colname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "buzz-master/buzz/table.py": {
        "Table.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Any",
                    "int",
                    "dict"
                ],
                "reference": [
                    "list",
                    "List[str]",
                    "str",
                    "\"Future[None]\"",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Table._constructor": {
            "name": "_constructor",
            "location": 21,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.view": {
            "name": "view",
            "location": 24,
            "return": [
                "bool",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.sort": {
            "name": "sort",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "by": [
                    "float",
                    "dict",
                    "int",
                    "bytearray"
                ],
                "keep_stats": [
                    "float",
                    "dict",
                    "int",
                    "bytearray"
                ],
                "remove_above_p": [
                    "float",
                    "dict",
                    "int",
                    "bytearray"
                ]
            }
        },
        "Table.plot": {
            "name": "plot",
            "location": 37,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.chart": {
            "name": "chart",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.multichart": {
            "name": "multichart",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "leftdict": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rightdict": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Table.relative": {
            "name": "relative",
            "location": 52,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "denom": [
                    "bool",
                    "Exception",
                    "Dict[str, Any]",
                    "int",
                    "float"
                ]
            }
        },
        "Table.square": {
            "name": "square",
            "location": 69,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Table.site": {
            "name": "site",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "Optional[str]",
                    "str"
                ],
                "kind": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "Table.keyness": {
            "name": "keyness",
            "location": 90,
            "return": [
                "tuple",
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "self": [],
                "keyness": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "reference": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        }
    },
    "buzz-master/buzz/tabview.py": {
        "colorama_data": {
            "name": "colorama_data",
            "location": 31,
            "return": [],
            "arguments": {
                "lines": [],
                "conc_data": []
            }
        },
        "KEY_CTRL": {
            "name": "KEY_CTRL",
            "location": 71,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "addstr": {
            "name": "addstr",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "insstr": {
            "name": "insstr",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "csv_sniff": {
            "name": "csv_sniff",
            "location": 1413,
            "return": [],
            "arguments": {
                "data": [],
                "enc": []
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 1428,
            "return": [],
            "arguments": {
                "data": [],
                "enc": [],
                "delim": []
            }
        },
        "np_decode": {
            "name": "np_decode",
            "location": 1467,
            "return": [],
            "arguments": {
                "inp_str": [],
                "codec": []
            }
        },
        "py2_list_to_unicode": {
            "name": "py2_list_to_unicode",
            "location": 1476,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "pad_data": {
            "name": "pad_data",
            "location": 1494,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "readme": {
            "name": "readme",
            "location": 1508,
            "return": [],
            "arguments": {}
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 1516,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "main": {
            "name": "main",
            "location": 1543,
            "return": [],
            "arguments": {
                "stdscr": []
            }
        },
        "get_index_depth": {
            "name": "get_index_depth",
            "location": 1555,
            "return": [],
            "arguments": {
                "data": [],
                "freeze": []
            }
        },
        "view": {
            "name": "view",
            "location": 1571,
            "return": [],
            "arguments": {
                "data": [],
                "enc": [],
                "start_pos": [],
                "column_width": [],
                "column_gap": [],
                "colours": [],
                "trunc_char": [],
                "column_widths": [],
                "search_str": [],
                "persist": [],
                "trunc_left": [],
                "double_width": [],
                "delimiter": [],
                "orient": [],
                "align_right": [],
                "df": []
            }
        },
        "ReloadException.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "start_pos": [],
                "column_width": [],
                "column_gap": [],
                "column_widths": [],
                "search_str": []
            }
        },
        "MaybeTruncatedString.__new__": {
            "name": "__new__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "width": [],
                "trunc_char": [],
                "trunc_left": [],
                "background": [],
                "colgap": []
            }
        },
        "Viewer.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.show_info": {
            "name": "show_info",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer._is_num": {
            "name": "_is_num",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "cell": []
            }
        },
        "Viewer._init_double_width": {
            "name": "_init_double_width",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "dw": []
            }
        },
        "Viewer._make_colour_dict": {
            "name": "_make_colour_dict",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer._init_column_widths": {
            "name": "_init_column_widths",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "cw": [],
                "cws": []
            }
        },
        "Viewer.column_xw": {
            "name": "column_xw",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "index": []
            }
        },
        "Viewer.quit": {
            "name": "quit",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.reload": {
            "name": "reload",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.consume_modifier": {
            "name": "consume_modifier",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "Viewer.down": {
            "name": "down",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.up": {
            "name": "up",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.left": {
            "name": "left",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.right": {
            "name": "right",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.page_down": {
            "name": "page_down",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.page_up": {
            "name": "page_up",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.page_right": {
            "name": "page_right",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.page_left": {
            "name": "page_left",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.mark": {
            "name": "mark",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.goto_mark": {
            "name": "goto_mark",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.home": {
            "name": "home",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.goto_y": {
            "name": "goto_y",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Viewer.goto_row": {
            "name": "goto_row",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.goto_x": {
            "name": "goto_x",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Viewer.goto_col": {
            "name": "goto_col",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.goto_yx": {
            "name": "goto_yx",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "y": [],
                "x": []
            }
        },
        "Viewer.line_home": {
            "name": "line_home",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.line_end": {
            "name": "line_end",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.find_match_line": {
            "name": "find_match_line",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "concordance": [],
                "filename": [],
                "s": [],
                "predict": []
            }
        },
        "Viewer.show_cell": {
            "name": "show_cell",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer._search_validator": {
            "name": "_search_validator",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "Viewer.search": {
            "name": "search",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.search_results": {
            "name": "search_results",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "rev": [],
                "look_in_cur": []
            }
        },
        "Viewer.search_results_prev": {
            "name": "search_results_prev",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "rev": [],
                "look_in_cur": []
            }
        },
        "Viewer._reverse_yp_xp": {
            "name": "_reverse_yp_xp",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer._reverse_data": {
            "name": "_reverse_data",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer._search_cur_line_r": {
            "name": "_search_cur_line_r",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer._search_cur_line_l": {
            "name": "_search_cur_line_l",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer._search_next_line_to_end": {
            "name": "_search_next_line_to_end",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer._search_next_line_from_beg": {
            "name": "_search_next_line_from_beg",
            "location": 652,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer.help": {
            "name": "help",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.toggle_header": {
            "name": "toggle_header",
            "location": 673,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.column_gap_down": {
            "name": "column_gap_down",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.column_gap_up": {
            "name": "column_gap_up",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.column_width_all_down": {
            "name": "column_width_all_down",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.column_width_all_up": {
            "name": "column_width_all_up",
            "location": 708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.column_width_down": {
            "name": "column_width_down",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.column_width_up": {
            "name": "column_width_up",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.sort_by_column_numeric": {
            "name": "sort_by_column_numeric",
            "location": 725,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.sort_by_column_numeric_reverse": {
            "name": "sort_by_column_numeric_reverse",
            "location": 731,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.sort_by_column": {
            "name": "sort_by_column",
            "location": 739,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.sort_by_column_reverse": {
            "name": "sort_by_column_reverse",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.sort_by_column_natural": {
            "name": "sort_by_column_natural",
            "location": 747,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.sort_by_column_natural_reverse": {
            "name": "sort_by_column_natural_reverse",
            "location": 754,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.float_string_key": {
            "name": "float_string_key",
            "location": 762,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Viewer.toggle_column_width": {
            "name": "toggle_column_width",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.set_current_column_width": {
            "name": "set_current_column_width",
            "location": 789,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.yank_cell": {
            "name": "yank_cell",
            "location": 802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.define_keys": {
            "name": "define_keys",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.run": {
            "name": "run",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.handle_keys": {
            "name": "handle_keys",
            "location": 887,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.handle_modifier": {
            "name": "handle_modifier",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "mod": []
            }
        },
        "Viewer.resize": {
            "name": "resize",
            "location": 923,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.num_columns_fwd": {
            "name": "num_columns_fwd",
            "location": 931,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Viewer.num_columns_rev": {
            "name": "num_columns_rev",
            "location": 944,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Viewer.recalculate_layout": {
            "name": "recalculate_layout",
            "location": 955,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.location_string": {
            "name": "location_string",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "yp": [],
                "xp": []
            }
        },
        "Viewer.display": {
            "name": "display",
            "location": 995,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.strpad": {
            "name": "strpad",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "width": [],
                "align_right": [],
                "trunc_left": []
            }
        },
        "Viewer.hdrstr": {
            "name": "hdrstr",
            "location": 1162,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "width": [],
                "align_right": []
            }
        },
        "Viewer.cellstr": {
            "name": "cellstr",
            "location": 1172,
            "return": [],
            "arguments": {
                "self": [],
                "y": [],
                "x": [],
                "width": [],
                "align_right": [],
                "trunc_left": []
            }
        },
        "Viewer._get_column_widths": {
            "name": "_get_column_widths",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "Viewer.__cell_len_dw": {
            "name": "__cell_len_dw",
            "location": 1201,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Viewer._mode_len": {
            "name": "_mode_len",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Viewer._get_column_widths_mode": {
            "name": "_get_column_widths_mode",
            "location": 1235,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Viewer._get_column_widths_max": {
            "name": "_get_column_widths_max",
            "location": 1246,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Viewer._skip_to_value_change": {
            "name": "_skip_to_value_change",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": [],
                "x_inc": [],
                "y_inc": []
            }
        },
        "Viewer.skip_to_row_change": {
            "name": "skip_to_row_change",
            "location": 1276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.skip_to_row_change_reverse": {
            "name": "skip_to_row_change_reverse",
            "location": 1279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.skip_to_col_change": {
            "name": "skip_to_col_change",
            "location": 1282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.skip_to_col_change_reverse": {
            "name": "skip_to_col_change_reverse",
            "location": 1285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.__init__": {
            "name": "__init__",
            "location": 1294,
            "return": [],
            "arguments": {
                "self": [],
                "scr": [],
                "data": [],
                "title": [],
                "cursor_line_pos": [],
                "match_line": []
            }
        },
        "TextBox.__call__": {
            "name": "__call__",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.setup_handlers": {
            "name": "setup_handlers",
            "location": 1309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox._calculate_layout": {
            "name": "_calculate_layout",
            "location": 1323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.run": {
            "name": "run",
            "location": 1344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.handle_key": {
            "name": "handle_key",
            "location": 1352,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TextBox.close": {
            "name": "close",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.scroll_down": {
            "name": "scroll_down",
            "location": 1363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.scroll_up": {
            "name": "scroll_up",
            "location": 1369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.scroll_left": {
            "name": "scroll_left",
            "location": 1376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.scroll_right": {
            "name": "scroll_right",
            "location": 1380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.move_to_starting_pos": {
            "name": "move_to_starting_pos",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextBox.display": {
            "name": "display",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.show_info.sizeof_fmt": {
            "name": "sizeof_fmt",
            "location": 201,
            "return": [],
            "arguments": {
                "num": [],
                "suffix": []
            }
        }
    },
    "buzz-master/buzz/tfidf.py": {
        "_tfidf_prototypical": {
            "name": "_tfidf_prototypical",
            "location": 11,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[List[int]]"
                ],
                "column": [
                    "Optional[int]",
                    "bool"
                ],
                "show": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[List[int]]"
                ],
                "n_top_members": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[List[int]]"
                ],
                "only_correct": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[List[int]]"
                ],
                "top": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "_tfidf_score": {
            "name": "_tfidf_score",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[int]",
                    "list",
                    "List[str]",
                    "pandas.DataFrame",
                    "Pattern[str]"
                ],
                "column": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "show": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_tfidf_model": {
            "name": "_tfidf_model",
            "location": 111,
            "return": [
                "pandas.DataFrame",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "df": [
                    "int",
                    "List[str]",
                    "pandas.DataFrame",
                    "List[int]"
                ],
                "column": [
                    "int",
                    "List[str]",
                    "pandas.DataFrame",
                    "List[int]"
                ],
                "n_top_members": [
                    "int",
                    "List[str]",
                    "pandas.DataFrame",
                    "List[int]"
                ],
                "show": [
                    "int",
                    "bool",
                    "Dict[str, List]",
                    "Callable"
                ]
            }
        },
        "_tfidf_prototypical._group_apply_sort_head": {
            "name": "_group_apply_sort_head",
            "location": 77,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "group": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "buzz-master/buzz/topology.py": {
        "_cos_unit": {
            "name": "_cos_unit",
            "location": 18,
            "return": [
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "row": [
                    "List[List[str]]",
                    "List[Dict]",
                    "List[str]",
                    "List[Union[int, float]]",
                    "str",
                    "List[Tuple[str, int]]"
                ],
                "df": [
                    "List[List[str]]",
                    "List[Dict]",
                    "List[str]",
                    "List[Union[int, float]]",
                    "str",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "_create_cos": {
            "name": "_create_cos",
            "location": 25,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ],
                "df": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_process_chunk": {
            "name": "_process_chunk",
            "location": 86,
            "return": [
                "type",
                "str",
                "cmk.utils.type_defs.HostName",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason"
            ],
            "arguments": {
                "dataset": [
                    "Optional[List[str]]",
                    "int",
                    "Iterable[Any]",
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "word": [
                    "str",
                    "Optional[str]",
                    "List[int]",
                    "set",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Union[bool, str]"
                ],
                "query": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "is_bool": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[int]"
                ],
                "features_of_interest": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "Callable"
                ],
                "counts": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "int",
                    "List[\"DeliveryItem\"]"
                ]
            }
        },
        "_topology": {
            "name": "_topology",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataset": [
                    "int",
                    "Callable[[None], bool]",
                    "dict",
                    "Dict[str, Callable[[], None]]"
                ],
                "kind": [
                    "Type[BaseException]",
                    "Hashable",
                    "Optional[int]"
                ],
                "wordlist": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "min_occur": [
                    "numpy.array",
                    "str",
                    "float",
                    "list",
                    "numpy.ndarray",
                    "pandas.DataFrame"
                ]
            }
        },
        "_create_cos.cos_word": {
            "name": "cos_word",
            "location": 30,
            "return": [
                "int",
                "bool",
                "Union[numpy.ndarray, numpy.void]",
                "float",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "row": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableMapping]",
                    "pandas.DataFrame"
                ]
            }
        },
        "TopologyData._constructor": {
            "name": "_constructor",
            "location": 45,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopologyData.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "Callable[..., None]",
                    "type",
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        },
        "TopologyData._make_axis_data": {
            "name": "_make_axis_data",
            "location": 51,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "TopologyData.word_axis": {
            "name": "word_axis",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word1": [
                    "str",
                    "numpy.ndarray"
                ],
                "word2": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "TopologyData.euclid": {
            "name": "euclid",
            "location": 79,
            "return": [
                "bool",
                "str",
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopologyData.cosine": {
            "name": "cosine",
            "location": 82,
            "return": [
                "bool",
                "str",
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/buzz/utils.py": {
        "_get_texts": {
            "name": "_get_texts",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "file_data": [
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_entity_getter": {
            "name": "_entity_getter",
            "location": 37,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Set[str]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "bool",
                    "bytes",
                    "os.DirEntry"
                ],
                "reference": [
                    "str",
                    "bool"
                ]
            }
        },
        "_join_entities": {
            "name": "_join_entities",
            "location": 84,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "made": [
                    "Iterable[List[T]]",
                    "str",
                    "numpy.ndarray",
                    "bool",
                    "Iterable[T]"
                ],
                "entity_info": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_make_match_col": {
            "name": "_make_match_col",
            "location": 96,
            "return": [
                "int",
                "Tuple[int, int, int, int]",
                "Optional[BaseException]",
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "df": [
                    "Optional[Any]",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "show": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "preserve_case": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "show_entities": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "reference": [
                    "bool"
                ]
            }
        },
        "_get_tqdm": {
            "name": "_get_tqdm",
            "location": 132,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_tree_once": {
            "name": "_tree_once",
            "location": 145,
            "return": [
                "float",
                "Callable",
                "int",
                "dict"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Tuple[int]",
                    "Callable"
                ]
            }
        },
        "_truncate": {
            "name": "_truncate",
            "location": 152,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "float",
                    "Sequence[str]"
                ],
                "max_len": [
                    "int",
                    "str"
                ],
                "justify": [
                    "str"
                ]
            }
        },
        "_tqdm_update": {
            "name": "_tqdm_update",
            "location": 159,
            "return": [],
            "arguments": {
                "tqdm": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "postfix": [
                    "type",
                    "str",
                    "lxml.html.HtmlElement",
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "_tqdm_close": {
            "name": "_tqdm_close",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "tqdm": [
                    "Any",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "_auto_window": {
            "name": "_auto_window",
            "location": 182,
            "return": [
                "str",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {}
        },
        "_make_tree": {
            "name": "_make_tree",
            "location": 191,
            "return": [
                "float",
                "Union[None, str, List[str], Dict[str, str]]"
            ],
            "arguments": {
                "tree": [
                    "dict",
                    "tree.Node[str]",
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "_get_nlp": {
            "name": "_get_nlp",
            "location": 201,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "language": [
                    "Optional[int]",
                    "IO[str]",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "constituencies": [
                    "str",
                    "bool"
                ]
            }
        },
        "cast": {
            "name": "cast",
            "location": 232,
            "return": [
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "_make_csv": {
            "name": "_make_csv",
            "location": 244,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "raw_lines": [
                    "str",
                    "Dict[str, T]",
                    "List[str]",
                    "bool"
                ],
                "fname": [
                    "str",
                    "int",
                    "Optional[bytes]"
                ],
                "usecols": [
                    "str",
                    "int"
                ],
                "folders": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "sslyze.cli.command_line_parser.ParsedCommandLine",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_order_df_columns": {
            "name": "_order_df_columns",
            "location": 304,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "df": [
                    "bool"
                ],
                "metadata": [
                    "Dict[str, Any]",
                    "Callable[[KT, VT], bool]",
                    "Optional[Callable]",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "morph": [
                    "dict",
                    "Dict[str, \"Outcome\"]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "_apply_governor": {
            "name": "_apply_governor",
            "location": 316,
            "return": [
                "Type",
                "str",
                "dict"
            ],
            "arguments": {
                "row": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Iterable[Dict[str, Any]]",
                    "list"
                ],
                "df": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Iterable[Dict[str, Any]]",
                    "list"
                ],
                "dummy": [
                    "Iterator[Dict[str, Any]]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_add_governor": {
            "name": "_add_governor",
            "location": 326,
            "return": [
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "df": [
                    "Dict[str, Any]",
                    "slice"
                ]
            }
        },
        "_multiples_apply": {
            "name": "_multiples_apply",
            "location": 342,
            "return": [
                "str",
                "Dict[str, Any]",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "morph_list": [
                    "bool",
                    "int",
                    "str",
                    "Iterator[int]"
                ],
                "path": [
                    "bool",
                    "int",
                    "str",
                    "Iterator[int]"
                ],
                "column": [
                    "bool",
                    "int",
                    "str",
                    "Iterator[int]"
                ]
            }
        },
        "_parse_out_multiples": {
            "name": "_parse_out_multiples",
            "location": 360,
            "return": [
                "int",
                "numpy.ndarray",
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Optional[str]"
                ],
                "morph": [
                    "dict",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "List[int]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_to_df": {
            "name": "_to_df",
            "location": 376,
            "return": [
                "Sequence['cirq.Qid']",
                "Mapping[str, Any]",
                "Sequence[Hashable]"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "bool",
                    "Optional[Tuple[int, int]]",
                    "List[int]",
                    "Optional[int]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "subcorpus": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "pandas.DataFrame",
                    "Callable"
                ],
                "folders": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Union[bool, str]"
                ],
                "usecols": [
                    "Optional[List[int]]",
                    "Optional[str]"
                ],
                "usename": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]",
                    "List[str]"
                ],
                "set_data_types": [
                    "bool",
                    "str",
                    "int"
                ],
                "add_governor": [
                    "bool",
                    "Callable",
                    "Tuple[float, float]",
                    "Optional[bool]",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "morph": [
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "misc": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "float"
                ],
                "_complete": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_get_short_name_from_long_name": {
            "name": "_get_short_name_from_long_name",
            "location": 480,
            "return": [
                "str",
                "Optional[List[str]]",
                "int",
                "bytes"
            ],
            "arguments": {
                "longname": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_make_meta_dict_from_sent": {
            "name": "_make_meta_dict_from_sent",
            "location": 491,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "first": [
                    "str",
                    "int"
                ],
                "speakers": [
                    "str",
                    "bool"
                ]
            }
        },
        "_ensure_list_of_short_names": {
            "name": "_ensure_list_of_short_names",
            "location": 505,
            "return": [
                "str",
                "bool",
                "Tuple[int, str]",
                "Type[T]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "_series_to_wordlist": {
            "name": "_series_to_wordlist",
            "location": 517,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "list",
                "str"
            ],
            "arguments": {
                "series": [
                    "List[int]",
                    "List[str]",
                    "Sequence[T]",
                    "Callable[[], float]",
                    "List[List[T]]",
                    "str"
                ],
                "by": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ],
                "top": [
                    "int",
                    "list"
                ]
            }
        },
        "_load_corpus": {
            "name": "_load_corpus",
            "location": 537,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [
                    "str",
                    "dict",
                    "T"
                ]
            }
        },
        "_fix_datatypes_on_save": {
            "name": "_fix_datatypes_on_save",
            "location": 591,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "to_reduce": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "_set_best_data_types": {
            "name": "_set_best_data_types",
            "location": 610,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "df": [
                    "dict",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "_bool_ix_for_multiword": {
            "name": "_bool_ix_for_multiword",
            "location": 631,
            "return": [
                "bool"
            ],
            "arguments": {
                "corpus": [
                    "list",
                    "int",
                    "pandas.DataFrame"
                ],
                "bool_ix": [
                    "int",
                    "List[int]",
                    "list",
                    "Union[float, List[float]]",
                    "str",
                    "numpy.ndarray"
                ],
                "n": [
                    "list",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "_get_ocr_engine": {
            "name": "_get_ocr_engine",
            "location": 653,
            "return": [
                "List[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "lang": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "buzz-master/buzz/views.py": {
        "_get_widths": {
            "name": "_get_widths",
            "location": 13,
            "return": [
                "bool",
                "List[str]",
                "str",
                "bytes",
                "set",
                "float"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "list",
                    "List[int]",
                    "Dict[str, List[str]]",
                    "numpy.array",
                    "List[str]",
                    "dict",
                    "str"
                ],
                "is_conc": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "float"
                ],
                "window": [
                    "dict",
                    "bool",
                    "list",
                    "Dict[str, list]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_tabview": {
            "name": "_tabview",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "Sized",
                    "Callable[[], bool]",
                    "SupportsFloat"
                ],
                "reference": [
                    "int",
                    "float"
                ],
                "window": [
                    "bool",
                    "Tuple[int, bool]",
                    "List[\"Outcome\"]"
                ]
            }
        },
        "_lingres": {
            "name": "_lingres",
            "location": 93,
            "return": [
                "Optional[int]",
                "int",
                "trezor.utils.Writer",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "ser": [
                    "int",
                    "Set[str]",
                    "pandas.DataFrame",
                    "list"
                ],
                "index": [
                    "int",
                    "Set[str]",
                    "pandas.DataFrame",
                    "list"
                ]
            }
        },
        "_sort": {
            "name": "_sort",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "list",
                    "List[List[int]]",
                    "List[Tuple[int, int]]",
                    "Dict[str, str]"
                ],
                "by": [
                    "pandas.Series",
                    "set"
                ],
                "keep_stats": [
                    "BaseException"
                ],
                "remove_above_p": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "_log_likelihood": {
            "name": "_log_likelihood",
            "location": 176,
            "return": [
                "str",
                "numpy.ndarray",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[List[str]]",
                    "bool",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "Union[pandas.Series, pandas.DataFrame]"
                ],
                "target_sum": [
                    "int",
                    "float"
                ],
                "ref_sum": [
                    "int",
                    "float"
                ]
            }
        },
        "_perc_diff": {
            "name": "_perc_diff",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "target_sum": [
                    "int",
                    "numpy.ndarray"
                ],
                "ref_sum": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "_odds_ratio": {
            "name": "_odds_ratio",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "target_sum": [
                    "int",
                    "list",
                    "bytes"
                ],
                "ref_sum": [
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "_relrisk": {
            "name": "_relrisk",
            "location": 216,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "numpy.ndarray",
                "str",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "target_sum": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ],
                "ref_sum": [
                    "int",
                    "List[Dict]",
                    "utils.types.NDArray[float]"
                ]
            }
        },
        "_bayes_factor_bic": {
            "name": "_bayes_factor_bic",
            "location": 223,
            "return": [
                "utils.Node",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "data": [
                    "int",
                    "numpy.ndarray"
                ],
                "target_sum": [
                    "int",
                    "pandas.DataFrame",
                    "dict"
                ],
                "ref_sum": [
                    "int",
                    "pandas.DataFrame",
                    "dict"
                ]
            }
        },
        "_effect_size_for_ll": {
            "name": "_effect_size_for_ll",
            "location": 230,
            "return": [
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "Tuple[int, int, bytearray]"
                ],
                "target_sum": [
                    "pandas.DataFrame",
                    "int",
                    "memoryview",
                    "Tuple[int, int, bytearray]",
                    "bool",
                    "bytes",
                    "Sequence[int]",
                    "list"
                ],
                "ref_sum": [
                    "pandas.DataFrame",
                    "int",
                    "memoryview",
                    "Tuple[int, int, bytearray]",
                    "bool",
                    "bytes",
                    "Sequence[int]",
                    "list"
                ]
            }
        },
        "_make_keywords": {
            "name": "_make_keywords",
            "location": 238,
            "return": [
                "numpy.ndarray",
                "str",
                "bytearray",
                "float",
                "Dict[str, int]",
                "trezor.utils.Writer",
                "bool"
            ],
            "arguments": {
                "subcorpus": [
                    "int",
                    "Iterable[str]",
                    "Collection[int]",
                    "List[Dict]"
                ],
                "reference": [
                    "int",
                    "Iterable[str]",
                    "Collection[int]",
                    "List[Dict]"
                ],
                "ref_sum": [
                    "str",
                    "Union[numpy.ndarray, PIL.Image.Image]",
                    "bool"
                ],
                "measure": [
                    "str",
                    "Union[numpy.ndarray, PIL.Image.Image]",
                    "bool"
                ]
            }
        },
        "_table": {
            "name": "_table",
            "location": 252,
            "return": [
                "Optional[str]",
                "list",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "df": [
                    "int"
                ],
                "subcorpora": [
                    "bool",
                    "float",
                    "pandas.DataFrame",
                    "str",
                    "int"
                ],
                "show": [
                    "pandas.DataFrame",
                    "Callable[..., bool]",
                    "float"
                ],
                "preserve_case": [
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "sort": [
                    "str",
                    "Set[str]"
                ],
                "relative": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "keyness": [
                    "float",
                    "bytes",
                    "str",
                    "Union[str, int]"
                ],
                "remove_above_p": [
                    "float",
                    "IO"
                ],
                "multiindex_columns": [
                    "list",
                    "List[int]",
                    "str",
                    "bool"
                ],
                "keep_stats": [
                    "int",
                    "float"
                ],
                "show_entities": [
                    "pandas.DataFrame",
                    "dict",
                    "Dict[str, numpy.ndarray]",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "min_occur": [
                    "str",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "_keyness": {
            "name": "_keyness",
            "location": 346,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "table": [
                    "Callable",
                    "str",
                    "int"
                ],
                "keyness": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "reference": [
                    "Union[List, Dict, None]",
                    "Optional[str]",
                    "Optional[object]",
                    "str"
                ]
            }
        },
        "_add_frequencies": {
            "name": "_add_frequencies",
            "location": 375,
            "return": [
                "IO[str]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "series": [
                    "float",
                    "int",
                    "raiden.utils.TokenAmount",
                    "str"
                ],
                "relative": [
                    "int",
                    "Optional[int]",
                    "raiden.utils.MessageID",
                    "raiden.utils.Address"
                ],
                "keyness": [
                    "int",
                    "Optional[\"ReferenceTypeId\"]",
                    "bool",
                    "qutebrowser.utils.usertypes.Question"
                ],
                "reference": [
                    "int",
                    "Optional[\"ReferenceTypeId\"]",
                    "bool",
                    "qutebrowser.utils.usertypes.Question"
                ]
            }
        }
    },
    "buzz-master/buzz/__init__.py": {},
    "buzz-master/scripts/bnc.py": {},
    "buzz-master/tests/test_contents.py": {
        "TestContents.test_contents": {
            "name": "test_contents",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/tests/test_corpus.py": {
        "TestCorpus.setUpClass": {
            "name": "setUpClass",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "TestCorpus.test_load_plain": {
            "name": "test_load_plain",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_add_governor": {
            "name": "test_add_governor",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_load_usecols": {
            "name": "test_load_usecols",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_folder_options": {
            "name": "test_folder_options",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_subcorpora_and_files": {
            "name": "test_subcorpora_and_files",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": []
            }
        },
        "TestCorpus.test_repr": {
            "name": "test_repr",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_parse": {
            "name": "test_parse",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_loaded_unloaded": {
            "name": "test_loaded_unloaded",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_just_skip": {
            "name": "test_just_skip",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_unloaded_loaded_same": {
            "name": "test_unloaded_loaded_same",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_all_slice_names": {
            "name": "test_all_slice_names",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_conc": {
            "name": "test_conc",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_unloaded_conc_error": {
            "name": "test_unloaded_conc_error",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_dot_syntax": {
            "name": "test_dot_syntax",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_no_path": {
            "name": "test_no_path",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_bad_compare": {
            "name": "test_bad_compare",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_spacy": {
            "name": "test_spacy",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_dataset": {
            "name": "test_dataset",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_just_index_and_int_match": {
            "name": "test_just_index_and_int_match",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorpus.test_token_annotation": {
            "name": "test_token_annotation",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/tests/test_file.py": {
        "TestFile.test_load_unequal": {
            "name": "test_load_unequal",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_spacy_same": {
            "name": "test_spacy_same",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_unparsed": {
            "name": "test_unparsed",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_parsed": {
            "name": "test_parsed",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/tests/test_search.py": {
        "TestSearch.setUpClass": {
            "name": "setUpClass",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str, bytes]",
                    "bool"
                ]
            }
        },
        "TestSearch.test_non_loaded": {
            "name": "test_non_loaded",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearch.test_bigrams": {
            "name": "test_bigrams",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearch.test_depgrep": {
            "name": "test_depgrep",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/tests/test_table.py": {
        "TestTable.test_loaded_corpus_table": {
            "name": "test_loaded_corpus_table",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_constructor": {
            "name": "test_constructor",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_loaded_corpus_relative": {
            "name": "test_loaded_corpus_relative",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_show": {
            "name": "test_show",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_ll_keyword": {
            "name": "test_ll_keyword",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_pd_keyword": {
            "name": "test_pd_keyword",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_no_ref_keyness": {
            "name": "test_no_ref_keyness",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_sort": {
            "name": "test_sort",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTable.test_tabview": {
            "name": "test_tabview",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "buzz-master/tests/__init__.py": {}
}
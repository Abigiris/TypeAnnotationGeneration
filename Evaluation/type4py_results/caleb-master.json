{
    "caleb-master/setup.py": {},
    "caleb-master/caleb/app.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "take_first": [
                    "str"
                ],
                "method": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Application.go": {
            "name": "go",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Application.get_all": {
            "name": "get_all",
            "location": 68,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "missing_cits": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Application.get_single": {
            "name": "get_single",
            "location": 84,
            "return": [
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "caleb-master/caleb/cmdline.py": {
        "make_parser": {
            "name": "make_parser",
            "location": 10,
            "return": [
                "argparse.ArgumentParser",
                "Callable[[str, Mapping], Any]"
            ],
            "arguments": {}
        },
        "launch": {
            "name": "launch",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "caleb-master/caleb/file_handler.py": {
        "FileHandler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AuxHandler.citation_keys": {
            "name": "citation_keys",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuxHandler.bibdata": {
            "name": "bibdata",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BibHandler.citation_keys": {
            "name": "citation_keys",
            "location": 55,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BibHandler.append": {
            "name": "append",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        }
    },
    "caleb-master/caleb/reference.py": {
        "Reference.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ],
                "method": [
                    "bytes",
                    "int",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Reference._get_bibtex": {
            "name": "_get_bibtex",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference._get_bibtex_ams": {
            "name": "_get_bibtex_ams",
            "location": 44,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference._get_bibtex_crossref": {
            "name": "_get_bibtex_crossref",
            "location": 81,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.bibtex": {
            "name": "bibtex",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.exists": {
            "name": "exists",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.is_unique": {
            "name": "is_unique",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "caleb-master/caleb/__init__.py": {},
    "caleb-master/caleb/__version__.py": {},
    "caleb-master/tests/consts.py": {},
    "caleb-master/tests/test_cmdline.py": {
        "test_version_request": {
            "name": "test_version_request",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_argument": {
            "name": "test_missing_argument",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_this_key": {
            "name": "test_get_this_key",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "caleb-master/tests/test_file_handler.py": {
        "test_no_bibdata": {
            "name": "test_no_bibdata",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "caleb-master/tests/test_general.py": {
        "cmp_files": {
            "name": "cmp_files",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "f1": [
                    "str",
                    "Set[int]",
                    "pathlib.PosixPath",
                    "Callable",
                    "list"
                ],
                "f2": [
                    "str",
                    "Set[int]",
                    "pathlib.PosixPath",
                    "Callable",
                    "list"
                ]
            }
        },
        "test_clean_take_all": {
            "name": "test_clean_take_all",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "pathlib.PosixPath",
                    "path.Path"
                ]
            }
        },
        "test_dirty_not_take_all": {
            "name": "test_dirty_not_take_all",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "caleb-master/tests/test_reference.py": {
        "test_when_exists_and_is_unique": {
            "name": "test_when_exists_and_is_unique",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_when_exists_and_not_is_unique": {
            "name": "test_when_exists_and_not_is_unique",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_when_exists_and_is_unique_with_year": {
            "name": "test_when_exists_and_is_unique_with_year",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_when_not_exists_and_not_is_unique": {
            "name": "test_when_not_exists_and_not_is_unique",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_notimplemented_method": {
            "name": "test_notimplemented_method",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "caleb-master/tests/__init__.py": {}
}
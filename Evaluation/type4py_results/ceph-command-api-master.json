{
    "ceph-command-api-master/rebuild.py": {
        "indent": {
            "name": "indent",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "comment": {
            "name": "comment",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "set_overload": {
            "name": "set_overload",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "funcs": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "mk_sigs": {
            "name": "mk_sigs",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "cluster": [
                    "bool",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "f": [
                    "dict",
                    "List[\"transaction_model.TransactionModel\"]",
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "type"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 285,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "cluster_handle": [
                    "str"
                ],
                "cmd": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "conf": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "py_ver": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Flags.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fs": [
                    "Callable[[], bool]",
                    "bool",
                    "List[Tuple[str, str, str, str]]",
                    "List[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "Flags.__contains__": {
            "name": "__contains__",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "Type"
                ]
            }
        },
        "Flags.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "who": [
                    "int",
                    "str",
                    "list",
                    "bool"
                ],
                "n": [
                    "Optional[str]",
                    "str"
                ],
                "req": [
                    "Optional[str]",
                    "str"
                ],
                "range": [
                    "Optional[str]",
                    "str"
                ],
                "strings": [
                    "str"
                ],
                "goodchars": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Param.safe_name": {
            "name": "safe_name",
            "location": 160,
            "return": [
                "str",
                "List[str]",
                "bool",
                "list",
                "Callable[[str], None]",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.help": {
            "name": "help",
            "location": 165,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.mk_default": {
            "name": "mk_default",
            "location": 181,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.py_type": {
            "name": "py_type",
            "location": 186,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.mk_type": {
            "name": "mk_type",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Param.mk_dict": {
            "name": "mk_dict",
            "location": 196,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.mk_bash_example": {
            "name": "mk_bash_example",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str",
                    "bool",
                    "int"
                ],
                "help": [
                    "int",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "Callable"
                ],
                "module": [
                    "int",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "Callable"
                ],
                "perm": [
                    "int",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "Callable"
                ],
                "flags": [
                    "int",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "Callable"
                ]
            }
        },
        "FuncSig.name": {
            "name": "name",
            "location": 215,
            "return": [
                "bool",
                "Iterable[str]",
                "set",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.prefix": {
            "name": "prefix",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.mk_params": {
            "name": "mk_params",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.mk_param_help": {
            "name": "mk_param_help",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.mk_mk_dict": {
            "name": "mk_mk_dict",
            "location": 231,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.mk_type_hint": {
            "name": "mk_type_hint",
            "location": 235,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.mk_doc_string": {
            "name": "mk_doc_string",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.mk_bash_example": {
            "name": "mk_bash_example",
            "location": 251,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncSig.__str__": {
            "name": "__str__",
            "location": 256,
            "return": [
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ceph-command-api-master/setup.py": {},
    "ceph-command-api-master/ceph_command_api/_generated.py": {
        "deprecated": {
            "name": "deprecated",
            "location": 21,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "deprecated.new_func": {
            "name": "new_func",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "MonCommandApi.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rados": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MonCommandApi._mon_command": {
            "name": "_mon_command",
            "location": 49,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "inbuf": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "target": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "MonCommandApi.add_bootstrap_peer_hint": {
            "name": "add_bootstrap_peer_hint",
            "location": 53,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str",
                    "Type"
                ]
            }
        },
        "MonCommandApi.add_bootstrap_peer_hintv": {
            "name": "add_bootstrap_peer_hintv",
            "location": 71,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "addrv": [
                    "str",
                    "Type"
                ]
            }
        },
        "MonCommandApi.alerts_send": {
            "name": "alerts_send",
            "location": 90,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.ansible_set_ssl_certificate": {
            "name": "ansible_set_ssl_certificate",
            "location": 106,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mgr_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.ansible_set_ssl_certificate_key": {
            "name": "ansible_set_ssl_certificate_key",
            "location": 122,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "mgr_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.auth_add": {
            "name": "auth_add",
            "location": 138,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "List['Entity']",
                    "Optional[List[Any]]",
                    "Set[str]",
                    "Optional[str]"
                ],
                "caps": [
                    "str",
                    "List['Entity']",
                    "Optional[List[Any]]",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.auth_caps": {
            "name": "auth_caps",
            "location": 158,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "List['Entity']",
                    "str"
                ],
                "caps": [
                    "List['Entity']",
                    "str"
                ]
            }
        },
        "MonCommandApi.auth_del": {
            "name": "auth_del",
            "location": 178,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "type",
                    "Exception",
                    "Mapping[str, T]",
                    "int",
                    "str"
                ]
            }
        },
        "MonCommandApi.auth_export": {
            "name": "auth_export",
            "location": 196,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "type",
                    "Exception",
                    "Mapping[str, T]",
                    "int",
                    "str"
                ]
            }
        },
        "MonCommandApi.auth_get": {
            "name": "auth_get",
            "location": 214,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "dict"
                ]
            }
        },
        "MonCommandApi.auth_get_key": {
            "name": "auth_get_key",
            "location": 232,
            "return": [
                "int",
                "str",
                "list",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "MonCommandApi.auth_get_or_create": {
            "name": "auth_get_or_create",
            "location": 250,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "List['Entity']",
                    "int",
                    "Optional[List[Any]]"
                ],
                "caps": [
                    "str",
                    "List['Entity']",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "MonCommandApi.auth_get_or_create_key": {
            "name": "auth_get_or_create_key",
            "location": 270,
            "return": [
                "str",
                "int",
                "Tuple[bool, float]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "Optional[List]",
                    "Optional[str]",
                    "Set[str]"
                ],
                "caps": [
                    "str",
                    "Optional[List]",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "MonCommandApi.auth_import": {
            "name": "auth_import",
            "location": 291,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.auth_list": {
            "name": "auth_list",
            "location": 308,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.auth_ls": {
            "name": "auth_ls",
            "location": 324,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.auth_rm": {
            "name": "auth_rm",
            "location": 378,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "type",
                    "Exception",
                    "Mapping[str, T]",
                    "int",
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_dump": {
            "name": "balancer_dump",
            "location": 396,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_eval": {
            "name": "balancer_eval",
            "location": 414,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "option": [
                    "Callable",
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_eval_verbose": {
            "name": "balancer_eval_verbose",
            "location": 433,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "option": [
                    "Callable",
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_execute": {
            "name": "balancer_execute",
            "location": 452,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_ls": {
            "name": "balancer_ls",
            "location": 470,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.balancer_mode": {
            "name": "balancer_mode",
            "location": 486,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_off": {
            "name": "balancer_off",
            "location": 504,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.balancer_on": {
            "name": "balancer_on",
            "location": 520,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.balancer_optimize": {
            "name": "balancer_optimize",
            "location": 536,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str"
                ],
                "pools": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_pool_add": {
            "name": "balancer_pool_add",
            "location": 555,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pools": [
                    "str",
                    "Type"
                ]
            }
        },
        "MonCommandApi.balancer_pool_ls": {
            "name": "balancer_pool_ls",
            "location": 573,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.balancer_pool_rm": {
            "name": "balancer_pool_rm",
            "location": 591,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pools": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_reset": {
            "name": "balancer_reset",
            "location": 609,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.balancer_rm": {
            "name": "balancer_rm",
            "location": 625,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_show": {
            "name": "balancer_show",
            "location": 643,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str"
                ]
            }
        },
        "MonCommandApi.balancer_status": {
            "name": "balancer_status",
            "location": 661,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.cephadm_check_host": {
            "name": "cephadm_check_host",
            "location": 677,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "MonCommandApi.cephadm_clear_key": {
            "name": "cephadm_clear_key",
            "location": 695,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.cephadm_clear_ssh_config": {
            "name": "cephadm_clear_ssh_config",
            "location": 711,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.cephadm_generate_key": {
            "name": "cephadm_generate_key",
            "location": 727,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.cephadm_get_pub_key": {
            "name": "cephadm_get_pub_key",
            "location": 743,
            "return": [
                "List[Tuple[str, str]]",
                "str",
                "List[Dict]",
                "int",
                "dict",
                "Dict[str, int]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.cephadm_get_user": {
            "name": "cephadm_get_user",
            "location": 759,
            "return": [
                "Tuple[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.cephadm_set_ssh_config": {
            "name": "cephadm_set_ssh_config",
            "location": 775,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.compact": {
            "name": "compact",
            "location": 791,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_assimilate_conf": {
            "name": "config_assimilate_conf",
            "location": 807,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_dump": {
            "name": "config_dump",
            "location": 823,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_generate_minimal_conf": {
            "name": "config_generate_minimal_conf",
            "location": 839,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_get": {
            "name": "config_get",
            "location": 855,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.config_help": {
            "name": "config_help",
            "location": 874,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "MonCommandApi.config_log": {
            "name": "config_log",
            "location": 892,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.config_ls": {
            "name": "config_ls",
            "location": 910,
            "return": [
                "str",
                "List[str]",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_reset": {
            "name": "config_reset",
            "location": 926,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.config_rm": {
            "name": "config_rm",
            "location": 944,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.config_set": {
            "name": "config_set",
            "location": 963,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "Optional[int]",
                    "list",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Optional[int]",
                    "list",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "list",
                    "List[str]"
                ],
                "force": [
                    "str",
                    "Optional[int]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.config_show": {
            "name": "config_show",
            "location": 985,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "MonCommandApi.config_show_with_defaults": {
            "name": "config_show_with_defaults",
            "location": 1004,
            "return": [
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "dict"
                ]
            }
        },
        "MonCommandApi.config_key_del": {
            "name": "config_key_del",
            "location": 1023,
            "return": [
                "str",
                "list",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.config_key_dump": {
            "name": "config_key_dump",
            "location": 1041,
            "return": [
                "str",
                "list",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.config_key_exists": {
            "name": "config_key_exists",
            "location": 1059,
            "return": [
                "str",
                "list",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.config_key_get": {
            "name": "config_key_get",
            "location": 1077,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.config_key_list": {
            "name": "config_key_list",
            "location": 1096,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_key_ls": {
            "name": "config_key_ls",
            "location": 1112,
            "return": [
                "str",
                "int",
                "list",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.config_key_put": {
            "name": "config_key_put",
            "location": 1129,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "IO[bytes]"
                ],
                "val": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "IO[bytes]"
                ]
            }
        },
        "MonCommandApi.config_key_rm": {
            "name": "config_key_rm",
            "location": 1148,
            "return": [
                "str",
                "list",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.config_key_set": {
            "name": "config_key_set",
            "location": 1166,
            "return": [
                "str",
                "dict",
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable",
                    "IO[bytes]",
                    "Optional[str]"
                ],
                "val": [
                    "str",
                    "Callable",
                    "IO[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.count": {
            "name": "count",
            "location": 1185,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.crash_archive": {
            "name": "crash_archive",
            "location": 1203,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.crash_archive_all": {
            "name": "crash_archive_all",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.crash_info": {
            "name": "crash_info",
            "location": 1237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.crash_json_report": {
            "name": "crash_json_report",
            "location": 1255,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "str"
                ]
            }
        },
        "MonCommandApi.crash_ls": {
            "name": "crash_ls",
            "location": 1273,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.crash_ls_new": {
            "name": "crash_ls_new",
            "location": 1289,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.crash_post": {
            "name": "crash_post",
            "location": 1305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.crash_prune": {
            "name": "crash_prune",
            "location": 1321,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "keep": [
                    "str"
                ]
            }
        },
        "MonCommandApi.crash_rm": {
            "name": "crash_rm",
            "location": 1339,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.crash_stat": {
            "name": "crash_stat",
            "location": 1357,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_ac_role_add_scope_perms": {
            "name": "dashboard_ac_role_add_scope_perms",
            "location": 1373,
            "return": [
                "list",
                "int",
                "List[str]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "rolename": [
                    "str"
                ],
                "scopename": [
                    "str"
                ],
                "permissions": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_role_create": {
            "name": "dashboard_ac_role_create",
            "location": 1394,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "rolename": [
                    "str",
                    "Dict[str, Any]"
                ],
                "description": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_role_del_scope_perms": {
            "name": "dashboard_ac_role_del_scope_perms",
            "location": 1413,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "rolename": [
                    "str"
                ],
                "scopename": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_role_delete": {
            "name": "dashboard_ac_role_delete",
            "location": 1432,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "rolename": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_role_show": {
            "name": "dashboard_ac_role_show",
            "location": 1450,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "rolename": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_add_roles": {
            "name": "dashboard_ac_user_add_roles",
            "location": 1468,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "roles": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_create": {
            "name": "dashboard_ac_user_create",
            "location": 1487,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "rolename": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "email": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "enabled": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "force_password": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "pwd_expiration_date": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_del_roles": {
            "name": "dashboard_ac_user_del_roles",
            "location": 1519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "int"
                ],
                "roles": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_delete": {
            "name": "dashboard_ac_user_delete",
            "location": 1538,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_disable": {
            "name": "dashboard_ac_user_disable",
            "location": 1556,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_enable": {
            "name": "dashboard_ac_user_enable",
            "location": 1574,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_set_info": {
            "name": "dashboard_ac_user_set_info",
            "location": 1592,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "email": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_set_password": {
            "name": "dashboard_ac_user_set_password",
            "location": 1612,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "List[str]"
                ],
                "force_password": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_set_password_hash": {
            "name": "dashboard_ac_user_set_password_hash",
            "location": 1634,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "hashed_password": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_set_roles": {
            "name": "dashboard_ac_user_set_roles",
            "location": 1653,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "roles": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_ac_user_show": {
            "name": "dashboard_ac_user_show",
            "location": 1672,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_create_self_signed_cert": {
            "name": "dashboard_create_self_signed_cert",
            "location": 1690,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_debug": {
            "name": "dashboard_debug",
            "location": 1706,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_feature": {
            "name": "dashboard_feature",
            "location": 1724,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Mapping[str, Any]"
                ],
                "features": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "MonCommandApi.dashboard_get_alertmanager_api_host": {
            "name": "dashboard_get_alertmanager_api_host",
            "location": 1743,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_audit_api_enabled": {
            "name": "dashboard_get_audit_api_enabled",
            "location": 1759,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_audit_api_log_payload": {
            "name": "dashboard_get_audit_api_log_payload",
            "location": 1775,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_enable_browsable_api": {
            "name": "dashboard_get_enable_browsable_api",
            "location": 1791,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_ganesha_clusters_rados_pool_namespace": {
            "name": "dashboard_get_ganesha_clusters_rados_pool_namespace",
            "location": 1807,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_grafana_api_password": {
            "name": "dashboard_get_grafana_api_password",
            "location": 1823,
            "return": [
                "Tuple[str, int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_grafana_api_ssl_verify": {
            "name": "dashboard_get_grafana_api_ssl_verify",
            "location": 1839,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_grafana_api_url": {
            "name": "dashboard_get_grafana_api_url",
            "location": 1855,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_grafana_api_username": {
            "name": "dashboard_get_grafana_api_username",
            "location": 1871,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_grafana_update_dashboards": {
            "name": "dashboard_get_grafana_update_dashboards",
            "location": 1887,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_iscsi_api_ssl_verification": {
            "name": "dashboard_get_iscsi_api_ssl_verification",
            "location": 1903,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_jwt_token_ttl": {
            "name": "dashboard_get_jwt_token_ttl",
            "location": 1919,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_prometheus_api_host": {
            "name": "dashboard_get_prometheus_api_host",
            "location": 1935,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rest_requests_timeout": {
            "name": "dashboard_get_rest_requests_timeout",
            "location": 1951,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_access_key": {
            "name": "dashboard_get_rgw_api_access_key",
            "location": 1967,
            "return": [
                "int",
                "bool",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_admin_resource": {
            "name": "dashboard_get_rgw_api_admin_resource",
            "location": 1983,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_host": {
            "name": "dashboard_get_rgw_api_host",
            "location": 1999,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_port": {
            "name": "dashboard_get_rgw_api_port",
            "location": 2015,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_scheme": {
            "name": "dashboard_get_rgw_api_scheme",
            "location": 2031,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_secret_key": {
            "name": "dashboard_get_rgw_api_secret_key",
            "location": 2047,
            "return": [
                "bool",
                "int",
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_ssl_verify": {
            "name": "dashboard_get_rgw_api_ssl_verify",
            "location": 2063,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_rgw_api_user_id": {
            "name": "dashboard_get_rgw_api_user_id",
            "location": 2079,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_user_pwd_expiration_span": {
            "name": "dashboard_get_user_pwd_expiration_span",
            "location": 2095,
            "return": [
                "Tuple[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_user_pwd_expiration_warning_1": {
            "name": "dashboard_get_user_pwd_expiration_warning_1",
            "location": 2111,
            "return": [
                "Tuple[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_get_user_pwd_expiration_warning_2": {
            "name": "dashboard_get_user_pwd_expiration_warning_2",
            "location": 2127,
            "return": [
                "Tuple[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_grafana_dashboards_update": {
            "name": "dashboard_grafana_dashboards_update",
            "location": 2143,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_iscsi_gateway_add": {
            "name": "dashboard_iscsi_gateway_add",
            "location": 2159,
            "return": [],
            "arguments": {
                "self": [],
                "service_url": [
                    "str",
                    "List[str]",
                    "List[Tuple]"
                ]
            }
        },
        "MonCommandApi.dashboard_iscsi_gateway_list": {
            "name": "dashboard_iscsi_gateway_list",
            "location": 2177,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_iscsi_gateway_rm": {
            "name": "dashboard_iscsi_gateway_rm",
            "location": 2193,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.dashboard_reset_alertmanager_api_host": {
            "name": "dashboard_reset_alertmanager_api_host",
            "location": 2211,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_audit_api_enabled": {
            "name": "dashboard_reset_audit_api_enabled",
            "location": 2227,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_audit_api_log_payload": {
            "name": "dashboard_reset_audit_api_log_payload",
            "location": 2243,
            "return": [
                "Callable",
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_enable_browsable_api": {
            "name": "dashboard_reset_enable_browsable_api",
            "location": 2259,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_ganesha_clusters_rados_pool_namespace": {
            "name": "dashboard_reset_ganesha_clusters_rados_pool_namespace",
            "location": 2275,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_grafana_api_password": {
            "name": "dashboard_reset_grafana_api_password",
            "location": 2292,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_grafana_api_ssl_verify": {
            "name": "dashboard_reset_grafana_api_ssl_verify",
            "location": 2308,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_grafana_api_url": {
            "name": "dashboard_reset_grafana_api_url",
            "location": 2324,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_grafana_api_username": {
            "name": "dashboard_reset_grafana_api_username",
            "location": 2340,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_grafana_update_dashboards": {
            "name": "dashboard_reset_grafana_update_dashboards",
            "location": 2356,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_iscsi_api_ssl_verification": {
            "name": "dashboard_reset_iscsi_api_ssl_verification",
            "location": 2372,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_prometheus_api_host": {
            "name": "dashboard_reset_prometheus_api_host",
            "location": 2388,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rest_requests_timeout": {
            "name": "dashboard_reset_rest_requests_timeout",
            "location": 2404,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_access_key": {
            "name": "dashboard_reset_rgw_api_access_key",
            "location": 2420,
            "return": [
                "str",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_admin_resource": {
            "name": "dashboard_reset_rgw_api_admin_resource",
            "location": 2436,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_host": {
            "name": "dashboard_reset_rgw_api_host",
            "location": 2452,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_port": {
            "name": "dashboard_reset_rgw_api_port",
            "location": 2468,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_scheme": {
            "name": "dashboard_reset_rgw_api_scheme",
            "location": 2484,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_secret_key": {
            "name": "dashboard_reset_rgw_api_secret_key",
            "location": 2500,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_ssl_verify": {
            "name": "dashboard_reset_rgw_api_ssl_verify",
            "location": 2516,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_rgw_api_user_id": {
            "name": "dashboard_reset_rgw_api_user_id",
            "location": 2532,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_user_pwd_expiration_span": {
            "name": "dashboard_reset_user_pwd_expiration_span",
            "location": 2548,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_user_pwd_expiration_warning_1": {
            "name": "dashboard_reset_user_pwd_expiration_warning_1",
            "location": 2564,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_reset_user_pwd_expiration_warning_2": {
            "name": "dashboard_reset_user_pwd_expiration_warning_2",
            "location": 2580,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_set_alertmanager_api_host": {
            "name": "dashboard_set_alertmanager_api_host",
            "location": 2596,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_audit_api_enabled": {
            "name": "dashboard_set_audit_api_enabled",
            "location": 2614,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_audit_api_log_payload": {
            "name": "dashboard_set_audit_api_log_payload",
            "location": 2632,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.dashboard_set_enable_browsable_api": {
            "name": "dashboard_set_enable_browsable_api",
            "location": 2650,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_ganesha_clusters_rados_pool_namespace": {
            "name": "dashboard_set_ganesha_clusters_rados_pool_namespace",
            "location": 2668,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_grafana_api_password": {
            "name": "dashboard_set_grafana_api_password",
            "location": 2686,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "MonCommandApi.dashboard_set_grafana_api_ssl_verify": {
            "name": "dashboard_set_grafana_api_ssl_verify",
            "location": 2704,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_grafana_api_url": {
            "name": "dashboard_set_grafana_api_url",
            "location": 2722,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.dashboard_set_grafana_api_username": {
            "name": "dashboard_set_grafana_api_username",
            "location": 2740,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_grafana_update_dashboards": {
            "name": "dashboard_set_grafana_update_dashboards",
            "location": 2758,
            "return": [
                "BaseException",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.dashboard_set_iscsi_api_ssl_verification": {
            "name": "dashboard_set_iscsi_api_ssl_verification",
            "location": 2776,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_jwt_token_ttl": {
            "name": "dashboard_set_jwt_token_ttl",
            "location": 2794,
            "return": [
                "int",
                "str",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_set_login_credentials": {
            "name": "dashboard_set_login_credentials",
            "location": 2812,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_prometheus_api_host": {
            "name": "dashboard_set_prometheus_api_host",
            "location": 2831,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rest_requests_timeout": {
            "name": "dashboard_set_rest_requests_timeout",
            "location": 2849,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Hashable",
                    "dict"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_access_key": {
            "name": "dashboard_set_rgw_api_access_key",
            "location": 2867,
            "return": [
                "str",
                "int",
                "bool",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, str, bool]",
                    "Hashable",
                    "Dict[str, str]",
                    "Optional[Callable]"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_admin_resource": {
            "name": "dashboard_set_rgw_api_admin_resource",
            "location": 2885,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_host": {
            "name": "dashboard_set_rgw_api_host",
            "location": 2903,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_port": {
            "name": "dashboard_set_rgw_api_port",
            "location": 2921,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_scheme": {
            "name": "dashboard_set_rgw_api_scheme",
            "location": 2939,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_secret_key": {
            "name": "dashboard_set_rgw_api_secret_key",
            "location": 2957,
            "return": [
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, str, bool]",
                    "Dict[str, str]",
                    "Hashable",
                    "Optional[Callable]"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_ssl_verify": {
            "name": "dashboard_set_rgw_api_ssl_verify",
            "location": 2975,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.dashboard_set_rgw_api_user_id": {
            "name": "dashboard_set_rgw_api_user_id",
            "location": 2993,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Hashable",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.dashboard_set_ssl_certificate": {
            "name": "dashboard_set_ssl_certificate",
            "location": 3011,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "mgr_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_set_ssl_certificate_key": {
            "name": "dashboard_set_ssl_certificate_key",
            "location": 3027,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mgr_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.dashboard_set_user_pwd_expiration_span": {
            "name": "dashboard_set_user_pwd_expiration_span",
            "location": 3043,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "MonCommandApi.dashboard_set_user_pwd_expiration_warning_1": {
            "name": "dashboard_set_user_pwd_expiration_warning_1",
            "location": 3061,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "MonCommandApi.dashboard_set_user_pwd_expiration_warning_2": {
            "name": "dashboard_set_user_pwd_expiration_warning_2",
            "location": 3079,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "MonCommandApi.dashboard_sso_disable": {
            "name": "dashboard_sso_disable",
            "location": 3097,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_sso_enable_saml2": {
            "name": "dashboard_sso_enable_saml2",
            "location": 3113,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_sso_setup_saml2": {
            "name": "dashboard_sso_setup_saml2",
            "location": 3129,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ceph_dashboard_base_url": [],
                "idp_metadata": [],
                "idp_username_attribute": [],
                "idp_entity_id": [],
                "sp_x_509_cert": [],
                "sp_private_key": []
            }
        },
        "MonCommandApi.dashboard_sso_show_saml2": {
            "name": "dashboard_sso_show_saml2",
            "location": 3159,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dashboard_sso_status": {
            "name": "dashboard_sso_status",
            "location": 3175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.deepsea_config_set": {
            "name": "deepsea_config_set",
            "location": 3191,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.deepsea_config_show": {
            "name": "deepsea_config_show",
            "location": 3210,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_check_health": {
            "name": "device_check_health",
            "location": 3226,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_debug_metrics_forced": {
            "name": "device_debug_metrics_forced",
            "location": 3242,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_debug_smart_forced": {
            "name": "device_debug_smart_forced",
            "location": 3258,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_get_health_metrics": {
            "name": "device_get_health_metrics",
            "location": 3274,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "sample": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MonCommandApi.device_info": {
            "name": "device_info",
            "location": 3293,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.device_light": {
            "name": "device_light",
            "location": 3311,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "enable": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "Pattern",
                    "type",
                    "float"
                ],
                "devid": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "Pattern",
                    "type",
                    "float"
                ],
                "light_type": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "Pattern",
                    "type",
                    "float"
                ],
                "force": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "Pattern",
                    "type",
                    "float"
                ]
            }
        },
        "MonCommandApi.device_ls": {
            "name": "device_ls",
            "location": 3335,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_ls_by_daemon": {
            "name": "device_ls_by_daemon",
            "location": 3351,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "MonCommandApi.device_ls_by_host": {
            "name": "device_ls_by_host",
            "location": 3369,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "MonCommandApi.device_ls_lights": {
            "name": "device_ls_lights",
            "location": 3387,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_monitoring_off": {
            "name": "device_monitoring_off",
            "location": 3403,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_monitoring_on": {
            "name": "device_monitoring_on",
            "location": 3419,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.device_predict_life_expectancy": {
            "name": "device_predict_life_expectancy",
            "location": 3435,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.device_query_daemon_health_metrics": {
            "name": "device_query_daemon_health_metrics",
            "location": 3453,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "MonCommandApi.device_rm_life_expectancy": {
            "name": "device_rm_life_expectancy",
            "location": 3471,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.device_scrape_daemon_health_metrics": {
            "name": "device_scrape_daemon_health_metrics",
            "location": 3489,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.device_scrape_health_metrics": {
            "name": "device_scrape_health_metrics",
            "location": 3507,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.device_set_cloud_prediction_config": {
            "name": "device_set_cloud_prediction_config",
            "location": 3525,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "str",
                    "Dict[str, Any]"
                ],
                "user": [
                    "str",
                    "Dict[str, Any]"
                ],
                "password": [
                    "str",
                    "Dict[str, Any]"
                ],
                "certfile": [
                    "str",
                    "Dict[str, Any]"
                ],
                "port": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.device_set_life_expectancy": {
            "name": "device_set_life_expectancy",
            "location": 3549,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ],
                "from_1": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ],
                "to": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.device_show_prediction_config": {
            "name": "device_show_prediction_config",
            "location": 3569,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.df": {
            "name": "df",
            "location": 3585,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "detail": [
                    "str"
                ]
            }
        },
        "MonCommandApi.diskprediction_cloud_status": {
            "name": "diskprediction_cloud_status",
            "location": 3603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.dump_historic_ops": {
            "name": "dump_historic_ops",
            "location": 3619,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.features": {
            "name": "features",
            "location": 3635,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.fs_add_data_pool": {
            "name": "fs_add_data_pool",
            "location": 3651,
            "return": [
                "dict",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "Mapping[str, str]"
                ],
                "pool": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "MonCommandApi.fs_authorize": {
            "name": "fs_authorize",
            "location": 3670,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "filesystem": [
                    "List[Union[\"PipeChain\", str]]",
                    "str",
                    "Set[str]"
                ],
                "entity": [
                    "List[Union[\"PipeChain\", str]]",
                    "str",
                    "Set[str]"
                ],
                "caps": [
                    "List[Union[\"PipeChain\", str]]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "MonCommandApi.fs_dump": {
            "name": "fs_dump",
            "location": 3691,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.fs_fail": {
            "name": "fs_fail",
            "location": 3709,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.fs_flag_set": {
            "name": "fs_flag_set",
            "location": 3727,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "flag_name": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "int"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.fs_get": {
            "name": "fs_get",
            "location": 3749,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_ls": {
            "name": "fs_ls",
            "location": 3767,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.fs_new": {
            "name": "fs_new",
            "location": 3783,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "metadata": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "data": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "force": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "allow_dangerous_metadata_overlay": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "MonCommandApi.fs_reset": {
            "name": "fs_reset",
            "location": 3809,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "Optional[str]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.fs_rm": {
            "name": "fs_rm",
            "location": 3830,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "Optional[str]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.fs_rm_data_pool": {
            "name": "fs_rm_data_pool",
            "location": 3851,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "Mapping[str, str]"
                ],
                "pool": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "MonCommandApi.fs_set": {
            "name": "fs_set",
            "location": 3870,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str"
                ],
                "var": [
                    "str"
                ],
                "val": [
                    "str"
                ],
                "yes_i_really_mean_it": [
                    "str"
                ],
                "yes_i_really_really_mean_it": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_status": {
            "name": "fs_status",
            "location": 3938,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "fs": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_create": {
            "name": "fs_subvolume_create",
            "location": 3956,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "sub_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "size": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "group_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "pool_layout": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "uid": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "gid": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ],
                "mode": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_getpath": {
            "name": "fs_subvolume_getpath",
            "location": 3988,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Optional[str]"
                ],
                "sub_name": [
                    "str",
                    "Optional[str]"
                ],
                "group_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_ls": {
            "name": "fs_subvolume_ls",
            "location": 4011,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_resize": {
            "name": "fs_subvolume_resize",
            "location": 4030,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "sub_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "new_size": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "group_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "no_shrink": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_rm": {
            "name": "fs_subvolume_rm",
            "location": 4055,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str"
                ],
                "sub_name": [
                    "str"
                ],
                "group_name": [
                    "str"
                ],
                "force": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_snapshot_create": {
            "name": "fs_subvolume_snapshot_create",
            "location": 4079,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str"
                ],
                "sub_name": [
                    "str"
                ],
                "snap_name": [
                    "str"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_snapshot_ls": {
            "name": "fs_subvolume_snapshot_ls",
            "location": 4103,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str"
                ],
                "sub_name": [
                    "str"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolume_snapshot_rm": {
            "name": "fs_subvolume_snapshot_rm",
            "location": 4125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "sub_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "snap_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "group_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "force": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_create": {
            "name": "fs_subvolumegroup_create",
            "location": 4150,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Any",
                    "float",
                    "bool"
                ],
                "group_name": [
                    "str",
                    "Any",
                    "float",
                    "bool"
                ],
                "pool_layout": [
                    "str",
                    "Any",
                    "float",
                    "bool"
                ],
                "uid": [
                    "str",
                    "Any",
                    "float",
                    "bool"
                ],
                "gid": [
                    "str",
                    "Any",
                    "float",
                    "bool"
                ],
                "mode": [
                    "str",
                    "Any",
                    "float",
                    "bool"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_getpath": {
            "name": "fs_subvolumegroup_getpath",
            "location": 4178,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Optional[str]"
                ],
                "group_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_ls": {
            "name": "fs_subvolumegroup_ls",
            "location": 4197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_rm": {
            "name": "fs_subvolumegroup_rm",
            "location": 4215,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Optional[str]"
                ],
                "group_name": [
                    "str",
                    "Optional[str]"
                ],
                "force": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_snapshot_create": {
            "name": "fs_subvolumegroup_snapshot_create",
            "location": 4237,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str"
                ],
                "group_name": [
                    "str"
                ],
                "snap_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_snapshot_ls": {
            "name": "fs_subvolumegroup_snapshot_ls",
            "location": 4258,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_subvolumegroup_snapshot_rm": {
            "name": "fs_subvolumegroup_snapshot_rm",
            "location": 4277,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "Optional[str]"
                ],
                "group_name": [
                    "str",
                    "Optional[str]"
                ],
                "snap_name": [
                    "str",
                    "Optional[str]"
                ],
                "force": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.fs_volume_create": {
            "name": "fs_volume_create",
            "location": 4300,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.fs_volume_ls": {
            "name": "fs_volume_ls",
            "location": 4318,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.fs_volume_rm": {
            "name": "fs_volume_rm",
            "location": 4334,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "vol_name": [
                    "str",
                    "bool"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.fsid": {
            "name": "fsid",
            "location": 4355,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.health": {
            "name": "health",
            "location": 4371,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "detail": [
                    "str"
                ]
            }
        },
        "MonCommandApi.health_mute": {
            "name": "health_mute",
            "location": 4389,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "ttl": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "sticky": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "MonCommandApi.health_unmute": {
            "name": "health_unmute",
            "location": 4410,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "MonCommandApi.heap": {
            "name": "heap",
            "location": 4428,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "heapcmd": [
                    "str",
                    "tuple"
                ],
                "value": [
                    "str",
                    "tuple"
                ]
            }
        },
        "MonCommandApi.hello": {
            "name": "hello",
            "location": 4448,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "person_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.influx_config_set": {
            "name": "influx_config_set",
            "location": 4466,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.influx_config_show": {
            "name": "influx_config_show",
            "location": 4485,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.influx_send": {
            "name": "influx_send",
            "location": 4501,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.injectargs": {
            "name": "injectargs",
            "location": 4517,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "injected_args": [
                    "Callable[..., T]",
                    "Sequence[str]",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.insights": {
            "name": "insights",
            "location": 4535,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.insights_prune_health": {
            "name": "insights_prune_health",
            "location": 4551,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "str"
                ]
            }
        },
        "MonCommandApi.iostat": {
            "name": "iostat",
            "location": 4569,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.k8sevents_ceph": {
            "name": "k8sevents_ceph",
            "location": 4585,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.k8sevents_clear_config": {
            "name": "k8sevents_clear_config",
            "location": 4601,
            "return": [
                "bool",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.k8sevents_ls": {
            "name": "k8sevents_ls",
            "location": 4617,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.k8sevents_set_access": {
            "name": "k8sevents_set_access",
            "location": 4633,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.k8sevents_set_config": {
            "name": "k8sevents_set_config",
            "location": 4653,
            "return": [
                "str",
                "dict",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.k8sevents_status": {
            "name": "k8sevents_status",
            "location": 4673,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.log": {
            "name": "log",
            "location": 4689,
            "return": [
                "Union[int, float]",
                "List[Tuple[int, int]]",
                "int",
                "Iterator[int]"
            ],
            "arguments": {
                "self": [],
                "logtext": [
                    "str"
                ]
            }
        },
        "MonCommandApi.log_last": {
            "name": "log_last",
            "location": 4707,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "level": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "channel": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_add_data_pool": {
            "name": "mds_add_data_pool",
            "location": 4729,
            "return": [
                "dict",
                "List[str]",
                "bool",
                "int",
                "List[Type]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_cluster_down": {
            "name": "mds_cluster_down",
            "location": 4748,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mds_cluster_up": {
            "name": "mds_cluster_up",
            "location": 4765,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mds_compat_rm_compat": {
            "name": "mds_compat_rm_compat",
            "location": 4781,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_compat_rm_incompat": {
            "name": "mds_compat_rm_incompat",
            "location": 4799,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_compat_show": {
            "name": "mds_compat_show",
            "location": 4817,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mds_count_metadata": {
            "name": "mds_count_metadata",
            "location": 4833,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "property_1": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MonCommandApi.mds_deactivate": {
            "name": "mds_deactivate",
            "location": 4852,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_dump": {
            "name": "mds_dump",
            "location": 4871,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_fail": {
            "name": "mds_fail",
            "location": 4889,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role_or_gid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_freeze": {
            "name": "mds_freeze",
            "location": 4907,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role_or_gid": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "BaseException"
                ],
                "val": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "BaseException"
                ]
            }
        },
        "MonCommandApi.mds_getmap": {
            "name": "mds_getmap",
            "location": 4927,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_metadata": {
            "name": "mds_metadata",
            "location": 4945,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.mds_newfs": {
            "name": "mds_newfs",
            "location": 4964,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "data": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "MonCommandApi.mds_ok_to_stop": {
            "name": "mds_ok_to_stop",
            "location": 4986,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.mds_remove_data_pool": {
            "name": "mds_remove_data_pool",
            "location": 5006,
            "return": [
                "Callable",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_repaired": {
            "name": "mds_repaired",
            "location": 5024,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_rm": {
            "name": "mds_rm",
            "location": 5042,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "gid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_rm_data_pool": {
            "name": "mds_rm_data_pool",
            "location": 5061,
            "return": [
                "Callable",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_rmfailed": {
            "name": "mds_rmfailed",
            "location": 5079,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Pattern"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Pattern"
                ]
            }
        },
        "MonCommandApi.mds_set": {
            "name": "mds_set",
            "location": 5099,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "str",
                    "list"
                ],
                "val": [
                    "str",
                    "list"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "list"
                ]
            }
        },
        "MonCommandApi.mds_set_max_mds": {
            "name": "mds_set_max_mds",
            "location": 5123,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "maxmds": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_set_state": {
            "name": "mds_set_state",
            "location": 5141,
            "return": [
                "dict",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "gid": [
                    "Iterable[T]",
                    "Callable[[T], bool]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "state": [
                    "Iterable[T]",
                    "Callable[[T], bool]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.mds_stat": {
            "name": "mds_stat",
            "location": 5160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mds_stop": {
            "name": "mds_stop",
            "location": 5177,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mds_tell": {
            "name": "mds_tell",
            "location": 5196,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "List[str]",
                    "List[Dict[str, str]]",
                    "tuple",
                    "Callable",
                    "str"
                ],
                "args": []
            }
        },
        "MonCommandApi.mds_versions": {
            "name": "mds_versions",
            "location": 5215,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mgr_count_metadata": {
            "name": "mgr_count_metadata",
            "location": 5231,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "property_1": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MonCommandApi.mgr_dump": {
            "name": "mgr_dump",
            "location": 5249,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mgr_fail": {
            "name": "mgr_fail",
            "location": 5267,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.mgr_metadata": {
            "name": "mgr_metadata",
            "location": 5285,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.mgr_module_disable": {
            "name": "mgr_module_disable",
            "location": 5303,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "Optional[str]",
                    "List[Tuple]",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.mgr_module_enable": {
            "name": "mgr_module_enable",
            "location": 5321,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "force": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mgr_module_ls": {
            "name": "mgr_module_ls",
            "location": 5340,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mgr_self_test_background_start": {
            "name": "mgr_self_test_background_start",
            "location": 5356,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "workload": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mgr_self_test_background_stop": {
            "name": "mgr_self_test_background_stop",
            "location": 5374,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mgr_self_test_cluster_log": {
            "name": "mgr_self_test_cluster_log",
            "location": 5390,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "priority": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mgr_self_test_config_get": {
            "name": "mgr_self_test_config_get",
            "location": 5410,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.mgr_self_test_config_get_localized": {
            "name": "mgr_self_test_config_get_localized",
            "location": 5428,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.mgr_self_test_health_clear": {
            "name": "mgr_self_test_health_clear",
            "location": 5446,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "checks": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mgr_self_test_health_set": {
            "name": "mgr_self_test_health_set",
            "location": 5464,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "checks": []
            }
        },
        "MonCommandApi.mgr_self_test_insights_set_now_offset": {
            "name": "mgr_self_test_insights_set_now_offset",
            "location": 5482,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "hours": []
            }
        },
        "MonCommandApi.mgr_self_test_module": {
            "name": "mgr_self_test_module",
            "location": 5500,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[bool]",
                    "list"
                ]
            }
        },
        "MonCommandApi.mgr_self_test_remote": {
            "name": "mgr_self_test_remote",
            "location": 5518,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mgr_self_test_run": {
            "name": "mgr_self_test_run",
            "location": 5534,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mgr_services": {
            "name": "mgr_services",
            "location": 5550,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mgr_versions": {
            "name": "mgr_versions",
            "location": 5566,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mon_add": {
            "name": "mon_add",
            "location": 5582,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "addr": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mon_count_metadata": {
            "name": "mon_count_metadata",
            "location": 5601,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "property_1": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MonCommandApi.mon_dump": {
            "name": "mon_dump",
            "location": 5619,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mon_enable_msgr2": {
            "name": "mon_enable_msgr2",
            "location": 5637,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mon_feature_ls": {
            "name": "mon_feature_ls",
            "location": 5653,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "with_value": [
                    "str",
                    "Union[int, str, bool]"
                ]
            }
        },
        "MonCommandApi.mon_feature_set": {
            "name": "mon_feature_set",
            "location": 5671,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "feature_name": [
                    "str",
                    "Optional[str]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.mon_getmap": {
            "name": "mon_getmap",
            "location": 5692,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mon_metadata": {
            "name": "mon_metadata",
            "location": 5710,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.mon_ok_to_add_offline": {
            "name": "mon_ok_to_add_offline",
            "location": 5728,
            "return": [
                "int",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mon_ok_to_rm": {
            "name": "mon_ok_to_rm",
            "location": 5744,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.mon_ok_to_stop": {
            "name": "mon_ok_to_stop",
            "location": 5762,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.mon_remove": {
            "name": "mon_remove",
            "location": 5782,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mon_rm": {
            "name": "mon_rm",
            "location": 5800,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.mon_scrub": {
            "name": "mon_scrub",
            "location": 5818,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mon_set_addrs": {
            "name": "mon_set_addrs",
            "location": 5834,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ],
                "addrs": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "MonCommandApi.mon_set_rank": {
            "name": "mon_set_rank",
            "location": 5853,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ],
                "rank": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "MonCommandApi.mon_set_weight": {
            "name": "mon_set_weight",
            "location": 5872,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ],
                "weight": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "MonCommandApi.mon_stat": {
            "name": "mon_stat",
            "location": 5891,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mon_versions": {
            "name": "mon_versions",
            "location": 5907,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.mon_status": {
            "name": "mon_status",
            "location": 5923,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.node_ls": {
            "name": "node_ls",
            "location": 5939,
            "return": [],
            "arguments": {
                "self": [],
                "type_1": [
                    "str",
                    "Optional[str]",
                    "List[Tuple]"
                ]
            }
        },
        "MonCommandApi.ops": {
            "name": "ops",
            "location": 5958,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.orchestrator_cancel": {
            "name": "orchestrator_cancel",
            "location": 5974,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.orchestrator_device_ls": {
            "name": "orchestrator_device_ls",
            "location": 5990,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "format": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "refresh": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_host_add": {
            "name": "orchestrator_host_add",
            "location": 6011,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Type"
                ]
            }
        },
        "MonCommandApi.orchestrator_host_label_add": {
            "name": "orchestrator_host_label_add",
            "location": 6029,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "label": []
            }
        },
        "MonCommandApi.orchestrator_host_label_rm": {
            "name": "orchestrator_host_label_rm",
            "location": 6048,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_host_ls": {
            "name": "orchestrator_host_ls",
            "location": 6067,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_host_rm": {
            "name": "orchestrator_host_rm",
            "location": 6085,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_mds_add": {
            "name": "orchestrator_mds_add",
            "location": 6103,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "list",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "num": [
                    "str",
                    "list",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "hosts": [
                    "str",
                    "list",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_mds_rm": {
            "name": "orchestrator_mds_rm",
            "location": 6124,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_mds_update": {
            "name": "orchestrator_mds_update",
            "location": 6142,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "fs_name": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "num": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "hosts": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "label": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_mgr_update": {
            "name": "orchestrator_mgr_update",
            "location": 6165,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "hosts": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "label": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_mon_update": {
            "name": "orchestrator_mon_update",
            "location": 6186,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "hosts": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "label": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_nfs_add": {
            "name": "orchestrator_nfs_add",
            "location": 6207,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "svc_arg": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "pool": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "num": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "hosts": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "label": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "MonCommandApi.orchestrator_nfs_rm": {
            "name": "orchestrator_nfs_rm",
            "location": 6233,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "svc_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_nfs_update": {
            "name": "orchestrator_nfs_update",
            "location": 6251,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "svc_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "num": [
                    "int",
                    "str",
                    "Optional[int]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "hosts": [
                    "int",
                    "str",
                    "Optional[int]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "label": [
                    "int",
                    "str",
                    "Optional[int]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.orchestrator_osd_create": {
            "name": "orchestrator_osd_create",
            "location": 6273,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "svc_arg": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.orchestrator_osd_rm": {
            "name": "orchestrator_osd_rm",
            "location": 6292,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "svc_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_rbd_mirror_add": {
            "name": "orchestrator_rbd_mirror_add",
            "location": 6310,
            "return": [
                "list",
                "int",
                "List[str]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Dict[str, Any]",
                    "dict",
                    "Type",
                    "bool"
                ],
                "hosts": [
                    "Dict[str, Any]",
                    "dict",
                    "Type",
                    "bool"
                ]
            }
        },
        "MonCommandApi.orchestrator_rbd_mirror_rm": {
            "name": "orchestrator_rbd_mirror_rm",
            "location": 6330,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_rbd_mirror_update": {
            "name": "orchestrator_rbd_mirror_update",
            "location": 6348,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "hosts": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "label": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_rgw_add": {
            "name": "orchestrator_rgw_add",
            "location": 6369,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "realm_name": [
                    "str"
                ],
                "zone_name": [
                    "str"
                ],
                "num": [
                    "str"
                ],
                "hosts": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_rgw_rm": {
            "name": "orchestrator_rgw_rm",
            "location": 6393,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "realm_name": [
                    "str"
                ],
                "zone_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_rgw_update": {
            "name": "orchestrator_rgw_update",
            "location": 6412,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "zone_name": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]"
                ],
                "realm_name": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]"
                ],
                "num": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]"
                ],
                "hosts": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]"
                ],
                "label": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_service": {
            "name": "orchestrator_service",
            "location": 6437,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ],
                "svc_type": [
                    "str"
                ],
                "svc_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.orchestrator_service_ls": {
            "name": "orchestrator_service_ls",
            "location": 6459,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Optional[str]"
                ],
                "svc_type": [
                    "str",
                    "Optional[str]"
                ],
                "svc_id": [
                    "str",
                    "Optional[str]"
                ],
                "format": [
                    "str",
                    "Optional[str]"
                ],
                "refresh": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.orchestrator_service_instance": {
            "name": "orchestrator_service_instance",
            "location": 6485,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool",
                    "Sequence[Optional[str]]",
                    "int"
                ],
                "svc_type": [
                    "str",
                    "bool",
                    "Sequence[Optional[str]]",
                    "int"
                ],
                "svc_id": [
                    "str",
                    "bool",
                    "Sequence[Optional[str]]",
                    "int"
                ]
            }
        },
        "MonCommandApi.orchestrator_set_backend": {
            "name": "orchestrator_set_backend",
            "location": 6507,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "MonCommandApi.orchestrator_status": {
            "name": "orchestrator_status",
            "location": 6525,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_add_nodown": {
            "name": "osd_add_nodown",
            "location": 6542,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_add_noin": {
            "name": "osd_add_noin",
            "location": 6562,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_add_noout": {
            "name": "osd_add_noout",
            "location": 6582,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_add_noup": {
            "name": "osd_add_noup",
            "location": 6602,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_blacklist": {
            "name": "osd_blacklist",
            "location": 6621,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "blacklistop": [
                    "str"
                ],
                "addr": [
                    "str"
                ],
                "expire": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_blacklist_clear": {
            "name": "osd_blacklist_clear",
            "location": 6643,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_blacklist_ls": {
            "name": "osd_blacklist_ls",
            "location": 6659,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_blocked_by": {
            "name": "osd_blocked_by",
            "location": 6675,
            "return": [
                "list",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_count_metadata": {
            "name": "osd_count_metadata",
            "location": 6691,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "property_1": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MonCommandApi.osd_create": {
            "name": "osd_create",
            "location": 6710,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_crush_add": {
            "name": "osd_crush_add",
            "location": 6729,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "weight": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "MonCommandApi.osd_crush_add_bucket": {
            "name": "osd_crush_add_bucket",
            "location": 6750,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type[T]"
                ],
                "type_1": [
                    "str",
                    "Type[T]"
                ],
                "args": []
            }
        },
        "MonCommandApi.osd_crush_class_create": {
            "name": "osd_crush_class_create",
            "location": 6771,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "class_1": [
                    "str",
                    "Dict[str, Any]",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "MonCommandApi.osd_crush_class_ls": {
            "name": "osd_crush_class_ls",
            "location": 6789,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_class_ls_osd": {
            "name": "osd_crush_class_ls_osd",
            "location": 6805,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "class_1": []
            }
        },
        "MonCommandApi.osd_crush_class_rename": {
            "name": "osd_crush_class_rename",
            "location": 6823,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "srcname": [
                    "str",
                    "Callable[[str], None]"
                ],
                "dstname": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "MonCommandApi.osd_crush_class_rm": {
            "name": "osd_crush_class_rm",
            "location": 6842,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "class_1": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_create_or_move": {
            "name": "osd_crush_create_or_move",
            "location": 6860,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "weight": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "MonCommandApi.osd_crush_dump": {
            "name": "osd_crush_dump",
            "location": 6881,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_get_device_class": {
            "name": "osd_crush_get_device_class",
            "location": 6897,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_crush_get_tunable": {
            "name": "osd_crush_get_tunable",
            "location": 6915,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "tunable": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.osd_crush_link": {
            "name": "osd_crush_link",
            "location": 6933,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "args": []
            }
        },
        "MonCommandApi.osd_crush_ls": {
            "name": "osd_crush_ls",
            "location": 6952,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_move": {
            "name": "osd_crush_move",
            "location": 6970,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "args": []
            }
        },
        "MonCommandApi.osd_crush_remove": {
            "name": "osd_crush_remove",
            "location": 6990,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "ancestor": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_rename_bucket": {
            "name": "osd_crush_rename_bucket",
            "location": 7009,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "srcname": [
                    "str"
                ],
                "dstname": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_reweight": {
            "name": "osd_crush_reweight",
            "location": 7028,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "weight": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_reweight_all": {
            "name": "osd_crush_reweight_all",
            "location": 7047,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_reweight_subtree": {
            "name": "osd_crush_reweight_subtree",
            "location": 7063,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "weight": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_rm": {
            "name": "osd_crush_rm",
            "location": 7082,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "ancestor": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_rm_device_class": {
            "name": "osd_crush_rm_device_class",
            "location": 7101,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_create_erasure": {
            "name": "osd_crush_rule_create_erasure",
            "location": 7120,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int",
                    "dict"
                ],
                "profile": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_create_replicated": {
            "name": "osd_crush_rule_create_replicated",
            "location": 7140,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Union[Dict, List, str]",
                    "Callable"
                ],
                "root": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Union[Dict, List, str]",
                    "Callable"
                ],
                "type_1": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Union[Dict, List, str]",
                    "Callable"
                ],
                "class_1": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Union[Dict, List, str]",
                    "Callable"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_create_simple": {
            "name": "osd_crush_rule_create_simple",
            "location": 7164,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Optional[object]"
                ],
                "root": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Optional[object]"
                ],
                "type_1": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Optional[object]"
                ],
                "mode": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Optional[object]"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_dump": {
            "name": "osd_crush_rule_dump",
            "location": 7188,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_list": {
            "name": "osd_crush_rule_list",
            "location": 7207,
            "return": [
                "list",
                "int",
                "bool",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_rule_ls": {
            "name": "osd_crush_rule_ls",
            "location": 7223,
            "return": [
                "int",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_rule_ls_by_class": {
            "name": "osd_crush_rule_ls_by_class",
            "location": 7239,
            "return": [
                "Awaitable",
                "List[str]",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "class_1": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_rename": {
            "name": "osd_crush_rule_rename",
            "location": 7257,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "srcname": [
                    "str"
                ],
                "dstname": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_rule_rm": {
            "name": "osd_crush_rule_rm",
            "location": 7276,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_set_all_straw_buckets_to_straw2": {
            "name": "osd_crush_set_all_straw_buckets_to_straw2",
            "location": 7335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_set_device_class": {
            "name": "osd_crush_set_device_class",
            "location": 7351,
            "return": [
                "List[str]",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "class_1": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "ids": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_crush_set_tunable": {
            "name": "osd_crush_set_tunable",
            "location": 7371,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "tunable": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Tuple[str]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "MonCommandApi.osd_crush_show_tunables": {
            "name": "osd_crush_show_tunables",
            "location": 7390,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_swap_bucket": {
            "name": "osd_crush_swap_bucket",
            "location": 7406,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "dest": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_crush_tree": {
            "name": "osd_crush_tree",
            "location": 7429,
            "return": [
                "int",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "shadow": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_tunables": {
            "name": "osd_crush_tunables",
            "location": 7447,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_unlink": {
            "name": "osd_crush_unlink",
            "location": 7466,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "ancestor": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_crush_weight_set_create": {
            "name": "osd_crush_weight_set_create",
            "location": 7485,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "mode": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.osd_crush_weight_set_create_compat": {
            "name": "osd_crush_weight_set_create_compat",
            "location": 7504,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_weight_set_dump": {
            "name": "osd_crush_weight_set_dump",
            "location": 7520,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_weight_set_ls": {
            "name": "osd_crush_weight_set_ls",
            "location": 7536,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_crush_weight_set_reweight": {
            "name": "osd_crush_weight_set_reweight",
            "location": 7552,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "tuple",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "item": [
                    "tuple",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "weight": [
                    "tuple",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "MonCommandApi.osd_crush_weight_set_reweight_compat": {
            "name": "osd_crush_weight_set_reweight_compat",
            "location": 7572,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Mapping[str, str]"
                ],
                "weight": [
                    "Mapping[str, str]"
                ]
            }
        },
        "MonCommandApi.osd_crush_weight_set_rm": {
            "name": "osd_crush_weight_set_rm",
            "location": 7592,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.osd_crush_weight_set_rm_compat": {
            "name": "osd_crush_weight_set_rm_compat",
            "location": 7610,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_deep_scrub": {
            "name": "osd_deep_scrub",
            "location": 7626,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_destroy": {
            "name": "osd_destroy",
            "location": 7644,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "force": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_destroy_actual": {
            "name": "osd_destroy_actual",
            "location": 7668,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_df": {
            "name": "osd_df",
            "location": 7689,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "output_method": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "filter_by": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "filter": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_down": {
            "name": "osd_down",
            "location": 7711,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "definitely_dead": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_dump": {
            "name": "osd_dump",
            "location": 7730,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_erasure_code_profile_get": {
            "name": "osd_erasure_code_profile_get",
            "location": 7748,
            "return": [
                "Callable",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.osd_erasure_code_profile_ls": {
            "name": "osd_erasure_code_profile_ls",
            "location": 7766,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_erasure_code_profile_rm": {
            "name": "osd_erasure_code_profile_rm",
            "location": 7782,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_erasure_code_profile_set": {
            "name": "osd_erasure_code_profile_set",
            "location": 7800,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "profile": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "force": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_find": {
            "name": "osd_find",
            "location": 7822,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.osd_force_create_pg": {
            "name": "osd_force_create_pg",
            "location": 7840,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str",
                    "bytes",
                    "int"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_get_require_min_compat_client": {
            "name": "osd_get_require_min_compat_client",
            "location": 7859,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_getcrushmap": {
            "name": "osd_getcrushmap",
            "location": 7875,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_getmap": {
            "name": "osd_getmap",
            "location": 7893,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_getmaxosd": {
            "name": "osd_getmaxosd",
            "location": 7911,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_in": {
            "name": "osd_in",
            "location": 7927,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_info": {
            "name": "osd_info",
            "location": 7946,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_last_stat_seq": {
            "name": "osd_last_stat_seq",
            "location": 7964,
            "return": [],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_lost": {
            "name": "osd_lost",
            "location": 7982,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_ls": {
            "name": "osd_ls",
            "location": 8002,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_ls_tree": {
            "name": "osd_ls_tree",
            "location": 8020,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "epoch": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_lspools": {
            "name": "osd_lspools",
            "location": 8040,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_map": {
            "name": "osd_map",
            "location": 8056,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "Optional[str]"
                ],
                "object": [
                    "Optional[str]"
                ],
                "nspace": [
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.osd_metadata": {
            "name": "osd_metadata",
            "location": 8076,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_new": {
            "name": "osd_new",
            "location": 8094,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "id_1": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_numa_status": {
            "name": "osd_numa_status",
            "location": 8115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_ok_to_stop": {
            "name": "osd_ok_to_stop",
            "location": 8131,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.osd_out": {
            "name": "osd_out",
            "location": 8150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_pause": {
            "name": "osd_pause",
            "location": 8168,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_perf": {
            "name": "osd_perf",
            "location": 8184,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_perf_counters_get": {
            "name": "osd_perf_counters_get",
            "location": 8200,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "query_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_perf_query_add": {
            "name": "osd_perf_query_add",
            "location": 8218,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_perf_query_remove": {
            "name": "osd_perf_query_remove",
            "location": 8236,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "query_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_pg_temp": {
            "name": "osd_pg_temp",
            "location": 8254,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "id_1": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.osd_pg_upmap": {
            "name": "osd_pg_upmap",
            "location": 8273,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "id_1": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonCommandApi.osd_pg_upmap_items": {
            "name": "osd_pg_upmap_items",
            "location": 8292,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str",
                    "bool",
                    "List[dict]"
                ],
                "id_1": [
                    "str",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "MonCommandApi.osd_pool_application_disable": {
            "name": "osd_pool_application_disable",
            "location": 8312,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "bool"
                ],
                "app": [
                    "bool"
                ],
                "yes_i_really_mean_it": [
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_pool_application_enable": {
            "name": "osd_pool_application_enable",
            "location": 8334,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "bool"
                ],
                "app": [
                    "bool"
                ],
                "yes_i_really_mean_it": [
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_pool_application_get": {
            "name": "osd_pool_application_get",
            "location": 8356,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bool"
                ],
                "app": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_pool_application_rm": {
            "name": "osd_pool_application_rm",
            "location": 8377,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bool",
                    "TextIO",
                    "List[str]"
                ],
                "app": [
                    "str",
                    "bool",
                    "TextIO",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "bool",
                    "TextIO",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.osd_pool_application_set": {
            "name": "osd_pool_application_set",
            "location": 8397,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Union[Dict, List]"
                ],
                "app": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Union[Dict, List]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Union[Dict, List]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Union[Dict, List]"
                ]
            }
        },
        "MonCommandApi.osd_pool_autoscale_status": {
            "name": "osd_pool_autoscale_status",
            "location": 8419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_pool_cancel_force_backfill": {
            "name": "osd_pool_cancel_force_backfill",
            "location": 8435,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_cancel_force_recovery": {
            "name": "osd_pool_cancel_force_recovery",
            "location": 8453,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_create": {
            "name": "osd_pool_create",
            "location": 8471,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "pg_num": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "pgp_num": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "pool_type": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "erasure_code_profile": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "rule": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "expected_num_objects": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "size": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "pg_num_min": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "target_size_bytes": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ],
                "target_size_ratio": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[float]"
                ]
            }
        },
        "MonCommandApi.osd_pool_deep_scrub": {
            "name": "osd_pool_deep_scrub",
            "location": 8510,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_delete": {
            "name": "osd_pool_delete",
            "location": 8529,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "pool2": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "yes_i_really_really_mean_it": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "yes_i_really_really_mean_it_not_faking": [
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.osd_pool_force_backfill": {
            "name": "osd_pool_force_backfill",
            "location": 8555,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_force_recovery": {
            "name": "osd_pool_force_recovery",
            "location": 8573,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_get": {
            "name": "osd_pool_get",
            "location": 8591,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Type"
                ],
                "var": [
                    "str",
                    "Type"
                ]
            }
        },
        "MonCommandApi.osd_pool_get_quota": {
            "name": "osd_pool_get_quota",
            "location": 8623,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.osd_pool_ls": {
            "name": "osd_pool_ls",
            "location": 8641,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "detail": [
                    "Type",
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_pool_mksnap": {
            "name": "osd_pool_mksnap",
            "location": 8659,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ],
                "snap": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_pool_rename": {
            "name": "osd_pool_rename",
            "location": 8678,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "srcpool": [
                    "str"
                ],
                "destpool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_pool_repair": {
            "name": "osd_pool_repair",
            "location": 8697,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_rm": {
            "name": "osd_pool_rm",
            "location": 8715,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "int",
                    "dict"
                ],
                "pool2": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "int",
                    "dict"
                ],
                "yes_i_really_really_mean_it": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "int",
                    "dict"
                ],
                "yes_i_really_really_mean_it_not_faking": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "MonCommandApi.osd_pool_rmsnap": {
            "name": "osd_pool_rmsnap",
            "location": 8741,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ],
                "snap": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_pool_scrub": {
            "name": "osd_pool_scrub",
            "location": 8760,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_pool_set": {
            "name": "osd_pool_set",
            "location": 8778,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "dict"
                ],
                "var": [
                    "str",
                    "dict"
                ],
                "val": [
                    "str",
                    "dict"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "dict"
                ]
            }
        },
        "MonCommandApi.osd_pool_set_quota": {
            "name": "osd_pool_set_quota",
            "location": 8813,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "dict",
                    "bytearray",
                    "ValueError",
                    "str"
                ],
                "field": [
                    "dict",
                    "bytearray",
                    "ValueError",
                    "str"
                ],
                "val": [
                    "dict",
                    "bytearray",
                    "ValueError",
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_pool_stats": {
            "name": "osd_pool_stats",
            "location": 8833,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_primary_affinity": {
            "name": "osd_primary_affinity",
            "location": 8851,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "bytes"
                ],
                "weight": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MonCommandApi.osd_primary_temp": {
            "name": "osd_primary_temp",
            "location": 8870,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Optional[str]"
                ],
                "id_1": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.osd_purge": {
            "name": "osd_purge",
            "location": 8889,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "force": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_purge_actual": {
            "name": "osd_purge_actual",
            "location": 8912,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_purge_new": {
            "name": "osd_purge_new",
            "location": 8932,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_repair": {
            "name": "osd_repair",
            "location": 8952,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_require_osd_release": {
            "name": "osd_require_osd_release",
            "location": 8970,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "release": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Pattern"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Pattern"
                ]
            }
        },
        "MonCommandApi.osd_reweight": {
            "name": "osd_reweight",
            "location": 8991,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_1": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ],
                "weight": [
                    "str",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "MonCommandApi.osd_reweight_by_pg": {
            "name": "osd_reweight_by_pg",
            "location": 9010,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "oload": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "max_change": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "max_osds": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "pools": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_reweight_by_utilization": {
            "name": "osd_reweight_by_utilization",
            "location": 9035,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "oload": [
                    "int",
                    "Optional[int]"
                ],
                "max_change": [
                    "int",
                    "Optional[int]"
                ],
                "max_osds": [
                    "int",
                    "Optional[int]"
                ],
                "no_increasing": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_reweightn": {
            "name": "osd_reweightn",
            "location": 9060,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_rm": {
            "name": "osd_rm",
            "location": 9079,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_rm_nodown": {
            "name": "osd_rm_nodown",
            "location": 9098,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_rm_noin": {
            "name": "osd_rm_noin",
            "location": 9119,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_rm_noout": {
            "name": "osd_rm_noout",
            "location": 9140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_rm_noup": {
            "name": "osd_rm_noup",
            "location": 9161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_rm_pg_upmap": {
            "name": "osd_rm_pg_upmap",
            "location": 9181,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_rm_pg_upmap_items": {
            "name": "osd_rm_pg_upmap_items",
            "location": 9199,
            "return": [
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_safe_to_destroy": {
            "name": "osd_safe_to_destroy",
            "location": 9217,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_scrub": {
            "name": "osd_scrub",
            "location": 9236,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "MonCommandApi.osd_set": {
            "name": "osd_set",
            "location": 9254,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "List[str]",
                    "List[int]",
                    "int",
                    "list"
                ],
                "yes_i_really_mean_it": [
                    "bool",
                    "List[str]",
                    "List[int]",
                    "int",
                    "list"
                ]
            }
        },
        "MonCommandApi.osd_set_backfillfull_ratio": {
            "name": "osd_set_backfillfull_ratio",
            "location": 9275,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_set_full_ratio": {
            "name": "osd_set_full_ratio",
            "location": 9293,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_set_group": {
            "name": "osd_set_group",
            "location": 9311,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "str",
                    "int"
                ],
                "who": [
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_set_nearfull_ratio": {
            "name": "osd_set_nearfull_ratio",
            "location": 9331,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_set_require_min_compat_client": {
            "name": "osd_set_require_min_compat_client",
            "location": 9349,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "yes_i_really_mean_it": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "MonCommandApi.osd_setcrushmap": {
            "name": "osd_setcrushmap",
            "location": 9370,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "prior_version": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_setmaxosd": {
            "name": "osd_setmaxosd",
            "location": 9388,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "newmax": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_stat": {
            "name": "osd_stat",
            "location": 9406,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_status": {
            "name": "osd_status",
            "location": 9422,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[List]"
                ]
            }
        },
        "MonCommandApi.osd_stop": {
            "name": "osd_stop",
            "location": 9440,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "Optional[int]"
                ]
            }
        },
        "MonCommandApi.osd_test_reweight_by_pg": {
            "name": "osd_test_reweight_by_pg",
            "location": 9458,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "oload": [
                    "float",
                    "int"
                ],
                "max_change": [
                    "float",
                    "int"
                ],
                "max_osds": [
                    "float",
                    "int"
                ],
                "pools": [
                    "float",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_test_reweight_by_utilization": {
            "name": "osd_test_reweight_by_utilization",
            "location": 9483,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "oload": [
                    "Optional[int]",
                    "float",
                    "int",
                    "Optional[float]",
                    "str"
                ],
                "max_change": [
                    "Optional[int]",
                    "float",
                    "int",
                    "Optional[float]",
                    "str"
                ],
                "max_osds": [
                    "Optional[int]",
                    "float",
                    "int",
                    "Optional[float]",
                    "str"
                ],
                "no_increasing": [
                    "Optional[int]",
                    "float",
                    "int",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_tier_add": {
            "name": "osd_tier_add",
            "location": 9508,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Type"
                ],
                "tierpool": [
                    "str",
                    "Type"
                ],
                "force_nonempty": [
                    "str",
                    "Type"
                ]
            }
        },
        "MonCommandApi.osd_tier_add_cache": {
            "name": "osd_tier_add_cache",
            "location": 9531,
            "return": [
                "list",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bytes",
                    "int"
                ],
                "tierpool": [
                    "str",
                    "bytes",
                    "int"
                ],
                "size": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_tier_cache_mode": {
            "name": "osd_tier_cache_mode",
            "location": 9552,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "yes_i_really_mean_it": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_tier_remove": {
            "name": "osd_tier_remove",
            "location": 9576,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ],
                "tierpool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_tier_remove_overlay": {
            "name": "osd_tier_remove_overlay",
            "location": 9597,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_tier_rm": {
            "name": "osd_tier_rm",
            "location": 9615,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ],
                "tierpool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_tier_rm_overlay": {
            "name": "osd_tier_rm_overlay",
            "location": 9635,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str"
                ]
            }
        },
        "MonCommandApi.osd_tier_set_overlay": {
            "name": "osd_tier_set_overlay",
            "location": 9653,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "overlaypool": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_tree": {
            "name": "osd_tree",
            "location": 9672,
            "return": [
                "int",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "dict",
                    "str",
                    "int"
                ],
                "states": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "MonCommandApi.osd_tree_from": {
            "name": "osd_tree_from",
            "location": 9692,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Dict[str, object]",
                    "dict"
                ],
                "epoch": [
                    "str",
                    "Dict[str, object]",
                    "dict"
                ],
                "states": [
                    "str",
                    "Dict[str, object]",
                    "dict"
                ]
            }
        },
        "MonCommandApi.osd_unpause": {
            "name": "osd_unpause",
            "location": 9713,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_unset": {
            "name": "osd_unset",
            "location": 9729,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.osd_unset_group": {
            "name": "osd_unset_group",
            "location": 9749,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "str",
                    "Type[T]"
                ],
                "who": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "MonCommandApi.osd_utilization": {
            "name": "osd_utilization",
            "location": 9769,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.osd_versions": {
            "name": "osd_versions",
            "location": 9785,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.pg_cancel_force_backfill": {
            "name": "pg_cancel_force_backfill",
            "location": 9801,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_cancel_force_recovery": {
            "name": "pg_cancel_force_recovery",
            "location": 9819,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_debug": {
            "name": "pg_debug",
            "location": 9837,
            "return": [
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "debugop": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_deep_scrub": {
            "name": "pg_deep_scrub",
            "location": 9856,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_dump": {
            "name": "pg_dump",
            "location": 9874,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "dumpcontents": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_dump_json": {
            "name": "pg_dump_json",
            "location": 9893,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "dumpcontents": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_dump_pools_json": {
            "name": "pg_dump_pools_json",
            "location": 9912,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.pg_dump_stuck": {
            "name": "pg_dump_stuck",
            "location": 9928,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "stuckops": [
                    "str"
                ],
                "threshold": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_force_backfill": {
            "name": "pg_force_backfill",
            "location": 9949,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_force_recovery": {
            "name": "pg_force_recovery",
            "location": 9967,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_getmap": {
            "name": "pg_getmap",
            "location": 9985,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.pg_ls": {
            "name": "pg_ls",
            "location": 10001,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ],
                "states": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_ls_by_osd": {
            "name": "pg_ls_by_osd",
            "location": 10021,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "osd": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "pool": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "states": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.pg_ls_by_pool": {
            "name": "pg_ls_by_pool",
            "location": 10042,
            "return": [
                "str",
                "list",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "poolstr": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ],
                "states": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_ls_by_primary": {
            "name": "pg_ls_by_primary",
            "location": 10061,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "osd": [
                    "dict",
                    "Optional[str]"
                ],
                "pool": [
                    "dict",
                    "Optional[str]"
                ],
                "states": [
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.pg_map": {
            "name": "pg_map",
            "location": 10082,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_repair": {
            "name": "pg_repair",
            "location": 10100,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_repeer": {
            "name": "pg_repeer",
            "location": 10118,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_scrub": {
            "name": "pg_scrub",
            "location": 10136,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pgid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.pg_stat": {
            "name": "pg_stat",
            "location": 10154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.progress": {
            "name": "progress",
            "location": 10170,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.progress_clear": {
            "name": "progress_clear",
            "location": 10186,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.progress_json": {
            "name": "progress_json",
            "location": 10202,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.prometheus_file_sd_config": {
            "name": "prometheus_file_sd_config",
            "location": 10218,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.quorum_enter": {
            "name": "quorum_enter",
            "location": 10234,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.quorum_exit": {
            "name": "quorum_exit",
            "location": 10250,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.quorum_status": {
            "name": "quorum_status",
            "location": 10266,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.rbd_perf_image_counters": {
            "name": "rbd_perf_image_counters",
            "location": 10282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pool_spec": [
                    "str",
                    "List[str]"
                ],
                "sort_by": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.rbd_perf_image_stats": {
            "name": "rbd_perf_image_stats",
            "location": 10303,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pool_spec": [
                    "str",
                    "List[str]"
                ],
                "sort_by": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.rbd_task_add_flatten": {
            "name": "rbd_task_add_flatten",
            "location": 10324,
            "return": [
                "Set[str]",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "image_spec": [
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "dict",
                    "float"
                ]
            }
        },
        "MonCommandApi.rbd_task_add_migration_abort": {
            "name": "rbd_task_add_migration_abort",
            "location": 10342,
            "return": [
                "Set[str]",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "image_spec": [
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "dict",
                    "float"
                ]
            }
        },
        "MonCommandApi.rbd_task_add_migration_commit": {
            "name": "rbd_task_add_migration_commit",
            "location": 10360,
            "return": [
                "Set[str]",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "image_spec": [
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "dict",
                    "float"
                ]
            }
        },
        "MonCommandApi.rbd_task_add_migration_execute": {
            "name": "rbd_task_add_migration_execute",
            "location": 10378,
            "return": [
                "Set[str]",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "image_spec": [
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "dict",
                    "float"
                ]
            }
        },
        "MonCommandApi.rbd_task_add_remove": {
            "name": "rbd_task_add_remove",
            "location": 10396,
            "return": [
                "Set[str]",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "image_spec": [
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "dict",
                    "float"
                ]
            }
        },
        "MonCommandApi.rbd_task_add_trash_remove": {
            "name": "rbd_task_add_trash_remove",
            "location": 10414,
            "return": [
                "Set[str]",
                "Callable",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "image_id_spec": [
                    "str"
                ]
            }
        },
        "MonCommandApi.rbd_task_cancel": {
            "name": "rbd_task_cancel",
            "location": 10432,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "MonCommandApi.rbd_task_list": {
            "name": "rbd_task_list",
            "location": 10450,
            "return": [
                "str",
                "int",
                "bool",
                "Callable",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "MonCommandApi.report": {
            "name": "report",
            "location": 10468,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MonCommandApi.restful_create_key": {
            "name": "restful_create_key",
            "location": 10486,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "str"
                ]
            }
        },
        "MonCommandApi.restful_create_self_signed_cert": {
            "name": "restful_create_self_signed_cert",
            "location": 10504,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.restful_delete_key": {
            "name": "restful_delete_key",
            "location": 10520,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MonCommandApi.restful_list_keys": {
            "name": "restful_list_keys",
            "location": 10538,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.restful_restart": {
            "name": "restful_restart",
            "location": 10554,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.scrub": {
            "name": "scrub",
            "location": 10571,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.service_dump": {
            "name": "service_dump",
            "location": 10587,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.service_status": {
            "name": "service_status",
            "location": 10603,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.sessions": {
            "name": "sessions",
            "location": 10619,
            "return": [
                "float",
                "int",
                "Dict[str, Any]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.smart": {
            "name": "smart",
            "location": 10635,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "devid": [
                    "str"
                ]
            }
        },
        "MonCommandApi.status": {
            "name": "status",
            "location": 10653,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.sync_force": {
            "name": "sync_force",
            "location": 10669,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "validate": [
                    "str"
                ]
            }
        },
        "MonCommandApi.telegraf_config_set": {
            "name": "telegraf_config_set",
            "location": 10687,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.telegraf_config_show": {
            "name": "telegraf_config_show",
            "location": 10706,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.telegraf_send": {
            "name": "telegraf_send",
            "location": 10722,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.telemetry_off": {
            "name": "telemetry_off",
            "location": 10738,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.telemetry_on": {
            "name": "telemetry_on",
            "location": 10754,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "license": [
                    "str"
                ]
            }
        },
        "MonCommandApi.telemetry_send": {
            "name": "telemetry_send",
            "location": 10772,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "MonCommandApi.telemetry_show": {
            "name": "telemetry_show",
            "location": 10790,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "channels": [
                    "str",
                    "bool"
                ]
            }
        },
        "MonCommandApi.telemetry_status": {
            "name": "telemetry_status",
            "location": 10808,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.tell": {
            "name": "tell",
            "location": 10824,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "args": []
            }
        },
        "MonCommandApi.test_orchestrator_load_data": {
            "name": "test_orchestrator_load_data",
            "location": 10843,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.time_sync_status": {
            "name": "time_sync_status",
            "location": 10859,
            "return": [
                "int",
                "bool",
                "Callable[..., Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.upgrade_check": {
            "name": "upgrade_check",
            "location": 10875,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "Sequence[str]",
                    "float"
                ],
                "ceph_version": [
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "MonCommandApi.version": {
            "name": "version",
            "location": 10895,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.versions": {
            "name": "versions",
            "location": 10911,
            "return": [
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.zabbix_config_set": {
            "name": "zabbix_config_set",
            "location": 10927,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MonCommandApi.zabbix_config_show": {
            "name": "zabbix_config_show",
            "location": 10946,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.zabbix_discovery": {
            "name": "zabbix_discovery",
            "location": 10962,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonCommandApi.zabbix_send": {
            "name": "zabbix_send",
            "location": 10978,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ceph-command-api-master/ceph_command_api/__init__.py": {},
    "ceph-command-api-master/docs/source/conf.py": {}
}
{
    "chained-aws-lambda-master/setup.py": {},
    "chained-aws-lambda-master/daemons/chained-aws-lambda/app.py": {
        "process_work": {
            "name": "process_work",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "context": []
            }
        }
    },
    "chained-aws-lambda-master/scripts/chained_aws_lambda.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 51,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "write_jinja_file": {
            "name": "write_jinja_file",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "template_file": [
                    "str",
                    "bool"
                ],
                "template_vars": [
                    "str",
                    "Union[str, IO[bytes]]"
                ],
                "file_path": [
                    "str"
                ],
                "overwrite": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "chained-aws-lambda-master/scripts/get_all_chained_aws_lambda_clients.py": {},
    "chained-aws-lambda-master/src/chainedawslambda/aws.py": {
        "get_clients": {
            "name": "get_clients",
            "location": 22,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "add_client": {
            "name": "add_client",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "client_name": [
                    "str"
                ],
                "client_class": [
                    "str"
                ]
            }
        },
        "resolve_class": {
            "name": "resolve_class",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "task_class": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "List[str]"
                ]
            }
        },
        "schedule_task": {
            "name": "schedule_task",
            "location": 41,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "task_class": [
                    "bool",
                    "List[annofabapi.models.Task]",
                    "dict",
                    "Optional[str]",
                    "str"
                ],
                "state": [
                    "str",
                    "List[str]",
                    "bool",
                    "bytes"
                ],
                "task_id": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "parse_payload": {
            "name": "parse_payload",
            "location": 84,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "payload": [
                    "str"
                ],
                "expected_client_name": [
                    "str"
                ]
            }
        },
        "dispatch": {
            "name": "dispatch",
            "location": 150,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "context": [
                    "str"
                ],
                "payload": [
                    "str"
                ],
                "expected_client_name": [
                    "str"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/awsconstants.py": {},
    "chained-aws-lambda-master/src/chainedawslambda/base.py": {
        "Task.run_one_unit": {
            "name": "run_one_unit",
            "location": 10,
            "return": [
                "typing.Optional[TaskResultType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 18,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_state": {
            "name": "get_state",
            "location": 22,
            "return": [
                "TaskStateType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runtime.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 34,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runtime.schedule_work": {
            "name": "schedule_work",
            "location": 42,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "task_class": [
                    "bool",
                    "List[int]",
                    "Dict[str, str]",
                    "Optional[bool]"
                ],
                "state": [
                    "bool",
                    "List[int]",
                    "Dict[str, str]",
                    "Optional[bool]"
                ],
                "new_task": [
                    "bool",
                    "List[int]",
                    "Dict[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "Runtime.work_complete_callback": {
            "name": "work_complete_callback",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/constants.py": {},
    "chained-aws-lambda-master/src/chainedawslambda/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chainedawslambda": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "runtime": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 23,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/s3copyclient.py": {
        "S3CopyTask.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "int",
                    "Dict[str, int]"
                ],
                "fetch_size": [
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "S3CopyTask.setup_copy_task": {
            "name": "setup_copy_task",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, Set]]",
                "str",
                "Exception"
            ],
            "arguments": {
                "source_bucket": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "source_key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "destination_bucket": [
                    "str",
                    "Optional[str]"
                ],
                "destination_key": [
                    "str",
                    "Optional[str]"
                ],
                "part_size_calculator": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "S3CopyTask.get_state": {
            "name": "get_state",
            "location": 86,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3CopyTask.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 101,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3CopyTask.run_one_unit": {
            "name": "run_one_unit",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3CopyTask.calculate_range_for_part": {
            "name": "calculate_range_for_part",
            "location": 171,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "part_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "S3ParallelCopySupervisorTask.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "str",
                    "int"
                ],
                "runtime": [
                    "int",
                    "Optional[str]"
                ],
                "fetch_size": [
                    "Tuple[int, int]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "S3ParallelCopySupervisorTask.setup_copy_task": {
            "name": "setup_copy_task",
            "location": 232,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "source_bucket": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "source_key": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "destination_bucket": [
                    "str",
                    "bytes"
                ],
                "destination_key": [
                    "str",
                    "bytes"
                ],
                "part_size_calculator": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "timeout_seconds": [
                    "int",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "str"
                ]
            }
        },
        "S3ParallelCopySupervisorTask.get_state": {
            "name": "get_state",
            "location": 275,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[int, str]]",
                "Dict[str, Dict]",
                "Dict[int, List[str]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ParallelCopySupervisorTask.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 293,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ParallelCopySupervisorTask.run_one_unit": {
            "name": "run_one_unit",
            "location": 297,
            "return": [
                "float",
                "bool",
                "int",
                "IO[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ParallelCopyWorkerTask.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "Tuple[Dict[str, Any], bool]",
                    "int"
                ]
            }
        },
        "S3ParallelCopyWorkerTask.setup_copy_task": {
            "name": "setup_copy_task",
            "location": 419,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "source_bucket": [
                    "str",
                    "int"
                ],
                "source_key": [
                    "str",
                    "int"
                ],
                "source_etag": [
                    "str",
                    "int"
                ],
                "destination_bucket": [
                    "str",
                    "int"
                ],
                "destination_key": [
                    "str",
                    "int"
                ],
                "upload_id": [
                    "str",
                    "int"
                ],
                "size": [
                    "str",
                    "int"
                ],
                "part_size": [
                    "str",
                    "int"
                ],
                "next_part": [
                    "str",
                    "int"
                ],
                "last_part": [
                    "str",
                    "int"
                ],
                "concurrent_requests": [
                    "str",
                    "int"
                ]
            }
        },
        "S3ParallelCopyWorkerTask.get_state": {
            "name": "get_state",
            "location": 456,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[int, str]]",
                "Dict[str, Dict]",
                "Dict[int, List[str]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ParallelCopyWorkerTask.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 472,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ParallelCopyWorkerTask.run_one_unit": {
            "name": "run_one_unit",
            "location": 476,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ParallelCopyWorkerTask.calculate_range_for_part": {
            "name": "calculate_range_for_part",
            "location": 513,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "part_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "S3ParallelCopyWorkerTask.run_one_unit.copy_one_part": {
            "name": "copy_one_part",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "part_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/_awsimpl.py": {
        "AWSRuntime.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "client_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "task_id": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "AWSRuntime.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 19,
            "return": [
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]",
                "Optional[bool]",
                "Callable[[], None]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSRuntime.schedule_work": {
            "name": "schedule_work",
            "location": 22,
            "return": [
                "str",
                "bytes",
                "Type[\"ExtractableWordnet\"]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "task_class": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "state": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "new_task": [
                    "bool",
                    "List[int]",
                    "Dict[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "AWSRuntime.work_complete_callback": {
            "name": "work_complete_callback",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Dict[str, Any]",
                    "List[\"DictDataLoader\"]"
                ]
            }
        },
        "AWSRuntime.log": {
            "name": "log",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "client_key": [
                    "str"
                ],
                "task_id": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/_awstest.py": {
        "is_task_complete": {
            "name": "is_task_complete",
            "location": 16,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "client_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "task_id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AWSFastTestRuntime.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "client_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "task_id": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "AWSFastTestRuntime.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSFastTestTask.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "AWSFastTestTask.get_state": {
            "name": "get_state",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSFastTestTask.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 77,
            "return": [
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSFastTestTask.run_one_unit": {
            "name": "run_one_unit",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorTask.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "runtime": [
                    "str"
                ]
            }
        },
        "SupervisorTask.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 98,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorTask.get_state": {
            "name": "get_state",
            "location": 101,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorTask.run_one_unit": {
            "name": "run_one_unit",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorTask.check_success_marker": {
            "name": "check_success_marker",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSSupervisorTask.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "bool"
                ],
                "runtime": [
                    "dict",
                    "bool"
                ]
            }
        },
        "AWSSupervisorTask.check_success_marker": {
            "name": "check_success_marker",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/__init__.py": {},
    "chained-aws-lambda-master/src/chainedawslambda/blobstore/s3.py": {
        "S3BlobStore.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3BlobStore.list": {
            "name": "list",
            "location": 29,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "Optional[str]"
                ],
                "delimiter": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "S3BlobStore.generate_presigned_GET_url": {
            "name": "generate_presigned_GET_url",
            "location": 50,
            "return": [
                "str",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "S3BlobStore._generate_presigned_url": {
            "name": "_generate_presigned_url",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "List[str]",
                    "tuple",
                    "IO[str]"
                ],
                "object_name": [
                    "str"
                ],
                "method": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "S3BlobStore.upload_file_handle": {
            "name": "upload_file_handle",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ],
                "src_file_handle": [
                    "str"
                ]
            }
        },
        "S3BlobStore.delete": {
            "name": "delete",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get": {
            "name": "get",
            "location": 92,
            "return": [
                "bytes",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get_all_metadata": {
            "name": "get_all_metadata",
            "location": 111,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "S3BlobStore.get_cloud_checksum": {
            "name": "get_cloud_checksum",
            "location": 133,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Optional[str]"
                ],
                "object_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "S3BlobStore.get_user_metadata": {
            "name": "get_user_metadata",
            "location": 148,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "object_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "S3BlobStore.copy": {
            "name": "copy",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src_bucket": [
                    "str",
                    "dict"
                ],
                "src_object_name": [
                    "str",
                    "dict"
                ],
                "dst_bucket": [
                    "str",
                    "dict"
                ],
                "dst_object_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "S3BlobStore.find_next_missing_parts": {
            "name": "find_next_missing_parts",
            "location": 200,
            "return": [
                "Dict[str, Tuple[int, int]]",
                "int",
                "Type",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "upload_id": [
                    "str",
                    "Optional[str]"
                ],
                "part_count": [
                    "int"
                ],
                "search_start": [
                    "int",
                    "Tuple[float]",
                    "str",
                    "bytes"
                ],
                "return_count": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/blobstore/__init__.py": {
        "BlobStore.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStore.list": {
            "name": "list",
            "location": 9,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "BlobStore.generate_presigned_GET_url": {
            "name": "generate_presigned_GET_url",
            "location": 21,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "bytes"
                ],
                "object_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BlobStore.upload_file_handle": {
            "name": "upload_file_handle",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "BinaryIO"
                ],
                "object_name": [
                    "str",
                    "BinaryIO"
                ],
                "src_file_handle": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "BlobStore.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "BlobStore.get": {
            "name": "get",
            "location": 52,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "BlobStore.get_cloud_checksum": {
            "name": "get_cloud_checksum",
            "location": 62,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "BlobStore.get_user_metadata": {
            "name": "get_user_metadata",
            "location": 75,
            "return": [
                "typing.Dict[builtins.str, builtins.str]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "bytes"
                ],
                "object_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BlobStore.copy": {
            "name": "copy",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src_bucket": [
                    "str",
                    "int"
                ],
                "src_object_name": [
                    "str",
                    "int"
                ],
                "dst_bucket": [
                    "str",
                    "int"
                ],
                "dst_object_name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/util/__init__.py": {
        "UrlBuilder.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlBuilder.set": {
            "name": "set",
            "location": 8,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str",
                    "Optional[int]"
                ],
                "netloc": [
                    "str",
                    "Optional[int]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "Optional[IO[bytes]]",
                    "Optional['Directory']"
                ],
                "fragment": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "UrlBuilder.add_query": {
            "name": "add_query",
            "location": 22,
            "return": [
                "Tuple[bytes]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "query_value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "UrlBuilder.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "bool",
                "int",
                "type",
                "str",
                "Optional[Callable[[dict], None]]",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/util/aws/clients.py": {},
    "chained-aws-lambda-master/src/chainedawslambda/util/aws/logging.py": {
        "log_message": {
            "name": "log_message",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "log_group_name": [
                    "str"
                ],
                "log_stream_name": [
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "log_message.get_sequence_token": {
            "name": "get_sequence_token",
            "location": 11,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/util/aws/resources.py": {},
    "chained-aws-lambda-master/src/chainedawslambda/util/aws/_boto3_loader.py": {
        "Loader.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Loader.__getattr__": {
            "name": "__getattr__",
            "location": 8,
            "return": [
                "List[int]",
                "List[Dict]",
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "T",
                    "str"
                ]
            }
        }
    },
    "chained-aws-lambda-master/src/chainedawslambda/util/aws/__init__.py": {
        "send_sns_msg": {
            "name": "send_sns_msg",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "topic_arn": [
                    "int"
                ],
                "message": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[float]"
                ]
            }
        },
        "ARN.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arn": [
                    "dict",
                    "Dict[str, bool]",
                    "Callable"
                ]
            }
        },
        "ARN.get_region": {
            "name": "get_region",
            "location": 18,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "int",
                    "Optional[dict]",
                    "Optional[Any]"
                ]
            }
        },
        "ARN.get_account_id": {
            "name": "get_account_id",
            "location": 24,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "Type[T]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "ARN.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "List[str]",
                "Optional[dict]",
                "int",
                "Iterable",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chained-aws-lambda-master/tests/chained_lambda_utils.py": {
        "run_task_to_completion": {
            "name": "run_task_to_completion",
            "location": 43,
            "return": [
                "str",
                "bool",
                "dict",
                "Callable"
            ],
            "arguments": {
                "initial_task": [
                    "dict",
                    "Callable",
                    "Dict[str, bool]",
                    "list",
                    "List[List[Any]]"
                ],
                "initial_state": [
                    "dict",
                    "Callable",
                    "Dict[str, bool]",
                    "list",
                    "List[List[Any]]"
                ],
                "runtime_builder": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]",
                    "List[List[str]]",
                    "List[int]",
                    "int"
                ],
                "task_builder": [
                    "int"
                ],
                "runtime_result_getter": [
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "runtime_scheduled_getter": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]",
                    "List[List[str]]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "TestStingyRuntime.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_results": [
                    "int",
                    "float",
                    "List[List[int]]",
                    "Callable[[str, str], float]"
                ],
                "seq": [
                    "Optional[float]",
                    "Optional[int]",
                    "bool",
                    "Optional[List[Any]]",
                    "List[Optional[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestStingyRuntime.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 23,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStingyRuntime.schedule_work": {
            "name": "schedule_work",
            "location": 26,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "task_class": [
                    "bool",
                    "dict",
                    "Optional[Iterable[T]]",
                    "str",
                    "List[str]"
                ],
                "state": [
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "new_task": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "TestStingyRuntime.work_complete_callback": {
            "name": "work_complete_callback",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Union[int, float]"
                ]
            }
        }
    },
    "chained-aws-lambda-master/tests/infra.py": {
        "get_env": {
            "name": "get_env",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "varname": [
                    "str",
                    "int"
                ]
            }
        },
        "generate_test_key": {
            "name": "generate_test_key",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "chained-aws-lambda-master/tests/test_chunkedtask.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestChainedAWSLambda.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bytes",
                    "Tuple[int, int, int]",
                    "Iterable[T]"
                ],
                "expected_max_one_unit_runtime_millis": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestChainedAWSLambda.expected_max_one_unit_runtime_millis": {
            "name": "expected_max_one_unit_runtime_millis",
            "location": 34,
            "return": [
                "str",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainedAWSLambda.get_state": {
            "name": "get_state",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChainedAWSLambda.run_one_unit": {
            "name": "run_one_unit",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChainedAWSLambdaRunner.test_workload_resumes": {
            "name": "test_workload_resumes",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForkedTask.test_forked_task_locally": {
            "name": "test_forked_task_locally",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForkedTask.test_forked_task_AWS": {
            "name": "test_forked_task_AWS",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "bool"
                ]
            }
        },
        "TestAWSChainedAWSLambda.test_fast": {
            "name": "test_fast",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForkedTask.test_forked_task_locally.task_creator": {
            "name": "task_creator",
            "location": 90,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "task_class": [
                    "dict"
                ],
                "task_state": [
                    "Optional[str]",
                    "str"
                ],
                "runtime": [
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "TestForkedTask.test_forked_task_locally.LocalSupervisorTask.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "bool"
                ],
                "runtime": [
                    "dict",
                    "bool"
                ]
            }
        },
        "TestForkedTask.test_forked_task_locally.LocalSupervisorTask.check_success_marker": {
            "name": "check_success_marker",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chained-aws-lambda-master/tests/test_s3copyclient.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestAWSCopy.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAWSCopy.test_simple_copy": {
            "name": "test_simple_copy",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAWSCopy.test_off_by_one": {
            "name": "test_off_by_one",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAWSCopy.test_parallel_copy_locally_many_workers": {
            "name": "test_parallel_copy_locally_many_workers",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestAWSCopy.test_parallel_copy_locally_parallel_worker": {
            "name": "test_parallel_copy_locally_parallel_worker",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestAWSCopy.test_parallel_copy_aws": {
            "name": "test_parallel_copy_aws",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": [
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestAWSCopyNonMultipart.setUp": {
            "name": "setUp",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAWSCopyNonMultipart.test_simple_copy": {
            "name": "test_simple_copy",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chained-aws-lambda-master/tests/__init__.py": {}
}
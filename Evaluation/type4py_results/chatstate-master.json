{
    "chatstate-master/setup.py": {},
    "chatstate-master/chatstate/context.py": {
        "BaseChatContext.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict",
                    "Dict[str, str]"
                ],
                "chat_id": [
                    "str",
                    "Set[int]"
                ],
                "chat_type": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "BaseChatContext.activate": {
            "name": "activate",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "bool",
                    "Container[T]"
                ]
            }
        },
        "BaseChatContext.__getstate__": {
            "name": "__getstate__",
            "location": 23,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChatContext.__setstate__": {
            "name": "__setstate__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "BaseChatContext.register_handler": {
            "name": "register_handler",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bytes",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "BaseChatContext.handle_message": {
            "name": "handle_message",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseChatContext._process_entities": {
            "name": "_process_entities",
            "location": 90,
            "return": [
                "dict",
                "bool",
                "List[object]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "update": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "BaseChatContext._split_recipient": {
            "name": "_split_recipient",
            "location": 117,
            "return": [
                "list",
                "List[str]",
                "set"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseChatContext.handle_callback_query": {
            "name": "handle_callback_query",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "int",
                    "Union[int, str]",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "BaseChatContext.handle_inline_callback_query": {
            "name": "handle_inline_callback_query",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "List[str]",
                    "list",
                    "bool",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "BaseChatContext.on_activate": {
            "name": "on_activate",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChatContext.on_idle": {
            "name": "on_idle",
            "location": 134,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChatContext.on_stop": {
            "name": "on_stop",
            "location": 139,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChatContext.on_event": {
            "name": "on_event",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "data": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseChatContext.broadcast_event": {
            "name": "broadcast_event",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "BaseChatContext.send_message": {
            "name": "send_message",
            "location": 152,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseChatContext.send_audio": {
            "name": "send_audio",
            "location": 157,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "audio": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BaseChatContext.send_document": {
            "name": "send_document",
            "location": 161,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BaseChatContext.send_voice": {
            "name": "send_voice",
            "location": 165,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "voice": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BaseChatContext.send_location": {
            "name": "send_location",
            "location": 169,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Any]"
                ],
                "longitude": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "BaseChatContext.send_venue": {
            "name": "send_venue",
            "location": 174,
            "return": [
                "int",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ],
                "longitude": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ],
                "title": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ],
                "address": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BaseChatContext.send_chat_action": {
            "name": "send_chat_action",
            "location": 181,
            "return": [
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BaseChatContext.send_contact": {
            "name": "send_contact",
            "location": 185,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "phone_number": [
                    "str"
                ]
            }
        },
        "BaseChatContext.send_photo": {
            "name": "send_photo",
            "location": 191,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "photo": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "BaseChatContext.send_video": {
            "name": "send_video",
            "location": 195,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "PrivateChatContext.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "int"
                ],
                "chat_id": [
                    "str",
                    "int"
                ],
                "first_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "last_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "username": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "GroupChatContext.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "int",
                    "str",
                    "dict",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[List[\"Address\"]]"
                ],
                "chat_id": [
                    "int",
                    "str",
                    "dict",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[List[\"Address\"]]"
                ],
                "group_name": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "ChannelChatContext.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "int",
                    "str"
                ],
                "chat_id": [
                    "int",
                    "str"
                ],
                "channel_name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "ChannelChatContext.send_message": {
            "name": "send_message",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ChannelChatContext.send_audio": {
            "name": "send_audio",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "audio": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChannelChatContext.send_voice": {
            "name": "send_voice",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "voice": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChannelChatContext.send_location": {
            "name": "send_location",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "List[str]",
                    "bool",
                    "Optional[BaseException]",
                    "logging.LogRecord"
                ],
                "longitude": [
                    "List[str]",
                    "bool",
                    "Optional[BaseException]",
                    "logging.LogRecord"
                ]
            }
        },
        "ChannelChatContext.send_venue": {
            "name": "send_venue",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "longitude": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "title": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChannelChatContext.send_chat_action": {
            "name": "send_chat_action",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChannelChatContext.send_contact": {
            "name": "send_contact",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "phone_number": [
                    "str"
                ]
            }
        },
        "ChannelChatContext.send_photo": {
            "name": "send_photo",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "photo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChannelChatContext.send_video": {
            "name": "send_video",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "video": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChatContextClassRegistry.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatContextClassRegistry.register_class": {
            "name": "register_class",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "Type",
                    "str"
                ]
            }
        },
        "ChatContextClassRegistry.class_for_type": {
            "name": "class_for_type",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "chat_type": [
                    "str",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "ChatContextFactory.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "class_registry": [
                    "str",
                    "Callable",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "ChatContextFactory.new_chat_context": {
            "name": "new_chat_context",
            "location": 277,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "chat_id": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "chat_type": [
                    "Optional[Type]",
                    "Optional[Mapping]",
                    "str",
                    "Optional[str]"
                ],
                "username_or_title": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "first_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "last_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ChatContextRegistry.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "int",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[List[Any]]"
                ],
                "idle_timeout": [
                    "float",
                    "str",
                    "Callable[[None, None], bool]",
                    "int"
                ]
            }
        },
        "ChatContextRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 311,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "KT",
                    "Dict[str, Callable]",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ]
            }
        },
        "ChatContextRegistry.__setitem__": {
            "name": "__setitem__",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "ChatContextRegistry.__delitem__": {
            "name": "__delitem__",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "ChatContextRegistry.idle": {
            "name": "idle",
            "location": 321,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatContextRegistry.all": {
            "name": "all",
            "location": 333,
            "return": [
                "str",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "int",
                "Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatContextManager.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str"
                ],
                "ctx_registry": [
                    "str"
                ]
            }
        },
        "ChatContextManager.__getitem__": {
            "name": "__getitem__",
            "location": 346,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "ChatContextManager.new_chat_context": {
            "name": "new_chat_context",
            "location": 349,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "chat_id": [
                    "str",
                    "Optional[str]"
                ],
                "chat_type": [
                    "str",
                    "Optional[str]"
                ],
                "username_or_title": [
                    "str",
                    "Optional[str]"
                ],
                "first_name": [
                    "str",
                    "Optional[str]"
                ],
                "last_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ChatContextManager.register_class": {
            "name": "register_class",
            "location": 354,
            "return": [
                "bytes",
                "float",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls_": [
                    "int",
                    "Optional[Callable[..., Any]]",
                    "Exception"
                ]
            }
        },
        "ChatContextManager.remove_chat_context": {
            "name": "remove_chat_context",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "ChatContextManager.idle": {
            "name": "idle",
            "location": 361,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatContextManager.all": {
            "name": "all",
            "location": 364,
            "return": [
                "int",
                "str",
                "List[Tuple[str, str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chatstate-master/chatstate/decorators.py": {
        "has_chattype": {
            "name": "has_chattype",
            "location": 155,
            "return": [
                "List[str]",
                "str",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "opentrons.types.Location",
                    "Callable",
                    "bool"
                ]
            }
        },
        "has_inlinequery": {
            "name": "has_inlinequery",
            "location": 158,
            "return": [
                "List[str]",
                "str",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "f": []
            }
        },
        "has_activate": {
            "name": "has_activate",
            "location": 161,
            "return": [
                "List[str]",
                "str",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "f": []
            }
        },
        "methods": {
            "name": "methods",
            "location": 164,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "Optional[dict]",
                "Set[str]",
                "str",
                "list"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "cirq.google.engine.clienquantum.types.Any_pb2.Any",
                    "str"
                ]
            }
        },
        "is_suitable": {
            "name": "is_suitable",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "ctype": [
                    "Type['Payload']",
                    "tuple",
                    "str",
                    "Union[bool, List[bool]]",
                    "float"
                ],
                "ctypes": [
                    "Type['Payload']",
                    "tuple",
                    "str",
                    "Union[bool, List[bool]]",
                    "float"
                ]
            }
        },
        "extract_handlers": {
            "name": "extract_handlers",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chat_type": [
                    "int",
                    "Type"
                ],
                "handler": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Exception"
                ]
            }
        },
        "MethodDecorator.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "chat_type": [
                    "bool",
                    "type",
                    "int",
                    "Type",
                    "Type[Any]"
                ]
            }
        },
        "MethodDecorator.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Sequence[Any]",
                    "Callable[..., Coroutine]"
                ]
            }
        },
        "MethodDecorator._update_tag": {
            "name": "_update_tag",
            "location": 36,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "List[str]"
                ],
                "tag": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "message.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "callback_query.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "new_chat_member.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "left_chat_member.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "activate.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "idle.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "stop.__call__": {
            "name": "__call__",
            "location": 87,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "command.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "chat_type": [
                    "str"
                ],
                "name": [
                    "Iterable[str]",
                    "Dict[str, str]",
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "command.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "document.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "photo.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "video.__call__": {
            "name": "__call__",
            "location": 116,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "event.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "chat_type": [
                    "str"
                ],
                "name": [
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "event.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "dict"
                ]
            }
        },
        "inline_query.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[Iterable[str]]",
                    "List[Optional[str]]"
                ]
            }
        },
        "inline_query.__call__": {
            "name": "__call__",
            "location": 140,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Dict[str, Any]",
                    "T",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Mapping[Any, Any]"
                ]
            }
        }
    },
    "chatstate-master/chatstate/dispatcher.py": {
        "_extract_chat_data": {
            "name": "_extract_chat_data",
            "location": 73,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "Callable",
                    "logging.Logger"
                ]
            }
        },
        "BaseUpdateProcessor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "float",
                    "List['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "BaseUpdateProcessor.responsible_for": {
            "name": "responsible_for",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "update": [
                    "telegram.Update",
                    "telegram.boBot",
                    "bool",
                    "telegram.Bot"
                ]
            }
        },
        "BaseUpdateProcessor.process": {
            "name": "process",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ]
            }
        },
        "MessageProcessor.responsible_for": {
            "name": "responsible_for",
            "location": 41,
            "return": [
                "float",
                "Sequence[int]",
                "int",
                "list"
            ],
            "arguments": {
                "update": [
                    "int",
                    "Iterable[str]",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "dict"
                ]
            }
        },
        "MessageProcessor.process": {
            "name": "process",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Dict[str, Any]",
                    "Optional[bytes]",
                    "bytes"
                ],
                "update": [
                    "int",
                    "Iterable['Notification']",
                    "telegram.Update"
                ]
            }
        },
        "CallbackQueryProcessor.responsible_for": {
            "name": "responsible_for",
            "location": 85,
            "return": [
                "str",
                "bytes",
                "int",
                "tuple"
            ],
            "arguments": {
                "update": [
                    "int",
                    "Iterable[str]",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "dict"
                ]
            }
        },
        "CallbackQueryProcessor.process": {
            "name": "process",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Dict[str, Any]",
                    "Optional[bytes]",
                    "bytes"
                ],
                "update": [
                    "telegram.Update",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "InlineQueryProcessor.responsible_for": {
            "name": "responsible_for",
            "location": 117,
            "return": [
                "str",
                "bytes",
                "int",
                "tuple"
            ],
            "arguments": {
                "update": [
                    "int",
                    "Iterable[str]",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "dict"
                ]
            }
        },
        "InlineQueryProcessor.process": {
            "name": "process",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "dict",
                    "telegram.exCallbackContext",
                    "telegram.Update"
                ]
            }
        },
        "ProcessorChain.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "processors": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ProcessorChain.process": {
            "name": "process",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Dict[str, Any]",
                    "dict",
                    "telegram.Bot"
                ],
                "update": [
                    "telegram.exCallbackContext",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "telegram.Update"
                ]
            }
        },
        "BaseChatContextManager.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChatContextManager.__enter__": {
            "name": "__enter__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChatContextManager.__exit__": {
            "name": "__exit__",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "ChatContextDispatcher.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "Optional[dict]",
                    "bool",
                    "int"
                ],
                "dispatch_execution": [
                    "str",
                    "Optional[dict]",
                    "bool",
                    "int"
                ],
                "dispatch_execution_kwargs": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Optional[AbstractSet]"
                ],
                "context_registry": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Callable[..., Any]]"
                ],
                "context_registry_kwargs": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Callable[..., Any]]"
                ],
                "single_thread": [
                    "str",
                    "Optional[dict]",
                    "bool",
                    "int"
                ]
            }
        },
        "ChatContextDispatcher.register_inlinequery_handler": {
            "name": "register_inlinequery_handler",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_": [
                    "str",
                    "Iterable[Any]",
                    "Callable",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "ChatContextDispatcher.dispatch_update": {
            "name": "dispatch_update",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "str",
                    "dict",
                    "telegram.Bot",
                    "Dict[str, Any]",
                    "Dict[int, dict]"
                ]
            }
        },
        "ChatContextDispatcher.idle_check": {
            "name": "idle_check",
            "location": 216,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatContextDispatcher.broadcast_event": {
            "name": "broadcast_event",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, str]",
                    "ClassVar",
                    "List[dict]",
                    "bytes"
                ],
                "data": [
                    "Dict[str, str]",
                    "ClassVar",
                    "List[dict]",
                    "bytes"
                ]
            }
        },
        "ChatContextDispatcher.remove_chat_context": {
            "name": "remove_chat_context",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "ChatContextDispatcher.start": {
            "name": "start",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatContextDispatcher.stop": {
            "name": "stop",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chatstate-master/chatstate/locking.py": {
        "_generic_Lock.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_generic_Lock.__exit__": {
            "name": "__exit__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "type_": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "_threading_Lock.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_threading_Lock.acquire": {
            "name": "acquire",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_threading_Lock.release": {
            "name": "release",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_uwsgi_Lock.acquire": {
            "name": "acquire",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_uwsgi_Lock.release": {
            "name": "release",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chatstate-master/chatstate/threadpool.py": {
        "make_pool": {
            "name": "make_pool",
            "location": 112,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "single": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_generic_Lock.__enter__": {
            "name": "__enter__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_generic_Lock.__exit__": {
            "name": "__exit__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "type_": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "_threading_Lock.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_threading_Lock.acquire": {
            "name": "acquire",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_threading_Lock.release": {
            "name": "release",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_uwsgi_Lock.acquire": {
            "name": "acquire",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_uwsgi_Lock.release": {
            "name": "release",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPool.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_num": [
                    "int",
                    "bool",
                    "str",
                    "tuple"
                ]
            }
        },
        "ThreadPool.run_thread": {
            "name": "run_thread",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPool.start": {
            "name": "start",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPool.stop": {
            "name": "stop",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPool.notify": {
            "name": "notify",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "multiprocessing.Queue",
                    "str"
                ]
            }
        },
        "NullThreadPool.start": {
            "name": "start",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullThreadPool.stop": {
            "name": "stop",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullThreadPool.notify": {
            "name": "notify",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "tuple",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "chatstate-master/chatstate/__init__.py": {},
    "chatstate-master/chatstate/ext/dbcontext.py": {
        "SqlChatContextManager.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_factory": [
                    "bool",
                    "sqlalchemy.Table",
                    "Optional[str]",
                    "sqlalchemy.engine.Engine",
                    "Dict[str, str]"
                ],
                "bot_name": [
                    "str",
                    "sqlalchemy.MetaData",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SqlChatContextManager.__enter__": {
            "name": "__enter__",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlChatContextManager.__exit__": {
            "name": "__exit__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "logging.Logger",
                    "Exception",
                    "bool",
                    "int"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "SqlChatContextManager._pre_exit": {
            "name": "_pre_exit",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlChatContextRegistry.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "int"
                ],
                "session_factory": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "int"
                ],
                "bot_name": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "sqlalchemy.MetaData"
                ]
            }
        },
        "SqlChatContextRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "chat_id": [
                    "int",
                    "str"
                ]
            }
        },
        "SqlChatContextRegistry.__setitem__": {
            "name": "__setitem__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "T",
                    "Mapping",
                    "bytes"
                ]
            }
        },
        "SqlChatContextRegistry.__delitem__": {
            "name": "__delitem__",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "SqlChatContextRegistry.idle": {
            "name": "idle",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlChatContextRegistry.all": {
            "name": "all",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlChatContextRegistry._reactivate_chat_context": {
            "name": "_reactivate_chat_context",
            "location": 128,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "sql_ctx": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    }
}
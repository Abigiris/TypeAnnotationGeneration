{
    "cheese_grader-master/build.py": {
        "check_python_version": {
            "name": "check_python_version",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "compile_py": {
            "name": "compile_py",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_project_name": {
            "name": "validate_project_name",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pipenv_installs": {
            "name": "pipenv_installs",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gitchangelog": {
            "name": "gitchangelog",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "git_leaks": {
            "name": "git_leaks",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "git_secrets": {
            "name": "git_secrets",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pyupgrade": {
            "name": "pyupgrade",
            "location": 234,
            "return": [
                "Type",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "isort": {
            "name": "isort",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "format_tests": {
            "name": "format_tests",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "formatting_check": {
            "name": "formatting_check",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pyroma": {
            "name": "pyroma",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "docker_lint": {
            "name": "docker_lint",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "spell_check": {
            "name": "spell_check",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "yaml_lint": {
            "name": "yaml_lint",
            "location": 325,
            "return": [
                "str",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "count_lines_of_code": {
            "name": "count_lines_of_code",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "liccheck": {
            "name": "liccheck",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pyright": {
            "name": "pyright",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "flake8": {
            "name": "flake8",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bandit": {
            "name": "bandit",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "python_taint": {
            "name": "python_taint",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mccabe": {
            "name": "mccabe",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dodgy_check": {
            "name": "dodgy_check",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "precommit": {
            "name": "precommit",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "openapi_check": {
            "name": "openapi_check",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint_tests": {
            "name": "lint_tests",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tox": {
            "name": "tox",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pytest": {
            "name": "pytest",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "coverage_report": {
            "name": "coverage_report",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "safety": {
            "name": "safety",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sonar": {
            "name": "sonar",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vulture": {
            "name": "vulture",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_manifest": {
            "name": "check_manifest",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "jiggle_version": {
            "name": "jiggle_version",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parallel_checks": {
            "name": "parallel_checks",
            "location": 664,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "slow": {
            "name": "slow",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fast_package": {
            "name": "fast_package",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "just_package": {
            "name": "just_package",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_package": {
            "name": "check_package",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_package": {
            "name": "upload_package",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pre_commit_hook": {
            "name": "pre_commit_hook",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pre_push_hook": {
            "name": "pre_push_hook",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register_scripts": {
            "name": "register_scripts",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reports": {
            "name": "reports",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/cheese_grader/main.py": {
        "process_docopts": {
            "name": "process_docopts",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        }
    },
    "cheese_grader-master/cheese_grader/_version.py": {},
    "cheese_grader-master/cheese_grader/__init__.py": {},
    "cheese_grader-master/cheese_grader/__main__.py": {},
    "cheese_grader-master/cheese_grader/api_clients/pypstats_facade.py": {
        "get_download_count": {
            "name": "get_download_count",
            "location": 24,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[str]",
                "dict",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "cheese_grader-master/cheese_grader/api_clients/what_that_code_facade.py": {
        "guess_language_and_extension": {
            "name": "guess_language_and_extension",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Mapping[str, Any]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ],
                "surrounding_text": [
                    "str",
                    "int"
                ],
                "tags": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cheese_grader-master/cheese_grader/api_clients/__init__.py": {},
    "cheese_grader-master/cheese_grader/cli_clients/external_commands.py": {
        "pytest_detect": {
            "name": "pytest_detect",
            "location": 31,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "int"
                ]
            }
        },
        "pip_upgrade": {
            "name": "pip_upgrade",
            "location": 45,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "int"
                ]
            }
        },
        "pur": {
            "name": "pur",
            "location": 60,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "int"
                ]
            }
        },
        "safety": {
            "name": "safety",
            "location": 75,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[Any]",
                    "dict"
                ]
            }
        },
        "pyflakes": {
            "name": "pyflakes",
            "location": 84,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "dict"
                ]
            }
        },
        "generate_requirements": {
            "name": "generate_requirements",
            "location": 95,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int"
                ]
            }
        },
        "futurize": {
            "name": "futurize",
            "location": 106,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 117,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "folder_name": [
                    "str"
                ]
            }
        },
        "two_to_three": {
            "name": "two_to_three",
            "location": 128,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "pyupgrade": {
            "name": "pyupgrade",
            "location": 139,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 155,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "pylint": {
            "name": "pylint",
            "location": 177,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "folder": [
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "pypinfo": {
            "name": "pypinfo",
            "location": 204,
            "return": [
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "vermin": {
            "name": "vermin",
            "location": 223,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        }
    },
    "cheese_grader-master/cheese_grader/cli_clients/subprocess_utils.py": {
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 11,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "ignore_error": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "cheese_grader-master/cheese_grader/cli_clients/__init__.py": {},
    "cheese_grader-master/navio/meta_builder.py": {},
    "cheese_grader-master/navio/__init__.py": {},
    "cheese_grader-master/navio/__main__.py": {},
    "cheese_grader-master/navio/builder/_nb.py": {
        "build": {
            "name": "build",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "print_tasks": {
            "name": "print_tasks",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "file": [
                    "Callable",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "_get_default_task": {
            "name": "_get_default_task",
            "location": 100,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "module": [
                    "Optional[Any]",
                    "MutableMapping",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "_run_default_task": {
            "name": "_run_default_task",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_run_from_task_names": {
            "name": "_run_from_task_names",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "Callable[[str], str]",
                    "List[str]",
                    "dict"
                ],
                "task_names": [
                    "Type",
                    "Iterable[str]",
                    "Type['Signature']",
                    "str"
                ]
            }
        },
        "_get_task": {
            "name": "_get_task",
            "location": 133,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "tasks": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 158,
            "return": [
                "int",
                "bool",
                "List[Tuple[str, str]]",
                "List[Dict]"
            ],
            "arguments": {
                "args_str": [
                    "str"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 181,
            "return": [
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "module": [
                    "dict",
                    "Optional[int]",
                    "Exception",
                    "str",
                    "MutableSequence[str]",
                    "float",
                    "int",
                    "Dict[str, Any]"
                ],
                "logger": [
                    "bool",
                    "str",
                    "logging.Logger",
                    "Callable",
                    "Union[int, float]"
                ],
                "task": [
                    "int"
                ],
                "completed_tasks": [
                    "Optional[str]"
                ],
                "from_command_line": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "\"PRecord\""
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_create_parser": {
            "name": "_create_parser",
            "location": 240,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "task": {
            "name": "task",
            "location": 279,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "_get_tasks": {
            "name": "_get_tasks",
            "location": 323,
            "return": [
                "List[int]",
                "List[str]",
                "bool",
                "Optional[dict]",
                "int",
                "Counter",
                "Optional[T]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "_get_max_name_length": {
            "name": "_get_max_name_length",
            "location": 334,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "module": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_logger": {
            "name": "_get_logger",
            "location": 343,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "json_serial": {
            "name": "json_serial",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 385,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "print_out": {
            "name": "print_out",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "print_err": {
            "name": "print_err",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[str, bytes]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "zipdir": {
            "name": "zipdir",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "zip_file": [
                    "str",
                    "zipfile.ZipFile",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "pushd": {
            "name": "pushd",
            "location": 433,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dirname": [
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "add_env": {
            "name": "add_env",
            "location": 437,
            "return": [
                "str",
                "Dict[str, str]",
                "Tuple[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "task.decorator": {
            "name": "decorator",
            "location": 294,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Tuple[List[Any], Tuple[str, str], Optional[Any]]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Optional[Sequence[Any]]"
                ],
                "dependencies": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Optional[int]",
                    "Type[T]"
                ],
                "options": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        },
        "Task.__call__": {
            "name": "__call__",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_task": {
            "name": "is_task",
            "location": 316,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "int"
                ],
                "obj": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "PushdContext.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PushdContext.__enter__": {
            "name": "__enter__",
            "location": 424,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushdContext.__exit__": {
            "name": "__exit__",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "cheese_grader-master/navio/builder/__init__.py": {},
    "cheese_grader-master/navio/builder/tests/test_nb.py": {
        "fpath": {
            "name": "fpath",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "mod": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "simulate_dynamic_module_load": {
            "name": "simulate_dynamic_module_load",
            "location": 20,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "Optional[float]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "mod": [
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "reset_build_file": {
            "name": "reset_build_file",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "mod": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 32,
            "return": [
                "Callable[[Any], bool]",
                "Dict[str, List[int]]",
                "dict",
                "Optional[float]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "mod": [
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ],
                "params": [
                    "str",
                    "list",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "List[Tuple[float, str]]",
                    "bool"
                ],
                "init_mod": [
                    "bool",
                    "str",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "mock_stdout": {
            "name": "mock_stdout",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestParseArgs.test_parsing_commandline": {
            "name": "test_parsing_commandline",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_parsing_commandline_help": {
            "name": "test_parsing_commandline_help",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_parsing_commandline_build_file": {
            "name": "test_parsing_commandline_build_file",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImport.test_import": {
            "name": "test_import",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildSimple.test_get_tasks": {
            "name": "test_get_tasks",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_get_tasks": {
            "name": "test_get_tasks",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_dependencies_for_imported": {
            "name": "test_dependencies_for_imported",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_dependencies_that_are_imported_e2e": {
            "name": "test_dependencies_that_are_imported_e2e",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorationValidation.test_task_without_braces": {
            "name": "test_task_without_braces",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorationValidation.test_dependency_not_a_task": {
            "name": "test_dependency_not_a_task",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorationValidation.test_dependency_not_a_function": {
            "name": "test_dependency_not_a_function",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptions.module": {
            "name": "module",
            "location": 153,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptions.test_ignore_tasks": {
            "name": "test_ignore_tasks",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "TestOptions.test_docs": {
            "name": "test_docs",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ]
            }
        },
        "TestOptions.test_list_docs": {
            "name": "test_list_docs",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "Callable[[Dict], None]",
                    "dict",
                    "Optional[List[str]]"
                ],
                "args": []
            }
        },
        "TestRuntimeError.test_stop_on_exception": {
            "name": "test_stop_on_exception",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeError.test_exception_on_invalid_task_name": {
            "name": "test_exception_on_invalid_task_name",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartialTaskNames.setup_method": {
            "name": "setup_method",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestPartialTaskNames.test_with_partial_name": {
            "name": "test_with_partial_name",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartialTaskNames.test_with_partial_name_and_dependencies": {
            "name": "test_with_partial_name_and_dependencies",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartialTaskNames.test_exception_on_conflicting_partial_names": {
            "name": "test_exception_on_conflicting_partial_names",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTask.test_simple_default_task": {
            "name": "test_simple_default_task",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTask.test_mod_with_defaults_which_imports_other_files_with_defaults": {
            "name": "test_mod_with_defaults_which_imports_other_files_with_defaults",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleTasks.setup_method": {
            "name": "setup_method",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestMultipleTasks.test_dependency_is_run_only_once_unless_explicitly_invoked_again": {
            "name": "test_dependency_is_run_only_once_unless_explicitly_invoked_again",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleTasks.test_multiple_partial_names": {
            "name": "test_multiple_partial_names",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.setup_method": {
            "name": "setup_method",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TesttaskArguments.test_passing_optional_params_with_dependencies": {
            "name": "test_passing_optional_params_with_dependencies",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_invoking_varargs_task": {
            "name": "test_invoking_varargs_task",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_partial_name_with_args": {
            "name": "test_partial_name_with_args",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_passing_keyword_args": {
            "name": "test_passing_keyword_args",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_passing_varargs_and_keyword_args": {
            "name": "test_passing_varargs_and_keyword_args",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_validate_keyword_arguments_always_after_args": {
            "name": "test_validate_keyword_arguments_always_after_args",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_invalid_number_of_args": {
            "name": "test_invalid_number_of_args",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_invalid_names_for_kwargs": {
            "name": "test_invalid_names_for_kwargs",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushd.test_pushd": {
            "name": "test_pushd",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_dependencies_that_are_imported_e2e.mod_init": {
            "name": "mod_init",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "mod": [
                    "Callable",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "cheese_grader-master/navio/builder/tests/__init__.py": {},
    "cheese_grader-master/navio/builder/tests/build_scripts/annotation_misuse_1.py": {
        "clean": {
            "name": "clean",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/annotation_misuse_2.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/annotation_misuse_3.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/build_with_params.py": {
        "clean": {
            "name": "clean",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "html": {
            "name": "html",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "tests": {
            "name": "tests",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "copy_file": {
            "name": "copy_file",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "from_": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "to": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "fail_on_error": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "port": [
                    "Dict[str, Any]",
                    "str"
                ],
                "debug": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ignored": {
            "name": "ignored",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "Union[str, List[str]]",
                    "str"
                ],
                "contents": [
                    "Union[str, List[str]]",
                    "str"
                ]
            }
        },
        "append_to_file": {
            "name": "append_to_file",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "Union[str, List[str]]"
                ],
                "contents": [
                    "Union[str, List[str]]"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/default_task_and_import_dependencies.py": {
        "local_task": {
            "name": "local_task",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "task_with_imported_dependencies": {
            "name": "task_with_imported_dependencies",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/dependencies.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "ios": {
            "name": "ios",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "some_utility_method": {
            "name": "some_utility_method",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/options.py": {
        "clean": {
            "name": "clean",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/runtime_error.py": {
        "images": {
            "name": "images",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/simple.py": {
        "clean": {
            "name": "clean",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ios": {
            "name": "ios",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "some_utility_method": {
            "name": "some_utility_method",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio/builder/tests/build_scripts/__init__.py": {},
    "cheese_grader-master/navio_tasks/build_state.py": {
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "expect_file": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "expect_files": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "hash_it": {
            "name": "hash_it",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "skip_if_this_file_does_not_change": {
            "name": "skip_if_this_file_does_not_change",
            "location": 170,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "int"
                ],
                "file": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "reset_build_state": {
            "name": "reset_build_state",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "timed": {
            "name": "timed",
            "location": 221,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "is_it_worse": {
            "name": "is_it_worse",
            "location": 241,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]"
                ],
                "current_rows": [
                    "List[str]",
                    "str",
                    "dict",
                    "List[List[str]]",
                    "Sequence[T]",
                    "bool"
                ],
                "margin": [
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "Optional[int]",
                    "Union[str, List[str], None]",
                    "bytes",
                    "Optional[List[\"DeliveryItem\"]]",
                    "str",
                    "Optional[bool]",
                    "Tuple[str, List[str]]"
                ]
            }
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str",
                    "List[str]"
                ],
                "directory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 140,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "skip_if_this_file_does_not_change.real_decorator": {
            "name": "real_decorator",
            "location": 176,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "timed.real_decorator": {
            "name": "real_decorator",
            "location": 224,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "skip_if_this_file_does_not_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "timed.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 228,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/clean.py": {
        "clean_old_files": {
            "name": "clean_old_files",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/cli_commands.py": {
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "is_cmd_exe": {
            "name": "is_cmd_exe",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "check_command_exists": {
            "name": "check_command_exists",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "command": [
                    "bool",
                    "int",
                    "float"
                ],
                "throw_on_missing": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict",
                    "int"
                ],
                "exit_on_missing": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "already_found": {
            "name": "already_found",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "prepinform_simple": {
            "name": "prepinform_simple",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, str]"
                ],
                "no_project": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 160,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "ignore_error": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 191,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "script": [
                    "List[str]",
                    "str",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 209,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool",
                    "Callable",
                    "BaseException",
                    "cmk.gui.plugins.views.utils.ABCDataSource"
                ],
                "env": [
                    "str",
                    "Type[BaseException]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/file_system.py": {
        "initialize_folders": {
            "name": "initialize_folders",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/network.py": {
        "check_public_ip": {
            "name": "check_public_ip",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ipify": [
                    "str",
                    "dict"
                ]
            }
        },
        "is_known_network": {
            "name": "is_known_network",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/output.py": {
        "say_and_exit": {
            "name": "say_and_exit",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/settings.py": {
        "load_config": {
            "name": "load_config",
            "location": 15,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/system_info.py": {
        "is_windows": {
            "name": "is_windows",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "is_powershell": {
            "name": "is_powershell",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "check_is_aws": {
            "name": "check_is_aws",
            "location": 43,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/utils.py": {
        "safe_cd": {
            "name": "safe_cd",
            "location": 20,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 37,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "script": [
                    "List[str]",
                    "str",
                    "tuple",
                    "Callable"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/__init__.py": {},
    "cheese_grader-master/navio_tasks/commands/cli_bandit.py": {
        "do_bandit": {
            "name": "do_bandit",
            "location": 13,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "is_shell_script_like": [
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_compile_py.py": {
        "do_compile_py": {
            "name": "do_compile_py",
            "location": 17,
            "return": [
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "python": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_detect_secrets.py": {
        "do_detect_secrets": {
            "name": "do_detect_secrets",
            "location": 22,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_django_tests.py": {
        "do_django_tests": {
            "name": "do_django_tests",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_django_tests_regardless": {
            "name": "do_django_tests_regardless",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_flake8.py": {
        "do_flake8": {
            "name": "do_flake8",
            "location": 15,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_get_secrets.py": {
        "do_git_secrets": {
            "name": "do_git_secrets",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_go_gitleaks.py": {
        "run_gitleaks": {
            "name": "run_gitleaks",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_mypy.py": {
        "do_mypy": {
            "name": "do_mypy",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Iterable",
                "List[str]"
            ],
            "arguments": {}
        },
        "evaluated_mypy_results": {
            "name": "evaluated_mypy_results",
            "location": 41,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "mypy_file": [
                    "str",
                    "Optional[str]"
                ],
                "small_code_base_cutoff": [
                    "\"ks.Series[bool]\"",
                    "\"ks.Series[str]\""
                ],
                "maximum_mypy": [
                    "str",
                    "bool",
                    "int"
                ],
                "skips": [
                    "str",
                    "int",
                    "Iterable[List[Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "evaluated_mypy_results.contains_a_skip": {
            "name": "contains_a_skip",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "line_value": [
                    "str",
                    "int",
                    "float",
                    "Tuple[Union[int, str]]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_npm_pyright.py": {
        "do_pyright": {
            "name": "do_pyright",
            "location": 8,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_pylint.py": {
        "do_lint": {
            "name": "do_lint",
            "location": 24,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "folder_type": [
                    "str",
                    "Callable",
                    "Union[object, type]",
                    "Callable[[str], str]"
                ]
            }
        },
        "evaluated_lint_results": {
            "name": "evaluated_lint_results",
            "location": 63,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "lint_output_file_name": [
                    "str"
                ],
                "small_code_base_cut_off": [
                    "\"ks.Series[bool]\"",
                    "\"ks.Series[str]\"",
                    "str"
                ],
                "maximum_lint": [
                    "str",
                    "bool",
                    "int"
                ],
                "fatals": [
                    "str",
                    "Literal",
                    "List[str]",
                    "List[int]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_pyt.py": {
        "do_python_taint": {
            "name": "do_python_taint",
            "location": 9,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_pytest.py": {
        "do_pytest": {
            "name": "do_pytest",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_pytest_coverage": {
            "name": "do_pytest_coverage",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "fast_only": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/commands/cli_tox.py": {
        "do_tox": {
            "name": "do_tox",
            "location": 12,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/lib_dodgy.py": {
        "do_dodgy": {
            "name": "do_dodgy",
            "location": 13,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/dependency_commands/cli_installs.py": {
        "do_dependency_installs": {
            "name": "do_dependency_installs",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "pipenv": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ],
                "poetry": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ],
                "pip": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/dependency_commands/cli_liccheck.py": {
        "do_liccheck": {
            "name": "do_liccheck",
            "location": 13,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/dependency_commands/cli_pin_dependencies.py": {
        "convert_pipenv_to_requirements": {
            "name": "convert_pipenv_to_requirements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "pipenv": [
                    "bool"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/dependency_commands/cli_pip.py": {
        "do_register_scripts": {
            "name": "do_register_scripts",
            "location": 18,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "dist_is_editable": {
            "name": "dist_is_editable",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "do_pip_check": {
            "name": "do_pip_check",
            "location": 47,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/dependency_commands/cli_safety.py": {
        "do_safety": {
            "name": "do_safety",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/dependency_commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/deprecated_commands/cli_check_manifest.py": {
        "call_check_manifest_command": {
            "name": "call_check_manifest_command",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_name": [
                    "str",
                    "Optional[str]",
                    "Union[str, List[str]]",
                    "int"
                ],
                "env": [
                    "str"
                ]
            }
        },
        "do_check_manifest": {
            "name": "do_check_manifest",
            "location": 46,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/deprecated_commands/cli_pyroma.py": {
        "do_pyroma": {
            "name": "do_pyroma",
            "location": 11,
            "return": [
                "str",
                "Callable",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "do_pyroma_regardless": {
            "name": "do_pyroma_regardless",
            "location": 20,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/deprecated_commands/cli_setup_py.py": {
        "do_package": {
            "name": "do_package",
            "location": 25,
            "return": [
                "bool",
                "str",
                "deque",
                "int"
            ],
            "arguments": {}
        },
        "do_project_validation_for_setup_py": {
            "name": "do_project_validation_for_setup_py",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_package.list_files": {
            "name": "list_files",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "startpath": [
                    "str"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/deprecated_commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/mutating_commands/cli_black.py": {
        "do_formatting": {
            "name": "do_formatting",
            "location": 23,
            "return": [
                "set",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "check": [
                    "str",
                    "Dict[str, int]",
                    "List[str]"
                ],
                "state": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/mutating_commands/cli_isort.py": {
        "do_isort": {
            "name": "do_isort",
            "location": 7,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/mutating_commands/cli_jiggle_version.py": {
        "do_jiggle_version": {
            "name": "do_jiggle_version",
            "location": 13,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "is_interactive": [
                    "bool",
                    "str"
                ],
                "target_branch": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "increase_version_on_all_branches": [
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/mutating_commands/cli_npm_prettier.py": {},
    "cheese_grader-master/navio_tasks/mutating_commands/cli_precommit.py": {
        "do_precommit": {
            "name": "do_precommit",
            "location": 19,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "is_interactive": [
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/mutating_commands/cli_pyupgrade.py": {
        "do_pyupgrade": {
            "name": "do_pyupgrade",
            "location": 12,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "is_interactive": [
                    "bool",
                    "List[int]"
                ],
                "minimum_python": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "cheese_grader-master/navio_tasks/mutating_commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/non_breaking_commands/cli_mccabe.py": {
        "do_mccabe": {
            "name": "do_mccabe",
            "location": 12,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/non_breaking_commands/cli_scspell.py": {
        "do_spell_check": {
            "name": "do_spell_check",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_spell_check.read_file": {
            "name": "read_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/non_breaking_commands/cli_sonar.py": {
        "do_sonar": {
            "name": "do_sonar",
            "location": 25,
            "return": [
                "str",
                "List[List[str]]",
                "int",
                "float"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/non_breaking_commands/cli_vulture.py": {
        "do_vulture": {
            "name": "do_vulture",
            "location": 21,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/non_breaking_commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/non_py_commands/cli_openapi.py": {
        "do_openapi_check": {
            "name": "do_openapi_check",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/non_py_commands/cli_yamllint.py": {
        "do_yamllint": {
            "name": "do_yamllint",
            "location": 9,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/non_py_commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/packaging_commands/cli_poetry_package.py": {},
    "cheese_grader-master/navio_tasks/packaging_commands/cli_twine.py": {
        "do_upload_package": {
            "name": "do_upload_package",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/packaging_commands/__init__.py": {},
    "cheese_grader-master/navio_tasks/pure_reports/cli_gitchangelog.py": {
        "do_gitchangelog": {
            "name": "do_gitchangelog",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/pure_reports/cli_pygount.py": {
        "total_loc": {
            "name": "total_loc",
            "location": 15,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {}
        },
        "do_count_lines_of_code": {
            "name": "do_count_lines_of_code",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/pure_reports/cli_sphinx.py": {
        "do_docs": {
            "name": "do_docs",
            "location": 13,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cheese_grader-master/navio_tasks/pure_reports/__init__.py": {},
    "cheese_grader-master/samples/bad/clearly_python2/main.py": {},
    "cheese_grader-master/samples/bad/setup_py_only/setup.py": {},
    "cheese_grader-master/samples/good/boilerplate_qualified/setup.py": {},
    "cheese_grader-master/samples/good/folder_not_file/some_package/__init__.py": {},
    "cheese_grader-master/test/test_just_import.py": {
        "test": {
            "name": "test",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    }
}
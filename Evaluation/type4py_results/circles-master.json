{
    "circles-master/circles/cli.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "List['Photo']",
                    "int",
                    "List['Book']",
                    "List[str]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "circles-master/circles/solve.py": {
        "calculate_contained": {
            "name": "calculate_contained",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "calculate_intersections": {
            "name": "calculate_intersections",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "calculate_solutions": {
            "name": "calculate_solutions",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "normalize_intersection": {
            "name": "normalize_intersection",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "normalize_solution": {
            "name": "normalize_solution",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "is_valid_solution": {
            "name": "is_valid_solution",
            "location": 147,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "normalize_solutions": {
            "name": "normalize_solutions",
            "location": 174,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "calculate_circles": {
            "name": "calculate_circles",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "normalize_solution._push": {
            "name": "_push",
            "location": 116,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "index": [
                    "int",
                    "list",
                    "List[int]"
                ]
            }
        }
    },
    "circles-master/circles/types.py": {
        "Circle._check_contains": {
            "name": "_check_contains",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "int",
                    "str",
                    "Callable",
                    "Callable[[object], Any]"
                ]
            }
        },
        "Circle._check_intersects": {
            "name": "_check_intersects",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Tuple[str, Any]",
                    "Sequence[Tuple[str, str]]",
                    "bool",
                    "type",
                    "dict"
                ]
            }
        }
    },
    "circles-master/circles/__init__.py": {},
    "circles-master/circles/__main__.py": {}
}
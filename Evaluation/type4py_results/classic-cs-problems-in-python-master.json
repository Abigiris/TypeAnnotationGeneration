{
    "classic-cs-problems-in-python-master/chap-1/calculating_pi.py": {
        "calculate_pi": {
            "name": "calculate_pi",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n_terms": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/fib1.py": {
        "fib": {
            "name": "fib",
            "location": 1,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/fib2.py": {
        "fib": {
            "name": "fib",
            "location": 1,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/fib3.py": {
        "fib": {
            "name": "fib",
            "location": 4,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/fib4.py": {
        "fib": {
            "name": "fib",
            "location": 4,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/fib5.py": {
        "fib": {
            "name": "fib",
            "location": 1,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/fib6.py": {
        "fib": {
            "name": "fib",
            "location": 3,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/hanoi.py": {
        "hanoi": {
            "name": "hanoi",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "begin": [
                    "int",
                    "List[float]"
                ],
                "end": [
                    "int",
                    "List[float]"
                ],
                "temp": [
                    "int",
                    "FrozenSet[int]",
                    "str"
                ],
                "n": [
                    "int",
                    "FrozenSet[int]",
                    "str"
                ]
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "List[deque]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/trivial_compression.py": {
        "CompressedGene.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gene": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CompressedGene.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedGene._compress": {
            "name": "_compress",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gene": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CompressedGene._decompress": {
            "name": "_decompress",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "classic-cs-problems-in-python-master/chap-1/unbreakable_encryption.py": {
        "random_key": {
            "name": "random_key",
            "location": 4,
            "return": [
                "int",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "original": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key1": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "KT"
                ],
                "key2": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "KT"
                ]
            }
        }
    }
}
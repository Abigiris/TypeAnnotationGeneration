{
    "cloudflare-updater-master/update.py": {
        "main": {
            "name": "main",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FrozenSetImpl.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        },
        "FrozenSetImpl.__len__": {
            "name": "__len__",
            "location": 64,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenSetImpl.__iter__": {
            "name": "__iter__",
            "location": 67,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenSetImpl.__contains__": {
            "name": "__contains__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Mapping[str, Any]]",
                    "bool"
                ]
            }
        },
        "DomainCollection.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "int",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "ApiZone.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, None]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "ApiZone.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiZone.__eq__": {
            "name": "__eq__",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]",
                    "Callable",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "ApiZone.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Union[Dict, List]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Record.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [
                "bool",
                "Type[BaseException]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record._members": {
            "name": "_members",
            "location": 134,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__eq__": {
            "name": "__eq__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "ConfigRecord.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "ConfigRecord.__hash__": {
            "name": "__hash__",
            "location": 156,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigRecord.get_content_for_zone": {
            "name": "get_content_for_zone",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str"
                ]
            }
        },
        "ConfigRecord.get_name_for_zone": {
            "name": "get_name_for_zone",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ConfigRecord.get_api_data": {
            "name": "get_api_data",
            "location": 170,
            "return": [
                "dict",
                "str",
                "Callable",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "bool"
                ]
            }
        },
        "ApiRecord.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bool]",
                    "dict",
                    "Dict[str, Optional[str]]",
                    "str",
                    "Optional[dict]"
                ],
                "zone": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "ApiRecord.__hash__": {
            "name": "__hash__",
            "location": 215,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord._members": {
            "name": "_members",
            "location": 218,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.__str__": {
            "name": "__str__",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.get_generic_content": {
            "name": "get_generic_content",
            "location": 224,
            "return": [
                "str",
                "Optional[int]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.get_generic_name": {
            "name": "get_generic_name",
            "location": 230,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.satisfies": {
            "name": "satisfies",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "type",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "RecordCollection.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "RecordCollection._generate_matcher_pairs": {
            "name": "_generate_matcher_pairs",
            "location": 267,
            "return": [
                "typing.Generator[typing.Tuple[RecordKey, ConfigRecord], None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordCollection.match": {
            "name": "match",
            "location": 272,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Type",
                    "int",
                    "Dict[str, Tuple[int, int]]",
                    "\"Project\"",
                    "Optional[str]"
                ]
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "GroupCollection.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Iterable[T_co]",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Optional[Union[Any, Any]]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "Optional[str]",
                    "str",
                    "IO[Any]"
                ]
            }
        },
        "ApiZoneCollection.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ApiZoneCollection.by_name": {
            "name": "by_name",
            "location": 327,
            "return": [
                "str",
                "dict",
                "Mapping[str, T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ApiRecordCollection.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int"
                ],
                "zone": [
                    "int"
                ]
            }
        },
        "Updater.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "debug": [
                    "Callable",
                    "bool",
                    "str",
                    "Union[_WebHandler, abc.AbstractView]"
                ],
                "verbosity": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Container[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Updater.get_all": {
            "name": "get_all",
            "location": 355,
            "return": [
                "bool",
                "List[Dict[str, str]]",
                "Union[int, float, complex]",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "Updater.get_zones": {
            "name": "get_zones",
            "location": 375,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.get_records": {
            "name": "get_records",
            "location": 378,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "Updater.invalidate_cache": {
            "name": "invalidate_cache",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "float",
                    "slice"
                ]
            }
        },
        "Updater.get_action": {
            "name": "get_action",
            "location": 395,
            "return": [
                "str",
                "int",
                "List[bytes]",
                "bytes",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "not_dry_run": [
                    "str",
                    "bool",
                    "Callable[[], None]",
                    "Optional[str]"
                ],
                "dry_run": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Updater.update_record": {
            "name": "update_record",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "Dict[str, Any]"
                ],
                "old_record": [
                    "int",
                    "Dict[str, Any]"
                ],
                "new_record": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Updater.delete_record": {
            "name": "delete_record",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "bool",
                    "Sequence",
                    "Mapping",
                    "str",
                    "Set[str]",
                    "dict"
                ],
                "record": [
                    "str",
                    "Sequence",
                    "Mapping",
                    "Set[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Updater.create_record": {
            "name": "create_record",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "int"
                ],
                "record": [
                    "str",
                    "int"
                ]
            }
        },
        "Updater.load_cache": {
            "name": "load_cache",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.save_cache": {
            "name": "save_cache",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.log": {
            "name": "log",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "float"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Updater.run": {
            "name": "run",
            "location": 441,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
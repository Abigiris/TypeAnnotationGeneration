{
    "cltk-master/docs/conf.py": {},
    "cltk-master/scripts/download_all_models.py": {
        "download_stanza_model": {
            "name": "download_stanza_model",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "iso_code": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "Union[None, int, str]"
                ]
            }
        },
        "download_fasttext_model": {
            "name": "download_fasttext_model",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "iso_code": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "model_source": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "interactive": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]",
                    "Callable",
                    "Dict[int, dict]"
                ]
            }
        },
        "download_cltk_models_repo": {
            "name": "download_cltk_models_repo",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "iso_code": [
                    "str"
                ]
            }
        },
        "download_nlpl_model": {
            "name": "download_nlpl_model",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "iso_code": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "cltk-master/scripts/make_glottolog_languages.py": {
        "make_iso_glotto_map": {
            "name": "make_iso_glotto_map",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cltk-master/scripts/pipeline_example.py": {
        "dummy_get_token_indices": {
            "name": "dummy_get_token_indices",
            "location": 59,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "cltk-master/scripts/trigger_github_release.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cltk-master/src/cltk/nlp.py": {
        "NLP.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "language": [],
                "custom_pipeline": [],
                "suppress_banner": []
            }
        },
        "NLP._print_pipelines_for_current_lang": {
            "name": "_print_pipelines_for_current_lang",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NLP._get_process_object": {
            "name": "_get_process_object",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "process_object": []
            }
        },
        "NLP.analyze": {
            "name": "analyze",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "NLP._get_pipeline": {
            "name": "_get_pipeline",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NLP.__call__": {
            "name": "__call__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/__init__.py": {},
    "cltk-master/src/cltk/alphabet/ang.py": {},
    "cltk-master/src/cltk/alphabet/arb.py": {},
    "cltk-master/src/cltk/alphabet/arc.py": {
        "_imperial_to_square_table": {
            "name": "_imperial_to_square_table",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "_square_to_imperial_char": {
            "name": "_square_to_imperial_char",
            "location": 111,
            "return": [],
            "arguments": {
                "_str": []
            }
        },
        "square_to_imperial": {
            "name": "square_to_imperial",
            "location": 115,
            "return": [],
            "arguments": {
                "square_script": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/ave.py": {},
    "cltk-master/src/cltk/alphabet/ben.py": {},
    "cltk-master/src/cltk/alphabet/egy.py": {
        "mdc_unicode": {
            "name": "mdc_unicode",
            "location": 8,
            "return": [],
            "arguments": {
                "string": [],
                "q_kopf": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/enm.py": {
        "normalize_middle_english": {
            "name": "normalize_middle_english",
            "location": 110,
            "return": [],
            "arguments": {
                "text": [],
                "to_lower": [],
                "alpha_conv": [],
                "punct": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/fro.py": {
        "build_match_and_apply_functions": {
            "name": "build_match_and_apply_functions",
            "location": 45,
            "return": [],
            "arguments": {
                "pattern": [],
                "replace": []
            }
        },
        "normalize_fr": {
            "name": "normalize_fr",
            "location": 57,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "build_match_and_apply_functions.matches_rule": {
            "name": "matches_rule",
            "location": 48,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "build_match_and_apply_functions.apply_rule": {
            "name": "apply_rule",
            "location": 51,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/gmh.py": {
        "normalize_middle_high_german": {
            "name": "normalize_middle_high_german",
            "location": 124,
            "return": [],
            "arguments": {
                "text": [],
                "to_lower_all": [],
                "to_lower_beginning": [],
                "alpha_conv": [],
                "punct": [],
                "ascii": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/guj.py": {},
    "cltk-master/src/cltk/alphabet/hin.py": {},
    "cltk-master/src/cltk/alphabet/kan.py": {},
    "cltk-master/src/cltk/alphabet/lat.py": {
        "dehyphenate": {
            "name": "dehyphenate",
            "location": 117,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow": {
            "name": "swallow",
            "location": 136,
            "return": [],
            "arguments": {
                "text": [],
                "pattern_matcher": []
            }
        },
        "swallow_braces": {
            "name": "swallow_braces",
            "location": 152,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "drop_latin_punctuation": {
            "name": "drop_latin_punctuation",
            "location": 166,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "remove_accents": {
            "name": "remove_accents",
            "location": 194,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "remove_macrons": {
            "name": "remove_macrons",
            "location": 278,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_angle_brackets": {
            "name": "swallow_angle_brackets",
            "location": 304,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "disappear_angle_brackets": {
            "name": "disappear_angle_brackets",
            "location": 319,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_square_brackets": {
            "name": "swallow_square_brackets",
            "location": 330,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_obelized_words": {
            "name": "swallow_obelized_words",
            "location": 346,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "disappear_round_brackets": {
            "name": "disappear_round_brackets",
            "location": 372,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_editorial": {
            "name": "swallow_editorial",
            "location": 385,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "accept_editorial": {
            "name": "accept_editorial",
            "location": 402,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "truecase": {
            "name": "truecase",
            "location": 423,
            "return": [],
            "arguments": {
                "word": [],
                "case_counter": []
            }
        },
        "normalize_lat": {
            "name": "normalize_lat",
            "location": 450,
            "return": [],
            "arguments": {
                "text": [],
                "drop_accents": [],
                "drop_macrons": [],
                "jv_replacement": [],
                "ligature_replacement": []
            }
        },
        "JVReplacer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVReplacer.replace": {
            "name": "replace",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "LigatureReplacer.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LigatureReplacer.replace": {
            "name": "replace",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/non.py": {
        "AutoName._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 16,
            "return": [],
            "arguments": {
                "name": [],
                "a": [],
                "b": [],
                "d": []
            }
        },
        "Rune.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "runic_alphabet": [],
                "form": [],
                "sound": [],
                "transcription": [],
                "name": []
            }
        },
        "Rune.display_runes": {
            "name": "display_runes",
            "location": 57,
            "return": [],
            "arguments": {
                "runic_alphabet": []
            }
        },
        "Rune.from_form_to_transcription": {
            "name": "from_form_to_transcription",
            "location": 66,
            "return": [],
            "arguments": {
                "form": [],
                "runic_alphabet": []
            }
        },
        "Rune.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rune.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rune.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transcriber.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transcriber.from_form_to_transcription": {
            "name": "from_form_to_transcription",
            "location": 99,
            "return": [],
            "arguments": {
                "runic_alphabet": []
            }
        },
        "Transcriber.transcribe": {
            "name": "transcribe",
            "location": 109,
            "return": [],
            "arguments": {
                "rune_sentence": [],
                "runic_alphabet": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/omr.py": {},
    "cltk-master/src/cltk/alphabet/ory.py": {},
    "cltk-master/src/cltk/alphabet/osc.py": {},
    "cltk-master/src/cltk/alphabet/ota.py": {},
    "cltk-master/src/cltk/alphabet/oty.py": {},
    "cltk-master/src/cltk/alphabet/peo.py": {},
    "cltk-master/src/cltk/alphabet/pes.py": {
        "mk_replacement_regex": {
            "name": "mk_replacement_regex",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "normalize_text": {
            "name": "normalize_text",
            "location": 236,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/pli.py": {},
    "cltk-master/src/cltk/alphabet/processes.py": {
        "NormalizeProcess.algorithm": {
            "name": "algorithm",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeProcess.run": {
            "name": "run",
            "location": 27,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "int",
                    "BinaryIO",
                    "str",
                    "Optional[List[int]]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/alphabet/san.py": {},
    "cltk-master/src/cltk/alphabet/tel.py": {},
    "cltk-master/src/cltk/alphabet/text_normalization.py": {
        "cltk_normalize": {
            "name": "cltk_normalize",
            "location": 7,
            "return": [],
            "arguments": {
                "text": [],
                "compatibility": []
            }
        },
        "remove_non_ascii": {
            "name": "remove_non_ascii",
            "location": 14,
            "return": [],
            "arguments": {
                "input_string": []
            }
        },
        "remove_non_latin": {
            "name": "remove_non_latin",
            "location": 22,
            "return": [],
            "arguments": {
                "input_string": [],
                "also_keep": []
            }
        },
        "split_trailing_punct": {
            "name": "split_trailing_punct",
            "location": 38,
            "return": [],
            "arguments": {
                "text": [],
                "punctuation": []
            }
        },
        "split_leading_punct": {
            "name": "split_leading_punct",
            "location": 75,
            "return": [],
            "arguments": {
                "text": [],
                "punctuation": []
            }
        },
        "remove_odd_punct": {
            "name": "remove_odd_punct",
            "location": 115,
            "return": [],
            "arguments": {
                "text": [],
                "punctuation": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/urd.py": {},
    "cltk-master/src/cltk/alphabet/xlc.py": {},
    "cltk-master/src/cltk/alphabet/xld.py": {},
    "cltk-master/src/cltk/alphabet/__init__.py": {},
    "cltk-master/src/cltk/alphabet/grc/beta_to_unicode.py": {
        "BetaCodeReplacer.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "pattern1": [],
                "pattern2": [],
                "pattern3": []
            }
        },
        "BetaCodeReplacer.replace_beta_code": {
            "name": "replace_beta_code",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/grc/cypriot.py": {},
    "cltk-master/src/cltk/alphabet/grc/grc.py": {
        "expand_iota_subscript": {
            "name": "expand_iota_subscript",
            "location": 540,
            "return": [],
            "arguments": {
                "input_str": [],
                "lowercase": []
            }
        },
        "filter_non_greek": {
            "name": "filter_non_greek",
            "location": 563,
            "return": [],
            "arguments": {
                "input_str": []
            }
        },
        "tonos_oxia_converter": {
            "name": "tonos_oxia_converter",
            "location": 633,
            "return": [],
            "arguments": {
                "text": [],
                "reverse": []
            }
        },
        "normalize_grc": {
            "name": "normalize_grc",
            "location": 645,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/alphabet/grc/__init__.py": {},
    "cltk-master/src/cltk/alphabet/xcl/xcl.py": {},
    "cltk-master/src/cltk/core/cltk_logger.py": {},
    "cltk-master/src/cltk/core/data_types.py": {
        "Word.__getitem__": {
            "name": "__getitem__",
            "location": 88,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "feature_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Word.__getattr__": {
            "name": "__getattr__",
            "location": 94,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "Union[str, List[str]]",
                    "type"
                ]
            }
        },
        "Sentence.__getitem__": {
            "name": "__getitem__",
            "location": 113,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "abc.Mapping"
                ]
            }
        },
        "Sentence.__len__": {
            "name": "__len__",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.sentences": {
            "name": "sentences",
            "location": 189,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.sentences_tokens": {
            "name": "sentences_tokens",
            "location": 206,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.sentences_strings": {
            "name": "sentences_strings",
            "location": 217,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc._get_words_attribute": {
            "name": "_get_words_attribute",
            "location": 234,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "bool"
                ]
            }
        },
        "Doc.tokens": {
            "name": "tokens",
            "location": 238,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.tokens_stops_filtered": {
            "name": "tokens_stops_filtered",
            "location": 244,
            "return": [
                "str",
                "List[int]",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.pos": {
            "name": "pos",
            "location": 260,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.morphosyntactic_features": {
            "name": "morphosyntactic_features",
            "location": 265,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.lemmata": {
            "name": "lemmata",
            "location": 273,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.stems": {
            "name": "stems",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc.__getitem__": {
            "name": "__getitem__",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "word_index": [
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "List[int]",
                    "list"
                ]
            }
        },
        "Doc.embeddings": {
            "name": "embeddings",
            "location": 292,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.run": {
            "name": "run",
            "location": 313,
            "return": [
                "Doc"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "str",
                    "bool"
                ]
            }
        },
        "Pipeline.add_process": {
            "name": "add_process",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "process": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "cltk-master/src/cltk/core/exceptions.py": {},
    "cltk-master/src/cltk/core/__init__.py": {},
    "cltk-master/src/cltk/corpora/__init__.py": {},
    "cltk-master/src/cltk/corpora/grc/tei.py": {
        "onekgreek_tei_xml_to_text": {
            "name": "onekgreek_tei_xml_to_text",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "onekgreek_tei_xml_to_text_capitains": {
            "name": "onekgreek_tei_xml_to_text_capitains",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cltk-master/src/cltk/corpora/grc/__init__.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/author_date.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/author_epithet.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/author_female.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/author_geo.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/file_utils.py": {
        "tlg_plaintext_cleanup": {
            "name": "tlg_plaintext_cleanup",
            "location": 13,
            "return": [],
            "arguments": {
                "text": [],
                "rm_punctuation": [],
                "rm_periods": []
            }
        },
        "assemble_tlg_author_filepaths": {
            "name": "assemble_tlg_author_filepaths",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "assemble_tlg_works_filepaths": {
            "name": "assemble_tlg_works_filepaths",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "cltk-master/src/cltk/corpora/grc/tlg/id_author.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/index_lists.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/parse_tlg_indices.py": {
        "get_female_authors": {
            "name": "get_female_authors",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "get_epithet_index": {
            "name": "get_epithet_index",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "get_epithets": {
            "name": "get_epithets",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "select_authors_by_epithet": {
            "name": "select_authors_by_epithet",
            "location": 49,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "get_epithet_of_author": {
            "name": "get_epithet_of_author",
            "location": 59,
            "return": [],
            "arguments": {
                "_id": []
            }
        },
        "get_geo_index": {
            "name": "get_geo_index",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "get_geographies": {
            "name": "get_geographies",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "select_authors_by_geo": {
            "name": "select_authors_by_geo",
            "location": 83,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "get_geo_of_author": {
            "name": "get_geo_of_author",
            "location": 92,
            "return": [],
            "arguments": {
                "_id": []
            }
        },
        "get_lists": {
            "name": "get_lists",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "get_id_author": {
            "name": "get_id_author",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "select_id_by_name": {
            "name": "select_id_by_name",
            "location": 111,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "open_json": {
            "name": "open_json",
            "location": 123,
            "return": [],
            "arguments": {
                "_file": []
            }
        },
        "get_works_by_id": {
            "name": "get_works_by_id",
            "location": 130,
            "return": [],
            "arguments": {
                "_id": []
            }
        },
        "check_id": {
            "name": "check_id",
            "location": 136,
            "return": [],
            "arguments": {
                "_id": []
            }
        },
        "get_date_author": {
            "name": "get_date_author",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "get_dates": {
            "name": "get_dates",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "get_date_of_author": {
            "name": "get_date_of_author",
            "location": 154,
            "return": [],
            "arguments": {
                "_id": []
            }
        },
        "_get_epoch": {
            "name": "_get_epoch",
            "location": 163,
            "return": [],
            "arguments": {
                "_str": []
            }
        },
        "_check_number": {
            "name": "_check_number",
            "location": 183,
            "return": [],
            "arguments": {
                "_str": []
            }
        },
        "_handle_splits": {
            "name": "_handle_splits",
            "location": 190,
            "return": [],
            "arguments": {
                "_str": []
            }
        },
        "normalize_dates": {
            "name": "normalize_dates",
            "location": 213,
            "return": [],
            "arguments": {}
        }
    },
    "cltk-master/src/cltk/corpora/grc/tlg/tlgu.py": {
        "TLGU.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interactive": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TLGU._check_and_download_tlgu_source": {
            "name": "_check_and_download_tlgu_source",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TLGU._check_install": {
            "name": "_check_install",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TLGU.convert": {
            "name": "convert",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str"
                ],
                "markup": [
                    "str",
                    "Optional[bool]",
                    "list"
                ],
                "rm_newlines": [
                    "str",
                    "Optional[bool]",
                    "list"
                ],
                "divide_works": [
                    "str",
                    "Optional[bool]",
                    "list"
                ],
                "lat": [
                    "str",
                    "Optional[bool]",
                    "list"
                ],
                "extra_args": [
                    "List[Union[str, \"SqlFile\"]]",
                    "bool",
                    "Optional[str]",
                    "list",
                    "Optional[int]",
                    "List[str]",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "TLGU.convert_corpus": {
            "name": "convert_corpus",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "str"
                ],
                "markup": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "lat": [
                    "str",
                    "Union[dict, list]",
                    "float"
                ]
            }
        },
        "TLGU.divide_works": {
            "name": "divide_works",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cltk-master/src/cltk/corpora/grc/tlg/tlg_index.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/work_numbers.py": {},
    "cltk-master/src/cltk/corpora/grc/tlg/__init__.py": {},
    "cltk-master/src/cltk/corpora/lat/__init__.py": {},
    "cltk-master/src/cltk/corpora/lat/phi/file_utils.py": {
        "phi5_plaintext_cleanup": {
            "name": "phi5_plaintext_cleanup",
            "location": 13,
            "return": [],
            "arguments": {
                "text": [],
                "rm_punctuation": [],
                "rm_periods": []
            }
        },
        "assemble_phi5_author_filepaths": {
            "name": "assemble_phi5_author_filepaths",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "assemble_phi5_works_filepaths": {
            "name": "assemble_phi5_works_filepaths",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "cltk-master/src/cltk/corpora/lat/phi/phi5_index.py": {},
    "cltk-master/src/cltk/corpora/lat/phi/__init__.py": {},
    "cltk-master/src/cltk/data/fetch.py": {
        "ProgressPrinter.update": {
            "name": "update",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "int",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "cur_count": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "max_count": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "FetchCorpus.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "int"
                ],
                "testing": [
                    "bool",
                    "int",
                    "static_frame.core.util.PathSpecifier",
                    "Exception"
                ]
            }
        },
        "FetchCorpus.__repr__": {
            "name": "__repr__",
            "location": 511,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchCorpus._get_user_defined_corpora": {
            "name": "_get_user_defined_corpora",
            "location": 517,
            "return": [
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchCorpus._get_library_defined_corpora": {
            "name": "_get_library_defined_corpora",
            "location": 552,
            "return": [
                "str",
                "Callable",
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchCorpus.list_corpora": {
            "name": "list_corpora",
            "location": 562,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchCorpus._copy_dir_recursive": {
            "name": "_copy_dir_recursive",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "src_rel": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "dst_rel": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FetchCorpus._get_corpus_properties": {
            "name": "_get_corpus_properties",
            "location": 588,
            "return": [
                "int",
                "bool",
                "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]"
            ],
            "arguments": {
                "self": [],
                "corpus_name": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "FetchCorpus._git_user_defined_corpus": {
            "name": "_git_user_defined_corpus",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus_name": [
                    "str"
                ],
                "corpus_type": [
                    "str",
                    "Dict[str, str]"
                ],
                "uri": [
                    "str"
                ],
                "branch": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "FetchCorpus.import_corpus": {
            "name": "import_corpus",
            "location": 653,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "corpus_name": [
                    "str",
                    "dict",
                    "int"
                ],
                "local_path": [
                    "str",
                    "Optional[str]"
                ],
                "branch": [
                    "str",
                    "pypi2nix.logger.Logger"
                ]
            }
        }
    },
    "cltk-master/src/cltk/data/__init__.py": {},
    "cltk-master/src/cltk/dependency/processes.py": {
        "StanzaProcess.algorithm": {
            "name": "algorithm",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StanzaProcess.run": {
            "name": "run",
            "location": 45,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "cltk.core.data_types.Doc",
                    "str"
                ]
            }
        },
        "StanzaProcess.stanza_to_cltk_word_type": {
            "name": "stanza_to_cltk_word_type",
            "location": 60,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "Optional[Type]"
            ],
            "arguments": {
                "stanza_doc": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Dict[str, str]]",
                    "Mapping"
                ]
            }
        },
        "TreeBuilderProcess.algorithm": {
            "name": "algorithm",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "cltk-master/src/cltk/dependency/stanza.py": {
        "StanzaWrapper.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "language": [],
                "treebank": [],
                "stanza_debug_level": [],
                "interactive": [],
                "silent": []
            }
        },
        "StanzaWrapper.parse": {
            "name": "parse",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StanzaWrapper._load_pipeline": {
            "name": "_load_pipeline",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper._is_model_present": {
            "name": "_is_model_present",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper._download_model": {
            "name": "_download_model",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper._get_default_treebank": {
            "name": "_get_default_treebank",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper._is_valid_treebank": {
            "name": "_is_valid_treebank",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper.is_wrapper_available": {
            "name": "is_wrapper_available",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper._get_stanza_code": {
            "name": "_get_stanza_code",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StanzaWrapper.get_nlp": {
            "name": "get_nlp",
            "location": 365,
            "return": [],
            "arguments": {
                "cls": [],
                "language": [],
                "treebank": []
            }
        }
    },
    "cltk-master/src/cltk/dependency/tree.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "form": [],
                "form_id": []
            }
        },
        "Form.__truediv__": {
            "name": "__truediv__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "pos_tag": []
            }
        },
        "Form.__rshift__": {
            "name": "__rshift__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Form.get_dependencies": {
            "name": "get_dependencies",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "relation": []
            }
        },
        "Form.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Form.full_str": {
            "name": "full_str",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "include_relation": []
            }
        },
        "Form.__call__": {
            "name": "__call__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "feature": []
            }
        },
        "Form.to_form": {
            "name": "to_form",
            "location": 138,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "Dependency.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "dep": [],
                "relation": []
            }
        },
        "Dependency.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dependency.__or__": {
            "name": "__or__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "relation": []
            }
        },
        "DependencyTree.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "DependencyTree.get_dependencies": {
            "name": "get_dependencies",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DependencyTree.print_tree": {
            "name": "print_tree",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "all_features": []
            }
        },
        "DependencyTree.to_tree": {
            "name": "to_tree",
            "location": 254,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "DependencyTree.get_dependencies._get_deps": {
            "name": "_get_deps",
            "location": 227,
            "return": [],
            "arguments": {
                "node": [],
                "deps": []
            }
        },
        "DependencyTree.print_tree._print_treelet": {
            "name": "_print_treelet",
            "location": 243,
            "return": [],
            "arguments": {
                "node": [],
                "indent": [],
                "all_features": []
            }
        }
    },
    "cltk-master/src/cltk/dependency/utils.py": {
        "get_governor_word": {
            "name": "get_governor_word",
            "location": 10,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "word": [
                    "str",
                    "bool"
                ],
                "sentence": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_governor_relationship": {
            "name": "get_governor_relationship",
            "location": 20,
            "return": [
                "typing.Optional[typing.Any]"
            ],
            "arguments": {
                "word": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "sentence": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "cltk-master/src/cltk/dependency/__init__.py": {},
    "cltk-master/src/cltk/embeddings/embeddings.py": {
        "Word2VecEmbeddings.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iso_code": [
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "model_type": [
                    "str",
                    "bool"
                ],
                "interactive": [
                    "str",
                    "bool"
                ],
                "silent": [
                    "str",
                    "bool"
                ],
                "overwrite": [
                    "bool",
                    "Type",
                    "faustypes.models.IsInstanceArgT",
                    "type",
                    "Callable[..., T]",
                    "int",
                    "dict"
                ]
            }
        },
        "Word2VecEmbeddings.get_word_vector": {
            "name": "get_word_vector",
            "location": 89,
            "return": [
                "str",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                "deeplearning.ml4pl.models.logger.Logger",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "float",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "salon.models.Stylist"
                ]
            }
        },
        "Word2VecEmbeddings.get_embedding_length": {
            "name": "get_embedding_length",
            "location": 96,
            "return": [
                "str",
                "bool",
                "recidiviz.utils.regions.Region",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings.get_sims": {
            "name": "get_sims",
            "location": 100,
            "return": [
                "str",
                "GPy.models.GPRegression",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "bool"
                ]
            }
        },
        "Word2VecEmbeddings._check_input_params": {
            "name": "_check_input_params",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings._build_zip_filepath": {
            "name": "_build_zip_filepath",
            "location": 126,
            "return": [
                "dict",
                "int",
                "bytes",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings._build_nlpl_filepath": {
            "name": "_build_nlpl_filepath",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings._is_nlpl_model_present": {
            "name": "_is_nlpl_model_present",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings._download_nlpl_models": {
            "name": "_download_nlpl_models",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings._unzip_nlpl_model": {
            "name": "_unzip_nlpl_model",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecEmbeddings._load_model": {
            "name": "_load_model",
            "location": 180,
            "return": [
                "str",
                "Union[str, bytes]",
                "int",
                "Iterable[Tuple[str, str, str]]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iso_code": [
                    "str",
                    "Optional[int]",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "training_set": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "int",
                    "Optional[str]",
                    "static_frame.core.util.IndexInitializer",
                    "Sequence",
                    "str",
                    "purplship.core.utils.xml.Element"
                ],
                "model_type": [
                    "str",
                    "zerver.models.Realm",
                    "Optional[str]"
                ],
                "interactive": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "overwrite": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "silent": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "FastTextEmbeddings.get_word_vector": {
            "name": "get_word_vector",
            "location": 242,
            "return": [
                "str",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                "deeplearning.ml4pl.models.logger.Logger",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "float",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "salon.models.Stylist"
                ]
            }
        },
        "FastTextEmbeddings.get_embedding_length": {
            "name": "get_embedding_length",
            "location": 250,
            "return": [
                "str",
                "bool",
                "recidiviz.utils.regions.Region",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings.get_sims": {
            "name": "get_sims",
            "location": 254,
            "return": [
                "str",
                "GPy.models.GPRegression",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "bool"
                ]
            }
        },
        "FastTextEmbeddings.download_fasttext_models": {
            "name": "download_fasttext_models",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings._is_model_present": {
            "name": "_is_model_present",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings._check_input_params": {
            "name": "_check_input_params",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings._load_model": {
            "name": "_load_model",
            "location": 341,
            "return": [
                "str",
                "Union[str, bytes]",
                "int",
                "Iterable[Tuple[str, str, str]]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings._is_fasttext_lang_available": {
            "name": "_is_fasttext_lang_available",
            "location": 349,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings._build_fasttext_filepath": {
            "name": "_build_fasttext_filepath",
            "location": 360,
            "return": [
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextEmbeddings._build_fasttext_url": {
            "name": "_build_fasttext_url",
            "location": 408,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/embeddings/processes.py": {
        "EmbeddingsProcess.algorithm": {
            "name": "algorithm",
            "location": 54,
            "return": [
                "str",
                "core.LazyNS",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingsProcess.run": {
            "name": "run",
            "location": 66,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "cltk.core.data_types.Doc",
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/embeddings/sentence.py": {
        "rescale_idf": {
            "name": "rescale_idf",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "List[int]"
                ],
                "min_idf": [
                    "int",
                    "List[int]"
                ],
                "max_idf": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "compute_pc": {
            "name": "compute_pc",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "npc": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "remove_pc": {
            "name": "remove_pc",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float"
                ],
                "npc": [
                    "float",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "get_sent_embeddings": {
            "name": "get_sent_embeddings",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "sent": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "Dict[str, float]"
                ],
                "idf_model": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "Dict[str, float]"
                ],
                "min_idf": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "Dict[str, float]"
                ],
                "max_idf": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "Dict[str, float]"
                ],
                "dimensions": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/embeddings/__init__.py": {},
    "cltk-master/src/cltk/languages/example_texts.py": {
        "get_example_text": {
            "name": "get_example_text",
            "location": 158,
            "return": [],
            "arguments": {
                "iso_code": []
            }
        }
    },
    "cltk-master/src/cltk/languages/glottolog.py": {
        "_resort_languages_list": {
            "name": "_resort_languages_list",
            "location": 3319,
            "return": [],
            "arguments": {
                "languages_list": []
            }
        }
    },
    "cltk-master/src/cltk/languages/pipelines.py": {},
    "cltk-master/src/cltk/languages/utils.py": {
        "get_lang": {
            "name": "get_lang",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "iso_code": [
                    "str"
                ]
            }
        },
        "find_iso_name": {
            "name": "find_iso_name",
            "location": 28,
            "return": [
                "str",
                "List[str]",
                "Callable[[str], None]",
                "Container[str]"
            ],
            "arguments": {
                "common_name": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/languages/__init__.py": {},
    "cltk-master/src/cltk/lemmatize/ang.py": {
        "OldEnglishDictionaryLemmatizer._load_forms_and_lemmas": {
            "name": "_load_forms_and_lemmas",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishDictionaryLemmatizer._load_unigram_counts": {
            "name": "_load_unigram_counts",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishDictionaryLemmatizer._specify_regex_rules": {
            "name": "_specify_regex_rules",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/backoff.py": {
        "SequentialBackoffLemmatizer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "backoff": [],
                "verbose": []
            }
        },
        "SequentialBackoffLemmatizer.tag": {
            "name": "tag",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "SequentialBackoffLemmatizer.tag_one": {
            "name": "tag_one",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "index": [],
                "history": []
            }
        },
        "SequentialBackoffLemmatizer.lemmatize": {
            "name": "lemmatize",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "DefaultLemmatizer.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "lemma": [],
                "backoff": [],
                "verbose": []
            }
        },
        "DefaultLemmatizer.choose_tag": {
            "name": "choose_tag",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "index": [],
                "history": []
            }
        },
        "DefaultLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityLemmatizer.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "backoff": [],
                "verbose": []
            }
        },
        "IdentityLemmatizer.choose_tag": {
            "name": "choose_tag",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "index": [],
                "history": []
            }
        },
        "IdentityLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictLemmatizer.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "lemmas": [],
                "backoff": [],
                "source": [],
                "verbose": []
            }
        },
        "DictLemmatizer.choose_tag": {
            "name": "choose_tag",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "index": [],
                "history": []
            }
        },
        "DictLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnigramLemmatizer.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "train": [],
                "model": [],
                "backoff": [],
                "source": [],
                "cutoff": [],
                "verbose": []
            }
        },
        "UnigramLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegexpLemmatizer.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "regexps": [],
                "source": [],
                "backoff": [],
                "verbose": []
            }
        },
        "RegexpLemmatizer.choose_tag": {
            "name": "choose_tag",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "index": [],
                "history": []
            }
        },
        "RegexpLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/fro.py": {
        "OldFrenchDictionaryLemmatizer._load_forms_and_lemmas": {
            "name": "_load_forms_and_lemmas",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldFrenchDictionaryLemmatizer._load_unigram_counts": {
            "name": "_load_unigram_counts",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldFrenchDictionaryLemmatizer._specify_regex_rules": {
            "name": "_specify_regex_rules",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/grc.py": {
        "GreekBackoffLemmatizer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "train": [],
                "seed": [],
                "verbose": []
            }
        },
        "GreekBackoffLemmatizer._define_lemmatizer": {
            "name": "_define_lemmatizer",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekBackoffLemmatizer.lemmatize": {
            "name": "lemmatize",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "GreekBackoffLemmatizer.evaluate": {
            "name": "evaluate",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekBackoffLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekBackoffLemmatizer.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "GreekBackoffLemmatizer.__init__._randomize_data": {
            "name": "_randomize_data",
            "location": 55,
            "return": [],
            "arguments": {
                "train": [],
                "seed": []
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/lat.py": {
        "RomanNumeralLemmatizer.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default": [
                    "int",
                    "tuple",
                    "float",
                    "bool"
                ],
                "backoff": [
                    "str",
                    "Optional[str]",
                    "Optional[\"Reference\"]",
                    "Optional[float]"
                ]
            }
        },
        "RomanNumeralLemmatizer.choose_tag": {
            "name": "choose_tag",
            "location": 479,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "index": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "history": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "RomanNumeralLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatinBackoffLemmatizer.__init__": {
            "name": "__init__",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "train": [
                    "str",
                    "Optional[str]"
                ],
                "seed": [
                    "str",
                    "Optional[str]"
                ],
                "verbose": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "LatinBackoffLemmatizer._define_lemmatizer": {
            "name": "_define_lemmatizer",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LatinBackoffLemmatizer.lemmatize": {
            "name": "lemmatize",
            "location": 590,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "List[List[str]]",
                    "bytes"
                ]
            }
        },
        "LatinBackoffLemmatizer.evaluate": {
            "name": "evaluate",
            "location": 594,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatinBackoffLemmatizer.__repr__": {
            "name": "__repr__",
            "location": 601,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatinBackoffLemmatizer.__call__": {
            "name": "__call__",
            "location": 604,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LatinBackoffLemmatizer.__init__._randomize_data": {
            "name": "_randomize_data",
            "location": 542,
            "return": [
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "train": [
                    "bytes",
                    "int",
                    "tuple"
                ],
                "seed": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/naive_lemmatizer.py": {
        "_build_match_and_apply_functions": {
            "name": "_build_match_and_apply_functions",
            "location": 12,
            "return": [],
            "arguments": {
                "pattern": [],
                "replace": []
            }
        },
        "_build_match_and_apply_functions.matches_rule": {
            "name": "matches_rule",
            "location": 13,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "_build_match_and_apply_functions.apply_rule": {
            "name": "apply_rule",
            "location": 16,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "DictionaryRegexLemmatizer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictionaryRegexLemmatizer._load_forms_and_lemmas": {
            "name": "_load_forms_and_lemmas",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictionaryRegexLemmatizer._load_unigram_counts": {
            "name": "_load_unigram_counts",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictionaryRegexLemmatizer._specify_regex_rules": {
            "name": "_specify_regex_rules",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictionaryRegexLemmatizer._relative_frequency": {
            "name": "_relative_frequency",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "DictionaryRegexLemmatizer._apply_regex": {
            "name": "_apply_regex",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "DictionaryRegexLemmatizer.lemmatize_token": {
            "name": "lemmatize_token",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "best_guess": [],
                "return_frequencies": []
            }
        },
        "DictionaryRegexLemmatizer.lemmatize": {
            "name": "lemmatize",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "best_guess": [],
                "return_frequencies": []
            }
        },
        "DictionaryRegexLemmatizer.__call__": {
            "name": "__call__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/processes.py": {
        "LemmatizationProcess.run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "GreekLemmatizationProcess.algorithm": {
            "name": "algorithm",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinLemmatizationProcess.algorithm": {
            "name": "algorithm",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishLemmatizationProcess.algorithm": {
            "name": "algorithm",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldFrenchLemmatizationProcess.algorithm": {
            "name": "algorithm",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lemmatize/__init__.py": {},
    "cltk-master/src/cltk/lexicon/lat.py": {
        "LatinLewisLexicon.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "interactive": []
            }
        },
        "LatinLewisLexicon.lookup": {
            "name": "lookup",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "lemma": []
            }
        },
        "LatinLewisLexicon._load_entries": {
            "name": "_load_entries",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lexicon/non.py": {
        "OldNorseZoegaLexicon.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "interactive": []
            }
        },
        "OldNorseZoegaLexicon.lookup": {
            "name": "lookup",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "lemma": []
            }
        },
        "OldNorseZoegaLexicon._load_entries": {
            "name": "_load_entries",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lexicon/processes.py": {
        "LexiconProcess.algorithm": {
            "name": "algorithm",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexiconProcess.run": {
            "name": "run",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "LatinLexiconProcess.algorithm": {
            "name": "algorithm",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseLexiconProcess.algorithm": {
            "name": "algorithm",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/lexicon/__init__.py": {},
    "cltk-master/src/cltk/morphology/akk.py": {
        "get_bound_form": {
            "name": "get_bound_form",
            "location": 15,
            "return": [],
            "arguments": {
                "noun": [],
                "gender": []
            }
        },
        "decline_noun": {
            "name": "decline_noun",
            "location": 80,
            "return": [],
            "arguments": {
                "noun": [],
                "gender": [],
                "mimation": []
            }
        }
    },
    "cltk-master/src/cltk/morphology/lat.py": {
        "CollatinusDecliner.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollatinusDecliner.__getPOS": {
            "name": "__getPOS",
            "location": 57,
            "return": [
                "str",
                "core.D.VersionedIdentifier",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CollatinusDecliner._remove_disambiguation": {
            "name": "_remove_disambiguation",
            "location": 65,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sized"
                ]
            }
        },
        "CollatinusDecliner._getRoots": {
            "name": "_getRoots",
            "location": 73,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str"
                ],
                "model": [
                    "bool",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "CollatinusDecliner.decline": {
            "name": "decline",
            "location": 133,
            "return": [
                "List[str]",
                "List[T]",
                "List[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "flatten": [
                    "bool",
                    "int"
                ],
                "collatinus_dict": [
                    "bool",
                    "int"
                ]
            }
        },
        "CollatinusDecliner.lemmas": {
            "name": "lemmas",
            "location": 226,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/morphology/morphosyntax.py": {
        "to_categorial": {
            "name": "to_categorial",
            "location": 171,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "pos": []
            }
        },
        "from_ud": {
            "name": "from_ud",
            "location": 444,
            "return": [
                "Optional[int]",
                "bool",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "feature_name": [
                    "str",
                    "List[str]",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ],
                "feature_value": [
                    "str"
                ]
            }
        },
        "MorphosyntacticFeatureBundle.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "feature_name": [
                    "str",
                    "int"
                ]
            }
        },
        "MorphosyntacticFeatureBundle.__setitem__": {
            "name": "__setitem__",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "feature_name": [
                    "str",
                    "int"
                ],
                "feature_values": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "MorphosyntacticFeatureBundle.all": {
            "name": "all",
            "location": 92,
            "return": [
                "int",
                "float",
                "frozenset",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.underspecify": {
            "name": "underspecify",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MorphosyntacticFeatureBundle.matches": {
            "name": "matches",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[bytes]",
                    "Optional[SupportsFloat]",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "MorphosyntacticFeatureBundle.__str__": {
            "name": "__str__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.__iter__": {
            "name": "__iter__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.keys": {
            "name": "keys",
            "location": 145,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.values": {
            "name": "values",
            "location": 148,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.items": {
            "name": "items",
            "location": 151,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.__len__": {
            "name": "__len__",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorphosyntacticFeatureBundle.__contains__": {
            "name": "__contains__",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "dict",
                    "Iterable[T]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/morphology/universal_dependencies_features.py": {},
    "cltk-master/src/cltk/morphology/utils.py": {
        "get_pos": {
            "name": "get_pos",
            "location": 18,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "get_features": {
            "name": "get_features",
            "location": 25,
            "return": [
                "Set[str]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "bool"
                ],
                "prepend_to_label": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "cltk-master/src/cltk/morphology/__init__.py": {},
    "cltk-master/src/cltk/ner/ner.py": {
        "tag_ner": {
            "name": "tag_ner",
            "location": 37,
            "return": [],
            "arguments": {
                "iso_code": [],
                "input_tokens": []
            }
        }
    },
    "cltk-master/src/cltk/ner/processes.py": {
        "NERProcess.algorithm": {
            "name": "algorithm",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NERProcess.run": {
            "name": "run",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        }
    },
    "cltk-master/src/cltk/ner/spacy_ner.py": {
        "download_prompt": {
            "name": "download_prompt",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "iso_code": [
                    "str",
                    "bool",
                    "int"
                ],
                "message": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "model_url": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "interactive": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable[..., str]",
                    "Optional[int]"
                ],
                "silent": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable[..., str]",
                    "Optional[int]"
                ]
            }
        },
        "spacy_tag_ner": {
            "name": "spacy_tag_ner",
            "location": 55,
            "return": [
                "str",
                "int",
                "float",
                "as3.scanner.Token",
                "List[List[str]]"
            ],
            "arguments": {
                "iso_code": [
                    "str"
                ],
                "text_tokens": [
                    "bool"
                ],
                "model_path": [
                    "str",
                    "Optional[str]",
                    "utils.types.Fun[[int], str]"
                ]
            }
        },
        "CustomTokenizer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CustomTokenizer.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        }
    },
    "cltk-master/src/cltk/ner/__init__.py": {},
    "cltk-master/src/cltk/phonology/akk.py": {
        "get_cv_pattern": {
            "name": "get_cv_pattern",
            "location": 41,
            "return": [],
            "arguments": {
                "word": [],
                "pprint": []
            }
        },
        "_is_consonant": {
            "name": "_is_consonant",
            "location": 103,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_vowel": {
            "name": "_is_vowel",
            "location": 107,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_short_vowel": {
            "name": "_is_short_vowel",
            "location": 116,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_macron_vowel": {
            "name": "_is_macron_vowel",
            "location": 120,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_circumflex_vowel": {
            "name": "_is_circumflex_vowel",
            "location": 124,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "syllabify": {
            "name": "syllabify",
            "location": 128,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "find_stress": {
            "name": "find_stress",
            "location": 194,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "AkkadianSyllabifier.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AkkadianSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "AkkadianSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AkkadianSyllabifier.__call__": {
            "name": "__call__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/orthophonology.py": {
        "make_phoneme": {
            "name": "make_phoneme",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "PositionedPhoneme": {
            "name": "PositionedPhoneme",
            "location": 304,
            "return": [],
            "arguments": {
                "phoneme": [],
                "word_initial": [],
                "word_final": [],
                "syllable_initial": [],
                "syllable_final": [],
                "env_start": [],
                "env_end": []
            }
        },
        "PhonologicalFeature.__sub__": {
            "name": "__sub__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonologicalFeature.__rshift__": {
            "name": "__rshift__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonologicalFeature.__le__": {
            "name": "__le__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonologicalFeature.__ge__": {
            "name": "__ge__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonologicalFeature.matches": {
            "name": "matches",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonologicalFeature.__floordiv__": {
            "name": "__floordiv__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "ipa": []
            }
        },
        "AbstractPhoneme.is_vowel": {
            "name": "is_vowel",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractPhoneme.merge": {
            "name": "merge",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.is_equal": {
            "name": "is_equal",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.matches": {
            "name": "matches",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__getitem__": {
            "name": "__getitem__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "feature_name": []
            }
        },
        "AbstractPhoneme.__setitem__": {
            "name": "__setitem__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "feature_name": [],
                "feature_value": []
            }
        },
        "AbstractPhoneme.__str__": {
            "name": "__str__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractPhoneme.__eq__": {
            "name": "__eq__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__le__": {
            "name": "__le__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__ge__": {
            "name": "__ge__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__lt__": {
            "name": "__lt__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__gt__": {
            "name": "__gt__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__rshift__": {
            "name": "__rshift__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__lshift__": {
            "name": "__lshift__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__sub__": {
            "name": "__sub__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPhoneme.__floordiv__": {
            "name": "__floordiv__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AlwaysMatchingPseudoPhoneme.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlwaysMatchingPseudoPhoneme.matches": {
            "name": "matches",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WordBoundaryPseudoPhoneme.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordBoundaryPseudoPhoneme.matches": {
            "name": "matches",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WordBoundaryPseudoPhoneme.is_equal": {
            "name": "is_equal",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SyllableBoundaryPseudoPhoneme.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyllableBoundaryPseudoPhoneme.matches": {
            "name": "matches",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonemeDisjunction.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhonemeDisjunction.__floordiv__": {
            "name": "__floordiv__",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonemeDisjunction.__rshift__": {
            "name": "__rshift__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonemeDisjunction.matches": {
            "name": "matches",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonemeDisjunction.__sub__": {
            "name": "__sub__",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonemeDisjunction.__le__": {
            "name": "__le__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PhonemeDisjunction.__ge__": {
            "name": "__ge__",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Consonant.__init__": {
            "name": "__init__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "place": [],
                "manner": [],
                "voiced": [],
                "ipa": [],
                "geminate": [],
                "aspirated": []
            }
        },
        "Consonant.is_more_sonorous": {
            "name": "is_more_sonorous",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Consonant.merge": {
            "name": "merge",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Consonant.geminate": {
            "name": "geminate",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "height": [],
                "backness": [],
                "rounded": [],
                "length": [],
                "ipa": []
            }
        },
        "Vowel.__add__": {
            "name": "__add__",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vowel.lengthen": {
            "name": "lengthen",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.is_more_sonorous": {
            "name": "is_more_sonorous",
            "location": 586,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vowel.merge": {
            "name": "merge",
            "location": 600,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BasePhonologicalRule.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "action": []
            }
        },
        "BasePhonologicalRule.perform_action": {
            "name": "perform_action",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "BasePhonologicalRule.__call__": {
            "name": "__call__",
            "location": 632,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "BasePhonologicalRule.__or__": {
            "name": "__or__",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "other_condition": []
            }
        },
        "PhonologicalRule.check_environment": {
            "name": "check_environment",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "PhonemeNotFound.__init__": {
            "name": "__init__",
            "location": 666,
            "return": [],
            "arguments": {
                "self": [],
                "phoneme": []
            }
        },
        "LetterNotFound.__init__": {
            "name": "__init__",
            "location": 675,
            "return": [],
            "arguments": {
                "self": [],
                "letter": []
            }
        },
        "Orthophonology.__init__": {
            "name": "__init__",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "sound_inventory": [],
                "alphabet": [],
                "diphthongs": [],
                "digraphs": [],
                "to_modern": []
            }
        },
        "Orthophonology.add_rule": {
            "name": "add_rule",
            "location": 771,
            "return": [],
            "arguments": {
                "self": [],
                "rule": []
            }
        },
        "Orthophonology.is_syllable_initial": {
            "name": "is_syllable_initial",
            "location": 778,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "Orthophonology.is_syllable_final": {
            "name": "is_syllable_final",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "Orthophonology._tokenize": {
            "name": "_tokenize",
            "location": 792,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "Orthophonology._position_phonemes": {
            "name": "_position_phonemes",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": []
            }
        },
        "Orthophonology._find_sound": {
            "name": "_find_sound",
            "location": 808,
            "return": [],
            "arguments": {
                "self": [],
                "phoneme": []
            }
        },
        "Orthophonology.transcribe_word": {
            "name": "transcribe_word",
            "location": 814,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Orthophonology.transcribe": {
            "name": "transcribe",
            "location": 863,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "as_phonemes": []
            }
        },
        "Orthophonology.transcribe_to_modern": {
            "name": "transcribe_to_modern",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Orthophonology.voice": {
            "name": "voice",
            "location": 897,
            "return": [],
            "arguments": {
                "self": [],
                "consonant": []
            }
        },
        "Orthophonology.aspirate": {
            "name": "aspirate",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "consonant": []
            }
        },
        "Orthophonology.geminate": {
            "name": "geminate",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "consonant": []
            }
        },
        "Orthophonology.lengthen": {
            "name": "lengthen",
            "location": 926,
            "return": [],
            "arguments": {
                "vowel": []
            }
        },
        "Orthophonology.__call__": {
            "name": "__call__",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "as_phonemes": []
            }
        },
        "Orthophonology.__getitem__": {
            "name": "__getitem__",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "letter": []
            }
        },
        "Orthophonology.__lshift__": {
            "name": "__lshift__",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "rule": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/processes.py": {},
    "cltk-master/src/cltk/phonology/syllabifier_processes.py": {
        "SyllabificationProcess.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "GreekSyllabificationProcess.algorithm": {
            "name": "algorithm",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinSyllabificationProcess.algorithm": {
            "name": "algorithm",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleEnglishSyllabificationProcess.algorithm": {
            "name": "algorithm",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanSyllabificationProcess.algorithm": {
            "name": "algorithm",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishSyllabificationProcess.algorithm": {
            "name": "algorithm",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseSyllabificationProcess.algorithm": {
            "name": "algorithm",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/syllabify.py": {
        "get_onsets": {
            "name": "get_onsets",
            "location": 39,
            "return": [],
            "arguments": {
                "text": [],
                "vowels": [],
                "threshold": []
            }
        },
        "Syllabifier.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "low_vowels": [],
                "mid_vowels": [],
                "high_vowels": [],
                "flaps": [],
                "laterals": [],
                "nasals": [],
                "fricatives": [],
                "plosives": [],
                "language": [],
                "break_geminants": [],
                "variant": [],
                "sep": []
            }
        },
        "Syllabifier.set_invalid_onsets": {
            "name": "set_invalid_onsets",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "invalid_onsets": []
            }
        },
        "Syllabifier.set_invalid_ultima": {
            "name": "set_invalid_ultima",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "invalid_ultima": []
            }
        },
        "Syllabifier.set_hierarchy": {
            "name": "set_hierarchy",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "hierarchy": []
            }
        },
        "Syllabifier.set_vowels": {
            "name": "set_vowels",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "vowels": []
            }
        },
        "Syllabifier.syllabify": {
            "name": "syllabify",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "mode": []
            }
        },
        "Syllabifier.syllabify_ssp": {
            "name": "syllabify_ssp",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Syllabifier.onset_maximization": {
            "name": "onset_maximization",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "syllables": []
            }
        },
        "Syllabifier.legal_onsets": {
            "name": "legal_onsets",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "syllables": []
            }
        },
        "Syllabifier.syllabify_mop": {
            "name": "syllabify_mop",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Syllabifier.set_short_vowels": {
            "name": "set_short_vowels",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "short_vowels": []
            }
        },
        "Syllabifier.set_diphthongs": {
            "name": "set_diphthongs",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "diphthongs": []
            }
        },
        "Syllabifier.set_triphthongs": {
            "name": "set_triphthongs",
            "location": 528,
            "return": [],
            "arguments": {
                "self": [],
                "triphthongs": []
            }
        },
        "Syllabifier.set_consonants": {
            "name": "set_consonants",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "consonants": []
            }
        },
        "Syllabifier.syllabify_ipa": {
            "name": "syllabify_ipa",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Syllabifier.syllabify_phonemes": {
            "name": "syllabify_phonemes",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "phonological_word": []
            }
        },
        "Syllable.__init__": {
            "name": "__init__",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "vowels": [],
                "consonants": []
            }
        },
        "Syllable._compute_syllable": {
            "name": "_compute_syllable",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Syllable.__str__": {
            "name": "__str__",
            "location": 674,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/transcription_processes.py": {
        "PhonologicalTranscriptionProcess.run": {
            "name": "run",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "GothicPhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekPhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinPhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanPhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishPhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorsePhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldSwedishPhonologicalTranscriberProcess.algorithm": {
            "name": "algorithm",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/__init__.py": {},
    "cltk-master/src/cltk/phonology/ang/orthophonology.py": {},
    "cltk-master/src/cltk/phonology/ang/phonology.py": {
        "OldEnglishTranscription.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishTranscription.transcribe": {
            "name": "transcribe",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldEnglishTranscription.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishTranscription.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldEnglishSyllabifier.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldEnglishSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldEnglishSyllabifier.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/ang/syllabifier.py": {},
    "cltk-master/src/cltk/phonology/ang/transcription.py": {
        "Transcriber.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transcriber.transcribe": {
            "name": "transcribe",
            "location": 161,
            "return": [],
            "arguments": {
                "text": [],
                "punctuation": [],
                "with_squared_brackets": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "w": []
            }
        },
        "Word.remove_diacritics": {
            "name": "remove_diacritics",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.ascii_encoding": {
            "name": "ascii_encoding",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/ang/transliteration.py": {
        "Transliterate.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transliterate.transliterate": {
            "name": "transliterate",
            "location": 26,
            "return": [],
            "arguments": {
                "text": [],
                "mode": []
            }
        },
        "Transliterate.__transliterate_helper": {
            "name": "__transliterate_helper",
            "location": 63,
            "return": [],
            "arguments": {
                "text": [],
                "dicts": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/ang/__init__.py": {},
    "cltk-master/src/cltk/phonology/arb/phonology.py": {
        "ArabicTranscription.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArabicTranscription.transcribe": {
            "name": "transcribe",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "ArabicTranscription.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArabicTranscription.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/arb/romanization.py": {
        "available_transliterate_systems": {
            "name": "available_transliterate_systems",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "guess_romaization_system": {
            "name": "guess_romaization_system",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "transliterate": {
            "name": "transliterate",
            "location": 359,
            "return": [],
            "arguments": {
                "mode": [],
                "string": [],
                "ignore": [],
                "reverse": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/arb/__init__.py": {},
    "cltk-master/src/cltk/phonology/arb/utils/__init__.py": {},
    "cltk-master/src/cltk/phonology/arb/utils/pyarabic/araby.py": {
        "is_sukun": {
            "name": "is_sukun",
            "location": 325,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_shadda": {
            "name": "is_shadda",
            "location": 335,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_tatweel": {
            "name": "is_tatweel",
            "location": 345,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_tanwin": {
            "name": "is_tanwin",
            "location": 355,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_tashkeel": {
            "name": "is_tashkeel",
            "location": 365,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_haraka": {
            "name": "is_haraka",
            "location": 380,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_shortharaka": {
            "name": "is_shortharaka",
            "location": 390,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_ligature": {
            "name": "is_ligature",
            "location": 400,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_hamza": {
            "name": "is_hamza",
            "location": 411,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_alef": {
            "name": "is_alef",
            "location": 422,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_yehlike": {
            "name": "is_yehlike",
            "location": 433,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_wawlike": {
            "name": "is_wawlike",
            "location": 444,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_teh": {
            "name": "is_teh",
            "location": 455,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_small": {
            "name": "is_small",
            "location": 466,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_weak": {
            "name": "is_weak",
            "location": 477,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_moon": {
            "name": "is_moon",
            "location": 488,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "is_sun": {
            "name": "is_sun",
            "location": 499,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "order": {
            "name": "order",
            "location": 513,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "name": {
            "name": "name",
            "location": 525,
            "return": [],
            "arguments": {
                "archar": []
            }
        },
        "arabicrange": {
            "name": "arabicrange",
            "location": 536,
            "return": [],
            "arguments": {}
        },
        "has_shadda": {
            "name": "has_shadda",
            "location": 557,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "is_vocalized": {
            "name": "is_vocalized",
            "location": 572,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "is_vocalizedtext": {
            "name": "is_vocalizedtext",
            "location": 589,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "is_arabicstring": {
            "name": "is_arabicstring",
            "location": 603,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "is_arabicrange": {
            "name": "is_arabicrange",
            "location": 621,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "is_arabicword": {
            "name": "is_arabicword",
            "location": 633,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "first_char": {
            "name": "first_char",
            "location": 666,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "second_char": {
            "name": "second_char",
            "location": 677,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "last_char": {
            "name": "last_char",
            "location": 688,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "secondlast_char": {
            "name": "secondlast_char",
            "location": 700,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "strip_harakat": {
            "name": "strip_harakat",
            "location": 714,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_lastharaka": {
            "name": "strip_lastharaka",
            "location": 738,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_tashkeel": {
            "name": "strip_tashkeel",
            "location": 757,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_tatweel": {
            "name": "strip_tatweel",
            "location": 779,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_shadda": {
            "name": "strip_shadda",
            "location": 792,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_ligature": {
            "name": "normalize_ligature",
            "location": 804,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_hamza": {
            "name": "normalize_hamza",
            "location": 821,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "separate": {
            "name": "separate",
            "location": 846,
            "return": [],
            "arguments": {
                "word": [],
                "extract_shadda": []
            }
        },
        "joint": {
            "name": "joint",
            "location": 902,
            "return": [],
            "arguments": {
                "letters": [],
                "marks": []
            }
        },
        "vocalizedlike": {
            "name": "vocalizedlike",
            "location": 947,
            "return": [],
            "arguments": {
                "word1": [],
                "word2": []
            }
        },
        "waznlike": {
            "name": "waznlike",
            "location": 968,
            "return": [],
            "arguments": {
                "word1": [],
                "wazn": []
            }
        },
        "shaddalike": {
            "name": "shaddalike",
            "location": 1012,
            "return": [],
            "arguments": {
                "partial": [],
                "fully": []
            }
        },
        "reduce_tashkeel": {
            "name": "reduce_tashkeel",
            "location": 1059,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "vocalized_similarity": {
            "name": "vocalized_similarity",
            "location": 1089,
            "return": [],
            "arguments": {
                "word1": [],
                "word2": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 1132,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/arb/utils/pyarabic/stack.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "List[deque]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/arb/utils/pyarabic/__init__.py": {},
    "cltk-master/src/cltk/phonology/enm/phonology.py": {
        "MiddleEnglishSyllabifier.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleEnglishSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "MiddleEnglishSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleEnglishSyllabifier.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/enm/stress.py": {
        "MiddleEnglishStresser.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "syllabifier": []
            }
        },
        "MiddleEnglishStresser.stress": {
            "name": "stress",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "stress_rule": []
            }
        },
        "MiddleEnglishStresser.phonetic_indexing": {
            "name": "phonetic_indexing",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "p": []
            }
        },
        "MiddleEnglishStresser._soundex": {
            "name": "_soundex",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/enm/syllabifier.py": {},
    "cltk-master/src/cltk/phonology/enm/__init__.py": {},
    "cltk-master/src/cltk/phonology/gmh/phonology.py": {
        "MiddleHighGermanTranscription.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanTranscription.transcribe": {
            "name": "transcribe",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "MiddleHighGermanTranscription.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanTranscription.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "MiddleHighGermanSyllabifier.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "MiddleHighGermanSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanSyllabifier.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/gmh/syllabifier.py": {
        "Word.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Word.phonetic_indexing": {
            "name": "phonetic_indexing",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Word._soundex": {
            "name": "_soundex",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/gmh/transcription.py": {
        "Transcriber.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transcriber.transcribe": {
            "name": "transcribe",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "punctuation": [],
                "with_squared_brackets": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/gmh/__init__.py": {},
    "cltk-master/src/cltk/phonology/got/phonology.py": {
        "GothicTranscription.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GothicTranscription.transcribe": {
            "name": "transcribe",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "GothicTranscription.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GothicTranscription.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/got/transcription.py": {},
    "cltk-master/src/cltk/phonology/got/__init__.py": {},
    "cltk-master/src/cltk/phonology/grc/phonology.py": {
        "GreekTranscription.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekTranscription.transcribe": {
            "name": "transcribe",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "GreekTranscription.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekTranscription.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "GreekSyllabifier.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "GreekSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekSyllabifier.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/grc/transcription.py": {
        "Phone.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "ipa_ch": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "ipa_str": [],
                "root": []
            }
        },
        "Word._refresh": {
            "name": "_refresh",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._r_devoice": {
            "name": "_r_devoice",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._s_voice_assimilation": {
            "name": "_s_voice_assimilation",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._nasal_place_assimilation": {
            "name": "_nasal_place_assimilation",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._g_nasality_assimilation": {
            "name": "_g_nasality_assimilation",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._alternate": {
            "name": "_alternate",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.syllabify": {
            "name": "syllabify",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._print_ipa": {
            "name": "_print_ipa",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "syllabify": []
            }
        },
        "Transcriber.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "reconstruction": []
            }
        },
        "Transcriber._parse_diacritics": {
            "name": "_parse_diacritics",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "Transcriber._prep_text": {
            "name": "_prep_text",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Transcriber.transcribe": {
            "name": "transcribe",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "accentuate": [],
                "syllabify": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/grc/__init__.py": {},
    "cltk-master/src/cltk/phonology/lat/phonology.py": {
        "LatinTranscription.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinTranscription.transcribe": {
            "name": "transcribe",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "LatinTranscription.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinTranscription.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "LatinSyllabifier.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "LatinSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinSyllabifier.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/lat/syllabifier.py": {
        "_is_consonant": {
            "name": "_is_consonant",
            "location": 111,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_vowel": {
            "name": "_is_vowel",
            "location": 116,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_diphthong": {
            "name": "_is_diphthong",
            "location": 121,
            "return": [],
            "arguments": {
                "char_1": [],
                "char_2": []
            }
        },
        "_is_mute_consonant_or_f": {
            "name": "_is_mute_consonant_or_f",
            "location": 126,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "_is_liquid_consonant": {
            "name": "_is_liquid_consonant",
            "location": 131,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "syllabify": {
            "name": "syllabify",
            "location": 136,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/lat/transcription.py": {
        "Phone.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "ipa_ch": []
            }
        },
        "Phone.__repr__": {
            "name": "__repr__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "ipa_str": [],
                "root": []
            }
        },
        "Word._refresh": {
            "name": "_refresh",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._j_maker": {
            "name": "_j_maker",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._w_maker": {
            "name": "_w_maker",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._wj_block": {
            "name": "_wj_block",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._uj_diph_maker": {
            "name": "_uj_diph_maker",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._b_devoice": {
            "name": "_b_devoice",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._final_m_drop": {
            "name": "_final_m_drop",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._n_place_assimilation": {
            "name": "_n_place_assimilation",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._g_n_nasality_assimilation": {
            "name": "_g_n_nasality_assimilation",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._ns_nf_lengthening": {
            "name": "_ns_nf_lengthening",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._l_darken": {
            "name": "_l_darken",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._j_z_doubling": {
            "name": "_j_z_doubling",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._long_vowel_catcher": {
            "name": "_long_vowel_catcher",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._e_i_closer_before_vowel": {
            "name": "_e_i_closer_before_vowel",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._intervocalic_j": {
            "name": "_intervocalic_j",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._alternate": {
            "name": "_alternate",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word.syllabify": {
            "name": "syllabify",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Word._print_ipa": {
            "name": "_print_ipa",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "syllabify": [],
                "accentuate": []
            }
        },
        "Transcriber.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "reconstruction": []
            }
        },
        "Transcriber._parse_diacritics": {
            "name": "_parse_diacritics",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "Transcriber._prep_text": {
            "name": "_prep_text",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Transcriber.transcribe": {
            "name": "transcribe",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "macronize": [],
                "syllabify": [],
                "accentuate": [],
                "with_squared_brackets": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/lat/__init__.py": {},
    "cltk-master/src/cltk/phonology/non/orthophonology.py": {
        "OldNorsePhonologicalTranscriber.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorsePhonologicalTranscriber.transcribe": {
            "name": "transcribe",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldNorsePhonologicalTranscriber.__repr__": {
            "name": "__repr__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorsePhonologicalTranscriber.__call__": {
            "name": "__call__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/non/phonology.py": {
        "OldNorseTranscription.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseTranscription.transcribe": {
            "name": "transcribe",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldNorseTranscription.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseTranscription.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldNorseSyllabifier.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseSyllabifier.syllabify": {
            "name": "syllabify",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldNorseSyllabifier.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseSyllabifier.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/non/syllabifier.py": {},
    "cltk-master/src/cltk/phonology/non/transcription.py": {
        "measure_old_norse_syllable": {
            "name": "measure_old_norse_syllable",
            "location": 322,
            "return": [],
            "arguments": {
                "syllable": []
            }
        },
        "normalize_for_syllabifier": {
            "name": "normalize_for_syllabifier",
            "location": 388,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "OldNorsePhonology.phonetic_i_umlaut": {
            "name": "phonetic_i_umlaut",
            "location": 33,
            "return": [],
            "arguments": {
                "sound": []
            }
        },
        "OldNorsePhonology.orthographic_i_umlaut": {
            "name": "orthographic_i_umlaut",
            "location": 62,
            "return": [],
            "arguments": {
                "sound": []
            }
        },
        "OldNorsePhonology.phonetic_u_umlaut": {
            "name": "phonetic_u_umlaut",
            "location": 78,
            "return": [],
            "arguments": {
                "sound": []
            }
        },
        "OldNorsePhonology.orthographic_u_umlaut": {
            "name": "orthographic_u_umlaut",
            "location": 104,
            "return": [],
            "arguments": {
                "sound": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/non/utils.py": {
        "AutoName._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 13,
            "return": [],
            "arguments": {
                "name": [],
                "a": [],
                "b": [],
                "d": []
            }
        },
        "AbstractConsonant.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "place": [],
                "manner": [],
                "voiced": [],
                "ipar": [],
                "geminate": []
            }
        },
        "AbstractConsonant.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consonant.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "place": [],
                "manner": [],
                "voiced": [],
                "ipar": [],
                "geminate": []
            }
        },
        "Consonant.match": {
            "name": "match",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "abstract_consonant": []
            }
        },
        "Consonant.match_list": {
            "name": "match_list",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "abstract_consonant_list": []
            }
        },
        "Consonant.lengthen": {
            "name": "lengthen",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consonant.to_abstract": {
            "name": "to_abstract",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consonant.__add__": {
            "name": "__add__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Consonant.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consonant.is_equal": {
            "name": "is_equal",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "other_consonnant": []
            }
        },
        "AbstractVowel.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "height": [],
                "backness": [],
                "rounded": [],
                "length": [],
                "ipar": []
            }
        },
        "AbstractVowel.__str__": {
            "name": "__str__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "height": [],
                "backness": [],
                "rounded": [],
                "length": [],
                "ipar": []
            }
        },
        "Vowel.lengthen": {
            "name": "lengthen",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.match": {
            "name": "match",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "abstract_vowel": []
            }
        },
        "Vowel.match_list": {
            "name": "match_list",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "abstract_vowel_list": []
            }
        },
        "Vowel.to_abstract": {
            "name": "to_abstract",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.i_umlaut": {
            "name": "i_umlaut",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.u_umlaut": {
            "name": "u_umlaut",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.__str__": {
            "name": "__str__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vowel.is_equal": {
            "name": "is_equal",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "other_sound": []
            }
        },
        "Vowel.__add__": {
            "name": "__add__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPosition.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "before": [],
                "after": []
            }
        },
        "AbstractPosition.__eq__": {
            "name": "__eq__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPosition.same_place": {
            "name": "same_place",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractPosition.__add__": {
            "name": "__add__",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Position.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "before": [],
                "after": []
            }
        },
        "Position.real_sound_match_abstract_sound": {
            "name": "real_sound_match_abstract_sound",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "abstract_pos": []
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "temp_sound": [],
                "estimated_sound": []
            }
        },
        "Rule.can_apply": {
            "name": "can_apply",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "current_position": []
            }
        },
        "Rule.ipa_to_regular_expression": {
            "name": "ipa_to_regular_expression",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "phonology": []
            }
        },
        "Rule.from_regular_expression": {
            "name": "from_regular_expression",
            "location": 484,
            "return": [],
            "arguments": {
                "re_rule": [],
                "estimated_sound": [],
                "ipa_class": []
            }
        },
        "Rule.__add__": {
            "name": "__add__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transcriber.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "diphthongs_ipa": [],
                "diphthongs_ipa_class": [],
                "ipa_class": [],
                "rules": []
            }
        },
        "Transcriber.word_to_phonetic_representation": {
            "name": "word_to_phonetic_representation",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "with_squared_brackets": []
            }
        },
        "Transcriber.text_to_phonetic_representation": {
            "name": "text_to_phonetic_representation",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "with_squared_brackets": []
            }
        },
        "Transcriber.text_to_phonemes": {
            "name": "text_to_phonemes",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Transcriber.phonemes_to_phonetic_representation": {
            "name": "phonemes_to_phonetic_representation",
            "location": 617,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": []
            }
        },
        "BasePhonologicalRule.__init__": {
            "name": "__init__",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "action": []
            }
        },
        "BasePhonologicalRule.perform_action": {
            "name": "perform_action",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "BasePhonologicalRule.__call__": {
            "name": "__call__",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "PhonologicalRule.check_environment": {
            "name": "check_environment",
            "location": 659,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "WordInitialPhonologicalRule.check_environment": {
            "name": "check_environment",
            "location": 666,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "WordInitialPhonologicalRule.perform_action": {
            "name": "perform_action",
            "location": 673,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "_": []
            }
        },
        "WordFinalPhonologicalRule.check_environment": {
            "name": "check_environment",
            "location": 678,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "pos": []
            }
        },
        "WordFinalPhonologicalRule.perform_action": {
            "name": "perform_action",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "phonemes": [],
                "_": []
            }
        },
        "IPATranscriber.__init__": {
            "name": "__init__",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "digraphs": [],
                "dipthongs": [],
                "alphabet": [],
                "rules": []
            }
        },
        "IPATranscriber.tokenize": {
            "name": "tokenize",
            "location": 698,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "IPATranscriber.transcribe_word": {
            "name": "transcribe_word",
            "location": 703,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "IPATranscriber.transcribe": {
            "name": "transcribe",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/non/__init__.py": {},
    "cltk-master/src/cltk/phonology/non/old_swedish/phonology.py": {
        "OldSwedishTranscription.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldSwedishTranscription.transcribe": {
            "name": "transcribe",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldSwedishTranscription.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldSwedishTranscription.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/phonology/non/old_swedish/transcription.py": {},
    "cltk-master/src/cltk/phonology/non/old_swedish/__init__.py": {},
    "cltk-master/src/cltk/prosody/gmh.py": {
        "Verse.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Verse.to_phonetics": {
            "name": "to_phonetics",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Verse.rhyme_scheme": {
            "name": "rhyme_scheme",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "rhyme_size": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/grc.py": {
        "Scansion.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scansion.scan_text": {
            "name": "scan_text",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "input_string": []
            }
        },
        "Scansion._clean_text": {
            "name": "_clean_text",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Scansion._clean_accents": {
            "name": "_clean_accents",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Scansion._tokenize": {
            "name": "_tokenize",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Scansion._syllable_condenser": {
            "name": "_syllable_condenser",
            "location": 219,
            "return": [],
            "arguments": {
                "words_syllables": []
            }
        },
        "Scansion._long_by_nature": {
            "name": "_long_by_nature",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "syllable": []
            }
        },
        "Scansion._long_by_position": {
            "name": "_long_by_position",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "syllable": [],
                "sentence": []
            }
        },
        "Scansion._scansion": {
            "name": "_scansion",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "sentence_syllables": []
            }
        },
        "Scansion._make_syllables": {
            "name": "_make_syllables",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "sentences_words": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/non.py": {
        "old_norse_normalize": {
            "name": "old_norse_normalize",
            "location": 25,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "ShortLine.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ShortLine.tokenized_text": {
            "name": "tokenized_text",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShortLine.syllabify": {
            "name": "syllabify",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "syllabifier": []
            }
        },
        "ShortLine.to_phonetics": {
            "name": "to_phonetics",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "transcriber": [],
                "with_squared_brackets": []
            }
        },
        "ShortLine.first_sounds": {
            "name": "first_sounds",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShortLine.find_alliterations": {
            "name": "find_alliterations",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "other_short_line": []
            }
        },
        "LongLine.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "LongLine.tokenized_text": {
            "name": "tokenized_text",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongLine.syllabify": {
            "name": "syllabify",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "syllabifier": []
            }
        },
        "LongLine.to_phonetics": {
            "name": "to_phonetics",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "transcriber": [],
                "with_squared_brackets": []
            }
        },
        "LongLine.first_sounds": {
            "name": "first_sounds",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LongLine.find_alliterations": {
            "name": "find_alliterations",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Metre.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Metre.from_short_lines_text": {
            "name": "from_short_lines_text",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Metre.syllabify": {
            "name": "syllabify",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "hierarchy": []
            }
        },
        "Metre.to_phonetics": {
            "name": "to_phonetics",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "with_squared_brackets": []
            }
        },
        "Metre.find_alliteration": {
            "name": "find_alliteration",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnspecifiedStanza.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnspecifiedStanza.from_short_lines_text": {
            "name": "from_short_lines_text",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "UnspecifiedStanza.syllabify": {
            "name": "syllabify",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "hierarchy": []
            }
        },
        "UnspecifiedStanza.to_phonetics": {
            "name": "to_phonetics",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "with_squared_brackets": []
            }
        },
        "UnspecifiedStanza.find_alliteration": {
            "name": "find_alliteration",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fornyrdhislag.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fornyrdhislag.from_short_lines_text": {
            "name": "from_short_lines_text",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Fornyrdhislag.syllabify": {
            "name": "syllabify",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "hierarchy": []
            }
        },
        "Fornyrdhislag.to_phonetics": {
            "name": "to_phonetics",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "with_squared_brackets": []
            }
        },
        "Fornyrdhislag.find_alliteration": {
            "name": "find_alliteration",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ljoodhhaattr.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ljoodhhaattr.from_short_lines_text": {
            "name": "from_short_lines_text",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Ljoodhhaattr.syllabify": {
            "name": "syllabify",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "hierarchy": []
            }
        },
        "Ljoodhhaattr.to_phonetics": {
            "name": "to_phonetics",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "with_squared_brackets": []
            }
        },
        "Ljoodhhaattr.find_alliteration": {
            "name": "find_alliteration",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetreManager.is_fornyrdhislag": {
            "name": "is_fornyrdhislag",
            "location": 603,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "MetreManager.is_ljoodhhaattr": {
            "name": "is_ljoodhhaattr",
            "location": 621,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "MetreManager.load_poem_from_paragraphs": {
            "name": "load_poem_from_paragraphs",
            "location": 639,
            "return": [],
            "arguments": {
                "paragraphs": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/__init__.py": {},
    "cltk-master/src/cltk/prosody/lat/clausulae_analysis.py": {
        "Clausulae.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rhythms": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Clausulae.clausulae_analysis": {
            "name": "clausulae_analysis",
            "location": 48,
            "return": [
                "str",
                "bool",
                "Type",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "prosody": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/hendecasyllable_scanner.py": {
        "HendecasyllableScanner.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "constants": [],
                "syllabifier": [],
                "optional_tranform": []
            }
        },
        "HendecasyllableScanner.scan": {
            "name": "scan",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "original_line": [],
                "optional_transform": []
            }
        },
        "HendecasyllableScanner.correct_invalid_start": {
            "name": "correct_invalid_start",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "HendecasyllableScanner.correct_antepenult_chain": {
            "name": "correct_antepenult_chain",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/hexameter_scanner.py": {
        "HexameterScanner.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "constants": [],
                "syllabifier": [],
                "optional_transform": []
            }
        },
        "HexameterScanner.scan": {
            "name": "scan",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "original_line": [],
                "optional_transform": [],
                "dactyl_smoothing": []
            }
        },
        "HexameterScanner.correct_invalid_fifth_foot": {
            "name": "correct_invalid_fifth_foot",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "HexameterScanner.invalid_foot_to_spondee": {
            "name": "invalid_foot_to_spondee",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "feet": [],
                "foot": [],
                "idx": []
            }
        },
        "HexameterScanner.correct_dactyl_chain": {
            "name": "correct_dactyl_chain",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "HexameterScanner.correct_inverted_amphibrachs": {
            "name": "correct_inverted_amphibrachs",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/macronizer.py": {
        "Macronizer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "tagger": []
            }
        },
        "Macronizer._setup_macrons_data": {
            "name": "_setup_macrons_data",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Macronizer._retrieve_tag": {
            "name": "_retrieve_tag",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Macronizer._retrieve_morpheus_entry": {
            "name": "_retrieve_morpheus_entry",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Macronizer._macronize_word": {
            "name": "_macronize_word",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Macronizer.macronize_tags": {
            "name": "macronize_tags",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Macronizer.macronize_text": {
            "name": "macronize_text",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/metrical_validator.py": {
        "MetricalValidator.is_valid_hexameter": {
            "name": "is_valid_hexameter",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scanned_line": [
                    "str"
                ]
            }
        },
        "MetricalValidator.is_valid_hendecasyllables": {
            "name": "is_valid_hendecasyllables",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scanned_line": [
                    "str"
                ]
            }
        },
        "MetricalValidator.is_valid_pentameter": {
            "name": "is_valid_pentameter",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scanned_line": [
                    "str"
                ]
            }
        },
        "MetricalValidator.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "constants": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetricalValidator.hexameter_feet": {
            "name": "hexameter_feet",
            "location": 76,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "scansion": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MetricalValidator.hexameter_known_stresses": {
            "name": "hexameter_known_stresses",
            "location": 151,
            "return": [
                "str",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {}
        },
        "MetricalValidator.hexameter_possible_unstresses": {
            "name": "hexameter_possible_unstresses",
            "location": 159,
            "return": [
                "List[str]",
                "str",
                "List[T]",
                "List[Dict]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "MetricalValidator.closest_hexameter_patterns": {
            "name": "closest_hexameter_patterns",
            "location": 167,
            "return": [
                "dict",
                "str",
                "IO[str]",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "scansion": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "MetricalValidator.pentameter_possible_stresses": {
            "name": "pentameter_possible_stresses",
            "location": 179,
            "return": [
                "str",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {}
        },
        "MetricalValidator.closest_pentameter_patterns": {
            "name": "closest_pentameter_patterns",
            "location": 187,
            "return": [
                "dict",
                "str",
                "IO[str]",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "scansion": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "MetricalValidator.closest_hendecasyllable_patterns": {
            "name": "closest_hendecasyllable_patterns",
            "location": 198,
            "return": [
                "dict",
                "str",
                "IO[str]",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "scansion": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "MetricalValidator._closest_patterns": {
            "name": "_closest_patterns",
            "location": 209,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "patterns": [
                    "list",
                    "Set[str]",
                    "str",
                    "Iterable",
                    "List[List]"
                ],
                "scansion": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MetricalValidator._build_hexameter_template": {
            "name": "_build_hexameter_template",
            "location": 230,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "stress_positions": [
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MetricalValidator._build_hendecasyllable_templates": {
            "name": "_build_hendecasyllable_templates",
            "location": 251,
            "return": [
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricalValidator._build_pentameter_templates": {
            "name": "_build_pentameter_templates",
            "location": 276,
            "return": [
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/pentameter_scanner.py": {
        "PentameterScanner.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "constants": [],
                "syllabifier": [],
                "optional_transform": []
            }
        },
        "PentameterScanner.scan": {
            "name": "scan",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "original_line": [],
                "optional_transform": []
            }
        },
        "PentameterScanner.make_spondaic": {
            "name": "make_spondaic",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "PentameterScanner.make_dactyls": {
            "name": "make_dactyls",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "PentameterScanner.correct_penultimate_dactyl_chain": {
            "name": "correct_penultimate_dactyl_chain",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/scanner.py": {
        "Scansion.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "punctuation": [],
                "clausula_length": [],
                "elide": []
            }
        },
        "Scansion._tokenize_syllables": {
            "name": "_tokenize_syllables",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Scansion._tokenize_words": {
            "name": "_tokenize_words",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "Scansion.tokenize": {
            "name": "tokenize",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Scansion.scan_text": {
            "name": "scan_text",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/scansion_constants.py": {
        "ScansionConstants.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "unstressed": [],
                "stressed": [],
                "optional_terminal_ending": [],
                "separator": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/scansion_formatter.py": {
        "ScansionFormatter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "constants": []
            }
        },
        "ScansionFormatter.hexameter": {
            "name": "hexameter",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "ScansionFormatter.merge_line_scansion": {
            "name": "merge_line_scansion",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "scansion": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/string_utils.py": {
        "remove_punctuation_dict": {
            "name": "remove_punctuation_dict",
            "location": 15,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "punctuation_for_spaces_dict": {
            "name": "punctuation_for_spaces_dict",
            "location": 33,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "Optional[List[str]]",
                "Dict[int, str]"
            ],
            "arguments": {}
        },
        "differences": {
            "name": "differences",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scansion": [
                    "int",
                    "bool",
                    "T"
                ],
                "candidate": [
                    "int",
                    "bool",
                    "T"
                ]
            }
        },
        "mark_list": {
            "name": "mark_list",
            "location": 71,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list",
                    "List[str]",
                    "tuple",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "space_list": {
            "name": "space_list",
            "location": 88,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list",
                    "List[str]",
                    "tuple",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 105,
            "return": [
                "int",
                "bool",
                "List[str]",
                "List[Tuple[str, Any]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "list_of_lists": [
                    "List[Union[int, float]]",
                    "Sequence[T]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "to_syllables_with_trailing_spaces": {
            "name": "to_syllables_with_trailing_spaces",
            "location": 118,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ],
                "syllables": [
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "join_syllables_spaces": {
            "name": "join_syllables_spaces",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "syllables": [
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "List[List[str]]"
                ],
                "spaces": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "starts_with_qu": {
            "name": "starts_with_qu",
            "location": 182,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "stress_positions": {
            "name": "stress_positions",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stress": [
                    "int",
                    "Callable",
                    "str"
                ],
                "scansion": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "merge_elisions": {
            "name": "merge_elisions",
            "location": 216,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "elided": [
                    "int",
                    "Set[str]",
                    "str",
                    "T",
                    "Iterable[str]",
                    "Union[int, slice]"
                ]
            }
        },
        "move_consonant_right": {
            "name": "move_consonant_right",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "letters": [
                    "int",
                    "Callable",
                    "str"
                ],
                "positions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "move_consonant_left": {
            "name": "move_consonant_left",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "letters": [
                    "int",
                    "Callable",
                    "str"
                ],
                "positions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "merge_next": {
            "name": "merge_next",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "letters": [
                    "int",
                    "Callable",
                    "str"
                ],
                "positions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "remove_blanks": {
            "name": "remove_blanks",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "letters": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "split_on": {
            "name": "split_on",
            "location": 309,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "List[str]"
                ],
                "section": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "remove_blank_spaces": {
            "name": "remove_blank_spaces",
            "location": 326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "syllables": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "overwrite": {
            "name": "overwrite",
            "location": 345,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "char_list": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[Iterable[int]]"
                ],
                "regexp": [
                    "str",
                    "Optional[str]"
                ],
                "quality": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "offset": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "overwrite_dipthong": {
            "name": "overwrite_dipthong",
            "location": 371,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "char_list": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "regexp": [
                    "str",
                    "Optional[str]"
                ],
                "quality": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_unstresses": {
            "name": "get_unstresses",
            "location": 395,
            "return": [
                "List[str]",
                "str",
                "list"
            ],
            "arguments": {
                "stresses": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]"
                ],
                "count": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/syllabifier.py": {
        "Syllabifier.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "constants": []
            }
        },
        "Syllabifier.syllabify": {
            "name": "syllabify",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "Syllabifier._setup": {
            "name": "_setup",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Syllabifier.convert_consonantal_i": {
            "name": "convert_consonantal_i",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Syllabifier._process": {
            "name": "_process",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Syllabifier._contains_consonants": {
            "name": "_contains_consonants",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "letter_group": []
            }
        },
        "Syllabifier._contains_vowels": {
            "name": "_contains_vowels",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "letter_group": []
            }
        },
        "Syllabifier._ends_with_vowel": {
            "name": "_ends_with_vowel",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "letter_group": []
            }
        },
        "Syllabifier._starts_with_vowel": {
            "name": "_starts_with_vowel",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "letter_group": []
            }
        },
        "Syllabifier._starting_consonants_only": {
            "name": "_starting_consonants_only",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "letters": []
            }
        },
        "Syllabifier._ending_consonants_only": {
            "name": "_ending_consonants_only",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "letters": []
            }
        },
        "Syllabifier._find_solo_consonant": {
            "name": "_find_solo_consonant",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "letters": []
            }
        },
        "Syllabifier._find_consonant_cluster": {
            "name": "_find_consonant_cluster",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "letters": []
            }
        },
        "Syllabifier._move_consonant": {
            "name": "_move_consonant",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "letters": [],
                "positions": []
            }
        },
        "Syllabifier.get_syllable_count": {
            "name": "get_syllable_count",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "syllables": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/verse.py": {
        "Verse.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "original": [],
                "scansion": [],
                "meter": [],
                "valid": [],
                "syllable_count": [],
                "accented": [],
                "scansion_notes": [],
                "syllables": []
            }
        },
        "Verse.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Verse.__iter__": {
            "name": "__iter__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Verse.__hash__": {
            "name": "__hash__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Verse.__eq__": {
            "name": "__eq__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Verse.__bool__": {
            "name": "__bool__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/verse_scanner.py": {
        "VerseScanner.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "constants": [],
                "syllabifier": []
            }
        },
        "VerseScanner.transform_i_to_j": {
            "name": "transform_i_to_j",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "VerseScanner.transform_i_to_j_optional": {
            "name": "transform_i_to_j_optional",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "VerseScanner.accent_by_position": {
            "name": "accent_by_position",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "verse_line": []
            }
        },
        "VerseScanner.elide_all": {
            "name": "elide_all",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "VerseScanner.calc_offset": {
            "name": "calc_offset",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "syllables_spaces": []
            }
        },
        "VerseScanner.produce_scansion": {
            "name": "produce_scansion",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "stresses": [],
                "syllables_wspaces": [],
                "offset_map": []
            }
        },
        "VerseScanner.flag_dipthongs": {
            "name": "flag_dipthongs",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "syllables": []
            }
        },
        "VerseScanner.elide": {
            "name": "elide",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "regexp": [],
                "quantity": [],
                "offset": []
            }
        },
        "VerseScanner.correct_invalid_start": {
            "name": "correct_invalid_start",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "VerseScanner.correct_first_two_dactyls": {
            "name": "correct_first_two_dactyls",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "scansion": []
            }
        },
        "VerseScanner.assign_candidate": {
            "name": "assign_candidate",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "verse": [],
                "candidate": []
            }
        }
    },
    "cltk-master/src/cltk/prosody/lat/__init__.py": {},
    "cltk-master/src/cltk/sentence/grc.py": {
        "GreekRegexSentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/sentence/lat.py": {
        "LatinPunktSentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strict": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "cltk-master/src/cltk/sentence/non.py": {
        "OldNorseRegexSentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/sentence/processes.py": {
        "SentenceTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceTokenizationProcess.run": {
            "name": "run",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "OldNorseSentenceTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/sentence/san.py": {
        "SanskritRegexSentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/sentence/sentence.py": {
        "SentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SentenceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "model": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "SentenceTokenizer._get_models_path": {
            "name": "_get_models_path",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "azure.datalake.store.core.AzureDLFileSystem",
                    "Callable"
                ]
            }
        },
        "PunktSentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "Optional[\"CustomerReference\"]",
                    "Iterable",
                    "Union[str, Callable]",
                    "int"
                ],
                "lang_vars": [
                    "Optional[\"TreeNode\"]",
                    "str",
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "RegexSentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "bytes"
                ],
                "sent_end_chars": [
                    "str",
                    "int"
                ]
            }
        },
        "RegexSentenceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "model": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/sentence/__init__.py": {},
    "cltk-master/src/cltk/stem/akk.py": {
        "stem": {
            "name": "stem",
            "location": 23,
            "return": [],
            "arguments": {
                "noun": [],
                "gender": [],
                "mimation": []
            }
        }
    },
    "cltk-master/src/cltk/stem/enm.py": {
        "stem": {
            "name": "stem",
            "location": 193,
            "return": [],
            "arguments": {
                "word": [],
                "exception_list": [],
                "strip_pref": [],
                "strip_suf": []
            }
        }
    },
    "cltk-master/src/cltk/stem/fro.py": {
        "_matchremove_noun_endings": {
            "name": "_matchremove_noun_endings",
            "location": 42,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "_matchremove_verb_endings": {
            "name": "_matchremove_verb_endings",
            "location": 82,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "stem": {
            "name": "stem",
            "location": 205,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/stem/gmh.py": {
        "_remove_umlaut": {
            "name": "_remove_umlaut",
            "location": 39,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "_stem_helper": {
            "name": "_stem_helper",
            "location": 43,
            "return": [],
            "arguments": {
                "word": [],
                "rem_umlaut": []
            }
        },
        "stem": {
            "name": "stem",
            "location": 100,
            "return": [],
            "arguments": {
                "word": [],
                "exceptions": [],
                "rem_umlauts": []
            }
        }
    },
    "cltk-master/src/cltk/stem/lat.py": {
        "_checkremove_que": {
            "name": "_checkremove_que",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Sequence[int]",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "_matchremove_simple_endings": {
            "name": "_matchremove_simple_endings",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "_matchremove_verb_endings": {
            "name": "_matchremove_verb_endings",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Union[str, dict]",
                    "Optional[str]"
                ]
            }
        },
        "stem": {
            "name": "stem",
            "location": 181,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/stem/processes.py": {
        "StemmingProcess.run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "LatinStemmingProcess.algorithm": {
            "name": "algorithm",
            "location": 55,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "MiddleEnglishStemmingProcess.algorithm": {
            "name": "algorithm",
            "location": 78,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "MiddleHighGermanStemmingProcess.algorithm": {
            "name": "algorithm",
            "location": 101,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "OldFrenchStemmingProcess.algorithm": {
            "name": "algorithm",
            "location": 124,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/stem/__init__.py": {},
    "cltk-master/src/cltk/stops/akk.py": {},
    "cltk-master/src/cltk/stops/ang.py": {},
    "cltk-master/src/cltk/stops/arb.py": {},
    "cltk-master/src/cltk/stops/cop.py": {},
    "cltk-master/src/cltk/stops/enm.py": {},
    "cltk-master/src/cltk/stops/fro.py": {},
    "cltk-master/src/cltk/stops/gmh.py": {},
    "cltk-master/src/cltk/stops/grc.py": {},
    "cltk-master/src/cltk/stops/hin.py": {},
    "cltk-master/src/cltk/stops/lat.py": {},
    "cltk-master/src/cltk/stops/non.py": {},
    "cltk-master/src/cltk/stops/omr.py": {},
    "cltk-master/src/cltk/stops/pan.py": {},
    "cltk-master/src/cltk/stops/processes.py": {
        "StopsProcess.algorithm": {
            "name": "algorithm",
            "location": 29,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopsProcess.run": {
            "name": "run",
            "location": 32,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "cltk.core.data_types.Doc",
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/stops/san.py": {},
    "cltk-master/src/cltk/stops/words.py": {
        "Stops.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iso_code": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Stops.get_stopwords": {
            "name": "get_stopwords",
            "location": 68,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stops.remove_stopwords": {
            "name": "remove_stopwords",
            "location": 73,
            "return": [
                "List[str]",
                "List[Dict[str, Any]]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [],
                "extra_stops": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.Item"
                ]
            }
        }
    },
    "cltk-master/src/cltk/stops/__init__.py": {},
    "cltk-master/src/cltk/tag/ner.py": {
        "_check_latest_data": {
            "name": "_check_latest_data",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "lang": [
                    "dict"
                ]
            }
        },
        "tag_ner": {
            "name": "tag_ner",
            "location": 83,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "lang": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "input_text": [
                    "str",
                    "Type",
                    "Type[T]",
                    "dict",
                    "bool",
                    "int"
                ],
                "output_type": [
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "NamedEntityReplacer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedEntityReplacer._load_necessary_data": {
            "name": "_load_necessary_data",
            "location": 31,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedEntityReplacer.tag_ner_fr": {
            "name": "tag_ner_fr",
            "location": 45,
            "return": [
                "str",
                "Set[str]",
                "bytes",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_text": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "output_type": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tag/pos.py": {
        "POSTag.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "POSTag._setup_language_variables": {
            "name": "_setup_language_variables",
            "location": 60,
            "return": [
                "List[Tuple[int]]",
                "List[T]",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[List[int], int]"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "str",
                    "List[str]",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]"
                ]
            }
        },
        "POSTag._load_model": {
            "name": "_load_model",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "POSTag.tag_unigram": {
            "name": "tag_unigram",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_bigram": {
            "name": "tag_bigram",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_trigram": {
            "name": "tag_trigram",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_ngram_123_backoff": {
            "name": "tag_ngram_123_backoff",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_ngram_12_backoff": {
            "name": "tag_ngram_12_backoff",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_tnt": {
            "name": "tag_tnt",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_crf": {
            "name": "tag_crf",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        },
        "POSTag.tag_perceptron": {
            "name": "tag_perceptron",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "untagged_string": [
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tag/treebanks.py": {
        "set_path": {
            "name": "set_path",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "dicts": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "List[Dict]"
                ],
                "keys": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "bytes",
                    "set"
                ],
                "v": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_paths": {
            "name": "get_paths",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "src": [
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "parse_treebanks": {
            "name": "parse_treebanks",
            "location": 59,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "st": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tag/__init__.py": {},
    "cltk-master/src/cltk/text/akk.py": {
        "_convert_consonant": {
            "name": "_convert_consonant",
            "location": 20,
            "return": [],
            "arguments": {
                "sign": []
            }
        },
        "_convert_number_to_subscript": {
            "name": "_convert_number_to_subscript",
            "location": 34,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "_get_number_from_sign": {
            "name": "_get_number_from_sign",
            "location": 49,
            "return": [],
            "arguments": {
                "sign": []
            }
        },
        "ATFConverter.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "two_three": []
            }
        },
        "ATFConverter._convert_num": {
            "name": "_convert_num",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "sign": []
            }
        },
        "ATFConverter.process": {
            "name": "process",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        }
    },
    "cltk-master/src/cltk/text/lat.py": {
        "replace_jv": {
            "name": "replace_jv",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/text/non.py": {
        "OldNorsePunctuationRemover.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorsePunctuationRemover.filter": {
            "name": "filter",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "OldNorsePunctuationRemover.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorsePunctuationRemover.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "cltk-master/src/cltk/text/processes.py": {
        "PunctuationRemovalProcess.run": {
            "name": "run",
            "location": 18,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "cltk.core.data_types.Doc",
                    "str"
                ]
            }
        },
        "DefaultPunctuationRemovalProcess.algorithm": {
            "name": "algorithm",
            "location": 33,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultPunctuationRemover.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultPunctuationRemover.filter": {
            "name": "filter",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Optional[List[Any]]",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "DefaultPunctuationRemover.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultPunctuationRemover.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "static_frame.core.util.UFunc"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "OldNorsePunctuationRemovalProcess.algorithm": {
            "name": "algorithm",
            "location": 61,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/text/__init__.py": {},
    "cltk-master/src/cltk/tokenizers/akk.py": {
        "AkkadianWordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 20,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "AkkadianWordTokenizer.tokenize_sign": {
            "name": "tokenize_sign",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AkkadianWordTokenizer.compute_indices": {
            "name": "compute_indices",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "tokens": [
                    "str",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/arb.py": {
        "ArabicWordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/enm.py": {
        "MiddleEnglishWordTokenizer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/fro.py": {
        "OldFrenchWordTokenizer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/gmh.py": {
        "MiddleHighGermanWordTokenizer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/line.py": {
        "LineTokenizer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LineTokenizer.tokenize": {
            "name": "tokenize",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "untokenized_string": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "include_blanks": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/non.py": {
        "OldNorseWordTokenizer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/processes.py": {
        "TokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenizationProcess.run": {
            "name": "run",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "input_doc": []
            }
        },
        "AkkadianTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArabicTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatinTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleHighGermanTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleEnglishTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldFrenchTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleFrenchTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldNorseTokenizationProcess.algorithm": {
            "name": "algorithm",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/utils.py": {
        "SentenceTokenizerTrainer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "bool",
                    "float"
                ],
                "punctuation": [
                    "int",
                    "bool",
                    "float"
                ],
                "strict": [
                    "int",
                    "bool",
                    "float"
                ],
                "strict_punctuation": [
                    "int",
                    "bool",
                    "float"
                ],
                "abbreviations": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SentenceTokenizerTrainer.train_sentence_tokenizer": {
            "name": "train_sentence_tokenizer",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SentenceTokenizerTrainer.pickle_sentence_tokenizer": {
            "name": "pickle_sentence_tokenizer",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "tokenizer": [
                    "Dict[str, int]",
                    "str",
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/word.py": {
        "WordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "model": []
            }
        },
        "WordTokenizer.tokenize_sign": {
            "name": "tokenize_sign",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "model": []
            }
        },
        "WordTokenizer.compute_indices": {
            "name": "compute_indices",
            "location": 45,
            "return": [],
            "arguments": {
                "text": [],
                "tokens": []
            }
        },
        "PunktWordTokenizer.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "sent_tokenizer": []
            }
        },
        "PunktWordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "RegexWordTokenizer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "patterns": []
            }
        },
        "RegexWordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "CLTKTreebankWordTokenizer.compute_indices": {
            "name": "compute_indices",
            "location": 108,
            "return": [],
            "arguments": {
                "text": [],
                "tokens": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/__init__.py": {},
    "cltk-master/src/cltk/tokenizers/lat/lat.py": {
        "LatinWordTokenizer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LatinWordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "replacements": [
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "enclitics_exceptions": [
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Iterable[Tuple[str, str, str]]"
                ],
                "enclitics": [
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "LatinWordTokenizer.compute_indices": {
            "name": "compute_indices",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]"
                ],
                "tokens": [
                    "str",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        },
        "LatinWordTokenizer.tokenize.matchcase": {
            "name": "matchcase",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LatinWordTokenizer.tokenize.matchcase.replace": {
            "name": "replace",
            "location": 92,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "matching": [
                    "Match",
                    "str",
                    "Match[str]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/lat/params.py": {},
    "cltk-master/src/cltk/tokenizers/lat/utils.py": {
        "LatinSentenceTokenizerTrainer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "strict": []
            }
        }
    },
    "cltk-master/src/cltk/tokenizers/lat/__init__.py": {},
    "cltk-master/src/cltk/utils/feature_extraction.py": {
        "cltk_doc_to_features_table": {
            "name": "cltk_doc_to_features_table",
            "location": 13,
            "return": [],
            "arguments": {
                "cltk_doc": []
            }
        }
    },
    "cltk-master/src/cltk/utils/file_operations.py": {
        "make_cltk_path": {
            "name": "make_cltk_path",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "open_pickle": {
            "name": "open_pickle",
            "location": 38,
            "return": [
                "bytes",
                "str",
                "Callable[[str], T]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "md5": {
            "name": "md5",
            "location": 65,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/utils/utils.py": {
        "file_exists": {
            "name": "file_exists",
            "location": 29,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "is_dir": [
                    "bool",
                    "str"
                ]
            }
        },
        "reverse_dict": {
            "name": "reverse_dict",
            "location": 45,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]",
                "Callable",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "input_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, dict]"
                ],
                "ignore_keys": [
                    "Optional[List[str]]",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "Dict[str, Set[str]]",
                    "list",
                    "dict"
                ]
            }
        },
        "suppress_stdout": {
            "name": "suppress_stdout",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_cltk_data_dir": {
            "name": "get_cltk_data_dir",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "query_yes_no": {
            "name": "query_yes_no",
            "location": 161,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "question": [
                    "str"
                ],
                "default": [
                    "Union[str, None]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "mk_dirs_for_file": {
            "name": "mk_dirs_for_file",
            "location": 198,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "get_file_with_progress_bar": {
            "name": "get_file_with_progress_bar",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "model_url": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "CLTKEnumMeta.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "CLTKEnum.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLTKEnum.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cltk-master/src/cltk/utils/__init__.py": {},
    "cltk-master/src/cltk/wordnet/processes.py": {
        "WordNetProcess.algorithm": {
            "name": "algorithm",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordNetProcess.run": {
            "name": "run",
            "location": 36,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_doc": [
                    "cltk.core.data_types.Doc",
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/wordnet/wordnet.py": {
        "_WordNetObject.antonyms": {
            "name": "antonyms",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.hypernyms": {
            "name": "hypernyms",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject._hypernyms": {
            "name": "_hypernyms",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.hyponyms": {
            "name": "hyponyms",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.member_holonyms": {
            "name": "member_holonyms",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.substance_holonyms": {
            "name": "substance_holonyms",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.part_holonyms": {
            "name": "part_holonyms",
            "location": 168,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.member_meronyms": {
            "name": "member_meronyms",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.substance_meronyms": {
            "name": "substance_meronyms",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.part_meronyms": {
            "name": "part_meronyms",
            "location": 179,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.attributes": {
            "name": "attributes",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.entailments": {
            "name": "entailments",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.causes": {
            "name": "causes",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.also_sees": {
            "name": "also_sees",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.verb_groups": {
            "name": "verb_groups",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.similar_tos": {
            "name": "similar_tos",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WordNetObject.nearest": {
            "name": "nearest",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wordnet_corpus_reader": [
                    "int",
                    "bool",
                    "float"
                ],
                "lemma": [
                    "int",
                    "bool",
                    "float"
                ],
                "pos": [
                    "int",
                    "bool",
                    "float"
                ],
                "morpho": [
                    "int",
                    "bool",
                    "float"
                ],
                "uri": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Lemma.uri": {
            "name": "uri",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.lemma": {
            "name": "lemma",
            "location": 290,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.pos": {
            "name": "pos",
            "location": 300,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.morpho": {
            "name": "morpho",
            "location": 310,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma._related": {
            "name": "_related",
            "location": 321,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma._synsets": {
            "name": "_synsets",
            "location": 346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.synsets": {
            "name": "synsets",
            "location": 371,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.literal": {
            "name": "literal",
            "location": 385,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.metonymic": {
            "name": "metonymic",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.metaphoric": {
            "name": "metaphoric",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.related": {
            "name": "related",
            "location": 445,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "relation_symbol": [
                    "bool",
                    "Tuple[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Lemma.derivationally_related_forms": {
            "name": "derivationally_related_forms",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.pertainyms": {
            "name": "pertainyms",
            "location": 493,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.participle": {
            "name": "participle",
            "location": 506,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.composed_of": {
            "name": "composed_of",
            "location": 509,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.composes": {
            "name": "composes",
            "location": 519,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__repr__": {
            "name": "__repr__",
            "location": 529,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__hash__": {
            "name": "__hash__",
            "location": 534,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "deoplete.util.UserContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemma.__eq__": {
            "name": "__eq__",
            "location": 537,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Lemma.__ne__": {
            "name": "__ne__",
            "location": 545,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Lemma.__lt__": {
            "name": "__lt__",
            "location": 548,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Semfield.__init__": {
            "name": "__init__",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wordnet_corpus_reader": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Dict[Tuple[str, str], int]",
                    "List[List[str]]"
                ],
                "code": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Dict[Tuple[str, str], int]",
                    "List[List[str]]"
                ],
                "english": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Dict[Tuple[str, str], int]",
                    "List[List[str]]"
                ]
            }
        },
        "Semfield.code": {
            "name": "code",
            "location": 586,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semfield.english": {
            "name": "english",
            "location": 589,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semfield.synsets": {
            "name": "synsets",
            "location": 604,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semfield.lemmas": {
            "name": "lemmas",
            "location": 636,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semfield.hypers": {
            "name": "hypers",
            "location": 666,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semfield.hypons": {
            "name": "hypons",
            "location": 694,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semfield.__repr__": {
            "name": "__repr__",
            "location": 725,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.__init__": {
            "name": "__init__",
            "location": 791,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wordnet_corpus_reader": [
                    "int",
                    "bool",
                    "float"
                ],
                "language": [
                    "int",
                    "bool",
                    "float"
                ],
                "pos": [
                    "int",
                    "bool",
                    "float"
                ],
                "offset": [
                    "int",
                    "bool",
                    "float"
                ],
                "gloss": [
                    "str",
                    "list"
                ],
                "semfield": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Synset.id": {
            "name": "id",
            "location": 807,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.semfields": {
            "name": "semfields",
            "location": 810,
            "return": [
                "trezor.utils.Writer",
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.sentiment": {
            "name": "sentiment",
            "location": 833,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.positivity": {
            "name": "positivity",
            "location": 854,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.negativity": {
            "name": "negativity",
            "location": 869,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.objectivity": {
            "name": "objectivity",
            "location": 884,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.language": {
            "name": "language",
            "location": 899,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.pos": {
            "name": "pos",
            "location": 902,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.offset": {
            "name": "offset",
            "location": 905,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.gloss": {
            "name": "gloss",
            "location": 908,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.examples": {
            "name": "examples",
            "location": 911,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset._needs_root": {
            "name": "_needs_root",
            "location": 930,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.lemmas": {
            "name": "lemmas",
            "location": 933,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.root_hypernyms": {
            "name": "root_hypernyms",
            "location": 973,
            "return": [
                "str",
                "bool",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.max_depth": {
            "name": "max_depth",
            "location": 996,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.min_depth": {
            "name": "min_depth",
            "location": 1015,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.closure": {
            "name": "closure",
            "location": 1032,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "int",
                    "Callable",
                    "str"
                ],
                "depth": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Synset.hypernym_paths": {
            "name": "hypernym_paths",
            "location": 1052,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.common_hypernyms": {
            "name": "common_hypernyms",
            "location": 1075,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "list",
                "float",
                "Union[List[float], List[int]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Synset.lowest_common_hypernyms": {
            "name": "lowest_common_hypernyms",
            "location": 1103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "bool",
                    "Iterable[T]",
                    "Optional[List[int]]"
                ],
                "simulate_root": [
                    "List[int]",
                    "Sequence[str]"
                ],
                "use_min_depth": [
                    "List[int]",
                    "Sequence[str]"
                ]
            }
        },
        "Synset.hypernym_distances": {
            "name": "hypernym_distances",
            "location": 1154,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "distance": [
                    "Optional[Union[str, Any]]",
                    "int",
                    "tuple",
                    "[[]]"
                ],
                "simulate_root": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "IO",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Synset._shortest_hypernym_paths": {
            "name": "_shortest_hypernym_paths",
            "location": 1181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "simulate_root": [
                    "bool",
                    "List[Type]"
                ]
            }
        },
        "Synset.shortest_path_distance": {
            "name": "shortest_path_distance",
            "location": 1203,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "Optional[str]",
                    "Set[str]"
                ],
                "simulate_root": [
                    "str",
                    "dict"
                ]
            }
        },
        "Synset.tree": {
            "name": "tree",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": [],
                "rel": [
                    "tuple",
                    "list"
                ],
                "depth": [
                    "tuple",
                    "list"
                ],
                "cut_mark": [
                    "tuple",
                    "list"
                ]
            }
        },
        "Synset.path_similarity": {
            "name": "path_similarity",
            "location": 1261,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "list"
                ],
                "simulate_root": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Synset._lcs_ic": {
            "name": "_lcs_ic",
            "location": 1298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Exception]",
                    "Exception",
                    "bool",
                    "List[str]"
                ],
                "icreader": [
                    "cmk.utils.type_defs.HostName",
                    "dict",
                    "bool",
                    "NamedTuple"
                ],
                "verbose": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Synset.lch_similarity": {
            "name": "lch_similarity",
            "location": 1332,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "verbose": [
                    "Callable",
                    "Coroutine[Any, Any, Any]",
                    "int",
                    "bool",
                    "Exception"
                ],
                "simulate_root": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Synset.wup_similarity": {
            "name": "wup_similarity",
            "location": 1378,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "float",
                    "Optional[int]",
                    "str"
                ],
                "verbose": [
                    "Callable",
                    "Coroutine[Any, Any, Any]",
                    "int",
                    "bool",
                    "Exception"
                ],
                "simulate_root": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "Synset.res_similarity": {
            "name": "res_similarity",
            "location": 1454,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type[T]",
                    "str",
                    "int",
                    "TextIO"
                ],
                "icreader": [
                    "Type[T]",
                    "str",
                    "int",
                    "TextIO"
                ],
                "verbose": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "Synset.jcn_similarity": {
            "name": "jcn_similarity",
            "location": 1478,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ],
                "icreader": [],
                "verbose": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Synset.lin_similarity": {
            "name": "lin_similarity",
            "location": 1516,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "icreader": [],
                "verbose": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Synset._iter_hypernym_lists": {
            "name": "_iter_hypernym_lists",
            "location": 1540,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.__repr__": {
            "name": "__repr__",
            "location": 1558,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.related": {
            "name": "related",
            "location": 1563,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "relation_symbol": [
                    "Union[None, str, int]",
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[\"LocalizedString\"]"
                ],
                "sort": [
                    "Optional[List[str]]",
                    "int",
                    "str",
                    "Sequence",
                    "Optional[str]"
                ]
            }
        },
        "Synset._related": {
            "name": "_related",
            "location": 1585,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Synset.__eq__": {
            "name": "__eq__",
            "location": 1598,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Synset.__ne__": {
            "name": "__ne__",
            "location": 1601,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Synset.__lt__": {
            "name": "__lt__",
            "location": 1604,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "float"
                ]
            }
        },
        "Synset.__hash__": {
            "name": "__hash__",
            "location": 1611,
            "return": [
                "str",
                "int",
                "Exception",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordNetCorpusReader.__init__": {
            "name": "__init__",
            "location": 1652,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iso_code": [
                    "int",
                    "Optional[str]"
                ],
                "ignore_errors": [
                    "str",
                    "bool"
                ]
            }
        },
        "WordNetCorpusReader.host": {
            "name": "host",
            "location": 1673,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordNetCorpusReader._compute_max_depth": {
            "name": "_compute_max_depth",
            "location": 1676,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "List[list]",
                    "float"
                ],
                "simulate_root": [
                    "bool",
                    "Dict[str, bool]",
                    "tuple",
                    "str",
                    "int"
                ]
            }
        },
        "WordNetCorpusReader.get_status": {
            "name": "get_status",
            "location": 1690,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordNetCorpusReader.lemma": {
            "name": "lemma",
            "location": 1699,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "List[str]"
                ],
                "pos": [
                    "str",
                    "bool",
                    "Exception",
                    "Optional[int]",
                    "dict"
                ],
                "morpho": [
                    "str",
                    "Exception",
                    "List[str]",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ],
                "return_ambiguous": [
                    "bool",
                    "str"
                ]
            }
        },
        "WordNetCorpusReader.lemma_from_uri": {
            "name": "lemma_from_uri",
            "location": 1763,
            "return": [
                "Set[str]",
                "List[str]",
                "List[Match]",
                "dict",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, float]"
                ]
            }
        },
        "WordNetCorpusReader.semfield": {
            "name": "semfield",
            "location": 1786,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "bytes",
                "Optional[str]",
                "raiden.utils.BlockHash"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ],
                "english": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "WordNetCorpusReader.synset": {
            "name": "synset",
            "location": 1811,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "WordNetCorpusReader.synset_from_pos_and_offset": {
            "name": "synset_from_pos_and_offset",
            "location": 1833,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bytes",
                    "float",
                    "Optional[str]",
                    "Sequence[int]"
                ],
                "offset": [
                    "bytes",
                    "float",
                    "Optional[str]",
                    "Sequence[int]"
                ]
            }
        },
        "WordNetCorpusReader.lemmas": {
            "name": "lemmas",
            "location": 1858,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str",
                    "dict"
                ],
                "pos": [
                    "str",
                    "bool",
                    "dict"
                ],
                "morpho": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "WordNetCorpusReader.lemmas_from_uri": {
            "name": "lemmas_from_uri",
            "location": 1879,
            "return": [
                "List[str]",
                "List[Dict]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, float]"
                ]
            }
        },
        "WordNetCorpusReader.synsets": {
            "name": "synsets",
            "location": 1901,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "WordNetCorpusReader.semfields": {
            "name": "semfields",
            "location": 1934,
            "return": [
                "str",
                "Callable",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "WordNetCorpusReader.lemmatize": {
            "name": "lemmatize",
            "location": 1970,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Optional[bool]",
                    "bytes"
                ],
                "morpho": [
                    "str",
                    "int"
                ]
            }
        },
        "WordNetCorpusReader.translate": {
            "name": "translate",
            "location": 2008,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "int"
                ],
                "form": [
                    "str",
                    "int"
                ],
                "pos": [
                    "Optional[bool]",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordNetICCorpusReader.__init__": {
            "name": "__init__",
            "location": 2048,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iso_code": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "root": [
                    "str"
                ],
                "fileids": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "WordNetICCorpusReader.ic": {
            "name": "ic",
            "location": 2061,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordNetICCorpusReader.create_ic": {
            "name": "create_ic",
            "location": 2067,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iso_code": [
                    "str",
                    "float",
                    "int"
                ],
                "corpus": [
                    "int",
                    "str"
                ],
                "weight_senses_equally": [
                    "str",
                    "docutils.utils.Reporter",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "smoothing": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "WordNetICCorpusReader.write_ic": {
            "name": "write_ic",
            "location": 2122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "corpus_name": [
                    "str"
                ]
            }
        },
        "WordNetICCorpusReader.load_ic": {
            "name": "load_ic",
            "location": 2140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "icfile": [
                    "str"
                ]
            }
        },
        "WordNetICCorpusReader.information_content": {
            "name": "information_content",
            "location": 2177,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "synset": [
                    "int",
                    "float",
                    "Union[Iterable[str], str]",
                    "str"
                ]
            }
        }
    },
    "cltk-master/src/cltk/wordnet/__init__.py": {},
    "cltk-master/tests/test_alphabet.py": {
        "TestSequenceFunctions.test_normalize_grc": {
            "name": "test_normalize_grc",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_corpora.py": {
        "TestSequenceFunctions.setUpClass": {
            "name": "setUpClass",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tlgu_init": {
            "name": "test_tlgu_init",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_dependency.py": {
        "TestDependency.test_dependency_tree": {
            "name": "test_dependency_tree",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_embeddings.py": {
        "TestEmbedding.test_embeddings_fasttext": {
            "name": "test_embeddings_fasttext",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_embeddings_word2vec": {
            "name": "test_embeddings_word2vec",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedding.test_embeddings_processes": {
            "name": "test_embeddings_processes",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_lemmatize.py": {
        "TestSequenceFunctions.test_dict_lemmatizer": {
            "name": "test_dict_lemmatizer",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_unigram_lemmatizer": {
            "name": "test_unigram_lemmatizer",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_regex_lemmatizer": {
            "name": "test_regex_lemmatizer",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_backoff_latin_lemmatizer": {
            "name": "test_backoff_latin_lemmatizer",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_backoff_latin_lemmatizer_verbose": {
            "name": "test_backoff_latin_lemmatizer_verbose",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_backoff_latin_lemmatizer_evaluate": {
            "name": "test_backoff_latin_lemmatizer_evaluate",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_main.py": {
        "TestMain._word_assertions": {
            "name": "_word_assertions",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "first_word": [],
                "target": []
            }
        },
        "TestMain.test_main_analyze": {
            "name": "test_main_analyze",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_morphology.py": {
        "TestMorphology.test_collatinus_decline": {
            "name": "test_collatinus_decline",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorphology.test_collatinus_flatten_decline": {
            "name": "test_collatinus_flatten_decline",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorphology.test_collatinus_POS_decline": {
            "name": "test_collatinus_POS_decline",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorphology.test_collatinus_multiple_radicals": {
            "name": "test_collatinus_multiple_radicals",
            "location": 644,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorphology.test_collatinus_decline.sort_result": {
            "name": "sort_result",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestMorphology.test_collatinus_multiple_radicals.test_collatinus_raise": {
            "name": "test_collatinus_raise",
            "location": 660,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMorphology.test_collatinus_multiple_radicals.test_collatinus_raise.decline": {
            "name": "decline",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cltk-master/tests/test_phonology.py": {
        "TestSequenceFunctions.setUpClass": {
            "name": "setUpClass",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_refresh": {
            "name": "test_greek_refresh",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_r_devoice": {
            "name": "test_greek_r_devoice",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_s_voice_assimilation": {
            "name": "test_greek_s_voice_assimilation",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_nasal_place_assimilation": {
            "name": "test_greek_nasal_place_assimilation",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_g_nasality_assimilation": {
            "name": "test_greek_g_nasality_assimilation",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_alternate": {
            "name": "test_greek_alternate",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_syllabify": {
            "name": "test_greek_syllabify",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_print_ipa": {
            "name": "test_greek_print_ipa",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_parse_diacritics": {
            "name": "test_greek_parse_diacritics",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_greek_prep_text": {
            "name": "test_greek_prep_text",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_transcriber_probert": {
            "name": "test_transcriber_probert",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_refresh": {
            "name": "test_latin_refresh",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_j_maker": {
            "name": "test_latin_j_maker",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_w_maker": {
            "name": "test_latin_w_maker",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_wj_block": {
            "name": "test_latin_wj_block",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_uj_diph_maker": {
            "name": "test_latin_uj_diph_maker",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_b_devoice": {
            "name": "test_latin_b_devoice",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_final_m_drop": {
            "name": "test_latin_final_m_drop",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_n_place_assimilation": {
            "name": "test_latin_n_place_assimilation",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_g_n_nasality_assimilation": {
            "name": "test_latin_g_n_nasality_assimilation",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_ns_nf_lengthening": {
            "name": "test_latin_ns_nf_lengthening",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_l_darken": {
            "name": "test_latin_l_darken",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_j_z_doubling": {
            "name": "test_latin_j_z_doubling",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_long_vowel_catcher": {
            "name": "test_latin_long_vowel_catcher",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_e_i_closer_before_vowel": {
            "name": "test_latin_e_i_closer_before_vowel",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_intervocalic_j": {
            "name": "test_latin_intervocalic_j",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_alternate": {
            "name": "test_latin_alternate",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_syllabify": {
            "name": "test_latin_syllabify",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_syllabifier": {
            "name": "test_latin_syllabifier",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_print_ipa": {
            "name": "test_latin_print_ipa",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_parse_diacritics": {
            "name": "test_latin_parse_diacritics",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_latin_prep_text": {
            "name": "test_latin_prep_text",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_transcriber_allen_without_macronizer": {
            "name": "test_transcriber_allen_without_macronizer",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_transcriber_allen_with_macronizer": {
            "name": "test_transcriber_allen_with_macronizer",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_arabic_transliterate": {
            "name": "test_arabic_transliterate",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_middle_high_german_transcriber": {
            "name": "test_middle_high_german_transcriber",
            "location": 605,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_middle_high_german_soundex": {
            "name": "test_middle_high_german_soundex",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_middle_high_german_ascii_encoding": {
            "name": "test_middle_high_german_ascii_encoding",
            "location": 628,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_middle_english_syllabify": {
            "name": "test_middle_english_syllabify",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_old_norse_transcriber": {
            "name": "test_old_norse_transcriber",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_gothic_transcriber": {
            "name": "test_gothic_transcriber",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_old_swedish": {
            "name": "test_old_swedish",
            "location": 703,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_utils": {
            "name": "test_utils",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_vowel_lengthening_utils": {
            "name": "test_vowel_lengthening_utils",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_consonant_utils": {
            "name": "test_consonant_utils",
            "location": 734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_add_consonants_utils": {
            "name": "test_add_consonants_utils",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule1_utils": {
            "name": "test_rule1_utils",
            "location": 749,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule2_utils": {
            "name": "test_rule2_utils",
            "location": 764,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule3_utils": {
            "name": "test_rule3_utils",
            "location": 779,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule4_utils": {
            "name": "test_rule4_utils",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule5_utils": {
            "name": "test_rule5_utils",
            "location": 810,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule6_utils": {
            "name": "test_rule6_utils",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule7_utils": {
            "name": "test_rule7_utils",
            "location": 844,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule_conversion1": {
            "name": "test_rule_conversion1",
            "location": 860,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule_conversion2": {
            "name": "test_rule_conversion2",
            "location": 899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule_conversion3": {
            "name": "test_rule_conversion3",
            "location": 932,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_rule_conversion4": {
            "name": "test_rule_conversion4",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllabification_old_norse": {
            "name": "test_syllabification_old_norse",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllabify_phonemes": {
            "name": "test_syllabify_phonemes",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllable1": {
            "name": "test_syllable1",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllable2": {
            "name": "test_syllable2",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllable3": {
            "name": "test_syllable3",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllable4": {
            "name": "test_syllable4",
            "location": 1095,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllable5": {
            "name": "test_syllable5",
            "location": 1098,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_syllable6": {
            "name": "test_syllable6",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_prosody.py": {
        "TestSequenceFunctions.test_retrieve_morpheus_entry": {
            "name": "test_retrieve_morpheus_entry",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_macronize_word": {
            "name": "test_macronize_word",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_macronize_tags": {
            "name": "test_macronize_tags",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_macronize_text": {
            "name": "test_macronize_text",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_sanity_lat_only.py": {
        "TestNLPLatin.test_nlp_latin": {
            "name": "test_nlp_latin",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_sanity_no_internet.py": {
        "TestNoInternet.test_nlp_latin_stops": {
            "name": "test_nlp_latin_stops",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_tag.py": {
        "TestSequenceFunctions.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_unigram_greek": {
            "name": "test_pos_unigram_greek",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_bigram_greek": {
            "name": "test_pos_bigram_greek",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_trigram_greek": {
            "name": "test_pos_trigram_greek",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_ngram123_tagger_greek": {
            "name": "test_pos_ngram123_tagger_greek",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_tnt_tagger_greek": {
            "name": "test_pos_tnt_tagger_greek",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_unigram_latin": {
            "name": "test_pos_unigram_latin",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_bigram_latin": {
            "name": "test_pos_bigram_latin",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_trigram_latin": {
            "name": "test_pos_trigram_latin",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_ngram123_tagger_latin": {
            "name": "test_pos_ngram123_tagger_latin",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_tnt_tagger_latin": {
            "name": "test_pos_tnt_tagger_latin",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_check_latest_latin": {
            "name": "test_check_latest_latin",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_str_list_latin": {
            "name": "test_tag_ner_str_list_latin",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_list_list_latin": {
            "name": "test_tag_ner_list_list_latin",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_list_str_latin": {
            "name": "test_tag_ner_list_str_latin",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_str_str_latin": {
            "name": "test_tag_ner_str_str_latin",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_str_list_greek": {
            "name": "test_tag_ner_str_list_greek",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_list_list_greek": {
            "name": "test_tag_ner_list_list_greek",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_list_str_greek": {
            "name": "test_tag_ner_list_str_greek",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_str_str_greek": {
            "name": "test_tag_ner_str_str_greek",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tag_ner_str_list_french": {
            "name": "test_tag_ner_str_list_french",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_tnt_tagger_old_norse": {
            "name": "test_pos_tnt_tagger_old_norse",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_ngram12_tagger_middle_low_german": {
            "name": "test_pos_ngram12_tagger_middle_low_german",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_unigram_old_english": {
            "name": "test_pos_unigram_old_english",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_bigram_old_english": {
            "name": "test_pos_bigram_old_english",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_trigram_old_english": {
            "name": "test_pos_trigram_old_english",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_ngram123_tagger_old_english": {
            "name": "test_pos_ngram123_tagger_old_english",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_perceptron_tagger_old_english": {
            "name": "test_pos_perceptron_tagger_old_english",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_unigram_middle_high_german": {
            "name": "test_pos_unigram_middle_high_german",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_bigram_middle_high_german": {
            "name": "test_pos_bigram_middle_high_german",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_trigram_middle_high_german": {
            "name": "test_pos_trigram_middle_high_german",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_pos_tnt_middle_high_german": {
            "name": "test_pos_tnt_middle_high_german",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_text.py": {
        "TestAkkadianUtils.test_single_sign": {
            "name": "test_single_sign",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAkkadianUtils.test_accents": {
            "name": "test_accents",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAkkadianUtils.test_unknown_token": {
            "name": "test_unknown_token",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_tlgu.py": {
        "TestSequenceFunctions.setUpClass": {
            "name": "setUpClass",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceFunctions.test_tlgu_init": {
            "name": "test_tlgu_init",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_tokenize_and_sent.py": {
        "TestSentenceTokenize.setUpClass": {
            "name": "setUpClass",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenize.test_sentence_tokenizer_latin_punkt": {
            "name": "test_sentence_tokenizer_latin_punkt",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenize.test_sentence_tokenizer_latin_punkt_strict": {
            "name": "test_sentence_tokenizer_latin_punkt_strict",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenize.test_sentence_tokenizer_sanskrit": {
            "name": "test_sentence_tokenizer_sanskrit",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.setUpClass": {
            "name": "setUpClass",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_greek_word_tokenizer": {
            "name": "test_greek_word_tokenizer",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_latin_word_tokenizer": {
            "name": "test_latin_word_tokenizer",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_tokenize_latin_words": {
            "name": "test_tokenize_latin_words",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_tokenize_arabic_words": {
            "name": "test_tokenize_arabic_words",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_word_tokenizer_old_french": {
            "name": "test_word_tokenizer_old_french",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_old_norse_word_tokenizer": {
            "name": "test_old_norse_word_tokenizer",
            "location": 684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_middle_english_tokenizer": {
            "name": "test_middle_english_tokenizer",
            "location": 722,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_middle_high_german_tokenizer": {
            "name": "test_middle_high_german_tokenizer",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_akkadian_word_tokenizer": {
            "name": "test_akkadian_word_tokenizer",
            "location": 778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWordTokenize.test_akkadian_sign_tokenizer": {
            "name": "test_akkadian_sign_tokenizer",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLineTokenize.test_line_tokenizer": {
            "name": "test_line_tokenizer",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLineTokenize.test_line_tokenizer_include_blanks": {
            "name": "test_line_tokenizer_include_blanks",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLineTokenize.test_french_line_tokenizer": {
            "name": "test_french_line_tokenizer",
            "location": 875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLineTokenize.test_french_line_tokenizer_include_blanks": {
            "name": "test_french_line_tokenizer_include_blanks",
            "location": 888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.setUpClass": {
            "name": "setUpClass",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.test_sentence_tokenizer_utils": {
            "name": "test_sentence_tokenizer_utils",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.test_sentence_tokenizer_utils_with_punctuation": {
            "name": "test_sentence_tokenizer_utils_with_punctuation",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.test_sentence_tokenizer_utils_with_abbreviations": {
            "name": "test_sentence_tokenizer_utils_with_abbreviations",
            "location": 927,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.test_sentence_tokenizer_utils_with_strict": {
            "name": "test_sentence_tokenizer_utils_with_strict",
            "location": 934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.test_sentence_tokenizer_trainer_pickle": {
            "name": "test_sentence_tokenizer_trainer_pickle",
            "location": 943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceTokenizeUtils.test_sentence_tokenizer_utils_latin": {
            "name": "test_sentence_tokenizer_utils_latin",
            "location": 951,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cltk-master/tests/test_utils.py": {
        "TestUtils.test_query_yes": {
            "name": "test_query_yes",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_query_no": {
            "name": "test_query_no",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_query_no_def_none": {
            "name": "test_query_no_def_none",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_query_no_def_no": {
            "name": "test_query_no_def_no",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_query_no_def_invalid": {
            "name": "test_query_no_def_invalid",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
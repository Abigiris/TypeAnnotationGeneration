{
    "cmdi-master/make.py": {
        "build": {
            "name": "build",
            "location": 31,
            "return": [
                "bytes",
                "bool",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "push": {
            "name": "push",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "Dict[str, List[Any]]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "bump": {
            "name": "bump",
            "location": 45,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cfg": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "dict",
                    "float"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 67,
            "return": [
                "Awaitable"
            ],
            "arguments": {}
        }
    },
    "cmdi-master/setup.py": {},
    "cmdi-master/cmdi/decorator.py": {
        "_get_logfile": {
            "name": "_get_logfile",
            "location": 26,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "Optional[\"InventoryMode\"]",
                "Optional[\"TaxMode\"]"
            ],
            "arguments": {
                "stdtype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "args": []
            }
        },
        "_get_redirector": {
            "name": "_get_redirector",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "stdout_pipe": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "dict"
                ],
                "stdout_logfile": [
                    "str",
                    "bool"
                ],
                "stderr_pipe": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "dict"
                ],
                "stderr_logfile": [
                    "str",
                    "bool"
                ]
            }
        },
        "command": {
            "name": "command",
            "location": 50,
            "return": [
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "decorated_func": [
                    "Callable",
                    "zerver.lib.types.ViewFuncT",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "command.command_wrapper": {
            "name": "command_wrapper",
            "location": 56,
            "return": [
                "bool",
                "List[object]",
                "Dict[int, int]",
                "list"
            ],
            "arguments": {}
        }
    },
    "cmdi-master/cmdi/lib.py": {
        "strip_cmdargs": {
            "name": "strip_cmdargs",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "locals_": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Generator",
                    "Callable[[T], bool]"
                ]
            }
        },
        "_print_title": {
            "name": "_print_title",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "List[str]",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "Union[str, List[str]]",
                    "str"
                ],
                "color": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int",
                    "List[str]"
                ],
                "file": [
                    "IO[str]",
                    "str",
                    "bool",
                    "os.PathLike"
                ]
            }
        },
        "print_title": {
            "name": "print_title",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "Optional[IO[str]]",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "color": [
                    "Optional[IO[str]]",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "file": [
                    "Optional[IO[str]]",
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "print_status": {
            "name": "print_status",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "Dict[str, str]",
                    "dict",
                    "str"
                ],
                "color": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "Set[str]"
                ],
                "file": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "print_result": {
            "name": "print_result",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "dict"
                ],
                "color": [
                    "str",
                    "Union[Dict, List]",
                    "int",
                    "List[\"SqlFile\"]"
                ],
                "file": [
                    "str"
                ]
            }
        },
        "print_summary": {
            "name": "print_summary",
            "location": 216,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "results": [
                    "Optional[Mapping[str, str]]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict",
                    "MutableMapping"
                ],
                "color": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "headline": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "file": [
                    "Optional[IO[str]]",
                    "Optional[str]",
                    "str",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "_set_status": {
            "name": "_set_status",
            "location": 253,
            "return": [
                "str",
                "dict",
                "int",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "status": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "List[Tuple[int, int]]",
                    "List[\"libkol.types.ItemQuantity\"]"
                ],
                "code": [
                    "Optional[int]",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "_set_color": {
            "name": "_set_color",
            "location": 265,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "datetime.date.time",
                "Dict[str, Any]"
            ],
            "arguments": {
                "status": [
                    "Optional[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ],
                "color": [
                    "Optional[int]",
                    "Callable[[], bool]",
                    "str",
                    "Optional[float]",
                    "List[dict]"
                ]
            }
        },
        "_enqueue_output": {
            "name": "_enqueue_output",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "IO[str]",
                    "str"
                ],
                "queue": [
                    "queue.Queue",
                    "str",
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "read_popen_pipes": {
            "name": "read_popen_pipes",
            "location": 285,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "p": [
                    "subprocess.Popen",
                    "dict",
                    "bool"
                ],
                "interval": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cmdi-master/cmdi/redirector.py": {
        "flush_c": {
            "name": "flush_c",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "stdtype": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "_setup_lowlevel_redirector": {
            "name": "_setup_lowlevel_redirector",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stdtype": [
                    "BaseException"
                ]
            }
        },
        "remove_ansi": {
            "name": "remove_ansi",
            "location": 102,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "line": [
                    "bytes",
                    "str",
                    "Deque[str]"
                ],
                "text": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "_save_stream": {
            "name": "_save_stream",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "stdout": [
                    "str",
                    "dict"
                ],
                "stderr": [
                    "str",
                    "float",
                    "Optional[str]",
                    "os.PathLike",
                    "bool",
                    "List[str]"
                ],
                "queue": [
                    "int",
                    "Union[Dict, str]",
                    "str"
                ]
            }
        },
        "_remove_lowlevel_redirector": {
            "name": "_remove_lowlevel_redirector",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "stdtype": [],
                "saved_stdfile_fd": [
                    "str",
                    "bytes"
                ],
                "original_stdfile_fd": [
                    "str",
                    "bytes"
                ]
            }
        },
        "redirect_stdfiles": {
            "name": "redirect_stdfiles",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "stdout_conf": [
                    "str",
                    "dict",
                    "bytearray",
                    "bytes"
                ],
                "stdout_logfile": [
                    "Callable",
                    "str"
                ],
                "stderr_conf": [
                    "str",
                    "dict",
                    "bytearray",
                    "bytes"
                ],
                "stderr_logfile": [
                    "Callable",
                    "str"
                ]
            }
        },
        "no_redirector": {
            "name": "no_redirector",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "DuplexWriter.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stdtype": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "logfile": [
                    "int",
                    "bool",
                    "float"
                ],
                "conf": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DuplexWriter.write": {
            "name": "write",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "cmdi-master/cmdi/__init__.py": {},
    "cmdi-master/tests/helpers.py": {
        "_title": {
            "name": "_title",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "color": [
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ]
            }
        },
        "_status": {
            "name": "_status",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "cmd_print_stdout_stderr": {
            "name": "cmd_print_stdout_stderr",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "return_val": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "raise_err": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "with_sub": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ]
            }
        },
        "print_stdout_stderr": {
            "name": "print_stdout_stderr",
            "location": 35,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "return_val": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "raise_err": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "with_sub": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ]
            }
        }
    },
    "cmdi-master/tests/test_fiddle.py": {
        "cmd_print_stdout_stderr": {
            "name": "cmd_print_stdout_stderr",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "return_val": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "raise_err": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "with_sub": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ]
            }
        },
        "print_stdout_stderr": {
            "name": "print_stdout_stderr",
            "location": 29,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "return_val": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "raise_err": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ],
                "with_sub": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ]
            }
        }
    },
    "cmdi-master/tests/test_visuals.py": {
        "print_testname": {
            "name": "print_testname",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "label": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "print_flag": {
            "name": "print_flag",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "print_runtime_flag": {
            "name": "print_runtime_flag",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "print_result_flag": {
            "name": "print_result_flag",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "field": [
                    "List[str]",
                    "str",
                    "List[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "print_msg": {
            "name": "print_msg",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "test_stdout_stderr": {
            "name": "test_stdout_stderr",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pipe_dup_save_text_tty": {
            "name": "test_pipe_dup_save_text_tty",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pipe_dup_mute": {
            "name": "test_pipe_dup_mute",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pickle": {
            "name": "test_pickle",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cmdi-master/tests/__init__.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cmdi-master/tests/__main__.py": {},
    "cmdi-master/tests/pyt/test_basics.py": {
        "test_return_type": {
            "name": "test_return_type",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_return_val_none": {
            "name": "test_return_val_none",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_return_val_str": {
            "name": "test_return_val_str",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_return_val_int": {
            "name": "test_return_val_int",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_return_status_ok": {
            "name": "test_return_status_ok",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_return_status_error": {
            "name": "test_return_status_error",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_stdout_stderr": {
            "name": "test_print_stdout_stderr",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool"
                ]
            }
        },
        "test_verbose_true": {
            "name": "test_verbose_true",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ]
            }
        },
        "test_verbose_false": {
            "name": "test_verbose_false",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_color_true": {
            "name": "test_color_true",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ]
            }
        },
        "test_color_false": {
            "name": "test_color_false",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_return_out_none": {
            "name": "test_return_out_none",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type",
                    "str"
                ]
            }
        },
        "test_return_err_none": {
            "name": "test_return_err_none",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_print_summary": {
            "name": "test_print_summary",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool"
                ]
            }
        }
    },
    "cmdi-master/tests/pyt/test_pipe.py": {
        "test_tty_true": {
            "name": "test_tty_true",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ]
            }
        },
        "test_tty_false": {
            "name": "test_tty_false",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_text_true": {
            "name": "test_text_true",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ]
            }
        },
        "test_text_false": {
            "name": "test_text_false",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ]
            }
        },
        "test_mute_true": {
            "name": "test_mute_true",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ]
            }
        },
        "test_dup_subprocess_output_exists": {
            "name": "test_dup_subprocess_output_exists",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dup_tty_true": {
            "name": "test_dup_tty_true",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": []
            }
        },
        "test_dup_tty_false": {
            "name": "test_dup_tty_false",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_dup_text_true": {
            "name": "test_dup_text_true",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_dup_text_false": {
            "name": "test_dup_text_false",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_redirect_stderr_to_stdout": {
            "name": "test_redirect_stderr_to_stdout",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cmdi-master/tests/pyt/__init__.py": {}
}
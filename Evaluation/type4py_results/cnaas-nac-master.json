{
    "cnaas-nac-master/setyp.py": {},
    "cnaas-nac-master/alembic/env.py": {
        "include_object": {
            "name": "include_object",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "object": [
                    "bool",
                    "str",
                    "list",
                    "Iterable[str]",
                    "Iterable[Tuple[str, str]]",
                    "int"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "type_": [
                    "str",
                    "List[str]"
                ],
                "reflected": [
                    "bool",
                    "str",
                    "list",
                    "Iterable[str]",
                    "Iterable[Tuple[str, str]]",
                    "int"
                ],
                "compare_to": [
                    "bool",
                    "str",
                    "list",
                    "Iterable[str]",
                    "Iterable[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/alembic/versions/1e4142701fbb_table_for_oui.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/alembic/versions/538170dfe877_added_freeradius_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/alembic/versions/e76a7f120db0_table_for_nas_ports.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/src/cnaas_nac/run.py": {
        "get_app": {
            "name": "get_app",
            "location": 9,
            "return": [
                "app.GrpyApp"
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/src/cnaas_nac/version.py": {},
    "cnaas-nac-master/src/cnaas_nac/__init__.py": {},
    "cnaas-nac-master/src/cnaas_nac/api/app.py": {
        "log_request": {
            "name": "log_request",
            "location": 64,
            "return": [
                "flask.Response",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "flask.Response"
                ]
            }
        },
        "CnaasApi.handle_error": {
            "name": "handle_error",
            "location": 30,
            "return": [
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "BaseException",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/api/auth.py": {
        "accept": {
            "name": "accept",
            "location": 38,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Union[Dict, List]",
                    "dict",
                    "bytes"
                ],
                "data": [
                    "dict",
                    "str",
                    "Optional[List[Any]]",
                    "MutableMapping",
                    "rotkehlchen.db.dbhandler.DBHandler"
                ]
            }
        },
        "reject": {
            "name": "reject",
            "location": 43,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ],
                "errstr": [
                    "dict",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "AuthApi.validate": {
            "name": "validate",
            "location": 49,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Optional[Exception]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AuthApi.get": {
            "name": "get",
            "location": 98,
            "return": [
                "str",
                "Callable",
                "server.models.User",
                "Optional[List[Any]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthApi.post": {
            "name": "post",
            "location": 102,
            "return": [
                "str",
                "bool",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthApiByName.error": {
            "name": "error",
            "location": 195,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "errstr": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "hermes.user.models.APIToken"
                ]
            }
        },
        "AuthApiByName.get": {
            "name": "get",
            "location": 199,
            "return": [
                "str",
                "Callable",
                "server.models.User",
                "Optional[List[Any]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "str",
                    "Union['KspNativeControl', int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthApiByName.put": {
            "name": "put",
            "location": 204,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "AuthApiByName.delete": {
            "name": "delete",
            "location": 220,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/api/generic.py": {
        "limit_results": {
            "name": "limit_results",
            "location": 4,
            "return": [
                "int",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "build_filter": {
            "name": "build_filter",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "f_class": [
                    "int",
                    "bool",
                    "type",
                    "flask.FlaskCookieService",
                    "list",
                    "Optional[Match]"
                ],
                "query": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "tuple",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "empty_result": {
            "name": "empty_result",
            "location": 36,
            "return": [
                "str",
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "status": [
                    "int",
                    "str",
                    "List[Dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "dict",
                    "Dict[str, str]"
                ],
                "data": [
                    "int",
                    "str",
                    "List[Dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/db/accounting.py": {
        "Accounting.as_dict": {
            "name": "as_dict",
            "location": 47,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/db/nas.py": {
        "NasPort.as_dict": {
            "name": "as_dict",
            "location": 28,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NasPort.get": {
            "name": "get",
            "location": 45,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[str]",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "username": [
                    "Callable[[str], bool]",
                    "sqlalchemy.exdeclarative.api.DeclarativeMeta",
                    "sqlalchemy.orm.Session",
                    "bytes",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "NasPort.add": {
            "name": "add",
            "location": 60,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "nas_ip_address": [
                    "str",
                    "Optional[str]",
                    "set"
                ],
                "nas_identifier": [
                    "int",
                    "float",
                    "Dict[str, List[Any]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "nas_port_id": [
                    "Union[str, Iterable[str]]"
                ],
                "calling_station_id": [
                    "Union[str, Iterable[str]]"
                ],
                "called_station_id": [
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "NasPort.delete": {
            "name": "delete",
            "location": 77,
            "return": [
                "str",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "IO[str]",
                    "Callable",
                    "dict"
                ],
                "username": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/db/oui.py": {
        "DeviceOui.as_dict": {
            "name": "as_dict",
            "location": 25,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceOui.exists": {
            "name": "exists",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ],
                "oui": [
                    "str",
                    "cnaas_nms.db.session.sqla_session",
                    "List[List[str]]",
                    "Sequence[MutableMapping]"
                ]
            }
        },
        "DeviceOui.get_vlan": {
            "name": "get_vlan",
            "location": 53,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "str",
                    "Optional[int]"
                ],
                "username": [
                    "bool",
                    "Type",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "DeviceOui.normalize": {
            "name": "normalize",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "oui": [
                    "str",
                    "IO[bytes]",
                    "bytes",
                    "IO"
                ]
            }
        },
        "DeviceOui.get": {
            "name": "get",
            "location": 70,
            "return": [
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/db/session.py": {
        "get_dbdata": {
            "name": "get_dbdata",
            "location": 9,
            "return": [
                "str",
                "bytes",
                "Optional[List[str]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_sqlalchemy_conn_str": {
            "name": "get_sqlalchemy_conn_str",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "sqla_session": {
            "name": "sqla_session",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "conn_str": [
                    "str",
                    "float",
                    "Optional[BaseException]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/db/user.py": {
        "get_users": {
            "name": "get_users",
            "location": 347,
            "return": [
                "str",
                "dict",
                "List[str]",
                "set"
            ],
            "arguments": {
                "username": [
                    "set",
                    "django.db.migrations.state.StateApps",
                    "str"
                ]
            }
        },
        "UserInfo.add": {
            "name": "add",
            "location": 27,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Dict[str, str]"
                ],
                "username": [
                    "str",
                    "dict",
                    "cnaas_nms.db.session.sqla_session",
                    "sqlalchemy.Table"
                ],
                "comment": [
                    "bytes",
                    "T",
                    "str"
                ],
                "reason": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "UserInfo.get": {
            "name": "get",
            "location": 45,
            "return": [
                "set",
                "bool",
                "datetime.date",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "usernames": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "UserInfo.delete": {
            "name": "delete",
            "location": 63,
            "return": [
                "int",
                "str",
                "Hashable",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "list"
                ],
                "username": [
                    "Optional[str]",
                    "sqlalchemy.Table",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "UserInfo.as_dict": {
            "name": "as_dict",
            "location": 72,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostAuth.as_dict": {
            "name": "as_dict",
            "location": 103,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostAuth.get_last_seen": {
            "name": "get_last_seen",
            "location": 120,
            "return": [
                "str",
                "Optional[\"Period\"]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "usernames": [
                    "str",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "last": [
                    "str",
                    "List[str]",
                    "float",
                    "bool"
                ]
            }
        },
        "Reply.as_dict": {
            "name": "as_dict",
            "location": 150,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.as_dict": {
            "name": "as_dict",
            "location": 179,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get": {
            "name": "get",
            "location": 196,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "username": [
                    "str",
                    "int",
                    "bool",
                    "cnaas_nms.db.session.sqla_session",
                    "db.models.Name",
                    "Union[str, int]"
                ]
            }
        },
        "User.reply_get": {
            "name": "reply_get",
            "location": 216,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "Optional[List[str]]",
                "IO"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "username": [
                    "sqlalchemy.orm.Session",
                    "Mapping[str, Any]",
                    "dict",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "User.add": {
            "name": "add",
            "location": 231,
            "return": [
                "django.db.migrations.state.StateApps",
                "bool",
                "django.db.models.QuerySet",
                "set"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "username": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "User.enable": {
            "name": "enable",
            "location": 244,
            "return": [
                "int",
                "bytearray",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "username": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[object]",
                    "int"
                ]
            }
        },
        "User.disable": {
            "name": "disable",
            "location": 255,
            "return": [
                "int",
                "bytearray",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "username": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[object]",
                    "int"
                ]
            }
        },
        "User.is_enabled": {
            "name": "is_enabled",
            "location": 327,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable",
                    "T",
                    "Type[Any]"
                ],
                "username": [
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "User.reply_add": {
            "name": "reply_add",
            "location": 278,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.Query",
                    "str",
                    "Pattern",
                    "sqlalchemy.engine.url.URL",
                    "Type"
                ],
                "username": [
                    "str",
                    "bool",
                    "int"
                ],
                "vlan": [
                    "int",
                    "Type[object]"
                ]
            }
        },
        "User.reply_delete": {
            "name": "reply_delete",
            "location": 303,
            "return": [
                "str",
                "int",
                "rotkehlchen.db.dbhandler.DBHandler",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "sqlalchemy.engine.reflection.Inspector",
                    "List[dict]"
                ],
                "username": [
                    "str",
                    "bool",
                    "cnaas_nms.db.session.sqla_session",
                    "deeplearning.deepsmith.db.session_t"
                ]
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 315,
            "return": [
                "int",
                "str",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type[django.db.models.base.Model]",
                    "list"
                ],
                "username": [
                    "str",
                    "bool",
                    "cnaas_nms.db.session.sqla_session"
                ]
            }
        },
        "User.reply_vlan": {
            "name": "reply_vlan",
            "location": 338,
            "return": [
                "int",
                "bytearray",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "username": [
                    "str",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.Session",
                    "bool"
                ],
                "vlan": [
                    "int",
                    "str",
                    "Union[int, float, str]",
                    "type"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/tests/test_api.py": {
        "ApiTests.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.tearDown": {
            "name": "tearDown",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_01_add_user": {
            "name": "test_01_add_user",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_02_enable_user": {
            "name": "test_02_enable_user",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_03_authenticate_user": {
            "name": "test_03_authenticate_user",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_04_set_vlan": {
            "name": "test_04_set_vlan",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_05_authenticate_user_new_vlan": {
            "name": "test_05_authenticate_user_new_vlan",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_06_wrong_port": {
            "name": "test_06_wrong_port",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_06_wrong_station": {
            "name": "test_06_wrong_station",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_07_disable_user": {
            "name": "test_07_disable_user",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_08_authenticate_user": {
            "name": "test_08_authenticate_user",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_09_verify_user_data": {
            "name": "test_09_verify_user_data",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTests.test_99_delete_user": {
            "name": "test_99_delete_user",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/tools/db_cleanup.py": {
        "db_cleanup": {
            "name": "db_cleanup",
            "location": 15,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/src/cnaas_nac/tools/db_replicator.py": {
        "diff_rows": {
            "name": "diff_rows",
            "location": 17,
            "return": [
                "[[]]",
                "int",
                "float",
                "List[int]",
                "Union[bool, None]"
            ],
            "arguments": {
                "list_a": [
                    "list",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "list_b": [
                    "list",
                    "int",
                    "Sequence[float]",
                    "float"
                ]
            }
        },
        "rad_replicate": {
            "name": "rad_replicate",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "db_source": [
                    "str"
                ],
                "db_target": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "table": [
                    "str",
                    "bool"
                ]
            }
        },
        "usage": {
            "name": "usage",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "IO",
                    "str"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/tools/helpers.py": {
        "get_user_replies": {
            "name": "get_user_replies",
            "location": 1,
            "return": [
                "str",
                "dict",
                "List[str]",
                "set"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ],
                "replies": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_user_port": {
            "name": "get_user_port",
            "location": 15,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ],
                "nas_ports": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_is_active": {
            "name": "get_is_active",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "users": [
                    "list"
                ]
            }
        },
        "get_last_seen": {
            "name": "get_last_seen",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "int",
                    "str",
                    "Optional[Set[str]]",
                    "bool"
                ],
                "last_seen": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_last_reply": {
            "name": "get_last_reply",
            "location": 44,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Sequence[int]",
                "bool"
            ],
            "arguments": {
                "username": [
                    "int",
                    "str",
                    "Optional[Set[str]]",
                    "bool"
                ],
                "last_seen": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "cnaas-nac-master/src/cnaas_nac/tools/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "cnaas-nac-master/src/cnaas_nac/tools/rad_db.py": {
        "get_connstrs": {
            "name": "get_connstrs",
            "location": 7,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "target": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "get_rows": {
            "name": "get_rows",
            "location": 18,
            "return": [
                "str",
                "List[List[int]]",
                "List[str]",
                "dict",
                "bool",
                "int",
                "Hashable",
                "Set[str]"
            ],
            "arguments": {
                "connstr": [
                    "str",
                    "bytes",
                    "float"
                ],
                "table": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]"
                ]
            }
        },
        "edit_users": {
            "name": "edit_users",
            "location": 32,
            "return": [
                "float",
                "str",
                "DefaultDict",
                "bytes"
            ],
            "arguments": {
                "diff": [
                    "Optional[int]",
                    "T",
                    "Iterable[T]",
                    "Optional[str]",
                    "Optional[Iterable[int]]",
                    "str"
                ],
                "connstr": [
                    "bool",
                    "str",
                    "discord.User"
                ],
                "remove": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "edit_replies": {
            "name": "edit_replies",
            "location": 67,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "diff": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ],
                "connstr": [
                    "str",
                    "bool",
                    "int"
                ],
                "remove": [
                    "Optional[Tuple[int, int]]",
                    "Optional[int]"
                ]
            }
        },
        "edit_nas": {
            "name": "edit_nas",
            "location": 101,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "nas_diff": [
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[List[Any]]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "Optional[Sequence[Any]]"
                ],
                "connstr": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "bool"
                ],
                "table": [
                    "int",
                    "str",
                    "bool"
                ],
                "remove": [
                    "bool",
                    "Optional[int]",
                    "Sequence[Callable]"
                ]
            }
        },
        "copy_accounting": {
            "name": "copy_accounting",
            "location": 142,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "diffs": [
                    "Optional[str]",
                    "str",
                    "Optional[Tuple[float, float]]"
                ],
                "connstr": [
                    "str",
                    "Optional[Dict]",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "table": [
                    "int",
                    "List['Product']",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "edit_userinfo": {
            "name": "edit_userinfo",
            "location": 212,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "userinfo_diff": [
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[List[Any]]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "Optional[Sequence[Any]]"
                ],
                "connstr": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "bool"
                ],
                "table": [
                    "str",
                    "int",
                    "app.db_models.user.User"
                ],
                "remove": [
                    "bool",
                    "Optional[int]",
                    "Sequence[Callable]"
                ]
            }
        }
    }
}
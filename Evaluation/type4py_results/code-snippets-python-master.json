{
    "code-snippets-python-master/playground.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/any_demo.py": {
        "c1": {
            "name": "c1",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "c2": {
            "name": "c2",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/attribute_demo.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "A.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "A.f1": {
            "name": "f1",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/basic/bool_sp.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/func_with_docstring.py": {
        "hello": {
            "name": "hello",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "times": [
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/hello_world.py": {},
    "code-snippets-python-master/basic/i__dict__.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/i__slots__.py": {
        "set_obj": {
            "name": "set_obj",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "Optional[int]",
                    "Optional[float]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/i__str____repr__.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Foo.__repr__": {
            "name": "__repr__",
            "location": 7,
            "return": [
                "str",
                "dict",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foo.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/basic/print.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/python_version.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/return_demo.py": {
        "f_a": {
            "name": "f_a",
            "location": 4,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]",
                "Set[VT]",
                "type",
                "tuple"
            ],
            "arguments": {}
        },
        "f_b": {
            "name": "f_b",
            "location": 8,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/run_file.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/zip_demo.py": {},
    "code-snippets-python-master/basic/bytes_sp/bytes_int.py": {
        "int_to_bytes": {
            "name": "int_to_bytes",
            "location": 1,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bytes",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "int_from_bytes": {
            "name": "int_from_bytes",
            "location": 5,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "xbytes": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/bytes_sp/bytes_sp.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/bytes_sp/char_and_int.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/class_sp/class_demo.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "A.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "A.hello": {
            "name": "hello",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "A2.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "A2.hello": {
            "name": "hello",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/basic/class_sp/enum_class_demo.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "MyType.get_text": {
            "name": "get_text",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "type_": []
            }
        },
        "MyType.get_type": {
            "name": "get_type",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "text": []
            }
        }
    },
    "code-snippets-python-master/basic/class_sp/inner_meta_class.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/context_manager_sp/context_manager_class_approach.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CustomOpen.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "CustomOpen.__enter__": {
            "name": "__enter__",
            "location": 5,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomOpen.__exit__": {
            "name": "__exit__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx_type": [],
                "ctx_value": [],
                "ctx_traceback": []
            }
        }
    },
    "code-snippets-python-master/basic/context_manager_sp/context_manager_generator_approach.py": {
        "custom_open": {
            "name": "custom_open",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "code-snippets-python-master/basic/copy_sp/copy_sp.py": {
        "shallow_copy": {
            "name": "shallow_copy",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "deep_copy": {
            "name": "deep_copy",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/decorator_sp/arg_parse_deco.py": {
        "parse_next_cursor_last_id_strict": {
            "name": "parse_next_cursor_last_id_strict",
            "location": 6,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "paged_foo": {
            "name": "paged_foo",
            "location": 27,
            "return": [],
            "arguments": {
                "next_cursor": [],
                "size": []
            }
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "parse_next_cursor_last_id_strict.wrapper": {
            "name": "wrapper",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/decorator_sp/check_deco.py": {
        "check_is_admin_1": {
            "name": "check_is_admin_1",
            "location": 6,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "check_is_admin": {
            "name": "check_is_admin",
            "location": 14,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "check_is_admin_1.r": {
            "name": "r",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "check_is_admin.wrapper": {
            "name": "wrapper",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.get_food": {
            "name": "get_food",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "food": []
            }
        },
        "Store.put_food": {
            "name": "put_food",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "food": []
            }
        }
    },
    "code-snippets-python-master/basic/decorator_sp/hello_deco.py": {
        "identity": {
            "name": "identity",
            "location": 1,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "foo": {
            "name": "foo",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/decorator_sp/register_deco.py": {
        "register": {
            "name": "register",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Exception",
                    "dict",
                    "Callable",
                    "List[T]"
                ]
            }
        },
        "foo": {
            "name": "foo",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "baz": {
            "name": "baz",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/decorator_sp/retry_with_decorator.py": {
        "retries": {
            "name": "retries",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "times": [
                    "float",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "make_a_get": {
            "name": "make_a_get",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "retries.wrap": {
            "name": "wrap",
            "location": 5,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "retries.wrap.r": {
            "name": "r",
            "location": 6,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/dict_sp/dict_data.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/dict_sp/filter_dict.py": {
        "filter_dict_none": {
            "name": "filter_dict_none",
            "location": 2,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "d": [
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "dict",
                    "Dict[str, object]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/dict_sp/traverse_dict.py": {},
    "code-snippets-python-master/basic/dict_sp/update_dict.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/doctest_sp/doctest_sp.py": {
        "factorial": {
            "name": "factorial",
            "location": 4,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/exception_sp/catch_sp.py": {
        "int_it": {
            "name": "int_it",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/exception_sp/exception_to_str.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/exception_sp/hello_exception.py": {
        "maybe_error": {
            "name": "maybe_error",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "Union[float, int]"
                ],
                "raise_it": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "box": {
            "name": "box",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "raise_it": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/inhert_sp/multi_inhert.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "A.say": {
            "name": "say",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.eat": {
            "name": "eat",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "C.eat": {
            "name": "eat",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "D.say": {
            "name": "say",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "D.dinner": {
            "name": "dinner",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/basic/int_sp/int_sp.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/int_sp/int_str.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/iter_sp/iter_sp.py": {
        "func": {
            "name": "func",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "i": [
                    "int",
                    "Union[float, str]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "iter_print": {
            "name": "iter_print",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "it": [
                    "float",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/list_sp/hello_list.py": {
        "init_list": {
            "name": "init_list",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "insert_append_and_extend_list": {
            "name": "insert_append_and_extend_list",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "remove_pop_list": {
            "name": "remove_pop_list",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "get_len_count_index_list": {
            "name": "get_len_count_index_list",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "sort_reverse_list": {
            "name": "sort_reverse_list",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "_sort_func": {
            "name": "_sort_func",
            "location": 84,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sort_list": {
            "name": "sort_list",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "list_index": {
            "name": "list_index",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "list_slice": {
            "name": "list_slice",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "list_slice_with_step": {
            "name": "list_slice_with_step",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "list_comprehension": {
            "name": "list_comprehension",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_insert_when_traversing": {
            "name": "test_insert_when_traversing",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/max_sp/max_sp.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/pass_sp/pass_sp.py": {
        "pass_test": {
            "name": "pass_test",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/range_sp/datetime_range.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/range_sp/range.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/range_sp/range_py2.py": {
        "print_range": {
            "name": "print_range",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "r": [
                    "OSError"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/set_sp/set_sp.py": {
        "init_set": {
            "name": "init_set",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "union_operation": {
            "name": "union_operation",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "add_remove": {
            "name": "add_remove",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "set_and_tuple": {
            "name": "set_and_tuple",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/replace_str.py": {
        "replace_str": {
            "name": "replace_str",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "replace_str_code_test": {
            "name": "replace_str_code_test",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_demo.py": {
        "split_str": {
            "name": "split_str",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "split_unicode": {
            "name": "split_unicode",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "sort_str": {
            "name": "sort_str",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "get_char_of_str": {
            "name": "get_char_of_str",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_escape.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_format.py": {
        "format_number": {
            "name": "format_number",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_num.py": {
        "str_isdigit": {
            "name": "str_isdigit",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_startswith_endswith.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_strip.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/str_unicode.py": {
        "to_utf8": {
            "name": "to_utf8",
            "location": 1,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "to_unicode": {
            "name": "to_unicode",
            "location": 7,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/str_sp/upper_sp.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/type_sp/type_sp.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/yield_sp/chunks_with_yield.py": {
        "chunks": {
            "name": "chunks",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/basic/yield_sp/yield_.py": {
        "my_range": {
            "name": "my_range",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/argparse_sp/argparse_action.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/argparse_sp/argparse_demo.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/argparse_sp/argparse_kwargs.py": {
        "_datetime": {
            "name": "_datetime",
            "location": 6,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/base64_sp/base64_decode.py": {
        "print_b64decode": {
            "name": "print_b64decode",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "bs": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/base64_sp/base64_encode.py": {
        "int_to_bytes": {
            "name": "int_to_bytes",
            "location": 4,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bytes",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "print_b64encode": {
            "name": "print_b64encode",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "bs": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/base64_sp/urlsafe_encode_decode.py": {
        "urlsafe_encode_and_decode": {
            "name": "urlsafe_encode_and_decode",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/collections_snippets/hello_counter.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/collections_snippets/hello_defaultdict.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/collections_snippets/hello_deque.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/collections_snippets/hello_namedtuple.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/collections_snippets/hello_ordered_dict.py": {
        "test_ordered_dict": {
            "name": "test_ordered_dict",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_ordered_dict": {
            "name": "test_init_ordered_dict",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_append_ordered_dict": {
            "name": "test_append_ordered_dict",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/collections_snippets/use_ordered_dict_remove_duplicate.py": {
        "remove_duplicate1": {
            "name": "remove_duplicate1",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "remove_duplicate2": {
            "name": "remove_duplicate2",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/csv_sp/append_writer.py": {
        "rows": {
            "name": "rows",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "start": [
                    "bool",
                    "int",
                    "Union[str, list]"
                ],
                "stop": [
                    "bool",
                    "int",
                    "Union[str, list]"
                ]
            }
        },
        "write_rows": {
            "name": "write_rows",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "start": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "stop": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/csv_sp/reader_for_tsv_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/csv_sp/reader_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/csv_sp/writer_sp.py": {
        "rows": {
            "name": "rows",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/datetime_and_timestamp.py": {
        "dt2ts": {
            "name": "dt2ts",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "ts2dt": {
            "name": "ts2dt",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/datetime_operation.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/datetime_range.py": {
        "datetime_range": {
            "name": "datetime_range",
            "location": 6,
            "return": [
                "int",
                "datetime.datetime",
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[datetime.date]"
            ],
            "arguments": {
                "start_time": [
                    "datetime.datetime",
                    "int",
                    "datetime.date"
                ],
                "end_time": [
                    "datetime.datetime",
                    "int",
                    "datetime.date"
                ],
                "step": [
                    "int",
                    "datetime.timedelta",
                    "bool"
                ]
            }
        },
        "datetime_pairs": {
            "name": "datetime_pairs",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "datetime.timedelta",
                    "float",
                    "datetime.datetime"
                ],
                "end_time": [
                    "int",
                    "Callable[[List], bool]",
                    "Optional[Sequence]",
                    "List[int]"
                ],
                "step": [
                    "int",
                    "datetime.timedelta",
                    "float",
                    "datetime.datetime"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/datetime_util.py": {
        "_datetime": {
            "name": "_datetime",
            "location": 5,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "d": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "datetime.time",
                    "datetime.date",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "_strftime": {
            "name": "_strftime",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/hello_datetime.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/isoformat_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/strftime_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/timedelta_sp.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/timezone_sp.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/utc_datetime.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/datetime_sp/week_day.py": {
        "this_monday_and_related_sunday": {
            "name": "this_monday_and_related_sunday",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "chinese_weekday": {
            "name": "chinese_weekday",
            "location": 12,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/enum_sp/enum_for_error_code.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/enum_sp/hello_enum.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/enum_sp/tuple_enum_sp.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/hashlib_sp/hello_hashlib.py": {
        "hash_string_to_int1": {
            "name": "hash_string_to_int1",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "my_str": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "hash_string_to_int2": {
            "name": "hash_string_to_int2",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "my_str": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "hash_string": {
            "name": "hash_string",
            "location": 13,
            "return": [
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "my_str": [
                    "str"
                ]
            }
        },
        "print_digest1": {
            "name": "print_digest1",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "my_str": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "print_digest2": {
            "name": "print_digest2",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "my_str": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "print_hash_data": {
            "name": "print_hash_data",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/inspect_sp/defines.py": {
        "Foo.bar": {
            "name": "bar",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/builtin_packages/inspect_sp/inspect_sp.py": {
        "f": {
            "name": "f",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "Callable[[str, Any], None]",
                    "bool",
                    "Iterable[str]"
                ],
                "b": [
                    "str",
                    "bytes",
                    "Callable[[str, Any], None]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/inspect_sp/member.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/inspect_sp/signature.py": {
        "foo": {
            "name": "foo",
            "location": 4,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/inspect_sp/source_code.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/math_sp/ceil_and_floor.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/math_sp/math_log.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/os_sp/check_and_make_dir.py": {
        "make_dir_if_not_exists": {
            "name": "make_dir_if_not_exists",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "dir": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/os_sp/hello_os.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/os_sp/read_write_os_environment_variables.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/random_sp/random_sp.py": {
        "test_randrange": {
            "name": "test_randrange",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sample": {
            "name": "test_sample",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random": {
            "name": "test_random",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_uniform": {
            "name": "test_uniform",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_randint": {
            "name": "test_randint",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_getrandbits": {
            "name": "test_getrandbits",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_shuffle": {
            "name": "test_shuffle",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_seed": {
            "name": "test_seed",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/group_search.py": {
        "group_search": {
            "name": "group_search",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/hello_re.py": {
        "search_hello": {
            "name": "search_hello",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "search_hello2": {
            "name": "search_hello2",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/re_collect.py": {
        "find_and_print": {
            "name": "find_and_print",
            "location": 5,
            "return": [],
            "arguments": {
                "order": [],
                "r": [],
                "s": [],
                "group": []
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/re_find_all.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/re_replace.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/re_tokens.py": {
        "add_space_after_hash": {
            "name": "add_space_after_hash",
            "location": 5,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "find_str": {
            "name": "find_str",
            "location": 12,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/re_sp/re_with_unicode.py": {
        "search_bad": {
            "name": "search_bad",
            "location": 5,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "search_bad_str": {
            "name": "search_bad_str",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "search_bad_unicode": {
            "name": "search_bad_unicode",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "search_utf8": {
            "name": "search_utf8",
            "location": 37,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/statistics_sp/mean_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/subprocess_sp/error_code_of_call.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/subprocess_sp/get_std_out.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/subprocess_sp/hello_shell.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/subprocess_sp/hello_shell_old.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/subprocess_sp/run_apple_script.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/sys_sp/sys_stdin.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/time_sp/execution_time_a.py": {
        "timeit": {
            "name": "timeit",
            "location": 5,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "f1": {
            "name": "f1",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "f2": {
            "name": "f2",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "f3": {
            "name": "f3",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]",
                    "Sequence[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "timeit.timed": {
            "name": "timed",
            "location": 7,
            "return": [
                "int",
                "Match",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "Foo.foo": {
            "name": "foo",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        }
    },
    "code-snippets-python-master/builtin_packages/time_sp/execution_time_b.py": {
        "f2": {
            "name": "f2",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SampleClass.silly_fibonacci_example": {
            "name": "silly_fibonacci_example",
            "location": 7,
            "return": [
                "str",
                "bool",
                "List[float]",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "Set[str]",
                    "Union[str, int]"
                ]
            }
        }
    },
    "code-snippets-python-master/builtin_packages/time_sp/timestamp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/urllib_parse_sp/parse_qsl_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/urllib_parse_sp/parse_qs_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/urllib_parse_sp/urlencode_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/urllib_parse_sp/urljoin_py2.py": {
        "test_join_url": {
            "name": "test_join_url",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "url1": [
                    "str",
                    "dict"
                ],
                "url2": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/urllib_parse_sp/urljoin_sp.py": {
        "test_join_url": {
            "name": "test_join_url",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "url1": [
                    "str",
                    "dict"
                ],
                "url2": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/uuid_sp/hello_uuid.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/builtin_packages/uuid_sp/part_or_uuid.py": {
        "get_a_part_or_uuid": {
            "name": "get_a_part_or_uuid",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/__init__.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/__init__.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/before_after_request_sp/app.py": {
        "before_request": {
            "name": "before_request",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "after_request": {
            "name": "after_request",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, str]]",
                "Type[T]"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/before_after_request_sp/bp.py": {
        "before_request": {
            "name": "before_request",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "after_request": {
            "name": "after_request",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, str]]",
                "Type[T]"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/before_after_request_sp/__init__.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/blueprint_app/app.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/blueprint_app/bp.py": {
        "show": {
            "name": "show",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/blueprint_app/__init__.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/errorhandler_app/app.py": {
        "app_404": {
            "name": "app_404",
            "location": 6,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "e": [
                    "str",
                    "Coroutine[Any, Any, Any]"
                ]
            }
        },
        "app_500": {
            "name": "app_500",
            "location": 27,
            "return": [
                "int",
                "type"
            ],
            "arguments": {
                "e": [
                    "str",
                    "Coroutine[Any, Any, Any]"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "error_500": {
            "name": "error_500",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "error_r500": {
            "name": "error_r500",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/errorhandler_app/app2.py": {
        "handle_error": {
            "name": "handle_error",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "dict",
                "flask.Markup",
                "Dict[str, int]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "str"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "error_500": {
            "name": "error_500",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "error_r500": {
            "name": "error_r500",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/errorhandler_app/app3.py": {
        "handle_error": {
            "name": "handle_error",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "dict",
                "flask.Markup",
                "Dict[str, int]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "str"
                ]
            }
        },
        "get_http_exception_handler": {
            "name": "get_http_exception_handler",
            "location": 17,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "error_500": {
            "name": "error_500",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "error_r500": {
            "name": "error_r500",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_http_exception_handler.ret_val": {
            "name": "ret_val",
            "location": 21,
            "return": [
                "str",
                "int",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "List[str]",
                    "int",
                    "Match[str]"
                ]
            }
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/flask_bin/app.py": {
        "hello": {
            "name": "hello",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "args": {
            "name": "args",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "args_type": {
            "name": "args_type",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "r_post": {
            "name": "r_post",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "redirect_with_args": {
            "name": "redirect_with_args",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "ua": {
            "name": "ua",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "headers": {
            "name": "headers",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/flask_bin/run_app.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/flask_json_encoder/app.py": {
        "hello": {
            "name": "hello",
            "location": 25,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MyJSONEncoder.default": {
            "name": "default",
            "location": 8,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "datetime.timedelta",
                    "int",
                    "str"
                ]
            }
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/flask_request/app.py": {
        "get": {
            "name": "get",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "app_get": {
            "name": "app_get",
            "location": 13,
            "return": [
                "Dict[str, type]",
                "List[str]",
                "Optional[str]",
                "str",
                "bool",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {}
        },
        "app_post": {
            "name": "app_post",
            "location": 21,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/hello_flask/app.py": {
        "hello": {
            "name": "hello",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/route_sp/catch_all_url.py": {
        "catch_all": {
            "name": "catch_all",
            "location": 8,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/sample_app/run_app.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/sample_app/my_app/app.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/sample_app/my_app/__init__.py": {},
    "code-snippets-python-master/frameworks/flask_snippets/sample_app/my_app/views/hello.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/flask_snippets/sample_app/my_app/views/__init__.py": {},
    "code-snippets-python-master/frameworks/pytest_sp/__init__.py": {},
    "code-snippets-python-master/frameworks/pytest_sp/samples/sample_test.py": {
        "inc": {
            "name": "inc",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_answer": {
            "name": "test_answer",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/pytest_sp/samples/test_class.py": {
        "TestClass.test_one": {
            "name": "test_one",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClass.test_two": {
            "name": "test_two",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/frameworks/pytest_sp/samples/test_exception.py": {
        "f": {
            "name": "f",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_exception": {
            "name": "test_exception",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/pytest_sp/samples/test_fixtures.py": {
        "smtp": {
            "name": "smtp",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_ehlo": {
            "name": "test_ehlo",
            "location": 10,
            "return": [],
            "arguments": {
                "smtp": []
            }
        }
    },
    "code-snippets-python-master/frameworks/pytest_sp/samples/test_sample.py": {
        "inc": {
            "name": "inc",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_answer": {
            "name": "test_answer",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/frameworks/pytest_sp/samples/test_tmpdir.py": {
        "test_needsfiles": {
            "name": "test_needsfiles",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "code-snippets-python-master/frameworks/pytest_sp/samples/__init__.py": {},
    "code-snippets-python-master/frameworks/telegram_bot_samples/echo/bot.py": {
        "start": {
            "name": "start",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot"
                ],
                "update": [
                    "telegram.Update",
                    "bool",
                    "str",
                    "Union[str, Iterable[str]]",
                    "List[Dict[str, str]]",
                    "Tuple[Any, Any, Any, Any, Any]"
                ]
            }
        },
        "help": {
            "name": "help",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "bool",
                    "str",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "List[Dict[str, str]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "Dict[str, Any]"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.boBot",
                    "int",
                    "bool",
                    "Exception",
                    "List[str]"
                ],
                "update": [
                    "int",
                    "str",
                    "logging.Logger",
                    "float",
                    "Union[int, float]"
                ],
                "error": [
                    "int",
                    "str",
                    "logging.Logger",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/aiohttp/aiohttp_client.py": {},
    "code-snippets-python-master/packages/aiohttp/simple_aiohttp_server.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/asyncio_sp/asyncio_wget.py": {
        "wget": {
            "name": "wget",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/asyncio_sp/async_wget.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/asyncio_sp/hello_asyncio.py": {
        "hello": {
            "name": "hello",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/base64_snippets/hello_base64.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/beautiful_soup_snippets/beautiful_soup_demo.py": {
        "parse_whole_html": {
            "name": "parse_whole_html",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_part_html": {
            "name": "parse_part_html",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "print_content": {
            "name": "print_content",
            "location": 45,
            "return": [
                "bytes"
            ],
            "arguments": {
                "content": [
                    "int",
                    "bytes",
                    "Optional[Union[str, int]]",
                    "Optional[bytes]"
                ],
                "level": [
                    "str"
                ]
            }
        },
        "parse_part_html2": {
            "name": "parse_part_html2",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_soup_to_markup": {
            "name": "parse_soup_to_markup",
            "location": 61,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "soup": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "get_markups": {
            "name": "get_markups",
            "location": 70,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "Dict[str, List[Any]]",
                    "dict"
                ],
                "start_index": [
                    "int",
                    "str",
                    "List['Token']"
                ]
            }
        },
        "parse_list_index": {
            "name": "parse_list_index",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/bisect_sp/binary_search_list.py": {
        "reverse_bisect_right": {
            "name": "reverse_bisect_right",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "x": [
                    "int",
                    "Iterable"
                ],
                "lo": [
                    "float",
                    "str",
                    "Callable"
                ],
                "hi": [
                    "int",
                    "Optional[int]",
                    "Optional[T]",
                    "Union[None, str, int, float]",
                    "Optional[float]",
                    "Optional[Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/bytes_io_sp/hello_bytes_io.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/config_snippets/read_config.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/config_snippets/__init__.py": {},
    "code-snippets-python-master/packages/config_snippets/config/online_config.py": {},
    "code-snippets-python-master/packages/config_snippets/config/sample_config.py": {},
    "code-snippets-python-master/packages/config_snippets/config/__init__.py": {},
    "code-snippets-python-master/packages/coroutine_sp/sim_asyncio.py": {
        "sleep": {
            "name": "sleep",
            "location": 36,
            "return": [],
            "arguments": {
                "timeout": []
            }
        },
        "task": {
            "name": "task",
            "location": 41,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "run": {
            "name": "run",
            "location": 50,
            "return": [],
            "arguments": {
                "tasks": []
            }
        },
        "_next": {
            "name": "_next",
            "location": 62,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "main": {
            "name": "main",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.set_callback": {
            "name": "set_callback",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Event.is_ready": {
            "name": "is_ready",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SleepEvent.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "SleepEvent._is_ready": {
            "name": "_is_ready",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/packages/coroutine_sp/sim_asyncio2.py": {
        "_next": {
            "name": "_next",
            "location": 22,
            "return": [],
            "arguments": {
                "gen": [],
                "future": [],
                "value": []
            }
        },
        "coroutine": {
            "name": "coroutine",
            "location": 36,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 76,
            "return": [],
            "arguments": {
                "timeout": []
            }
        },
        "long_add": {
            "name": "long_add",
            "location": 84,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "duration": []
            }
        },
        "task": {
            "name": "task",
            "location": 90,
            "return": [],
            "arguments": {
                "duration": []
            }
        },
        "run": {
            "name": "run",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.set_callback": {
            "name": "set_callback",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Future.done": {
            "name": "done",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "coroutine.wrapper": {
            "name": "wrapper",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.set_callback": {
            "name": "set_callback",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Event.is_ready": {
            "name": "is_ready",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SleepEvent.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "SleepEvent._is_ready": {
            "name": "_is_ready",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/packages/coroutine_sp/yield_sample.py": {
        "printer": {
            "name": "printer",
            "location": 2,
            "return": [],
            "arguments": {}
        },
        "test_printer": {
            "name": "test_printer",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/coroutine_sp/yield_task_scheduler.py": {
        "task": {
            "name": "task",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[object]",
                    "Optional[str]"
                ],
                "times": [
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "str",
                    "int"
                ]
            }
        },
        "Runner.next": {
            "name": "next",
            "location": 15,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/packages/cursor_size_snippets/hello_cursor.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dataclasses_sp/default_sp.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dataclasses_sp/field_sp.py": {
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "C2.get_fields": {
            "name": "get_fields",
            "location": 22,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Mapping[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "dataclasses.Field[Any]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "AbstractSet[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/dataclasses_sp/hello_dataclasses.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dataclasses_sp/load_sp.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "XDataClass.load": {
            "name": "load",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "List[str]"
                ],
                "data": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/dataclasses_sp/poly_field_sp.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dict_snippets/dict_and_list.py": {
        "from_list_to_dict": {
            "name": "from_list_to_dict",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "from_dict_to_list": {
            "name": "from_dict_to_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "change_dict_in_list": {
            "name": "change_dict_in_list",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dict_snippets/dict_compare.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dict_snippets/dict_exception.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dict_snippets/dict_update.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/dict_snippets/iter_dict.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/fake_snippets/fake_demo.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/fake_snippets/hello_fake.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/fileinput_sp/hello_fileinput.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/files_in_path.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/get_path.py": {
        "get_file_path": {
            "name": "get_file_path",
            "location": 5,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_file_dir_path": {
            "name": "get_file_dir_path",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_file_name": {
            "name": "get_file_name",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_cwd": {
            "name": "get_cwd",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_home_path": {
            "name": "get_home_path",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/join_path.py": {
        "get_file_dir_path": {
            "name": "get_file_dir_path",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "join_path": {
            "name": "join_path",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path_a": [
                    "str",
                    "bool",
                    "int",
                    "Union[str, bytes]"
                ],
                "path_b": [
                    "str",
                    "bool",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/mk_dir.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/read_write_file.py": {
        "write_and_read": {
            "name": "write_and_read",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "write_with_line_break_and_read": {
            "name": "write_with_line_break_and_read",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/rm_dir.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filesystem/rm_file.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/filter_snippets/filter_performance.py": {},
    "code-snippets-python-master/packages/filter_snippets/hello_filter.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/fire_sp/fire_multi_func.py": {
        "add": {
            "name": "add",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "b": [
                    "int",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "multiply": {
            "name": "multiply",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "b": [
                    "int",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/fire_sp/hello_fire.py": {
        "say_hello": {
            "name": "say_hello",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/function_snippets/func_args.py": {
        "print_kwargs": {
            "name": "print_kwargs",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/geetest_sp/geetest_sp.py": {
        "get_status_and_response_str": {
            "name": "get_status_and_response_str",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "gt": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/generator_sp/hello_generator.py": {
        "timeit": {
            "name": "timeit",
            "location": 4,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "firstn_l": {
            "name": "firstn_l",
            "location": 18,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "firstn_g": {
            "name": "firstn_g",
            "location": 49,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_firstn_l": {
            "name": "test_firstn_l",
            "location": 57,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_firstn_c": {
            "name": "test_firstn_c",
            "location": 63,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_firstn_g": {
            "name": "test_firstn_g",
            "location": 69,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_range": {
            "name": "test_range",
            "location": 75,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_generator_expression": {
            "name": "test_generator_expression",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "timeit.timed": {
            "name": "timed",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "firstn_c.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "firstn_c.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "firstn_c.__next__": {
            "name": "__next__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "firstn_c.next": {
            "name": "next",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/packages/gevent_snippets/hello_gevent.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/gevent_snippets/patch_stdout.py": {},
    "code-snippets-python-master/packages/heapq_sp/heapq_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/imghdr/hello_imghdr.py": {
        "get_image_type_of_file": {
            "name": "get_image_type_of_file",
            "location": 4,
            "return": [
                "str",
                "Tuple[Type]",
                "bool"
            ],
            "arguments": {
                "file": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Sequence[Sequence[T]]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "get_image_type_of_file_data": {
            "name": "get_image_type_of_file_data",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_data": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/input/hello_input.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/jieba_sp/jieba_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/jieba_sp/recipe.py": {
        "cut_txt": {
            "name": "cut_txt",
            "location": 4,
            "return": [],
            "arguments": {
                "txt": []
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/json_sp/hello_json.py": {
        "dump_loads": {
            "name": "dump_loads",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "dump_str_escape_test": {
            "name": "dump_str_escape_test",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_ensure_ascii": {
            "name": "test_ensure_ascii",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_pretty_printed": {
            "name": "test_pretty_printed",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_compact_printed": {
            "name": "test_compact_printed",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/json_sp/json_encoder_sp.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MyEncoder.default": {
            "name": "default",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Callable[[Mapping], Awaitable]"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/json_sp/load_dump_file.py": {
        "load_dump_test": {
            "name": "load_dump_test",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "load_dump_unicode_test": {
            "name": "load_dump_unicode_test",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/log_snippets/logger_sp.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/log_snippets/log_demo.py": {
        "hello_func": {
            "name": "hello_func",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/log_snippets/log_to_stdout.py": {
        "hello_func": {
            "name": "hello_func",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/mako_sp/hello_mako.py": {
        "simple_render": {
            "name": "simple_render",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "render_arg": {
            "name": "render_arg",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/mako_sp/python_block.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/mako_sp/render_file.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/deserializing.py": {
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExtraSchema.pre_load": {
            "name": "pre_load",
            "location": 21,
            "return": [
                "Callable[[str], None]",
                "Type",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int"
                ]
            }
        },
        "UserExtraSchema.post_load": {
            "name": "post_load",
            "location": 27,
            "return": [
                "Callable[[Any], bool]",
                "dict",
                "Sequence",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        },
        "UserExtraSchema.pre_dump": {
            "name": "pre_dump",
            "location": 33,
            "return": [
                "bool",
                "str",
                "List[int]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "str",
                    "IO"
                ]
            }
        },
        "UserExtraSchema.post_dump": {
            "name": "post_dump",
            "location": 40,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        },
        "UserSchema.pre_load": {
            "name": "pre_load",
            "location": 51,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "UserSchema.post_load": {
            "name": "post_load",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "int",
                    "dict",
                    "\"Track\""
                ]
            }
        },
        "UserSchema.pre_dump": {
            "name": "pre_dump",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "UserSchema.post_dump": {
            "name": "post_dump",
            "location": 69,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/fields_sp.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/marshmallow_demo.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/nest_field.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/poly_field.py": {
        "button_serialization_schema_selector": {
            "name": "button_serialization_schema_selector",
            "location": 55,
            "return": [],
            "arguments": {
                "_": [],
                "obj": []
            }
        },
        "button_deserialization_schema_selector": {
            "name": "button_deserialization_schema_selector",
            "location": 66,
            "return": [],
            "arguments": {
                "data": [],
                "_": []
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "name": []
            }
        },
        "ClickButton.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "name": [],
                "key": []
            }
        },
        "ViewButton.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "name": [],
                "url": []
            }
        },
        "ClickButtonSchema.make_object": {
            "name": "make_object",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ViewButtonSchema.make_object": {
            "name": "make_object",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/poly_field2.py": {
        "reply_serialization_schema_selector": {
            "name": "reply_serialization_schema_selector",
            "location": 40,
            "return": [],
            "arguments": {
                "_": [],
                "obj": []
            }
        },
        "reply_deserialization_schema_selector": {
            "name": "reply_deserialization_schema_selector",
            "location": 51,
            "return": [],
            "arguments": {
                "_": [],
                "data": []
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "AutoReply.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "mp_id": [],
                "reply_type": [],
                "data": []
            }
        },
        "AutoReply.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoReply.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoReplySchema.pre_dump": {
            "name": "pre_dump",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AutoReplySchema.post_load": {
            "name": "post_load",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/quick_start_examples.py": {
        "validate_quantity": {
            "name": "validate_quantity",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "email": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str",
                "Exception",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSchema.make_user": {
            "name": "make_user",
            "location": 22,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "Type[Any]"
                ]
            }
        },
        "ItemSchema.validate_quantity2": {
            "name": "validate_quantity2",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "NumberSchema.validate_numbers": {
            "name": "validate_numbers",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/marshmallow_sp/serializing.py": {
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExtraSchema.pre_load": {
            "name": "pre_load",
            "location": 21,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "UserExtraSchema.post_load": {
            "name": "post_load",
            "location": 27,
            "return": [
                "bool",
                "List[Dict]",
                "Union[Sequence, 'SweepFixedValues']",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "UserExtraSchema.pre_dump": {
            "name": "pre_dump",
            "location": 33,
            "return": [
                "bool",
                "str",
                "List[int]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "str",
                    "IO"
                ]
            }
        },
        "UserExtraSchema.post_dump": {
            "name": "post_dump",
            "location": 40,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        },
        "UserSchema.pre_load": {
            "name": "pre_load",
            "location": 51,
            "return": [
                "Callable[[str], None]",
                "Type",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int"
                ]
            }
        },
        "UserSchema.post_load": {
            "name": "post_load",
            "location": 57,
            "return": [
                "Callable[[Any], bool]",
                "dict",
                "Sequence",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        },
        "UserSchema.pre_dump": {
            "name": "pre_dump",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "UserSchema.post_dump": {
            "name": "post_dump",
            "location": 69,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/mimetypes_sp/hello_mimetypes.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/misaka_snippets/misaka_custom_render.py": {},
    "code-snippets-python-master/packages/misaka_snippets/misaka_demo.py": {},
    "code-snippets-python-master/packages/mypy_sp/typed_dict.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/mysql_snippets/batch_insert_performance.py": {
        "insert_to_mysql": {
            "name": "insert_to_mysql",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "float",
                    "dict",
                    "bool"
                ],
                "n": [
                    "int",
                    "str"
                ],
                "start": [
                    "int",
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/mysql_snippets/hello_pymysql.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/print_all.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/print_all_2.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/print_package.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "main2": {
            "name": "main2",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/__init__.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/foo/foo_a.py": {
        "print_foo_a": {
            "name": "print_foo_a",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/foo/__init__.py": {
        "print_foo": {
            "name": "print_foo",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/foo/bar/__init__.py": {
        "print_bar": {
            "name": "print_bar",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/package_snippets/test_all/__init__.py": {},
    "code-snippets-python-master/packages/package_snippets/test_all/all_a/__init__.py": {},
    "code-snippets-python-master/packages/packaging_sp/packaging_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/custom_fields.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/databases.py": {
        "create_database": {
            "name": "create_database",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "drop_database": {
            "name": "drop_database",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/exceptions_sp.py": {
        "create_table": {
            "name": "create_table",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "drop_table": {
            "name": "drop_table",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "does_not_exist": {
            "name": "does_not_exist",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "data_error": {
            "name": "data_error",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/fields.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/group_by_and_count.py": {
        "create": {
            "name": "create",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/hello_peewee.py": {
        "create_db_and_tables": {
            "name": "create_db_and_tables",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "new_user1": {
            "name": "new_user1",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "new_user2": {
            "name": "new_user2",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_print_person": {
            "name": "_print_person",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "where_user": {
            "name": "where_user",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "new_pet1": {
            "name": "new_pet1",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "new_pet2": {
            "name": "new_pet2",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BaseModel.save": {
            "name": "save",
            "location": 12,
            "return": [
                "str",
                "bool",
                "django.db.models.QuerySet",
                "Dict[str, Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.get": {
            "name": "get",
            "location": 18,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/peewee_sp/index_sp.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/models.py": {},
    "code-snippets-python-master/packages/peewee_sp/model_and_dict.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/mysql_conn.py": {},
    "code-snippets-python-master/packages/peewee_sp/mysql_db.py": {},
    "code-snippets-python-master/packages/peewee_sp/mysql_rt_db.py": {
        "MySQLRTDatabase.execute_sql": {
            "name": "execute_sql",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "params": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "commit": [
                    "bool",
                    "Pattern"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/peewee_sp/order_by_sp.py": {
        "create_db": {
            "name": "create_db",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "insert_values": {
            "name": "insert_values",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_values": {
            "name": "get_values",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/queries.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "insert_row": {
            "name": "insert_row",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "insert_many_rows": {
            "name": "insert_many_rows",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "insert_or_update": {
            "name": "insert_or_update",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "insert_or_update2": {
            "name": "insert_or_update2",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "update_or_create": {
            "name": "update_or_create",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "create_row": {
            "name": "create_row",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "get_or_create": {
            "name": "get_or_create",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "save_row": {
            "name": "save_row",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "update_some": {
            "name": "update_some",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "get_one": {
            "name": "get_one",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "get_all": {
            "name": "get_all",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "get_specific_columns": {
            "name": "get_specific_columns",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "get_specific_rows": {
            "name": "get_specific_rows",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "delete_rows": {
            "name": "delete_rows",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "get_ordered_rows": {
            "name": "get_ordered_rows",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "get_count": {
            "name": "get_count",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "get_with_limit_offset": {
            "name": "get_with_limit_offset",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "get_with_paginate": {
            "name": "get_with_paginate",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "sql_of_query": {
            "name": "sql_of_query",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "group_by_query": {
            "name": "group_by_query",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "group_by_query2": {
            "name": "group_by_query2",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "group_by_query_and_sum": {
            "name": "group_by_query_and_sum",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "get_with_distinct": {
            "name": "get_with_distinct",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 325,
            "return": [],
            "arguments": {}
        },
        "Foo.upper_name": {
            "name": "upper_name",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Foo.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Foo.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "code-snippets-python-master/packages/peewee_sp/sqlite_db.py": {},
    "code-snippets-python-master/packages/peewee_sp/__init__.py": {},
    "code-snippets-python-master/packages/peewee_sp/transcation/deco.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_foo_and_bar": {
            "name": "create_foo_and_bar",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/peewee_sp/transcation/__init__.py": {},
    "code-snippets-python-master/packages/pendulum_sp/now.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pendulum_sp/parse_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pendulum_sp/timezone.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pendulum_sp/with_datetime.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pil_sp/create_image.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pil_sp/hello_pil.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pil_sp/read_write_color.py": {
        "print_all_pixel_data": {
            "name": "print_all_pixel_data",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "im": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "draw_points": {
            "name": "draw_points",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "im": [
                    "float",
                    "List[list]",
                    "List[float]"
                ]
            }
        },
        "draw_lines": {
            "name": "draw_lines",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "im": [
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pil_sp/write_text.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/compare_two_model_obj.py": {
        "compare_two_model_obj": {
            "name": "compare_two_model_obj",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, Any]",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "obj_a": [
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]",
                    "List[str]"
                ],
                "obj_b": [
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/custom_data_type.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MyData.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "T"
                ]
            }
        },
        "MyData.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyData.get_validators": {
            "name": "get_validators",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "MyData.myvalidator": {
            "name": "myvalidator",
            "location": 18,
            "return": [
                "str",
                "Callable[[str], T]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[str]",
                    "int",
                    "str"
                ],
                "v": [
                    "bool",
                    "Iterable[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/default_multable_value_pitfall.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/default_value.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/demo_subclass_and_load_data.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FooView.trans_data": {
            "name": "trans_data",
            "location": 16,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[bytes]",
                    "List[Dict]",
                    "List[str]"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "BarView.trans_data": {
            "name": "trans_data",
            "location": 26,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[bytes]",
                    "List[Dict]",
                    "List[str]"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "bytes"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/enum_sp.py": {
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MyIntEnum.get_validators": {
            "name": "get_validators",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "MyIntEnum.myvalidator": {
            "name": "myvalidator",
            "location": 17,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "float"
                ],
                "v": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/fields.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/field_alias_config.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/from_model_to_model.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/hello_pydantic.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/inherit.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/model_init.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/pep_484_types.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/poly_field_with_union.py": {},
    "code-snippets-python-master/packages/pydantic_sp/recursive_models.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/serialization.py": {
        "test_model_and_json": {
            "name": "test_model_and_json",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_none_field": {
            "name": "test_none_field",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MyEncoder.default": {
            "name": "default",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Callable[[Mapping], Awaitable]"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/setting_sp.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/validation_error.py": {
        "format_validation_error": {
            "name": "format_validation_error",
            "location": 15,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "Foo.bar_less_than_10": {
            "name": "bar_less_than_10",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "code-snippets-python-master/packages/pydantic_sp/validators_sp.py": {
        "basic_validator": {
            "name": "basic_validator",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "validator_with_pre": {
            "name": "validator_with_pre",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "validator_with_multi_fields": {
            "name": "validator_with_multi_fields",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "UserModel.name_must_contain_space": {
            "name": "name_must_contain_space",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "UserModel.passwords_match": {
            "name": "passwords_match",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "IntNextCursorDTO.trans_str_cursor_to_int": {
            "name": "trans_str_cursor_to_int",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "Bar.m_less_than_n": {
            "name": "m_less_than_n",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "Bar.n_same_with_n": {
            "name": "n_same_with_n",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        }
    },
    "code-snippets-python-master/packages/pyjwt_sp/pyjwt_sp.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/pypinyin_sp/pypinyin_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/batch_insert_performance.py": {
        "insert_to_redis": {
            "name": "insert_to_redis",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "r": [
                    "int",
                    "Optional[float]",
                    "List[int]",
                    "float"
                ],
                "n": [
                    "int",
                    "dict",
                    "str"
                ],
                "start": [
                    "int",
                    "Optional[float]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/batch_read_performance.py": {
        "read_from_redis": {
            "name": "read_from_redis",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "r": [
                    "int",
                    "float",
                    "Callable",
                    "str",
                    "Dict[str, str]",
                    "type"
                ],
                "n": [
                    "int",
                    "str",
                    "dict"
                ],
                "d": [
                    "int",
                    "float",
                    "Callable",
                    "str",
                    "Dict[str, str]",
                    "type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/hello_redis.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/play_with_key.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/redis_ex.py": {
        "setex": {
            "name": "setex",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "set_ex": {
            "name": "set_ex",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "hsetex": {
            "name": "hsetex",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "ttl": {
            "name": "ttl",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/redis_hset.py": {
        "set_data": {
            "name": "set_data",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "incr_data": {
            "name": "incr_data",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "rem_data": {
            "name": "rem_data",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "set_hash_to_str": {
            "name": "set_hash_to_str",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_exists": {
            "name": "test_exists",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/redis_list.py": {
        "push": {
            "name": "push",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pop": {
            "name": "pop",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/redis_set.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/redis_sp/redis_str.py": {
        "number": {
            "name": "number",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "str_and_number": {
            "name": "str_and_number",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/download_and_upload_img.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/get.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/hello_requests.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/post_file.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/post_json.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/request_cookies.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/request_header.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/request_through_proxy.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/resp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/save_img.py": {
        "save_img": {
            "name": "save_img",
            "location": 6,
            "return": [],
            "arguments": {
                "path": [],
                "url": []
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/sessions.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/requests_sp/timeout_demo.py": {},
    "code-snippets-python-master/packages/retrying_sp/retrying_sp.py": {
        "unreliable_work": {
            "name": "unreliable_work",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "unreliable_work2": {
            "name": "unreliable_work2",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "never_give_up_never_surrender": {
            "name": "never_give_up_never_surrender",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "stop_after_6_attempts": {
            "name": "stop_after_6_attempts",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "stop_after_3_s": {
            "name": "stop_after_3_s",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_2_s": {
            "name": "wait_2_s",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_random_1_to_2_s": {
            "name": "wait_random_1_to_2_s",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_exponential_100": {
            "name": "wait_exponential_100",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "retry_if_io_error": {
            "name": "retry_if_io_error",
            "location": 74,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "might_io_error": {
            "name": "might_io_error",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "only_raise_retry_error_when_not_io_error": {
            "name": "only_raise_retry_error_when_not_io_error",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/schematics_snippets/schematics_demo.py": {
        "hello": {
            "name": "hello",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "default_value": {
            "name": "default_value",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "conversion": {
            "name": "conversion",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "conversion2": {
            "name": "conversion2",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "validate": {
            "name": "validate",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "validate_2": {
            "name": "validate_2",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "model_in_model": {
            "name": "model_in_model",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/schematics_snippets/schematics_dict_type.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/schematics_snippets/schematics_list_type.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/schematics_snippets/schematics_poly_model_type.py": {
        "models": {
            "name": "models",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "inherit_models": {
            "name": "inherit_models",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "claim_models": {
            "name": "claim_models",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "claim_models.claim_func": {
            "name": "claim_func",
            "location": 67,
            "return": [],
            "arguments": {
                "field": [],
                "data": []
            }
        }
    },
    "code-snippets-python-master/packages/schematics_snippets/schematics_types.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/schematics_snippets/validation.py": {
        "validate_model": {
            "name": "validate_model",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "m": [
                    "str",
                    "Union[bytearray, memoryview]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/socket_sp/socket_client_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/socket_sp/socket_server_sp.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/statsd_snippets/hello_statsd.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/stdout_snippets/get_shell_width_height.py": {},
    "code-snippets-python-master/packages/stdout_snippets/print_percentage.py": {
        "print_percentage": {
            "name": "print_percentage",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "now": [
                    "str",
                    "bytes",
                    "int"
                ],
                "total": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "print_percentage_end": {
            "name": "print_percentage_end",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_percentage1": {
            "name": "test_print_percentage1",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_percentage2": {
            "name": "test_print_percentage2",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/stdout_snippets/print_r_b.py": {},
    "code-snippets-python-master/packages/stdout_snippets/print_to_stderr.py": {
        "eprint": {
            "name": "eprint",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/string_io_snippets/hello_string_io.py": {
        "use_as_file": {
            "name": "use_as_file",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "use_as_stream": {
            "name": "use_as_stream",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/string_io_snippets/with_string_io_as_f.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/struct_sp/hello_struct.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/tempfile_sp/hello_tempfile.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/threading_snippets/thread_and_log.py": {
        "worker": {
            "name": "worker",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/threading_snippets/thread_and_queue.py": {
        "worker": {
            "name": "worker",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/threading_snippets/var_in_thread.py": {},
    "code-snippets-python-master/packages/tqdm_sp/description.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/tqdm_sp/manual.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/tqdm_sp/tqdm_sp.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/tuple_snippets/hello_tuple.py": {
        "fun1": {
            "name": "fun1",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fun2": {
            "name": "fun2",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/any_sp.py": {
        "foo": {
            "name": "foo",
            "location": 5,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "bar": {
            "name": "bar",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/callable_sp.py": {
        "feeder": {
            "name": "feeder",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "get_next_item": [
                    "Callable[[], str]",
                    "List[Tuple[str, int]]",
                    "int",
                    "Optional[float]",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "async_query": {
            "name": "async_query",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "on_success": [
                    "Callable[[int], None]",
                    "bool",
                    "str"
                ],
                "on_error": [
                    "Callable[[int], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/generics_sp.py": {
        "zero_all_vars": {
            "name": "zero_all_vars",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "vars": [
                    "T",
                    "Callable",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "LoggedVar.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "logger": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[str]",
                    "Tuple[str, int]"
                ]
            }
        },
        "LoggedVar.set": {
            "name": "set",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new": [
                    "int",
                    "List[str]",
                    "Iterable[T]",
                    "dict",
                    "str",
                    "T"
                ]
            }
        },
        "LoggedVar.get": {
            "name": "get",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggedVar.log": {
            "name": "log",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/typing_snippets/int_it.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/models_by_typing.py": {
        "to_reply_dto": {
            "name": "to_reply_dto",
            "location": 16,
            "return": [],
            "arguments": {
                "data": [],
                "reply_type": []
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "AutoReplyDTO.from_model": {
            "name": "from_model",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "dao": []
            }
        },
        "AutoReplyDAO.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "mp_id": [],
                "reply_type": [],
                "data": []
            }
        }
    },
    "code-snippets-python-master/packages/typing_snippets/new_type_sp.py": {
        "get_user_name": {
            "name": "get_user_name",
            "location": 7,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/self_sp.py": {
        "C.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "C.factory": {
            "name": "factory",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "code-snippets-python-master/packages/typing_snippets/type_hint_sp.py": {
        "greeting": {
            "name": "greeting",
            "location": 5,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "greeting_many": {
            "name": "greeting_many",
            "location": 11,
            "return": [],
            "arguments": {
                "names": []
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/type_var_sp.py": {
        "repeat": {
            "name": "repeat",
            "location": 9,
            "return": [],
            "arguments": {
                "x": [],
                "n": []
            }
        },
        "longest": {
            "name": "longest",
            "location": 14,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/typy_alias_sp.py": {
        "scale": {
            "name": "scale",
            "location": 11,
            "return": [
                "int",
                "bool",
                "list",
                "Iterable[int]",
                "float",
                "List[List[int]]"
            ],
            "arguments": {
                "scalar": [
                    "float",
                    "int",
                    "Sequence[int]",
                    "List[int]"
                ],
                "vector": [
                    "float",
                    "int",
                    "Sequence[int]",
                    "List[int]"
                ]
            }
        },
        "broadcast_message1": {
            "name": "broadcast_message1",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ],
                "servers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "broadcast_message2": {
            "name": "broadcast_message2",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ],
                "servers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/typing_snippets/union_sp.py": {
        "foo": {
            "name": "foo",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "Union[str, int]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "foo2": {
            "name": "foo2",
            "location": 9,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "foo3": {
            "name": "foo3",
            "location": 15,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/wtforms_sp/hello_wtforms.py": {
        "without_space": {
            "name": "without_space",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "form": [
                    "str",
                    "wtforms.Form"
                ],
                "field": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[Tuple[str, Any]]",
                    "int",
                    "Container[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/xerox_sp/xerox_sp.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/packages/xml_parse_sp/xmltodict_sp.py": {
        "parse_f": {
            "name": "parse_f",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_s": {
            "name": "parse_s",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/001-covert-img-to-rgb/app.py": {
        "covert_a": {
            "name": "covert_a",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "covert_b": {
            "name": "covert_b",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/002-covert-mindmap-csv-to-dict/app.py": {
        "add_items": {
            "name": "add_items",
            "location": 5,
            "return": [],
            "arguments": {
                "data": [],
                "growth_nodes": [],
                "items": []
            }
        },
        "csv2dict": {
            "name": "csv2dict",
            "location": 30,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "find_key": {
            "name": "find_key",
            "location": 43,
            "return": [],
            "arguments": {
                "data": [],
                "growth_nodes": [],
                "key": []
            }
        },
        "find": {
            "name": "find",
            "location": 59,
            "return": [],
            "arguments": {
                "data": [],
                "key": []
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/003-wear-a-mask-today/app.py": {
        "get_aqi": {
            "name": "get_aqi",
            "location": 9,
            "return": [],
            "arguments": {
                "city": []
            }
        },
        "send_msg": {
            "name": "send_msg",
            "location": 22,
            "return": [],
            "arguments": {
                "title": [],
                "desc": []
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/004-for-jump-jump/app.py": {},
    "code-snippets-python-master/prjs/005-clipbot/bot.py": {
        "is_a_valid_url": {
            "name": "is_a_valid_url",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_title_from_url": {
            "name": "get_title_from_url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot"
                ],
                "update": [
                    "telegram.Update",
                    "bool",
                    "str",
                    "Union[str, Iterable[str]]",
                    "List[Dict[str, str]]",
                    "Tuple[Any, Any, Any, Any, Any]"
                ]
            }
        },
        "help": {
            "name": "help",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "bool",
                    "str",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "List[Dict[str, str]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "telegram.update.Update",
                    "bytes"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.boBot",
                    "int",
                    "bool",
                    "Exception",
                    "List[str]"
                ],
                "update": [
                    "int",
                    "str",
                    "logging.Logger",
                    "float",
                    "Union[int, float]"
                ],
                "error": [
                    "int",
                    "str",
                    "logging.Logger",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s1_aiohttp.py": {},
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s1_requests.py": {
        "hello": {
            "name": "hello",
            "location": 4,
            "return": [
                "str",
                "int",
                "dict",
                "Optional[List[Any]]",
                "Tuple[str, str]"
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s2_aiohttp.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s2_requests.py": {
        "fetch": {
            "name": "fetch",
            "location": 5,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "i": [
                    "int",
                    "list",
                    "Callable[[int], str]"
                ],
                "session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s3_aiohttp.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s3_aiohttp2.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s3_requests.py": {
        "fetch": {
            "name": "fetch",
            "location": 5,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "i": [
                    "int",
                    "list",
                    "Callable[[int], str]"
                ],
                "session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/006-make-1-million-requests-with-python-aiohttp/s3_server.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/008-marshmallow-schematics/app.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/008-marshmallow-schematics/daos.py": {
        "FooDAO.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "code-snippets-python-master/prjs/009-insert-mass-data-to-db/app.py": {
        "chunks": {
            "name": "chunks",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "start": [
                    "int",
                    "float"
                ],
                "stop": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "code-snippets-python-master/prjs/010-add-bom-to-file/app.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        }
    },
    "code-snippets-python-master/prjs/011-read-mass-data-from-db/app.py": {
        "chunks": {
            "name": "chunks",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "Set[str]",
                "Iterable[str]",
                "Set[VT]",
                "Set[Tuple[int, int]]",
                "list"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ]
            }
        }
    },
    "code-snippets-python-master/prjs/012-draw-text-on-img/app.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {
                "bg_img_file_name": [],
                "configs": []
            }
        },
        "draw_text_on_image": {
            "name": "draw_text_on_image",
            "location": 20,
            "return": [],
            "arguments": {
                "bg_img_file_name": [],
                "user": []
            }
        },
        "_create_bg_image": {
            "name": "_create_bg_image",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/013-download-ow365pages/app.py": {
        "make_dir_if_not_exists": {
            "name": "make_dir_if_not_exists",
            "location": 7,
            "return": [],
            "arguments": {
                "dir": []
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "OW365Downloader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OW365Downloader._get_next_page": {
            "name": "_get_next_page",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "vid": [],
                "img_id": []
            }
        },
        "OW365Downloader._download_img_by_id": {
            "name": "_download_img_by_id",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "img_id": [],
                "index": [],
                "doc_id": []
            }
        },
        "OW365Downloader.download_imgs_by_ids": {
            "name": "download_imgs_by_ids",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "img_ids": [],
                "doc_id": []
            }
        },
        "OW365Downloader._test_download_img": {
            "name": "_test_download_img",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OW365Downloader.get_all_img_id": {
            "name": "get_all_img_id",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "vid": [],
                "first_img_id": []
            }
        }
    },
    "code-snippets-python-master/prjs/014-count-text/app.py": {
        "read_data": {
            "name": "read_data",
            "location": 6,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "List[Pattern]",
                "bool"
            ],
            "arguments": {}
        },
        "write_date": {
            "name": "write_date",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "str",
                    "Container",
                    "T"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/015-jieba-and-recipe/app.py": {
        "cut_txt": {
            "name": "cut_txt",
            "location": 9,
            "return": [],
            "arguments": {
                "txt": [],
                "mark": []
            }
        },
        "get_titles_from_file": {
            "name": "get_titles_from_file",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "get_titles": {
            "name": "get_titles",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/016-common-3500-hanzi-pinyin/app.py": {},
    "code-snippets-python-master/prjs/017-url-encode/app.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/018-pornhub-style-icon-generator/app.py": {
        "rounded_rectangle": {
            "name": "rounded_rectangle",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "p1p2": [],
                "corner_radius": [],
                "fill": [],
                "outline": []
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/019-read-video-duration/app.py": {
        "get_duration": {
            "name": "get_duration",
            "location": 4,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/020-random-yuque-page-id/app.py": {
        "base36encode": {
            "name": "base36encode",
            "location": 4,
            "return": [],
            "arguments": {
                "number": [],
                "alphabet": []
            }
        },
        "base36decode": {
            "name": "base36decode",
            "location": 26,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "random_yuque_page_id": {
            "name": "random_yuque_page_id",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/021-how-many-ip-in-china/app.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/022-http-chunked-exp-with-flask/app.py": {
        "hello": {
            "name": "hello",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "generate_large_csv": {
            "name": "generate_large_csv",
            "location": 14,
            "return": [
                "List[str]",
                "int",
                "Dict[str, Any]",
                "flask.Response",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "generate_large_csv.generate": {
            "name": "generate",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/023-socket-http-client/get.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/023-socket-http-client/post.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/024-how-long-the-course/app.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/prjs/025-go-night-readme/app.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "replace_s": {
            "name": "replace_s",
            "location": 15,
            "return": [],
            "arguments": {
                "s": [],
                "b_data": [],
                "y_data": []
            }
        }
    },
    "code-snippets-python-master/prjs/026-json2csv/app.py": {
        "load_json": {
            "name": "load_json",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "ds_2_rows": {
            "name": "ds_2_rows",
            "location": 11,
            "return": [
                "dict",
                "bytes",
                "str",
                "tuple"
            ],
            "arguments": {
                "d1": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "d2": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "d3": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "dump_csv": {
            "name": "dump_csv",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "rows": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableMapping]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/sdks/qiniu/app.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/sdks/qiniu/qiniu_client.py": {
        "get_image_type_of_file_data": {
            "name": "get_image_type_of_file_data",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_data": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_image_type_of_file": {
            "name": "get_image_type_of_file",
            "location": 14,
            "return": [
                "str",
                "Tuple[Type]",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Callable",
                    "Callable[[str], str]"
                ]
            }
        },
        "QiniuClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "access_key": [
                    "Dict[str, str]",
                    "List[str]"
                ],
                "secret_key": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Pattern[str]",
                    "Dict[int, List[str]]"
                ],
                "bucket": [
                    "str",
                    "int"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "prefix": [
                    "str",
                    "int"
                ]
            }
        },
        "QiniuClient.upload_img": {
            "name": "upload_img",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "img_data": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "QiniuClient.upload_img_file": {
            "name": "upload_img_file",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "local_img_file": [
                    "str",
                    "TextIO",
                    "Sequence[str]"
                ]
            }
        }
    },
    "code-snippets-python-master/sdks/qiniu/__init__.py": {},
    "code-snippets-python-master/sdks/qiniu/config/sample_config.py": {},
    "code-snippets-python-master/sdks/qiniu/config/__init__.py": {},
    "code-snippets-python-master/utils/001-read-ids-from-file/app.py": {
        "read_ids_from_file": {
            "name": "read_ids_from_file",
            "location": 5,
            "return": [
                "str",
                "Tuple[str, int, str]"
            ],
            "arguments": {
                "ids_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/001-read-ids-from-file/write_ids_to_file.py": {
        "write_ids_to_file": {
            "name": "write_ids_to_file",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "ids_file": [
                    "str"
                ],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/002-show-progress/app.py": {
        "show_progress": {
            "name": "show_progress",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/003-upload-temp-file-with-string-io/app.py": {},
    "code-snippets-python-master/utils/004-get-title-from-url/app.py": {
        "is_a_valid_url": {
            "name": "is_a_valid_url",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_title_from_url": {
            "name": "get_title_from_url",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/005-get-image-type/app.py": {
        "get_image_type_of_file": {
            "name": "get_image_type_of_file",
            "location": 4,
            "return": [
                "str",
                "Tuple[Type]",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Callable",
                    "Callable[[str], str]"
                ]
            }
        },
        "get_image_type_of_file_data": {
            "name": "get_image_type_of_file_data",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_data": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/005-string-generator/app.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/006-text-mosaic/app.py": {
        "text_mosaic": {
            "name": "text_mosaic",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/007-add-params-to-url/app.py": {
        "add_params_to_url": {
            "name": "add_params_to_url",
            "location": 8,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "int",
                "Union[str, bytes]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Tuple[str]",
                    "List[Type]"
                ],
                "params": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Type]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/008-pydantic-with-pendulum/app.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "MyDatetime.get_validators": {
            "name": "get_validators",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MyDatetime.parse_to_cst_local_datetime": {
            "name": "parse_to_cst_local_datetime",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "dt": []
            }
        }
    },
    "code-snippets-python-master/utils/009-download-then-upload-image-file/app.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/010-stack-overflow/app.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "bar": {
            "name": "bar",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/011-unicode-range/app.py": {
        "is_chinese_char": {
            "name": "is_chinese_char",
            "location": 1,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "is_number_char": {
            "name": "is_number_char",
            "location": 6,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "is_alphabet_char": {
            "name": "is_alphabet_char",
            "location": 11,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/012-yes-or-no/app.py": {
        "yes_or_no": {
            "name": "yes_or_no",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "prompt": [
                    "str",
                    "float",
                    "Callable",
                    "Union[int, float]",
                    "bool",
                    "Optional[List[int]]"
                ],
                "true_value": [
                    "int",
                    "Optional[bool]",
                    "bytes"
                ],
                "false_value": [
                    "int",
                    "Optional[bool]",
                    "bytes"
                ],
                "default": [
                    "str",
                    "bool",
                    "list",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/013-this-week/app.py": {
        "this_monday_and_related_sunday": {
            "name": "this_monday_and_related_sunday",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/014-mean/app.py": {
        "mean": {
            "name": "mean",
            "location": 1,
            "return": [
                "bool",
                "str",
                "Iterator[int]",
                "float"
            ],
            "arguments": {
                "l": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "List[Tuple[str, str]]",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "code-snippets-python-master/utils/015-base36/app.py": {
        "base36encode": {
            "name": "base36encode",
            "location": 1,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Sequence[T]",
                    "Callable[[], float]",
                    "List[int]",
                    "List[float]"
                ],
                "alphabet": [
                    "List[int]",
                    "List[float]",
                    "bytearray",
                    "str",
                    "List[Tuple[int, int]]",
                    "Sequence[T]"
                ]
            }
        },
        "base36decode": {
            "name": "base36decode",
            "location": 23,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "number": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
{
    "coding-challenges-master/dailyprogrammer/104_easy_powerplant.py": {},
    "coding-challenges-master/dailyprogrammer/107_easy_alldecodings.py": {},
    "coding-challenges-master/dailyprogrammer/109_easy_digitscheck.py": {},
    "coding-challenges-master/dailyprogrammer/110_easy_keyboardshift.py": {},
    "coding-challenges-master/dailyprogrammer/111_easy_stardelete.py": {},
    "coding-challenges-master/dailyprogrammer/113_easy_stringtype.py": {},
    "coding-challenges-master/dailyprogrammer/113_easy_stringtype2.py": {},
    "coding-challenges-master/dailyprogrammer/114_easy_wordladder.py": {},
    "coding-challenges-master/dailyprogrammer/115_easy_guessnumber.py": {},
    "coding-challenges-master/dailyprogrammer/116_easy_permutation.py": {},
    "coding-challenges-master/dailyprogrammer/117_easy_hexdump.py": {},
    "coding-challenges-master/dailyprogrammer/119_easy_changecalc.py": {},
    "coding-challenges-master/dailyprogrammer/119_int_shortestpath.py": {
        "grid": {
            "name": "grid",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        }
    },
    "coding-challenges-master/dailyprogrammer/122_easy_orderedvowels.py": {},
    "coding-challenges-master/dailyprogrammer/123_easy_digitalroot.py": {},
    "coding-challenges-master/dailyprogrammer/366_word_funnel_1.py": {},
    "coding-challenges-master/dailyprogrammer/59_easy_embeddedstrings.py": {},
    "coding-challenges-master/dailyprogrammer/70_easy_commonwords.py": {},
    "coding-challenges-master/dailyprogrammer/76_easy_titlecase.py": {
        "titlecase": {
            "name": "titlecase",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "phrase": [
                    "str",
                    "Tuple[int, int]",
                    "IO[str]",
                    "int",
                    "bool",
                    "dict"
                ],
                "exceptions": [
                    "list",
                    "str",
                    "Sequence['cirq.Qid']",
                    "bool"
                ]
            }
        }
    },
    "coding-challenges-master/dailyprogrammer/86_easy_runlength.py": {},
    "coding-challenges-master/dailyprogrammer/87_easy_rect-intersection.py": {},
    "coding-challenges-master/dailyprogrammer/99_easy_alphabetical-order.py": {},
    "coding-challenges-master/leetcode/01_twosum.py": {
        "Solution.TwoSum": {
            "name": "TwoSum",
            "location": 16,
            "return": [
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[T]",
                "Optional[Iterable[Any]]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "list",
                    "List[List[Any]]",
                    "str",
                    "int"
                ],
                "target": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Solution.TwoSum2": {
            "name": "TwoSum2",
            "location": 26,
            "return": [
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[T]",
                "Optional[Iterable[Any]]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ],
                "target": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/09_palindrone_number.py": {
        "Solution.isPalindrome": {
            "name": "isPalindrome",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Pattern",
                    "List[str]",
                    "Iterable",
                    "dict"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/1002_find_common_characters.py": {
        "Solution.commonChars": {
            "name": "commonChars",
            "location": 17,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "int",
                    "List[float]",
                    "Union[tuple, list]"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/1108_defanging_ip.py": {
        "Solution.defangIPaddr": {
            "name": "defangIPaddr",
            "location": 10,
            "return": [
                "str",
                "bool",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "list",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/136_single_number.py": {},
    "coding-challenges-master/leetcode/476_number_complement.py": {
        "Solution.findComplement": {
            "name": "findComplement",
            "location": 9,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/500_keyboard_row.py": {
        "Solution.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.findWords": {
            "name": "findWords",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]",
                "Tuple[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/657_robot_return_to_origin.py": {
        "Solution.judgeCircle": {
            "name": "judgeCircle",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "moves": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/686_repeated_string_match.py": {
        "Solution.repeatedStringMatch": {
            "name": "repeatedStringMatch",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "A": [],
                "B": []
            }
        }
    },
    "coding-challenges-master/leetcode/771_jewels_and_stones.py": {
        "Solution.numJewelsInStones": {
            "name": "numJewelsInStones",
            "location": 21,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "J": [
                    "str",
                    "Iterable"
                ],
                "S": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Solution.numJewelsInStones2": {
            "name": "numJewelsInStones2",
            "location": 27,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "J": [
                    "str",
                    "Iterable"
                ],
                "S": [
                    "str",
                    "Iterable"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/804_unique_morse_code_words.py": {
        "Solution.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.create_dict": {
            "name": "create_dict",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": [],
                "alphabet": [
                    "str"
                ],
                "morse_codes": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "Solution.uniqueMorseRepresentations": {
            "name": "uniqueMorseRepresentations",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "List[str]",
                    "Iterable[T]",
                    "bool",
                    "Callable[[], bytes]"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/807_max_increase_city_skyline.py": {
        "Solution.maxIncreaseKeepingSkyline": {
            "name": "maxIncreaseKeepingSkyline",
            "location": 28,
            "return": [
                "'int'"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/832_flipping_an_image.py": {
        "Solution.flipAndInvertImage": {
            "name": "flipAndInvertImage",
            "location": 17,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "List[List[int]]",
                    "int",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/905_sort_array_by_parity.py": {
        "Solution.sortArrayByParity": {
            "name": "sortArrayByParity",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/922_sort_array_by_parity_ii.py": {
        "Solution.sortArrayByParityII": {
            "name": "sortArrayByParityII",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "Optional[int]",
                    "Optional[str]",
                    "Union[int, None]"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/929_unique_email_addresses.py": {
        "Solution.numUniqueEmails": {
            "name": "numUniqueEmails",
            "location": 7,
            "return": [
                "bool",
                "type",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "emails": [
                    "List[str]",
                    "str",
                    "bool",
                    "list",
                    "dict"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/961_n_repeated_element.py": {
        "Solution.repeatedNTimes": {
            "name": "repeatedNTimes",
            "location": 16,
            "return": [
                "int",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "List[int]",
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/965_univalued_binary_tree.py": {
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "Solution.isUnivalTree": {
            "name": "isUnivalTree",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "bool",
                    "\"RequirementsFile\""
                ]
            }
        },
        "Solution.search": {
            "name": "search",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "List[str]",
                    "set",
                    "Set[str]",
                    "Dict[Any, list]",
                    "Tuple[object]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "set",
                    "Set[str]",
                    "Dict[Any, list]",
                    "Tuple[object]"
                ]
            }
        }
    },
    "coding-challenges-master/leetcode/977_squares_sorted_array.py": {
        "Solution.sortedSquares": {
            "name": "sortedSquares",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Solution.sortedSquares2": {
            "name": "sortedSquares2",
            "location": 17,
            "return": [
                "int",
                "List[str]",
                "float",
                "Sequence[T]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "List[int]",
                    "float",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "Solution.sortedSquares3": {
            "name": "sortedSquares3",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "int",
                    "List[int]",
                    "list",
                    "float"
                ]
            }
        }
    }
}
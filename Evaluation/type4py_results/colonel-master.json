{
    "colonel-master/setup.py": {},
    "colonel-master/colonel/base_rich_sentence_element.py": {
        "BaseRichSentenceElement.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "upos": [
                    "Optional[\"Environment\"]",
                    "bool",
                    "str"
                ],
                "xpos": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "feats": [
                    "Optional[List[str]]"
                ],
                "deps": [
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseRichSentenceElement.is_valid": {
            "name": "is_valid",
            "location": 81,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRichSentenceElement._feats_to_conllu": {
            "name": "_feats_to_conllu",
            "location": 96,
            "return": [
                "int",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRichSentenceElement._deps_to_conllu": {
            "name": "_deps_to_conllu",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRichSentenceElement.to_conllu": {
            "name": "to_conllu",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/colonel/base_sentence_element.py": {
        "BaseSentenceElement.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "misc": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "BaseSentenceElement.is_valid": {
            "name": "is_valid",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSentenceElement.to_conllu": {
            "name": "to_conllu",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/colonel/emptynode.py": {
        "EmptyNode.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_index": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "sub_index": [
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "EmptyNode.is_valid": {
            "name": "is_valid",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyNode.to_conllu": {
            "name": "to_conllu",
            "location": 71,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/colonel/multiword.py": {
        "Multiword.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_index": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "float"
                ],
                "last_index": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "float"
                ]
            }
        },
        "Multiword.is_valid": {
            "name": "is_valid",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multiword.to_conllu": {
            "name": "to_conllu",
            "location": 76,
            "return": [
                "int",
                "str",
                "tuple",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/colonel/sentence.py": {
        "Sentence.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "str",
                    "List[dict]",
                    "Dict[str, Any]",
                    "List[\"IntensityTable\"]",
                    "Optional[List[Any]]",
                    "list"
                ],
                "comments": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Sentence.words": {
            "name": "words",
            "location": 78,
            "return": [
                "typing.Iterator[colonel.word.Word]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.raw_tokens": {
            "name": "raw_tokens",
            "location": 97,
            "return": [
                "typing.Iterator[typing.Union[colonel.word.Word, colonel.multiword.Multiword]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.is_valid": {
            "name": "is_valid",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sentence._all_elements_are_valid": {
            "name": "_all_elements_are_valid",
            "location": 168,
            "return": [
                "List[str]",
                "dict",
                "tuple",
                "str",
                "Set[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence._starts_with_valid_index": {
            "name": "_starts_with_valid_index",
            "location": 174,
            "return": [
                "dict",
                "int",
                "Mapping[str, Any]",
                "List[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence._no_indexes_overlap": {
            "name": "_no_indexes_overlap",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence._sequence_is_valid": {
            "name": "_sequence_is_valid",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "list",
                    "List[str]",
                    "List[tuple]",
                    "List[List[Any]]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "int"
                ],
                "index": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ],
                "sub_index": [
                    "int",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "Sentence._heads_are_valid": {
            "name": "_heads_are_valid",
            "location": 252,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence._has_word_with_index": {
            "name": "_has_word_with_index",
            "location": 270,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Sentence.to_conllu": {
            "name": "to_conllu",
            "location": 276,
            "return": [
                "str",
                "dict",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/colonel/upostag.py": {},
    "colonel-master/colonel/word.py": {
        "Word.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[int]",
                    "str",
                    "List[dict]",
                    "float"
                ],
                "head": [
                    "Optional[int]",
                    "str",
                    "List[dict]",
                    "float"
                ],
                "deprel": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Word.is_valid": {
            "name": "is_valid",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.to_conllu": {
            "name": "to_conllu",
            "location": 73,
            "return": [
                "str",
                "Union[str, int]",
                "Union[dict, list]",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/colonel/__init__.py": {},
    "colonel-master/colonel/conllu/lexer.py": {
        "IllegalCharacterError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "List[str]",
                    "bool",
                    "Sequence"
                ]
            }
        },
        "ConlluLexerBuilder.t_v0_v1_v2_v3_v4_v5_v6_v7_v8_TAB": {
            "name": "t_v0_v1_v2_v3_v4_v5_v6_v7_v8_TAB",
            "location": 113,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "ConlluLexerBuilder.t_COMMENT": {
            "name": "t_COMMENT",
            "location": 120,
            "return": [
                "str",
                "dict",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "str",
                    "Sequence[str]",
                    "Hashable",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "ConlluLexerBuilder.t_RANGE_ID": {
            "name": "t_RANGE_ID",
            "location": 126,
            "return": [
                "dict",
                "bool",
                "int",
                "float",
                "Iterable[str]"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken"
                ]
            }
        },
        "ConlluLexerBuilder.t_DECIMAL_ID": {
            "name": "t_DECIMAL_ID",
            "location": 133,
            "return": [
                "dict",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken"
                ]
            }
        },
        "ConlluLexerBuilder.t_INTEGER_ID": {
            "name": "t_INTEGER_ID",
            "location": 140,
            "return": [
                "dict",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "List[str]",
                    "Dict[int, bool]"
                ]
            }
        },
        "ConlluLexerBuilder.t_c1_FORM": {
            "name": "t_c1_FORM",
            "location": 147,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "List[int]"
                ]
            }
        },
        "ConlluLexerBuilder.t_c2_LEMMA": {
            "name": "t_c2_LEMMA",
            "location": 153,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "List[int]"
                ]
            }
        },
        "ConlluLexerBuilder.t_c3_UPOS": {
            "name": "t_c3_UPOS",
            "location": 160,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConlluLexerBuilder.t_c4_XPOS": {
            "name": "t_c4_XPOS",
            "location": 167,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConlluLexerBuilder.t_c5_FEATS": {
            "name": "t_c5_FEATS",
            "location": 175,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken"
                ]
            }
        },
        "ConlluLexerBuilder.t_c6_HEAD": {
            "name": "t_c6_HEAD",
            "location": 185,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken"
                ]
            }
        },
        "ConlluLexerBuilder.t_c7_DEPREL": {
            "name": "t_c7_DEPREL",
            "location": 192,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConlluLexerBuilder.t_c8_DEPS": {
            "name": "t_c8_DEPS",
            "location": 200,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "ConlluLexerBuilder.t_c9_MISC": {
            "name": "t_c9_MISC",
            "location": 210,
            "return": [
                "dict",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConlluLexerBuilder.t_INITIAL_v9_NEWLINE": {
            "name": "t_INITIAL_v9_NEWLINE",
            "location": 216,
            "return": [
                "str",
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ply.lex.LexToken",
                    "List[str]",
                    "List[List[str]]",
                    "bytes"
                ]
            }
        },
        "ConlluLexerBuilder.t_ANY_error": {
            "name": "t_ANY_error",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "ply.lex.LexToken",
                    "str",
                    "ImportError"
                ]
            }
        },
        "ConlluLexerBuilder.find_column": {
            "name": "find_column",
            "location": 229,
            "return": [
                "Callable",
                "Dict[str, Union[str, Set]]",
                "int"
            ],
            "arguments": {
                "token": [
                    "Optional[str]",
                    "dict",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ConlluLexerBuilder.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConlluLexerBuilder.build": {
            "name": "build",
            "location": 240,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "colonel-master/colonel/conllu/parser.py": {
        "IllegalTokenError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "Callable",
                    "list"
                ]
            }
        },
        "IllegalEofError.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IllegalMultiwordError.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prod": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IllegalEmptyNodeError.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prod": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConlluParserBuilder.p_sentences_many": {
            "name": "p_sentences_many",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_sentences_one": {
            "name": "p_sentences_one",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_sentence_with_comments": {
            "name": "p_sentence_with_comments",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_sentence_without_comments": {
            "name": "p_sentence_without_comments",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_comments_many": {
            "name": "p_comments_many",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_comments_one": {
            "name": "p_comments_one",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_comment": {
            "name": "p_comment",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_wordlines_many": {
            "name": "p_wordlines_many",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_wordlines_one": {
            "name": "p_wordlines_one",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConlluParserBuilder.p_wordline_word": {
            "name": "p_wordline_word",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "str",
                    "Union[int, slice]"
                ]
            }
        },
        "ConlluParserBuilder.p_wordline_multiword": {
            "name": "p_wordline_multiword",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ConlluParserBuilder.p_wordline_emptynode": {
            "name": "p_wordline_emptynode",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "prod": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ConlluParserBuilder.p_error": {
            "name": "p_error",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "ConlluParserBuilder.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConlluParserBuilder.build": {
            "name": "build",
            "location": 244,
            "return": [],
            "arguments": {
                "cls": [
                    "List[int]",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "colonel-master/colonel/conllu/__init__.py": {
        "parse": {
            "name": "parse",
            "location": 37,
            "return": [
                "bytes",
                "List[str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "content": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "to_conllu": {
            "name": "to_conllu",
            "location": 51,
            "return": [
                "List[int]",
                "List[dict]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "sentences": [
                    "float",
                    "List[colonel.sentence.Sentence]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "colonel-master/docs/source/conf.py": {},
    "colonel-master/tests/test_base_sentence_element.py": {
        "TestBaseSentenceElement.test_init_form": {
            "name": "test_init_form",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseSentenceElement.test_init_misc": {
            "name": "test_init_misc",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseSentenceElement.test_is_valid_true_with_no_values_set": {
            "name": "test_is_valid_true_with_no_values_set",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseSentenceElement.test_is_valid_true_with_all_values_set": {
            "name": "test_is_valid_true_with_all_values_set",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseSentenceElement.test_to_conllu_is_not_implemented": {
            "name": "test_to_conllu_is_not_implemented",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/test_emptynode.py": {
        "TestEmptyNode.test_init_main_index": {
            "name": "test_init_main_index",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_sub_index": {
            "name": "test_init_sub_index",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_form": {
            "name": "test_init_form",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_lemma": {
            "name": "test_init_lemma",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_upos": {
            "name": "test_init_upos",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_xpos": {
            "name": "test_init_xpos",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_feats": {
            "name": "test_init_feats",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_deps": {
            "name": "test_init_deps",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_init_misc": {
            "name": "test_init_misc",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_false_with_no_values_set": {
            "name": "test_is_valid_false_with_no_values_set",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_false_with_main_index_is_not_set": {
            "name": "test_is_valid_false_with_main_index_is_not_set",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_false_with_sub_index_is_not_set": {
            "name": "test_is_valid_false_with_sub_index_is_not_set",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_false_with_main_index_less_than_zero": {
            "name": "test_is_valid_false_with_main_index_less_than_zero",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_false_with_sub_index_less_than_zero": {
            "name": "test_is_valid_false_with_sub_index_less_than_zero",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_true_with_main_index_equal_to_zero": {
            "name": "test_is_valid_true_with_main_index_equal_to_zero",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_false_with_sub_index_equal_to_zero": {
            "name": "test_is_valid_false_with_sub_index_equal_to_zero",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_true_with_main_index_greater_than_zero": {
            "name": "test_is_valid_true_with_main_index_greater_than_zero",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_true_with_sub_index_greater_than_zero": {
            "name": "test_is_valid_true_with_sub_index_greater_than_zero",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_is_valid_true_with_all_values_set": {
            "name": "test_is_valid_true_with_all_values_set",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_of_invalid_sentence_with_no_attributes": {
            "name": "test_to_conllu_of_invalid_sentence_with_no_attributes",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_of_sentence_with_all_attributes": {
            "name": "test_to_conllu_of_sentence_with_all_attributes",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_with_feats_as_str": {
            "name": "test_to_conllu_with_feats_as_str",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_with_feats_as_tuple": {
            "name": "test_to_conllu_with_feats_as_tuple",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_raises_error_with_unsupported_feats_type": {
            "name": "test_to_conllu_raises_error_with_unsupported_feats_type",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_with_deps_str": {
            "name": "test_to_conllu_with_deps_str",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_with_deps_tuple": {
            "name": "test_to_conllu_with_deps_tuple",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmptyNode.test_to_conllu_raises_error_with_unsupported_deps_type": {
            "name": "test_to_conllu_raises_error_with_unsupported_deps_type",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/test_multiword.py": {
        "TestMultiword.test_init_first_index": {
            "name": "test_init_first_index",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_init_last_index": {
            "name": "test_init_last_index",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_init_form": {
            "name": "test_init_form",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_init_misc": {
            "name": "test_init_misc",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_no_values_set": {
            "name": "test_is_valid_false_with_no_values_set",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_first_index_is_not_set": {
            "name": "test_is_valid_false_with_first_index_is_not_set",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_last_index_is_not_set": {
            "name": "test_is_valid_false_with_last_index_is_not_set",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_first_index_less_than_zero": {
            "name": "test_is_valid_false_with_first_index_less_than_zero",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_first_index_equal_to_zero": {
            "name": "test_is_valid_false_with_first_index_equal_to_zero",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_last_index_lower_to_first_index": {
            "name": "test_is_valid_false_with_last_index_lower_to_first_index",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_false_with_last_index_equal_to_first_index": {
            "name": "test_is_valid_false_with_last_index_equal_to_first_index",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_true_with_first_index_greater_than_zero": {
            "name": "test_is_valid_true_with_first_index_greater_than_zero",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_is_valid_true_with_all_values_set": {
            "name": "test_is_valid_true_with_all_values_set",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_to_conllu_of_invalid_sentence_with_no_attributes": {
            "name": "test_to_conllu_of_invalid_sentence_with_no_attributes",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiword.test_to_conllu_of_sentence_with_all_attributes": {
            "name": "test_to_conllu_of_sentence_with_all_attributes",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/test_rich_base_sentence_element.py": {
        "TestBaseRichSentenceElement.test_init_form": {
            "name": "test_init_form",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_init_lemma": {
            "name": "test_init_lemma",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_init_upos": {
            "name": "test_init_upos",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_init_xpos": {
            "name": "test_init_xpos",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_init_feats": {
            "name": "test_init_feats",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_init_deps": {
            "name": "test_init_deps",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_init_misc": {
            "name": "test_init_misc",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_is_valid_true_with_no_values_set": {
            "name": "test_is_valid_true_with_no_values_set",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_is_valid_true_with_all_values_set": {
            "name": "test_is_valid_true_with_all_values_set",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRichSentenceElement.test_to_conllu_is_not_implemented": {
            "name": "test_to_conllu_is_not_implemented",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/test_sentences.py": {
        "TestSentence.test_init_with_some_elements": {
            "name": "test_init_with_some_elements",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_init_with_empty_elements": {
            "name": "test_init_with_empty_elements",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_init_without_elements": {
            "name": "test_init_without_elements",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_init_with_some_comments": {
            "name": "test_init_with_some_comments",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_init_with_empty_comments": {
            "name": "test_init_with_empty_comments",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_init_without_comments": {
            "name": "test_init_without_comments",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_words_on_sentence_wit_mixed_element": {
            "name": "test_words_on_sentence_wit_mixed_element",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_words_on_sentence_without_word_elements": {
            "name": "test_words_on_sentence_without_word_elements",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_words_on_empty_sentence": {
            "name": "test_words_on_empty_sentence",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_raw_tokens_on_sentence_wit_mixed_element": {
            "name": "test_raw_tokens_on_sentence_wit_mixed_element",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_raw_tokens_on_sentence_without_word_and_multiwords": {
            "name": "test_raw_tokens_on_sentence_without_word_and_multiwords",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_raw_tokens_on_empty_sentence": {
            "name": "test_raw_tokens_on_empty_sentence",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_on_empty_sentence": {
            "name": "test_is_valid_false_on_empty_sentence",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_on_sentence_without_word_elements": {
            "name": "test_is_valid_false_on_sentence_without_word_elements",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_on_sentence_with_invalid_elements": {
            "name": "test_is_valid_false_on_sentence_with_invalid_elements",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_first_element_is_word_with_index_not_1": {
            "name": "test_is_valid_false_if_first_element_is_word_with_index_not_1",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_first_element_is_word_with_index_1": {
            "name": "test_is_valid_true_if_first_element_is_word_with_index_1",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_first_element_is_multiword_with_index_not_1": {
            "name": "test_is_valid_false_if_first_element_is_multiword_with_index_not_1",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_first_element_is_multiword_with_index_1": {
            "name": "test_is_valid_true_if_first_element_is_multiword_with_index_1",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_first_element_is_emptynode_with_index_not_0": {
            "name": "test_is_valid_false_if_first_element_is_emptynode_with_index_not_0",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_first_element_is_emptynode_with_index_0": {
            "name": "test_is_valid_true_if_first_element_is_emptynode_with_index_0",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_consecutive_multiwords_overlap": {
            "name": "test_is_valid_false_if_consecutive_multiwords_overlap",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_nonconsecutive_multiwords_overlap": {
            "name": "test_is_valid_false_if_nonconsecutive_multiwords_overlap",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_a_word_index_is_skipped": {
            "name": "test_is_valid_false_if_a_word_index_is_skipped",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_with_two_consecutive_word_indexes": {
            "name": "test_is_valid_true_with_two_consecutive_word_indexes",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_multiword_index_is_skipped": {
            "name": "test_is_valid_false_if_multiword_index_is_skipped",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_multiword_last_index_is_too_big": {
            "name": "test_is_valid_false_if_multiword_last_index_is_too_big",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_multiword_index_range_is_within_sentence_bounds": {
            "name": "test_is_valid_true_if_multiword_index_range_is_within_sentence_bounds",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_two_emptynodes_has_the_same_sub_index": {
            "name": "test_is_valid_false_if_two_emptynodes_has_the_same_sub_index",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_an_emptynode_sub_index_is_skipped": {
            "name": "test_is_valid_false_if_an_emptynode_sub_index_is_skipped",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_an_emptynode_main_index_has_no_word_index": {
            "name": "test_is_valid_false_if_an_emptynode_main_index_has_no_word_index",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_consecutive_emptynodes_have_different_main_id": {
            "name": "test_is_valid_false_if_consecutive_emptynodes_have_different_main_id",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_emptynodes_indexes_are_valid": {
            "name": "test_is_valid_true_if_emptynodes_indexes_are_valid",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_multiwords_are_placed_incorrectly": {
            "name": "test_is_valid_false_if_multiwords_are_placed_incorrectly",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_a_word_has_head_less_than_zero": {
            "name": "test_is_valid_false_if_a_word_has_head_less_than_zero",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_false_if_a_word_has_head_beyond_last_word_index": {
            "name": "test_is_valid_false_if_a_word_has_head_beyond_last_word_index",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_a_word_has_head_zero": {
            "name": "test_is_valid_true_if_a_word_has_head_zero",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_if_a_word_has_head_equals_to_index": {
            "name": "test_is_valid_true_if_a_word_has_head_equals_to_index",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_true_with_word_heads_within_sentence_bounds": {
            "name": "test_is_valid_true_with_word_heads_within_sentence_bounds",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_is_valid_on_a_sentence_with_foreign_elements": {
            "name": "test_is_valid_on_a_sentence_with_foreign_elements",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_to_conllu_with_meaningless_empty_sentence": {
            "name": "test_to_conllu_with_meaningless_empty_sentence",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_to_conllu_with_meaningless_empty_sentence_with_comments": {
            "name": "test_to_conllu_with_meaningless_empty_sentence_with_comments",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_to_conllu_with_many_elements_and_no_comments": {
            "name": "test_to_conllu_with_many_elements_and_no_comments",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentence.test_to_conllu_with_many_elements_and_comments": {
            "name": "test_to_conllu_with_many_elements_and_comments",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/test_word.py": {
        "TestWord.test_init_index": {
            "name": "test_init_index",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_form": {
            "name": "test_init_form",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_lemma": {
            "name": "test_init_lemma",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_upos": {
            "name": "test_init_upos",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_xpos": {
            "name": "test_init_xpos",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_feats": {
            "name": "test_init_feats",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_head": {
            "name": "test_init_head",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_deprel": {
            "name": "test_init_deprel",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_deps": {
            "name": "test_init_deps",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_init_misc": {
            "name": "test_init_misc",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_is_valid_false_with_no_values_set": {
            "name": "test_is_valid_false_with_no_values_set",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_is_valid_false_with_index_less_than_zero": {
            "name": "test_is_valid_false_with_index_less_than_zero",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_is_valid_false_with_index_equal_to_zero": {
            "name": "test_is_valid_false_with_index_equal_to_zero",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_is_valid_true_with_index_greater_than_zero": {
            "name": "test_is_valid_true_with_index_greater_than_zero",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_is_valid_true_with_all_values_set": {
            "name": "test_is_valid_true_with_all_values_set",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_of_invalid_sentence_with_no_attributes": {
            "name": "test_to_conllu_of_invalid_sentence_with_no_attributes",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_of_sentence_with_all_attributes": {
            "name": "test_to_conllu_of_sentence_with_all_attributes",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_with_feats_as_str": {
            "name": "test_to_conllu_with_feats_as_str",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_with_feats_as_tuple": {
            "name": "test_to_conllu_with_feats_as_tuple",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_raises_error_with_unsupported_feats_type": {
            "name": "test_to_conllu_raises_error_with_unsupported_feats_type",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_with_deps_str": {
            "name": "test_to_conllu_with_deps_str",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_with_deps_tuple": {
            "name": "test_to_conllu_with_deps_tuple",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_to_conllu_raises_error_with_unsupported_deps_type": {
            "name": "test_to_conllu_raises_error_with_unsupported_deps_type",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/__init__.py": {},
    "colonel-master/tests/conllu/test_init.py": {
        "TestConlluModule.test_parse_builds_a_parser_and_returns_its_parsed_result": {
            "name": "test_parse_builds_a_parser_and_returns_its_parsed_result",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluModule.test_to_conllu_with_empty_array": {
            "name": "test_to_conllu_with_empty_array",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluModule.test_to_conllu_with_one_sentence": {
            "name": "test_to_conllu_with_one_sentence",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluModule.test_to_conllu_with_meny_sentences": {
            "name": "test_to_conllu_with_meny_sentences",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeSentence.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_conllu": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FakeSentence.to_conllu": {
            "name": "to_conllu",
            "location": 65,
            "return": [
                "float",
                "List[colonel.sentence.Sentence]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/conllu/test_lexer.py": {
        "TestConlluLexerBuilder._tokenize": {
            "name": "_tokenize",
            "location": 25,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestConlluLexerBuilder.test_build_returns_a_lexer": {
            "name": "test_build_returns_a_lexer",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_lexer_error_has_correct_line_and_column": {
            "name": "test_lexer_error_has_correct_line_and_column",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_comment": {
            "name": "test_comment",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_comment_is_stripped": {
            "name": "test_comment_is_stripped",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_empty_comment": {
            "name": "test_empty_comment",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_all_underscores_except_id": {
            "name": "test_valid_all_underscores_except_id",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_integer_id_with_one_digit": {
            "name": "test_valid_integer_id_with_one_digit",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_integer_id_with_many_digits": {
            "name": "test_valid_integer_id_with_many_digits",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_integer_id_equal_to_zero": {
            "name": "test_invalid_integer_id_equal_to_zero",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_integer_id_with_leading_zero": {
            "name": "test_invalid_integer_id_with_leading_zero",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_range_id_with_one_digit": {
            "name": "test_valid_range_id_with_one_digit",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_range_id_with_many_digits": {
            "name": "test_valid_range_id_with_many_digits",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_range_id_with_first_id_equal_to_zero": {
            "name": "test_invalid_range_id_with_first_id_equal_to_zero",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_range_id_with_last_id_equal_to_zero": {
            "name": "test_invalid_range_id_with_last_id_equal_to_zero",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_range_id_with_first_id_with_leading_zero": {
            "name": "test_invalid_range_id_with_first_id_with_leading_zero",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_range_id_with_last_id_with_leading_zero": {
            "name": "test_invalid_range_id_with_last_id_with_leading_zero",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_decimal_id_with_one_digit": {
            "name": "test_valid_decimal_id_with_one_digit",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_decimal_id_with_many_digit": {
            "name": "test_valid_decimal_id_with_many_digit",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_decimal_id_with_sub_id_equal_to_zero": {
            "name": "test_invalid_decimal_id_with_sub_id_equal_to_zero",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_decimal_id_with_first_id_with_leading_zero": {
            "name": "test_invalid_decimal_id_with_first_id_with_leading_zero",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_decimal_id_with_second_id_with_leading_zero": {
            "name": "test_invalid_decimal_id_with_second_id_with_leading_zero",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_id_field": {
            "name": "test_invalid_empty_id_field",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_simple_form": {
            "name": "test_valid_simple_form",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_form_with_spaces": {
            "name": "test_valid_form_with_spaces",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_form_equal_to_underscore": {
            "name": "test_valid_form_equal_to_underscore",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_form_field": {
            "name": "test_invalid_empty_form_field",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_simple_lemma": {
            "name": "test_valid_simple_lemma",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_lemma_with_spaces": {
            "name": "test_valid_lemma_with_spaces",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_lemma_equals_to_underscore": {
            "name": "test_valid_lemma_equals_to_underscore",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_lemma_field": {
            "name": "test_invalid_empty_lemma_field",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_upos": {
            "name": "test_valid_upos",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_upos_equal_to_underscore": {
            "name": "test_valid_upos_equal_to_underscore",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_upos": {
            "name": "test_invalid_upos",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_upos_field": {
            "name": "test_invalid_empty_upos_field",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_xpos": {
            "name": "test_valid_xpos",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_xpos_equal_to_underscore": {
            "name": "test_valid_xpos_equal_to_underscore",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_xpos_with_space": {
            "name": "test_invalid_xpos_with_space",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_xpos_field": {
            "name": "test_invalid_empty_xpos_field",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_feats": {
            "name": "test_valid_feats",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_feats_equal_to_underscore": {
            "name": "test_valid_feats_equal_to_underscore",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_feats": {
            "name": "test_invalid_feats",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_feats_field": {
            "name": "test_invalid_empty_feats_field",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_head_with_one_digit": {
            "name": "test_valid_head_with_one_digit",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_head_with_many_digits": {
            "name": "test_valid_head_with_many_digits",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_head_equal_to_underscore": {
            "name": "test_valid_head_equal_to_underscore",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_head_with_leading_zero": {
            "name": "test_invalid_head_with_leading_zero",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_head_field": {
            "name": "test_invalid_empty_head_field",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_deprel": {
            "name": "test_valid_deprel",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_deprel_equal_to_underscore": {
            "name": "test_valid_deprel_equal_to_underscore",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_deprel_with_space": {
            "name": "test_invalid_deprel_with_space",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_deprel_field": {
            "name": "test_invalid_empty_deprel_field",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_deps_with_one_digit": {
            "name": "test_valid_deps_with_one_digit",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_deps_with_many_digits": {
            "name": "test_valid_deps_with_many_digits",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_deps_equal_to_underscore": {
            "name": "test_valid_deps_equal_to_underscore",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_deps": {
            "name": "test_invalid_deps",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_deps_with_leading_zero": {
            "name": "test_invalid_deps_with_leading_zero",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_deps_field": {
            "name": "test_invalid_empty_deps_field",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_misc": {
            "name": "test_valid_misc",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_valid_misc_equal_to_underscore": {
            "name": "test_valid_misc_equal_to_underscore",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_misc_with_space": {
            "name": "test_invalid_misc_with_space",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_invalid_empty_misc_field": {
            "name": "test_invalid_empty_misc_field",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluLexerBuilder.test_multiple_comments_and_word_lines": {
            "name": "test_multiple_comments_and_word_lines",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/conllu/test_parser.py": {
        "TestConlluParserBuilder._parse": {
            "name": "_parse",
            "location": 31,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "parser.Parser",
                    "Optional[bytes]",
                    "list"
                ]
            }
        },
        "TestConlluParserBuilder.test_build_returns_a_parser": {
            "name": "test_build_returns_a_parser",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_token_error_has_expected_attributes": {
            "name": "test_token_error_has_expected_attributes",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_eof_error": {
            "name": "test_eof_error",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_one_sentence": {
            "name": "test_one_sentence",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_many_sentences": {
            "name": "test_many_sentences",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_one_comment": {
            "name": "test_one_comment",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_many_comments": {
            "name": "test_many_comments",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_sentence_without_comments": {
            "name": "test_sentence_without_comments",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_one_word_line": {
            "name": "test_one_word_line",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_sentence_with_many_word_types": {
            "name": "test_sentence_with_many_word_types",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_word_with_all_attributes": {
            "name": "test_word_with_all_attributes",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_word_with_no_attributes": {
            "name": "test_word_with_no_attributes",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_emptynode_with_all_attributes": {
            "name": "test_emptynode_with_all_attributes",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_emptynode_with_no_attributes": {
            "name": "test_emptynode_with_no_attributes",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_emptynode_has_head": {
            "name": "test_error_if_emptynode_has_head",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_emptynode_has_deprel": {
            "name": "test_error_if_emptynode_has_deprel",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_multiword_with_all_attributes": {
            "name": "test_multiword_with_all_attributes",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_multiword_with_no_attributes": {
            "name": "test_multiword_with_no_attributes",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_lemma": {
            "name": "test_error_if_multiword_has_lemma",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_upos": {
            "name": "test_error_if_multiword_has_upos",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_xpos": {
            "name": "test_error_if_multiword_has_xpos",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_feats": {
            "name": "test_error_if_multiword_has_feats",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_head": {
            "name": "test_error_if_multiword_has_head",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_deprel": {
            "name": "test_error_if_multiword_has_deprel",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConlluParserBuilder.test_error_if_multiword_has_deps": {
            "name": "test_error_if_multiword_has_deps",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "colonel-master/tests/conllu/__init__.py": {}
}
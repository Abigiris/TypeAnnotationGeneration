{
    "com2ann-master/setup.py": {},
    "com2ann-master/src/com2ann.py": {
        "split_sub_comment": {
            "name": "split_sub_comment",
            "location": 342,
            "return": [
                "int",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "BinaryIO",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "split_function_comment": {
            "name": "split_function_comment",
            "location": 361,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[Optional[str], Optional[str]]"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "int",
                    "tuple"
                ],
                "silent": [
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "strip_type_comment": {
            "name": "strip_type_comment",
            "location": 415,
            "return": [
                "str",
                "Callable",
                "tuple",
                "int"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "string_insert": {
            "name": "string_insert",
            "location": 444,
            "return": [
                "str",
                "Optional[List[str]]",
                "Tuple[float]",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ],
                "extra": [
                    "str",
                    "int"
                ],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "process_assign": {
            "name": "process_assign",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "comment": [
                    "List[List[int]]",
                    "bytes",
                    "Callable",
                    "Dict[str, Union[str, int, bool]]",
                    "Dict[str, float]"
                ],
                "data": [
                    "int",
                    "Optional[str]",
                    "Union[Dict, List]"
                ],
                "drop_none": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "drop_ellipsis": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "insert_arg_type": {
            "name": "insert_arg_type",
            "location": 533,
            "return": [
                "str",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "line": [
                    "list",
                    "List[str]",
                    "str",
                    "List[List[str]]"
                ],
                "arg": [
                    "str"
                ],
                "seen": [
                    "Set[str]"
                ]
            }
        },
        "wrap_function_header": {
            "name": "wrap_function_header",
            "location": 555,
            "return": [
                "List[str]",
                "List[object]",
                "Dict[str, Any]",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "header": [
                    "Callable",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "process_func_def": {
            "name": "process_func_def",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "func_type": [
                    "Type",
                    "type",
                    "Union[str, int]",
                    "str",
                    "Sequence[Dict[str, Any]]"
                ],
                "data": [
                    "str",
                    "Union[int, str, bool]"
                ],
                "wrap_sig": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "com2ann_impl": {
            "name": "com2ann_impl",
            "location": 684,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "data": [
                    "list",
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "str",
                    "dict"
                ],
                "drop_none": [
                    "bool",
                    "dict",
                    "List[dict]"
                ],
                "drop_ellipsis": [
                    "bool",
                    "dict",
                    "List[dict]"
                ],
                "wrap_sig": [
                    "int",
                    "bytes",
                    "List[str]",
                    "str"
                ],
                "silent": [
                    "int",
                    "list",
                    "bool"
                ],
                "add_future_imports": [
                    "bool",
                    "str"
                ]
            }
        },
        "check_target": {
            "name": "check_target",
            "location": 719,
            "return": [
                "bool"
            ],
            "arguments": {
                "assign": [
                    "Tuple[int, int]",
                    "str",
                    "Callable[[], object]",
                    "List[str]"
                ]
            }
        },
        "com2ann": {
            "name": "com2ann",
            "location": 737,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[Any]]",
                "Optional[float]"
            ],
            "arguments": {
                "code": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "translate_file": {
            "name": "translate_file",
            "location": 797,
            "return": [
                "Iterator[object]",
                "Tuple[int, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "infile": [
                    "str",
                    "List[str]",
                    "IO"
                ],
                "outfile": [
                    "str"
                ],
                "options": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FileData.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "Iterable",
                    "list",
                    "int",
                    "Iterable[str]",
                    "dict",
                    "bytes"
                ],
                "tokens": [
                    "dict",
                    "os.DirEntry",
                    "Exception"
                ],
                "tree": [
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "TypeCommentCollector.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "silent": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TypeCommentCollector.visit_Assign": {
            "name": "visit_Assign",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "TypeCommentCollector.visit_For": {
            "name": "visit_For",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "TypeCommentCollector.visit_AsyncFor": {
            "name": "visit_AsyncFor",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "TypeCommentCollector.visit_With": {
            "name": "visit_With",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "TypeCommentCollector.visit_AsyncWith": {
            "name": "visit_AsyncWith",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "TypeCommentCollector.visit_unsupported": {
            "name": "visit_unsupported",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "TypeCommentCollector.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fdef": []
            }
        },
        "TypeCommentCollector.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fdef": []
            }
        },
        "TypeCommentCollector.visit_function_impl": {
            "name": "visit_function_impl",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "fdef": []
            }
        },
        "TypeCommentCollector.process_per_arg_comments": {
            "name": "process_per_arg_comments",
            "location": 245,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": [],
                "fdef": [
                    "str",
                    "bool",
                    "Type",
                    "Optional[Dict[str, str]]"
                ],
                "num_non_defs": [
                    "int",
                    "Set[int]"
                ],
                "kw_non_defs": [
                    "Set[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TypeCommentCollector.process_function_comment": {
            "name": "process_function_comment",
            "location": 287,
            "return": [
                "bool",
                "Optional[str]",
                "type",
                "Tuple[List[str], Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "fdef": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "Union[int, str]"
                ],
                "f_args": [
                    "List[str]"
                ],
                "num_non_defs": [
                    "int",
                    "argparse.Namespace",
                    "bytes"
                ]
            }
        }
    },
    "com2ann-master/src/test_com2ann.py": {
        "BaseTestCase.check": {
            "name": "check",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "dict"
                ],
                "expected": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "bool"
                ],
                "n": [
                    "int",
                    "dict"
                ],
                "e": [
                    "int",
                    "dict"
                ],
                "w": [
                    "int",
                    "dict"
                ],
                "i": [
                    "int",
                    "dict"
                ]
            }
        },
        "AssignTestCase.test_basics": {
            "name": "test_basics",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_type_ignore": {
            "name": "test_type_ignore",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_complete_tuple": {
            "name": "test_complete_tuple",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_drop_None": {
            "name": "test_drop_None",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_drop_Ellipsis": {
            "name": "test_drop_Ellipsis",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_newline": {
            "name": "test_newline",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_wrong": {
            "name": "test_wrong",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_pattern": {
            "name": "test_pattern",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_uneven_spacing": {
            "name": "test_uneven_spacing",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_coding_kept": {
            "name": "test_coding_kept",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_multi_line_tuple_value": {
            "name": "test_multi_line_tuple_value",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_complex_targets": {
            "name": "test_complex_targets",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_multi_line_assign": {
            "name": "test_multi_line_assign",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_parenthesized_lhs": {
            "name": "test_parenthesized_lhs",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_literal_types": {
            "name": "test_literal_types",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_comment_on_separate_line": {
            "name": "test_comment_on_separate_line",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_continuation_using_parens": {
            "name": "test_continuation_using_parens",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignTestCase.test_with_for": {
            "name": "test_with_for",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_single": {
            "name": "test_single",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_async_single": {
            "name": "test_async_single",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_complex_kinds": {
            "name": "test_complex_kinds",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_self_argument": {
            "name": "test_self_argument",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_combined_annotations_single": {
            "name": "test_combined_annotations_single",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_combined_annotations_multi": {
            "name": "test_combined_annotations_multi",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_literal_type": {
            "name": "test_literal_type",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_wrap_lines": {
            "name": "test_wrap_lines",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_wrap_lines_error_code": {
            "name": "test_wrap_lines_error_code",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_decorator_body": {
            "name": "test_decorator_body",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_keyword_only_args": {
            "name": "test_keyword_only_args",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTestCase.test_next_line_comment": {
            "name": "test_next_line_comment",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineReportingTestCase.compare": {
            "name": "compare",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "success": [
                    "str",
                    "dict",
                    "Optional[bytes]"
                ],
                "fail": [
                    "bytes",
                    "str"
                ]
            }
        },
        "LineReportingTestCase.test_simple_assign": {
            "name": "test_simple_assign",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineReportingTestCase.test_simple_function": {
            "name": "test_simple_function",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineReportingTestCase.test_unsupported_assigns": {
            "name": "test_unsupported_assigns",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineReportingTestCase.test_invalid_function_comments": {
            "name": "test_invalid_function_comments",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineReportingTestCase.test_confusing_function_comments": {
            "name": "test_confusing_function_comments",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineReportingTestCase.test_unsupported_statements": {
            "name": "test_unsupported_statements",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAndWithTestCase.test_with": {
            "name": "test_with",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAndWithTestCase.test_for": {
            "name": "test_for",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAndWithTestCase.test_async_with": {
            "name": "test_async_with",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAndWithTestCase.test_async_for": {
            "name": "test_async_for",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureImportTestCase.test_added_future_import": {
            "name": "test_added_future_import",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureImportTestCase.test_not_added_future_import": {
            "name": "test_not_added_future_import",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
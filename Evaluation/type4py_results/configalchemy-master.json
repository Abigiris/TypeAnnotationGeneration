{
    "configalchemy-master/setup.py": {},
    "configalchemy-master/configalchemy/configalchemy.py": {
        "SingletonMetaClass.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonMetaClass.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig._setup": {
            "name": "_setup",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig._from_file": {
            "name": "_from_file",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.load_file": {
            "name": "load_file",
            "location": 152,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "TextIO",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "BaseConfig.from_mapping": {
            "name": "from_mapping",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig._from_env": {
            "name": "_from_env",
            "location": 165,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.configuration_function": {
            "name": "configuration_function",
            "location": 176,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.access_config_from_function": {
            "name": "access_config_from_function",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "priority": [
                    "int",
                    "bytes",
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "BaseConfig._set_value": {
            "name": "_set_value",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "MutableMapping[Any, Any]",
                    "dict",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ],
                "priority": [
                    "str",
                    "dict",
                    "int",
                    "Sequence[str]",
                    "Union[Callable[[Dict], Hashable], str]"
                ]
            }
        },
        "BaseConfig.__getitem__": {
            "name": "__getitem__",
            "location": 211,
            "return": [
                "str",
                "Optional[bool]",
                "float",
                "Optional[float]",
                "dict",
                "List[AnyStr]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T",
                    "Union[str, Iterable[str]]",
                    "tuple",
                    "int"
                ]
            }
        },
        "BaseConfig.items": {
            "name": "items",
            "location": 215,
            "return": [
                "Dict[str, str]",
                "str",
                "dict",
                "int",
                "Dict[str, Dict[str, Any]]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.keys": {
            "name": "keys",
            "location": 218,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__contains__": {
            "name": "__contains__",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseConfig.__iter__": {
            "name": "__iter__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__len__": {
            "name": "__len__",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__setitem__": {
            "name": "__setitem__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "dict",
                    "\"QuerySet[MODEL]\"",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "v": [
                    "dict",
                    "\"QuerySet[MODEL]\"",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "BaseConfig.__delitem__": {
            "name": "__delitem__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "int",
                    "tuple"
                ]
            }
        },
        "BaseConfig.update": {
            "name": "update",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "__m": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "BaseConfig.get": {
            "name": "get",
            "location": 241,
            "return": [
                "Iterable[Sequence[str]]",
                "float",
                "tuple",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "set",
                    "list"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "BaseConfig.__bool__": {
            "name": "__bool__",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__repr__": {
            "name": "__repr__",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__str__": {
            "name": "__str__",
            "location": 253,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.json": {
            "name": "json",
            "location": 256,
            "return": [
                "Callable",
                "list"
            ],
            "arguments": {
                "self": [],
                "skipkeys": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "ensure_ascii": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "check_circular": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "allow_nan": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "sort_keys": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "indent": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "separators": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ],
                "cls": [
                    "bool",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[Any]",
                    "bytes"
                ]
            }
        },
        "BaseConfig.__type_check__": {
            "name": "__type_check__",
            "location": 280,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "instance": [
                    "str"
                ]
            }
        },
        "BaseConfig.__typecast__": {
            "name": "__typecast__",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "type",
                    "Optional[int]"
                ],
                "priority": [
                    "SupportsBytes",
                    "Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "BaseConfig.instance": {
            "name": "instance",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ]
            }
        },
        "_ConfigAttribute.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[Dict[str, str]]"
                ],
                "default_value": [
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "_ConfigAttribute.__get__": {
            "name": "__get__",
            "location": 303,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str"
                ],
                "type": [
                    "str",
                    "type",
                    "Type",
                    "Optional[type]"
                ]
            }
        },
        "_ConfigAttribute.__set__": {
            "name": "__set__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Dict[str, Any]",
                    "Union[List[str], Tuple[str], None]",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Union[List[str], Tuple[str], None]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseConfig.__init__.TempThread.run": {
            "name": "run",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "thread_self": [
                    "str",
                    "bool",
                    "Optional[threading.Lock]"
                ]
            }
        }
    },
    "configalchemy-master/configalchemy/field.py": {
        "ValidateException.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ValidateException.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidateException.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.prepare": {
            "name": "prepare",
            "location": 56,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 66,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Union[bytes, str]",
                    "bool",
                    "T"
                ],
                "priority": [
                    "SupportsBytes",
                    "Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "Field._type_check": {
            "name": "_type_check",
            "location": 75,
            "return": [
                "Optional[mypy.types.Type]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Field._typecast": {
            "name": "_typecast",
            "location": 78,
            "return": [
                "int",
                "bool",
                "float",
                "List[types.ServiceT]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ],
                "priority": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "configalchemy-master/configalchemy/lazy.py": {
        "lazy": {
            "name": "lazy",
            "location": 193,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable",
                    "int",
                    "IO",
                    "Dict[str, Callable[[], None]]"
                ]
            }
        },
        "proxy": {
            "name": "proxy",
            "location": 197,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable",
                    "int",
                    "IO",
                    "Dict[str, Callable[[], None]]"
                ]
            }
        },
        "local": {
            "name": "local",
            "location": 201,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable",
                    "Dict[str, Callable[[], None]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "reset_lazy": {
            "name": "reset_lazy",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "BaseProxy.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "BaseProxy.__get_current_object__": {
            "name": "__get_current_object__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.__getattr__": {
            "name": "__getattr__",
            "location": 23,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "BaseProxy.__dict__": {
            "name": "__dict__",
            "location": 27,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.__bool__": {
            "name": "__bool__",
            "location": 37,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.__dir__": {
            "name": "__dir__",
            "location": 40,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxy.__setitem__": {
            "name": "__setitem__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "BaseProxy.__delitem__": {
            "name": "__delitem__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[int, slice]",
                    "Iterator[str]",
                    "bytes"
                ]
            }
        },
        "LocalLazyObject.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "LocalLazyObject.__get_current_object__": {
            "name": "__get_current_object__",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyObject.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "LazyObject.__get_current_object__": {
            "name": "__get_current_object__",
            "location": 136,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyObject.__get_current_object__": {
            "name": "__get_current_object__",
            "location": 152,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolObject.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "PoolObject.__get_current_object__": {
            "name": "__get_current_object__",
            "location": 162,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Pool._new": {
            "name": "_new",
            "location": 178,
            "return": [
                "int",
                "Iterable[str]",
                "bool",
                "List[List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.__enter__": {
            "name": "__enter__",
            "location": 181,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.__exit__": {
            "name": "__exit__",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "configalchemy-master/configalchemy/meta.py": {
        "ConfigMetaItem.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "bool",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMeta.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "List[dict]",
                    "list"
                ],
                "field": [
                    "List[str]",
                    "List[Type]",
                    "cmk.utils.type_defs.Item"
                ],
                "priority": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "List[dict]",
                    "list"
                ]
            }
        },
        "ConfigMeta.value": {
            "name": "value",
            "location": 47,
            "return": [
                "str",
                "int",
                "bytes",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMeta.set": {
            "name": "set",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "priority": [
                    "T",
                    "str",
                    "Iterable[T]",
                    "dict",
                    "tortoise.fields.Field"
                ],
                "value": [
                    "T",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "ConfigMeta.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMeta.__enter__": {
            "name": "__enter__",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMeta.__exit__": {
            "name": "__exit__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ConfigMetaJSONEncoder.default": {
            "name": "default",
            "location": 75,
            "return": [
                "int",
                "float",
                "bool",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Iterable[str]",
                    "IO",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "ConfigMetaItem.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "priority": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        }
    },
    "configalchemy-master/configalchemy/types.py": {
        "OriginCached.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCached.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "JsonMeta.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "JsonMeta.__getitem__": {
            "name": "__getitem__",
            "location": 30,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Iterable[Any]",
                    "Type"
                ]
            }
        },
        "JsonMeta.__type_check__": {
            "name": "__type_check__",
            "location": 33,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Exception",
                    "Callable[..., T]",
                    "Iterator"
                ]
            }
        },
        "JsonMeta.__typecast__": {
            "name": "__typecast__",
            "location": 36,
            "return": [
                "int",
                "List[int]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "priority": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "SecretStr.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretStr.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultTypeCast.__type_check__": {
            "name": "__type_check__",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "Tuple[object]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Type['Model']"
                ],
                "instance": [
                    "Tuple[object]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Type['Model']"
                ]
            }
        },
        "DefaultTypeCast.__typecast__": {
            "name": "__typecast__",
            "location": 64,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "priority": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Boolean.__typecast__": {
            "name": "__typecast__",
            "location": 73,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[bool, str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "list",
                    "dict"
                ],
                "priority": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "configalchemy-master/configalchemy/utils.py": {
        "import_reference": {
            "name": "import_reference",
            "location": 13,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "reference": [
                    "str"
                ]
            }
        },
        "find_caller": {
            "name": "find_caller",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "configalchemy-master/configalchemy/__init__.py": {},
    "configalchemy-master/configalchemy/contrib/apollo.py": {
        "ApolloBaseConfig.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApolloBaseConfig.start_long_poll": {
            "name": "start_long_poll",
            "location": 40,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApolloBaseConfig._access_config_by_namespace": {
            "name": "_access_config_by_namespace",
            "location": 47,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "ApolloBaseConfig.configuration_function": {
            "name": "configuration_function",
            "location": 68,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApolloBaseConfig.long_poll_from_apollo": {
            "name": "long_poll_from_apollo",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApolloBaseConfig.long_poll": {
            "name": "long_poll",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configalchemy-master/configalchemy/contrib/__init__.py": {},
    "configalchemy-master/docs/conf.py": {},
    "configalchemy-master/tests/test_configalchemy.py": {
        "ConfigalchemyTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.tearDown": {
            "name": "tearDown",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str"
                ]
            }
        },
        "ConfigalchemyTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type",
                    "str"
                ]
            }
        },
        "ConfigalchemyTestCase.test_default_config_init_from_object": {
            "name": "test_default_config_init_from_object",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_default_config_update_from_json": {
            "name": "test_default_config_update_from_json",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_file_not_exist": {
            "name": "test_config_file_not_exist",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_with_env": {
            "name": "test_config_with_env",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_update_config_from_function": {
            "name": "test_update_config_from_function",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_lowerest_priority_update": {
            "name": "test_lowerest_priority_update",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_async_update_config_from_function": {
            "name": "test_async_update_config_from_function",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_async_update_config_from_function_within_event_loop": {
            "name": "test_async_update_config_from_function_within_event_loop",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_priority": {
            "name": "test_config_priority",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_multiple_inheritance": {
            "name": "test_multiple_inheritance",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_key_without_default_value": {
            "name": "test_config_key_without_default_value",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_with_property": {
            "name": "test_config_with_property",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_with_nested_config": {
            "name": "test_config_with_nested_config",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_nested_config_update_with_env": {
            "name": "test_nested_config_update_with_env",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_update_config_from_function.DefaultConfig.configuration_function": {
            "name": "configuration_function",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_lowerest_priority_update.DefaultConfig.configuration_function": {
            "name": "configuration_function",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_priority.DefaultConfig.configuration_function": {
            "name": "configuration_function",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_multiple_inheritance.CConfig.configuration_function": {
            "name": "configuration_function",
            "location": 188,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_key_without_default_value.DefaultConfig.configuration_function": {
            "name": "configuration_function",
            "location": 199,
            "return": [
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigalchemyTestCase.test_config_with_property.DefaultConfig.FULL_NAME": {
            "name": "FULL_NAME",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configalchemy-master/tests/test_field.py": {
        "FieldTestCase.test_validate": {
            "name": "test_validate",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldTestCase.test_bool_validate": {
            "name": "test_bool_validate",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldTestCase.test_union_type": {
            "name": "test_union_type",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldTestCase.test_json_type": {
            "name": "test_json_type",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldTestCase.test_generic_field": {
            "name": "test_generic_field",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "unittest_self": []
            }
        },
        "FieldTestCase.test_generic_field.TestGenericConfigMixin.__type_check__": {
            "name": "__type_check__",
            "location": 69,
            "return": [
                "str",
                "Type[Any]",
                "Optional[Type]",
                "List[Tuple]",
                "List[str]",
                "mypy.types.Type",
                "int",
                "List[float]"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "bool",
                    "Type[T]",
                    "Callable"
                ],
                "instance": [
                    "str"
                ]
            }
        },
        "FieldTestCase.test_generic_field.TestGenericConfigMixin.__typecast__": {
            "name": "__typecast__",
            "location": 73,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "bytes",
                    "float",
                    "Callable[[object], Any]",
                    "type"
                ],
                "priority": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "configalchemy-master/tests/test_lazy.py": {
        "async_test": {
            "name": "async_test",
            "location": 13,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "func": [
                    "List[List[Any]]",
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "async_test.wrapped": {
            "name": "wrapped",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LazyTestCase.test_lazy_load": {
            "name": "test_lazy_load",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_lazy_load_load_once": {
            "name": "test_lazy_load_load_once",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_local": {
            "name": "test_local",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_reset_lazy": {
            "name": "test_reset_lazy",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_lazy_none": {
            "name": "test_lazy_none",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_lazy_load_operations_math": {
            "name": "test_lazy_load_operations_math",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_lazy_load_copy": {
            "name": "test_lazy_load_copy",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_proxy_operations_math": {
            "name": "test_proxy_operations_math",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_pool": {
            "name": "test_pool",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_lazy_load_load_once.get": {
            "name": "get",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "LazyTestCase.test_lazy_load_load_once.task": {
            "name": "task",
            "location": 52,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "LazyTestCase.test_local.get": {
            "name": "get",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "LazyTestCase.test_local.task": {
            "name": "task",
            "location": 71,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "LazyTestCase.test_reset_lazy.get": {
            "name": "get",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "LazyTestCase.test_lazy_none.option": {
            "name": "option",
            "location": 98,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "LazyTestCase.test_lazy_load_operations_math.get": {
            "name": "get",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "LazyTestCase.test_proxy_operations_math.get": {
            "name": "get",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "LazyTestCase.test_pool.get": {
            "name": "get",
            "location": 221,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "LazyTestCase.test_pool.task": {
            "name": "task",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "List[List[int]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "LazyTestCase.test_lazy_load_copy.Foo.__copy__": {
            "name": "__copy__",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTestCase.test_lazy_load_copy.Foo.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LazyTestCase.test_coroutine.Reader.__aiter__": {
            "name": "__aiter__",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configalchemy-master/tests/test_meta.py": {
        "MetaTestCase.test_usage": {
            "name": "test_usage",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTestCase.test_json_encode": {
            "name": "test_json_encode",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configalchemy-master/tests/test_singleton.py": {
        "GlobalAPITestCase.test_get_current_config": {
            "name": "test_get_current_config",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configalchemy-master/tests/test_utils.py": {
        "UtilsTestCase.test_import_reference": {
            "name": "test_import_reference",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_find_caller": {
            "name": "test_find_caller",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configalchemy-master/tests/__init__.py": {},
    "configalchemy-master/tests/contrib/test_apollo.py": {
        "ApolloConfigTestCase.test_ApolloConfig": {
            "name": "test_ApolloConfig",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_long_poll": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "requests_get": [
                    "bool",
                    "List[int]"
                ]
            }
        },
        "ApolloConfigTestCase.test_long_poll": {
            "name": "test_long_poll",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "time_sleep": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable]"
                ],
                "logging_debug": [
                    "Callable"
                ],
                "requests_get": [
                    "Callable",
                    "Literal"
                ]
            }
        },
        "ApolloConfigTestCase.test_start_long_poll": {
            "name": "test_start_long_poll",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "thread_mock": [
                    "unittesmock.Mock"
                ]
            }
        },
        "ApolloConfigTestCase.test_long_poll.mock_get": {
            "name": "mock_get",
            "location": 56,
            "return": [
                "bool",
                "Optional[Iterable[str]]",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "ApolloConfigTestCase.test_long_poll.logging_debug_call": {
            "name": "logging_debug_call",
            "location": 92,
            "return": [
                "int",
                "List[int]",
                "Optional[bytearray]",
                "Sequence[int]"
            ],
            "arguments": {}
        }
    },
    "configalchemy-master/tests/contrib/__init__.py": {}
}
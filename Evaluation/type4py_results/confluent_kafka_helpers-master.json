{
    "confluent_kafka_helpers-master/setup.py": {},
    "confluent_kafka_helpers-master/confluent_kafka_helpers/callbacks.py": {
        "get_callback": {
            "name": "get_callback",
            "location": 11,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "custom_callback": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "dict"
                ],
                "default_callback": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "dict"
                ]
            }
        },
        "default_error_cb": {
            "name": "default_error_cb",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "error": [
                    "str",
                    "List[openapi_core.exceptions.OpenAPIError]"
                ],
                "custom_cb": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "Callable[[str], bool]",
                    "Callable"
                ],
                "send_metrics": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "Callable[[str], bool]",
                    "Callable"
                ]
            }
        },
        "default_on_delivery_cb": {
            "name": "default_on_delivery_cb",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "error": [
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "message": [
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "custom_cb": [
                    "str",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "bool",
                    "Type[BaseException]"
                ],
                "send_metrics": [
                    "str",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "bool",
                    "Type[BaseException]"
                ]
            }
        },
        "default_stats_cb": {
            "name": "default_stats_cb",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "stats": [
                    "str",
                    "bool",
                    "int"
                ],
                "custom_cb": [
                    "Callable[[Mapping], T]",
                    "int",
                    "float"
                ],
                "send_metrics": [
                    "Callable[[Mapping], T]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/consumer.py": {
        "get_message": {
            "name": "get_message",
            "location": 20,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[str]",
                "dict",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "consumer": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "error_handler": [
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[float]",
                    "Callable"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "stop_on_eof": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "default_error_handler": {
            "name": "default_error_handler",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "kafka_error": [
                    "str",
                    "cmk.utils.type_defs.SectionName",
                    "bytes"
                ]
            }
        },
        "AvroConsumer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "cmk.utils.type_defs.HostName",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "get_message": [
                    "dataworkspaces.utils.lineage_utils.ResourceRef",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address",
                    "eth.vm.message.Message",
                    "Callable",
                    "dict"
                ],
                "error_handler": [
                    "dataworkspaces.utils.lineage_utils.ResourceRef",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address",
                    "eth.vm.message.Message",
                    "Callable",
                    "dict"
                ]
            }
        },
        "AvroConsumer.__getattr__": {
            "name": "__getattr__",
            "location": 91,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AvroConsumer.__iter__": {
            "name": "__iter__",
            "location": 94,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumer.__next__": {
            "name": "__next__",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumer.__enter__": {
            "name": "__enter__",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumer.__exit__": {
            "name": "__exit__",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "AvroConsumer._message_generator": {
            "name": "_message_generator",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumer._get_topics": {
            "name": "_get_topics",
            "location": 138,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Union[lightbus.message.EventMessage, lightbus.message.RpcMessage, lightbus.message.ResultMessage]",
                    "Dict[str, str]"
                ]
            }
        },
        "AvroConsumer.is_auto_commit": {
            "name": "is_auto_commit",
            "location": 148,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumer.commit": {
            "name": "commit",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroLazyConsumer.poll": {
            "name": "poll",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AvroLazyConsumer.decode_message": {
            "name": "decode_message",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/exceptions.py": {
        "KafkaDeliveryError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ],
                "message": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/loader.py": {
        "default_partitioner": {
            "name": "default_partitioner",
            "location": 21,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "key": [
                    "Callable",
                    "int",
                    "interfaces.message.MessageInterface",
                    "interfaces.message.LoadedMessageInterface",
                    "Union[float, int]",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "num_partitions": [
                    "Callable",
                    "int",
                    "interfaces.message.MessageInterface",
                    "interfaces.message.LoadedMessageInterface",
                    "Union[float, int]",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "default_key_filter": {
            "name": "default_key_filter",
            "location": 28,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "List[str]",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "message_key": [
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "find_duplicated_messages": {
            "name": "find_duplicated_messages",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "messages": [
                    "int",
                    "set",
                    "str"
                ],
                "logger": [
                    "str"
                ]
            }
        },
        "default_error_handler": {
            "name": "default_error_handler",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "kafka_error": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MessageGenerator.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "Optional[str]",
                    "Set[str]",
                    "bool"
                ],
                "key": [
                    "dict",
                    "Union[None, bool]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "key_filter": [
                    "str",
                    "Set[int]"
                ],
                "error_handler": []
            }
        },
        "MessageGenerator.__iter__": {
            "name": "__iter__",
            "location": 81,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageGenerator.__next__": {
            "name": "__next__",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageGenerator.__enter__": {
            "name": "__enter__",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageGenerator.__exit__": {
            "name": "__exit__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageGenerator._message_generator": {
            "name": "_message_generator",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroMessageLoader.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AvroMessageLoader._close": {
            "name": "_close",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroMessageLoader.load": {
            "name": "load",
            "location": 167,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, int]"
                ],
                "key_filter": [
                    "str"
                ],
                "partitioner": [
                    "int",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/message.py": {
        "kafka_timestamp_to_datetime": {
            "name": "kafka_timestamp_to_datetime",
            "location": 4,
            "return": [
                "datetime.date",
                "datetime.datetime",
                "str",
                "bool"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "float",
                    "datetime.timedelta",
                    "int",
                    "bool",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime"
                ]
            }
        },
        "extract_timestamp_from_message": {
            "name": "extract_timestamp_from_message",
            "location": 8,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "kafka_message": [
                    "type"
                ]
            }
        },
        "decode_kafka_headers": {
            "name": "decode_kafka_headers",
            "location": 15,
            "return": [
                "dict",
                "int",
                "Dict[str, Union[str, int]]",
                "Dict[str, Dict[str, str]]",
                "Optional[Dict[str, Any]]",
                "List[dict]",
                "Dict[str, str]"
            ],
            "arguments": {
                "headers": [
                    "Dict[str, Any]",
                    "bytes",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kafka_message": [
                    "str",
                    "int",
                    "float",
                    "Union[str, bool, None]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__bool__": {
            "name": "__bool__",
            "location": 36,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Message.__hash__": {
            "name": "__hash__",
            "location": 42,
            "return": [
                "str",
                "bool",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__lt__": {
            "name": "__lt__",
            "location": 45,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MessageMetadata.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kafka_message": [
                    "List[str]",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "MessageMetadata.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/producer.py": {
        "AvroProducer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "value_serializer": [
                    "bool",
                    "str"
                ],
                "schema_registry": [
                    "int",
                    "Sequence[MutableSet[int]]",
                    "str"
                ],
                "get_callback": [
                    "str",
                    "Optional[Any]",
                    "Mapping"
                ]
            }
        },
        "AvroProducer._close": {
            "name": "_close",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroProducer._get_subject_names": {
            "name": "_get_subject_names",
            "location": 72,
            "return": [
                "str",
                "int",
                "dict",
                "IO"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "Callable[[KT, VT], bool]",
                    "dict"
                ]
            }
        },
        "AvroProducer._get_topic_schemas": {
            "name": "_get_topic_schemas",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AvroProducer.produce": {
            "name": "produce",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "str"
                ],
                "key": [
                    "str",
                    "Tuple[Optional[str], Optional[str]]",
                    "Iterable[str]",
                    "int",
                    "Optional[str]"
                ],
                "topic": [
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ],
                "headers": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "\"ResponseType\""
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/schema_registry.py": {
        "AvroSchemaRegistry.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema_registry_url": [
                    "str",
                    "Optional[str]"
                ],
                "client": [
                    "str",
                    "bool"
                ],
                "serializer": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "AvroSchemaRegistry.get_latest_schema": {
            "name": "get_latest_schema",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "int"
                ]
            }
        },
        "AvroSchemaRegistry.get_latest_cached_schema": {
            "name": "get_latest_cached_schema",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "bool"
                ]
            }
        },
        "AvroSchemaRegistry.key_serializer": {
            "name": "key_serializer",
            "location": 36,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "int",
                    "bool"
                ],
                "topic": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "bool",
                    "list"
                ],
                "key": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "bool",
                    "list"
                ]
            }
        },
        "AvroSchemaRegistry.register_schema": {
            "name": "register_schema",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "int"
                ],
                "avro_schema": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/utils.py": {
        "retry_exception": {
            "name": "retry_exception",
            "location": 8,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "exceptions": [
                    "Exception",
                    "int",
                    "Callable[[], Awaitable[Mapping]]",
                    "Callable[[Mapping], Awaitable]"
                ],
                "retries": [
                    "Exception",
                    "int",
                    "Callable[[], Awaitable[Mapping]]",
                    "Callable[[Mapping], Awaitable]"
                ]
            }
        },
        "retry_exception.decorator": {
            "name": "decorator",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "retry_exception.decorator.wrapped": {
            "name": "wrapped",
            "location": 11,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/__init__.py": {
        "termination_handler": {
            "name": "termination_handler",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "signum": [
                    "str",
                    "int",
                    "float"
                ],
                "frame": [
                    "str",
                    "Exception",
                    "Optional[int]"
                ]
            }
        },
        "interrupt_handler": {
            "name": "interrupt_handler",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "signum": [
                    "str",
                    "int",
                    "float"
                ],
                "frame": [
                    "str",
                    "Exception",
                    "Optional[int]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/metrics/callbacks.py": {
        "error_cb_metrics": {
            "name": "error_cb_metrics",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "error": [],
                "statsd": []
            }
        },
        "on_delivery_cb_metrics": {
            "name": "on_delivery_cb_metrics",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "error": [
                    "Optional[Exception]",
                    "BaseException",
                    "str",
                    "List[str]",
                    "Exception"
                ],
                "message": [
                    "Optional[Exception]",
                    "BaseException",
                    "str",
                    "List[str]",
                    "Exception"
                ],
                "statsd": [
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        },
        "stats_cb_metrics": {
            "name": "stats_cb_metrics",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "stats": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/metrics/statistics.py": {
        "send_metric": {
            "name": "send_metric",
            "location": 8,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "base": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "metric": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "stats": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[str]",
                    "Union[str, Iterable[str]]"
                ],
                "tags": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "send_top_level_stats": {
            "name": "send_top_level_stats",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "stats": [
                    "bool",
                    "str",
                    "dict"
                ],
                "base_tags": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "send_broker_stats": {
            "name": "send_broker_stats",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "stats": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "base_tags": [
                    "dict",
                    "bool"
                ]
            }
        },
        "send_cgrp_stats": {
            "name": "send_cgrp_stats",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "stats": [
                    "int",
                    "Dict[str, Union[str, bool]]",
                    "Dict[str, Any]",
                    "List[List]"
                ],
                "base_tags": [
                    "int",
                    "Dict[str, Union[str, bool]]",
                    "Dict[str, Any]",
                    "List[List]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/metrics/__init__.py": {
        "StatsdNullClient.timed": {
            "name": "timed",
            "location": 13,
            "return": [
                "str",
                "int",
                "float",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedNullDecorator.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Iterable[str]",
                    "T"
                ]
            }
        },
        "TimedNullDecorator.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedNullDecorator.__call__.wrapped": {
            "name": "wrapped",
            "location": 21,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/tracing/tags.py": {},
    "confluent_kafka_helpers-master/confluent_kafka_helpers/tracing/__init__.py": {},
    "confluent_kafka_helpers-master/confluent_kafka_helpers/tracing/backends/nulltracer.py": {
        "NullTracerBackend.start_span": {
            "name": "start_span",
            "location": 4,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullTracerBackend.start_active_span": {
            "name": "start_active_span",
            "location": 7,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullTracerBackend.extract_headers_and_start_span": {
            "name": "extract_headers_and_start_span",
            "location": 10,
            "return": [
                "bool",
                "Iterable[Any]",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullTracerBackend.inject_headers_and_start_span": {
            "name": "inject_headers_and_start_span",
            "location": 13,
            "return": [
                "bool",
                "Iterable[Any]",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDecorator.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Iterable[str]",
                    "T"
                ]
            }
        },
        "NullDecorator.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDecorator.__call__.wrapped": {
            "name": "wrapped",
            "location": 21,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/tracing/backends/opentracer.py": {
        "OpenTracerBackend.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OpenTracerBackend.__getattr__": {
            "name": "__getattr__",
            "location": 20,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "OpenTracerBackend.start_active_span": {
            "name": "start_active_span",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenTracerBackend.start_span": {
            "name": "start_span",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenTracerBackend.inject_headers_and_start_span": {
            "name": "inject_headers_and_start_span",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "headers": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "OpenTracerBackend.extract_headers_and_start_span": {
            "name": "extract_headers_and_start_span",
            "location": 65,
            "return": [
                "bool",
                "Iterable[Any]",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str"
                ],
                "headers": [
                    "str"
                ]
            }
        },
        "OpenTracerBackend.log_exception": {
            "name": "log_exception",
            "location": 81,
            "return": [
                "str",
                "Iterable[Hashable]",
                "int"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "int",
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/confluent_kafka_helpers/tracing/backends/__init__.py": {},
    "confluent_kafka_helpers-master/tests/config.py": {
        "to_message_from_dto": {
            "name": "to_message_from_dto",
            "location": 1,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "message": [
                    "int",
                    "Mapping[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[Tuple[int, int, str]]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/conftest.py": {
        "confluent_message": {
            "name": "confluent_message",
            "location": 13,
            "return": [
                "T",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "confluent_avro_consumer": {
            "name": "confluent_avro_consumer",
            "location": 35,
            "return": [
                "int",
                "str",
                "Optional[bool]",
                "Sequence[str]"
            ],
            "arguments": {
                "confluent_message": [
                    "Iterable",
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "avro_consumer": {
            "name": "avro_consumer",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "confluent_avro_consumer": [
                    "IO",
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "avro_schema_registry": {
            "name": "avro_schema_registry",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "confluent_kafka_helpers-master/tests/kafka.py": {
        "KafkaError.code": {
            "name": "code",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaMessage.error": {
            "name": "error",
            "location": 16,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_callbacks.py": {
        "GetCallBackTests.test_should_return_partial_custom_callback": {
            "name": "test_should_return_partial_custom_callback",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultErrorCallbackTests.test_should_send_metrics": {
            "name": "test_should_send_metrics",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultErrorCallbackTests.test_should_call_custom_callback": {
            "name": "test_should_call_custom_callback",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOnDeliveryCallbackTests.test_should_send_metrics": {
            "name": "test_should_send_metrics",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOnDeliveryCallbackTests.test_should_call_custom_callback": {
            "name": "test_should_call_custom_callback",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOnDeliveryCallbackTests.test_should_raise_exception_on_error": {
            "name": "test_should_raise_exception_on_error",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultStatsCallbackTests.test_should_send_metrics": {
            "name": "test_should_send_metrics",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultStatsCallbackTests.test_should_call_custom_callback": {
            "name": "test_should_call_custom_callback",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_consumer.py": {
        "TestAvroConsumer.test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "avro_consumer": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "confluent_avro_consumer": []
            }
        },
        "TestAvroConsumer.test_consume_messages": {
            "name": "test_consume_messages",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "avro_consumer": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestAvroConsumer.test_consume_messages_adds_tracing": {
            "name": "test_consume_messages_adds_tracing",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tracer": [],
                "avro_consumer": [
                    "cli_ui.tests.MessageRecorder",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestGetMessage.setup_method": {
            "name": "setup_method",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetMessage.test_retries_on_kafkatransporterror": {
            "name": "test_retries_on_kafkatransporterror",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetMessage.test_raises_endofpartition_when_stop_on_eof_is_true": {
            "name": "test_raises_endofpartition_when_stop_on_eof_is_true",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetMessage.test_returns_none_when_stop_on_eof_is_false": {
            "name": "test_returns_none_when_stop_on_eof_is_false",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorHandler.test_raises_endofpartition_on_kafkaerror_partition_eof": {
            "name": "test_raises_endofpartition_on_kafkaerror_partition_eof",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorHandler.test_raises_kafkaexception_on_other_errors": {
            "name": "test_raises_kafkaexception_on_other_errors",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Iterator[str]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_loader.py": {
        "avro_message_loader": {
            "name": "avro_message_loader",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "confluent_avro_consumer": [
                    "IO",
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ],
                "avro_schema_registry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_avro_message_loader_init": {
            "name": "test_avro_message_loader_init",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "confluent_avro_consumer": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type",
                    "str",
                    "tests.async_mock.Mock"
                ],
                "avro_message_loader": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "avro_schema_registry": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type",
                    "str",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_default_partitioner": {
            "name": "test_default_partitioner",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]"
                ],
                "num_partitions": [
                    "str",
                    "List[str]"
                ],
                "expected_response": [
                    "dict",
                    "str",
                    "defaultdict",
                    "bool"
                ]
            }
        },
        "test_avro_message_loader_load": {
            "name": "test_avro_message_loader_load",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "confluent_message": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ],
                "confluent_avro_consumer": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ],
                "avro_message_loader": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestFindDuplicatedMessages.test_should_log_duplicated_messages": {
            "name": "test_should_log_duplicated_messages",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorHandler.test_raises_endofpartition_on_kafkaerror_partition_eof": {
            "name": "test_raises_endofpartition_on_kafkaerror_partition_eof",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorHandler.test_raises_kafkatransporterror_on_kafkaerror_transport": {
            "name": "test_raises_kafkatransporterror_on_kafkaerror_transport",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorHandler.test_raises_kafkaexception_on_other_errors": {
            "name": "test_raises_kafkaexception_on_other_errors",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Iterator[str]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_message.py": {
        "test_timestamp_and_datetime_extraction": {
            "name": "test_timestamp_and_datetime_extraction",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_message_object": {
            "name": "test_message_object",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_timestamp_is_negative": {
            "name": "test_timestamp_is_negative",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_timestamp_is_not_available": {
            "name": "test_timestamp_is_not_available",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_headers": {
            "name": "test_headers",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "str"
                ],
                "expected_headers": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_producer.py": {
        "confluent_avro_producer": {
            "name": "confluent_avro_producer",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "avro_producer": {
            "name": "avro_producer",
            "location": 26,
            "return": [
                "bytes",
                "int",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "confluent_avro_producer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "avro_schema_registry": [
                    "str"
                ]
            }
        },
        "test_avro_producer_init": {
            "name": "test_avro_producer_init",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "avro_producer": [
                    "Dict[str, Any]"
                ],
                "avro_schema_registry": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_avro_producer_produce_default_topic": {
            "name": "test_avro_producer_produce_default_topic",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "confluent_avro_producer": [],
                "avro_producer": [
                    "int",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_avro_producer_produce_specific_topic": {
            "name": "test_avro_producer_produce_specific_topic",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "confluent_avro_producer": [],
                "avro_producer": [
                    "str",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_avro_producer_adds_tracing": {
            "name": "test_avro_producer_adds_tracing",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "tracer": [
                    "unittesmock.MagicMock"
                ],
                "avro_producer": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Callable"
                ]
            }
        },
        "test_get_subject_names": {
            "name": "test_get_subject_names",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "avro_producer": [
                    "tests.basilisp.helpers.CompileFn",
                    "dss.config.Replica"
                ]
            }
        },
        "test_get_topic_schemas": {
            "name": "test_get_topic_schemas",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "avro_producer": [
                    "str"
                ],
                "avro_schema_registry": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_schema_registry.py": {
        "avro_schema_registry": {
            "name": "avro_schema_registry",
            "location": 21,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "avro_schema_registry": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_get_latest_schema": {
            "name": "test_get_latest_schema",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "avro_schema_registry": [
                    "str"
                ]
            }
        },
        "test_register_schema": {
            "name": "test_register_schema",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "avro_schema_registry": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/test_utils.py": {
        "TestRetryException.test_maximum_retries_and_reraises_exception": {
            "name": "test_maximum_retries_and_reraises_exception",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetryException.test_retry_once_and_return": {
            "name": "test_retry_once_and_return",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetryException.test_maximum_retries_and_reraises_exception.foo": {
            "name": "foo",
            "location": 11,
            "return": [],
            "arguments": {
                "mock": []
            }
        },
        "TestRetryException.test_retry_once_and_return.foo": {
            "name": "foo",
            "location": 21,
            "return": [],
            "arguments": {
                "mock": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Container[str]]",
                    "bytes"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/__init__.py": {},
    "confluent_kafka_helpers-master/tests/metrics/test_callbacks.py": {
        "ErrorCallbackMetricsTests.test_event_should_be_sent": {
            "name": "test_event_should_be_sent",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OnDeliveryCallbackMetricsTests.test_total_counter_increased": {
            "name": "test_total_counter_increased",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OnDeliveryCallbackMetricsTests.test_error_counter_increased": {
            "name": "test_error_counter_increased",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsCallbackMetricsTests.test_metrics_should_be_sent": {
            "name": "test_metrics_should_be_sent",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "statsd": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/metrics/test_metrics.py": {
        "StatsdNullClientTests.setup_method": {
            "name": "setup_method",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdNullClientTests.test_method_calls_should_not_fail": {
            "name": "test_method_calls_should_not_fail",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdNullClientTests.test_timed_decorator_should_execute_decorated_method": {
            "name": "test_timed_decorator_should_execute_decorated_method",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdNullClientTests.test_timed_decorator_should_execute_decorated_method.foo": {
            "name": "foo",
            "location": 14,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "confluent_kafka_helpers-master/tests/tracing/backends/test_opentracer.py": {
        "opentracer": {
            "name": "opentracer",
            "location": 10,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {}
        },
        "test_start_active_span_pass_correct_kwargs_and_finish_span": {
            "name": "test_start_active_span_pass_correct_kwargs_and_finish_span",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": [
                    "dict",
                    "int"
                ]
            }
        },
        "test_start_active_span_logs_exception_and_finish_span": {
            "name": "test_start_active_span_logs_exception_and_finish_span",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": []
            }
        },
        "test_start_span_pass_correct_kwargs_and_finish_span": {
            "name": "test_start_span_pass_correct_kwargs_and_finish_span",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": []
            }
        },
        "test_start_span_logs_exception_and_finish_span": {
            "name": "test_start_span_logs_exception_and_finish_span",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": [
                    "str"
                ]
            }
        },
        "test_extract_headers_and_start_span_with_parent_ctx_pass_correct_kwargs": {
            "name": "test_extract_headers_and_start_span_with_parent_ctx_pass_correct_kwargs",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": []
            }
        },
        "test_extract_headers_and_start_span_without_parent_ctx_pass_correct_kwargs": {
            "name": "test_extract_headers_and_start_span_without_parent_ctx_pass_correct_kwargs",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": [],
                "exception": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "test_inject_headers_and_start_span_pass_correct_kwargs": {
            "name": "test_inject_headers_and_start_span_pass_correct_kwargs",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "opentracer": [
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    }
}
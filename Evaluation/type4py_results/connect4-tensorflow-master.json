{
    "connect4-tensorflow-master/ai.py": {
        "RandomAI.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "RandomAI.isAI": {
            "name": "isAI",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAI.getAction": {
            "name": "getAction",
            "location": 17,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "game_engine.Game"
                ]
            }
        },
        "RLAgent.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "RLAgent.isAI": {
            "name": "isAI",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RLAgent.getAction": {
            "name": "getAction",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "game_engine.Game",
                    "player.Player",
                    "str"
                ]
            }
        },
        "RLAgent._getBatchFromGame": {
            "name": "_getBatchFromGame",
            "location": 57,
            "return": [
                "dict",
                "float",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "connect4-tensorflow-master/display.py": {
        "allActions": {
            "name": "allActions",
            "location": 26,
            "return": [
                "int",
                "List[int]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "GameMode.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.isValid": {
            "name": "isValid",
            "location": 17,
            "return": [
                "bool",
                "int",
                "Callable",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "Action.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "value": [
                    "int",
                    "bool",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "Display.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "src.game.Game",
                    "Tuple[int, int]",
                    "str",
                    "Player"
                ]
            }
        },
        "Display.show": {
            "name": "show",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.promptContinuePlay": {
            "name": "promptContinuePlay",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.getAction": {
            "name": "getAction",
            "location": 45,
            "return": [
                "str",
                "bytes",
                "dict",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List[int]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "Display.endGameWith": {
            "name": "endGameWith",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winner": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Display.displayWelcomeMessage": {
            "name": "displayWelcomeMessage",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.getGameMode": {
            "name": "getGameMode",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display._playerCallout": {
            "name": "_playerCallout",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "connect4-tensorflow-master/game.py": {
        "_getRowDiff": {
            "name": "_getRowDiff",
            "location": 42,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "direction": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_getColumnDiff": {
            "name": "_getColumnDiff",
            "location": 51,
            "return": [
                "Callable",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "direction": [
                    "numpy.ndarray"
                ]
            }
        },
        "Token.describe": {
            "name": "describe",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Player.describe": {
            "name": "describe",
            "location": 27,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.isAI": {
            "name": "isAI",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.getAction": {
            "name": "getAction",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "Position.__new__": {
            "name": "__new__",
            "location": 62,
            "return": [
                "IO",
                "bool",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ],
                "row": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ],
                "column": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Position.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "column": [
                    "int"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nRows": [
                    "int"
                ],
                "nColumns": [
                    "int"
                ]
            }
        },
        "Game.addPiece": {
            "name": "addPiece",
            "location": 84,
            "return": [
                "int",
                "float",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Optional[List[str]]",
                    "Callable",
                    "str"
                ],
                "column": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Game.isValid": {
            "name": "isValid",
            "location": 101,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool",
                    "BaseException",
                    "int"
                ]
            }
        },
        "Game.getPlayer": {
            "name": "getPlayer",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "at": [
                    "int",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]"
                ]
            }
        },
        "Game.reset": {
            "name": "reset",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.asNumpyArray": {
            "name": "asNumpyArray",
            "location": 114,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Optional[str]",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "type"
            ],
            "arguments": {
                "self": [],
                "forPlayer": [
                    "int"
                ]
            }
        },
        "Game._isValidBoardPosition": {
            "name": "_isValidBoardPosition",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Union[str, int]"
                ],
                "col": [
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "Game._getLengthContiguous": {
            "name": "_getLengthContiguous",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "at": [
                    "Tuple[int, int]",
                    "numpy.matrix",
                    "str",
                    "bool"
                ],
                "player": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "SupportsInt"
                ],
                "along": [
                    "int",
                    "str"
                ]
            }
        },
        "Game._checkIfWin": {
            "name": "_checkIfWin",
            "location": 161,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "at": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "Game.__str__": {
            "name": "__str__",
            "location": 171,
            "return": [
                "str",
                "list",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "connect4-tensorflow-master/game_test.py": {
        "PlayerTest.testNumberOfPlayers": {
            "name": "testNumberOfPlayers",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectionTest.testNumberDirections": {
            "name": "testNumberDirections",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionTest.testPositionCreation": {
            "name": "testPositionCreation",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testNumberOfRows": {
            "name": "testNumberOfRows",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testPiecesDrop": {
            "name": "testPiecesDrop",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testAddMultiplePiecesSameColumn": {
            "name": "testAddMultiplePiecesSameColumn",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testVerticalWinCondition": {
            "name": "testVerticalWinCondition",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testHorizontalWinCondition": {
            "name": "testHorizontalWinCondition",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testDiagonalUpRightWinCondition": {
            "name": "testDiagonalUpRightWinCondition",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.testDiagonalUpLeftWinCondition": {
            "name": "testDiagonalUpLeftWinCondition",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "connect4-tensorflow-master/main.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "connect4-tensorflow-master/util.py": {}
}
{
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/setup.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/conftest.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/openapi.py": {
        "includeme": {
            "name": "includeme",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "json_renderer": {
            "name": "json_renderer",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "datetime_adapter": {
            "name": "datetime_adapter",
            "location": 41,
            "return": [
                "str",
                "int",
                "float",
                "datetime.datetime",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "datetime.datetime",
                    "pyramid.requesRequest",
                    "requests.Request",
                    "scrapy.http.Request",
                    "starlette.requests.Request"
                ],
                "request": [
                    "pyramid.requesRequest",
                    "int",
                    "flask.Request"
                ]
            }
        },
        "object_or_404": {
            "name": "object_or_404",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        },
        "unknown_error": {
            "name": "unknown_error",
            "location": 71,
            "return": [
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "exc": [
                    "starlette.requests.Request",
                    "str"
                ],
                "request": [
                    "str",
                    "dict"
                ]
            }
        },
        "unauthorized": {
            "name": "unauthorized",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        },
        "notfound": {
            "name": "notfound",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/__init__.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configure": {
            "name": "configure",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Dict[str, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "global_config": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/auth/models.py": {
        "LowerCaseString.process_bind_param": {
            "name": "process_bind_param",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ],
                "dialect": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "User.__json__": {
            "name": "__json__",
            "location": 36,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest",
                    "str",
                    "aiohttp.web.Request",
                    "Optional[str]"
                ]
            }
        },
        "User.by_id": {
            "name": "by_id",
            "location": 53,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.session.Session"
                ],
                "uuid": [
                    "str",
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "yawasscanner.session.Session"
                ]
            }
        },
        "User.by_username": {
            "name": "by_username",
            "location": 60,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session",
                    "grouper.models.base.session.Session"
                ],
                "username": [
                    "str",
                    "requests.Session",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.Session",
                    "Sequence[object]"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session",
                    "List[str]",
                    "str"
                ]
            }
        },
        "User.by_email": {
            "name": "by_email",
            "location": 67,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "authentication.session.models.current_user.CurrentUser",
                    "dict"
                ],
                "email": [
                    "str",
                    "float",
                    "bool"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "User.verify_password": {
            "name": "verify_password",
            "location": 73,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/auth/views.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/auth/__init__.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/auth/tests/test_auth_views.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/auth/tests/test_user_model.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/auth/tests/__init__.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/migrations/versions/e3bcef9530e1_create_users_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/profile/models.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/profile/views.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/profile/__init__.py": {
        "includeme": {
            "name": "includeme",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "solo.Configurator",
                    "Optional[int]"
                ]
            }
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/profile/tests/test_profile_model.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/profile/tests/test_profile_views.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/profile/tests/__init__.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/scripts/drop_tables.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/scripts/populate.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/scripts/__init__.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/scripts/tests/test_drop_tables.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/scripts/tests/test_populate.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/scripts/tests/__init__.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/tests/test_check_db_migrated.py": {
        "old_db": {
            "name": "old_db",
            "location": 15,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "db": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "ini_path": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_database_outdated": {
            "name": "test_database_outdated",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "sys": [
                    "int"
                ],
                "ini_path": [
                    "str"
                ],
                "old_db": [
                    "sqlalchemy.orm.session.Session",
                    "bool"
                ]
            }
        },
        "test_database_up_to_date": {
            "name": "test_database_up_to_date",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "sys": [],
                "ini_path": [
                    "str"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/tests/test_init.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/tests/test_openapi.py": {},
    "cookiecutter-pyramid-realworld-master/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}/tests/__init__.py": {}
}
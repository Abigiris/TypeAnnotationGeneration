{
    "corpy-master/docs/conf.py": {},
    "corpy-master/src/corpy/udpipe.py": {
        "load": {
            "name": "load",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "Optional[str]"
                ],
                "in_format": [
                    "str",
                    "r2c.lib.versioned_analyzer.AnalyzerName"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "sent_or_sents": [
                    "str"
                ],
                "out_format": [
                    "str",
                    "bool"
                ]
            }
        },
        "_pprint_token": {
            "name": "_pprint_token",
            "location": 212,
            "return": [],
            "arguments": {
                "token": [
                    "Dict[str, Any]"
                ],
                "printer": [
                    "str",
                    "Sequence[MutableMapping]"
                ],
                "cycle": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "_pprint_sent": {
            "name": "_pprint_sent",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "sent": [
                    "Optional[str]",
                    "str",
                    "BaseException",
                    "Callable"
                ],
                "printer": [
                    "str",
                    "float"
                ],
                "cycle": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_pprint_seq": {
            "name": "_pprint_seq",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "Callable",
                    "str"
                ],
                "printer": [
                    "dict",
                    "int",
                    "str",
                    "r2c.lib.versioned_analyzer.VersionedAnalyzer"
                ],
                "cycle": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "pprint_config": {
            "name": "pprint_config",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_register_pprinters": {
            "name": "_register_pprinters",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "formatter": [
                    "bool",
                    "lib.AbstractArray"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "Iterable[str]"
                ]
            }
        },
        "Model.process": {
            "name": "process",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Type"
                ]
            }
        },
        "Model.tag": {
            "name": "tag",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sent": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Model.parse": {
            "name": "parse",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sent": [
                    "str",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "corpy-master/src/corpy/util.py": {
        "_get_user_frame_and_generator": {
            "name": "_get_user_frame_and_generator",
            "location": 19,
            "return": [
                "str",
                "dict",
                "Union[str, bytes]",
                "Optional[str]"
            ],
            "arguments": {
                "start_frame": [
                    "int"
                ]
            }
        },
        "clean_env": {
            "name": "clean_env",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "longest_common_substring": {
            "name": "longest_common_substring",
            "location": 209,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "str",
                "bytearray",
                "int",
                "bytes"
            ],
            "arguments": {
                "str1": [
                    "str",
                    "int"
                ],
                "str2": [
                    "str",
                    "int"
                ]
            }
        },
        "clean_env.do_clean_env": {
            "name": "do_clean_env",
            "location": 114,
            "return": [
                "List[int]",
                "List[str]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "globals_to_prune": [
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "Dict[str, Iterable[Any]]"
                ]
            }
        },
        "clean_env.global_trace": {
            "name": "global_trace",
            "location": 167,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "arg": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "clean_env.global_trace.local_trace": {
            "name": "local_trace",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "frame": [
                    "str",
                    "dict",
                    "exporwiki.types.BiomeZoneVolume"
                ],
                "event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "arg": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "corpy-master/src/corpy/vertical.py": {
        "ipm": {
            "name": "ipm",
            "location": 225,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "occurrences": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "N": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "arf": {
            "name": "arf",
            "location": 230,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "occurrences": [
                    "int",
                    "list",
                    "Sequence"
                ],
                "N": [
                    "int",
                    "list"
                ]
            }
        },
        "Vertical.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "Union[List, str]"
                ]
            }
        },
        "Vertical.open": {
            "name": "open",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertical.parse_position": {
            "name": "parse_position",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "Vertical.positions": {
            "name": "positions",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parse_sattrs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ignore_fn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "hook_fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Vertical.search": {
            "name": "search",
            "location": 149,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "match_fn": [
                    "bool",
                    "Optional[dict]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "count_fn": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Generator"
                ]
            }
        },
        "Syn2015Vertical.open": {
            "name": "open",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Syn2015Vertical.parse_position": {
            "name": "parse_position",
            "location": 209,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "bool",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "corpy-master/src/corpy/vis.py": {
        "size_in_pixels": {
            "name": "size_in_pixels",
            "location": 13,
            "return": [
                "int",
                "bytes",
                "str",
                "List[str]"
            ],
            "arguments": {
                "width": [
                    "int",
                    "Dict[int, int]",
                    "str"
                ],
                "height": [
                    "int",
                    "Optional[str]"
                ],
                "unit": [
                    "str",
                    "int",
                    "float"
                ],
                "ppi": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_optimize_dimensions": {
            "name": "_optimize_dimensions",
            "location": 41,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "fast": [
                    "int",
                    "Optional[float]",
                    "str",
                    "numpy.ndarray"
                ],
                "fast_limit": [
                    "int",
                    "str"
                ]
            }
        },
        "_elliptical_mask": {
            "name": "_elliptical_mask",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "str"
                ],
                "height": [
                    "float",
                    "Optional[str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "wordcloud": {
            "name": "wordcloud",
            "location": 65,
            "return": [
                "str",
                "Hashable"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "int",
                    "Union[str, type]",
                    "Iterable[bytes]"
                ],
                "size": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ]
            }
        },
        "_wordcloud_png": {
            "name": "_wordcloud_png",
            "location": 133,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "numpy.ndarray"
            ],
            "arguments": {
                "wcloud": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "corpy-master/src/corpy/_magics.py": {
        "_clean_env_opts2kwargs": {
            "name": "_clean_env_opts2kwargs",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "dict",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "opts": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "CorpyMagics.clean_env": {
            "name": "clean_env",
            "location": 36,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Union[str, int]",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "cell": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "corpy-master/src/corpy/__init__.py": {
        "load_ipython_extension": {
            "name": "load_ipython_extension",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "ipython": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "corpy-master/src/corpy/morphodita/tagger.py": {
        "Tagger.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "tagger_path": []
            }
        },
        "Tagger._pdt_to_conll2009_converter": {
            "name": "_pdt_to_conll2009_converter",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagger._strip_lemma_comment_converter": {
            "name": "_strip_lemma_comment_converter",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagger._strip_lemma_id_converter": {
            "name": "_strip_lemma_id_converter",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tagger._get_converter": {
            "name": "_get_converter",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "convert": []
            }
        },
        "Tagger.tag": {
            "name": "tag",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Tagger.tag_untokenized": {
            "name": "tag_untokenized",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "sents": [],
                "guesser": [],
                "convert": []
            }
        },
        "Tagger.tag_tokenized": {
            "name": "tag_tokenized",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "sents": [],
                "guesser": [],
                "convert": []
            }
        },
        "Tagger._tag": {
            "name": "_tag",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "tokenizer": [],
                "sents": [],
                "guesser": [],
                "converter": [],
                "forms": [],
                "tagged_lemmas": [],
                "token_ranges": []
            }
        }
    },
    "corpy-master/src/corpy/morphodita/tokenizer.py": {
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokenizer_type": [
                    "str"
                ]
            }
        },
        "Tokenizer.from_tagger": {
            "name": "from_tagger",
            "location": 34,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "tagger_path": [
                    "str"
                ]
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "sents": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "corpy-master/src/corpy/morphodita/__init__.py": {},
    "corpy-master/src/corpy/phonetics/cs.py": {
        "_filter_comments": {
            "name": "_filter_comments",
            "location": 39,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "_load_phones": {
            "name": "_load_phones",
            "location": 45,
            "return": [],
            "arguments": {
                "tsv": []
            }
        },
        "_load_substr2phones": {
            "name": "_load_substr2phones",
            "location": 60,
            "return": [],
            "arguments": {
                "tsv": [],
                "allowed": []
            }
        },
        "_load_voicing_pairs": {
            "name": "_load_voicing_pairs",
            "location": 73,
            "return": [],
            "arguments": {
                "tsv": [],
                "allowed": []
            }
        },
        "_create_substr_re": {
            "name": "_create_substr_re",
            "location": 93,
            "return": [],
            "arguments": {
                "substr_list": []
            }
        },
        "_separate_tokens": {
            "name": "_separate_tokens",
            "location": 382,
            "return": [],
            "arguments": {
                "tokens": [],
                "prosodic_boundary_symbols": []
            }
        },
        "transcribe": {
            "name": "transcribe",
            "location": 415,
            "return": [],
            "arguments": {
                "phrase": []
            }
        },
        "_ExceptionRewriter.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "tsv": []
            }
        },
        "_ExceptionRewriter._sub": {
            "name": "_sub",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "_ExceptionRewriter._rewrite": {
            "name": "_rewrite",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Phone.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Phone.__repr__": {
            "name": "__repr__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProsodicUnit.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "orthographic": []
            }
        },
        "ProsodicUnit.phonetic": {
            "name": "phonetic",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProsodicUnit._smart_vowel_seqs": {
            "name": "_smart_vowel_seqs",
            "location": 233,
            "return": [],
            "arguments": {
                "input_": [],
                "tagger": []
            }
        },
        "ProsodicUnit._str2phones": {
            "name": "_str2phones",
            "location": 278,
            "return": [],
            "arguments": {
                "input_": []
            }
        },
        "ProsodicUnit._voicing_assim": {
            "name": "_voicing_assim",
            "location": 310,
            "return": [],
            "arguments": {
                "input_": []
            }
        },
        "ProsodicUnit._other_csps": {
            "name": "_other_csps",
            "location": 332,
            "return": [],
            "arguments": {
                "input_": []
            }
        },
        "ProsodicUnit._split_words_and_translate": {
            "name": "_split_words_and_translate",
            "location": 368,
            "return": [],
            "arguments": {
                "input_": [],
                "alphabet": []
            }
        }
    },
    "corpy-master/src/corpy/phonetics/__init__.py": {},
    "corpy-master/src/corpy/scripts/xc.py": {
        "count_extended_grapheme_clusters": {
            "name": "count_extended_grapheme_clusters",
            "location": 22,
            "return": [
                "tuple",
                "Tuple[int, int]",
                "Union[List[str], str]",
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "check_normalization": {
            "name": "check_normalization",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "fdist": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "\"Project\"",
                    "int"
                ],
                "expected_form": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "logging.Logger",
                    "str",
                    "logging.Formatter"
                ],
                "xml": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "Sequence[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "print_fdist": {
            "name": "print_fdist",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "fdist": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "expected_normalization": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "lower": [
                    "str",
                    "Optional[str]"
                ],
                "xml": [
                    "str",
                    "List[str]"
                ],
                "lvl": [
                    "int",
                    "bool",
                    "str",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]",
                    "range"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Dict[bytes, str]"
                ],
                "quiet": [
                    "bool",
                    "str",
                    "Dict[bytes, str]"
                ],
                "files": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "corpy-master/src/corpy/scripts/zip_verticals.py": {
        "print_position": {
            "name": "print_position",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Sequence[bytes]",
                    "Callable[[], Any]"
                ],
                "line_no": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "lvl": [
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ],
                "verbose": [
                    "str",
                    "bool"
                ],
                "quiet": [
                    "str",
                    "bool"
                ],
                "files": [
                    "str"
                ]
            }
        }
    },
    "corpy-master/tests/test_clean_env.py": {
        "module_ip": {
            "name": "module_ip",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ip": {
            "name": "ip",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "module_ip": [
                    "str",
                    "dict",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ]
            }
        },
        "test_blacklist_works": {
            "name": "test_blacklist_works",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_whitelist_works": {
            "name": "test_whitelist_works",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_blacklist_cannot_overlap_with_whitelist": {
            "name": "test_blacklist_cannot_overlap_with_whitelist",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reassigned_builtins_are_restored": {
            "name": "test_reassigned_builtins_are_restored",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_strict": {
            "name": "test_strict",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modules": {
            "name": "test_modules",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_callables": {
            "name": "test_callables",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_upper": {
            "name": "test_upper",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dunder": {
            "name": "test_dunder",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sunder": {
            "name": "test_sunder",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_can_be_used_as_decorator": {
            "name": "test_can_be_used_as_decorator",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cell_magic_strict": {
            "name": "test_cell_magic_strict",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "ip": []
            }
        },
        "test_cell_magic_non_strict": {
            "name": "test_cell_magic_non_strict",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "ip": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "test_line_magic_strict": {
            "name": "test_line_magic_strict",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "ip": []
            }
        },
        "test_line_magic_non_strict": {
            "name": "test_line_magic_non_strict",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "ip": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "test_strict.return_foo": {
            "name": "return_foo",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_can_be_used_as_decorator.return_foo": {
            "name": "return_foo",
            "location": 118,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {}
        },
        "test_can_be_used_as_decorator.return_FOO": {
            "name": "return_FOO",
            "location": 122,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "corpy-master/tests/test_morphodita.py": {
        "test_tokenize_simple": {
            "name": "test_tokenize_simple",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_tokenize_with_sents": {
            "name": "test_tokenize_with_sents",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_tokenizer_from_tagger": {
            "name": "test_tokenizer_from_tagger",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_tokenize_two_strings_in_parallel_with_same_tokenizer": {
            "name": "test_tokenize_two_strings_in_parallel_with_same_tokenizer",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_tokenize_two_strings_intermittently_with_same_tokenizer": {
            "name": "test_tokenize_two_strings_intermittently_with_same_tokenizer",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_tagger_simple": {
            "name": "test_tagger_simple",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_tagger_with_sents": {
            "name": "test_tagger_with_sents",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_tag_two_strings_in_parallel_with_same_tagger": {
            "name": "test_tag_two_strings_in_parallel_with_same_tagger",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_tag_two_strings_intermittently_with_same_tagger": {
            "name": "test_tag_two_strings_intermittently_with_same_tagger",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "corpy-master/tests/test_phonetics.py": {
        "test_voicing_assimilation_over_word_boundaries": {
            "name": "test_voicing_assimilation_over_word_boundaries",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_voicing_assimilation_of_\u0159": {
            "name": "test_voicing_assimilation_of_\u0159",
            "location": 23,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_different_output_alphabets": {
            "name": "test_different_output_alphabets",
            "location": 56,
            "return": [],
            "arguments": {
                "orth": [],
                "alphabet": [],
                "phon": []
            }
        },
        "test_other_csps": {
            "name": "test_other_csps",
            "location": 78,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_remove_duplicate_graphemes": {
            "name": "test_remove_duplicate_graphemes",
            "location": 94,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_no_gemination": {
            "name": "test_no_gemination",
            "location": 106,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 183,
            "return": [],
            "arguments": {
                "orth": [],
                "phon": []
            }
        },
        "test_separate_tokens": {
            "name": "test_separate_tokens",
            "location": 213,
            "return": [],
            "arguments": {
                "tokens": [],
                "pros_boundaries": [],
                "matrix": [],
                "to_transcribe": []
            }
        },
        "TestHiatus.test_no_hiatus_by_default_in_most_cases": {
            "name": "test_no_hiatus_by_default_in_most_cases",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHiatus.test_hiatus_by_default_between_high_front_vowels": {
            "name": "test_hiatus_by_default_between_high_front_vowels",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHiatus.test_hiatus_can_be_optionally_forced": {
            "name": "test_hiatus_can_be_optionally_forced",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProsodicBoundaries.test_no_prosodic_boundaries": {
            "name": "test_no_prosodic_boundaries",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProsodicBoundaries.test_double_dot_as_prosodic_boundary": {
            "name": "test_double_dot_as_prosodic_boundary",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_hyphen_at_start_of_word": {
            "name": "test_hyphen_at_start_of_word",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_hyphen_mid_word": {
            "name": "test_hyphen_mid_word",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_hyphen_at_end_of_word_is_not_allowed": {
            "name": "test_hyphen_at_end_of_word_is_not_allowed",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserAddedHyphen.test_some_ways_to_have_a_literal_hyphen": {
            "name": "test_some_ways_to_have_a_literal_hyphen",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSmartHandlingOfVowelAcrossMorphemeBoundary.test_no_tagger": {
            "name": "test_no_tagger",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "orth": [],
                "phon": []
            }
        },
        "TestSmartHandlingOfVowelAcrossMorphemeBoundary.test_with_tagger": {
            "name": "test_with_tagger",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "orth": [],
                "phon": []
            }
        }
    },
    "corpy-master/tests/test_phonetics_regressions.py": {
        "test_regressions": {
            "name": "test_regressions",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "orth": [
                    "float",
                    "str",
                    "TextIO"
                ],
                "phon_expected": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ]
            }
        }
    },
    "corpy-master/tests/test_wordcloud.py": {
        "test_size_in_pixels": {
            "name": "test_size_in_pixels",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optimize_dimensions": {
            "name": "test_optimize_dimensions",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_elliptical_mask": {
            "name": "test_elliptical_mask",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wordcloud": {
            "name": "test_wordcloud",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
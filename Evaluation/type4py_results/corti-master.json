{
    "corti-master/setup.py": {},
    "corti-master/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 335,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "root": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 384,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[Callable]",
                "Optional[Hashable]",
                "int"
            ],
            "arguments": {
                "commands": [
                    "int",
                    "List[str]",
                    "dict",
                    "set",
                    "str"
                ],
                "args": [],
                "cwd": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "hide_stderr": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 945,
            "return": [
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "versionfile_abs": [
                    "str"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 974,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "keywords": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "tag_prefix": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int",
                    "MutableMapping[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1029,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "root": [
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "run_command": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1120,
            "return": [
                ""
            ],
            "arguments": {
                "manifest_in": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "versionfile_source": [
                    "str",
                    "Union[int, str]",
                    "bool"
                ],
                "ipy": [
                    "str",
                    "int",
                    "Callable",
                    "List[Union[\"PipeChain\", str]]",
                    "float"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1158,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "str"
                ],
                "root": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1201,
            "return": [
                "str",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1218,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "versions": [
                    "str"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1277,
            "return": [
                "Optional[Type]",
                "dict",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1304,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "str"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 1366,
            "return": [
                "List[int]",
                "dict",
                "str",
                "Type"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "List[dict]"
                ],
                "style": [
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[str, float]"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1402,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1478,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1483,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1697,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1779,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 347,
            "return": [
                "str",
                "Optional[str]",
                "kedro.io.core.Version"
            ],
            "arguments": {
                "parser": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 375,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1516,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1548,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1637,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "Optional[str]"
                ],
                "files": [
                    "str",
                    "IO",
                    "Optional[str]"
                ]
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1572,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1601,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "corti-master/corti/auditory_nerve_response.py": {
        "AuditoryNerveResponse.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "an": [],
                "degradation": []
            }
        },
        "AuditoryNerveResponse.save": {
            "name": "save",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditoryNerveResponse.unweighted_an_response": {
            "name": "unweighted_an_response",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "ls_normal": [],
                "ms_normal": [],
                "hs_normal": []
            }
        },
        "AuditoryNerveResponse.cf_weighted_an_response": {
            "name": "cf_weighted_an_response",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditoryNerveResponse.sum_fibers": {
            "name": "sum_fibers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "ls_weight": [],
                "ms_weight": [],
                "hs_weight": [],
                "degradation": []
            }
        },
        "AuditoryNerveResponse._map_cf_dependent_distribution": {
            "name": "_map_cf_dependent_distribution",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "total_fiber_scaling_factor": []
            }
        },
        "AuditoryNerveResponse.percent_sr": {
            "name": "percent_sr",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "cf": []
            }
        },
        "AuditoryNerveResponse.degrade_an_components": {
            "name": "degrade_an_components",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "low": [],
                "medium": [],
                "high": [],
                "degradation": []
            }
        },
        "AuditoryNerveResponse.parse_degradation": {
            "name": "parse_degradation",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        }
    },
    "corti-master/corti/base.py": {
        "sanitize_level": {
            "name": "sanitize_level",
            "location": 10,
            "return": [
                "Dict[str, Dict[str, int]]",
                "set",
                "Dict[str, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "levels": [
                    "float",
                    "Sequence[str]",
                    "Set[str]",
                    "Optional[int]",
                    "Callable[[KT, VT], bool]"
                ]
            }
        }
    },
    "corti-master/corti/brainstem.py": {
        "simulate_brainstem": {
            "name": "simulate_brainstem",
            "location": 12,
            "return": [],
            "arguments": {
                "anResults": []
            }
        },
        "_solve_one": {
            "name": "_solve_one",
            "location": 20,
            "return": [],
            "arguments": {
                "periphery": []
            }
        },
        "CentralAuditoryResponse.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "an": [],
                "anr": [],
                "modelType": []
            }
        },
        "CentralAuditoryResponse.run": {
            "name": "run",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CentralAuditoryResponse._save": {
            "name": "_save",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "CentralAuditoryResponse._shift": {
            "name": "_shift",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "delay": []
            }
        },
        "CentralAuditoryResponse.__alpha": {
            "name": "__alpha",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "scalingFactor": []
            }
        },
        "CentralAuditoryResponse._excitation_wave": {
            "name": "_excitation_wave",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "tex": []
            }
        },
        "CentralAuditoryResponse._inhibition_wave": {
            "name": "_inhibition_wave",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "Tin": [],
                "delay": []
            }
        },
        "CentralAuditoryResponse._cn": {
            "name": "_cn",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "cf": []
            }
        },
        "CentralAuditoryResponse._ic": {
            "name": "_ic",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "rcn": [],
                "aic": [],
                "sic": [],
                "dic": [],
                "tin": [],
                "tex": []
            }
        },
        "CentralAuditoryResponse._ic_bandpass": {
            "name": "_ic_bandpass",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "rcn": []
            }
        },
        "CentralAuditoryResponse._ic_lowpass": {
            "name": "_ic_lowpass",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "rcn": []
            }
        },
        "CentralAuditoryResponse._ic_band_reject": {
            "name": "_ic_band_reject",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "rcn": []
            }
        },
        "CentralAuditoryResponse.__simulate_IC": {
            "name": "__simulate_IC",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "modelType": [],
                "rcn": [],
                "weights": []
            }
        },
        "CentralAuditoryResponse._simulate": {
            "name": "_simulate",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "weights": []
            }
        }
    },
    "corti-master/corti/from_docopt.py": {
        "from_docopt": {
            "name": "from_docopt",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "dict"
                ],
                "docstring": [
                    "str",
                    "dict"
                ],
                "version": [
                    "str",
                    "dict"
                ]
            }
        },
        "__is_valid_name": {
            "name": "__is_valid_name",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "List[str]",
                    "str",
                    "tuple",
                    "Tuple[str]"
                ]
            }
        },
        "_is_id_start": {
            "name": "_is_id_start",
            "location": 47,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "character": [
                    "str"
                ]
            }
        },
        "_is_id_continue": {
            "name": "_is_id_continue",
            "location": 54,
            "return": [
                "str",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "character": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "corti-master/corti/periphery.py": {
        "Periphery.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "Optional[float]",
                    "Optional[bool]",
                    "int",
                    "float",
                    "Sequence[int]"
                ]
            }
        },
        "Periphery.run": {
            "name": "run",
            "location": 47,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": []
            }
        },
        "Periphery.solve_one_cochlea": {
            "name": "solve_one_cochlea",
            "location": 79,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "Set[int]"
                ]
            }
        },
        "Periphery.save_model_results": {
            "name": "save_model_results",
            "location": 130,
            "return": [
                "str",
                "Sequence[str]",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "ii": [
                    "int",
                    "float",
                    "str",
                    "Union[str, int]"
                ],
                "periph": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[Tuple[str, str]]"
                ]
            }
        },
        "Periphery.save_model_configuration": {
            "name": "save_model_configuration",
            "location": 161,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "corti-master/corti/periphery_configuration.py": {
        "PeripheryConfiguration.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataFolder": [
                    "str",
                    "Dict[str, Union[str, int]]",
                    "bool"
                ],
                "storeFlag": [
                    "float",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "Union[int, float]"
                ],
                "stimuli": [
                    "int",
                    "bytes",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "modelType": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "degradation": [
                    "int",
                    "bool",
                    "numpy.array",
                    "float"
                ],
                "pypet": [
                    "int",
                    "bool",
                    "numpy.array",
                    "float"
                ]
            }
        }
    },
    "corti-master/corti/stimulus.py": {
        "Stimulus.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Fs": [
                    "Callable[[], bool]",
                    "bool",
                    "List[Tuple[str, str, str, str]]",
                    "List[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "Stimulus.seconds_to_samples": {
            "name": "seconds_to_samples",
            "location": 18,
            "return": [
                "str",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float",
                    "int"
                ]
            }
        },
        "Stimulus.to_pascals": {
            "name": "to_pascals",
            "location": 22,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "waveform": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "levels": [
                    "Optional[str]",
                    "Optional[numpy.array]",
                    "numpy.ndarray",
                    "Optional[Type]"
                ],
                "stim_type": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "type"
                ]
            }
        },
        "Stimulus.rms": {
            "name": "rms",
            "location": 41,
            "return": [
                "int",
                "bool",
                "str",
                "dict",
                "float",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sig_in": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Stimulus.spl_to_a": {
            "name": "spl_to_a",
            "location": 45,
            "return": [
                "int",
                "str",
                "Tuple[int, int, float]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "spl_value": [
                    "Tuple[int, int]",
                    "numpy.ndarray",
                    "int",
                    "List[Tuple[int, float]]"
                ]
            }
        },
        "Stimulus.make_click": {
            "name": "make_click",
            "location": 49,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "int",
                "Optional[bool]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Stimulus.make_chirp": {
            "name": "make_chirp",
            "location": 59,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Stimulus.make_am": {
            "name": "make_am",
            "location": 62,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "Stimulus.custom_stimulus_template": {
            "name": "custom_stimulus_template",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "templatePath": [
                    "str"
                ]
            }
        },
        "Stimulus.default_stimulus_template": {
            "name": "default_stimulus_template",
            "location": 70,
            "return": [
                "Callable",
                "Mapping[str, Any]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stimulus.generate_stimulus": {
            "name": "generate_stimulus",
            "location": 75,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "str",
                "Mapping[str, str]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "stimulus_config": [
                    "bool",
                    "dict"
                ]
            }
        },
        "Stimulus.load_stimulus": {
            "name": "load_stimulus",
            "location": 96,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "wav_path": [
                    "str",
                    "path.Path",
                    "Callable[[str], None]"
                ],
                "level": [
                    "str",
                    "Tuple[str, str]",
                    "Union[str, int]",
                    "int"
                ]
            }
        }
    },
    "corti-master/corti/tone_in_noise.py": {
        "tone_in_noise": {
            "name": "tone_in_noise",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "traj": [
                    "str",
                    "base.AbstractConverter",
                    "Tuple[type]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "inputargs": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "corti-master/corti/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 37,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 70,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[Callable]",
                "Optional[Hashable]",
                "int"
            ],
            "arguments": {
                "commands": [
                    "int",
                    "List[str]",
                    "dict",
                    "set",
                    "str"
                ],
                "args": [],
                "cwd": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "hide_stderr": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 107,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "str"
                ],
                "root": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 133,
            "return": [
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "versionfile_abs": [
                    "str"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 162,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "keywords": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "tag_prefix": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int",
                    "MutableMapping[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 217,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "root": [
                    "bool",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "run_command": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 356,
            "return": [
                "Optional[Type]",
                "dict",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "str"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pieces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 445,
            "return": [
                "List[int]",
                "dict",
                "str",
                "Type"
            ],
            "arguments": {
                "pieces": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "List[dict]"
                ],
                "style": [
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[str, float]"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 477,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "corti-master/corti/__init__.py": {},
    "corti-master/corti/__main__.py": {
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "inputargs": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 144,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "root_dir": [
                    "str",
                    "Optional[str]"
                ],
                "current_results": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "touch": {
            "name": "touch",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "fname": [
                    "float",
                    "bool",
                    "int",
                    "datetime.datetime"
                ],
                "times": [
                    "datetime.datetime",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "set_output_dir": {
            "name": "set_output_dir",
            "location": 169,
            "return": [
                "Iterator[object]",
                "str",
                "Dict[str, Any]",
                "bool",
                "Generator"
            ],
            "arguments": {
                "temp": [
                    "str"
                ],
                "pypet": [
                    "bool",
                    "list",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "make_stimuli": {
            "name": "make_stimuli",
            "location": 200,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "corti-master/corti/analysis/plots.py": {
        "plot_periphery": {
            "name": "plot_periphery",
            "location": 23,
            "return": [
                "matplotlib.pyplot.Figure"
            ],
            "arguments": {
                "periph": [
                    "Callable",
                    "str"
                ],
                "conf": [
                    "str",
                    "dict"
                ],
                "pdf": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_brainstem": {
            "name": "plot_brainstem",
            "location": 109,
            "return": [
                "matplotlib.pyplot.Figure"
            ],
            "arguments": {
                "brain": [
                    "float",
                    "list",
                    "int",
                    "List[str]",
                    "str"
                ],
                "conf": [
                    "list",
                    "corti.periphery_configuration.PeripheryConfiguration",
                    "dict"
                ],
                "pdf": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_anr": {
            "name": "plot_anr",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "anr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "conf": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "pdf": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "save_summary_pdf": {
            "name": "save_summary_pdf",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "periphery": [
                    "list",
                    "str",
                    "dict",
                    "List[str]"
                ],
                "brain": [
                    "list",
                    "bool",
                    "Union[str, os.PathLike, None]",
                    "Optional[Tuple]",
                    "Optional[Union[Any, Any]]",
                    "Optional[Iterable[float]]",
                    "str"
                ],
                "anr": [
                    "list",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "conf": [
                    "corti.periphery_configuration.PeripheryConfiguration",
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "fileName": [
                    "str",
                    "Optional[str]"
                ],
                "outputPath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "plot_directory": {
            "name": "plot_directory",
            "location": 162,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "dirPath": [
                    "str",
                    "path.Path"
                ]
            }
        }
    },
    "corti-master/corti/analysis/process_tone_in_noise.py": {
        "print_relevant_properties": {
            "name": "print_relevant_properties",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "runs": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ]
            }
        },
        "brainstem_effect": {
            "name": "brainstem_effect",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "traj": [
                    "str",
                    "numpy.random.RandomState",
                    "Type[Any]",
                    "dict"
                ],
                "pdf": [
                    "int"
                ]
            }
        },
        "weighting_effect": {
            "name": "weighting_effect",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "traj": [
                    "bool",
                    "dict",
                    "str",
                    "int"
                ],
                "pdf": [
                    "int"
                ]
            }
        },
        "periphery_effect": {
            "name": "periphery_effect",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "traj": [
                    "dict",
                    "int"
                ],
                "pdf": [
                    "int"
                ]
            }
        },
        "plot_wave1_wave5": {
            "name": "plot_wave1_wave5",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ],
                "lines": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 199,
            "return": [
                "str",
                "numpy.ndarray",
                "Tuple[Tuple[int, Any]]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "r": [
                    "numpy.ndarray",
                    "int",
                    "nevergrad.common.Callable[[numpy.ndarray], numpy.ndarray]"
                ]
            }
        },
        "synaptopathy_effect": {
            "name": "synaptopathy_effect",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "traj": [
                    "str",
                    "int"
                ],
                "pdf": [
                    "int"
                ]
            }
        },
        "make_plots": {
            "name": "make_plots",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resultsPath": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        }
    },
    "corti-master/corti/analysis/__init__.py": {},
    "corti-master/corti/zilany2014/util.py": {
        "ffGn": {
            "name": "ffGn",
            "location": 37,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "N": [
                    "int"
                ],
                "tdres": [
                    "int",
                    "str",
                    "bool"
                ],
                "Hinput": [
                    "int",
                    "str",
                    "bool"
                ],
                "noiseType": [
                    "int",
                    "str",
                    "bool",
                    "List[int]",
                    "Sequence",
                    "numpy.ndarray"
                ],
                "mu": [
                    "int",
                    "str",
                    "bool",
                    "List[int]",
                    "Sequence",
                    "numpy.ndarray"
                ],
                "sigma": [
                    "bool",
                    "int",
                    "float"
                ],
                "random_debug": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Union[int, None]"
                ]
            }
        },
        "calc_cfs": {
            "name": "calc_cfs",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cf": [
                    "Optional[Tuple[float, float]]",
                    "str"
                ],
                "species": []
            }
        }
    },
    "corti-master/corti/zilany2014/zilany2014_rate.py": {
        "run_zilany2014_rate": {
            "name": "run_zilany2014_rate",
            "location": 30,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "sound": [
                    "Callable"
                ],
                "fs": [
                    "str",
                    "int",
                    "Pattern",
                    "Sequence[Tuple[float, Any]]"
                ],
                "anf_types": [
                    "str",
                    "Optional[Any]",
                    "int"
                ],
                "cf": [
                    "Callable"
                ],
                "species": [
                    "Callable"
                ],
                "cohc": [
                    "str",
                    "int",
                    "Pattern",
                    "Sequence[Tuple[float, Any]]"
                ],
                "cihc": [
                    "str",
                    "int",
                    "Pattern",
                    "Sequence[Tuple[float, Any]]"
                ],
                "powerlaw": [
                    "str",
                    "int",
                    "Pattern",
                    "Sequence[Tuple[float, Any]]"
                ],
                "ffGn": [
                    "str",
                    "int",
                    "Pattern",
                    "Sequence[Tuple[float, Any]]"
                ]
            }
        },
        "_run_channel": {
            "name": "_run_channel",
            "location": 107,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "dict",
                "pandas.DataFrame"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "corti-master/corti/zilany2014/__init__.py": {
        "run_zilany2014": {
            "name": "run_zilany2014",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "sound": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "fs": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "anf_num": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "cf": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "species": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "seed": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "conf": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "level": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "output": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "tuple"
                ],
                "cohc": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "cihc": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "powerlaw": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ],
                "ffGn": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "str",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "__munge": {
            "name": "__munge",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "zil": [
                    "List[int]",
                    "int",
                    "list",
                    "Dict[str, str]",
                    "List[float]"
                ],
                "sound": [
                    "int",
                    "list",
                    "bytes"
                ],
                "output": [
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "_run_channel": {
            "name": "_run_channel",
            "location": 183,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "corti-master/resources/zilany-scaling/find_v1.py": {
        "_total_hack": {
            "name": "_total_hack",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "anr": [
                    "int",
                    "Union[numpy.ndarray, xarray.DataArray]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "find_zilany_scaling_factor": {
            "name": "find_zilany_scaling_factor",
            "location": 26,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "anr": [
                    "str",
                    "bytes",
                    "Callable[[str], None]",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "corti-master/resources/zilany-scaling/__init__.py": {},
    "corti-master/tests/test_periphery.py": {
        "test": {
            "name": "test",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "corti-master/tests/__init__.py": {}
}
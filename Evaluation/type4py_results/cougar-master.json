{
    "cougar-master/setup.py": {},
    "cougar-master/cougar/__init__.py": {},
    "cougar-master/cougar/agents/baseagent.py": {
        "BaseAgent.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "BaseAgent.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Union[str, BinaryIO]",
                    "bool",
                    "Callable[[Optional], None]",
                    "Iterable[str]"
                ]
            }
        },
        "BaseAgent.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "pathlib.Path"
                ],
                "is_best": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "BaseAgent.run": {
            "name": "run",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.train": {
            "name": "train",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.validate": {
            "name": "validate",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.finalize": {
            "name": "finalize",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/agents/object_detection_agent.py": {
        "ObjectDetectionAgent.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "args": []
            }
        },
        "ObjectDetectionAgent.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Union[str, BinaryIO]",
                    "bool",
                    "Callable[[Optional], None]",
                    "Iterable[str]"
                ]
            }
        },
        "ObjectDetectionAgent.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "pathlib.Path"
                ],
                "is_best": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "pathlib.Path"
                ]
            }
        },
        "ObjectDetectionAgent.run": {
            "name": "run",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDetectionAgent.train": {
            "name": "train",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDetectionAgent.validate": {
            "name": "validate",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectDetectionAgent.finalize": {
            "name": "finalize",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/agents/__init__.py": {
        "build_agent": {
            "name": "build_agent",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config": [
                    "OrderedDict",
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cougar-master/cougar/common/box_utils.py": {
        "convert_locations_to_boxes": {
            "name": "convert_locations_to_boxes",
            "location": 5,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "locations": [
                    "int",
                    "float"
                ],
                "priors": [
                    "float",
                    "Dict[str, Any]",
                    "bool"
                ],
                "center_variance": [
                    "int",
                    "float"
                ],
                "size_variance": [
                    "int",
                    "float"
                ]
            }
        },
        "convert_boxes_to_locations": {
            "name": "convert_boxes_to_locations",
            "location": 30,
            "return": [
                "str",
                "bool",
                "torch.Tensor",
                "bytes"
            ],
            "arguments": {
                "center_form_boxes": [
                    "bool",
                    "str",
                    "Sequence[Sequence[float]]"
                ],
                "center_form_priors": [
                    "bool",
                    "str",
                    "Sequence[Sequence[float]]"
                ],
                "center_variance": [
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "size_variance": [
                    "Optional[float]",
                    "int",
                    "float"
                ]
            }
        },
        "area_of": {
            "name": "area_of",
            "location": 40,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "left_top": [
                    "Iterable[T]",
                    "str",
                    "Callable[[T], bool]"
                ],
                "right_bottom": [
                    "Iterable[T]",
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "iou_of": {
            "name": "iou_of",
            "location": 52,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "boxes0": [
                    "Iterable[T]",
                    "str",
                    "Callable[[T], bool]"
                ],
                "boxes1": [
                    "Iterable[T]",
                    "str",
                    "Callable[[T], bool]"
                ],
                "eps": [
                    "Iterable[T]",
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "assign_priors": {
            "name": "assign_priors",
            "location": 70,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "gt_boxes": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "int"
                ],
                "gt_labels": [
                    "str",
                    "torch.IntTensor",
                    "Iterable[str]",
                    "Dict[str, str]",
                    "torch.nn.utils.rnn.PackedSequence",
                    "bytes"
                ],
                "corner_form_priors": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "int"
                ],
                "iou_threshold": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "int"
                ]
            }
        },
        "hard_negative_mining": {
            "name": "hard_negative_mining",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loss": [
                    "int",
                    "torch.Tensor",
                    "List[List[int]]",
                    "bytes"
                ],
                "labels": [
                    "torch.IntTensor",
                    "Dict[str, torch.LongTensor]",
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ],
                "neg_pos_ratio": [
                    "torch.Tensor",
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "center_form_to_corner_form": {
            "name": "center_form_to_corner_form",
            "location": 123,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "dict"
            ],
            "arguments": {
                "locations": [
                    "dict",
                    "Sequence",
                    "type",
                    "bool",
                    "str"
                ]
            }
        },
        "corner_form_to_center_form": {
            "name": "corner_form_to_center_form",
            "location": 128,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "float",
                    "int",
                    "Union[bool, None]",
                    "str"
                ]
            }
        }
    },
    "cougar-master/cougar/common/checkpoint.py": {
        "CheckPointer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "bytes",
                    "int"
                ],
                "optimizer": [
                    "str",
                    "bytes",
                    "int"
                ],
                "scheduler": [
                    "str",
                    "bytes",
                    "int"
                ],
                "save_dir": [
                    "str"
                ],
                "save_to_disk": [
                    "str",
                    "bytes",
                    "int"
                ],
                "logger": [
                    "str",
                    "int",
                    "Optional[logging.Logger]",
                    "logging.Logger"
                ]
            }
        },
        "CheckPointer.save": {
            "name": "save",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CheckPointer.load": {
            "name": "load",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]"
                ],
                "use_latest": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CheckPointer.get_checkpoint_file": {
            "name": "get_checkpoint_file",
            "location": 79,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[\"libkol.Item\"]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckPointer.has_checkpoint": {
            "name": "has_checkpoint",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckPointer.tag_last_checkpoint": {
            "name": "tag_last_checkpoint",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_filename": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "CheckPointer._load_file": {
            "name": "_load_file",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "list",
                    "Iterable[str]",
                    "Union[List[str], str]"
                ]
            }
        }
    },
    "cougar-master/cougar/common/collect_env.py": {
        "get_pil_version": {
            "name": "get_pil_version",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "collect_env_info": {
            "name": "collect_env_info",
            "location": 10,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "cougar-master/cougar/common/comm.py": {
        "get_world_size": {
            "name": "get_world_size",
            "location": 13,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_rank": {
            "name": "get_rank",
            "location": 21,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "is_main_process": {
            "name": "is_main_process",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "synchronize": {
            "name": "synchronize",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "all_gather": {
            "name": "all_gather",
            "location": 48,
            "return": [
                "dict",
                "int",
                "Union[Dict, Tuple]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "reduce_dict": {
            "name": "reduce_dict",
            "location": 91,
            "return": [
                "dict",
                "Dict[int, List[str]]",
                "int",
                "Dict[str, Dict]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "input_dict": [
                    "dict",
                    "Dict[str, str]"
                ],
                "average": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cougar-master/cougar/common/dumps.py": {
        "dump_config": {
            "name": "dump_config",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "config_name": [
                    "str",
                    "Optional[str]"
                ],
                "config": [
                    "OrderedDict",
                    "Optional[dict]",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "cougar-master/cougar/common/loads.py": {
        "read_config": {
            "name": "read_config",
            "location": 4,
            "return": [
                "dict",
                "IO",
                "Callable[[str], T]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_labels": {
            "name": "read_labels",
            "location": 10,
            "return": [
                "Sequence[str]",
                "str",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "cougar-master/cougar/common/logger.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 6,
            "return": [
                "int",
                "bytearray",
                "IO"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "Optional[logging.Logger]",
                    "Type[BaseException]",
                    "Optional[str]"
                ],
                "save_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "distributed_rank": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cougar-master/cougar/common/metric_logger.py": {
        "SmoothedValue.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "window_size": [
                    "int",
                    "bool",
                    "Union[int, Tuple[int, int]]",
                    "numpy.array",
                    "List[str]"
                ]
            }
        },
        "SmoothedValue.update": {
            "name": "update",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "float",
                    "T",
                    "List[Union[int, float]]",
                    "str"
                ]
            }
        },
        "SmoothedValue.median": {
            "name": "median",
            "location": 26,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.avg": {
            "name": "avg",
            "location": 31,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.global_avg": {
            "name": "global_avg",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricLogger.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "delimiter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetricLogger.update": {
            "name": "update",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricLogger.__getattr__": {
            "name": "__getattr__",
            "location": 52,
            "return": [
                "bool",
                "int",
                "bytes",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "MetricLogger.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/common/model_zoo.py": {
        "cache_url": {
            "name": "cache_url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list"
                ],
                "model_dir": [
                    "str",
                    "Optional[str]"
                ],
                "progress": [
                    "str",
                    "dict",
                    "Optional[List[Any]]"
                ]
            }
        },
        "load_state_dict_from_url": {
            "name": "load_state_dict_from_url",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "str",
                "int",
                "List[List[str]]",
                "Dict[str, str]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "map_location": [
                    "str"
                ]
            }
        }
    },
    "cougar-master/cougar/common/__init__.py": {},
    "cougar-master/cougar/data/build.py": {
        "make_data_loader": {
            "name": "make_data_loader",
            "location": 29,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "cfg": [
                    "bool",
                    "int",
                    "list"
                ],
                "is_train": [
                    "bool",
                    "int",
                    "list"
                ],
                "distributed": [
                    "torch.LongTensor",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "max_iter": [
                    "Optional[str]",
                    "raiden.utils.Secret",
                    "Optional[int]",
                    "Optional[List[int]]",
                    "Tuple[str, int]"
                ],
                "start_iter": [
                    "torch.Tensor",
                    "torch.LongTensor",
                    "int"
                ]
            }
        },
        "BatchCollator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "Optional[dict]",
                    "float",
                    "int"
                ],
                "size_divisible": [
                    "int",
                    "Optional[Any]",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "BatchCollator.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "str",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Iterable[str]",
                    "Set[int]",
                    "int",
                    "str",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "cougar-master/cougar/data/__init__.py": {},
    "cougar-master/cougar/data/datasets/voc.py": {
        "download_extract": {
            "name": "download_extract",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "list",
                    "List[str]",
                    "Dict[str, raiden.utils.Any]"
                ],
                "root": [
                    "list",
                    "List[str]",
                    "Dict[str, raiden.utils.Any]"
                ],
                "filename": [
                    "list",
                    "List[str]",
                    "Dict[str, raiden.utils.Any]"
                ],
                "md5": [
                    "list",
                    "List[str]",
                    "Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "get_voc": {
            "name": "get_voc",
            "location": 243,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "root": [
                    "Dict[str, str]",
                    "str",
                    "raiden.tests.fuzz.utils.SendUnlockInNode"
                ],
                "image_set": [
                    "str",
                    "Image",
                    "dict",
                    "os.PathLike",
                    "Optional[str]"
                ],
                "transforms": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "VOCDetection.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "bool",
                    "int"
                ],
                "year": [
                    "str",
                    "float"
                ],
                "image_set": [
                    "Optional[str]",
                    "bool",
                    "Optional[IO[str]]",
                    "List[Tuple[int, str]]",
                    "List[str]"
                ],
                "download": [
                    "str",
                    "bool",
                    "Optional[Exception]"
                ],
                "transform": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "target_transform": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "transforms": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VOCDetection.__getitem__": {
            "name": "__getitem__",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int"
                ]
            }
        },
        "VOCDetection.__len__": {
            "name": "__len__",
            "location": 134,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VOCDetection.parse_voc_xml": {
            "name": "parse_voc_xml",
            "location": 137,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "download_extract.__len__": {
            "name": "__len__",
            "location": 162,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "download_extract.parse_voc_xml": {
            "name": "parse_voc_xml",
            "location": 165,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ],
                "node": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConvertVOCtoCOCO.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "tuple"
                ]
            }
        },
        "ConvertVOCtoCOCO.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [
                "Sequence['cirq.Qid']",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "torch.Tensor",
                    "float",
                    "docker_push_latest_if_changed.Image",
                    "int"
                ],
                "target": [
                    "PIL.Image"
                ]
            }
        },
        "VOCDetectionDataset.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "img_folder": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "year": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "image_set": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "transforms": [
                    "str",
                    "List[str]",
                    "tuple",
                    "int"
                ]
            }
        },
        "VOCDetectionDataset.__getitem__": {
            "name": "__getitem__",
            "location": 234,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "list",
                    "torch.Tensor",
                    "bool",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "cougar-master/cougar/data/datasets/__init__.py": {
        "build_dataset": {
            "name": "build_dataset",
            "location": 10,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "dataset_list": [
                    "\"Step\"",
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "cmk.utils.type_defs.HostAddress",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "transform": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "is_train": [
                    "dict",
                    "bool",
                    "str",
                    "float"
                ]
            }
        }
    },
    "cougar-master/cougar/data/samplers/distributed.py": {
        "DistributedSampler.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "str"
                ],
                "num_replicas": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ],
                "rank": [
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "shuffle": [
                    "float",
                    "int",
                    "tuple",
                    "str",
                    "bool"
                ]
            }
        },
        "DistributedSampler.__iter__": {
            "name": "__iter__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistributedSampler.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedSampler.set_epoch": {
            "name": "set_epoch",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "cougar-master/cougar/data/samplers/iteration_based_batch_sampler.py": {
        "IterationBasedBatchSampler.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_sampler": [
                    "int",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "num_iterations": [
                    "int",
                    "float"
                ],
                "start_iter": [
                    "str",
                    "int",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.FeeAmount"
                ]
            }
        },
        "IterationBasedBatchSampler.__iter__": {
            "name": "__iter__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IterationBasedBatchSampler.__len__": {
            "name": "__len__",
            "location": 29,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/data/samplers/__init__.py": {},
    "cougar-master/cougar/data/transforms/transforms.py": {
        "Compose.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transforms": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Compose.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "Sequence['cirq.Qid']",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "torch.Tensor"
                ],
                "target": [
                    "torch.Tensor"
                ]
            }
        },
        "RandomHorizontalFlip.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RandomHorizontalFlip.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "Sequence['cirq.Qid']",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [],
                "target": [
                    "torch.Tensor"
                ]
            }
        },
        "ToTensor.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "Sequence['cirq.Qid']",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ],
                "target": [
                    "str",
                    "torch.Tensor",
                    "float",
                    "int"
                ]
            }
        }
    },
    "cougar-master/cougar/data/transforms/__init__.py": {
        "build_transforms": {
            "name": "build_transforms",
            "location": 4,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "bool",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "Type[T]"
                ],
                "is_train": [
                    "dict",
                    "bool",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "Type[T]"
                ]
            }
        }
    },
    "cougar-master/cougar/engine/trainer.py": {
        "reduce_loss_dict": {
            "name": "reduce_loss_dict",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "loss_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "do_iter_train": {
            "name": "do_iter_train",
            "location": 38,
            "return": [],
            "arguments": {
                "cfg": [
                    "str",
                    "Optional[float]",
                    "Optional[logging.Logger]",
                    "logging.Logger"
                ],
                "model": [
                    "allennlp.common.JsonDict",
                    "int"
                ],
                "data_loader": [
                    "list",
                    "str"
                ],
                "optimizer": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "List[str]"
                ],
                "scheduler": [
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "checkpointer": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "device": [
                    "int",
                    "bytes"
                ],
                "arguments": [
                    "str"
                ],
                "args": [],
                "summary_writer": [
                    "str",
                    "bool",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "cougar-master/cougar/engine/__init__.py": {},
    "cougar-master/cougar/graphs/__init__.py": {},
    "cougar-master/cougar/graphs/backbone/vgg.py": {
        "add_vgg": {
            "name": "add_vgg",
            "location": 15,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "batch_norm": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "add_extras": {
            "name": "add_extras",
            "location": 38,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "cfg": [
                    "int"
                ],
                "i": [
                    "int",
                    "Iterator",
                    "bool"
                ],
                "size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "vgg": {
            "name": "vgg",
            "location": 113,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "size": [
                    "int",
                    "tuple",
                    "float",
                    "Tuple[float, float]"
                ],
                "pretrained": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "VGG.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "VGG.reset_parameters": {
            "name": "reset_parameters",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG.init_from_pretrain": {
            "name": "init_from_pretrain",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "list"
                ]
            }
        },
        "VGG.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/backbone/__init__.py": {},
    "cougar-master/cougar/graphs/loss/contrastive_loss.py": {
        "ContrastiveLoss.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "margin": [
                    "int",
                    "float",
                    "List[int]",
                    "Union[str, float]"
                ]
            }
        },
        "ContrastiveLoss.forward": {
            "name": "forward",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "output1": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "dict"
                ],
                "output2": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "dict"
                ],
                "label": [
                    "List[int]",
                    "List[List[int]]",
                    "Dict[str, str]",
                    "bool",
                    "Sequence[float]",
                    "int"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/loss/focal_loss.py": {
        "FocalLoss.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gamma": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "alpha": [
                    "Optional[int]",
                    "int"
                ],
                "size_average": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "FocalLoss.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "torch.Tensor"
                ],
                "target": [
                    "int",
                    "torch.Tensor"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/loss/triplet_loss.py": {
        "TripletLoss.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "margin": [
                    "int",
                    "float",
                    "List[int]",
                    "Union[str, float]"
                ]
            }
        },
        "TripletLoss.forward": {
            "name": "forward",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "int",
                    "bytearray"
                ],
                "positive": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "list"
                ],
                "negative": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "list"
                ],
                "size_average": [
                    "int",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/loss/__init__.py": {},
    "cougar-master/cougar/graphs/models/__init__.py": {},
    "cougar-master/cougar/graphs/models/classification/__init__.py": {},
    "cougar-master/cougar/graphs/models/classification/mnist/net.py": {
        "Net.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/classification/mnist/__init__.py": {},
    "cougar-master/cougar/graphs/models/object_detection/__init__.py": {
        "build_detection_model": {
            "name": "build_detection_model",
            "location": 9,
            "return": [
                "Pattern",
                "str"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "str"
                ],
                "num_classes": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/object_detection/ssd/box_head.py": {
        "SSDBoxHead.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "box_predictor": [
                    "int",
                    "bool",
                    "float"
                ],
                "multibox_loss": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SSDBoxHead.forward": {
            "name": "forward",
            "location": 16,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "torch.Tensor",
                    "int",
                    "str"
                ],
                "image_shapes": [
                    "torch.Tensor",
                    "Tuple[int, int, int]"
                ],
                "targets": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "SSDBoxHead.postprocess_detections": {
            "name": "postprocess_detections",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "class_logits": [
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "type",
                    "Iterable"
                ],
                "box_regression": [
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "type",
                    "Iterable"
                ],
                "image_shapes": [
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "type",
                    "Iterable"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/object_detection/ssd/box_predictor.py": {
        "BoxPredictor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[List[int]]"
                ],
                "boxes_per_locations": [
                    "float",
                    "int",
                    "dict",
                    "str"
                ],
                "backbone_out_channels": [
                    "List[str]",
                    "list",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "BoxPredictor.cls_block": {
            "name": "cls_block",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "bool",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "bytes"
                ],
                "out_channels": [
                    "bool",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "bytes"
                ],
                "boxes_per_location": [
                    "bool",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "BoxPredictor.reg_block": {
            "name": "reg_block",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "out_channels": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "boxes_per_location": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "BoxPredictor.reset_parameters": {
            "name": "reset_parameters",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxPredictor.forward": {
            "name": "forward",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "torch.Tensor",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "bool",
                    "Tuple[int, int, int, int]",
                    "torch.Tensor",
                    "List[int]"
                ]
            }
        },
        "SSDBoxPredictor.cls_block": {
            "name": "cls_block",
            "location": 59,
            "return": [
                "int",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "bool",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "bytes"
                ],
                "out_channels": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str",
                    "Optional[Sequence[int]]",
                    "bool"
                ],
                "boxes_per_location": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str",
                    "Optional[Sequence[int]]",
                    "bool"
                ]
            }
        },
        "SSDBoxPredictor.reg_block": {
            "name": "reg_block",
            "location": 62,
            "return": [
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "out_channels": [
                    "int",
                    "float",
                    "slice"
                ],
                "boxes_per_location": [
                    "int",
                    "float",
                    "slice"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/object_detection/ssd/generalized_ssd.py": {
        "GeneralizedSSD.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "int",
                    "bool",
                    "float"
                ],
                "box_heads": [
                    "int",
                    "bool",
                    "float"
                ],
                "transform": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GeneralizedSSD.forward": {
            "name": "forward",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "bytes",
                    "dict",
                    "Tuple[int, int, int]",
                    "torch.Tensor",
                    "int"
                ],
                "targets": [
                    "Optional[Tuple[int, int]]",
                    "torch.LongTensor"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/object_detection/ssd/multibox_loss.py": {
        "MultiBoxLoss.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "neg_pos_ratio": [
                    "int",
                    "bool",
                    "float"
                ],
                "classification_loss": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MultiBoxLoss.forward": {
            "name": "forward",
            "location": 21,
            "return": [
                "float",
                "int",
                "str",
                "Type",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "confidence": [
                    "int",
                    "torch.Tensor"
                ],
                "predicted_locations": [],
                "labels": [
                    "Optional[Union[int, Any]]",
                    "bytes",
                    "Union[int, float]",
                    "str",
                    "Union[int, str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "gt_locations": []
            }
        }
    },
    "cougar-master/cougar/graphs/models/object_detection/ssd/ssd.py": {
        "SSD.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "bool",
                    "str",
                    "Union[list, dict]"
                ],
                "num_classes": [
                    "Optional[int]",
                    "int",
                    "Optional[Union[float, Any]]",
                    "Optional[str]"
                ],
                "image_size": [
                    "str",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "float"
                ],
                "image_mean": [
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "Optional[List[str]]",
                    "Optional[Callable[[], Any]]",
                    "list",
                    "Optional[Any]"
                ],
                "image_std": [
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "Optional[List[str]]",
                    "Optional[Callable[[], Any]]",
                    "list",
                    "Optional[Any]"
                ],
                "box_head": [
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "box_predictor": [
                    "Optional[int]",
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[Iterable[str]]"
                ],
                "box_score_thresh": [
                    "str",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "float"
                ],
                "box_nms_thresh": [
                    "str",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "float"
                ],
                "box_fg_iou_thresh": [
                    "str",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "float"
                ],
                "box_bg_iou_thresh": [
                    "str",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/object_detection/ssd/__init__.py": {},
    "cougar-master/cougar/graphs/models/tracking/__init__.py": {},
    "cougar-master/cougar/graphs/models/tracking/deep_sort/deepsort.py": {
        "get_gaussian_mask": {
            "name": "get_gaussian_mask",
            "location": 183,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "DeepSORT.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wt_path": [
                    "Optional[str]"
                ],
                "cuda": [
                    "str",
                    "int"
                ]
            }
        },
        "DeepSORT.reset_tracker": {
            "name": "reset_tracker",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeepSORT.format_yolo_output": {
            "name": "format_yolo_output",
            "location": 52,
            "return": [
                "str",
                "int",
                "Set[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "out_boxes": [
                    "List[str]",
                    "int",
                    "List[bytes]",
                    "Sequence[T]",
                    "str",
                    "List[\"Issue\"]",
                    "List[Tuple[torch.Tensor, torch.Tensor]]"
                ]
            }
        },
        "DeepSORT.pre_process": {
            "name": "pre_process",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "detections": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DeepSORT.extract_features_only": {
            "name": "extract_features_only",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "coords": [
                    "str",
                    "List[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "DeepSORT.update": {
            "name": "update",
            "location": 143,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "int",
                    "bool",
                    "List[List[str]]",
                    "float"
                ],
                "out_scores": [
                    "str",
                    "int",
                    "bool",
                    "List[List[str]]",
                    "float"
                ],
                "out_boxes": [
                    "int",
                    "list",
                    "Union[str, List[str]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/detection.py": {
        "Detection.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tlwh": [
                    "int",
                    "bool",
                    "float"
                ],
                "confidence": [
                    "int",
                    "float",
                    "Union[str, type]",
                    "Dict[str, str]"
                ],
                "feature": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Detection.to_tlbr": {
            "name": "to_tlbr",
            "location": 33,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detection.to_xyah": {
            "name": "to_xyah",
            "location": 41,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/iou_matching.py": {
        "iou": {
            "name": "iou",
            "location": 6,
            "return": [
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "bbox": [
                    "str",
                    "int",
                    "Sequence[MutableSet[int]]"
                ],
                "candidates": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "iou_cost": {
            "name": "iou_cost",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "tracks": [
                    "list",
                    "List['cirq.Qid']",
                    "Sequence['cirq.Qid']"
                ],
                "detections": [
                    "str",
                    "numpy.ndarray",
                    "bool"
                ],
                "track_indices": [
                    "int",
                    "bytes",
                    "Union[List[str], List[int]]",
                    "List['cirq.Qid']",
                    "bool"
                ],
                "detection_indices": [
                    "int",
                    "bytes",
                    "Union[List[str], List[int]]",
                    "List['cirq.Qid']",
                    "bool"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/kalman_filter.py": {
        "KalmanFilter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KalmanFilter.initiate": {
            "name": "initiate",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "measurement": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "KalmanFilter.predict": {
            "name": "predict",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "int",
                    "Callable",
                    "str"
                ],
                "covariance": [
                    "List['cirq.Qid']",
                    "numpy.ndarray",
                    "float",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "KalmanFilter.project": {
            "name": "project",
            "location": 124,
            "return": [
                "int",
                "float",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "str",
                    "float"
                ],
                "covariance": [
                    "numpy.ndarray",
                    "Tuple['cirq.Qid']",
                    "Set[str]"
                ]
            }
        },
        "KalmanFilter.update": {
            "name": "update",
            "location": 153,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "bool"
                ],
                "covariance": [],
                "measurement": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "IO"
                ]
            }
        },
        "KalmanFilter.gating_distance": {
            "name": "gating_distance",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "Awaitable",
                    "float",
                    "str"
                ],
                "covariance": [],
                "measurements": [
                    "BaseException"
                ],
                "only_position": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/linear_assignment.py": {
        "min_cost_matching": {
            "name": "min_cost_matching",
            "location": 10,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "distance_metric": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "max_distance": [
                    "Tuple[float, float]",
                    "int"
                ],
                "tracks": [
                    "int",
                    "bool"
                ],
                "detections": [
                    "int",
                    "bool"
                ],
                "track_indices": [
                    "Union[List[str], List[int]]",
                    "Sequence[T]",
                    "List[int]",
                    "Tuple[FrozenSet[int]]"
                ],
                "detection_indices": [
                    "Union[List[str], List[int]]",
                    "Sequence[T]",
                    "List[int]",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        },
        "matching_cascade": {
            "name": "matching_cascade",
            "location": 78,
            "return": [
                "bool",
                "str",
                "int",
                "OrderedDict",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "distance_metric": [
                    "int",
                    "Hashable",
                    "numpy.ndarray"
                ],
                "max_distance": [
                    "int",
                    "Hashable",
                    "numpy.ndarray"
                ],
                "cascade_depth": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "tracks": [
                    "list",
                    "List[Dict]",
                    "List[int]",
                    "int",
                    "Tuple[FrozenSet[int]]"
                ],
                "detections": [
                    "tuple",
                    "int",
                    "List[float]",
                    "Tuple[int]",
                    "List[int]"
                ],
                "track_indices": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[Union[int, Any]]",
                    "List[Dict[str, Any]]",
                    "int",
                    "Optional[bytes]"
                ],
                "detection_indices": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Optional[object]",
                    "Optional[int]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "gate_cost_matrix": {
            "name": "gate_cost_matrix",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "kf": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "cost_matrix": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "tracks": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "detections": [
                    "float",
                    "numpy.ndarray",
                    "str"
                ],
                "track_indices": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "detection_indices": [
                    "float",
                    "numpy.ndarray",
                    "str"
                ],
                "gated_cost": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "only_position": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/nn_matching.py": {
        "_pdist": {
            "name": "_pdist",
            "location": 4,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "numpy.ndarray"
                ],
                "b": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "numpy.ndarray"
                ]
            }
        },
        "_cosine_distance": {
            "name": "_cosine_distance",
            "location": 30,
            "return": [
                "int",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "dict",
                    "Type[T]",
                    "Optional[Any]",
                    "bytes",
                    "numpy.array",
                    "Dict[str, int]"
                ],
                "b": [],
                "data_is_normalized": [
                    "Dict[str, Any]",
                    "int",
                    "Exception"
                ]
            }
        },
        "_nn_euclidean_distance": {
            "name": "_nn_euclidean_distance",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]",
                    "float"
                ],
                "y": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]",
                    "float"
                ]
            }
        },
        "_nn_cosine_distance": {
            "name": "_nn_cosine_distance",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "NearestNeighborDistanceMetric.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "bool",
                    "Mapping[str, float]",
                    "Exception",
                    "Callable[..., bool]",
                    "str",
                    "Sequence[str]"
                ],
                "matching_threshold": [
                    "Tuple[int]",
                    "bool"
                ],
                "budget": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "NearestNeighborDistanceMetric.partial_fit": {
            "name": "partial_fit",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "Callable",
                    "str"
                ],
                "targets": [
                    "int",
                    "Callable",
                    "str"
                ],
                "active_targets": [
                    "int"
                ]
            }
        },
        "NearestNeighborDistanceMetric.distance": {
            "name": "distance",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "Dict[str, str]",
                    "bool"
                ],
                "targets": [
                    "str",
                    "list",
                    "Dict[str, str]",
                    "List[List[str]]",
                    "List[float]"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/preprocessing.py": {
        "non_max_suppression": {
            "name": "non_max_suppression",
            "location": 4,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "boxes": [
                    "numpy.ndarray",
                    "str",
                    "Tuple[float, float, float]"
                ],
                "max_bbox_overlap": [
                    "int",
                    "bytes",
                    "str"
                ],
                "scores": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/track.py": {
        "Track.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "int",
                    "bool",
                    "str"
                ],
                "covariance": [
                    "int",
                    "bool",
                    "str"
                ],
                "track_id": [
                    "str",
                    "int",
                    "bytearray"
                ],
                "n_init": [
                    "int",
                    "bool",
                    "str"
                ],
                "max_age": [
                    "int",
                    "Optional[float]"
                ],
                "feature": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Tuple[str, int]]",
                    "Iterable[str]"
                ]
            }
        },
        "Track.to_tlwh": {
            "name": "to_tlwh",
            "location": 82,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.to_tlbr": {
            "name": "to_tlbr",
            "location": 97,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.predict": {
            "name": "predict",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kf": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Track.update": {
            "name": "update",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kf": [
                    "Optional[str]",
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "int"
                ],
                "detection": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "Track.mark_missed": {
            "name": "mark_missed",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.is_tentative": {
            "name": "is_tentative",
            "location": 155,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.is_confirmed": {
            "name": "is_confirmed",
            "location": 160,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.is_deleted": {
            "name": "is_deleted",
            "location": 164,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/tracker.py": {
        "Tracker.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "int",
                    "list",
                    "Tuple[float, float]",
                    "float"
                ],
                "max_iou_distance": [
                    "int",
                    "float",
                    "str"
                ],
                "max_age": [
                    "int",
                    "float"
                ],
                "n_init": [
                    "int",
                    "list",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "Tracker.predict": {
            "name": "predict",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracker.update": {
            "name": "update",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "detections": [
                    "str",
                    "Dict[str, List[str]]",
                    "list",
                    "set",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "Tracker._match": {
            "name": "_match",
            "location": 92,
            "return": [
                "bool",
                "str",
                "int",
                "OrderedDict",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "detections": [
                    "dict",
                    "int"
                ]
            }
        },
        "Tracker._initiate_track": {
            "name": "_initiate_track",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "detection": [
                    "int",
                    "str",
                    "List[Mapping[str, Any]]"
                ]
            }
        },
        "Tracker._match.gated_metric": {
            "name": "gated_metric",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "tracks": [
                    "List[int]",
                    "Dict[str, int]",
                    "ajapaik.ajapaik.models.Photo"
                ],
                "dets": [
                    "List[numpy.ndarray]",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "track_indices": [
                    "List[int]",
                    "Dict[str, int]",
                    "ajapaik.ajapaik.models.Photo"
                ],
                "detection_indices": [
                    "List[numpy.ndarray]",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/models/tracking/deep_sort/__init__.py": {},
    "cougar-master/cougar/graphs/modules/l2norm.py": {
        "L2Norm.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_channels": [
                    "int",
                    "str",
                    "float",
                    "Set[str]"
                ],
                "scale": [
                    "int",
                    "tuple",
                    "Optional[int]",
                    "Union[str, float]"
                ]
            }
        },
        "L2Norm.reset_parameters": {
            "name": "reset_parameters",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "L2Norm.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/modules/separable_conv.py": {
        "SeparableConv2d.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "bool",
                    "int"
                ],
                "out_channels": [
                    "bool",
                    "int"
                ],
                "kernel_size": [
                    "bool",
                    "int"
                ],
                "stride": [
                    "bool",
                    "int"
                ],
                "padding": [
                    "bool",
                    "int"
                ],
                "onnx_compatible": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "SeparableConv2d.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/modules/siamese_net.py": {
        "SiameseNetwork.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SiameseNetwork.forward_once": {
            "name": "forward_once",
            "location": 46,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "SiameseNetwork.forward": {
            "name": "forward",
            "location": 52,
            "return": [
                "bytes",
                "torch.Tensor",
                "Tuple[int, str]",
                "int",
                "List[dict]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input3": [
                    "torch.BoolTensor",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        }
    },
    "cougar-master/cougar/graphs/modules/__init__.py": {},
    "cougar-master/cougar/solver/build.py": {
        "make_optimizer": {
            "name": "make_optimizer",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "torch.nn.Module",
                    "Type[T]",
                    "str",
                    "List[Tuple[int, int, float]]"
                ],
                "model": [
                    "torch.nn.Module",
                    "Type[T]",
                    "str",
                    "List[Tuple[int, int, float]]"
                ],
                "lr": [
                    "torch.nn.Module",
                    "Type[T]",
                    "str",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "make_lr_scheduler": {
            "name": "make_lr_scheduler",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "Callable",
                    "str"
                ],
                "optimizer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "milestones": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cougar-master/cougar/solver/lr_scheduler.py": {
        "WarmupMultiStepLR.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "bool",
                    "float",
                    "str"
                ],
                "milestones": [
                    "str",
                    "bool",
                    "Optional[bytes]"
                ],
                "gamma": [
                    "Callable",
                    "bool"
                ],
                "warmup_factor": [
                    "Callable",
                    "bool"
                ],
                "warmup_iters": [
                    "Callable",
                    "bool"
                ],
                "warmup_method": [
                    "int",
                    "str",
                    "float"
                ],
                "last_epoch": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "WarmupMultiStepLR.get_lr": {
            "name": "get_lr",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/solver/__init__.py": {},
    "cougar-master/cougar/structures/image_list.py": {
        "to_image_list": {
            "name": "to_image_list",
            "location": 29,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "tensors": [
                    "int",
                    "Optional[int]",
                    "list",
                    "str"
                ],
                "size_divisible": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "ImageList.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tensors": [
                    "int",
                    "str"
                ],
                "image_sizes": [
                    "int",
                    "bool",
                    "Union[Tuple[int, int], int]",
                    "Dict[str, int]"
                ]
            }
        },
        "ImageList.to": {
            "name": "to",
            "location": 24,
            "return": [
                "str",
                "int",
                "bytearray",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cougar-master/cougar/structures/__init__.py": {},
    "cougar-master/tests/data/datasets/test_voc.py": {
        "test_get_voc": {
            "name": "test_get_voc",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cougar-master/tests/graphs/backbone/test_vgg.py": {
        "test_vgg": {
            "name": "test_vgg",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cougar-master/tests/graphs/loss/test_focal_loss.py": {
        "test_focal_loss": {
            "name": "test_focal_loss",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cougar-master/tests/graphs/models/object_detection/ssd/test_box_predictor.py": {
        "test_SSDBoxPredictor": {
            "name": "test_SSDBoxPredictor",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cougar-master/tests/graphs/module/test_l2norm.py": {
        "test_L2Norm": {
            "name": "test_L2Norm",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cougar-master/tests/graphs/module/test_separable_conv.py": {
        "test_separable_conv2d": {
            "name": "test_separable_conv2d",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "cougar-master/tools/train_model.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, str]",
                    "Optional[dict]"
                ],
                "args": []
            }
        },
        "arg": {
            "name": "arg",
            "location": 20,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    }
}
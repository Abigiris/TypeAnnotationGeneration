{
    "court_docket_scraper-master/locations.py": {},
    "court_docket_scraper-master/run.py": {
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "court_docket_scraper-master/logs/__init__.py": {},
    "court_docket_scraper-master/logs/config/logging.py": {
        "logs_config": {
            "name": "logs_config",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "default_path": [
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "pathlib.Path"
                ],
                "default_level": [
                    "int",
                    "Union[None, int]",
                    "Optional[int]"
                ],
                "env_key": [
                    "bytes",
                    "Optional[int]",
                    "int",
                    "BinaryIO",
                    "Optional[List[str]]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "court_docket_scraper-master/logs/config/__init__.py": {},
    "court_docket_scraper-master/modules/convert.py": {
        "convert_pdf_to_text": {
            "name": "convert_pdf_to_text",
            "location": 22,
            "return": [
                "int",
                "str",
                "Type[T]"
            ],
            "arguments": {
                "pdf_path": [
                    "str"
                ],
                "docketnum": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/download.py": {
        "download_pdf": {
            "name": "download_pdf",
            "location": 14,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "driver": [
                    "str",
                    "int"
                ],
                "docket_url": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "docketnum": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/email.py": {
        "email_error_notification": {
            "name": "email_error_notification",
            "location": 25,
            "return": [
                "T",
                "int",
                "str"
            ],
            "arguments": {
                "error_summary": [],
                "full_error_msg": [
                    "str",
                    "int",
                    "type",
                    "bool",
                    "Iterable[str]",
                    "BinaryIO"
                ]
            }
        },
        "email_notification": {
            "name": "email_notification",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "scrape_start_datetime": [
                    "str"
                ],
                "scrape_end_datetime": [
                    "List[str]",
                    "int"
                ],
                "target_scrape_day": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "str",
                    "Mapping"
                ],
                "county_list": [
                    "str",
                    "evolution.encoding.base.Vertex",
                    "set"
                ]
            }
        },
        "gen_mobile_tease_content": {
            "name": "gen_mobile_tease_content",
            "location": 150,
            "return": [],
            "arguments": {
                "county_list": [
                    "int",
                    "Dict[str, List[str]]",
                    "Iterable[str]",
                    "List[List[Any]]",
                    "Union[str, List[str]]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]"
                ],
                "num_of_cases": [
                    "int",
                    "Dict[int, List[Any]]"
                ]
            }
        },
        "gen_intro_content": {
            "name": "gen_intro_content",
            "location": 169,
            "return": [
                "bool",
                "str",
                "Union[List, Dict]",
                "float"
            ],
            "arguments": {
                "county_list": [
                    "int",
                    "bool",
                    "Iterable[\"Entity\"]",
                    "Callable"
                ],
                "num_of_cases": [
                    "int",
                    "Optional[int]"
                ],
                "target_scrape_day": [
                    "List[str]",
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "scrape_end_datetime": [
                    "datetime.datetime",
                    "pandas.DataFrame",
                    "Optional[int]",
                    "List[int]",
                    "str",
                    "datetime.date",
                    "Sequence[str]"
                ],
                "yesterday_date": [
                    "pandas.DataFrame",
                    "str",
                    "dict"
                ]
            }
        },
        "gen_footer_content": {
            "name": "gen_footer_content",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "scrape_start_datetime": [
                    "bool",
                    "datetime.datetime",
                    "str",
                    "int"
                ],
                "scrape_end_datetime": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.datetime",
                    "datetime.date",
                    "pandas.DataFrame"
                ],
                "county_list": [
                    "float",
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "insert_special_message": {
            "name": "insert_special_message",
            "location": 248,
            "return": [
                "bool",
                "float",
                "Iterable[str]"
            ],
            "arguments": {
                "mobile_tease_content": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "subject_line": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_final_email_payload": {
            "name": "create_final_email_payload",
            "location": 300,
            "return": [
                "pandas.DataFrame",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "dir_email_template": [
                    "str"
                ],
                "mobile_tease_content": [
                    "str"
                ],
                "intro_content": [
                    "str",
                    "List[str]"
                ],
                "body_content": [
                    "str"
                ],
                "footer_content": [
                    "dict"
                ]
            }
        },
        "create_subject_line": {
            "name": "create_subject_line",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "target_scrape_date": [
                    "Optional[Any]",
                    "int",
                    "str",
                    "Optional[float]",
                    "Callable",
                    "Optional[str]",
                    "Optional[bool]",
                    "Union[str, Callable]"
                ],
                "formatted_date": [
                    "str"
                ],
                "yesterday_date": [
                    "str",
                    "datetime.timedelta",
                    "Optional[str]"
                ],
                "county_list": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Tuple[str, str]]",
                    "list",
                    "Tuple[str, str]"
                ]
            }
        },
        "login_to_gmail_and_send": {
            "name": "login_to_gmail_and_send",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "recipients": [
                    "str",
                    "List[str]",
                    "Optional[float]",
                    "int"
                ],
                "html_msg": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "Optional[int]",
                    "bool",
                    "Union[Literal, str]"
                ],
                "subject_line": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "pandas.Series"
                ],
                "attachments": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/export.py": {
        "convert_dict_into_df": {
            "name": "convert_dict_into_df",
            "location": 21,
            "return": [
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "bool",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "docketlist": [
                    "List[Dict]",
                    "Mapping[str, Any]",
                    "str",
                    "bool",
                    "Dict[int, Dict[str, Any]]",
                    "dict"
                ],
                "county": [
                    "str",
                    "logging.Logger",
                    "Exception",
                    "int"
                ]
            }
        },
        "convert_df_to_html": {
            "name": "convert_df_to_html",
            "location": 42,
            "return": [
                "str",
                "Union[int, float]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "int"
                ]
            }
        },
        "truncate_charges": {
            "name": "truncate_charges",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "charges": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "save_html_county_payload": {
            "name": "save_html_county_payload",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "county_intro": [
                    "str",
                    "datetime.datetime",
                    "bool"
                ],
                "df_styled": [
                    "Optional[str]",
                    "int",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "convert_df_to_csv": {
            "name": "convert_df_to_csv",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "Union[str, pathlib.Path]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "convert_csv_to_json": {
            "name": "convert_csv_to_json",
            "location": 223,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "scrape_end_time": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "Optional[Any]",
                    "Tuple[int, int]",
                    "int",
                    "Optional[int]"
                ],
                "county_list": [
                    "bool",
                    "bytes",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "save_copy_of_final_email": {
            "name": "save_copy_of_final_email",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "path_final_email": [
                    "Union[str, pathlib.Path]",
                    "bool",
                    "List[str]",
                    "str",
                    "pathlib.Path"
                ],
                "msg_content": [
                    "str",
                    "pathlib.Path",
                    "IO"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/initialize.py": {
        "initialize_driver": {
            "name": "initialize_driver",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "court_docket_scraper-master/modules/misc.py": {
        "print_title": {
            "name": "print_title",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "program_name": [
                    "str"
                ]
            }
        },
        "get_datetime_now_formatted": {
            "name": "get_datetime_now_formatted",
            "location": 25,
            "return": [
                "Optional[str]",
                "datetime.date",
                "str"
            ],
            "arguments": {}
        },
        "gen_unique_filename": {
            "name": "gen_unique_filename",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Tuple[str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bool"
                ],
                "ext": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bool"
                ],
                "counter": [
                    "str",
                    "Optional[str]",
                    "logging.Logger"
                ]
            }
        },
        "pdf_path_gen": {
            "name": "pdf_path_gen",
            "location": 53,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]",
                "int",
                "Hashable",
                "os.PathLike"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path"
                ],
                "docketnum": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "extracted_text_path_gen": {
            "name": "extracted_text_path_gen",
            "location": 60,
            "return": [
                "str",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path"
                ],
                "docketnum": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "yesterday_date": {
            "name": "yesterday_date",
            "location": 67,
            "return": [
                "Dict[str, int]",
                "pathlib.Path",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "today_date": {
            "name": "today_date",
            "location": 73,
            "return": [
                "Dict[str, int]",
                "pathlib.Path",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "camel_case_convert": {
            "name": "camel_case_convert",
            "location": 79,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "item": [
                    "os.DirEntry",
                    "int",
                    "Union[str, IO[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "delete_folders_and_contents": {
            "name": "delete_folders_and_contents",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "create_folders": {
            "name": "create_folders",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "dirs": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "clean_list_of_dicts": {
            "name": "clean_list_of_dicts",
            "location": 116,
            "return": [
                "str",
                "dict",
                "bytes",
                "OrderedDict[str, Any]",
                "Dict[str, Any]",
                "Union[Dict, List]",
                "Union[Dict, Tuple]"
            ],
            "arguments": {
                "list_of_dicts": [
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "bool",
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "clean_df": {
            "name": "clean_df",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "float",
                    "Sequence[str]"
                ]
            }
        },
        "detect_keyword_in_df": {
            "name": "detect_keyword_in_df",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "column": [
                    "str"
                ],
                "keyword": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[int, str]]"
                ]
            }
        },
        "highlight_row_in_df": {
            "name": "highlight_row_in_df",
            "location": 160,
            "return": [
                "int",
                "pathlib.Path",
                "dict",
                "str",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "Optional[Collection[int]]",
                    "Optional[Union[int, slice]]",
                    "pandas.DataFrame",
                    "str",
                    "Optional[int]"
                ],
                "keyword_list": [
                    "int",
                    "Sized",
                    "List[datetime.date]",
                    "Sequence[Sequence[float]]"
                ],
                "column": [
                    "List[str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "random_sleep": {
            "name": "random_sleep",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "rangeStart": [
                    "int",
                    "float",
                    "str"
                ],
                "rangeEnd": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/move_s3.py": {
        "copy_file_to_s3_bucket": {
            "name": "copy_file_to_s3_bucket",
            "location": 13,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "court_docket_scraper-master/modules/parse.py": {
        "charges_clean_up": {
            "name": "charges_clean_up",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "charges": [
                    "Dict[str, Any]",
                    "dict",
                    "List[int]",
                    "logging.LogRecord",
                    "str"
                ]
            }
        },
        "parse_main": {
            "name": "parse_main",
            "location": 106,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "parser": {
            "name": "parser",
            "location": 121,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Dict[str, Tuple[str, int, int]]"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/scrape.py": {
        "scrape": {
            "name": "scrape",
            "location": 37,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {}
        },
        "scrape_search_results": {
            "name": "scrape_search_results",
            "location": 54,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "driver": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Union[str, int]]",
                    "str",
                    "int"
                ],
                "county": [
                    "str",
                    "bool",
                    "int"
                ],
                "scrape_date": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "Union[int, float]",
                    "float"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/style.py": {
        "make_clickable": {
            "name": "make_clickable",
            "location": 41,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "currency_convert": {
            "name": "currency_convert",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "highlight": {
            "name": "highlight",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "color_negative_red": {
            "name": "color_negative_red",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/upload.py": {
        "upload_to_rest_api": {
            "name": "upload_to_rest_api",
            "location": 20,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 92,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ],
                "rest_api": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "add_cases": {
            "name": "add_cases",
            "location": 118,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]"
                ],
                "rest_api": [
                    "str",
                    "Union[str, List[str]]",
                    "Mapping[str, str]",
                    "List[str]",
                    "Sequence[str]",
                    "dict"
                ],
                "json_data": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 136,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "rest_api": [
                    "str",
                    "bytes"
                ]
            }
        },
        "failure_output": {
            "name": "failure_output",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "action": [
                    "str",
                    "T",
                    "int"
                ],
                "status": [
                    "int",
                    "logging.Logger",
                    "bytes",
                    "str"
                ],
                "data": [
                    "int",
                    "logging.Logger",
                    "bytes",
                    "str"
                ]
            }
        },
        "success_output": {
            "name": "success_output",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "action": [
                    "str"
                ],
                "data": [
                    "bytes",
                    "logging.Logger"
                ]
            }
        }
    },
    "court_docket_scraper-master/modules/__init__.py": {},
    "court_docket_scraper-master/tests/__init__.py": {},
    "court_docket_scraper-master/tests/fixtures/dict_list/docket_list.py": {
        "docket_list_gen": {
            "name": "docket_list_gen",
            "location": 1,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "num_of_items": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        }
    },
    "court_docket_scraper-master/tests/fixtures/dict_list/docket_list_with_duplicates.py": {},
    "court_docket_scraper-master/tests/fixtures/dict_list/docket_list_with_homicide.py": {},
    "court_docket_scraper-master/tests/modules/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_convert/test_convert.py": {
        "TestConvertPdfToText.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertPdfToText.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertPdfToText.test_text_file_is_generated": {
            "name": "test_text_file_is_generated",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_convert/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_download/test_download.py": {
        "initialize_test_driver": {
            "name": "initialize_test_driver",
            "location": 26,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "TestPdfDownload.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPdfDownload.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPdfDownload.test_download_pdf": {
            "name": "test_download_pdf",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPdfDownload.test_error_raised_when_pdf_download_fails": {
            "name": "test_error_raised_when_pdf_download_fails",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_download/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_email/test_email.py": {
        "TestEmail.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_email_sends": {
            "name": "test_email_sends",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_email/test_email_error.py": {
        "TestEmailError.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailError.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailError.test_error_email_runs_without_errors": {
            "name": "test_error_email_runs_without_errors",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_email/test_email_homcide.py": {
        "TestEmailHomicide.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailHomicide.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailHomicide.test_email_with_homicide_sends": {
            "name": "test_email_with_homicide_sends",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_email/test_email_murder_and_homicide.py": {
        "TestEmailHomicideAndMurder.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailHomicideAndMurder.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailHomicideAndMurder.test_email_with_homicide_and_murder_sends": {
            "name": "test_email_with_homicide_and_murder_sends",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_email/test_email_with_attachments.py": {
        "TestEmail.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_email_with_attachments_sends": {
            "name": "test_email_with_attachments_sends",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_email/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_export/test_export.py": {
        "TestConvertDictToDf.test_convert_dict_into_df": {
            "name": "test_convert_dict_into_df",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertDictToDf.test_convert_empty_dict_into_df": {
            "name": "test_convert_empty_dict_into_df",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertDfToCsv.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertDfToCsv.tearDown": {
            "name": "tearDown",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertDfToCsv.test_csv_file_is_created": {
            "name": "test_csv_file_is_created",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaveHtmlPayload.setUp": {
            "name": "setUp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaveHtmlPayload.tearDown": {
            "name": "tearDown",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaveHtmlPayload.test_html_file_is_created": {
            "name": "test_html_file_is_created",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_export/test_save_html_payload.py": {
        "TestSaveHtmlPayload.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaveHtmlPayload.test_html_file_is_created": {
            "name": "test_html_file_is_created",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_export/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_initialize/test_initialize.py": {
        "TestInitialize.test_chrome_driver_initializes": {
            "name": "test_chrome_driver_initializes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_initialize/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_misc/test_misc.py": {
        "TestPdfPathGen.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPdfPathGen.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPdfPathGen.test_generate_unique_pdf_names": {
            "name": "test_generate_unique_pdf_names",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCleanList.test_duplicates_are_removed": {
            "name": "test_duplicates_are_removed",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCleanList.test_no_duplicates_in_results": {
            "name": "test_no_duplicates_in_results",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCleanList.test_handles_empty_list": {
            "name": "test_handles_empty_list",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateFolders.setUp": {
            "name": "setUp",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateFolders.tearDown": {
            "name": "tearDown",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateFolders.test_directories_are_created": {
            "name": "test_directories_are_created",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_misc/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_move_s3/helper.py": {
        "check_file_exists_in_s3_bucket": {
            "name": "check_file_exists_in_s3_bucket",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ],
                "dst_path": [
                    "str",
                    "list"
                ]
            }
        },
        "delete_key_in_bucket": {
            "name": "delete_key_in_bucket",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ],
                "dst_path": [
                    "str",
                    "int",
                    "Optional[IO[str]]"
                ]
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_move_s3/test_move_json.py": {
        "TestMoveS3.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveS3.tearDown": {
            "name": "tearDown",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveS3.test_file_is_moved_to_s3_bucket": {
            "name": "test_file_is_moved_to_s3_bucket",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_parse/test_bail.py": {
        "TestParseBail.test_parsed_bail_matches_expected_values": {
            "name": "test_parsed_bail_matches_expected_values",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_parse/test_defendant.py": {
        "TestParseBail.test_parsed_defendant_matches_expected_values": {
            "name": "test_parsed_defendant_matches_expected_values",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_parse/test_gender.py": {
        "TestParseBail.test_parsed_defendant_matches_expected_values": {
            "name": "test_parsed_defendant_matches_expected_values",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_parse/test_parse_main.py": {
        "TestParseMain.test_parse_main_runs_without_error": {
            "name": "test_parse_main_runs_without_error",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_parse/test_race.py": {
        "TestParseBail.test_parsed_defendant_matches_expected_values": {
            "name": "test_parsed_defendant_matches_expected_values",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_parse/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_scrape/test_scrape.py": {
        "TestScrape.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScrape.test_scrape_without_error": {
            "name": "test_scrape_without_error",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_scrape/__init__.py": {},
    "court_docket_scraper-master/tests/modules/test_upload/helpers.py": {
        "helper_delete": {
            "name": "helper_delete",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Type[T]"
                ],
                "rest_api": [
                    "str",
                    "Dict[str, Any]"
                ],
                "list_of_docketnums": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "helper_get_docketnums_in_db": {
            "name": "helper_get_docketnums_in_db",
            "location": 25,
            "return": [
                "int",
                "set",
                "Dict[str, str]"
            ],
            "arguments": {
                "rest_api": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_upload/test_upload.py": {
        "TestUpload.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_upload_cases_to_db": {
            "name": "test_upload_cases_to_db",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_upload/test_upload_failure.py": {
        "TestUploadFailure.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadFailure.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadFailure.test_bad_data_not_uploaded_to_db": {
            "name": "test_bad_data_not_uploaded_to_db",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "court_docket_scraper-master/tests/modules/test_upload/__init__.py": {}
}
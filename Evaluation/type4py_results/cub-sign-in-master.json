{
    "cub-sign-in-master/app/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 25,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        },
        "run_tests": {
            "name": "run_tests",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "google_auth_required": {
            "name": "google_auth_required",
            "location": 49,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "handler": [
                    "Callable",
                    "Dict[str, Any]",
                    "Exception",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "is_invited": {
            "name": "is_invited",
            "location": 64,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "logging.Logger",
                    "Exception",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "invite_required": {
            "name": "invite_required",
            "location": 87,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "google.protobuf.message.Message"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_autocomplete_data": {
            "name": "get_autocomplete_data",
            "location": 102,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "list",
                "Mapping[str, str]",
                "Tuple[str, Any, Any, Any]",
                "Dict[str, Set[str]]",
                "Iterable[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "root": {
            "name": "root",
            "location": 126,
            "return": [
                "Dict[str, Any]",
                "int",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {}
        },
        "privacy": {
            "name": "privacy",
            "location": 132,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "sign_in": {
            "name": "sign_in",
            "location": 138,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "sign_out": {
            "name": "sign_out",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "log_sign_in": {
            "name": "log_sign_in",
            "location": 166,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, float]",
                "Dict[str, dict]",
                "Set[str]",
                "dict"
            ],
            "arguments": {}
        },
        "log_sign_out": {
            "name": "log_sign_out",
            "location": 195,
            "return": [
                "bool",
                "str",
                "list"
            ],
            "arguments": {}
        },
        "google_auth_required.f": {
            "name": "f",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "invite_required.f": {
            "name": "f",
            "location": 89,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "cub-sign-in-master/app/app_test.py": {
        "BaseTestCase.create_app": {
            "name": "create_app",
            "location": 9,
            "return": [
                "flask.Flask",
                "Optional[flask.Flask]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationTest.test_unauthenticated_redirect": {
            "name": "test_unauthenticated_redirect",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationTest.test_uninvited_login": {
            "name": "test_uninvited_login",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_invited_mock": [
                    "mock.MagicMock"
                ],
                "ac_mock_task": [
                    "mock.MagicMock"
                ]
            }
        },
        "AuthenticationTest.test_invited_login": {
            "name": "test_invited_login",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_invited_mock": [
                    "mock.MagicMock"
                ],
                "ac_mock_task": [
                    "mock.MagicMock"
                ]
            }
        },
        "TaskTests.sign_in_task": {
            "name": "sign_in_task",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskTests.sign_out_task_no_sign_in": {
            "name": "sign_out_task_no_sign_in",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskTests.sign_out_task_existing_sign_in": {
            "name": "sign_out_task_existing_sign_in",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmissionTest.test_submit_form_sign_in": {
            "name": "test_submit_form_sign_in",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmissionTest.test_submit_form_sign_out": {
            "name": "test_submit_form_sign_out",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmissionTest.test_clear_signature_field": {
            "name": "test_clear_signature_field",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NaivgationTests.test_toggle_switch": {
            "name": "test_toggle_switch",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NaivgationTests.test_submit_sign_in_form": {
            "name": "test_submit_sign_in_form",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NaivgationTests.test_submit_sign_out_form": {
            "name": "test_submit_sign_out_form",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NaivgationTests.test_root_redirect_to_sign_in": {
            "name": "test_root_redirect_to_sign_in",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cub-sign-in-master/app/forms.py": {},
    "cub-sign-in-master/celery-queue/tasks.py": {
        "config_from_pyfile": {
            "name": "config_from_pyfile",
            "location": 35,
            "return": [
                "dict",
                "str",
                "Optional[Dict]",
                "Dict[str, Union[str, int]]",
                "apistar.types.WSGIEnviron",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "make_celery": {
            "name": "make_celery",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "make_sheets_client": {
            "name": "make_sheets_client",
            "location": 88,
            "return": [
                "int",
                "bool",
                "list",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "service_creds_file": []
            }
        },
        "update_name_autocomplete": {
            "name": "update_name_autocomplete",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int"
                ],
                "names_file": [
                    "str"
                ],
                "spreadsheet_id": [
                    "str"
                ],
                "sheet_names": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "google.cloud.bigquery.dataseDatasetReference",
                    "google.cloud.bigquery.DestinationFormat"
                ]
            }
        },
        "add_sign_in": {
            "name": "add_sign_in",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "str",
                    "django.utils.timezone.timedelta",
                    "Callable"
                ],
                "cub_name": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "cub_sig": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "parent_sig": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "time": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "date": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "spreadsheet_id": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "sheet_name": [
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "add_sign_out": {
            "name": "add_sign_out",
            "location": 151,
            "return": [
                "int",
                "Union[tuple, list]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [
                    "bytes",
                    "Optional[int]",
                    "dict",
                    "TextIO",
                    "NamedTuple"
                ],
                "cub_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "parent_sig": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "List[int]"
                ],
                "time": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "List[int]"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "spreadsheet_id": [
                    "str",
                    "Optional[str]"
                ],
                "sheet_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "append_row": {
            "name": "append_row",
            "location": 232,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "sheets": [
                    "str"
                ],
                "spreadsheet_id": [
                    "str"
                ],
                "sheet_name": [
                    "str"
                ],
                "row": [
                    "str"
                ]
            }
        },
        "make_celery.setup_name_autocomplete": {
            "name": "setup_name_autocomplete",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "bool"
                ],
                "instance": [
                    "List[str]",
                    "type",
                    "str"
                ]
            }
        },
        "make_celery.ContextTask.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
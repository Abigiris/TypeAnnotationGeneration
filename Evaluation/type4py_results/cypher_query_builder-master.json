{
    "cypher_query_builder-master/cypher_query_builder/cypher_query_builder.py": {
        "Attributable.__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [
                "\"AttributeReference\""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "RelationMeta.__or__": {
            "name": "__or__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RelationMeta.__mul__": {
            "name": "__mul__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "times": [
                    "float",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Relation.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Relation.__or__": {
            "name": "__or__",
            "location": 29,
            "return": [
                "\"Relation\""
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Relation.__mul__": {
            "name": "__mul__",
            "location": 32,
            "return": [
                "\"Relation\""
            ],
            "arguments": {
                "self": [],
                "times": [
                    "float",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Relation.Not": {
            "name": "Not",
            "location": 36,
            "return": [
                "\"Relation\""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Relation.many": {
            "name": "many",
            "location": 40,
            "return": [
                "\"Relation\""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Relation.id": {
            "name": "id",
            "location": 44,
            "return": [
                "\"Relation\""
            ],
            "arguments": {
                "count": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ByConnector.to": {
            "name": "to",
            "location": 49,
            "return": [
                "\"Path\""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Connectable.relates_to": {
            "name": "relates_to",
            "location": 54,
            "return": [
                "\"Path\""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Connectable.relates_by": {
            "name": "relates_by",
            "location": 57,
            "return": [
                "ByConnector"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Connectable.outgoes_to": {
            "name": "outgoes_to",
            "location": 60,
            "return": [
                "\"Path\""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Connectable.outgoes_by": {
            "name": "outgoes_by",
            "location": 63,
            "return": [
                "ByConnector"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Connectable.ingoes_to": {
            "name": "ingoes_to",
            "location": 66,
            "return": [
                "\"Path\""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Connectable.ingoes_by": {
            "name": "ingoes_by",
            "location": 69,
            "return": [
                "ByConnector"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Path.shortest": {
            "name": "shortest",
            "location": 75,
            "return": [
                "\"Path\""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Path.all_shortest": {
            "name": "all_shortest",
            "location": 79,
            "return": [
                "\"Path\""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__getattr__": {
            "name": "__getattr__",
            "location": 87,
            "return": [
                "AttributeReference"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Node.id": {
            "name": "id",
            "location": 91,
            "return": [
                "\"Node\""
            ],
            "arguments": {
                "count": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Clause.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Clause.create": {
            "name": "create",
            "location": 125,
            "return": [
                "\"Clause\""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Clause.project": {
            "name": "project",
            "location": 129,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "projection": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "Exception"
                ]
            }
        },
        "match.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "cypher_query_builder-master/cypher_query_builder/__init__.py": {},
    "cypher_query_builder-master/examples/example.py": {}
}
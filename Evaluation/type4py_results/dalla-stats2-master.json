{
    "dalla-stats2-master/logger/dalla_logger/data_provider.py": {
        "DataProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "user": [
                    "str",
                    "Optional[str]"
                ],
                "passwd": [
                    "str",
                    "bool",
                    "zerver.models.Realm",
                    "Optional[bool]"
                ],
                "db": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DataProvider.create_database_schema": {
            "name": "create_database_schema",
            "location": 38,
            "return": [
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.__del__": {
            "name": "__del__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.is_connected": {
            "name": "is_connected",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.flatten_device_rows_exclude": {
            "name": "flatten_device_rows_exclude",
            "location": 121,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, models.DeviceRow]",
                    "Dict[str, models.HistoryRow]",
                    "Dict[str, object]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "DataProvider.insert_into_device_table": {
            "name": "insert_into_device_table",
            "location": 146,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, models.DeviceRow]",
                    "Dict[str, models.HistoryRow]",
                    "Sequence[Sequence[T]]",
                    "zam_repondeur.models.Amendement",
                    "T",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "DataProvider.convert_to_device_row": {
            "name": "convert_to_device_row",
            "location": 176,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, router_api.DeviceInfo]",
                    "int",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "DataProvider.get_person_rows": {
            "name": "get_person_rows",
            "location": 190,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, models.DeviceRow]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, float]",
                    "dict"
                ]
            }
        },
        "DataProvider.flatten_person_rows": {
            "name": "flatten_person_rows",
            "location": 222,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "person_rows": [
                    "Dict[int, models.PersonRow]",
                    "List[List]",
                    "int",
                    "list"
                ]
            }
        },
        "DataProvider.update_person_table_force": {
            "name": "update_person_table_force",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.update_person_table_flat_rows": {
            "name": "update_person_table_flat_rows",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat_persons": [
                    "str",
                    "bool"
                ]
            }
        },
        "DataProvider.update_person_table": {
            "name": "update_person_table",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, models.DeviceRow]",
                    "List[int]",
                    "str",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "DataProvider.update_device_table": {
            "name": "update_device_table",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, Any]",
                    "Type",
                    "Mapping[str, Sequence[str]]"
                ]
            }
        },
        "DataProvider.calculate_deltas": {
            "name": "calculate_deltas",
            "location": 350,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "devices_old": [
                    "Dict[str, models.DeviceRow]",
                    "bytes",
                    "datetime",
                    "int",
                    "bool"
                ],
                "devices_new": [
                    "Dict[str, models.DeviceRow]",
                    "int",
                    "bytes",
                    "Callable[[str], int]"
                ]
            }
        },
        "DataProvider.get_all_device_rows": {
            "name": "get_all_device_rows",
            "location": 377,
            "return": [
                "Optional[str]",
                "list",
                "app.models.GameMember",
                "app.models.course.Course",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.get_device_rows": {
            "name": "get_device_rows",
            "location": 405,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "str",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, router_api.DeviceInfo]",
                    "str",
                    "bytes"
                ]
            }
        },
        "DataProvider.convert_to_history_rows": {
            "name": "convert_to_history_rows",
            "location": 445,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[str]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, router_api.DeviceInfo]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "Dict[str, List[str]]",
                    "Mapping",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DataProvider.flatten_history_rows_exclude": {
            "name": "flatten_history_rows_exclude",
            "location": 455,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, models.DeviceRow]",
                    "Dict[str, models.HistoryRow]",
                    "Dict[str, object]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "DataProvider.insert_into_history_table": {
            "name": "insert_into_history_table",
            "location": 479,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, models.HistoryRow]",
                    "Dict[str, models.DeviceRow]",
                    "List[str]",
                    "List[int]",
                    "List[float]",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "DataProvider.update_history_table": {
            "name": "update_history_table",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "List[dict]",
                    "Union[tonga.models.records.base.BaseRecord, tonga.models.store.store_record.StoreRecord]"
                ]
            }
        },
        "DataProvider.update_database": {
            "name": "update_database",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[str, Any]",
                    "Dict[str, router_api.DeviceInfo]",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "dalla-stats2-master/logger/dalla_logger/logger_loop.py": {
        "print_usage": {
            "name": "print_usage",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "dalla-stats2-master/logger/dalla_logger/models.py": {
        "DeviceRow.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "mac_address": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "person_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "total_bytes": [
                    "int",
                    "Optional[int]"
                ],
                "on_peak": [
                    "str",
                    "int",
                    "bytes",
                    "dict"
                ],
                "off_peak": [
                    "str",
                    "int",
                    "bytes",
                    "dict"
                ],
                "delta": [
                    "str",
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        },
        "DeviceRow.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonRow.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "on_peak": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "off_peak": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PersonRow.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRow.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "history_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]"
                ],
                "device_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]"
                ],
                "ip_address": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "record_time": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "total_bytes": [
                    "int",
                    "bytes",
                    "str",
                    "float"
                ]
            }
        },
        "HistoryRow.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseMap.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dalla-stats2-master/logger/dalla_logger/router_api.py": {
        "init_session": {
            "name": "init_session",
            "location": 29,
            "return": [
                "str",
                "dict",
                "Exception",
                "int",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "router_ip": [
                    "str"
                ],
                "username": [
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Optional[dict]",
                    "str",
                    "requests.Session",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "dec_str_to_ip_str": {
            "name": "dec_str_to_ip_str",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "dec": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Union[str, int]"
                ]
            }
        },
        "get_devices": {
            "name": "get_devices",
            "location": 108,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "stats_dict_array": [
                    "List[int]",
                    "Callable",
                    "bool"
                ],
                "time_key": [
                    "int",
                    "dict"
                ]
            }
        },
        "get_device_records": {
            "name": "get_device_records",
            "location": 133,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "requests.Session"
                ]
            }
        },
        "DeviceInfo.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mac_address": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "ip_address": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "timestamp": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "total_bytes": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeviceInfo.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dalla-stats2-master/logger/dalla_logger/__init__.py": {},
    "dalla-stats2-master/logger/test/__init__.py": {}
}
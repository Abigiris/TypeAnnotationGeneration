{
    "dancingtogether-master/manage.py": {},
    "dancingtogether-master/accounts/admin.py": {},
    "dancingtogether-master/accounts/apps.py": {},
    "dancingtogether-master/accounts/forms.py": {},
    "dancingtogether-master/accounts/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dancingtogether-master/accounts/urls.py": {},
    "dancingtogether-master/accounts/views.py": {
        "JoinView.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str",
                "bool",
                "http_quesuser.model.User",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "models.Workspace"
                ]
            }
        },
        "JoinView.post": {
            "name": "post",
            "location": 32,
            "return": [
                "dict",
                "str",
                "Optional[Dict[str, str]]",
                "core.models.Recipe"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "JoinView.form_valid": {
            "name": "form_valid",
            "location": 38,
            "return": [
                "List[str]",
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, Any]"
                ]
            }
        },
        "LoginView.get": {
            "name": "get",
            "location": 45,
            "return": [
                "str",
                "bool",
                "http_quesuser.model.User",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "models.Workspace"
                ]
            }
        },
        "LoginView.post": {
            "name": "post",
            "location": 51,
            "return": [
                "dict",
                "str",
                "Optional[Dict[str, str]]",
                "core.models.Recipe"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "UserDetailView.get": {
            "name": "get",
            "location": 59,
            "return": [
                "int",
                "Dict[str, str]",
                "bytes",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "list"
                ]
            }
        },
        "UserDetailView.post": {
            "name": "post",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "ShowUserDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 72,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowUserDetailView.get": {
            "name": "get",
            "location": 77,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Dict[str, str]]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "UserPasswordChangeDoneView.get_context_data": {
            "name": "get_context_data",
            "location": 87,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPasswordChangeDoneView.get_success_url": {
            "name": "get_success_url",
            "location": 92,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPasswordChangeDoneView.post": {
            "name": "post",
            "location": 95,
            "return": [
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserDeleteView.post": {
            "name": "post",
            "location": 106,
            "return": [
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dancingtogether-master/accounts/__init__.py": {},
    "dancingtogether-master/accounts/migrations/0001_initial.py": {},
    "dancingtogether-master/accounts/migrations/__init__.py": {},
    "dancingtogether-master/accounts/tests/test_views.py": {
        "create_user": {
            "name": "create_user",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "models.Person.Person",
                    "bool",
                    "Dict[str, Any]",
                    "salon.models.Stylist",
                    "models.Dashboard"
                ]
            }
        },
        "AccountsViewsTests.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_sign_up": {
            "name": "test_user_sign_up",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_sign_up_already_logged_in": {
            "name": "test_user_sign_up_already_logged_in",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_login": {
            "name": "test_user_login",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_login_already_logged_in": {
            "name": "test_user_login_already_logged_in",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_can_see_profile": {
            "name": "test_user_can_see_profile",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_can_only_see_their_profile": {
            "name": "test_user_can_only_see_their_profile",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_needs_to_be_logged_in_to_see_profile": {
            "name": "test_user_needs_to_be_logged_in_to_see_profile",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_can_change_password": {
            "name": "test_user_can_change_password",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_can_only_change_their_password": {
            "name": "test_user_can_only_change_their_password",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_needs_to_be_logged_in_to_change_password": {
            "name": "test_user_needs_to_be_logged_in_to_change_password",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_can_delete_account": {
            "name": "test_user_can_delete_account",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_can_delete_only_their_account": {
            "name": "test_user_can_delete_only_their_account",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewsTests.test_user_needs_to_be_logged_in_to_delete_account": {
            "name": "test_user_needs_to_be_logged_in_to_delete_account",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dancingtogether-master/dancingtogether/asgi.py": {},
    "dancingtogether-master/dancingtogether/middleware.py": {
        "XContentTypeOptionsMiddleware.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "XContentTypeOptionsMiddleware.__call__": {
            "name": "__call__",
            "location": 6,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "str",
                    "Callable"
                ]
            }
        },
        "XXssProtectionMiddleware.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "XXssProtectionMiddleware.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "dancingtogether-master/dancingtogether/routing.py": {},
    "dancingtogether-master/dancingtogether/runner.py": {
        "PytestTestRunner.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PytestTestRunner.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "django.core.managemenbase.CommandParser"
                ],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "PytestTestRunner.run_tests": {
            "name": "run_tests",
            "location": 17,
            "return": [
                "bool",
                "list",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "test_labels": [
                    "Sequence[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "extra_tests": [
                    "List[str]",
                    "Optional[Sequence[Any]]",
                    "int",
                    "Optional[bool]"
                ]
            }
        }
    },
    "dancingtogether-master/dancingtogether/urls.py": {},
    "dancingtogether-master/dancingtogether/__init__.py": {},
    "dancingtogether-master/dancingtogether/settings/base.py": {},
    "dancingtogether-master/dancingtogether/settings/development.py": {},
    "dancingtogether-master/dancingtogether/settings/production.py": {},
    "dancingtogether-master/dancingtogether/settings/test.py": {},
    "dancingtogether-master/dancingtogether/settings/__init__.py": {},
    "dancingtogether-master/main/admin.py": {},
    "dancingtogether-master/main/apps.py": {},
    "dancingtogether-master/main/models.py": {},
    "dancingtogether-master/main/views.py": {
        "index": {
            "name": "index",
            "location": 4,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "about": {
            "name": "about",
            "location": 8,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "contact": {
            "name": "contact",
            "location": 12,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        }
    },
    "dancingtogether-master/main/__init__.py": {},
    "dancingtogether-master/main/migrations/__init__.py": {},
    "dancingtogether-master/radio/admin.py": {},
    "dancingtogether-master/radio/apps.py": {},
    "dancingtogether-master/radio/consumers.py": {
        "station_join_required": {
            "name": "station_join_required",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "station_admin_required": {
            "name": "station_admin_required",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "get_station_or_error": {
            "name": "get_station_or_error",
            "location": 234,
            "return": [
                "str",
                "salon.models.Stylist",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "station_id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "user": [
                    "str",
                    "int",
                    "esm.models.LastOperation",
                    "float",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "get_listener_or_error": {
            "name": "get_listener_or_error",
            "location": 248,
            "return": [
                "str",
                "salon.models.Stylist",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "station_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "user": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "save_station_playback_state": {
            "name": "save_station_playback_state",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "station_state": [
                    "str"
                ]
            }
        },
        "station_join_required.wrap": {
            "name": "wrap",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "station_admin_required.wrap": {
            "name": "wrap",
            "location": 38,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [
                    "Optional[BaseException]",
                    "Callable",
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "StationConsumer.station_id": {
            "name": "station_id",
            "location": 54,
            "return": [
                "str",
                "dict",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationConsumer.notify_playback_state_changed": {
            "name": "notify_playback_state_changed",
            "location": 152,
            "return": [
                "Callable",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int"
                ]
            }
        }
    },
    "dancingtogether-master/radio/exceptions.py": {
        "ClientError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "message": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "dancingtogether-master/radio/forms.py": {},
    "dancingtogether-master/radio/models.py": {
        "Station.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Station.group_name": {
            "name": "group_name",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Station.admin_group_name": {
            "name": "admin_group_name",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Station.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 35,
            "return": [
                "bool",
                "int",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dancingtogether-master/radio/spotify.py": {
        "get_oauth_redirect_uri": {
            "name": "get_oauth_redirect_uri",
            "location": 48,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "get_url_safe_oauth_request_state": {
            "name": "get_url_safe_oauth_request_state",
            "location": 52,
            "return": [
                "str",
                "int",
                "transfer.models.TopicID",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "request_spotify_authorization": {
            "name": "request_spotify_authorization",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Headers",
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "build_request_authorization_url": {
            "name": "build_request_authorization_url",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "grouper.models.user.User",
                    "app.models.dto.RenewRequest",
                    "grouper.models.base.session.Session",
                    "str",
                    "http.MITMRequest"
                ]
            }
        },
        "AuthorizationRequiredMixin.dispatch": {
            "name": "dispatch",
            "location": 24,
            "return": [
                "bool",
                "Dict[str, str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str"
                ]
            }
        },
        "FreshAccessTokenRequiredMixin.dispatch": {
            "name": "dispatch",
            "location": 35,
            "return": [
                "Union[str, List[str]]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "requests.Request"
                ]
            }
        },
        "AccessToken.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool"
                ],
                "refresh_token": [
                    "str",
                    "bool"
                ],
                "access_token": [
                    "str",
                    "bool"
                ],
                "access_token_expiration_time": [
                    "str",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "AccessToken.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "dict",
                "bool",
                "int",
                "float",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessToken.is_valid": {
            "name": "is_valid",
            "location": 99,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessToken.has_expired": {
            "name": "has_expired",
            "location": 103,
            "return": [
                "str",
                "dict",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessToken.refresh": {
            "name": "refresh",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessToken.load": {
            "name": "load",
            "location": 125,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Callable",
                "Callable[[KT, VT], bool]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[datetime.datetime]",
                    "str",
                    "float"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AccessToken.save": {
            "name": "save",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessToken.from_db_model": {
            "name": "from_db_model",
            "location": 143,
            "return": [
                "bool",
                "int",
                "Callable",
                "Callable[[T], bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "deeplearning.ml4pl.models.batch.BatchIterator",
                    "float",
                    "Dict[str, int]",
                    "OrderedDict",
                    "zerver.models.UserProfile"
                ],
                "creds": [
                    "bytes",
                    "deeplearning.ml4pl.models.batch.BatchIterator",
                    "float",
                    "Dict[str, int]",
                    "OrderedDict",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AccessToken.request_refresh_and_access_token": {
            "name": "request_refresh_and_access_token",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "code": [
                    "int",
                    "str"
                ],
                "user": [
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "dancingtogether-master/radio/urls.py": {},
    "dancingtogether-master/radio/views.py": {
        "oauth_callback": {
            "name": "oauth_callback",
            "location": 113,
            "return": [
                "Optional[str]",
                "Sequence[Sequence[str]]",
                "Dict[str, Any]",
                "Iterable[Tuple[str, int]]",
                "str",
                "bytes",
                "Iterable[Union[Mapping, int, None]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ListenerRequiredMixin.dispatch": {
            "name": "dispatch",
            "location": 22,
            "return": [
                "Union[str, List[str]]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "IndexView.get": {
            "name": "get",
            "location": 32,
            "return": [
                "int",
                "Dict[str, str]",
                "bytes",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "list"
                ]
            }
        },
        "IndexView.post": {
            "name": "post",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "ListStationsView.get_queryset": {
            "name": "get_queryset",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "models.User",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListStationsView.get_context_data": {
            "name": "get_context_data",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateStationView.form_valid": {
            "name": "form_valid",
            "location": 62,
            "return": [
                "List[str]",
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, Any]"
                ]
            }
        },
        "DetailStationView.get_context_data": {
            "name": "get_context_data",
            "location": 81,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteStationView.post": {
            "name": "post",
            "location": 103,
            "return": [
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "dancingtogether-master/radio/__init__.py": {},
    "dancingtogether-master/radio/api/serializers.py": {
        "PlaybackStateSerializer.update": {
            "name": "update",
            "location": 17,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "story.models.Author",
                    "saucerbogroupme.models.Bot"
                ],
                "validated_data": [
                    "dict",
                    "story.models.Author",
                    "str"
                ]
            }
        },
        "StationSerializer.update": {
            "name": "update",
            "location": 34,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type[analytics.models.BaseCount]",
                    "dict",
                    "Union[int, str]",
                    "int",
                    "Callable"
                ],
                "validated_data": [
                    "Type[analytics.models.BaseCount]",
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "dancingtogether-master/radio/api/urls.py": {},
    "dancingtogether-master/radio/api/views.py": {
        "StationViewSet.get_object": {
            "name": "get_object",
            "location": 26,
            "return": [
                "str",
                "Union[int, float]",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 29,
            "return": [
                "Dict[str, int]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int",
                "str",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerViewSet.get_object": {
            "name": "get_object",
            "location": 36,
            "return": [
                "str",
                "Union[int, float]",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerViewSet.create": {
            "name": "create",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "aiohttp.web.Request"
                ],
                "station_pk": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "BelongsToUser.has_object_permission": {
            "name": "has_object_permission",
            "location": 63,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Optional[Set[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "core.models.Recipe",
                    "str"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "aiohttp.web.Request",
                    "_models.Request",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "obj": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "core.models.Recipe",
                    "str"
                ]
            }
        },
        "RefreshAccessToken.get_object": {
            "name": "get_object",
            "location": 70,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefreshAccessToken.get_queryset": {
            "name": "get_queryset",
            "location": 78,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefreshAccessToken.post": {
            "name": "post",
            "location": 81,
            "return": [
                "List[Dict[str, Any]]",
                "List[Callable]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "Optional[int]",
                    "django.http.HttpRequest",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "int"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "Optional[int]",
                    "django.http.HttpRequest",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "int"
                ],
                "user_pk": [
                    "rest_framework.requesRequest",
                    "Optional[int]",
                    "django.http.HttpRequest",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "dancingtogether-master/radio/api/__init__.py": {},
    "dancingtogether-master/radio/migrations/0001_initial.py": {},
    "dancingtogether-master/radio/migrations/0002_auto_20180213_0707.py": {},
    "dancingtogether-master/radio/migrations/0003_auto_20180217_0429.py": {},
    "dancingtogether-master/radio/migrations/0004_station_position_ms.py": {},
    "dancingtogether-master/radio/migrations/0005_spotifycredentials_access_token.py": {},
    "dancingtogether-master/radio/migrations/0006_spotifycredentials_access_token_expiration_time.py": {},
    "dancingtogether-master/radio/migrations/0007_auto_20180321_0417.py": {},
    "dancingtogether-master/radio/migrations/0007_auto_20180321_0806.py": {},
    "dancingtogether-master/radio/migrations/0008_auto_20180321_0809.py": {},
    "dancingtogether-master/radio/migrations/0009_merge_20180331_2250.py": {},
    "dancingtogether-master/radio/migrations/0010_auto_20180525_0354.py": {},
    "dancingtogether-master/radio/migrations/0011_auto_20180629_0634.py": {},
    "dancingtogether-master/radio/migrations/0012_auto_20180711_0630.py": {},
    "dancingtogether-master/radio/migrations/__init__.py": {},
    "dancingtogether-master/radio/tests/mocks.py": {
        "get_free_port": {
            "name": "get_free_port",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "start_mock_spotify_server": {
            "name": "start_mock_spotify_server",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "port": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ],
                "handler": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MockSpotifyRequestHandler.do_POST": {
            "name": "do_POST",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dancingtogether-master/radio/tests/test_api.py": {
        "create_user1": {
            "name": "create_user1",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "create_user2": {
            "name": "create_user2",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_spotify_credentials": {
            "name": "create_spotify_credentials",
            "location": 260,
            "return": [
                "str",
                "Callable",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "user": [
                    "accounts.models.User",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.BlockTimeout",
                    "bool",
                    "int"
                ]
            }
        },
        "create_playback_state": {
            "name": "create_playback_state",
            "location": 265,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "station": [
                    "tracim.models.data.Workspace",
                    "bool",
                    "int",
                    "zerver.models.Realm"
                ],
                "paused": [
                    "dict",
                    "bool",
                    "int"
                ],
                "raw_position_ms": [
                    "str"
                ]
            }
        },
        "StationTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StationTests.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StationTests.test_can_list_stations": {
            "name": "test_can_list_stations",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StationTests.test_can_only_list_authorized_stations": {
            "name": "test_can_only_list_authorized_stations",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StationTests.test_can_update_stations": {
            "name": "test_can_update_stations",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StationTests.test_user_can_only_update_authorized_stations": {
            "name": "test_user_can_only_update_authorized_stations",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.setUp": {
            "name": "setUp",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.tearDown": {
            "name": "tearDown",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_can_create_listener": {
            "name": "test_can_create_listener",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_can_only_create_listener_if_authorized": {
            "name": "test_can_only_create_listener_if_authorized",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_cannot_create_listener_for_nonexistent_user": {
            "name": "test_cannot_create_listener_for_nonexistent_user",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_can_get_listeners": {
            "name": "test_can_get_listeners",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_can_only_get_listeners_if_authorized": {
            "name": "test_can_only_get_listeners_if_authorized",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_can_delete_listener": {
            "name": "test_can_delete_listener",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTests.test_can_only_delete_listener_if_authorized": {
            "name": "test_can_only_delete_listener_if_authorized",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessTokenTests.setUp": {
            "name": "setUp",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessTokenTests.tearDown": {
            "name": "tearDown",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessTokenTests.test_can_refresh_own_access_token": {
            "name": "test_can_refresh_own_access_token",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessTokenTests.test_cannot_refresh_someone_elses_access_token": {
            "name": "test_cannot_refresh_someone_elses_access_token",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dancingtogether-master/radio/tests/test_consumer.py": {
        "user1": {
            "name": "user1",
            "location": 88,
            "return": [
                "app.models.GameMember",
                "app.models.course.Course",
                "abilian.core.models.subjects.User",
                "Mapping[str, Any]",
                "zerver.models.UserProfile",
                "raiden.utils.Address",
                "models.UserAuth"
            ],
            "arguments": {}
        },
        "user2": {
            "name": "user2",
            "location": 94,
            "return": [
                "app.models.GameMember",
                "app.models.course.Course",
                "abilian.core.models.subjects.User",
                "Mapping[str, Any]",
                "zerver.models.UserProfile",
                "raiden.utils.Address",
                "models.UserAuth"
            ],
            "arguments": {}
        },
        "station1": {
            "name": "station1",
            "location": 100,
            "return": [
                "int",
                "utils.Node",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {}
        },
        "create_listener": {
            "name": "create_listener",
            "location": 108,
            "return": [
                "int",
                "Mapping",
                "Dict[str, Any]",
                "str",
                "jgikbase.idmapping.core.user.User.name",
                "bool"
            ],
            "arguments": {
                "user": [
                    "accounts.models.User",
                    "models.Station",
                    "django.contrib.auth.models.AbstractBaseUser",
                    "Optional[services.user.transfer.models.User]",
                    "Optional[str]",
                    "contests.models.User",
                    "user_models.User",
                    "Callable[[str], None]"
                ],
                "station": [
                    "accounts.models.User",
                    "models.Station",
                    "django.contrib.auth.models.AbstractBaseUser",
                    "Optional[services.user.transfer.models.User]",
                    "Optional[str]",
                    "contests.models.User",
                    "user_models.User",
                    "Callable[[str], None]"
                ]
            }
        },
        "create_playback_state": {
            "name": "create_playback_state",
            "location": 120,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "station": [
                    "tracim.models.data.Workspace",
                    "bool",
                    "int",
                    "zerver.models.Realm"
                ]
            }
        },
        "get_playback_state": {
            "name": "get_playback_state",
            "location": 130,
            "return": [
                "str",
                "raiden.utils.BlockNumber",
                "zerver.models.Realm",
                "raiden.utils.TokenAmount",
                "Callable[[Any], bool]",
                "Optional[float]"
            ],
            "arguments": {
                "station": [
                    "models.Station",
                    "str",
                    "int"
                ]
            }
        },
        "assert_client_server_states_are_equal": {
            "name": "assert_client_server_states_are_equal",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "client_state": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "django.db.models.query.QuerySet",
                    "dict",
                    "models.order.Order",
                    "ajapaik.ajapaik.models.Profile",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ],
                "server_state": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "django.db.models.query.QuerySet",
                    "dict",
                    "models.order.Order",
                    "ajapaik.ajapaik.models.Profile",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "StationCommunicator.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "station_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dancingtogether-master/radio/tests/test_models.py": {
        "test_listeners_uniqueness": {
            "name": "test_listeners_uniqueness",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "user1": [
                    "Callable[[List, bool], None]",
                    "models.Station"
                ],
                "station1": [
                    "Callable[[List, bool], None]",
                    "models.Station"
                ]
            }
        },
        "user1": {
            "name": "user1",
            "location": 27,
            "return": [
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "station1": {
            "name": "station1",
            "location": 33,
            "return": [
                "float",
                "utils.Node",
                "str",
                "T"
            ],
            "arguments": {}
        }
    },
    "dancingtogether-master/radio/tests/test_spotify.py": {
        "test_refresh_access_token": {
            "name": "test_refresh_access_token",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "user1": [
                    "bool",
                    "database.User"
                ]
            }
        },
        "user1": {
            "name": "user1",
            "location": 32,
            "return": [
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "create_spotify_credentials": {
            "name": "create_spotify_credentials",
            "location": 37,
            "return": [
                "str",
                "Callable",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "user": [
                    "accounts.models.User",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.BlockTimeout",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "dancingtogether-master/radio/tests/test_views.py": {
        "create_user": {
            "name": "create_user",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "str",
                    "server.models.User",
                    "zerver.models.UserProfile",
                    "dict",
                    "Callable",
                    "zerver.models.Realm"
                ]
            }
        },
        "RadioViewsTests.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioViewsTests.test_user_can_only_see_stations_they_are_members_of_index": {
            "name": "test_user_can_only_see_stations_they_are_members_of_index",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioViewsTests.test_user_needs_to_be_logged_in_to_access_station_index": {
            "name": "test_user_needs_to_be_logged_in_to_access_station_index",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioViewsTests.test_user_can_only_access_stations_they_are_members_of": {
            "name": "test_user_can_only_access_stations_they_are_members_of",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioViewsTests.test_user_can_delete_station": {
            "name": "test_user_can_delete_station",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioViewsTests.test_user_needs_to_be_logged_in_to_delete_station": {
            "name": "test_user_needs_to_be_logged_in_to_delete_station",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioViewsTests.test_user_can_only_delete_stations_they_are_admins_of": {
            "name": "test_user_can_only_delete_stations_they_are_admins_of",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dancingtogether-master/radio/tests/utils.py": {
        "create_station": {
            "name": "create_station",
            "location": 5,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "create_listener": {
            "name": "create_listener",
            "location": 9,
            "return": [
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "station": [
                    "accounts.models.User",
                    "models.Station",
                    "bool"
                ],
                "user": [
                    "accounts.models.User",
                    "models.Station",
                    "bool"
                ],
                "is_admin": [
                    "accounts.models.User",
                    "models.Station",
                    "bool"
                ],
                "is_dj": [
                    "accounts.models.User",
                    "models.Station",
                    "bool"
                ]
            }
        }
    },
    "dancingtogether-master/radio/tests/__init__.py": {}
}
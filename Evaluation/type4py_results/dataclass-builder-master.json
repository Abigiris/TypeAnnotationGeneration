{
    "dataclass-builder-master/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "dataclass-builder-master/tasks.py": {
        "check_typing": {
            "name": "check_typing",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "IO",
                    "List[Callable]",
                    "List[str]",
                    "Optional[bytes]",
                    "Optional[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "check_style": {
            "name": "check_style",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "tuple",
                    "bool",
                    "int"
                ]
            }
        },
        "check_docstrings": {
            "name": "check_docstrings",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "tuple",
                    "bool",
                    "int"
                ]
            }
        },
        "check_all": {
            "name": "check_all",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict[str, Union[bool, str]]",
                    "bool"
                ]
            }
        },
        "develop": {
            "name": "develop",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "dist_clean": {
            "name": "dist_clean",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "Iterator[Any]"
                ]
            }
        },
        "dist_build": {
            "name": "dist_build",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "List[bytes]"
                ]
            }
        },
        "doc_build": {
            "name": "doc_build",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "Iterator[str]",
                    "bool",
                    "List[int]",
                    "str",
                    "Optional[\"Node\"]"
                ],
                "format": [
                    "float",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "doc_clean": {
            "name": "doc_clean",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "Iterator[Any]"
                ]
            }
        },
        "format_isort": {
            "name": "format_isort",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "float",
                    "Counter",
                    "Union[str, List[str]]"
                ]
            }
        },
        "format_black": {
            "name": "format_black",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "float",
                    "Counter",
                    "Union[str, List[str]]"
                ]
            }
        },
        "format_all": {
            "name": "format_all",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]",
                    "List[int]",
                    "list",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int"
                ],
                "verbose": [],
                "coverage": [],
                "html": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "str",
                    "list",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "dataclass-builder-master/dataclass_builder/exceptions.py": {
        "UndefinedFieldError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "str"
                ],
                "dataclass": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes",
                    "Callable"
                ],
                "field": [
                    "str",
                    "List[\"DeliveryItem\"]",
                    "List[str]",
                    "Sequence",
                    "bool",
                    "dict"
                ]
            }
        },
        "MissingFieldError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "str"
                ],
                "dataclass": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes",
                    "Callable"
                ],
                "field": [
                    "str",
                    "List[\"DeliveryItem\"]",
                    "List[str]",
                    "Sequence",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "dataclass-builder-master/dataclass_builder/factory.py": {
        "_create_fn": {
            "name": "_create_fn",
            "location": 173,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]",
                    "Callable"
                ],
                "args": [],
                "body": [
                    "str",
                    "List[str]",
                    "AbstractSet[str]"
                ],
                "env": [
                    "Optional[str]",
                    "dict",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "_create_init_method": {
            "name": "_create_init_method",
            "location": 197,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "fields": [
                    "dict",
                    "Mapping[rflx.model.Field, rflx.model.Type]",
                    "tuple",
                    "Iterator",
                    "Tuple[object]"
                ]
            }
        },
        "_create_class_docstring": {
            "name": "_create_class_docstring",
            "location": 219,
            "return": [
                "str",
                "Callable[..., T]",
                "bool",
                "int"
            ],
            "arguments": {
                "dataclass": [
                    "Sequence[Any]",
                    "Iterable[str]"
                ]
            }
        },
        "dataclass_builder": {
            "name": "dataclass_builder",
            "location": 257,
            "return": [
                "str",
                "Exception",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "dataclass": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_create_init_method.is_required": {
            "name": "is_required",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "Dict[str, Any]",
                    "dict",
                    "Tuple[()]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "dataclass_builder._setattr_method": {
            "name": "_setattr_method",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "dataclass_builder._repr_method": {
            "name": "_repr_method",
            "location": 343,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [
                    "dict",
                    "Dict[str, Any]",
                    "type",
                    "str"
                ]
            }
        },
        "dataclass_builder._build_method": {
            "name": "_build_method",
            "location": 361,
            "return": [
                "bool",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [
                    "str",
                    "Mapping[Any, Any]",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "List[str]"
                ]
            }
        },
        "dataclass_builder._fields_method": {
            "name": "_fields_method",
            "location": 391,
            "return": [
                "float",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "_": [
                    "str",
                    "Type",
                    "bool",
                    "List[object]"
                ],
                "required": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "optional": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "dataclass-builder-master/dataclass_builder/utility.py": {
        "build": {
            "name": "build",
            "location": 15,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "wrapper.DataclassBuilder",
                    "str",
                    "bool",
                    "T",
                    "Callable"
                ]
            }
        },
        "fields": {
            "name": "fields",
            "location": 40,
            "return": [
                "Optional[str]",
                "int",
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "wrapper.DataclassBuilder",
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "dataclass": [
                    "str",
                    "int",
                    "django.db.models.fields.Field"
                ],
                "builder": [
                    "wrapper.DataclassBuilder",
                    "list"
                ]
            }
        }
    },
    "dataclass-builder-master/dataclass_builder/wrapper.py": {
        "DataclassBuilder.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataclass": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DataclassBuilder.__setattr__": {
            "name": "__setattr__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Tuple[str]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[str, int]",
                    "dict",
                    "list"
                ]
            }
        },
        "DataclassBuilder.__repr__": {
            "name": "__repr__",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataclassBuilder._build": {
            "name": "_build",
            "location": 260,
            "return": [
                "bool",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataclassBuilder._fields": {
            "name": "_fields",
            "location": 290,
            "return": [
                "str",
                "List[str]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "optional": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "DataclassBuilder.__getattr__": {
            "name": "__getattr__",
            "location": 229,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        }
    },
    "dataclass-builder-master/dataclass_builder/_common.py": {
        "_is_settable": {
            "name": "_is_settable",
            "location": 84,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "int",
                "Callable[[None], None]"
            ],
            "arguments": {
                "field": [
                    "dataclasses.Field[Any]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "AbstractSet[str]",
                    "List[str]"
                ]
            }
        },
        "_is_required": {
            "name": "_is_required",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "dataclasses.Field[Any]",
                    "dataclasses.Field",
                    "str"
                ]
            }
        },
        "_is_optional": {
            "name": "_is_optional",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "dataclasses.Field[Any]",
                    "dataclasses.Field",
                    "str"
                ]
            }
        },
        "_settable_fields": {
            "name": "_settable_fields",
            "location": 128,
            "return": [
                "List[str]",
                "FrozenSet[str]",
                "Dict[str, float]",
                "Set[int]",
                "List[List[str]]"
            ],
            "arguments": {
                "dataclass": [
                    "int",
                    "Type"
                ]
            }
        },
        "_required_fields": {
            "name": "_required_fields",
            "location": 145,
            "return": [
                "List[str]",
                "FrozenSet[str]",
                "Dict[str, float]",
                "Set[int]",
                "List[List[str]]"
            ],
            "arguments": {
                "dataclass": [
                    "int",
                    "Type"
                ]
            }
        },
        "_optional_fields": {
            "name": "_optional_fields",
            "location": 162,
            "return": [
                "List[str]",
                "FrozenSet[str]",
                "Dict[str, float]",
                "Set[int]",
                "List[List[str]]"
            ],
            "arguments": {
                "dataclass": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "_RequiredType.__copy__": {
            "name": "__copy__",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RequiredType.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_RequiredType.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OptionalType.__copy__": {
            "name": "__copy__",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OptionalType.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_OptionalType.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MissingType.__copy__": {
            "name": "__copy__",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MissingType.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_MissingType.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MissingType.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "_MissingType.__ne__": {
            "name": "__ne__",
            "location": 73,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "dataclass-builder-master/dataclass_builder/__init__.py": {},
    "dataclass-builder-master/dataclass_builder/__version__.py": {},
    "dataclass-builder-master/docs/conf.py": {
        "read_version": {
            "name": "read_version",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Union[str, pathlib.Path]",
                    "List[str]"
                ]
            }
        },
        "iad_add_directive_header": {
            "name": "iad_add_directive_header",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "int"
                ],
                "sig": [
                    "int"
                ]
            }
        }
    },
    "dataclass-builder-master/tests/conftest.py": {
        "Circle.__post_init__": {
            "name": "__post_init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclass-builder-master/tests/test_common.py": {
        "test_constants": {
            "name": "test_constants",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_constants_repr": {
            "name": "test_constants_repr",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_constants_after_copy": {
            "name": "test_constants_after_copy",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_constants_after_deepcopy": {
            "name": "test_constants_after_deepcopy",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_required_and_optional_are_missing": {
            "name": "test_required_and_optional_are_missing",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_required_and_optional_are_missing_after_copy": {
            "name": "test_required_and_optional_are_missing_after_copy",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_required_and_optional_are_missing_after_deepcopy": {
            "name": "test_required_and_optional_are_missing_after_deepcopy",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_settable": {
            "name": "test_is_settable",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_required": {
            "name": "test_is_required",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_optional": {
            "name": "test_is_optional",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_settable_fields": {
            "name": "test_settable_fields",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_required_fields": {
            "name": "test_required_fields",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional_fields": {
            "name": "test_optional_fields",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dataclass-builder-master/tests/test_factory.py": {
        "test_create_fn": {
            "name": "test_create_fn",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_fields_set": {
            "name": "test_all_fields_set",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_order_invariant": {
            "name": "test_order_invariant",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_positional_arguments": {
            "name": "test_no_positional_arguments",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr_with_strings": {
            "name": "test_repr_with_strings",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_name": {
            "name": "test_custom_name",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_must_be_dataclass": {
            "name": "test_must_be_dataclass",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_field": {
            "name": "test_missing_field",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_field": {
            "name": "test_undefined_field",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional_field_not_required": {
            "name": "test_optional_field_not_required",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional_field_can_be_set": {
            "name": "test_optional_field_can_be_set",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_false_field_not_required": {
            "name": "test_init_false_field_not_required",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_false_field_cannot_be_set": {
            "name": "test_init_false_field_cannot_be_set",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_handles_dataclass_without_fields": {
            "name": "test_handles_dataclass_without_fields",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_access_unset_field": {
            "name": "test_access_unset_field",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_access_invalid_field": {
            "name": "test_access_invalid_field",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_field": {
            "name": "test_build_field",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_field": {
            "name": "test_fields_field",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_settable_fields": {
            "name": "test_fields_returns_settable_fields",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_required_fields": {
            "name": "test_fields_returns_required_fields",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_optional_fields": {
            "name": "test_fields_returns_optional_fields",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_no_fields": {
            "name": "test_fields_returns_no_fields",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_class_inheritance": {
            "name": "test_class_inheritance",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_annotations": {
            "name": "test_init_annotations",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_annotations": {
            "name": "test_build_annotations",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_typing_module": {
            "name": "test_typing_module",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dataclass-builder-master/tests/test_utility.py": {
        "test_update": {
            "name": "test_update",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_with_defaults": {
            "name": "test_update_with_defaults",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dataclass-builder-master/tests/test_wrapper.py": {
        "test_all_fields_set": {
            "name": "test_all_fields_set",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_order_invariant": {
            "name": "test_order_invariant",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_positional_arguments": {
            "name": "test_no_positional_arguments",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr_with_strings": {
            "name": "test_repr_with_strings",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_must_be_dataclass": {
            "name": "test_must_be_dataclass",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_field": {
            "name": "test_missing_field",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_field": {
            "name": "test_undefined_field",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional_field_not_required": {
            "name": "test_optional_field_not_required",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional_field_can_be_set": {
            "name": "test_optional_field_can_be_set",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_false_field_not_required": {
            "name": "test_init_false_field_not_required",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_false_field_cannot_be_set": {
            "name": "test_init_false_field_cannot_be_set",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_handles_dataclass_without_fields": {
            "name": "test_handles_dataclass_without_fields",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_access_unset_field": {
            "name": "test_access_unset_field",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_access_invalid_field": {
            "name": "test_access_invalid_field",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_settable_fields": {
            "name": "test_fields_returns_settable_fields",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_required_fields": {
            "name": "test_fields_returns_required_fields",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_optional_fields": {
            "name": "test_fields_returns_optional_fields",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fields_returns_no_fields": {
            "name": "test_fields_returns_no_fields",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_class_inheritance": {
            "name": "test_class_inheritance",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_typing_module": {
            "name": "test_typing_module",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dataclass-builder-master/tests/__init__.py": {}
}
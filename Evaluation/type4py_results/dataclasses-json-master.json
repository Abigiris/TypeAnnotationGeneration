{
    "dataclasses-json-master/publish.py": {},
    "dataclasses-json-master/setup.py": {},
    "dataclasses-json-master/dataclasses_json/api.py": {
        "dataclass_json": {
            "name": "dataclass_json",
            "location": 107,
            "return": [
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "T",
                "int"
            ],
            "arguments": {
                "_cls": [
                    "Optional[int]",
                    "Optional[str]",
                    "Callable[..., T]",
                    "Optional[Dict]",
                    "static_frame.core.util.DtypeSpecifier"
                ]
            }
        },
        "_process_class": {
            "name": "_process_class",
            "location": 127,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "dict",
                    "bool"
                ],
                "letter_case": [
                    "Tuple[List[str], Optional[str]]"
                ],
                "undefined": [
                    "Tuple[List[str], Optional[str]]"
                ]
            }
        },
        "DataClassJsonMixin.to_json": {
            "name": "to_json",
            "location": 28,
            "return": [
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataClassJsonMixin.from_json": {
            "name": "from_json",
            "location": 52,
            "return": [
                "Dict[str, bool]",
                "bytes",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "cls": [
                    "Type['Declared']",
                    "str"
                ],
                "s": [
                    "str",
                    "utils.CWLObjectType",
                    "bool",
                    "Iterable[\"Issue\"]",
                    "TextIO"
                ]
            }
        },
        "DataClassJsonMixin.from_dict": {
            "name": "from_dict",
            "location": 68,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "type",
                    "Type['Declared']"
                ],
                "kvs": [
                    "dict",
                    "str",
                    "type",
                    "Type['Declared']"
                ]
            }
        },
        "DataClassJsonMixin.to_dict": {
            "name": "to_dict",
            "location": 74,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": [],
                "encode_json": [
                    "str"
                ]
            }
        },
        "DataClassJsonMixin.schema": {
            "name": "schema",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "Optional[bool]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "dataclass_json.wrap": {
            "name": "wrap",
            "location": 119,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "utils.mssql_counters.Section"
                ]
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/cfg.py": {
        "config": {
            "name": "config",
            "location": 54,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "metadata": [
                    "Callable",
                    "dict",
                    "marshmallow.fields.Field",
                    "str",
                    "int"
                ]
            }
        },
        "_GlobalConfig.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "config.override": {
            "name": "override",
            "location": 85,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "Type[T]"
                ],
                "_field_name": [
                    "str",
                    "bool",
                    "Type[T]"
                ]
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/core.py": {
        "_user_overrides_or_exts": {
            "name": "_user_overrides_or_exts",
            "location": 53,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_encode_json_type": {
            "name": "_encode_json_type",
            "location": 90,
            "return": [
                "bool",
                "float",
                "Optional[List[float]]"
            ],
            "arguments": {
                "value": [
                    "Callable",
                    "dict",
                    "type"
                ],
                "default": [
                    "str",
                    "T"
                ]
            }
        },
        "_encode_overrides": {
            "name": "_encode_overrides",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "kvs": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "overrides": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "encode_json": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_decode_letter_case_overrides": {
            "name": "_decode_letter_case_overrides",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "field_names": [
                    "str",
                    "bool",
                    "Type[T]"
                ],
                "overrides": [
                    "str"
                ]
            }
        },
        "_decode_dataclass": {
            "name": "_decode_dataclass",
            "location": 130,
            "return": [
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "int",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]"
                ],
                "kvs": [
                    "dict",
                    "Type",
                    "Type[\"SerializationDialect\"]",
                    "int",
                    "dataclasses.Field"
                ],
                "infer_missing": [
                    "Type[T]",
                    "int",
                    "bool",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        },
        "_support_extended_types": {
            "name": "_support_extended_types",
            "location": 211,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "field_type": [
                    "bool",
                    "type",
                    "int"
                ],
                "field_value": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "int",
                    "datetime.date.time",
                    "datetime.tzinfo",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "_is_supported_generic": {
            "name": "_is_supported_generic",
            "location": 234,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Iterable[str]",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]",
                    "int"
                ]
            }
        },
        "_decode_generic": {
            "name": "_decode_generic",
            "location": 241,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "type_": [],
                "value": [
                    "bool",
                    "Optional[BaseException]",
                    "Type[BaseException]"
                ],
                "infer_missing": [
                    "str",
                    "bool"
                ]
            }
        },
        "_decode_dict_keys": {
            "name": "_decode_dict_keys",
            "location": 283,
            "return": [
                "Type[BaseException]",
                "BaseException",
                "bool",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "key_type": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "xs": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Optional[str]",
                    "str"
                ],
                "infer_missing": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "_decode_items": {
            "name": "_decode_items",
            "location": 306,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "type_arg": [],
                "xs": [
                    "Pattern",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.BlockIdentifier"
                ],
                "infer_missing": [
                    "Type",
                    "T",
                    "bool"
                ]
            }
        },
        "_asdict": {
            "name": "_asdict",
            "location": 326,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Hashable"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "encode_json": [
                    "type",
                    "Type"
                ]
            }
        },
        "_ExtendedEncoder.default": {
            "name": "default",
            "location": 33,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "List[pydantic.fields.ModelField]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/mm.py": {
        "build_type": {
            "name": "build_type",
            "location": 228,
            "return": [
                "str",
                "Callable[[T], T]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Tuple[type]"
                ],
                "options": [
                    "str",
                    "Tuple[type]"
                ],
                "mixin": [
                    "Optional[int]",
                    "Tuple[Type[Exception]]",
                    "bool",
                    "List[str]"
                ],
                "field": [
                    "Optional[int]",
                    "Tuple[Type[Exception]]",
                    "bool",
                    "List[str]"
                ],
                "cls": [
                    "Optional[int]",
                    "Tuple[Type[Exception]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "schema": {
            "name": "schema",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Set[str]",
                    "str",
                    "dict",
                    "Exception",
                    "bool",
                    "Type"
                ],
                "mixin": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[int]"
                ],
                "infer_missing": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "\"Project\"",
                    "\"RequirementsFile\"",
                    "IO"
                ]
            }
        },
        "build_schema": {
            "name": "build_schema",
            "location": 319,
            "return": [
                "list",
                "dict",
                "int",
                "List[Dict]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "str",
                    "type"
                ],
                "mixin": [
                    "dict",
                    "int",
                    "decimal.Decimal"
                ],
                "infer_missing": [
                    "dict",
                    "int",
                    "decimal.Decimal"
                ],
                "partial": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "bool",
                    "T"
                ]
            }
        },
        "_TimestampField._serialize": {
            "name": "_serialize",
            "location": 30,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[datetime.timedelta]",
                    "Optional[Any]",
                    "float",
                    "str",
                    "Optional[Union[int, float]]",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "_TimestampField._deserialize": {
            "name": "_deserialize",
            "location": 39,
            "return": [
                "Optional[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Match]",
                    "List[Tuple[str, bytes]]",
                    "Type",
                    "Type[T]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "_IsoField._serialize": {
            "name": "_serialize",
            "location": 50,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[datetime.timedelta]",
                    "Optional[Any]",
                    "float",
                    "str",
                    "Optional[Union[int, float]]",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "_IsoField._deserialize": {
            "name": "_deserialize",
            "location": 59,
            "return": [
                "datetime.datetime",
                "int",
                "datetime.timedelta",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[\"Texte\"]",
                    "Optional[List[Any]]",
                    "Callable[[], datetime.datetime]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "_UnionField.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "desc": [
                    "str",
                    "List[str]",
                    "List[List]",
                    "int",
                    "dict"
                ],
                "cls": [
                    "str",
                    "List[str]",
                    "List[List]",
                    "int",
                    "dict"
                ],
                "field": [
                    "int",
                    "AbstractSet[str]",
                    "Dict[str, Any]",
                    "Container[str]",
                    "List[str]",
                    "dict",
                    "Set[str]",
                    "set"
                ]
            }
        },
        "_UnionField._serialize": {
            "name": "_serialize",
            "location": 76,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "Optional",
                    "float",
                    "T"
                ],
                "attr": [
                    "str",
                    "Type['Model']",
                    "list",
                    "Type[T]",
                    "Union[dict, List[Any]]",
                    "int"
                ],
                "obj": [
                    "str",
                    "Type['Model']",
                    "list",
                    "Type[T]",
                    "Union[dict, List[Any]]",
                    "int"
                ]
            }
        },
        "_UnionField._deserialize": {
            "name": "_deserialize",
            "location": 96,
            "return": [
                "Iterable[str]",
                "List[dict]",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "dict",
                    "bool",
                    "dataclasses.Field",
                    "utils.mssql_counters.Section",
                    "str"
                ],
                "attr": [
                    "dict",
                    "Dict[str, Any]",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        },
        "build_type.inner": {
            "name": "inner",
            "location": 229,
            "return": [],
            "arguments": {
                "type_": [],
                "options": []
            }
        },
        "build_schema.make_instance": {
            "name": "make_instance",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "kvs": []
            }
        },
        "build_schema.dumps": {
            "name": "dumps",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "build_schema.dump": {
            "name": "dump",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "SchemaF.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaF.dump": {
            "name": "dump",
            "location": 166,
            "return": [
                "TOneOrMultiEncoded"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "many": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SchemaF.dumps": {
            "name": "dumps",
            "location": 179,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "many": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SchemaF.load": {
            "name": "load",
            "location": 197,
            "return": [
                "TOneOrMulti"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "many": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "partial": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "unknown": [
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "SchemaF.loads": {
            "name": "loads",
            "location": 217,
            "return": [
                "TOneOrMulti"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "List[bytes]",
                    "bool",
                    "str"
                ],
                "many": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "List[bytes]",
                    "bool",
                    "str"
                ],
                "partial": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "List[bytes]",
                    "bool",
                    "str"
                ],
                "unknown": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "List[bytes]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/stringcase.py": {
        "uplowcase": {
            "name": "uplowcase",
            "location": 29,
            "return": [],
            "arguments": {
                "string": [],
                "case": []
            }
        },
        "capitalcase": {
            "name": "capitalcase",
            "location": 45,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "camelcase": {
            "name": "camelcase",
            "location": 63,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "snakecase": {
            "name": "snakecase",
            "location": 83,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "spinalcase": {
            "name": "spinalcase",
            "location": 104,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "pascalcase": {
            "name": "pascalcase",
            "location": 119,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/undefined.py": {
        "_UndefinedParameterAction.handle_from_dict": {
            "name": "handle_from_dict",
            "location": 20,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "Optional[dict]",
                    "Optional[bool]"
                ],
                "kvs": [
                    "dict",
                    "str",
                    "Optional[dict]",
                    "Optional[bool]"
                ]
            }
        },
        "_UndefinedParameterAction.handle_to_dict": {
            "name": "handle_to_dict",
            "location": 27,
            "return": [
                "float",
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "bool",
                    "str"
                ],
                "kvs": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "_UndefinedParameterAction.handle_dump": {
            "name": "handle_dump",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_UndefinedParameterAction.create_init": {
            "name": "create_init",
            "location": 41,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "_UndefinedParameterAction._separate_defined_undefined_kvs": {
            "name": "_separate_defined_undefined_kvs",
            "location": 45,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable[[], None]"
                ],
                "kvs": [
                    "dict",
                    "dataclasses.Field",
                    "int",
                    "Type"
                ]
            }
        },
        "_RaiseUndefinedParameters.handle_from_dict": {
            "name": "handle_from_dict",
            "location": 66,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Optional['models.LTI1p3Provider']",
                    "bytes",
                    "Callable"
                ],
                "kvs": [
                    "dict",
                    "Optional['models.LTI1p3Provider']",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "_IgnoreUndefinedParameters.handle_from_dict": {
            "name": "handle_from_dict",
            "location": 87,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Callable[[KT, VT], bool]",
                "bool",
                "Callable[..., Awaitable[Any]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "str",
                    "Dict[str, Any]"
                ],
                "kvs": [
                    "dict",
                    "Callable",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_IgnoreUndefinedParameters.create_init": {
            "name": "create_init",
            "location": 94,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "Iterator[str]"
                ]
            }
        },
        "_CatchAllUndefinedParameters.handle_from_dict": {
            "name": "handle_from_dict",
            "location": 134,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Optional['models.LTI1p3Provider']",
                    "bytes",
                    "Callable"
                ],
                "kvs": [
                    "dict",
                    "Optional['models.LTI1p3Provider']",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "_CatchAllUndefinedParameters._get_default": {
            "name": "_get_default",
            "location": 170,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "catch_all_field": []
            }
        },
        "_CatchAllUndefinedParameters.handle_to_dict": {
            "name": "handle_to_dict",
            "location": 194,
            "return": [
                "float",
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bytearray",
                    "Mapping[str, List[str]]"
                ],
                "kvs": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_CatchAllUndefinedParameters.handle_dump": {
            "name": "handle_dump",
            "location": 204,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Union[int, slice]"
                ]
            }
        },
        "_CatchAllUndefinedParameters.create_init": {
            "name": "create_init",
            "location": 210,
            "return": [],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "Iterator[str]"
                ]
            }
        },
        "_CatchAllUndefinedParameters._get_catch_all_field": {
            "name": "_get_catch_all_field",
            "location": 244,
            "return": [
                "str",
                "Tuple[str, str]",
                "Dict[str, List[str]]",
                "int",
                "Type",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "dict",
                    "Type"
                ]
            }
        },
        "_IgnoreUndefinedParameters.create_init._ignore_init": {
            "name": "_ignore_init",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_CatchAllUndefinedParameters.create_init._catch_all_init": {
            "name": "_catch_all_init",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/utils.py": {
        "_get_type_cons": {
            "name": "_get_type_cons",
            "location": 7,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "type_": [
                    "Counter"
                ]
            }
        },
        "_get_type_origin": {
            "name": "_get_type_origin",
            "location": 29,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "type_": [
                    "Type",
                    "Counter"
                ]
            }
        },
        "_hasargs": {
            "name": "_hasargs",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "int",
                    "Union[Type, Tuple[Type, ...]]",
                    "type"
                ]
            }
        },
        "_isinstance_safe": {
            "name": "_isinstance_safe",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "o": [
                    "float",
                    "str",
                    "Tuple[float, float, float]"
                ],
                "t": [
                    "float",
                    "str",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "_issubclass_safe": {
            "name": "_issubclass_safe",
            "location": 70,
            "return": [
                "Optional[Any]",
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "type",
                    "Type[T]"
                ],
                "classinfo": [
                    "Callable",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "_is_new_type_subclass_safe": {
            "name": "_is_new_type_subclass_safe",
            "location": 79,
            "return": [
                "bool",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "classinfo": [
                    "str"
                ]
            }
        },
        "_is_new_type": {
            "name": "_is_new_type",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "_is_optional": {
            "name": "_is_optional",
            "location": 95,
            "return": [],
            "arguments": {
                "type_": [
                    "str",
                    "Type[Any]",
                    "Callable[[T], Optional[T]]"
                ]
            }
        },
        "_is_mapping": {
            "name": "_is_mapping",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "Optional[str]",
                    "str",
                    "Type['Payload']"
                ]
            }
        },
        "_is_collection": {
            "name": "_is_collection",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "Optional[str]",
                    "str",
                    "Type['Payload']"
                ]
            }
        },
        "_is_nonstr_collection": {
            "name": "_is_nonstr_collection",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Type['Payload']",
                    "BaseException"
                ]
            }
        },
        "_timestamp_to_dt_aware": {
            "name": "_timestamp_to_dt_aware",
            "location": 114,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "timestamp": [
                    "float",
                    "datetime.datetime",
                    "int",
                    "datetime.timedelta",
                    "str"
                ]
            }
        },
        "_undefined_parameter_action_safe": {
            "name": "_undefined_parameter_action_safe",
            "location": 120,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[List[Any]]",
                    "Dict[str, Any]",
                    "Callable",
                    "Tuple[int, int]"
                ]
            }
        },
        "_handle_undefined_parameters_safe": {
            "name": "_handle_undefined_parameters_safe",
            "location": 134,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Iterator"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "dict"
                ],
                "kvs": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "usage": [
                    "str",
                    "Match",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "dataclasses-json-master/dataclasses_json/__init__.py": {},
    "dataclasses-json-master/tests/entities.py": {
        "MyCollection.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "int"
                ]
            }
        },
        "MyCollection.__contains__": {
            "name": "__contains__",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "MyCollection.__iter__": {
            "name": "__iter__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyCollection.__len__": {
            "name": "__len__",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyCollection.__eq__": {
            "name": "__eq__",
            "location": 163,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, decimal.Decimal]",
                    "bool"
                ]
            }
        }
    },
    "dataclasses-json-master/tests/test_annotations.py": {
        "TestAnnotations.filter_errors": {
            "name": "filter_errors",
            "location": 48,
            "return": [
                "str",
                "List[str]",
                "Optional[Union[Any, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "BaseException",
                    "list",
                    "tuple",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "TestAnnotations.parse_trace_line": {
            "name": "parse_trace_line",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestAnnotations.test_type_hints": {
            "name": "test_type_hints",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_api.py": {
        "TestTypes.test_decimal_encode": {
            "name": "test_decimal_encode",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_decimal_decode": {
            "name": "test_decimal_decode",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericExtendedTypes.test_optional_datetime": {
            "name": "test_optional_datetime",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericExtendedTypes.test_optional_decimal": {
            "name": "test_optional_decimal",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericExtendedTypes.test_optional_uuid": {
            "name": "test_optional_uuid",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictDecode.test_decimal_decode": {
            "name": "test_decimal_decode",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictDecode.test_uuid_decode": {
            "name": "test_uuid_decode",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewType.test_new_type_encode": {
            "name": "test_new_type_encode",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewType.test_new_type_decode": {
            "name": "test_new_type_decode",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewType.test_nested_new_type_encode": {
            "name": "test_nested_new_type_encode",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewType.test_nested_new_type_decode": {
            "name": "test_nested_new_type_decode",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferMissing.test_infer_missing": {
            "name": "test_infer_missing",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferMissing.test_infer_missing_is_recursive": {
            "name": "test_infer_missing_is_recursive",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferMissing.test_infer_missing_terminates_at_first_missing": {
            "name": "test_infer_missing_terminates_at_first_missing",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_warns_when_nonoptional_field_is_missing_with_infer_missing": {
            "name": "test_warns_when_nonoptional_field_is_missing_with_infer_missing",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_warns_when_required_field_is_none": {
            "name": "test_warns_when_required_field_is_none",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrors.test_error_when_nonoptional_field_is_missing": {
            "name": "test_error_when_nonoptional_field_is_missing",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator": {
            "name": "test_decorator",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_dumps_many": {
            "name": "test_dumps_many",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_dumps_many_nested": {
            "name": "test_dumps_many_nested",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_loads_many": {
            "name": "test_loads_many",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_loads_many_nested": {
            "name": "test_loads_many_nested",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_loads_default": {
            "name": "test_loads_default",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_loads_default_many": {
            "name": "test_loads_default_many",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_dumps_default": {
            "name": "test_dumps_default",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_dumps_default_many": {
            "name": "test_dumps_default_many",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_dumps_new_type": {
            "name": "test_dumps_new_type",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_dumps_nested_new_type": {
            "name": "test_dumps_nested_new_type",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_loads_infer_missing": {
            "name": "test_loads_infer_missing",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_loads_infer_missing_nested": {
            "name": "test_loads_infer_missing_nested",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverride.test_override": {
            "name": "test_override",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverride.test_override_with_config_helper": {
            "name": "test_override_with_config_helper",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_config_encode": {
            "name": "test_config_encode",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_config_decode": {
            "name": "test_config_decode",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_collections.py": {
        "TestEncoder.test_list": {
            "name": "test_list",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_list_str": {
            "name": "test_list_str",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_dict": {
            "name": "test_dict",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_dict_int": {
            "name": "test_dict_int",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_set": {
            "name": "test_set",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_tuple": {
            "name": "test_tuple",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_frozenset": {
            "name": "test_frozenset",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_deque": {
            "name": "test_deque",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_optional": {
            "name": "test_optional",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_optional_str": {
            "name": "test_optional_str",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_union_int_none": {
            "name": "test_union_int_none",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_my_collection": {
            "name": "test_my_collection",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_immutable_default": {
            "name": "test_immutable_default",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_mutable_default_list": {
            "name": "test_mutable_default_list",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_mutable_default_dict": {
            "name": "test_mutable_default_dict",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_list": {
            "name": "test_list",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_list_str": {
            "name": "test_list_str",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dict": {
            "name": "test_dict",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dict_int": {
            "name": "test_dict_int",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_set": {
            "name": "test_set",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_tuple": {
            "name": "test_tuple",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_frozenset": {
            "name": "test_frozenset",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_deque": {
            "name": "test_deque",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_optional": {
            "name": "test_optional",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_optional_str": {
            "name": "test_optional_str",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_my_collection": {
            "name": "test_my_collection",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_immutable_default": {
            "name": "test_immutable_default",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_mutable_default_list": {
            "name": "test_mutable_default_list",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_mutable_default_dict": {
            "name": "test_mutable_default_dict",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_dict.py": {
        "TestEncoder.test_dataclass_with_dict": {
            "name": "test_dataclass_with_dict",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_dataclass_with_typed_dict": {
            "name": "test_dataclass_with_typed_dict",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_dataclass_with_python_dict": {
            "name": "test_dataclass_with_python_dict",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dataclass_with_dict": {
            "name": "test_dataclass_with_dict",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dataclass_with_typed_dict": {
            "name": "test_dataclass_with_typed_dict",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dataclass_with_python_dict": {
            "name": "test_dataclass_with_python_dict",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidator.test_dataclass_with_dict": {
            "name": "test_dataclass_with_dict",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_dict": [
                    "str"
                ],
                "is_valid": [
                    "str"
                ]
            }
        },
        "TestValidator.test_dataclass_with_typed_dict": {
            "name": "test_dataclass_with_typed_dict",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_dict": [
                    "str"
                ],
                "is_valid": [
                    "str"
                ]
            }
        },
        "TestValidator.test_dataclass_with_python_dict": {
            "name": "test_dataclass_with_python_dict",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_dict": [
                    "str"
                ],
                "is_valid": [
                    "str"
                ]
            }
        }
    },
    "dataclasses-json-master/tests/test_enum.py": {
        "TestEncoder.test_data_with_enum": {
            "name": "test_data_with_enum",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_data_with_str_enum": {
            "name": "test_data_with_str_enum",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_data_with_enum_default_value": {
            "name": "test_data_with_enum_default_value",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_collection_with_enum": {
            "name": "test_collection_with_enum",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_data_with_enum": {
            "name": "test_data_with_enum",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_data_with_str_enum": {
            "name": "test_data_with_str_enum",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_data_with_enum_default_value": {
            "name": "test_data_with_enum_default_value",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_collection_with_enum": {
            "name": "test_collection_with_enum",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidator.test_data_with_enum": {
            "name": "test_data_with_enum",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum_value": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "is_valid": [
                    "str",
                    "Optional[Callable]",
                    "bytes"
                ]
            }
        },
        "TestValidator.test_data_with_str_enum": {
            "name": "test_data_with_str_enum",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum_value": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "is_valid": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoader.test_data_with_enum": {
            "name": "test_data_with_enum",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "dict",
                    "bytes",
                    "Tuple[int, str, bytearray]"
                ],
                "expected_data": [
                    "dict",
                    "bytes",
                    "Tuple[int, str, bytearray]"
                ]
            }
        },
        "TestLoader.test_data_with_enum_exception": {
            "name": "test_data_with_enum_exception",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_data_with_str_enum": {
            "name": "test_data_with_str_enum",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "bytes",
                    "dict",
                    "Optional[\"TrackingData\"]"
                ],
                "expected_data": [
                    "bytes",
                    "dict",
                    "Optional[\"TrackingData\"]"
                ]
            }
        },
        "TestLoader.test_data_with_str_enum_exception": {
            "name": "test_data_with_str_enum_exception",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_examples.py": {
        "TestEncoder.test_student": {
            "name": "test_student",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_professor": {
            "name": "test_professor",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_course": {
            "name": "test_course",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_students_missing": {
            "name": "test_students_missing",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_tutor": {
            "name": "test_tutor",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_exclude.py": {
        "test_exclude": {
            "name": "test_exclude",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_include": {
            "name": "test_include",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_action_included": {
            "name": "test_custom_action_included",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_action_excluded": {
            "name": "test_custom_action_excluded",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dataclasses-json-master/tests/test_global_config.py": {
        "TestGlobalConfig.test_encoder_override": {
            "name": "test_encoder_override",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalConfig.test_encoder_extension": {
            "name": "test_encoder_extension",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_invariants.py": {
        "test_generic_encode_and_decode_are_inverses": {
            "name": "test_generic_encode_and_decode_are_inverses",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "dc": []
            }
        }
    },
    "dataclasses-json-master/tests/test_letter_case.py": {
        "TestLetterCase.test_camel_encode": {
            "name": "test_camel_encode",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_camel_decode": {
            "name": "test_camel_decode",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_kebab_encode": {
            "name": "test_kebab_encode",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_kebab_decode": {
            "name": "test_kebab_decode",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_snake_encode": {
            "name": "test_snake_encode",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_snake_decode": {
            "name": "test_snake_decode",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_pascal_encode": {
            "name": "test_pascal_encode",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_pascal_decode": {
            "name": "test_pascal_decode",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_field_name_encode": {
            "name": "test_field_name_encode",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_field_name_decode": {
            "name": "test_field_name_decode",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_camel_with_override_encode": {
            "name": "test_camel_with_override_encode",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_camel_with_override_decode": {
            "name": "test_camel_with_override_decode",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_from_dict": {
            "name": "test_from_dict",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLetterCase.test_to_dict": {
            "name": "test_to_dict",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_metadata.py": {
        "TestMetadata.test_validation_error_raises": {
            "name": "test_validation_error_raises",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetadata.test_mm_field_takes_precedence_over_types": {
            "name": "test_mm_field_takes_precedence_over_types",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_nested.py": {
        "TestEncoder.test_nested_dataclass": {
            "name": "test_nested_dataclass",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_nested_list_of_dataclasses": {
            "name": "test_nested_list_of_dataclasses",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_nested_dataclass": {
            "name": "test_nested_dataclass",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_nested_list_of_dataclasses": {
            "name": "test_nested_list_of_dataclasses",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNested.test_tuple_dict_key": {
            "name": "test_tuple_dict_key",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_recursive.py": {
        "TestRecursive.test_tree_encode": {
            "name": "test_tree_encode",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursive.test_tree_decode": {
            "name": "test_tree_decode",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursive.test_tree_schema_round_trip": {
            "name": "test_tree_schema_round_trip",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_schema.py": {
        "TestSchema.test_default_list_str": {
            "name": "test_default_list_str",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_default_optional_list": {
            "name": "test_default_optional_list",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_list": {
            "name": "test_list",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_optional": {
            "name": "test_optional",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_letter_case": {
            "name": "test_letter_case",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_nested_optional": {
            "name": "test_nested_optional",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_nested_optional_any": {
            "name": "test_nested_optional_any",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_nested_any_accepts_optional": {
            "name": "test_nested_any_accepts_optional",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_time.py": {
        "TestTime.test_datetime_encode": {
            "name": "test_datetime_encode",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_decode": {
            "name": "test_datetime_decode",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_override_encode": {
            "name": "test_datetime_override_encode",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_override_decode": {
            "name": "test_datetime_override_decode",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_schema_encode": {
            "name": "test_datetime_schema_encode",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_schema_decode": {
            "name": "test_datetime_schema_decode",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_override_schema_encode": {
            "name": "test_datetime_override_schema_encode",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_override_schema_decode": {
            "name": "test_datetime_override_schema_decode",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_custom_iso_fieldoverride_schema_encode": {
            "name": "test_datetime_custom_iso_fieldoverride_schema_encode",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_datetime_custom_iso_field_override_schema_decode": {
            "name": "test_datetime_custom_iso_field_override_schema_decode",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/test_undefined_parameters.py": {
        "valid_response": {
            "name": "valid_response",
            "location": 43,
            "return": [
                "Callable",
                "IO[bytes]",
                "Dict[str, Any]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "invalid_response": {
            "name": "invalid_response",
            "location": 48,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "valid_response": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Tuple[str]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "invalid_response_camel_case": {
            "name": "invalid_response_camel_case",
            "location": 55,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "valid_response": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Tuple[str]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "boss_json": {
            "name": "boss_json",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_undefined_parameters_catch_all_invalid_back": {
            "name": "test_undefined_parameters_catch_all_invalid_back",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "raiden.api.resAPIServer",
                    "str"
                ]
            }
        },
        "test_undefined_parameters_catch_all_valid": {
            "name": "test_undefined_parameters_catch_all_valid",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": []
            }
        },
        "test_undefined_parameters_catch_all_no_field": {
            "name": "test_undefined_parameters_catch_all_no_field",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "dict"
                ]
            }
        },
        "test_undefined_parameters_catch_all_multiple_fields": {
            "name": "test_undefined_parameters_catch_all_multiple_fields",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": []
            }
        },
        "test_undefined_parameters_catch_all_works_with_letter_case": {
            "name": "test_undefined_parameters_catch_all_works_with_letter_case",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response_camel_case": [
                    "Callable[[List, bool], None]",
                    "str",
                    "float"
                ]
            }
        },
        "test_undefined_parameters_catch_all_raises_if_initialized_with_catch_all_field_name": {
            "name": "test_undefined_parameters_catch_all_raises_if_initialized_with_catch_all_field_name",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": []
            }
        },
        "test_undefined_parameters_catch_all_initialized_with_dict_and_more_unknown": {
            "name": "test_undefined_parameters_catch_all_initialized_with_dict_and_more_unknown",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "dict",
                    "bool",
                    "list"
                ]
            }
        },
        "test_undefined_parameters_raise_invalid": {
            "name": "test_undefined_parameters_raise_invalid",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "test_undefined_parameters_raise_valid": {
            "name": "test_undefined_parameters_raise_valid",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_undefined_parameters_ignore": {
            "name": "test_undefined_parameters_ignore",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": [],
                "invalid_response": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_undefined_parameters_ignore_to_dict": {
            "name": "test_undefined_parameters_ignore_to_dict",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "int",
                    "dict",
                    "List[List[int]]",
                    "bool"
                ],
                "valid_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_undefined_parameters_ignore_nested_schema": {
            "name": "test_undefined_parameters_ignore_nested_schema",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "boss_json": [
                    "str"
                ]
            }
        },
        "test_undefined_parameters_raise_nested_schema": {
            "name": "test_undefined_parameters_raise_nested_schema",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "boss_json": [
                    "str"
                ]
            }
        },
        "test_undefined_parameters_catch_all_nested_schema": {
            "name": "test_undefined_parameters_catch_all_nested_schema",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "boss_json": [
                    "str"
                ]
            }
        },
        "test_undefined_parameters_catch_all_schema_dump": {
            "name": "test_undefined_parameters_catch_all_schema_dump",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "boss_json": []
            }
        },
        "test_undefined_parameters_catch_all_schema_roundtrip": {
            "name": "test_undefined_parameters_catch_all_schema_roundtrip",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "boss_json": [
                    "str"
                ]
            }
        },
        "test_undefined_parameters_catch_all_ignore_mix_nested_schema": {
            "name": "test_undefined_parameters_catch_all_ignore_mix_nested_schema",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "boss_json": [
                    "str"
                ]
            }
        },
        "test_it_works_from_string": {
            "name": "test_it_works_from_string",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "bool",
                    "str",
                    "core.models.Recipe",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_string_only_accepts_valid_actions": {
            "name": "test_string_only_accepts_valid_actions",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_parameters_raises_with_default_argument_and_supplied_catch_all_name": {
            "name": "test_undefined_parameters_raises_with_default_argument_and_supplied_catch_all_name",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": []
            }
        },
        "test_undefined_parameters_doesnt_raise_with_default": {
            "name": "test_undefined_parameters_doesnt_raise_with_default",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "invalid_response": []
            }
        },
        "test_undefined_parameters_doesnt_raise_with_default_factory": {
            "name": "test_undefined_parameters_doesnt_raise_with_default_factory",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "invalid_response": []
            }
        },
        "test_undefined_parameters_catch_all_init_valid": {
            "name": "test_undefined_parameters_catch_all_init_valid",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": []
            }
        },
        "test_undefined_parameters_catch_all_init_invalid": {
            "name": "test_undefined_parameters_catch_all_init_invalid",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": []
            }
        },
        "test_undefined_parameters_catch_all_init_args": {
            "name": "test_undefined_parameters_catch_all_init_args",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_parameters_catch_all_init_args_kwargs_mixed": {
            "name": "test_undefined_parameters_catch_all_init_args_kwargs_mixed",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_parameters_ignore_init_args": {
            "name": "test_undefined_parameters_ignore_init_args",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_parameters_ignore_init_invalid": {
            "name": "test_undefined_parameters_ignore_init_invalid",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "str"
                ],
                "valid_response": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_undefined_parameters_raise_init": {
            "name": "test_undefined_parameters_raise_init",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_response": [
                    "str"
                ]
            }
        },
        "test_undefined_parameters_catch_all_default_no_undefined": {
            "name": "test_undefined_parameters_catch_all_default_no_undefined",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_undefined_parameters_catch_all_default_factory_init_converts_factory": {
            "name": "test_undefined_parameters_catch_all_default_factory_init_converts_factory",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "valid_response": [
                    "str",
                    "raiden.api.resAPIServer",
                    "int",
                    "type"
                ]
            }
        }
    },
    "dataclasses-json-master/tests/test_union.py": {
        "test_serialize": {
            "name": "test_serialize",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str",
                    "bool"
                ],
                "expected": [
                    "type",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Type",
                    "Union[int, float, complex]",
                    "str"
                ],
                "expected_json": [
                    "str",
                    "dict",
                    "Any"
                ]
            }
        },
        "test_deserialize": {
            "name": "test_deserialize",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "expected_obj": [
                    "Callable",
                    "Optional[Callable]",
                    "TextIO",
                    "str"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ],
                "data_json": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_deserialize_twice": {
            "name": "test_deserialize_twice",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialize_with_error": {
            "name": "test_serialize_with_error",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "obj": []
            }
        },
        "test_deserialize_with_error": {
            "name": "test_deserialize_with_error",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "data": [
                    "dict",
                    "Type[object]",
                    "Collection[str]",
                    "str",
                    "bytes",
                    "Callable[[], None]",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ]
            }
        }
    },
    "dataclasses-json-master/tests/test_unsupported_generics.py": {
        "TestUnsupportedGenerics.test_unsupscripted": {
            "name": "test_unsupscripted",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnsupportedGenerics.test_supscripted": {
            "name": "test_supscripted",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnsupportedGenerics.test_parameterized_unsupscripted": {
            "name": "test_parameterized_unsupscripted",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnsupportedGenerics.test_parameterized_supscripted": {
            "name": "test_parameterized_supscripted",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-json-master/tests/__init__.py": {},
    "dataclasses-json-master/tests/hypothesis2/core.py": {
        "examples": {
            "name": "examples",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "examples.examples_decorator": {
            "name": "examples_decorator",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Tuple[str, str, int]",
                    "bool",
                    "int",
                    "Callable",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "dataclasses-json-master/tests/hypothesis2/strategies.py": {
        "deques": {
            "name": "deques",
            "location": 6,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "elements": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "min_size": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "max_size": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "unique_by": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "unique": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "optionals": {
            "name": "optionals",
            "location": 11,
            "return": [
                "bool",
                "Optional[str]",
                "Union[int, None]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[int]",
                    "Optional[List[Callable]]"
                ]
            }
        }
    },
    "dataclasses-json-master/tests/hypothesis2/__init__.py": {}
}
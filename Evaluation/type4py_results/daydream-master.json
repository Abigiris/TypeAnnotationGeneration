{
    "daydream-master/conftest.py": {
        "pytest_assertrepr_compare": {
            "name": "pytest_assertrepr_compare",
            "location": 47,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Type[T]",
                    "List[dict]",
                    "str",
                    "bool"
                ],
                "op": [
                    "bytes",
                    "dict",
                    "bool",
                    "Optional[Dict[str, int]]",
                    "list",
                    "Dict[str, List[str]]"
                ],
                "left": [
                    "bytes",
                    "dict",
                    "bool",
                    "Optional[Dict[str, int]]",
                    "list",
                    "Dict[str, List[str]]"
                ],
                "right": [
                    "bytes",
                    "dict",
                    "bool",
                    "Optional[Dict[str, int]]",
                    "list",
                    "Dict[str, List[str]]"
                ]
            }
        }
    },
    "daydream-master/tools.py": {
        "pairwise": {
            "name": "pairwise",
            "location": 28,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[Any]",
                    "Iterator[Any]",
                    "Iterable[T]",
                    "Tuple[int, int]",
                    "int",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "daydream-master/defn/concepts.py": {
        "Size.name": {
            "name": "name",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.attack": {
            "name": "attack",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.armor_class": {
            "name": "armor_class",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.grapple": {
            "name": "grapple",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.hide": {
            "name": "hide",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "modifier_value": []
            }
        },
        "Size.__repr__": {
            "name": "__repr__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.__eq__": {
            "name": "__eq__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbilityScore.modifier": {
            "name": "modifier",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityScore.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "score": []
            }
        },
        "AbilityScore.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityScore.__eq__": {
            "name": "__eq__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbilityScore.__add__": {
            "name": "__add__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbilityScore.__iadd__": {
            "name": "__iadd__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbilityType.__str__": {
            "name": "__str__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ability.name": {
            "name": "name",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ability.ability_type": {
            "name": "ability_type",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ability.description": {
            "name": "description",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ability.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "ability_type": [],
                "description": []
            }
        },
        "Ability.__delattr__": {
            "name": "__delattr__",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Ability.__repr__": {
            "name": "__repr__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ability.__str__": {
            "name": "__str__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ability.__eq__": {
            "name": "__eq__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Synergy.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "target": [],
                "modifier": [],
                "condition": []
            }
        },
        "Synergy.__repr__": {
            "name": "__repr__",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Synergy._dereference_name": {
            "name": "_dereference_name",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "_BaseSkill.ranks": {
            "name": "ranks",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BaseSkill.modifier": {
            "name": "modifier",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BaseSkill.__init__": {
            "name": "__init__",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "ranks": []
            }
        },
        "_BaseSkill.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 430,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_BaseSkill.__repr__": {
            "name": "__repr__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Skill.__call__": {
            "name": "__call__",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "ranks": []
            }
        },
        "Skill._class_name": {
            "name": "_class_name",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Class.__init__": {
            "name": "__init__",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bab": [],
                "fort": [],
                "ref": [],
                "will": [],
                "special": []
            }
        }
    },
    "daydream-master/defn/core.py": {
        "_is_private": {
            "name": "_is_private",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "_is_public": {
            "name": "_is_public",
            "location": 145,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "Reference.dereference": {
            "name": "dereference",
            "location": 45,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Reference.name": {
            "name": "name",
            "location": 73,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "target": [
                    "Sequence",
                    "bool",
                    "int",
                    "str"
                ],
                "modifier": [
                    "Optional[List[int]]",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Reference.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "type",
                "dict",
                "Type",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.__eq__": {
            "name": "__eq__",
            "location": 90,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Reference.__add__": {
            "name": "__add__",
            "location": 101,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "Reference._refers_to": {
            "name": "_refers_to",
            "location": 110,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[..., None]",
                    "list"
                ]
            }
        },
        "Reference._dereference_name": {
            "name": "_dereference_name",
            "location": 122,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "bool",
                    "Mapping[Tuple[str, str], Any]",
                    "str"
                ]
            }
        },
        "Reference._type_name": {
            "name": "_type_name",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Set[str]",
                    "Iterable[str]"
                ],
                "ignore": [
                    "Optional[Dict[str, Any]]",
                    "Callable",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Aggregator.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator.__setattr__": {
            "name": "__setattr__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Aggregator.__getattribute__": {
            "name": "__getattribute__",
            "location": 197,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "Pattern[str]"
                ]
            }
        },
        "Aggregator.__delattr__": {
            "name": "__delattr__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Aggregator._known_names": {
            "name": "_known_names",
            "location": 234,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daydream-master/defn/numbers.py": {
        "_integer_to_ordinal": {
            "name": "_integer_to_ordinal",
            "location": 170,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_ordinal_to_integer": {
            "name": "_ordinal_to_integer",
            "location": 181,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ordinal": {
            "name": "ordinal",
            "location": 200,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_key": {
            "name": "_key",
            "location": 498,
            "return": [],
            "arguments": {
                "modifier": []
            }
        },
        "Condition.__str__": {
            "name": "__str__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Die.from_string": {
            "name": "from_string",
            "location": 236,
            "return": [],
            "arguments": {
                "cls": [],
                "die_string": []
            }
        },
        "Die.average": {
            "name": "average",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Die.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "side_count": []
            }
        },
        "Die.__repr__": {
            "name": "__repr__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Die.__str__": {
            "name": "__str__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Die.__eq__": {
            "name": "__eq__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Die.__hash__": {
            "name": "__hash__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Die.__lt__": {
            "name": "__lt__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DicePool.average": {
            "name": "average",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DicePool.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DicePool.__eq__": {
            "name": "__eq__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DicePool.__repr__": {
            "name": "__repr__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DicePool.__add__": {
            "name": "__add__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DicePool._sorted": {
            "name": "_sorted",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifierType.__str__": {
            "name": "__str__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modifier.is_bonus": {
            "name": "is_bonus",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modifier.is_penalty": {
            "name": "is_penalty",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modifier.__str__": {
            "name": "__str__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modifier.__add__": {
            "name": "__add__",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Modifier.__mul__": {
            "name": "__mul__",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Modifier.__neg__": {
            "name": "__neg__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modifier.__lt__": {
            "name": "__lt__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Modifier.__int__": {
            "name": "__int__",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifierTotal.value": {
            "name": "value",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifierTotal.conditions": {
            "name": "conditions",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifierTotal.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifierTotal.__repr__": {
            "name": "__repr__",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifierTotal.__eq__": {
            "name": "__eq__",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ModifierTotal.__add__": {
            "name": "__add__",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Progression.__init__": {
            "name": "__init__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "modifier_type": []
            }
        },
        "Progression.__repr__": {
            "name": "__repr__",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Progression.__eq__": {
            "name": "__eq__",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Progression.__len__": {
            "name": "__len__",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Progression.__getitem__": {
            "name": "__getitem__",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Progression.__iter__": {
            "name": "__iter__",
            "location": 591,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daydream-master/defn/srd.py": {},
    "daydream-master/defn/__init__.py": {},
    "daydream-master/test/__init__.py": {},
    "daydream-master/test/defn/test_concepts.py": {
        "TestSize.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSize.test_small_attack_modifier": {
            "name": "test_small_attack_modifier",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSize.test_small_armor_class": {
            "name": "test_small_armor_class",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSize.test_small_grapple": {
            "name": "test_small_grapple",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSize.test_small_hide": {
            "name": "test_small_hide",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbilityScore.test_positive_modifier": {
            "name": "test_positive_modifier",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbilityScore.test_negative_modifier": {
            "name": "test_negative_modifier",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbilityType.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbilityType.test_str": {
            "name": "test_str",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbility.test_static_ability": {
            "name": "test_static_ability",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbility.test_delete_features": {
            "name": "test_delete_features",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynergy.test_dereference_to_2": {
            "name": "test_dereference_to_2",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynergy.test_dereference_to_0": {
            "name": "test_dereference_to_0",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynergy.test_dereference_in_nested_reference": {
            "name": "test_dereference_in_nested_reference",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynergy.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSkill.test_ranks": {
            "name": "test_ranks",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSkill.test_modifier": {
            "name": "test_modifier",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynergy.test_dereference_to_2.Character.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "bluff": []
            }
        },
        "TestSynergy.test_dereference_to_0.Character.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "bluff": []
            }
        },
        "TestSynergy.test_dereference_in_nested_reference.Character.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cha": [
                    "int",
                    "float",
                    "str"
                ],
                "bluff": [
                    "int",
                    "float",
                    "str"
                ],
                "diplomacy": [
                    "List[List[T]]",
                    "int"
                ]
            }
        }
    },
    "daydream-master/test/defn/test_core.py": {
        "TestReference.test_dereference": {
            "name": "test_dereference",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReference.test_dereference_recursively": {
            "name": "test_dereference_recursively",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReference.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReference.test_adding_to_reference": {
            "name": "test_adding_to_reference",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReference.test_name": {
            "name": "test_name",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregates_from_children": {
            "name": "test_aggregates_from_children",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_dereferences": {
            "name": "test_aggregator_dereferences",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_dereferences_recursively": {
            "name": "test_aggregator_dereferences_recursively",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_always_dereferences_nested_references": {
            "name": "test_aggregator_always_dereferences_nested_references",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReference.test_dereference.MyTest.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestReference.test_dereference_recursively.MyTest.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestReference.test_adding_to_reference.MyTest.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "TestAggregator.test_aggregates_from_children.Leaf.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "test": []
            }
        },
        "TestAggregator.test_aggregates_from_children.Branch.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "test": []
            }
        },
        "TestAggregator.test_aggregates_from_children.Root.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "test": []
            }
        },
        "TestAggregator.test_aggregates_from_children.Root.test": {
            "name": "test",
            "location": 123,
            "return": [
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_dereferences.Leaf.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_dereferences.Root.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestAggregator.test_aggregator_dereferences_recursively.Leaf.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_dereferences_recursively.Root.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "another": []
            }
        },
        "TestAggregator.test_aggregator_always_dereferences_nested_references.Leaf.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregator.test_aggregator_always_dereferences_nested_references.Branch.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "another": [
                    "int",
                    "List[Tuple[int, float]]",
                    "Tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "TestAggregator.test_aggregator_always_dereferences_nested_references.Root.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "TestAggregator.test_aggregator_always_dereferences_nested_references.Root.value": {
            "name": "value",
            "location": 206,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daydream-master/test/defn/test_numbers.py": {
        "TestOrdinals.test_ordinal_to_integer": {
            "name": "test_ordinal_to_integer",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrdinals.test_integer_to_ordinal": {
            "name": "test_integer_to_ordinal",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_str": {
            "name": "test_str",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_from_string": {
            "name": "test_from_string",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_string_conversion_identity": {
            "name": "test_string_conversion_identity",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_bad_string_prefix": {
            "name": "test_bad_string_prefix",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_bad_string_suffix": {
            "name": "test_bad_string_suffix",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_hashable": {
            "name": "test_hashable",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDie.test_average": {
            "name": "test_average",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicePool.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicePool.test_equals_with_zero_counts": {
            "name": "test_equals_with_zero_counts",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicePool.test_average_of_pool": {
            "name": "test_average_of_pool",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicePool.test_add_pools": {
            "name": "test_add_pools",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicePool.test_add_pool_and_die": {
            "name": "test_add_pool_and_die",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicePool.test_add_die_and_pool": {
            "name": "test_add_die_and_pool",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_str": {
            "name": "test_str",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_str_with_conditional": {
            "name": "test_str_with_conditional",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_add_stackable": {
            "name": "test_add_stackable",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_add_unstackable_bonuses": {
            "name": "test_add_unstackable_bonuses",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_add_unstackable_penalties": {
            "name": "test_add_unstackable_penalties",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_add_different_types": {
            "name": "test_add_different_types",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_add_bonus_and_penalty": {
            "name": "test_add_bonus_and_penalty",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_modifier_times_scalar": {
            "name": "test_modifier_times_scalar",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_less_than": {
            "name": "test_less_than",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_bonus": {
            "name": "test_bonus",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_penalty": {
            "name": "test_penalty",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_zero_is_bonus_and_penalty": {
            "name": "test_zero_is_bonus_and_penalty",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifier.test_null_modifier": {
            "name": "test_null_modifier",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifierTotal.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifierTotal.test_value_of_total_with_static_modifiers": {
            "name": "test_value_of_total_with_static_modifiers",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifierTotal.test_value_of_total_with_conditional_modifiers": {
            "name": "test_value_of_total_with_conditional_modifiers",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifierTotal.test_add_totals": {
            "name": "test_add_totals",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModifierTotal.test_add_modifier_to_total": {
            "name": "test_add_modifier_to_total",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgression.test_create_save": {
            "name": "test_create_save",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgression.test_repr_evaluates": {
            "name": "test_repr_evaluates",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daydream-master/test/defn/__init__.py": {}
}
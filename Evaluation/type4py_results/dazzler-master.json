{
    "dazzler-master/setup.py": {},
    "dazzler-master/dazzler/errors.py": {},
    "dazzler-master/dazzler/events.py": {},
    "dazzler-master/dazzler/presets.py": {
        "PresetSize.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresetColor.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/_assets.py": {},
    "dazzler-master/dazzler/_config.py": {
        "DazzlerConfig.__init__": {
            "name": "__init__",
            "location": 689,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/_dazzler.py": {
        "cli": {
            "name": "cli",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Dazzler.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str",
                    "Optional[str]",
                    "Sequence[Any]",
                    "Callable[[Any], str]"
                ],
                "app_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Dazzler.add_page": {
            "name": "add_page",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Dazzler.collect_requirements": {
            "name": "collect_requirements",
            "location": 267,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dazzler.requirement_from_file": {
            "name": "requirement_from_file",
            "location": 279,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "str"
                ]
            }
        },
        "Dazzler.get_packages": {
            "name": "get_packages",
            "location": 286,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "Dazzler._remove_requirement": {
            "name": "_remove_requirement",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "requirement": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "dazzler-master/dazzler/_reloader.py": {
        "watch.handle_file": {
            "name": "handle_file",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[pathlib.Path]",
                    "bool"
                ]
            }
        },
        "run_reloaded.handle_std": {
            "name": "handle_std",
            "location": 143,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "IO[Any]",
                    "bytes",
                    "asyncio.StreamReader"
                ],
                "outfile": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "bytes",
                    "asyncio.StreamReader"
                ]
            }
        }
    },
    "dazzler-master/dazzler/_renderer.py": {},
    "dazzler-master/dazzler/_server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dazzler": [],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop"
                ],
                "app": [
                    "aiohttp.web.Application",
                    "Callable"
                ]
            }
        },
        "Server.setup_routes": {
            "name": "setup_routes",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "bool"
                ],
                "debug": [
                    "str",
                    "IO[str]",
                    "dict",
                    "set",
                    "float"
                ]
            }
        },
        "Server._apply_middleware": {
            "name": "_apply_middleware",
            "location": 411,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Server.route_update.done_callback": {
            "name": "done_callback",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]",
                    "dict",
                    "asyncio.Task"
                ]
            }
        },
        "Server.route_update.create_task": {
            "name": "create_task",
            "location": 142,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "coroutine": [
                    "int",
                    "asyncio.AbstractEventLoop",
                    "str"
                ]
            }
        }
    },
    "dazzler-master/dazzler/_version.py": {},
    "dazzler-master/dazzler/__init__.py": {},
    "dazzler-master/dazzler/__main__.py": {},
    "dazzler-master/dazzler/components/__init__.py": {},
    "dazzler-master/dazzler/components/auth/__init__.py": {},
    "dazzler-master/dazzler/components/calendar/__init__.py": {},
    "dazzler-master/dazzler/components/charts/__init__.py": {},
    "dazzler-master/dazzler/components/core/__init__.py": {},
    "dazzler-master/dazzler/components/electron/__init__.py": {},
    "dazzler-master/dazzler/components/extra/__init__.py": {},
    "dazzler-master/dazzler/components/html/__init__.py": {},
    "dazzler-master/dazzler/components/icons/__init__.py": {},
    "dazzler-master/dazzler/components/markdown/__init__.py": {},
    "dazzler-master/dazzler/components/svg/__init__.py": {},
    "dazzler-master/dazzler/contrib/postgresql.py": {
        "_add_where": {
            "name": "_add_where",
            "location": 221,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "statement": [
                    "str",
                    "psycopg2.extensions.connection"
                ]
            }
        },
        "PostgresMiddleware.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application"
                ],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "aiohttp.web.Application",
                    "dict"
                ],
                "pool": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "PostgresSessionBackend.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Config"
                ],
                "config": [
                    "config.Config",
                    "sphinx.config.Config",
                    "types.Config",
                    "dict",
                    "evtstrd.config.Config"
                ],
                "pool": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "PostgresAuthenticator.__init__": {
            "name": "__init__",
            "location": 529,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict",
                    "aiohttp.web.Application",
                    "str"
                ],
                "pool": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "PostgresAuthenticator._gen_salt": {
            "name": "_gen_salt",
            "location": 703,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {}
        },
        "PostgresUserAdminPage.__init__": {
            "name": "__init__",
            "location": 735,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "Config",
                    "Optional[List[str]]",
                    "aiohttp.web.Application"
                ],
                "config": [
                    "types.Config",
                    "config.Config",
                    "dict"
                ]
            }
        },
        "PostgresUserAdminPage._build_user_filter": {
            "name": "_build_user_filter",
            "location": 807,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "filters": [
                    "dict",
                    "int",
                    "str",
                    "Dict[str, Tuple[Any, Any]]"
                ]
            }
        }
    },
    "dazzler-master/dazzler/contrib/redis.py": {
        "RedisMiddleware.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application",
                    "tornado.web.Application"
                ],
                "redis": [
                    "str"
                ]
            }
        },
        "RedisSessionBackend.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application"
                ],
                "redis": [
                    "str"
                ]
            }
        }
    },
    "dazzler-master/dazzler/contrib/__init__.py": {},
    "dazzler-master/dazzler/electron/_builder.py": {
        "ElectronBuilder.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "Callable",
                    "int"
                ],
                "app_path": [
                    "pathlib.Path",
                    "str"
                ],
                "target": [
                    "Sequence[str]",
                    "asyncio.AbstractEventLoop",
                    "str",
                    "bool"
                ],
                "output": [
                    "pathlib.Path"
                ],
                "publish": [
                    "Sequence[str]",
                    "asyncio.AbstractEventLoop",
                    "str",
                    "bool"
                ]
            }
        },
        "ElectronBuilder.cleanup": {
            "name": "cleanup",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ElectronBuilder._create_package_json": {
            "name": "_create_package_json",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ElectronBuilder._create_loading_window": {
            "name": "_create_loading_window",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "list",
                    "AnyStr"
                ]
            }
        },
        "ElectronBuilder._create_target": {
            "name": "_create_target",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "ElectronBuilder._create_environ": {
            "name": "_create_environ",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ElectronBuilder._create_publish": {
            "name": "_create_publish",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "Union[str, \"DatabaseURL\"]"
                ]
            }
        },
        "ElectronBuilder._freeze_app": {
            "name": "_freeze_app",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/electron/_loading.py": {
        "get_loading_options": {
            "name": "get_loading_options",
            "location": 5,
            "return": [
                "bool",
                "Optional[int]",
                "list",
                "Callable"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str, str, str, str, str, str]]",
                    "str"
                ]
            }
        },
        "build_loading_html": {
            "name": "build_loading_html",
            "location": 24,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "Exception"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "dazzler-master/dazzler/electron/_runner.py": {},
    "dazzler-master/dazzler/electron/_runtime.py": {
        "is_compiled": {
            "name": "is_compiled",
            "location": 4,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "dazzler-master/dazzler/electron/_window.py": {},
    "dazzler-master/dazzler/electron/__init__.py": {},
    "dazzler-master/dazzler/pages/user_admin.py": {
        "_get_trigger_meta": {
            "name": "_get_trigger_meta",
            "location": 19,
            "return": [
                "str",
                "Callable[[T], List[T]]",
                "int"
            ],
            "arguments": {
                "identity": [
                    "str"
                ]
            }
        },
        "UserAdminPage.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "layout": [
                    "str",
                    "Optional[str]"
                ],
                "authorizations": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "users_per_page": [
                    "List[Callable]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "users_page_displayed": [
                    "List[Callable]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "packages": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "UserAdminPage.get_role_row": {
            "name": "get_role_row",
            "location": 447,
            "return": [
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "simulation.core.common.Structure"
                ]
            }
        },
        "UserAdminPage.get_user_row": {
            "name": "get_user_row",
            "location": 479,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "roles": [
                    "int",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dazzler-master/dazzler/pages/__init__.py": {},
    "dazzler-master/dazzler/system/auth.py": {
        "_default_page": {
            "name": "_default_page",
            "location": 13,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "default_redirect": [
                    "bool",
                    "int",
                    "Optional[Callable]",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "page_title": [
                    "List[str]",
                    "bool"
                ],
                "form_header": [
                    "bool",
                    "int",
                    "Optional[Callable]",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "page_url": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "build_register_page": {
            "name": "build_register_page",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "register_handler": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "title": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "include_email": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[int]",
                    "Type"
                ],
                "page_name": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "page_url": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "custom_fields": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[int]",
                    "Type"
                ],
                "submit_label": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[int]",
                    "Type"
                ],
                "username_pattern": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[int]",
                    "Type"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ],
                "roles": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ],
                "email": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ],
                "metadata": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Authenticator.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application",
                    "aiohttp.web.Request"
                ]
            }
        },
        "AuthMiddleware.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "auth": [
                    "str"
                ]
            }
        },
        "DazzlerAuth.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[int]",
                    "str",
                    "aiohttp.web.Application",
                    "Optional[str]",
                    "int"
                ],
                "authenticator": [
                    "str",
                    "web.Application",
                    "aiohttp.web.Application"
                ],
                "backend": [
                    "str",
                    "int",
                    "dict"
                ],
                "login_page": [
                    "Optional[\"Frame\"]"
                ],
                "default_redirect": [
                    "Optional[\"Frame\"]"
                ],
                "register_page": [
                    "purplship.core.utils.Element",
                    "purplship.core.utils.xml.Element",
                    "str"
                ]
            }
        },
        "DazzlerAuth.require_page_login": {
            "name": "require_page_login",
            "location": 496,
            "return": [
                "Optional[Union[Any, str]]",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "int",
                    "Callable"
                ],
                "redirect": [
                    "str",
                    "int",
                    "Callable"
                ],
                "handle_page": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "DazzlerAuth._get_custom_fields": {
            "name": "_get_custom_fields",
            "location": 528,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/system/session.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "int",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "query_queue": [
                    "bool",
                    "dict",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "SessionBackEnd.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application",
                    "aiohttp.web.Request"
                ]
            }
        },
        "FileSessionBackEnd.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "tuple",
                    "aiohttp.web.Application"
                ]
            }
        },
        "FileSessionBackEnd.release": {
            "name": "release",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str"
                ]
            }
        },
        "FileSessionBackEnd._locked": {
            "name": "_locked",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FileSessionBackEnd._session_path": {
            "name": "_session_path",
            "location": 214,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "lock": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "FileSessionBackEnd._lock": {
            "name": "_lock",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "uuid.UUID"
                ]
            }
        },
        "SessionMiddleware.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application"
                ],
                "backend": []
            }
        },
        "SessionMiddleware.verify_session": {
            "name": "verify_session",
            "location": 269,
            "return": [
                "int",
                "Exception",
                "dict",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SessionMiddleware._set_session": {
            "name": "_set_session",
            "location": 285,
            "return": [
                "Optional[str]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "dazzler-master/dazzler/system/transforms.py": {
        "Transform.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.transform": {
            "name": "transform",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Transform.t": {
            "name": "t",
            "location": 27,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Transform.prepare": {
            "name": "prepare",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TiedTransform.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "int",
                    "bool",
                    "float"
                ],
                "targets": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TiedTransform.transform": {
            "name": "transform",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "TiedTransform.t": {
            "name": "t",
            "location": 57,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TiedTransform.prepare": {
            "name": "prepare",
            "location": 60,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Transformable.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "_Comparable.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "comparison": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "_ValueTransform.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_TargetTransform.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "int",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "_Comparison.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "tuple",
                    "Optional[Callable[..., Any]]",
                    "Optional[List[Any]]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ]
            }
        },
        "ToPrecision.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "precision": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "Format.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Callable",
                    "dict",
                    "Type[Any]"
                ]
            }
        },
        "Split.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "Concat.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "tuple",
                    "Optional[Callable[..., Any]]",
                    "Optional[List[Any]]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ]
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[Sequence]",
                    "str"
                ],
                "stop": [
                    "int",
                    "Optional[Sequence]",
                    "str"
                ]
            }
        },
        "Pluck.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Callable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Insert.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "front": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "Take.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list",
                    "tuple",
                    "dict"
                ]
            }
        },
        "Range.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[Sequence]",
                    "str"
                ],
                "end": [
                    "int",
                    "Optional[Sequence]",
                    "str"
                ],
                "step": [
                    "int",
                    "Optional[Sequence]",
                    "str"
                ]
            }
        },
        "Join.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "Pick.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Callable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Get.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Callable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Set.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict"
                ],
                "value": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Put.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Type[object]"
                ],
                "target": [
                    "str",
                    "Callable",
                    "Type",
                    "Tuple[str, str]"
                ]
            }
        },
        "Merge.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "tuple",
                    "Optional[Callable[..., Any]]",
                    "Optional[List[Any]]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "direction": [
                    "List[str]",
                    "Callable[[Any], bool]",
                    "IO[str]",
                    "tuple",
                    "int",
                    "list",
                    "Optional[List[str]]"
                ],
                "deep": [
                    "List[str]",
                    "Callable[[Any], bool]",
                    "IO[str]",
                    "tuple",
                    "int",
                    "list",
                    "Optional[List[str]]"
                ]
            }
        },
        "If.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "comparison": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "then": [
                    "bool"
                ],
                "otherwise": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        }
    },
    "dazzler-master/dazzler/system/_binding.py": {
        "is_component": {
            "name": "is_component",
            "location": 23,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "aspect": [
                    "dict",
                    "int",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "hydrate": {
            "name": "hydrate",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "aspect": [
                    "dict",
                    "T"
                ]
            }
        },
        "coerce_binding": {
            "name": "coerce_binding",
            "location": 405,
            "return": [
                "bool",
                "Optional[Callable[[bool], None]]",
                "mypy.errors.Errors"
            ],
            "arguments": {
                "value": [
                    "Set[str]",
                    "bytes",
                    "Type"
                ],
                "binding_type": [
                    "Type",
                    "str"
                ]
            }
        },
        "_Bind.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "int",
                    "bool",
                    "float"
                ],
                "aspect": [
                    "int",
                    "bool",
                    "float"
                ],
                "regex": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_Bind.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bind.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bind.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "str",
                "int",
                "Callable",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "_Bind.__hash__": {
            "name": "__hash__",
            "location": 73,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bind.prepare": {
            "name": "prepare",
            "location": 76,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trigger.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "aspect": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "regex": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "once": [
                    "float",
                    "int"
                ],
                "skip_initial": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Trigger.prepare": {
            "name": "prepare",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shorthand": [
                    "str",
                    "int",
                    "dict"
                ],
                "identity": [
                    "str"
                ],
                "aspect": [
                    "str"
                ],
                "regex": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BoundAspect.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "bool",
                    "dict",
                    "Sequence[str]"
                ],
                "trigger": [
                    "str",
                    "bool",
                    "dict",
                    "Sequence[str]"
                ],
                "states": [
                    "str",
                    "bool",
                    "dict",
                    "Sequence[str]"
                ],
                "call": [
                    "str",
                    "bool",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "BoundAspect.prepare": {
            "name": "prepare",
            "location": 166,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundAspect.triggers": {
            "name": "triggers",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundAspect.__get__": {
            "name": "__get__",
            "location": 191,
            "return": [
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[str]",
                    "Optional[float]",
                    "dict",
                    "Optional[int]",
                    "int"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "BoundAspect.__str__": {
            "name": "__str__",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundAspect.__repr__": {
            "name": "__repr__",
            "location": 200,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundAspect.__eq__": {
            "name": "__eq__",
            "location": 203,
            "return": [
                "str",
                "Callable",
                "IO[str]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "BoundAspect.__hash__": {
            "name": "__hash__",
            "location": 206,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContext.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bytes",
                    "int",
                    "asyncio.LifoQueue",
                    "List[Callable]"
                ],
                "request": [
                    "libkol.Session",
                    "Optional[str]"
                ],
                "trigger": [
                    "str",
                    "bytes",
                    "int",
                    "asyncio.LifoQueue",
                    "List[Callable]"
                ],
                "states": [
                    "str",
                    "bytes",
                    "int",
                    "asyncio.LifoQueue",
                    "List[Callable]"
                ]
            }
        },
        "BindingContext.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "request": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "trigger": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "states": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "websocket": [
                    "int",
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "float"
                ],
                "request_queue": [
                    "int",
                    "List[str]",
                    "dict",
                    "str",
                    "bool",
                    "List[Tuple[str, ...]]",
                    "Optional[str]"
                ],
                "create_task": [
                    "list"
                ]
            }
        },
        "Binding.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "str",
                    "Set[str]",
                    "Callable",
                    "int"
                ],
                "states": [
                    "str",
                    "Set[str]",
                    "Callable",
                    "int"
                ],
                "call": [
                    "str",
                    "Set[str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "Binding.__call__": {
            "name": "__call__",
            "location": 366,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "CallContext.__init__": {
            "name": "__init__",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "bytes",
                    "Callable[..., Awaitable]",
                    "int"
                ],
                "request": [
                    "bytes",
                    "Callable[..., Awaitable]",
                    "int"
                ],
                "trigger": [
                    "bytes",
                    "Callable[..., Awaitable]",
                    "int"
                ],
                "states": [
                    "bytes",
                    "Callable[..., Awaitable]",
                    "int"
                ]
            }
        }
    },
    "dazzler-master/dazzler/system/_component.py": {
        "prepare_aspect": {
            "name": "prepare_aspect",
            "location": 12,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {
                "value": [
                    "list",
                    "tuple",
                    "\"Node\"",
                    "List[Optional[float]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "prepare_aspects": {
            "name": "prepare_aspects",
            "location": 24,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "aspects": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "_generate_identity": {
            "name": "_generate_identity",
            "location": 32,
            "return": [
                "str",
                "bytearray",
                "Union[bytes, bytearray]",
                "bool"
            ],
            "arguments": {}
        },
        "Aspect.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "default": [
                    "bool",
                    "str",
                    "int"
                ],
                "required": [
                    "bool",
                    "str",
                    "int"
                ],
                "children": [
                    "bool",
                    "str",
                    "int"
                ],
                "docstring": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Aspect.__set_name__": {
            "name": "__set_name__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "bool"
                ],
                "name": [
                    "str",
                    "List[Tuple[str, int]]",
                    "List[str]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "Aspect.__get__": {
            "name": "__get__",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict",
                    "Optional[Mapping[str, str]]",
                    "Mapping[str, Any]",
                    "Dict[Optional[str], str]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Aspect.__set__": {
            "name": "__set__",
            "location": 67,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Callable"
                ],
                "value": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aspects": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "identity": [
                    "str"
                ]
            }
        },
        "Component._prepare": {
            "name": "_prepare",
            "location": 94,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "type",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/system/_generator.py": {
        "_default_prop_type": {
            "name": "_default_prop_type",
            "location": 16,
            "return": [],
            "arguments": {
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "_optional": {
            "name": "_optional",
            "location": 20,
            "return": [
                "bool",
                "int",
                "tuple"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "_json_or_undefined": {
            "name": "_json_or_undefined",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "_default_prop_docstring_format": {
            "name": "_default_prop_docstring_format",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "prop": [
                    "str",
                    "type"
                ],
                "defaults": [
                    "str",
                    "type"
                ]
            }
        },
        "generate_shape": {
            "name": "generate_shape",
            "location": 52,
            "return": [
                "Iterable[Any]",
                "type"
            ],
            "arguments": {
                "t": [
                    "Type",
                    "Iterable[Any]"
                ]
            }
        },
        "is_component_aspect": {
            "name": "is_component_aspect",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_obj": [
                    "str"
                ]
            }
        },
        "generate_component": {
            "name": "generate_component",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "display_name": [
                    "str"
                ],
                "description": [
                    "str",
                    "bool"
                ],
                "props": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "\"TransactionTypeModel\"",
                    "int",
                    "Dict[str, List[str]]",
                    "Mapping[str, str]",
                    "Dict[str, str]",
                    "dict"
                ],
                "output_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "generate_imports": {
            "name": "generate_imports",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "output_path": [
                    "str"
                ],
                "components": [
                    "List[Tuple[float, str]]",
                    "List[str]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "dazzler-master/dazzler/system/_middleware.py": {},
    "dazzler-master/dazzler/system/_package.py": {
        "Package.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "bool"
                ],
                "components": [
                    "str",
                    "Tuple[type]",
                    "int"
                ],
                "requirements": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "routes": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Package.prepare": {
            "name": "prepare",
            "location": 35,
            "return": [
                "str",
                "OrderedDict",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "Iterable"
                ],
                "external": [
                    "Iterable"
                ]
            }
        },
        "Package.get_requirements": {
            "name": "get_requirements",
            "location": 45,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "str",
                    "bool"
                ]
            }
        },
        "Package.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/system/_page.py": {
        "PagePart.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PagePart._bind": {
            "name": "_bind",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "bool",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "PagePart.bind": {
            "name": "bind",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "dict",
                    "Union[int, float]"
                ]
            }
        },
        "PagePart.call": {
            "name": "call",
            "location": 73,
            "return": [
                "bool",
                "Route"
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Callable[[], T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PagePart.tie": {
            "name": "tie",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PagePart.get_binding": {
            "name": "get_binding",
            "location": 126,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Optional[str]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "layout": [
                    "int",
                    "bool",
                    "str"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "bindings": [
                    "bool",
                    "List[str]"
                ],
                "routes": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "requirements": [
                    "str",
                    "Optional[str]"
                ],
                "requirements_dir": [
                    "str",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "lang": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "html_header": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "html_footer": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "favicon": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "meta_tags": [
                    "bool",
                    "int",
                    "List[Dict[str, str]]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "packages": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "require_login": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "electron_window": [
                    "dict",
                    "int",
                    "str",
                    "bool"
                ],
                "authorizations": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "include_app_header": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Callable[[dict], dict]"
                ],
                "include_app_footer": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Callable[[dict], dict]"
                ]
            }
        },
        "Page.route": {
            "name": "route",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "method": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "prefix": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Page.__str__": {
            "name": "__str__",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.__hash__": {
            "name": "__hash__",
            "location": 311,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.__repr__": {
            "name": "__repr__",
            "location": 314,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PagePart._bind._wrapper": {
            "name": "_wrapper",
            "location": 49,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "Page.route._page_route": {
            "name": "_page_route",
            "location": 300,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "List[deque]",
                    "Iterable"
                ]
            }
        }
    },
    "dazzler-master/dazzler/system/_requirements.py": {
        "assets_to_requirements": {
            "name": "assets_to_requirements",
            "location": 135,
            "return": [
                "str",
                "List[str]",
                "Tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "dev_data": [
                    "str",
                    "Optional[str]"
                ],
                "dev_path": [
                    "str",
                    "Optional[str]"
                ],
                "package_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "external": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "collect_requirements": {
            "name": "collect_requirements",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path"
                ],
                "page": [
                    "str",
                    "pathlib.PurePosixPath",
                    "pathlib.Path",
                    "Iterable[Any]",
                    "callable"
                ]
            }
        },
        "filter_dev_requirements": {
            "name": "filter_dev_requirements",
            "location": 207,
            "return": [
                "str",
                "Tuple[int, int]",
                "Set[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "requirements": [
                    "str",
                    "Tuple[int, int]",
                    "Tuple[float, float, float]",
                    "int"
                ],
                "dev": [
                    "str",
                    "Tuple[int, int]",
                    "Tuple[float, float, float]",
                    "int"
                ]
            }
        },
        "Requirement.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "internal": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "kind": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "Iterable[Any]",
                    "List[Tuple[int, int]]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "package": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "dev": [
                    "str",
                    "int",
                    "bool",
                    "tuple"
                ],
                "external": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "page": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "integrity": [
                    "str",
                    "int",
                    "bool",
                    "tuple"
                ]
            }
        },
        "Requirement.prepare": {
            "name": "prepare",
            "location": 84,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "external": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Requirement.tag": {
            "name": "tag",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "external": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Requirement.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/system/_route.py": {
        "RouteMethod.get_method": {
            "name": "get_method",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Route.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "handler": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "method": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Literal"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "dazzler-master/dazzler/system/_undefined.py": {
        "_Undefined.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "Callable",
                    "ClassVar"
                ]
            }
        },
        "_Undefined.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Undefined.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Undefined.__bool__": {
            "name": "__bool__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/system/__init__.py": {},
    "dazzler-master/dazzler/tools/_ordered_set.py": {
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "List[str]",
                    "Dict[str, Callable[[str], Any]]",
                    "float"
                ]
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Tuple[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "Dict[str, float]",
                    "Mapping[str, float]",
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 24,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dazzler-master/dazzler/tools/_utils.py": {
        "get_package_path": {
            "name": "get_package_path",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "get_member": {
            "name": "get_member",
            "location": 21,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "member_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "replace_all": {
            "name": "replace_all",
            "location": 43,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "bool"
            ],
            "arguments": {
                "template": [
                    "str",
                    "int"
                ],
                "open_bracket": [
                    "str"
                ],
                "end_bracket": [
                    "str"
                ]
            }
        },
        "format_tag": {
            "name": "format_tag",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "tag_name": [
                    "str",
                    "Optional[str]"
                ],
                "attributes": [
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[int, str]",
                    "Dict[str, int]",
                    "dict",
                    "Mapping[str, Dict[str, Any]]"
                ],
                "content": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Set[str]",
                    "List[str]",
                    "Optional[str]",
                    "list"
                ],
                "opened": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "close": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "transform_dict_keys": {
            "name": "transform_dict_keys",
            "location": 77,
            "return": [
                "List[str]",
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "data": [
                    "Union[Dict, List]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "casing": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "dazzler-master/dazzler/tools/__init__.py": {},
    "dazzler-master/docs/conf.py": {
        "skip": {
            "name": "skip",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "what": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "obj": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "skip": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "options": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "dazzler-master/tests/conftest.py": {
        "pytest_pyfunc_call": {
            "name": "pytest_pyfunc_call",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "pyfuncitem": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "browser": {
            "name": "browser",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "start_visit": {
            "name": "start_visit",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "dict"
                ]
            }
        },
        "start_page": {
            "name": "start_page",
            "location": 73,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "start_visit": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Type[Exception]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "run_background_cmd": {
            "name": "run_background_cmd",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "electron_driver": {
            "name": "electron_driver",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_background_cmd._runner": {
            "name": "_runner",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "electron_driver.initialize": {
            "name": "initialize",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "binary_location": [
                    "bool",
                    "Sequence[str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "dazzler-master/tests/test_dazzler.py": {},
    "dazzler-master/tests/test_dazzler_auth.py": {
        "auth_app": {
            "name": "auth_app",
            "location": 28,
            "return": [
                "aiohttp.web.Application",
                "\"App\""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/test_middleware.py": {},
    "dazzler-master/tests/test_package.py": {},
    "dazzler-master/tests/test_page.py": {
        "test_page_name_conflict": {
            "name": "test_page_name_conflict",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_page_url_conflict": {
            "name": "test_page_url_conflict",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/test_page_parts.py": {},
    "dazzler-master/tests/test_postgresql.py": {
        "auto_logout": {
            "name": "auto_logout",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "simulation.core.player.Player"
                ]
            }
        },
        "pg_app": {
            "name": "pg_app",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/test_requirements.py": {
        "test_requirement": {
            "name": "test_requirement",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "kind": [
                    "bool",
                    "str"
                ],
                "uri_key": [
                    "str",
                    "Optional[str]",
                    "int",
                    "BinaryIO"
                ],
                "formatted_tag": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_external_requirements": {
            "name": "test_external_requirements",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_requirements": {
            "name": "test_invalid_requirements",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_requirement_kind": {
            "name": "test_invalid_requirement_kind",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_external_only_warning": {
            "name": "test_external_only_warning",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_filter_dev_requirements": {
            "name": "test_filter_dev_requirements",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/test_session.py": {
        "session_app": {
            "name": "session_app",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "dazzler-master/tests/test_tools.py": {
        "test_get_package_path": {
            "name": "test_get_package_path",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_replace_all": {
            "name": "test_replace_all",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_format_tag": {
            "name": "test_format_tag",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ordered_set": {
            "name": "test_ordered_set",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/test_transforms.py": {},
    "dazzler-master/tests/tools.py": {
        "_wait_for": {
            "name": "_wait_for",
            "location": 17,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "driver": [
                    "Optional[int]",
                    "bool",
                    "Tuple[int]",
                    "int"
                ],
                "condition": [
                    "Optional[int]",
                    "bool",
                    "Tuple[int]",
                    "int"
                ],
                "timeout": [
                    "Optional[int]",
                    "bool",
                    "Tuple[int]",
                    "int"
                ]
            }
        },
        "_wait_for_element": {
            "name": "_wait_for_element",
            "location": 21,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "driver": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "float"
                ],
                "by": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "float"
                ],
                "accessor": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "float"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "wait_for_element_by_css_selector": {
            "name": "wait_for_element_by_css_selector",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "driver": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "selector": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "timeout": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "wait_for_elements_by_css_selector": {
            "name": "wait_for_elements_by_css_selector",
            "location": 48,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "driver": [
                    "int",
                    "bool",
                    "str",
                    "Tuple[int]"
                ],
                "selector": [
                    "int",
                    "bool",
                    "str",
                    "Tuple[int]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "wait_for_element_by_xpath": {
            "name": "wait_for_element_by_xpath",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "driver": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Tuple[int]",
                    "selenium.webdriver.Remote",
                    "Optional[bool]"
                ],
                "xpath": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Tuple[int]",
                    "selenium.webdriver.Remote",
                    "Optional[bool]"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Tuple[int]",
                    "selenium.webdriver.Remote",
                    "Optional[bool]"
                ]
            }
        },
        "wait_for_elements_by_xpath": {
            "name": "wait_for_elements_by_xpath",
            "location": 84,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "driver": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "xpath": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "wait_for_element_by_id": {
            "name": "wait_for_element_by_id",
            "location": 105,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "driver": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[float]"
                ],
                "_id": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[float]"
                ],
                "timeout": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[float]"
                ]
            }
        },
        "wait_for_text_to_equal": {
            "name": "wait_for_text_to_equal",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "driver": [
                    "str",
                    "Optional[Callable[[dict], None]]",
                    "Optional[Callable[[], None]]",
                    "Callable[[], int]",
                    "int",
                    "Iterable[str]",
                    "bool"
                ],
                "selector": [
                    "str",
                    "Exception",
                    "List[Exception]"
                ],
                "text": [
                    "str",
                    "Exception",
                    "List[Exception]"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "wait_for_style_to_equal": {
            "name": "wait_for_style_to_equal",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "driver": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "T"
                ],
                "selector": [
                    "int",
                    "Optional[str]"
                ],
                "style_attribute": [
                    "int",
                    "Optional[str]"
                ],
                "style_assertion": [
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "wait_for_property_to_equal": {
            "name": "wait_for_property_to_equal",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "driver": [
                    "bool",
                    "Optional[Callable[[dict], None]]",
                    "Optional[Callable[[], None]]",
                    "str",
                    "Optional[list]",
                    "Optional[str]"
                ],
                "selector": [
                    "str",
                    "int",
                    "Union[int, List]",
                    "nevergrad.common.Union[str, pathlib.Path]",
                    "Union[str, Sequence[str]]"
                ],
                "prop_name": [
                    "str",
                    "int",
                    "Union[int, List]",
                    "nevergrad.common.Union[str, pathlib.Path]",
                    "Union[str, Sequence[str]]"
                ],
                "prop_value": [
                    "str",
                    "Callable[[], int]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "_async_wrap": {
            "name": "_async_wrap",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_get_url": {
            "name": "_get_url",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "driver": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_click_element": {
            "name": "_click_element",
            "location": 234,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "driver": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Tuple[int]",
                    "Iterable",
                    "str"
                ],
                "selector": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Tuple[int]",
                    "Iterable",
                    "str"
                ],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Tuple[int]",
                    "Iterable",
                    "str"
                ]
            }
        },
        "wait_for_text_to_equal.condition": {
            "name": "condition",
            "location": 135,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "wait_for_style_to_equal.condition": {
            "name": "condition",
            "location": 168,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "wait_for_property_to_equal.condition": {
            "name": "condition",
            "location": 202,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "d": [
                    "Callable",
                    "str",
                    "T"
                ]
            }
        },
        "AsyncDriver.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "dazzler-master/tests/__init__.py": {},
    "dazzler-master/tests/apps/app_requirements.py": {},
    "dazzler-master/tests/apps/aspect_rendering.py": {},
    "dazzler-master/tests/apps/bindings_continue_after_error.py": {},
    "dazzler-master/tests/apps/binding_return_component.py": {},
    "dazzler-master/tests/apps/generated_component_trigger_binding.py": {},
    "dazzler-master/tests/apps/layout_as_function.py": {},
    "dazzler-master/tests/apps/multi_page.py": {},
    "dazzler-master/tests/apps/pages_directory.py": {},
    "dazzler-master/tests/apps/playground.py": {},
    "dazzler-master/tests/apps/prefer_external.py": {},
    "dazzler-master/tests/apps/__init__.py": {},
    "dazzler-master/tests/apps/pages/binding_chain.py": {},
    "dazzler-master/tests/apps/pages/binding_return_trigger.py": {},
    "dazzler-master/tests/apps/pages/binding_set_aspect_trigger_error.py": {},
    "dazzler-master/tests/apps/pages/binding_tree.py": {},
    "dazzler-master/tests/apps/pages/calls.py": {},
    "dazzler-master/tests/apps/pages/click_output.py": {},
    "dazzler-master/tests/apps/pages/component_as_aspect.py": {},
    "dazzler-master/tests/apps/pages/component_as_trigger.py": {},
    "dazzler-master/tests/apps/pages/get_aspect.py": {},
    "dazzler-master/tests/apps/pages/get_aspect_error.py": {},
    "dazzler-master/tests/apps/pages/initial_trigger.py": {},
    "dazzler-master/tests/apps/pages/once.py": {},
    "dazzler-master/tests/apps/pages/page_assets.py": {},
    "dazzler-master/tests/apps/pages/regex_bindings.py": {},
    "dazzler-master/tests/apps/pages/same_identity.py": {},
    "dazzler-master/tests/apps/pages/skip_initial.py": {},
    "dazzler-master/tests/apps/pages/storage.py": {},
    "dazzler-master/tests/apps/pages/str_trigger.py": {},
    "dazzler-master/tests/apps/pages/theme_transform.py": {},
    "dazzler-master/tests/apps/pages/ties.py": {},
    "dazzler-master/tests/apps/pages/transformations.py": {},
    "dazzler-master/tests/apps/pages/trigger_on_removed_component.py": {},
    "dazzler-master/tests/apps/pages/__init__.py": {},
    "dazzler-master/tests/apps/page_dir/page1.py": {},
    "dazzler-master/tests/apps/page_dir/page2.py": {},
    "dazzler-master/tests/apps/page_dir/__init__.py": {},
    "dazzler-master/tests/apps/page_parts/page_parts.py": {},
    "dazzler-master/tests/apps/page_parts/__init__.py": {},
    "dazzler-master/tests/apps/page_parts/pages/first.py": {},
    "dazzler-master/tests/apps/page_parts/pages/second.py": {},
    "dazzler-master/tests/apps/page_parts/pages/without.py": {},
    "dazzler-master/tests/apps/page_parts/pages/__init__.py": {},
    "dazzler-master/tests/apps/samples/chatroom.py": {
        "redis": {
            "name": "redis",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "create_message": {
            "name": "create_message",
            "location": 42,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "dazzler-master/tests/apps/samples/progress_update.py": {},
    "dazzler-master/tests/apps/samples/__init__.py": {},
    "dazzler-master/tests/apps/samples/pgapp/app.py": {},
    "dazzler-master/tests/apps/samples/pgapp/__init__.py": {},
    "dazzler-master/tests/apps/samples/pgapp/pages/index.py": {},
    "dazzler-master/tests/apps/samples/pgapp/pages/info.py": {},
    "dazzler-master/tests/apps/samples/pgapp/pages/__init__.py": {},
    "dazzler-master/tests/components/test_auth.py": {},
    "dazzler-master/tests/components/test_calendar.py": {},
    "dazzler-master/tests/components/test_charts.py": {},
    "dazzler-master/tests/components/test_common_styles.py": {},
    "dazzler-master/tests/components/test_component_system.py": {
        "test_simple_component": {
            "name": "test_simple_component",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_required_aspect": {
            "name": "test_missing_required_aspect",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_undefined_aspects": {
            "name": "test_undefined_aspects",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_null_aspects": {
            "name": "test_null_aspects",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_aspects_not_in_prepare": {
            "name": "test_default_aspects_not_in_prepare",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_aspect_can_be_changed": {
            "name": "test_default_aspect_can_be_changed",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_aspect_set_default": {
            "name": "test_default_aspect_set_default",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_aspect_set_default_after_init": {
            "name": "test_default_aspect_set_default_after_init",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_props_docstring": {
            "name": "test_default_props_docstring",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "prop_name": [
                    "str"
                ],
                "prop_default": [
                    "str"
                ]
            }
        },
        "test_enum_docstring": {
            "name": "test_enum_docstring",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_aspect": {
            "name": "test_set_aspect",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "aspect": [],
                "value": []
            }
        },
        "test_docstring_length": {
            "name": "test_docstring_length",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/components/test_core.py": {
        "test_checklist.remove_dupes": {
            "name": "remove_dupes",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "list",
                    "Optional[Sequence[T]]",
                    "dict",
                    "float",
                    "List[str]",
                    "str"
                ],
                "value": [
                    "list",
                    "Optional[Sequence[T]]",
                    "dict",
                    "float",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "dazzler-master/tests/components/test_extra.py": {},
    "dazzler-master/tests/components/test_html.py": {},
    "dazzler-master/tests/components/test_markdown.py": {},
    "dazzler-master/tests/components/test_mypy.py": {
        "run_mypy": {
            "name": "run_mypy",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "assert_mypy_output": {
            "name": "assert_mypy_output",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "code": [
                    "str",
                    "Optional[str]"
                ],
                "expected_outputs": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "expected_errors": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "expected_status": [
                    "Optional[str]",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_mypy_validations": {
            "name": "test_mypy_validations",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "arguments": [
                    "str"
                ],
                "assertions": [
                    "str"
                ]
            }
        },
        "test_tsc_mypy_validations": {
            "name": "test_tsc_mypy_validations",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "arguments": [
                    "str"
                ],
                "assertions": [
                    "str"
                ]
            }
        }
    },
    "dazzler-master/tests/components/test_ts_component.py": {
        "test_tsc_required": {
            "name": "test_tsc_required",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "component": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_tsc_docstring": {
            "name": "test_tsc_docstring",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "component": [
                    "str"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "test_tsc_aspect_docstring": {
            "name": "test_tsc_aspect_docstring",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "component": [
                    "str"
                ]
            }
        },
        "test_tsc_default_props_docstring": {
            "name": "test_tsc_default_props_docstring",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "prop_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "prop_default": [
                    "str",
                    "Dict[str, Any]"
                ],
                "component": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]"
                ]
            }
        },
        "test_tsc_enum_docstring": {
            "name": "test_tsc_enum_docstring",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dazzler-master/tests/components/__init__.py": {},
    "dazzler-master/tests/components/pages/button.py": {},
    "dazzler-master/tests/components/pages/calendar.py": {},
    "dazzler-master/tests/components/pages/checkbox.py": {},
    "dazzler-master/tests/components/pages/checklist.py": {},
    "dazzler-master/tests/components/pages/color_picker.py": {},
    "dazzler-master/tests/components/pages/common_styles.py": {},
    "dazzler-master/tests/components/pages/datalist.py": {},
    "dazzler-master/tests/components/pages/dropdown.py": {},
    "dazzler-master/tests/components/pages/extras.py": {},
    "dazzler-master/tests/components/pages/form.py": {},
    "dazzler-master/tests/components/pages/graphs.py": {},
    "dazzler-master/tests/components/pages/grid.py": {},
    "dazzler-master/tests/components/pages/html.py": {},
    "dazzler-master/tests/components/pages/html2.py": {},
    "dazzler-master/tests/components/pages/icons.py": {},
    "dazzler-master/tests/components/pages/input_output.py": {},
    "dazzler-master/tests/components/pages/interval.py": {},
    "dazzler-master/tests/components/pages/link.py": {},
    "dazzler-master/tests/components/pages/list_box.py": {},
    "dazzler-master/tests/components/pages/login.py": {},
    "dazzler-master/tests/components/pages/markdown.py": {},
    "dazzler-master/tests/components/pages/modal.py": {},
    "dazzler-master/tests/components/pages/pager.py": {},
    "dazzler-master/tests/components/pages/page_map.py": {},
    "dazzler-master/tests/components/pages/panel.py": {},
    "dazzler-master/tests/components/pages/progress.py": {},
    "dazzler-master/tests/components/pages/radio.py": {},
    "dazzler-master/tests/components/pages/select.py": {},
    "dazzler-master/tests/components/pages/slider.py": {},
    "dazzler-master/tests/components/pages/statics.py": {},
    "dazzler-master/tests/components/pages/store.py": {},
    "dazzler-master/tests/components/pages/switch.py": {},
    "dazzler-master/tests/components/pages/table.py": {},
    "dazzler-master/tests/components/pages/text.py": {},
    "dazzler-master/tests/components/pages/textarea.py": {},
    "dazzler-master/tests/components/pages/treeview.py": {},
    "dazzler-master/tests/components/pages/ts.py": {},
    "dazzler-master/tests/components/pages/viewport.py": {},
    "dazzler-master/tests/components/pages/__init__.py": {},
    "dazzler-master/tests/components/spec_components/__init__.py": {},
    "dazzler-master/tests/components/ts_components/__init__.py": {},
    "dazzler-master/tests/electron/electron_app.py": {},
    "dazzler-master/tests/electron/test_electron.py": {
        "test_publish_config": {
            "name": "test_publish_config",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Dict[str, Any]"
                ],
                "provider_config": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "dazzler-master/tests/electron/__init__.py": {},
    "dazzler-master/tests/hot_reload/hot_reload_app.py": {},
    "dazzler-master/tests/hot_reload/hot_reload_page.py": {},
    "dazzler-master/tests/hot_reload/test_hot_reload.py": {
        "write_file": {
            "name": "write_file",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "content": [
                    "str",
                    "BinaryIO",
                    "Callable[[str], None]",
                    "bytes"
                ]
            }
        },
        "reload_app": {
            "name": "reload_app",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "int"
                ]
            }
        },
        "reloader": {
            "name": "reloader",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "reload_app": [
                    "Callable",
                    "Optional[\"Game\"]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "dazzler-master/tests/hot_reload/__init__.py": {}
}
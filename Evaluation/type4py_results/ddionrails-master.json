{
    "ddionrails-master/manage.py": {},
    "ddionrails-master/pavement.py": {
        "docu": {
            "name": "docu",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "full_docu": {
            "name": "full_docu",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "django_setup": {
            "name": "django_setup",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_admin": {
            "name": "create_admin",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "reset_migrations": {
            "name": "reset_migrations",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "erd": {
            "name": "erd",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "migrate": {
            "name": "migrate",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "functional_test": {
            "name": "functional_test",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ddionrails-master/config/helpers.py": {
        "render_markdown": {
            "name": "render_markdown",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "markdown_text": [
                    "str",
                    "int"
                ]
            }
        },
        "lower_dict_names": {
            "name": "lower_dict_names",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "dictionary": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Mapping[str, str]"
                ]
            }
        },
        "parse_env_variable_dict": {
            "name": "parse_env_variable_dict",
            "location": 53,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "env_variable": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Mapping[str, str]",
                    "List[str]"
                ]
            }
        },
        "RowHelper.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number_of_rows": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "RowHelper.row": {
            "name": "row",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowHelper.reset": {
            "name": "reset",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/config/urls.py": {
        "StudyConverter.to_python": {
            "name": "to_python",
            "location": 43,
            "return": [
                "str",
                "Optional[float]",
                "float",
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Tuple[float]",
                    "float"
                ]
            }
        },
        "StudyConverter.to_url": {
            "name": "to_url",
            "location": 48,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[str, int]",
                    "T",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "ddionrails-master/config/validators.py": {
        "validate_lowercase": {
            "name": "validate_lowercase",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[List[str]]"
                ]
            }
        }
    },
    "ddionrails-master/config/views.py": {
        "bad_request": {
            "name": "bad_request",
            "location": 18,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Set[str]"
                ],
                "exception": [
                    "dict"
                ]
            }
        },
        "permission_denied": {
            "name": "permission_denied",
            "location": 26,
            "return": [
                "dict",
                "List[Tuple[str, str, int]]",
                "bool",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "str",
                "Mapping[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "django.http.requesHttpRequest",
                    "Dict[str, Any]"
                ],
                "exception": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "list",
                    "bool"
                ]
            }
        },
        "page_not_found": {
            "name": "page_not_found",
            "location": 34,
            "return": [
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Set[str]",
                    "django.http.requesHttpRequest"
                ],
                "exception": [
                    "dict",
                    "str",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "server_error": {
            "name": "server_error",
            "location": 41,
            "return": [
                "bytes",
                "dict",
                "str",
                "Sequence"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "Iterable[int]"
                ]
            }
        },
        "HomePageView.get_context_data": {
            "name": "get_context_data",
            "location": 53,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HomePageView.news": {
            "name": "news",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HomePageView._format_news": {
            "name": "_format_news",
            "location": 73,
            "return": [
                "Iterable[int]",
                "int",
                "Callable",
                "core.models.Recipe",
                "str"
            ],
            "arguments": {
                "news": [
                    "int",
                    "float",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "ddionrails-master/config/wsgi.py": {},
    "ddionrails-master/config/__init__.py": {},
    "ddionrails-master/config/settings/base.py": {},
    "ddionrails-master/config/settings/development.py": {},
    "ddionrails-master/config/settings/production.py": {},
    "ddionrails-master/config/settings/testing.py": {},
    "ddionrails-master/ddionrails/__init__.py": {},
    "ddionrails-master/ddionrails/api/related_fields.py": {
        "UserRelatedField.get_queryset": {
            "name": "get_queryset",
            "location": 18,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "bool",
                "Callable",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/api/serializers.py": {},
    "ddionrails-master/ddionrails/api/urls.py": {},
    "ddionrails-master/ddionrails/api/__init__.py": {},
    "ddionrails-master/ddionrails/api/views/datasets.py": {
        "StatisticsMetadataViewSet.list": {
            "name": "list",
            "location": 35,
            "return": [
                "Response",
                "flask.Response",
                "dict",
                "Tuple[bytes, bytes]",
                "int",
                "str",
                "Dict[str, object]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "StatisticViewSet.list": {
            "name": "list",
            "location": 53,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "http.MITMRequest",
                    "django.http.HttpRequest",
                    "metaswitch_tinder.database.models.Request"
                ]
            }
        },
        "VariableViewSet.list": {
            "name": "list",
            "location": 84,
            "return": [
                "str",
                "bool",
                "flask.Response",
                "Dict[int, Optional[int]]",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "requests.Request",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "VariableViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 87,
            "return": [
                "str",
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetViewSet.list": {
            "name": "list",
            "location": 149,
            "return": [
                "str",
                "bool",
                "flask.Response",
                "Dict[int, Optional[int]]",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "requests.Request",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "DatasetViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 152,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/api/views/instruments.py": {
        "QuestionComparisonViewSet.list": {
            "name": "list",
            "location": 33,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "dict",
                "int",
                "raiden.utils.BlockTimeout"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "http.MITMRequest",
                    "starlette.requests.Request",
                    "Dict[str, Any]",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "InstrumentViewSet.list": {
            "name": "list",
            "location": 89,
            "return": [
                "str",
                "bool",
                "flask.Response",
                "Dict[int, Optional[int]]",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "requests.Request",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "InstrumentViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 92,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 114,
            "return": [
                "str",
                "Tuple[float, float]",
                "recidiviz.utils.regions.Region",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/api/views/studies.py": {
        "TopicTreeViewSet.list": {
            "name": "list",
            "location": 21,
            "return": [
                "werkzeug.wrappers.Response",
                "bytes",
                "http_server.requests.Request",
                "models.Base",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/api/views/user_tools.py": {
        "BasketViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasketViewSet.create": {
            "name": "create",
            "location": 62,
            "return": [
                "int",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "Request",
                    "aiohttp.web.Request",
                    "requests.Request"
                ]
            }
        },
        "IsBasketOwner.has_permission": {
            "name": "has_permission",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "_models.Request",
                    "django.http.HttpRequest"
                ],
                "_": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "_models.Request",
                    "aiohttp.web.Request"
                ]
            }
        },
        "IsBasketOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "bytes",
                    "preacher.core.verification.ResponseDescription",
                    "django.http.HttpResponse",
                    "purplship.core.utils.xml.Element"
                ],
                "_": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "aiohttp.web.Request",
                    "_models.Request",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "obj": [
                    "core.models.Recipe",
                    "User",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "dict",
                    "viewer.models.Archive",
                    "aiohttp.web.Request"
                ]
            }
        },
        "BasketVariableSet._basket_limit_error_message": {
            "name": "_basket_limit_error_message",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "basket_size": [
                    "int",
                    "str",
                    "dict",
                    "List[list]",
                    "float"
                ],
                "variables": [
                    "int",
                    "str",
                    "dict",
                    "List[list]",
                    "float"
                ]
            }
        },
        "BasketVariableSet.basket_limit": {
            "name": "basket_limit",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasketVariableSet.get_queryset": {
            "name": "get_queryset",
            "location": 145,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasketVariableSet.create": {
            "name": "create",
            "location": 161,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "bool",
                "int",
                "metaswitch_tinder.database.Request"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "dict",
                    "django.http.HttpRequest",
                    "fausweb.Request"
                ]
            }
        },
        "BasketVariableSet._test_exclusivity": {
            "name": "_test_exclusivity",
            "location": 220,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[bool]",
                    "bool",
                    "str",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "SendFeedback.get_permissions": {
            "name": "get_permissions",
            "location": 244,
            "return": [
                "str",
                "Optional[str]",
                "topicdb.core.models.language.Language",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendFeedback.get_queryset": {
            "name": "get_queryset",
            "location": 251,
            "return": [
                "bool",
                "Type",
                "Callable[..., Awaitable]"
            ],
            "arguments": {}
        },
        "SendFeedback.post": {
            "name": "post",
            "location": 255,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/api/views/__init__.py": {},
    "ddionrails-master/ddionrails/base/admin.py": {},
    "ddionrails-master/ddionrails/base/generic_documents.py": {
        "GenericDocument.prepare_study_name": {
            "name": "prepare_study_name",
            "location": 39,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "str",
                    "salon.models.Stylist",
                    "Dict[str, Any]"
                ]
            }
        },
        "GenericDocument.prepare_study": {
            "name": "prepare_study",
            "location": 44,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "model_object": [
                    "int",
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        },
        "GenericDocument._get_study": {
            "name": "_get_study",
            "location": 55,
            "return": [
                "ddionrails.studies.models.Study"
            ],
            "arguments": {
                "model_object": [
                    "int",
                    "bool",
                    "str",
                    "models.Model",
                    "Optional[Any]",
                    "IO"
                ]
            }
        },
        "GenericDocument._handle_missing_content": {
            "name": "_handle_missing_content",
            "location": 59,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]",
                "bytes"
            ],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "GenericDataDocument._get_study": {
            "name": "_get_study",
            "location": 82,
            "return": [
                "ddionrails.studies.models.Study"
            ],
            "arguments": {
                "model_object": [
                    "int",
                    "bool",
                    "str",
                    "models.Model",
                    "Optional[Any]",
                    "IO"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/base/mixins.py": {
        "ModelMixin.get": {
            "name": "get",
            "location": 60,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "parameters": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Optional]"
                ]
            }
        },
        "ModelMixin.default_form": {
            "name": "default_form",
            "location": 74,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "dict",
                    "str"
                ]
            }
        },
        "ModelMixin.to_dict": {
            "name": "to_dict",
            "location": 86,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMixin.set_language": {
            "name": "set_language",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "bool",
                    "float"
                ]
            }
        },
        "ModelMixin.title": {
            "name": "title",
            "location": 106,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMixin.html_description": {
            "name": "html_description",
            "location": 118,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminMixin.study_name": {
            "name": "study_name",
            "location": 134,
            "return": [
                "str",
                "Optional[str]",
                "Type[Any]",
                "Optional[Pattern]"
            ],
            "arguments": {
                "obj": [
                    "Mapping"
                ]
            }
        },
        "AdminMixin.period_name": {
            "name": "period_name",
            "location": 142,
            "return": [
                "str",
                "Optional[str]",
                "Type[Any]",
                "Optional[Pattern]"
            ],
            "arguments": {
                "obj": [
                    "type",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "AdminMixin.analysis_unit_name": {
            "name": "analysis_unit_name",
            "location": 150,
            "return": [
                "Optional[BaseException]",
                "Type[Any]",
                "Optional[Dict]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "AdminMixin.dataset_name": {
            "name": "dataset_name",
            "location": 158,
            "return": [
                "str",
                "Optional[str]",
                "Type[Any]",
                "Optional[Pattern]"
            ],
            "arguments": {
                "obj": [
                    "Mapping"
                ]
            }
        },
        "AdminMixin.dataset_study_name": {
            "name": "dataset_study_name",
            "location": 166,
            "return": [
                "Optional[BaseException]",
                "Type[Any]",
                "Optional[Dict]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "AdminMixin.instrument_name": {
            "name": "instrument_name",
            "location": 174,
            "return": [
                "str",
                "Optional[str]",
                "Type[Any]",
                "Optional[Pattern]"
            ],
            "arguments": {
                "obj": [
                    "Mapping"
                ]
            }
        },
        "AdminMixin.instrument_study_name": {
            "name": "instrument_study_name",
            "location": 182,
            "return": [
                "Optional[BaseException]",
                "Type[Any]",
                "Optional[Dict]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "AdminMixin.basket_name": {
            "name": "basket_name",
            "location": 190,
            "return": [
                "str",
                "Optional[str]",
                "Type[Any]",
                "Optional[Pattern]"
            ],
            "arguments": {
                "obj": [
                    "Mapping"
                ]
            }
        },
        "AdminMixin.basket_study_name": {
            "name": "basket_study_name",
            "location": 198,
            "return": [
                "Optional[BaseException]",
                "Type[Any]",
                "Optional[Dict]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "AdminMixin.user_name": {
            "name": "user_name",
            "location": 206,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/base/models.py": {
        "Singleton.save": {
            "name": "save",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "System.repo_url": {
            "name": "repo_url",
            "location": 42,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "System.get": {
            "name": "get",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/base/views.py": {
        "imprint": {
            "name": "imprint",
            "location": 6,
            "return": [
                "robot_server.service.legacy.models.settings.PipetteSettings",
                "dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "Dict[str, str]"
                ],
                "template_name": [
                    "str",
                    "django.http.HttpRequest",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/base/__init__.py": {},
    "ddionrails-master/ddionrails/base/helpers/ddionrails_typing.py": {},
    "ddionrails-master/ddionrails/base/helpers/__init__.py": {},
    "ddionrails-master/ddionrails/base/migrations/0001_initial.py": {},
    "ddionrails-master/ddionrails/base/migrations/0002_news.py": {},
    "ddionrails-master/ddionrails/base/migrations/0003_auto_20200226_1152.py": {},
    "ddionrails-master/ddionrails/base/migrations/0004_auto_20210624_0828.py": {},
    "ddionrails-master/ddionrails/base/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/base/templatetags/metadata_display.py": {
        "markdown_string": {
            "name": "markdown_string",
            "location": 11,
            "return": [
                "str",
                "Type[T]",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/base/templatetags/__init__.py": {},
    "ddionrails-master/ddionrails/concepts/admin.py": {},
    "ddionrails-master/ddionrails/concepts/documents.py": {
        "ConceptDocument.prepare_study_name": {
            "name": "prepare_study_name",
            "location": 48,
            "return": [],
            "arguments": {
                "model_object": []
            }
        },
        "ConceptDocument.get_queryset": {
            "name": "get_queryset",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TopicDocument.prepare_study_name": {
            "name": "prepare_study_name",
            "location": 77,
            "return": [],
            "arguments": {
                "model_object": []
            }
        },
        "TopicDocument._get_study": {
            "name": "_get_study",
            "location": 82,
            "return": [],
            "arguments": {
                "model_object": []
            }
        },
        "TopicDocument.get_queryset": {
            "name": "get_queryset",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/concepts/forms.py": {
        "TopicForm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConceptForm.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodForm.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisUnitForm.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConceptualDatasetForm.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/concepts/imports.py": {
        "TopicImport.import_element": {
            "name": "import_element",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Union[Dict, Tuple]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "TopicJsonImport.execute_import": {
            "name": "execute_import",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicJsonImport._import_topic_list": {
            "name": "_import_topic_list",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConceptImport.execute_import": {
            "name": "execute_import",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConceptImport.import_element": {
            "name": "import_element",
            "location": 71,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bool",
                    "str"
                ]
            }
        },
        "AnalysisUnitImport.process_element": {
            "name": "process_element",
            "location": 99,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PeriodImport.process_element": {
            "name": "process_element",
            "location": 108,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConceptualDatasetImport.process_element": {
            "name": "process_element",
            "location": 117,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/concepts/models.py": {
        "Topic.save": {
            "name": "save",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Topic.get_children": {
            "name": "get_children",
            "location": 106,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "topic_id": [
                    "int",
                    "shop.transfer.models.ShopID",
                    "str"
                ]
            }
        },
        "Topic.get_topic_tree_leaves": {
            "name": "get_topic_tree_leaves",
            "location": 113,
            "return": [
                "Optional[str]",
                "Optional[bytes]",
                "bool",
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concept.__str__": {
            "name": "__str__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concept.save": {
            "name": "save",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Concept.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Period.save": {
            "name": "save",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "AnalysisUnit.__str__": {
            "name": "__str__",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisUnit.save": {
            "name": "save",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "ConceptualDataset.__str__": {
            "name": "__str__",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConceptualDataset.save": {
            "name": "save",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/concepts/urls.py": {},
    "ddionrails-master/ddionrails/concepts/views.py": {
        "concept_list": {
            "name": "concept_list",
            "location": 15,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "ConceptDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/concepts/__init__.py": {},
    "ddionrails-master/ddionrails/concepts/migrations/0001_initial.py": {},
    "ddionrails-master/ddionrails/concepts/migrations/0002_auto_20201016_0842.py": {},
    "ddionrails-master/ddionrails/concepts/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/data/admin.py": {},
    "ddionrails-master/ddionrails/data/documents.py": {
        "VariableDocument._get_study": {
            "name": "_get_study",
            "location": 58,
            "return": [],
            "arguments": {
                "model_object": []
            }
        },
        "VariableDocument.prepare_analysis_unit": {
            "name": "prepare_analysis_unit",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "VariableDocument.prepare_categories": {
            "name": "prepare_categories",
            "location": 67,
            "return": [],
            "arguments": {
                "variable": []
            }
        },
        "VariableDocument.prepare_conceptual_dataset": {
            "name": "prepare_conceptual_dataset",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "VariableDocument.prepare_period": {
            "name": "prepare_period",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "VariableDocument.get_queryset": {
            "name": "get_queryset",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/data/forms.py": {
        "DatasetForm.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableForm.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/data/helpers.py": {
        "LabelTable.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "dict"
                ]
            }
        },
        "LabelTable.render_table": {
            "name": "render_table",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTable.to_dict": {
            "name": "to_dict",
            "location": 59,
            "return": [
                "List[str]",
                "Tuple[int, int]",
                "Optional[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTable.to_html": {
            "name": "to_html",
            "location": 68,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTable._fill_header": {
            "name": "_fill_header",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table": [
                    "List[str]",
                    "Callable[[], T]",
                    "int",
                    "list"
                ]
            }
        },
        "LabelTable._fill_body": {
            "name": "_fill_body",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "LabelTable._get_all_category_labels": {
            "name": "_get_all_category_labels",
            "location": 132,
            "return": [
                "Dict[str, str]",
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTable._simplify_label": {
            "name": "_simplify_label",
            "location": 171,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Tuple[float, float]]",
                    "List[int]"
                ]
            }
        },
        "LabelTable.__init__.sort_helper": {
            "name": "sort_helper",
            "location": 33,
            "return": [],
            "arguments": {
                "variable": []
            }
        },
        "LabelTable._get_all_category_labels.sort_helper": {
            "name": "sort_helper",
            "location": 141,
            "return": [
                "Tuple[int]",
                "List[int]",
                "float",
                "str",
                "List[List[Any]]",
                "Mapping[str, Any]",
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "elements": [
                    "Sequence[T]",
                    "tuple",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/data/imports.py": {
        "variables_images_import": {
            "name": "variables_images_import",
            "location": 213,
            "return": [
                "Iterator[Tuple[str, str]]",
                "app.models.Article",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "file": [
                    "IO[str]",
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "study": [
                    "str",
                    "dict",
                    "pathlib.Path",
                    "Dict[str, dict]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "DatasetJsonImport.execute_import": {
            "name": "execute_import",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetJsonImport._import_dataset": {
            "name": "_import_dataset",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "content": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "DatasetJsonImport._import_variable": {
            "name": "_import_variable",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "var": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "dataset": [
                    "str",
                    "bool",
                    "core_lib.core.models.Venue"
                ],
                "sort_id": [
                    "str",
                    "Optional[str]",
                    "Union['KspNativeControl', int]"
                ]
            }
        },
        "DatasetImport.import_element": {
            "name": "import_element",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "dict",
                    "OrderedDict",
                    "Dict[int, Dict[str, Any]]",
                    "list",
                    "Dict[str, float]"
                ]
            }
        },
        "DatasetImport._import_dataset_links": {
            "name": "_import_dataset_links",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Hashable",
                    "dict"
                ]
            }
        },
        "VariableImport.import_element": {
            "name": "import_element",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "VariableImport.execute_import": {
            "name": "execute_import",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableImport._import_variable": {
            "name": "_import_variable",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, Any]",
                    "Type",
                    "dict"
                ]
            }
        },
        "TransformationImport.execute_import": {
            "name": "execute_import",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformationImport.import_element": {
            "name": "import_element",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "bool",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "TransformationImport._get_origin_and_target": {
            "name": "_get_origin_and_target",
            "location": 168,
            "return": [
                "BaseException",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict]",
                    "Callable",
                    "type",
                    "str",
                    "dict",
                    "IO[bytes]"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict",
                    "str"
                ]
            }
        },
        "TransformationImport._get_variable": {
            "name": "_get_variable",
            "location": 199,
            "return": [
                "str",
                "\"VersionedAnalyzer\"",
                "Set[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "study": [
                    "str",
                    "django.db.models.Model",
                    "Type",
                    "Dict[str, Any]",
                    "Exception",
                    "deeplearning.deepsmith.db.session_t"
                ],
                "dataset": [
                    "str",
                    "django.db.models.Model",
                    "Type",
                    "Dict[str, Any]",
                    "Exception",
                    "deeplearning.deepsmith.db.session_t"
                ],
                "name": [
                    "str",
                    "django.db.models.Model",
                    "Type",
                    "Dict[str, Any]",
                    "Exception",
                    "deeplearning.deepsmith.db.session_t"
                ],
                "_type": [
                    "str",
                    "django.db.models.Model",
                    "Optional[str]",
                    "Any",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/data/urls.py": {
        "DatasetConverter.to_python": {
            "name": "to_python",
            "location": 20,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "DatasetConverter.to_url": {
            "name": "to_url",
            "location": 25,
            "return": [
                "str",
                "int",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "value": [
                    "List[str]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Union[bool, str, None]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/data/views.py": {
        "AllStudyDatasetsView.get_context_data": {
            "name": "get_context_data",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDetailView.get_object": {
            "name": "get_object",
            "location": 51,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "DatasetDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 77,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 87,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 96,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDetailView.get_object": {
            "name": "get_object",
            "location": 120,
            "return": [
                "bool",
                "str",
                "zam_repondeur.models.Lecture",
                "OrderedDict",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "VariableDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 135,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDetailView._sort_variable_data": {
            "name": "_sort_variable_data",
            "location": 203,
            "return": [
                "dict",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/data/__init__.py": {},
    "ddionrails-master/ddionrails/data/migrations/0001_squashed.py": {},
    "ddionrails-master/ddionrails/data/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/data/models/dataset.py": {
        "Dataset.save": {
            "name": "save",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Dataset.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 116,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_direct_url": {
            "name": "get_direct_url",
            "location": 123,
            "return": [
                "salon.models.Stylist",
                "Iterable[str]",
                "Callable",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/data/models/transformation.py": {},
    "ddionrails-master/ddionrails/data/models/variable.py": {
        "Variable.save": {
            "name": "save",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ]
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.get_direct_url": {
            "name": "get_direct_url",
            "location": 195,
            "return": [
                "Callable[..., None]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.get": {
            "name": "get",
            "location": 200,
            "return": [
                "bool",
                "str",
                "zam_repondeur.models.Lecture",
                "OrderedDict",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Type",
                    "Union[dict, list]",
                    "str",
                    "dict",
                    "type",
                    "Exception",
                    "bool"
                ],
                "parameters": [
                    "int",
                    "dict"
                ]
            }
        },
        "Variable.get_by_concept_id": {
            "name": "get_by_concept_id",
            "location": 207,
            "return": [
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "transfer.models.ListID",
                    "str"
                ],
                "concept_id": [
                    "int",
                    "Optional[str]",
                    "transfer.models.ListID",
                    "str"
                ]
            }
        },
        "Variable.html_description": {
            "name": "html_description",
            "location": 211,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.category_list": {
            "name": "category_list",
            "location": 216,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable._sort_categories": {
            "name": "_sort_categories",
            "location": 241,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "categories": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Variable.get_study": {
            "name": "get_study",
            "location": 255,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "study_id": [
                    "int",
                    "str",
                    "bool",
                    "uuid.UUID"
                ]
            }
        },
        "Variable.get_concept": {
            "name": "get_concept",
            "location": 261,
            "return": [
                "bool",
                "str",
                "int",
                "type",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "str",
                    "list",
                    "Callable[[], None]",
                    "uuid.UUID",
                    "esm.models.LastOperation"
                ],
                "concept_id": [
                    "bool",
                    "str",
                    "list",
                    "Callable[[], None]",
                    "uuid.UUID",
                    "esm.models.LastOperation"
                ]
            }
        },
        "Variable.get_related_variables": {
            "name": "get_related_variables",
            "location": 269,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.get_related_variables_by_period": {
            "name": "get_related_variables_by_period",
            "location": 285,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable._period_model_to_name_dict": {
            "name": "_period_model_to_name_dict",
            "location": 302,
            "return": [
                "List[str]",
                "Mapping[str, \"dataclasses.Field[Any]\"]",
                "Set[str]",
                "Dict[str, float]"
            ],
            "arguments": {
                "instances": [
                    "Optional[BaseException]",
                    "bool",
                    "leagues.models.League",
                    "Optional[str]"
                ]
            }
        },
        "Variable._sort_related_variable_by_period": {
            "name": "_sort_related_variable_by_period",
            "location": 305,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "models.Variable",
                    "Callable",
                    "str"
                ]
            }
        },
        "Variable.target_variables_dict": {
            "name": "target_variables_dict",
            "location": 321,
            "return": [
                "bool",
                "tuple",
                "mtg_ssm.scryfall.models.ScryObject",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.origin_variables_dict": {
            "name": "origin_variables_dict",
            "location": 338,
            "return": [
                "bool",
                "tuple",
                "mtg_ssm.scryfall.models.ScryObject",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.has_translations": {
            "name": "has_translations",
            "location": 355,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.translation_languages": {
            "name": "translation_languages",
            "location": 359,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.translation_table": {
            "name": "translation_table",
            "location": 370,
            "return": [
                "float",
                "str",
                "type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.is_categorical": {
            "name": "is_categorical",
            "location": 386,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.content_dict": {
            "name": "content_dict",
            "location": 394,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Union[str, Set]]",
                "dict",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.to_topic_dict": {
            "name": "to_topic_dict",
            "location": 405,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "Variable.__lt__": {
            "name": "__lt__",
            "location": 425,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Callable"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/data/models/__init__.py": {},
    "ddionrails-master/ddionrails/imports/helpers.py": {
        "read_csv": {
            "name": "read_csv",
            "location": 13,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "hash_with_base_uuid": {
            "name": "hash_with_base_uuid",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Dict[int, dict]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "cache": [
                    "bool",
                    "str"
                ]
            }
        },
        "_hash_with_base_uuid": {
            "name": "_hash_with_base_uuid",
            "location": 32,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "hash_with_namespace_uuid": {
            "name": "hash_with_namespace_uuid",
            "location": 37,
            "return": [
                "int",
                "str",
                "bytearray"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "uuid.UUID",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "uuid.UUID",
                    "Optional[str]"
                ],
                "cache": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_hash_with_namespace_uuid": {
            "name": "_hash_with_namespace_uuid",
            "location": 50,
            "return": [
                "str",
                "int",
                "List[Callable]",
                "type",
                "bool"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "uuid.UUID",
                    "int"
                ],
                "name": [
                    "str",
                    "uuid.UUID",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/imports/imports.py": {
        "Import.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "study": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "system": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Import.execute_import": {
            "name": "execute_import",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Import.run_import": {
            "name": "run_import",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "list",
                    "int",
                    "Union[int, float]"
                ],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "list",
                    "int",
                    "Union[int, float]"
                ],
                "study": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "list",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "Import.read_file": {
            "name": "read_file",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Import.file_path": {
            "name": "file_path",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JekyllImport.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "study": [
                    "str",
                    "Optional[int]"
                ],
                "system": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "JekyllImport.read_file": {
            "name": "read_file",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JekyllImport.execute_import": {
            "name": "execute_import",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVImport.read_file": {
            "name": "read_file",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVImport.execute_import": {
            "name": "execute_import",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVImport.import_element": {
            "name": "import_element",
            "location": 103,
            "return": [
                "Optional[int]",
                "Callable",
                "Optional[T]",
                "str",
                "T",
                "List[str]",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "dict"
                ]
            }
        },
        "CSVImport.process_element": {
            "name": "process_element",
            "location": 126,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/imports/manager.py": {
        "system_import_manager": {
            "name": "system_import_manager",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "system": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Repository.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_or_system": [
                    "models.Credentials",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "Repository.set_branch": {
            "name": "set_branch",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "bool",
                    "float"
                ]
            }
        },
        "Repository.pull_or_clone": {
            "name": "pull_or_clone",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.set_commit_id": {
            "name": "set_commit_id",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.is_import_required": {
            "name": "is_import_required",
            "location": 85,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.list_changed_files": {
            "name": "list_changed_files",
            "location": 89,
            "return": [
                "int",
                "str",
                "Union[Dict, List]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.list_all_files": {
            "name": "list_all_files",
            "location": 99,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.import_list": {
            "name": "import_list",
            "location": 113,
            "return": [
                "List[str]",
                "\"RequirementsFile\"",
                "list",
                "bool",
                "str",
                "Dict[str, Set[str]]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "import_all": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "StudyImportManager.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str",
                    "dict",
                    "int",
                    "pathlib.Path"
                ],
                "redis": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "StudyImportManager.fix_concepts_csv": {
            "name": "fix_concepts_csv",
            "location": 213,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudyImportManager.update_repo": {
            "name": "update_repo",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StudyImportManager._execute": {
            "name": "_execute",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "import_function": [
                    "Callable",
                    "str"
                ]
            }
        },
        "StudyImportManager.import_single_entity": {
            "name": "import_single_entity",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ],
                "filename": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "StudyImportManager.__log_import_start": {
            "name": "__log_import_start",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger",
                    "pathlib.Path",
                    "List[Exception]",
                    "Optional[str]"
                ]
            }
        },
        "StudyImportManager.__log_import_fail": {
            "name": "__log_import_fail",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "logging.Logger",
                    "List[str]",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "StudyImportManager.import_all_entities": {
            "name": "import_all_entities",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/imports/types.py": {},
    "ddionrails-master/ddionrails/imports/__init__.py": {},
    "ddionrails-master/ddionrails/imports/management/__init__.py": {},
    "ddionrails-master/ddionrails/imports/management/commands/add.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.log_success": {
            "name": "log_success",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "Command.log_error": {
            "name": "log_error",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/imports/management/commands/remove.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.log_success": {
            "name": "log_success",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "Command.log_error": {
            "name": "log_error",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "Command.log_warning": {
            "name": "log_warning",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "Command.summary": {
            "name": "summary",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study": []
            }
        },
        "Command.remove_from_database": {
            "name": "remove_from_database",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Pattern",
                    "Exception"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/imports/management/commands/system.py": {
        "Command.handle": {
            "name": "handle",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/imports/management/commands/update.py": {
        "update_study_partial": {
            "name": "update_study_partial",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "manager": [
                    "ddionrails.imports.manager.StudyImportManager",
                    "Optional[str]",
                    "int",
                    "T",
                    "List[src.autoks.core.gp_model.GPModel]",
                    "List[str]"
                ],
                "entity": [
                    "tuple",
                    "str",
                    "Sequence[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "update_single_study": {
            "name": "update_single_study",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "study": [
                    "ddionrails.studies.models.Study",
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Callable[..., Any]]"
                ],
                "local": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[int]",
                    "int",
                    "Optional[bool]"
                ],
                "entity": [
                    "tuple",
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "clean_import": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[int]",
                    "int",
                    "Optional[bool]"
                ],
                "manager": [
                    "ddionrails.imports.manager.StudyImportManager",
                    "bool",
                    "zerver.models.Realm",
                    "str",
                    "Optional[bool]",
                    "dict"
                ]
            }
        },
        "update_all_studies_completely": {
            "name": "update_all_studies_completely",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [
                    "bool",
                    "str",
                    "int"
                ],
                "clean_import": [
                    "bool",
                    "str",
                    "int"
                ],
                "redis": [
                    "Callable[[List, bool], None]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 31,
            "return": [
                "Optional[str]",
                "bool",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.log_success": {
            "name": "log_success",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "Command.log_error": {
            "name": "log_error",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/imports/management/commands/__init__.py": {},
    "ddionrails-master/ddionrails/instruments/admin.py": {
        "QuestionAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 49,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/documents.py": {
        "QuestionDocument._get_study": {
            "name": "_get_study",
            "location": 48,
            "return": [],
            "arguments": {
                "model_object": []
            }
        },
        "QuestionDocument.prepare_analysis_unit": {
            "name": "prepare_analysis_unit",
            "location": 54,
            "return": [],
            "arguments": {
                "question": []
            }
        },
        "QuestionDocument.prepare_period": {
            "name": "prepare_period",
            "location": 62,
            "return": [],
            "arguments": {
                "question": []
            }
        },
        "QuestionDocument.prepare_items": {
            "name": "prepare_items",
            "location": 70,
            "return": [],
            "arguments": {
                "question": []
            }
        },
        "QuestionDocument.get_queryset": {
            "name": "get_queryset",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/urls.py": {},
    "ddionrails-master/ddionrails/instruments/views.py": {
        "question_detail": {
            "name": "question_detail",
            "location": 91,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "medtagger.database.models.Task"
                ],
                "study": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[dict]"
                ],
                "instrument_name": [
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]"
                ],
                "question_name": [
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_question_item_metadata": {
            "name": "get_question_item_metadata",
            "location": 127,
            "return": [
                "str",
                "core.LazyNS",
                "Iterable[int]",
                "viewer.models.Archive"
            ],
            "arguments": {
                "question": [
                    "Iterable[allennlp.data.instance.Instance]",
                    "bool",
                    "bytes",
                    "Optional[list]",
                    "float"
                ],
                "short": [
                    "Optional[base.WhereSpec]",
                    "Optional[base.OrderSpec]",
                    "dict"
                ]
            }
        },
        "_serialize_blocks": {
            "name": "_serialize_blocks",
            "location": 149,
            "return": [
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "Mapping"
            ],
            "arguments": {
                "blocks": [
                    "Type[django.db.models.base.Model]",
                    "List[int]",
                    "Tuple[int, int]",
                    "Optional[str]"
                ],
                "short": [
                    "list",
                    "List[List]",
                    "List[List[T]]",
                    "type",
                    "List[int]"
                ]
            }
        },
        "_blocks_equal": {
            "name": "_blocks_equal",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "django.core.files.uploadedfile.UploadedFile",
                    "str",
                    "bool",
                    "zerver.models.UserMessage",
                    "int"
                ],
                "block_item": [
                    "django.core.files.uploadedfile.UploadedFile",
                    "str",
                    "bool",
                    "zerver.models.UserMessage",
                    "int"
                ]
            }
        },
        "_answers_equal": {
            "name": "_answers_equal",
            "location": 172,
            "return": [
                "List[str]",
                "str",
                "Optional[Type]",
                "List[Dict]",
                "List[type]",
                "List[Tuple]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[T]"
                ],
                "other_item": [
                    "str",
                    "List[T]"
                ]
            }
        },
        "InstrumentRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 28,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstrumentDetailView.get_object": {
            "name": "get_object",
            "location": 39,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "InstrumentDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllStudyInstrumentsView.get_context_data": {
            "name": "get_context_data",
            "location": 59,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 74,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 85,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/__init__.py": {},
    "ddionrails-master/ddionrails/instruments/imports/concept_question_import.py": {
        "ConceptQuestionImport.read_file": {
            "name": "read_file",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConceptQuestionImport.execute_import": {
            "name": "execute_import",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/imports/instrument_import.py": {
        "_get_instruments_with_questions": {
            "name": "_get_instruments_with_questions",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ]
            }
        },
        "instrument_import": {
            "name": "instrument_import",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "dict",
                    "pathlib.Path"
                ],
                "study": [
                    "str",
                    "Dict[Tuple[int, int], str]",
                    "x509_pki.models.Certificate",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "InstrumentImport.execute_import": {
            "name": "execute_import",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstrumentImport._import_instrument": {
            "name": "_import_instrument",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ],
                "content": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/imports/question_image_import.py": {
        "questions_images_import": {
            "name": "questions_images_import",
            "location": 13,
            "return": [
                "int",
                "Union[tuple, list]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "IO[str]",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "study": [
                    "str",
                    "Optional[object]",
                    "pathlib.Path",
                    "Dict[str, dict]",
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/imports/question_import.py": {
        "question_import": {
            "name": "question_import",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "study": [
                    "str",
                    "int",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "answer_import": {
            "name": "answer_import",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "List[str]",
                    "TextIO",
                    "AsyncGenerator",
                    "Coroutine"
                ],
                "study": [
                    "Sequence[pathlib.Path]",
                    "str",
                    "Iterable[pathlib.Path]",
                    "IO[str]"
                ]
            }
        },
        "answer_relation_import": {
            "name": "answer_relation_import",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]"
                ],
                "study": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "list"
                ]
            }
        },
        "_bulk_import_answers": {
            "name": "_bulk_import_answers",
            "location": 89,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "answers": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]",
                    "bool"
                ]
            }
        },
        "_read_answers": {
            "name": "_read_answers",
            "location": 120,
            "return": [
                "Optional[bool]",
                "str",
                "django.db.models.QuerySet",
                "List[str]",
                "Path"
            ],
            "arguments": {
                "file": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_group_question_items": {
            "name": "_group_question_items",
            "location": 144,
            "return": [
                "typing.Generator[None, typing.Dict[builtins.str, typing.Any], None]"
            ],
            "arguments": {
                "study": [
                    "models.transaction.EndorsedTX",
                    "str",
                    "int"
                ]
            }
        },
        "_question_id_matches_block_id": {
            "name": "_question_id_matches_block_id",
            "location": 167,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "question": [
                    "bool",
                    "float",
                    "int"
                ],
                "block": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "_import_question_block": {
            "name": "_import_question_block",
            "location": 176,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "block": [
                    "Type"
                ],
                "study": [
                    "Type[Any]"
                ]
            }
        },
        "_import_main_question": {
            "name": "_import_main_question",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "question": [
                    "str",
                    "bool",
                    "Type",
                    "db.models.Taxon",
                    "base.ConfigOptions"
                ],
                "metadata": [
                    "str",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "_import_question_items": {
            "name": "_import_question_items",
            "location": 194,
            "return": [
                "int",
                "bool",
                "List[int]",
                "float",
                "str"
            ],
            "arguments": {
                "question": [
                    "models.User",
                    "str",
                    "float"
                ],
                "items": [
                    "Iterable[T]",
                    "Sequence",
                    "dict",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "_field_mapper": {
            "name": "_field_mapper",
            "location": 212,
            "return": [
                "bool",
                "django.db.models.Q.uerySet",
                "str",
                "tuple",
                "Optional[app.models.User]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_answer": {
            "name": "_get_answer",
            "location": 224,
            "return": [
                "str",
                "django.db.models.QuerySet",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Union[str, None]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[uuid.UUID]"
                ],
                "label": [
                    "Optional[str]",
                    "Union[str, None]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[uuid.UUID]"
                ],
                "label_de": [
                    "Optional[str]",
                    "Union[str, None]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[uuid.UUID]"
                ]
            }
        },
        "_get_instrument": {
            "name": "_get_instrument",
            "location": 230,
            "return": [
                "str",
                "models.order.Order"
            ],
            "arguments": {
                "study": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/imports/question_variable_import.py": {
        "QuestionVariableImport.execute_import": {
            "name": "execute_import",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionVariableImport._import_link": {
            "name": "_import_link",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "Callable[..., Awaitable[Any]]",
                    "Dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]"
                ]
            }
        },
        "QuestionVariableImport._get_question": {
            "name": "_get_question",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "link": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "QuestionVariableImport._get_variable": {
            "name": "_get_variable",
            "location": 37,
            "return": [
                "str",
                "\"VersionedAnalyzer\"",
                "Set[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "link": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/imports/__init__.py": {},
    "ddionrails-master/ddionrails/instruments/migrations/0001_squashed.py": {},
    "ddionrails-master/ddionrails/instruments/migrations/0002_instrument_has_questions_instrument_mode_and_more.py": {},
    "ddionrails-master/ddionrails/instruments/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/instruments/models/answer.py": {
        "Answer.generate_id": {
            "name": "generate_id",
            "location": 20,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "List[Dict[str, Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.save": {
            "name": "save",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/models/concept_question.py": {},
    "ddionrails-master/ddionrails/instruments/models/instrument.py": {
        "Instrument.save": {
            "name": "save",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Instrument.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 129,
            "return": [
                "str",
                "bool",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrument.get_direct_url": {
            "name": "get_direct_url",
            "location": 136,
            "return": [
                "salon.models.Stylist",
                "Iterable[str]",
                "Callable",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/models/question.py": {
        "Question.generate_id": {
            "name": "generate_id",
            "location": 106,
            "return": [
                "str",
                "zerver.models.Realm",
                "Union[server.models.Bike, int]",
                "tracim.models.data.Workspace"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        },
        "Question.save": {
            "name": "save",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Question.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 132,
            "return": [
                "str",
                "bool",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_direct_url": {
            "name": "get_direct_url",
            "location": 146,
            "return": [
                "salon.models.Stylist",
                "Iterable[str]",
                "Callable",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.layout_class": {
            "name": "layout_class",
            "location": 154,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {}
        },
        "Question.previous_question": {
            "name": "previous_question",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.next_question": {
            "name": "next_question",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_related_questions": {
            "name": "get_related_questions",
            "location": 176,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_concepts": {
            "name": "get_concepts",
            "location": 197,
            "return": [
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.translation_languages": {
            "name": "translation_languages",
            "location": 205,
            "return": [
                "Dict[str, str]",
                "int",
                "str",
                "Dict[str, Any]",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.overwrite_item_values_by_language": {
            "name": "overwrite_item_values_by_language",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[int, List[Any]]"
                ],
                "language": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Question.to_topic_dict": {
            "name": "to_topic_dict",
            "location": 221,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "bytes",
                "Dict[str, models.DeviceRow]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "Question.html_description": {
            "name": "html_description",
            "location": 240,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.comparison_string": {
            "name": "comparison_string",
            "location": 244,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "to_string": [
                    "bool",
                    "str",
                    "Callable[[str, Any], None]"
                ],
                "wrap": [
                    "str",
                    "int",
                    "Dict[int, str]",
                    "bytes"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/models/question_item.py": {
        "QuestionItem.generate_id": {
            "name": "generate_id",
            "location": 121,
            "return": [
                "str",
                "grouper.models.base.session.Session",
                "int",
                "bool",
                "ocspdash.models.Responder"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "float",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "QuestionItem.save": {
            "name": "save",
            "location": 125,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease",
                    "raiden.utils.Address"
                ]
            }
        },
        "QuestionItem.to_dict": {
            "name": "to_dict",
            "location": 140,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "short": [
                    "bool",
                    "tuple",
                    "Iterable[str]",
                    "bytes",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "QuestionItem.delete": {
            "name": "delete",
            "location": 173,
            "return": [
                "int",
                "Optional[cmk.utils.type_defs.HostName]",
                "str"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "str",
                    "raiden.utils.TargetAddress",
                    "bool",
                    "Callable",
                    "Optional[TextIO]",
                    "int"
                ],
                "keep_parents": [
                    "str",
                    "raiden.utils.TargetAddress",
                    "bool",
                    "Callable",
                    "Optional[TextIO]",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/instruments/models/question_variable.py": {},
    "ddionrails-master/ddionrails/instruments/models/__init__.py": {},
    "ddionrails-master/ddionrails/publications/admin.py": {},
    "ddionrails-master/ddionrails/publications/documents.py": {
        "PublicationDocument.prepare_description": {
            "name": "prepare_description",
            "location": 37,
            "return": [],
            "arguments": {
                "publication": []
            }
        },
        "PublicationDocument._get_study": {
            "name": "_get_study",
            "location": 42,
            "return": [],
            "arguments": {
                "model_object": []
            }
        },
        "PublicationDocument.get_queryset": {
            "name": "get_queryset",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/publications/forms.py": {
        "PublicationForm.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/publications/imports.py": {
        "PublicationImport.process_element": {
            "name": "process_element",
            "location": 24,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Model",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Dict[str, Any]",
                    "pydcop.dcop.objects.Variable"
                ]
            }
        },
        "AttachmentImport.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachmentImport.execute_import": {
            "name": "execute_import",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachmentImport.import_element": {
            "name": "import_element",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, Optional[Any]]",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "AttachmentImport._process_field_names": {
            "name": "_process_field_names",
            "location": 68,
            "return": [
                "str",
                "Dict[str, Any]",
                "Container[str]",
                "int",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "dictionairy": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, float]",
                    "Dict[str, bool]"
                ]
            }
        },
        "AttachmentImport._get_related_object": {
            "name": "_get_related_object",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Type[T]",
                    "asgard.models.spec.container.ContainerParameterSpec",
                    "str",
                    "Callable[[], None]",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/publications/models.py": {
        "Publication.save": {
            "name": "save",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Publication.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publication.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 91,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publication.html_abstract": {
            "name": "html_abstract",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publication.html_cite": {
            "name": "html_cite",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/publications/urls.py": {},
    "ddionrails-master/ddionrails/publications/views.py": {
        "study_publication_list": {
            "name": "study_publication_list",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str",
                    "django.http.HttpResponse",
                    "django.http.HttpRequest"
                ],
                "study_name": [
                    "str",
                    "ultron8.api.models.trigger.TriggerCreate"
                ]
            }
        },
        "PublicationRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 22,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicationDetailView.get_object": {
            "name": "get_object",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "PublicationDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/publications/__init__.py": {},
    "ddionrails-master/ddionrails/publications/migrations/0001_initial.py": {},
    "ddionrails-master/ddionrails/publications/migrations/0002_alter_attachment_id.py": {},
    "ddionrails-master/ddionrails/publications/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/statistics/documents.py": {
        "VariableStatisticDocument.prepare_study": {
            "name": "prepare_study",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "VariableStatisticDocument.prepare_analysis_unit": {
            "name": "prepare_analysis_unit",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "VariableStatisticDocument.prepare_period": {
            "name": "prepare_period",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "VariableStatisticDocument._handle_missing_content": {
            "name": "_handle_missing_content",
            "location": 74,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "VariableStatisticDocument.get_queryset": {
            "name": "get_queryset",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableStatisticDocument.prepare_categories": {
            "name": "prepare_categories",
            "location": 97,
            "return": [],
            "arguments": {
                "variable": []
            }
        }
    },
    "ddionrails-master/ddionrails/statistics/imports.py": {
        "statistics_import": {
            "name": "statistics_import",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "BinaryIO",
                    "bytes",
                    "IO[str]"
                ],
                "study": [
                    "str",
                    "Dict[str, int]",
                    "bool",
                    "dere.models.Model"
                ]
            }
        },
        "_metadata_import": {
            "name": "_metadata_import",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "study": [
                    "str",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "db.models.Region"
                ]
            }
        },
        "_import_single_variable": {
            "name": "_import_single_variable",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "variable": [
                    "str",
                    "netCDF4.Variable"
                ],
                "study": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "models.Variable"
                ]
            }
        },
        "_import_independent_variables": {
            "name": "_import_independent_variables",
            "location": 93,
            "return": [
                "purplship.core.models.ShipmentDetails"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_import_single_type": {
            "name": "_import_single_type",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "variable": [
                    "str"
                ],
                "base_path": [
                    "pyutils.Path"
                ],
                "stat_type": [
                    "pyutils.Path"
                ]
            }
        },
        "_store_csv_data": {
            "name": "_store_csv_data",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "statistics": [
                    "str",
                    "List[Tuple[str, str, str, str, str]]",
                    "int",
                    "core.arxiv.submission.process.process_source.SourceProcess",
                    "pathlib.Path"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/statistics/models.py": {
        "IndependentVariable.save": {
            "name": "save",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "VariableStatistic.set_independent_variable_names": {
            "name": "set_independent_variable_names",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str"
                ]
            }
        },
        "VariableStatistic.save": {
            "name": "save",
            "location": 84,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/statistics/urls.py": {
        "TypeConverter.to_python": {
            "name": "to_python",
            "location": 18,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "TypeConverter.to_url": {
            "name": "to_url",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[str, int]",
                    "T",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/statistics/views.py": {
        "statistics_detail_view": {
            "name": "statistics_detail_view",
            "location": 18,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "study": [
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content",
                    "str"
                ],
                "plot_type": [
                    "str"
                ]
            }
        },
        "StatisticsNavView.get_context_data": {
            "name": "get_context_data",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/statistics/__init__.py": {},
    "ddionrails-master/ddionrails/statistics/migrations/0001_initial.py": {},
    "ddionrails-master/ddionrails/statistics/migrations/0002_alter_variablestatistic_statistics.py": {},
    "ddionrails-master/ddionrails/statistics/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/studies/admin.py": {
        "StudyAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "StudyAdmin.dataset_count": {
            "name": "dataset_count",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "StudyAdmin.instrument_count": {
            "name": "instrument_count",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "StudyAdmin.basket_count": {
            "name": "basket_count",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/studies/context_processors.py": {
        "studies_processor": {
            "name": "studies_processor",
            "location": 16,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "show_statistics": {
            "name": "show_statistics",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/studies/forms.py": {
        "StudyInitialForm.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/studies/imports.py": {
        "StudyDescriptionImport.execute_import": {
            "name": "execute_import",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/studies/models.py": {
        "Study.save": {
            "name": "save",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "force_update": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "using": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ],
                "update_fields": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "models.Country.Country",
                    "models.Disease.Disease"
                ]
            }
        },
        "Study.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Study.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 155,
            "return": [
                "str",
                "topicdb.core.models.language.Language",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Study.repo_url": {
            "name": "repo_url",
            "location": 159,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Study.set_topiclist": {
            "name": "set_topiclist",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "list",
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Study.has_topics": {
            "name": "has_topics",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Study.get_topiclist": {
            "name": "get_topiclist",
            "location": 179,
            "return": [
                "Optional[bool]",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Study.import_path": {
            "name": "import_path",
            "location": 190,
            "return": [
                "str",
                "Type['GenericList']",
                "Type['Declared']",
                "Awaitable",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/studies/views.py": {
        "study_topics": {
            "name": "study_topics",
            "location": 50,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.http.requesHttpRequest",
                    "str",
                    "django.http.HttpRequest",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "study_name": [
                    "str",
                    "ultron8.api.models.trigger.TriggerCreate"
                ],
                "language": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "StudyDetailView.get_queryset": {
            "name": "get_queryset",
            "location": 25,
            "return": [
                "str",
                "models.Name"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudyDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 29,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/studies/__init__.py": {},
    "ddionrails-master/ddionrails/studies/migrations/0001_initial.py": {},
    "ddionrails-master/ddionrails/studies/migrations/0002_auto_20201016_0850.py": {},
    "ddionrails-master/ddionrails/studies/migrations/0003_alter_topiclist_id.py": {},
    "ddionrails-master/ddionrails/studies/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/admin.py": {},
    "ddionrails-master/ddionrails/workspace/forms.py": {},
    "ddionrails-master/ddionrails/workspace/mixins.py": {
        "SoepMixin._generate_script_dict": {
            "name": "_generate_script_dict",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepMixin._create_dataset_dict": {
            "name": "_create_dataset_dict",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dataset_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "T",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "SoepMixin._enrich_dataset_dict": {
            "name": "_enrich_dataset_dict",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "dataset_dict": [
                    "dict"
                ]
            }
        },
        "SoepMixin._validate_datasets": {
            "name": "_validate_datasets",
            "location": 65,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "script_dict": [
                    "dict",
                    "Mapping[str, Any]"
                ],
                "analysis_unit": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "valid": [
                    "bool",
                    "Optional[str]",
                    "Literal[True]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/resources.py": {
        "determine_model_and_resource": {
            "name": "determine_model_and_resource",
            "location": 165,
            "return": [
                "core.models.UserPreferences",
                "models.User",
                "app.models.ModelType",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BasketResource.get_queryset": {
            "name": "get_queryset",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableWidgket.clean": {
            "name": "clean",
            "location": 73,
            "return": [
                "str",
                "bool",
                "allennlp.models.Model",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "List[str]"
                ],
                "row": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Union[bytes, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BasketWidget.clean": {
            "name": "clean",
            "location": 84,
            "return": [
                "str",
                "bool",
                "allennlp.models.Model",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "List[str]"
                ],
                "row": [
                    "bool",
                    "dict",
                    "Optional[Union[str, bytes]]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BasketVariableExportResource.get_queryset": {
            "name": "get_queryset",
            "location": 106,
            "return": [
                "bool",
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/urls.py": {},
    "ddionrails-master/ddionrails/workspace/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/management/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/management/commands/backup.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 18,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.log_success": {
            "name": "log_success",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "Command.backup_entity": {
            "name": "backup_entity",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "format_": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Command.create_backup_directory": {
            "name": "create_backup_directory",
            "location": 73,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "base_dir": [
                    "pathlib.Path",
                    "Optional[str]",
                    "bytes",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/management/commands/restore.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 19,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.log_success": {
            "name": "log_success",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "Command.log_error": {
            "name": "log_error",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "Command.get_recent_backup_directory": {
            "name": "get_recent_backup_directory",
            "location": 69,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.restore_entity": {
            "name": "restore_entity",
            "location": 80,
            "return": [
                "List[django.db.models.Model]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "_format": [
                    "str"
                ]
            }
        },
        "Command._print_errors": {
            "name": "_print_errors",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_information": [
                    "Exception",
                    "tuple",
                    "List[base.JSONDict]",
                    "str"
                ],
                "dataset": [
                    "Dict[str, Any]",
                    "static_frame.core.util.UFunc"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/management/commands/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/0001_initial.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/0002_auto_20191016_1453.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/0003_auto_20200422_0532.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/0004_auto_20200424_1252.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/0005_auto_20200608_0702.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/0006_auto_20210624_0828.py": {},
    "ddionrails-master/ddionrails/workspace/migrations/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/models/basket.py": {
        "Basket.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 78,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.html_description": {
            "name": "html_description",
            "location": 82,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.title": {
            "name": "title",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.get_or_create": {
            "name": "get_or_create",
            "location": 94,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable",
                "dss.config.Replica",
                "salon.models.Stylist"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]",
                    "int"
                ],
                "user": [
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Basket.get_script_generators": {
            "name": "get_script_generators",
            "location": 101,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.to_csv": {
            "name": "to_csv",
            "location": 107,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.to_dict": {
            "name": "to_dict",
            "location": 147,
            "return": [
                "Dict[str, Any]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]",
                "Dict[str, Union[str, Set]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basket.backup": {
            "name": "backup",
            "location": 152,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "study": [
                    "ddionrails.studies.models.Study",
                    "Dict[str, Any]",
                    "models.Name",
                    "zerver.models.Realm",
                    "float"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/models/basket_variable.py": {
        "BasketVariable.clean": {
            "name": "clean",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BasketVariable.variable_key_exists": {
            "name": "variable_key_exists",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasketVariable.clean_basket_variables": {
            "name": "clean_basket_variables",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "study_name": [
                    "str",
                    "Collection[str]",
                    "List[str]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/models/script.py": {
        "Script.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 46,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.get_config": {
            "name": "get_config",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.get_settings": {
            "name": "get_settings",
            "location": 65,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, models.DeviceRow]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.get_script_input": {
            "name": "get_script_input",
            "location": 70,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.title": {
            "name": "title",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/models/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/scripts/script_config.py": {
        "ScriptConfig.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "bool",
                    "float"
                ],
                "basket": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ScriptConfig.get_script_input": {
            "name": "get_script_input",
            "location": 25,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptConfig.get_datasets_and_variables": {
            "name": "get_datasets_and_variables",
            "location": 32,
            "return": [
                "str",
                "float",
                "list",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptConfig.get_all_configs": {
            "name": "get_all_configs",
            "location": 41,
            "return": [
                "List[str]",
                "FrozenSet[str]",
                "List[List[str]]",
                "Set[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Exception"
                ]
            }
        },
        "ScriptConfig.get_config": {
            "name": "get_config",
            "location": 45,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "config_name": [
                    "str"
                ]
            }
        },
        "ScriptConfig._get_list_of_configs": {
            "name": "_get_list_of_configs",
            "location": 49,
            "return": [
                "Set[str]",
                "List[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/scripts/soep_config.py": {
        "SoepConfig.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "Optional[Any]"
                ],
                "basket": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/scripts/soep_datasets.py": {
        "SoepDatasetsJsonLoader.load_json_data": {
            "name": "load_json_data",
            "location": 45,
            "return": [
                "dict",
                "Optional[float]",
                "str",
                "Optional[Dict[str, Any]]",
                "IO[bytes]"
            ],
            "arguments": {
                "json_file": [
                    "str"
                ]
            }
        },
        "SoepDataset.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepDatasets.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_file": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "SoepDatasets.get_dict": {
            "name": "get_dict",
            "location": 83,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str"
                ]
            }
        },
        "SoepDatasets.get_dataset": {
            "name": "get_dataset",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/scripts/soep_r.py": {
        "SoepR.get_script_input": {
            "name": "get_script_input",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_disclaimer": {
            "name": "_render_disclaimer",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_local_variables": {
            "name": "_render_local_variables",
            "location": 71,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_not_processed": {
            "name": "_render_not_processed",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "not_processed": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "SoepR._render_pfad": {
            "name": "_render_pfad",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepR._render_balanced": {
            "name": "_render_balanced",
            "location": 118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_private": {
            "name": "_render_private",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_gender": {
            "name": "_render_gender",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_sort_pfad": {
            "name": "_render_sort_pfad",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "SoepR._render_hrf": {
            "name": "_render_hrf",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepR._render_create_master": {
            "name": "_render_create_master",
            "location": 205,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_read_data": {
            "name": "_render_read_data",
            "location": 212,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_merge": {
            "name": "_render_merge",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepR._render_done": {
            "name": "_render_done",
            "location": 248,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "ddionrails-master/ddionrails/workspace/scripts/soep_spss.py": {
        "SoepSpss.get_script_input": {
            "name": "get_script_input",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_disclaimer": {
            "name": "_render_disclaimer",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_local_variables": {
            "name": "_render_local_variables",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_not_processed": {
            "name": "_render_not_processed",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "not_processed": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "SoepSpss._render_pfad": {
            "name": "_render_pfad",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepSpss._render_balanced": {
            "name": "_render_balanced",
            "location": 117,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_private": {
            "name": "_render_private",
            "location": 136,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_gender": {
            "name": "_render_gender",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_sort_pfad": {
            "name": "_render_sort_pfad",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_hrf": {
            "name": "_render_hrf",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepSpss._render_create_master": {
            "name": "_render_create_master",
            "location": 206,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_read_data": {
            "name": "_render_read_data",
            "location": 220,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_merge": {
            "name": "_render_merge",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepSpss._render_done": {
            "name": "_render_done",
            "location": 253,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "int",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "ddionrails-master/ddionrails/workspace/scripts/soep_stata.py": {
        "SoepStata.get_script_input": {
            "name": "get_script_input",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_test": {
            "name": "_render_test",
            "location": 57,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "list"
                ],
                "old_valid": [
                    "list",
                    "bool",
                    "int"
                ],
                "old_notp": [
                    "list",
                    "bool",
                    "int"
                ],
                "special": [
                    "int",
                    "Exception",
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "type",
                    "str",
                    "bool"
                ]
            }
        },
        "SoepStata._render_disclaimer": {
            "name": "_render_disclaimer",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_local_variables": {
            "name": "_render_local_variables",
            "location": 89,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_not_processed": {
            "name": "_render_not_processed",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "not_processed": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "SoepStata._render_pfad": {
            "name": "_render_pfad",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepStata._render_balanced": {
            "name": "_render_balanced",
            "location": 136,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_private": {
            "name": "_render_private",
            "location": 156,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_gender": {
            "name": "_render_gender",
            "location": 170,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_sort_pfad": {
            "name": "_render_sort_pfad",
            "location": 185,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "SoepStata._render_hrf": {
            "name": "_render_hrf",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepStata._render_create_master": {
            "name": "_render_create_master",
            "location": 216,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_read_data": {
            "name": "_render_read_data",
            "location": 227,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoepStata._render_merge": {
            "name": "_render_merge",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "special_datasets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SoepStata._render_done": {
            "name": "_render_done",
            "location": 263,
            "return": [
                "int",
                "Callable[..., None]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "ddionrails-master/ddionrails/workspace/scripts/__init__.py": {},
    "ddionrails-master/ddionrails/workspace/views/basket.py": {
        "basket_list": {
            "name": "basket_list",
            "location": 25,
            "return": [
                "Dict[str, List[str]]",
                "bool",
                "list"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "basket_detail": {
            "name": "basket_detail",
            "location": 48,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "int",
                    "Union[core.utils.ObjectID, str]"
                ],
                "basket_id": [
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "basket_new": {
            "name": "basket_new",
            "location": 130,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "Tuple[int]"
                ]
            }
        },
        "basket_search": {
            "name": "basket_search",
            "location": 150,
            "return": [
                "int",
                "Dict[str, Any]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "bytes",
                    "django.http.HttpRequest",
                    "str"
                ],
                "basket_id": [
                    "int"
                ]
            }
        },
        "basket_delete": {
            "name": "basket_delete",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "bytes"
                ],
                "basket_id": [
                    "int"
                ]
            }
        },
        "add_variable": {
            "name": "add_variable",
            "location": 175,
            "return": [
                "str",
                "Mapping[str, str]",
                "Callable",
                "type"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "basket_id": [
                    "int",
                    "uuid.UUID",
                    "str",
                    "Optional[int]"
                ],
                "variable_id": [
                    "int",
                    "str",
                    "uuid.UUID",
                    "dict",
                    "transfer.models.ShopID",
                    "jgikbase.idmapping.core.tokens.Token"
                ]
            }
        },
        "remove_variable": {
            "name": "remove_variable",
            "location": 196,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "type"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "str"
                ],
                "basket_id": [
                    "int",
                    "transfer.models.ArticleID",
                    "uuid.UUID",
                    "grouper.models.base.session.Session"
                ],
                "variable_id": [
                    "int",
                    "transfer.models.ArticleID",
                    "uuid.UUID",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "add_concept": {
            "name": "add_concept",
            "location": 211,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "int"
                ],
                "basket_id": [
                    "int",
                    "uuid.UUID",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "concept_id": [
                    "int",
                    "str",
                    "uuid.UUID",
                    "Optional[int]",
                    "core.types.FBUserID"
                ]
            }
        },
        "remove_concept": {
            "name": "remove_concept",
            "location": 236,
            "return": [
                "str",
                "salon.models.Stylist",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "basket_id": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "concept_id": [
                    "int",
                    "uuid.UUID",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        },
        "basket_to_csv": {
            "name": "basket_to_csv",
            "location": 252,
            "return": [
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "bytes",
                    "str"
                ],
                "basket_id": [
                    "int",
                    "zerver.models.UserProfile",
                    "Optional[Sequence[Any]]"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/views/decorator.py": {
        "own_basket_only": {
            "name": "own_basket_only",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "own_basket_only.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "int",
                    "FrozenSet[bytes]",
                    "django.http.HttpRequest"
                ],
                "basket_id": [
                    "django.http.HttpRequest",
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/views/script.py": {
        "script_detail": {
            "name": "script_detail",
            "location": 20,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.requesHttpRequest",
                    "requests_mock.response._Context",
                    "django.http.HttpRequest",
                    "str",
                    "dict",
                    "zerver.models.UserProfile",
                    "excars.models.user.User"
                ],
                "basket_id": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "bytes"
                ],
                "script_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ]
            }
        },
        "script_raw": {
            "name": "script_raw",
            "location": 60,
            "return": [
                "dict",
                "str",
                "Exception",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "bytes"
                ],
                "basket_id": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "bytes"
                ],
                "script_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ]
            }
        },
        "script_delete": {
            "name": "script_delete",
            "location": 73,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "bytes",
                    "str"
                ],
                "basket_id": [
                    "str",
                    "zerver.models.UserProfile",
                    "int",
                    "Optional[int]",
                    "django.http.HttpRequest"
                ],
                "script_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        },
        "script_new_lang": {
            "name": "script_new_lang",
            "location": 86,
            "return": [
                "str",
                "Callable[[], T]",
                "app.models.Tweet",
                "app.models.Position",
                "Optional[Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "apistar.http.Request",
                    "str"
                ],
                "basket_id": [
                    "zerver.models.UserProfile",
                    "asgard.models.accounAccount",
                    "str"
                ],
                "generator_name": [
                    "str",
                    "django.http.HttpRequest",
                    "Optional[str]",
                    "Union[int,str]",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/views/user.py": {
        "account_overview": {
            "name": "account_overview",
            "location": 13,
            "return": [
                "Dict[str, Union[int, str]]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 22,
            "return": [
                "int",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "user_delete": {
            "name": "user_delete",
            "location": 36,
            "return": [],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Iterable[int]",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ddionrails-master/ddionrails/workspace/views/__init__.py": {},
    "ddionrails-master/tests/conftest.py": {
        "analysis_unit": {
            "name": "analysis_unit",
            "location": 53,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_basket": {
            "name": "_basket",
            "location": 65,
            "return": [],
            "arguments": {
                "request": [],
                "study": [],
                "user": []
            }
        },
        "concept": {
            "name": "concept",
            "location": 74,
            "return": [],
            "arguments": {
                "db": [],
                "topic": []
            }
        },
        "concept_question": {
            "name": "concept_question",
            "location": 98,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "conceptual_dataset": {
            "name": "conceptual_dataset",
            "location": 104,
            "return": [],
            "arguments": {
                "study": []
            }
        },
        "_dataset": {
            "name": "_dataset",
            "location": 117,
            "return": [],
            "arguments": {
                "request": [],
                "db": []
            }
        },
        "elasticsearch_indices": {
            "name": "elasticsearch_indices",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "empty_data": {
            "name": "empty_data",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "image_file": {
            "name": "image_file",
            "location": 155,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_variable_image_file": {
            "name": "_variable_image_file",
            "location": 169,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "instrument": {
            "name": "instrument",
            "location": 188,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "period": {
            "name": "period",
            "location": 207,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "publication": {
            "name": "publication",
            "location": 215,
            "return": [],
            "arguments": {
                "study": []
            }
        },
        "question": {
            "name": "question",
            "location": 221,
            "return": [],
            "arguments": {
                "db": [],
                "request": []
            }
        },
        "question_variable": {
            "name": "question_variable",
            "location": 237,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_study": {
            "name": "_study",
            "location": 243,
            "return": [],
            "arguments": {
                "request": [],
                "db": []
            }
        },
        "system": {
            "name": "system",
            "location": 252,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "topic": {
            "name": "topic",
            "location": 258,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "topiclist": {
            "name": "topiclist",
            "location": 270,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "transformation": {
            "name": "transformation",
            "location": 280,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "user": {
            "name": "user",
            "location": 286,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_variable": {
            "name": "_variable",
            "location": 293,
            "return": [],
            "arguments": {
                "request": [],
                "db": []
            }
        },
        "variable_with_concept": {
            "name": "variable_with_concept",
            "location": 321,
            "return": [],
            "arguments": {
                "variable": [],
                "concept": []
            }
        },
        "uuid_identifier": {
            "name": "uuid_identifier",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "concepts_index": {
            "name": "concepts_index",
            "location": 335,
            "return": [],
            "arguments": {
                "elasticsearch_indices": [],
                "concept": []
            }
        },
        "topics_index": {
            "name": "topics_index",
            "location": 354,
            "return": [],
            "arguments": {
                "elasticsearch_indices": [],
                "topic": []
            }
        },
        "questions_index": {
            "name": "questions_index",
            "location": 373,
            "return": [],
            "arguments": {
                "elasticsearch_indices": [],
                "question": []
            }
        },
        "variables_index": {
            "name": "variables_index",
            "location": 392,
            "return": [],
            "arguments": {
                "elasticsearch_indices": [],
                "variable": []
            }
        },
        "publication_with_umlauts": {
            "name": "publication_with_umlauts",
            "location": 413,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "publications_index": {
            "name": "publications_index",
            "location": 426,
            "return": [],
            "arguments": {
                "elasticsearch_indices": [],
                "publication_with_umlauts": []
            }
        },
        "_news": {
            "name": "_news",
            "location": 458,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_mock_import_path": {
            "name": "_mock_import_path",
            "location": 472,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_variable_image_file._image_file": {
            "name": "_image_file",
            "location": 172,
            "return": [],
            "arguments": {
                "file_type": [],
                "size": []
            }
        },
        "MockOpener.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockOpener.content_written_in_path": {
            "name": "content_written_in_path",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "content": []
            }
        },
        "MockOpener.get_content_written_in_path": {
            "name": "get_content_written_in_path",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "MockOpener.called_with_path": {
            "name": "called_with_path",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "MockOpener._stitch_together_write_output": {
            "name": "_stitch_together_write_output",
            "location": 536,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "MockOpener.content_written": {
            "name": "content_written",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "MockOpener.register_file": {
            "name": "register_file",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "content": []
            }
        },
        "MockOpener.__call__": {
            "name": "__call__",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableImageFile.__call__": {
            "name": "__call__",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "file_type": [],
                "size": []
            }
        }
    },
    "ddionrails-master/tests/factories.py": {},
    "ddionrails-master/tests/status.py": {},
    "ddionrails-master/tests/test_pavement_tasks.py": {
        "mocked_sh": {
            "name": "mocked_sh",
            "location": 22,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "mocked_django_setup": {
            "name": "mocked_django_setup",
            "location": 27,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "mocked_call_command": {
            "name": "mocked_call_command",
            "location": 32,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_docu_task": {
            "name": "test_docu_task",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_sh": []
            }
        },
        "test_full_docu_task": {
            "name": "test_full_docu_task",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_sh": []
            }
        },
        "test_django_setup": {
            "name": "test_django_setup",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_django_setup": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_create_admin": {
            "name": "test_create_admin",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reset_migrations": {
            "name": "test_reset_migrations",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mocked_call_command": []
            }
        },
        "test_erd": {
            "name": "test_erd",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_call_command": [
                    "Tuple[str, mock.Mock]"
                ]
            }
        },
        "test_migrate": {
            "name": "test_migrate",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_call_command": [
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "ddionrails-master/tests/__init__.py": {},
    "ddionrails-master/tests/api/test_views.py": {
        "_client": {
            "name": "_client",
            "location": 37,
            "return": [
                "django.tesClient"
            ],
            "arguments": {
                "request": [
                    "projects.models.projects.Project",
                    "django.http.HttpRequest",
                    "bool",
                    "rest_framework.requesRequest"
                ],
                "client": []
            }
        },
        "_variable_with_concept_and_topic": {
            "name": "_variable_with_concept_and_topic",
            "location": 45,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "variable": [
                    "Callable",
                    "Exception",
                    "str",
                    "KT"
                ],
                "concept": [
                    "str",
                    "Iterable[Any]"
                ],
                "topic": [
                    "str"
                ]
            }
        },
        "response_is_json": {
            "name": "response_is_json",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "int",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "Dict[int, Dict]"
                ]
            }
        },
        "test_topic_tree": {
            "name": "test_topic_tree",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "bool",
                    "List[str]",
                    "rest_framework.tesAPIClient"
                ],
                "topiclist": [
                    "bool",
                    "List[str]",
                    "rest_framework.tesAPIClient"
                ],
                "language": [
                    "bool",
                    "List[str]",
                    "rest_framework.tesAPIClient"
                ],
                "expected": [
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestBasketViewSet.setUp": {
            "name": "setUp",
            "location": 84,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet._init_self_variables": {
            "name": "_init_self_variables",
            "location": 108,
            "return": [
                "Optional[Callable[[bool], None]]",
                "Optional[T]",
                "type",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_get_basket": {
            "name": "test_get_basket",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_returned_fields": {
            "name": "test_returned_fields",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_create_basket": {
            "name": "test_create_basket",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_create_existing_basket": {
            "name": "test_create_existing_basket",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_create_basket_no_user": {
            "name": "test_create_basket_no_user",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_create_basket_wrong_user": {
            "name": "test_create_basket_wrong_user",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet.test_create_basket_superuser": {
            "name": "test_create_basket_superuser",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketViewSet._get_api_GET_content": {
            "name": "_get_api_GET_content",
            "location": 198,
            "return": [
                "int",
                "bool",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.setUp": {
            "name": "setUp",
            "location": 211,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_query_parameter_conflict": {
            "name": "test_query_parameter_conflict",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_404_errors": {
            "name": "test_404_errors",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_query_parameter_concept": {
            "name": "test_query_parameter_concept",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_query_parameter_study": {
            "name": "test_query_parameter_study",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_returned_fields": {
            "name": "test_returned_fields",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_get_variable_GET_data": {
            "name": "test_get_variable_GET_data",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionViewSet.test_scroll_limit": {
            "name": "test_scroll_limit",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetViewSet.setUp": {
            "name": "setUp",
            "location": 338,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetViewSet.test_no_parameter": {
            "name": "test_no_parameter",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetViewSet.test_study_name_parameter": {
            "name": "test_study_name_parameter",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstrumentViewSet.setUp": {
            "name": "setUp",
            "location": 370,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstrumentViewSet.test_no_parameter": {
            "name": "test_no_parameter",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstrumentViewSet.test_study_name_parameter": {
            "name": "test_study_name_parameter",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.setUp": {
            "name": "setUp",
            "location": 404,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_query_parameter_conflict": {
            "name": "test_query_parameter_conflict",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_404_errors": {
            "name": "test_404_errors",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_query_parameter_concept": {
            "name": "test_query_parameter_concept",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_query_parameter_study": {
            "name": "test_query_parameter_study",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_returned_fields": {
            "name": "test_returned_fields",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_get_variable_GET_data": {
            "name": "test_get_variable_GET_data",
            "location": 501,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableViewSet.test_scroll_limit": {
            "name": "test_scroll_limit",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.setUp": {
            "name": "setUp",
            "location": 533,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_get_basket_variable_GET_data": {
            "name": "test_get_basket_variable_GET_data",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_get_basket_variable_GET_with_url_param": {
            "name": "test_get_basket_variable_GET_with_url_param",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_get_basket_variable_GET_data_as_superuser": {
            "name": "test_get_basket_variable_GET_data_as_superuser",
            "location": 568,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_get_basket_variable_GET_data_unauthorized": {
            "name": "test_get_basket_variable_GET_data_unauthorized",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_POST_basket_variables": {
            "name": "test_POST_basket_variables",
            "location": 586,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_POST_basket_variables_no_permission": {
            "name": "test_POST_basket_variables_no_permission",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_DELETE_basket_variables": {
            "name": "test_DELETE_basket_variables",
            "location": 616,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_DELETE_basket_variables_no_permission": {
            "name": "test_DELETE_basket_variables_no_permission",
            "location": 646,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_POST_basket_variables_by_topic_by_name": {
            "name": "test_POST_basket_variables_by_topic_by_name",
            "location": 666,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_POST_basket_variables_by_concept_name": {
            "name": "test_POST_basket_variables_by_concept_name",
            "location": 687,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_basket_variable_limit": {
            "name": "test_basket_variable_limit",
            "location": 708,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableSet.test_basket_variable_limit_topic_and_concept_POST": {
            "name": "test_basket_variable_limit_topic_and_concept_POST",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionComparison.setUp": {
            "name": "setUp",
            "location": 768,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionComparison.test_with_valid_ids": {
            "name": "test_with_valid_ids",
            "location": 777,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionComparison.test_with_invalid_from_id": {
            "name": "test_with_invalid_from_id",
            "location": 788,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionComparison.test_with_invalid_to_id": {
            "name": "test_with_invalid_to_id",
            "location": 795,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFeedback.setUp": {
            "name": "setUp",
            "location": 811,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFeedback.test_anonymous_feedback": {
            "name": "test_anonymous_feedback",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendFeedback.test_missing_feedback_type": {
            "name": "test_missing_feedback_type",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/api/__init__.py": {},
    "ddionrails-master/tests/base/factories.py": {},
    "ddionrails-master/tests/base/test_mixins.py": {
        "_admin_mixin": {
            "name": "_admin_mixin",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "_model_mixin": {
            "name": "_model_mixin",
            "location": 25,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {}
        },
        "TestModelMixin.test_get_method_success": {
            "name": "test_get_method_success",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestModelMixin.test_get_method_failure": {
            "name": "test_get_method_failure",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelMixin.test_default_form_method": {
            "name": "test_default_form_method",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelMixin.test_to_dict_method": {
            "name": "test_to_dict_method",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "TestModelMixin.test_title_method": {
            "name": "test_title_method",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "Callable"
                ]
            }
        },
        "TestModelMixin.test_title_method_with_name": {
            "name": "test_title_method_with_name",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": []
            }
        },
        "TestModelMixin.test_title_method_with_label": {
            "name": "test_title_method_with_label",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "Dict[str, Any]",
                    "projects.models.Project",
                    "mtg_ssm.scryfall.models.ScryObject",
                    "dict",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestModelMixin.test_title_method_with_label_de": {
            "name": "test_title_method_with_label_de",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": []
            }
        },
        "TestModelMixin.test_set_language_method": {
            "name": "test_set_language_method",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "Dict[str, Any]",
                    "mtg_ssm.scryfall.models.ScryObject",
                    "int"
                ]
            }
        },
        "TestModelMixin.test_set_language_method_de": {
            "name": "test_set_language_method_de",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "Dict[str, Any]",
                    "mtg_ssm.scryfall.models.ScryObject",
                    "int"
                ]
            }
        },
        "TestModelMixin.test_set_language_method_unsupported_language": {
            "name": "test_set_language_method_unsupported_language",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "Dict[str, Any]",
                    "mtg_ssm.scryfall.models.ScryObject",
                    "int"
                ]
            }
        },
        "TestModelMixin.test_title_de_method": {
            "name": "test_title_de_method",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Callable[[List, bool], None]",
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "TestModelMixin.test_title_de_method_without_label": {
            "name": "test_title_de_method_without_label",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "TestModelMixin.test_html_description_method": {
            "name": "test_html_description_method",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Type"
                ],
                "model_mixin": [
                    "str"
                ]
            }
        },
        "TestModelMixin.test_html_description_method_without_description": {
            "name": "test_html_description_method_without_description",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_mixin": [
                    "Callable",
                    "keanu.vertex.base.Vertex"
                ]
            }
        },
        "TestAdminMixin.test_study_name": {
            "name": "test_study_name",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_study_name_without_study": {
            "name": "test_study_name_without_study",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_period_name": {
            "name": "test_period_name",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_period_name_without_period": {
            "name": "test_period_name_without_period",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_analysis_unit_name": {
            "name": "test_analysis_unit_name",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_analysis_unit_name_without_analysis_unit": {
            "name": "test_analysis_unit_name_without_analysis_unit",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_dataset_name": {
            "name": "test_dataset_name",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_dataset_name_without_dataset": {
            "name": "test_dataset_name_without_dataset",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_dataset_study_name": {
            "name": "test_dataset_study_name",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_dataset_study_name_without_study": {
            "name": "test_dataset_study_name_without_study",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_instrument_name": {
            "name": "test_instrument_name",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_instrument_name_without_instrument": {
            "name": "test_instrument_name_without_instrument",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_instrument_study_name": {
            "name": "test_instrument_study_name",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_instrument_study_name_without_instrument": {
            "name": "test_instrument_study_name_without_instrument",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_basket_name": {
            "name": "test_basket_name",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_basket_name_without_study": {
            "name": "test_basket_name_without_study",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_basket_study_name": {
            "name": "test_basket_study_name",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_basket_study_name_without_basket": {
            "name": "test_basket_study_name_without_basket",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_user_name": {
            "name": "test_user_name",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "core.models.Recipe"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestAdminMixin.test_user_name_without_user": {
            "name": "test_user_name_without_user",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "admin_mixin": [
                    "core.models.Recipe"
                ],
                "mocker": [
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/tests/base/test_models.py": {
        "TestSystemModel.test_repo_url_method": {
            "name": "test_repo_url_method",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "system": [
                    "str"
                ],
                "settings": [
                    "str"
                ]
            }
        },
        "TestSystemModel.test_get_method": {
            "name": "test_get_method",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "system": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestSystemModel.test_get_method_with_creation": {
            "name": "test_get_method_with_creation",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsModel.test_news_ancestry": {
            "name": "test_news_ancestry",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsModel.test_news_date": {
            "name": "test_news_date",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/base/__init__.py": {},
    "ddionrails-master/tests/concepts/conftest.py": {
        "concept_without_label": {
            "name": "concept_without_label",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "period_without_label": {
            "name": "period_without_label",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "conceptual_dataset_without_label": {
            "name": "conceptual_dataset_without_label",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "analysis_unit_without_label": {
            "name": "analysis_unit_without_label",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "period_with_range_definition": {
            "name": "period_with_range_definition",
            "location": 42,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "valid_concept_data": {
            "name": "valid_concept_data",
            "location": 48,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "minimal_valid_concept_data": {
            "name": "minimal_valid_concept_data",
            "location": 56,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "valid_analysis_unit_data": {
            "name": "valid_analysis_unit_data",
            "location": 62,
            "return": [
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "study": [
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "valid_conceptual_dataset_data": {
            "name": "valid_conceptual_dataset_data",
            "location": 73,
            "return": [
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "study": [
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "valid_period_data": {
            "name": "valid_period_data",
            "location": 84,
            "return": [
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "study": [
                    "dict"
                ]
            }
        },
        "valid_topic_data": {
            "name": "valid_topic_data",
            "location": 95,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "study": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/tests/concepts/factories.py": {},
    "ddionrails-master/tests/concepts/test_admin.py": {
        "test_analyis_unit_admin_list": {
            "name": "test_analyis_unit_admin_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "analysis_unit": [
                    "bool"
                ]
            }
        },
        "test_analyis_unit_admin_detail": {
            "name": "test_analyis_unit_admin_detail",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "analysis_unit": [
                    "dict"
                ]
            }
        },
        "test_concept_admin_list": {
            "name": "test_concept_admin_list",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "concept": [
                    "bool"
                ]
            }
        },
        "test_concept_admin_detail": {
            "name": "test_concept_admin_detail",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "concept": [
                    "dict"
                ]
            }
        },
        "test_conceptual_dataset_admin_list": {
            "name": "test_conceptual_dataset_admin_list",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "conceptual_dataset": [
                    "bool"
                ]
            }
        },
        "test_conceptual_dataset_admin_detail": {
            "name": "test_conceptual_dataset_admin_detail",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "conceptual_dataset": [
                    "dict"
                ]
            }
        },
        "test_period_admin_list": {
            "name": "test_period_admin_list",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "period": [
                    "bool"
                ]
            }
        },
        "test_period_admin_detail": {
            "name": "test_period_admin_detail",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "period": [
                    "dict"
                ]
            }
        },
        "test_topic_admin_list": {
            "name": "test_topic_admin_list",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "topic": [
                    "bool"
                ]
            }
        },
        "test_topic_admin_detail": {
            "name": "test_topic_admin_detail",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "topic": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/concepts/test_documents.py": {
        "test_concept_search_document_fields": {
            "name": "test_concept_search_document_fields",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "variable_with_concept": [
                    "Callable"
                ],
                "topic": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "List[zam_repondeur.models.Amendement]",
                    "Set[str]"
                ]
            }
        },
        "test_search_concept_by_label_de": {
            "name": "test_search_concept_by_label_de",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_topic_search_document_fields": {
            "name": "test_topic_search_document_fields",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "topic": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "ddionrails-master/tests/concepts/test_forms.py": {
        "TestConceptForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": [
                    "bytes"
                ]
            }
        },
        "TestConceptForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_concept_data": [
                    "dict",
                    "bool",
                    "Optional[Exception]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestConceptForm.test_form_with_minimal_valid_data": {
            "name": "test_form_with_minimal_valid_data",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minimal_valid_concept_data": [
                    "List[str]",
                    "float"
                ]
            }
        },
        "TestPeriodForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": [
                    "bytes"
                ]
            }
        },
        "TestPeriodForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_period_data": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestAnalysisUnitForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": []
            }
        },
        "TestAnalysisUnitForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_analysis_unit_data": []
            }
        },
        "TestConceptualDatasetForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": []
            }
        },
        "TestConceptualDatasetForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_conceptual_dataset_data": []
            }
        },
        "TestTopicForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": [
                    "bytes"
                ]
            }
        },
        "TestTopicForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_topic_data": [
                    "dict",
                    "bool",
                    "Optional[Exception]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ddionrails-master/tests/concepts/test_imports.py": {
        "filename": {
            "name": "filename",
            "location": 22,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "concept_importer": {
            "name": "concept_importer",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "int",
                    "Callable[[str], str]"
                ]
            }
        },
        "analysis_unit_importer": {
            "name": "analysis_unit_importer",
            "location": 33,
            "return": [
                "str",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "int"
                ],
                "study": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "conceptual_dataset_importer": {
            "name": "conceptual_dataset_importer",
            "location": 39,
            "return": [
                "str",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "int"
                ],
                "study": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "period_importer": {
            "name": "period_importer",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes"
                ],
                "study": [
                    "str",
                    "bytes"
                ]
            }
        },
        "topic_json_importer": {
            "name": "topic_json_importer",
            "location": 51,
            "return": [
                "str",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "int"
                ],
                "study": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestConceptImport.test_import_with_valid_data": {
            "name": "test_import_with_valid_data",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept_importer": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "List[src.main.core.models.window.Window]",
                    "Tuple[str]"
                ],
                "valid_concept_data": [
                    "server.models.Bike",
                    "salon.models.Stylist",
                    "List[src.main.core.models.window.Window]"
                ]
            }
        },
        "TestConceptImport.test_import_with_invalid_data": {
            "name": "test_import_with_invalid_data",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept_importer": [
                    "Optional[str]"
                ],
                "empty_data": [
                    "Optional[str]"
                ]
            }
        },
        "TestAnalysisUnitImport.test_import_with_valid_data": {
            "name": "test_import_with_valid_data",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "analysis_unit_importer": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "List[src.main.core.models.window.Window]"
                ],
                "valid_analysis_unit_data": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TestAnalysisUnitImport.test_import_with_invalid_data": {
            "name": "test_import_with_invalid_data",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "analysis_unit_importer": [
                    "Mapping[str, Any]"
                ],
                "empty_data": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestConceptualDatasetImport.test_import_with_valid_data": {
            "name": "test_import_with_valid_data",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conceptual_dataset_importer": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "List[src.main.core.models.window.Window]"
                ],
                "valid_conceptual_dataset_data": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TestConceptualDatasetImport.test_import_with_invalid_data": {
            "name": "test_import_with_invalid_data",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conceptual_dataset_importer": [
                    "Mapping[str, Any]"
                ],
                "empty_data": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestPeriodImport.test_import_with_valid_data": {
            "name": "test_import_with_valid_data",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "period_importer": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "List[src.main.core.models.window.Window]",
                    "Tuple[str]"
                ],
                "valid_period_data": [
                    "server.models.Bike",
                    "salon.models.Stylist",
                    "List[src.main.core.models.window.Window]"
                ]
            }
        },
        "TestPeriodImport.test_import_with_invalid_data": {
            "name": "test_import_with_invalid_data",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "period_importer": [
                    "Optional[str]"
                ],
                "empty_data": [
                    "Optional[str]"
                ]
            }
        },
        "TestTopicJsonImport.test_execute_import_method": {
            "name": "test_execute_import_method",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topic_json_importer": [],
                "mocker": [
                    "core.models.MyUser"
                ]
            }
        },
        "TestTopicJsonImport.test_import_topic_list_method": {
            "name": "test_import_topic_list_method",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topic_json_importer": []
            }
        }
    },
    "ddionrails-master/tests/concepts/test_models.py": {
        "TestConceptModel.test_string_method": {
            "name": "test_string_method",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestConceptModel.test_get_absolute_url_method": {
            "name": "test_get_absolute_url_method",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept": []
            }
        },
        "TestAnalysisUnitModel.test_string_method": {
            "name": "test_string_method",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "analysis_unit": [
                    "Dict[str, Any]",
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestConceptualDatasetModel.test_string_method": {
            "name": "test_string_method",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conceptual_dataset": [
                    "Dict[str, Any]",
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestPeriodModel.test_string_method": {
            "name": "test_string_method",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "period": [
                    "Callable",
                    "str",
                    "dict"
                ]
            }
        },
        "TestTopicModel.test_get_children_method": {
            "name": "test_get_children_method",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "core.models.Recipe",
                    "str"
                ]
            }
        },
        "TestTopicModel.test_get_topic_tree_leaves": {
            "name": "test_get_topic_tree_leaves",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "concept": [
                    "Set[int]",
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/tests/concepts/test_urls.py": {
        "concept_list_url": {
            "name": "concept_list_url",
            "location": 13,
            "return": [
                "List[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "int",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor",
                    "float"
                ]
            }
        },
        "concept_detail_url_by_id": {
            "name": "concept_detail_url_by_id",
            "location": 18,
            "return": [
                "int",
                "Optional[str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "scope": [
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "Optional[List[Any]]"
                ]
            }
        },
        "concept_detail_url_by_name": {
            "name": "concept_detail_url_by_name",
            "location": 23,
            "return": [
                "str",
                "int",
                "List[Callable]",
                "type"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "TestConceptUrls.test_concept_list_url": {
            "name": "test_concept_list_url",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept_list_url": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TestConceptUrls.test_concept_detail_url_with_id": {
            "name": "test_concept_detail_url_with_id",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept_detail_url_by_id": [
                    "str",
                    "List[int]",
                    "Iterable[str]",
                    "Union['KspNativeControl', int]",
                    "dict",
                    "Dict[str, Dict[str, str]]"
                ],
                "uuid_identifier": [
                    "int"
                ]
            }
        },
        "TestConceptUrls.test_concept_detail_url_with_name": {
            "name": "test_concept_detail_url_with_name",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concept_detail_url_by_name": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "ddionrails-master/tests/concepts/test_views.py": {
        "TestConceptDetailView.test_detail_view_with_valid_id": {
            "name": "test_detail_view_with_valid_id",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "concept": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestConceptDetailView.test_detail_view_with_invalid_id": {
            "name": "test_detail_view_with_invalid_id",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "uuid_identifier": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Dict[str, Sequence[Any]]",
                    "Optional[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "TestConceptDetailView.test_detail_view_with_valid_name": {
            "name": "test_detail_view_with_valid_name",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "concept": [
                    "core_lib.core.models.Event",
                    "django.tesClient",
                    "models.posting.PostingList"
                ]
            }
        },
        "TestConceptDetailView.test_detail_view_with_invalid_name": {
            "name": "test_detail_view_with_invalid_name",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "ddionrails-master/tests/concepts/__init__.py": {},
    "ddionrails-master/tests/config/test_helpers.py": {
        "TestHelpers.test_render_markdown": {
            "name": "test_render_markdown",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_lower_dict_names": {
            "name": "test_lower_dict_names",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRowHelper.test_row_method": {
            "name": "test_row_method",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRowHelper.test_row_method_true": {
            "name": "test_row_method_true",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRowHelper.test_reset_method": {
            "name": "test_reset_method",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseEnvVariableDict.test_correct_input": {
            "name": "test_correct_input",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseEnvVariableDict.test_incorrect_input": {
            "name": "test_incorrect_input",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/config/test_settings.py": {
        "test_django_debug_settings": {
            "name": "test_django_debug_settings",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "Callable",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_django_debug_settings_false": {
            "name": "test_django_debug_settings_false",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "ddionrails-master/tests/config/test_urls.py": {
        "django_debug_toolbar_found": {
            "name": "django_debug_toolbar_found",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "urlpatterns": [
                    "list",
                    "List[str]",
                    "bool",
                    "Iterable[Sequence[str]]",
                    "dict"
                ]
            }
        },
        "media_pattern_found": {
            "name": "media_pattern_found",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "urlpatterns": [
                    "list",
                    "bool",
                    "int",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor",
                    "str",
                    "BaseException"
                ]
            }
        },
        "test_urlconf_with_debug_true": {
            "name": "test_urlconf_with_debug_true",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "test_urlconf_with_debug_false": {
            "name": "test_urlconf_with_debug_false",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "Iterable[int]"
                ]
            }
        },
        "test_imprint": {
            "name": "test_imprint",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search": {
            "name": "test_search",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_concepts": {
            "name": "test_search_concepts",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_topics": {
            "name": "test_search_topics",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_publications": {
            "name": "test_search_publications",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_questions": {
            "name": "test_search_questions",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_variables": {
            "name": "test_search_variables",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ddionrails-master/tests/config/test_validators.py": {
        "TestValidators.test_validate_lowercase_with_valid_value": {
            "name": "test_validate_lowercase_with_valid_value",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidators.test_validate_lowercase_with_invalid_value": {
            "name": "test_validate_lowercase_with_invalid_value",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/config/test_views.py": {
        "TestPageViews.test_contact_page": {
            "name": "test_contact_page",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestPageViews.test_home_page": {
            "name": "test_home_page",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestPageViews.test_imprint_page": {
            "name": "test_imprint_page",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestViewFunctions.test_news": {
            "name": "test_news",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTemplates.test_400_template": {
            "name": "test_400_template",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "Dict[str, Any]",
                    "backup.config.Config"
                ]
            }
        },
        "TestErrorTemplates.test_403_template": {
            "name": "test_403_template",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "Dict[str, Any]",
                    "backup.config.Config"
                ]
            }
        },
        "TestErrorTemplates.test_404_template": {
            "name": "test_404_template",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "Dict[str, Any]",
                    "backup.config.Config"
                ]
            }
        },
        "TestErrorTemplates.test_500_template": {
            "name": "test_500_template",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "Dict[str, Any]",
                    "backup.config.Config"
                ]
            }
        }
    },
    "ddionrails-master/tests/config/__init__.py": {},
    "ddionrails-master/tests/data/conftest.py": {
        "invalid_dataset_data": {
            "name": "invalid_dataset_data",
            "location": 9,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "valid_dataset_data": {
            "name": "valid_dataset_data",
            "location": 15,
            "return": [
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "study": [
                    "dict",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "invalid_variable_data": {
            "name": "invalid_variable_data",
            "location": 21,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "study": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "valid_variable_data": {
            "name": "valid_variable_data",
            "location": 27,
            "return": [
                "Dict[str, Union[str, Any]]",
                "str",
                "List[str]",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "study": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "ddionrails-master/tests/data/factories.py": {},
    "ddionrails-master/tests/data/test_admin.py": {
        "test_dataset_admin_list": {
            "name": "test_dataset_admin_list",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "dataset": [
                    "bool"
                ]
            }
        },
        "test_dataset_admin_detail": {
            "name": "test_dataset_admin_detail",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "dataset": [
                    "dict"
                ]
            }
        },
        "test_variable_admin_list": {
            "name": "test_variable_admin_list",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "variable": []
            }
        },
        "test_variable_admin_detail": {
            "name": "test_variable_admin_detail",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [
                    "tests._TestClientFactory"
                ],
                "variable": [
                    "Type",
                    "Optional[\"Game\"]",
                    "django.core.managemenbase.CommandParser",
                    "str"
                ]
            }
        },
        "test_transformation_admin_list": {
            "name": "test_transformation_admin_list",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "transformation": [
                    "bool"
                ]
            }
        },
        "test_transformation_admin_detail": {
            "name": "test_transformation_admin_detail",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "transformation": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/data/test_documents.py": {
        "test_variable_search_document_fields": {
            "name": "test_variable_search_document_fields",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "variable": [
                    "str",
                    "core_lib.core.models.Venue",
                    "bool"
                ]
            }
        },
        "test_variable_search_document_fields_missing_related_objects": {
            "name": "test_variable_search_document_fields_missing_related_objects",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "variable": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_variable_search_document_fields_string_representing_missing": {
            "name": "test_variable_search_document_fields_string_representing_missing",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "variable": [
                    "Callable",
                    "Union[int, str]"
                ],
                "conceptual_dataset": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "analysis_unit": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "period": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "ddionrails-master/tests/data/test_forms.py": {
        "TestDatasetForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "invalid_dataset_data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "TestDatasetForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_dataset_data": [
                    "dict",
                    "bool",
                    "Optional[Exception]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestDatasetForm.test_form_with_valid_data_uppercase": {
            "name": "test_form_with_valid_data_uppercase",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_dataset_data": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestVariableForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "invalid_variable_data": [
                    "str"
                ]
            }
        },
        "TestVariableForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_variable_data": [
                    "Callable[[Any, Any], Any]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestVariableForm.test_form_with_valid_data_with_concept": {
            "name": "test_form_with_valid_data_with_concept",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_variable_data": [
                    "Callable[[Any, Any], Any]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ddionrails-master/tests/data/test_helpers.py": {
        "_variables": {
            "name": "_variables",
            "location": 20,
            "return": [],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "_label_table": {
            "name": "_label_table",
            "location": 38,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "variables": [
                    "str",
                    "accounts.models.AccountPermissionType",
                    "Callable",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestLabelTable.test_init_method": {
            "name": "test_init_method",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLabelTable.test_label_render_limit": {
            "name": "test_label_render_limit",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Dict[str, Variable]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLabelTable.test_variable_render_limit": {
            "name": "test_variable_render_limit",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "models.Dominion",
                    "db.models.Cowboy"
                ]
            }
        },
        "TestLabelTable.test_to_html": {
            "name": "test_to_html",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "dict",
                    "Dict[str, Variable]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLabelTable.test_init_method_without_period": {
            "name": "test_init_method_without_period",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "ddionrails.data.models.Variable"
                ]
            }
        },
        "TestLabelTable.test_to_dict_method": {
            "name": "test_to_dict_method",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "grouper.models.user.User",
                    "List[str]"
                ],
                "variables": [
                    "str",
                    "Dict[str, Any]",
                    "models.Dominion",
                    "ddionrails.data.models.Variable"
                ]
            }
        },
        "TestLabelTable.test_simplify_label_method": {
            "name": "test_simplify_label_method",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label_table": []
            }
        },
        "TestLabelTable.test_simplify_label_method_with_non_string_label": {
            "name": "test_simplify_label_method_with_non_string_label",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label_table": []
            }
        }
    },
    "ddionrails-master/tests/data/test_imports.py": {
        "_dataset_csv_importer": {
            "name": "_dataset_csv_importer",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "study": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "_dataset_json_importer": {
            "name": "_dataset_json_importer",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "study": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "_variable_importer": {
            "name": "_variable_importer",
            "location": 46,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Dict[str, Variable]",
                "str",
                "Dict[str, Set[str]]",
                "netCDF4.Dataset"
            ],
            "arguments": {
                "study": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "_transformation_importer": {
            "name": "_transformation_importer",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "TestDatasetImport.test__import_dataset_links_method_gets_called": {
            "name": "test__import_dataset_links_method_gets_called",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_import_dataset_links": [
                    "unittesmock.MagicMock"
                ],
                "dataset_csv_importer": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestDatasetImport.test__import_dataset_links_method_with_minimal_fields": {
            "name": "test__import_dataset_links_method_with_minimal_fields",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "dataset_csv_importer": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestDatasetImport.test__import_dataset_links_method_with_more_fields": {
            "name": "test__import_dataset_links_method_with_more_fields",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "dataset_csv_importer": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestDatasetJsonImport.test_execute_import_method": {
            "name": "test_execute_import_method",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "tests.async_mock.MagicMock",
                    "str",
                    "int",
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "dataset_json_importer": []
            }
        },
        "TestDatasetJsonImport.test_import_dataset_method": {
            "name": "test_import_dataset_method",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "tests.async_mock.MagicMock",
                    "str",
                    "int",
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "dataset_json_importer": []
            }
        },
        "TestDatasetJsonImport.test_import_dataset_method_with_dictionary": {
            "name": "test_import_dataset_method_with_dictionary",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "tests.async_mock.MagicMock",
                    "str",
                    "int",
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "dataset_json_importer": []
            }
        },
        "TestDatasetJsonImport.test_import_variable_method": {
            "name": "test_import_variable_method",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_json_importer": [],
                "dataset": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestDatasetJsonImport.test_import_variable_method_without_statistics": {
            "name": "test_import_variable_method_without_statistics",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_json_importer": [],
                "dataset": [
                    "tests.basilisp.helpers.CompileFn",
                    "Callable",
                    "core.models.Grouping",
                    "int"
                ]
            }
        },
        "TestDatasetJsonImport.test_import_variable_method_without_categories": {
            "name": "test_import_variable_method_without_categories",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_json_importer": [],
                "dataset": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "TestDatasetJsonImport.test_import_variable_method_with_uni_key": {
            "name": "test_import_variable_method_with_uni_key",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_json_importer": [
                    "bool"
                ],
                "dataset": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestTransformationImport.test_import_element_method": {
            "name": "test_import_element_method",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transformation_importer": [
                    "mock.Mock",
                    "str",
                    "int",
                    "unittesmock.MagicMock"
                ],
                "study": [
                    "Callable",
                    "pathlib.Path",
                    "core.models.Grouping",
                    "purplship.core.models.ShipmentRequest"
                ],
                "dataset": [
                    "Callable",
                    "pathlib.Path",
                    "core.models.Grouping",
                    "purplship.core.models.ShipmentRequest"
                ]
            }
        },
        "TestTransformationImport.test_import_element_method_fails": {
            "name": "test_import_element_method_fails",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transformation_importer": [
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Any]"
                ],
                "study": [
                    "tests.basilisp.helpers.CompileFn",
                    "core.models.Grouping"
                ],
                "dataset": [
                    "tests.basilisp.helpers.CompileFn",
                    "core.models.Grouping"
                ]
            }
        },
        "TestVariableImport.test_variable_import": {
            "name": "test_variable_import",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableImport.test_variable_import_with_orphaned_concept": {
            "name": "test_variable_import_with_orphaned_concept",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableImport.test_variable_import_without_concept_csv": {
            "name": "test_variable_import_without_concept_csv",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableImport.test_import_element_method": {
            "name": "test_import_element_method",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "variable_importer": [
                    "django.db.models.QuerySet"
                ],
                "dataset": [
                    "Callable[[List, bool], None]",
                    "app.models.Game"
                ]
            }
        },
        "TestVariableImport.test_import_element_method_fails": {
            "name": "test_import_element_method_fails",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "capsys": [],
                "variable_importer": [
                    "\"App\""
                ],
                "dataset": []
            }
        },
        "TestVariableImport.test_import_variable_method": {
            "name": "test_import_variable_method",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable_importer": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "variable": [
                    "dict",
                    "bool"
                ]
            }
        },
        "TestVariableImport.test_import_variable_method_with_concept_name": {
            "name": "test_import_variable_method_with_concept_name",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable_importer": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightFolderCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "variable": []
            }
        },
        "TestVariableImageImport.setUp": {
            "name": "setUp",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/data/test_models.py": {
        "_related_variables_by_concept": {
            "name": "_related_variables_by_concept",
            "location": 19,
            "return": [
                "str",
                "Optional[db.models.Taxon]",
                "Optional[str]"
            ],
            "arguments": {
                "variable": [
                    "str",
                    "Exception",
                    "Callable",
                    "KT"
                ],
                "concept": [
                    "Type",
                    "dict",
                    "bytearray",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "update_variable": {
            "name": "update_variable",
            "location": 269,
            "return": [
                "Mapping[str, Any]",
                "str",
                "type",
                "bool"
            ],
            "arguments": {
                "variable": [
                    "ddionrails.data.models.Variable",
                    "type"
                ]
            }
        },
        "TestVariable.test_target_variables_dict": {
            "name": "test_target_variables_dict",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_origin_variables_dict": {
            "name": "test_origin_variables_dict",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable._target_variable": {
            "name": "_target_variable",
            "location": 52,
            "return": [
                "str",
                "Iterator",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_sorting": {
            "name": "test_sorting",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_sorting_error": {
            "name": "test_sorting_error",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariableModel.test_absolute_url_method": {
            "name": "test_absolute_url_method",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "TestVariableModel.test_get_method": {
            "name": "test_get_method",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "bool",
                    "ddionrails.data.models.Variable"
                ]
            }
        },
        "TestVariableModel.test_get_study": {
            "name": "test_get_study",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "bool",
                    "django.db.models.Model",
                    "Type[Any]"
                ]
            }
        },
        "TestVariableModel.test_get_study_with_id": {
            "name": "test_get_study_with_id",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "app.models.Tweet",
                    "type",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestVariableModel.test_get_concept": {
            "name": "test_get_concept",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "concept": [
                    "Callable",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestVariableModel.test_get_concept_id": {
            "name": "test_get_concept_id",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "concept": [
                    "Type",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "TestVariableModel.test_get_concept_default": {
            "name": "test_get_concept_default",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestVariableModel.test_get_related_variables_without_concept": {
            "name": "test_get_related_variables_without_concept",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Callable",
                    "models.Project",
                    "models.User",
                    "Type[Any]",
                    "str"
                ]
            }
        },
        "TestVariableModel.test_get_related_variables_with_concept": {
            "name": "test_get_related_variables_with_concept",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "related_variables_by_concept": [
                    "deeplearning.ml4pl.models.batch.BatchIterator",
                    "type"
                ]
            }
        },
        "TestVariableModel.test_get_related_variables_by_period_empty": {
            "name": "test_get_related_variables_by_period_empty",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "app.models.Tweet",
                    "django.db.models.Model",
                    "Tuple[Type]"
                ]
            }
        },
        "TestVariableModel.test_get_related_variables_by_period": {
            "name": "test_get_related_variables_by_period",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "related_variables_by_concept": [
                    "deeplearning.ml4pl.models.batch.BatchIterator",
                    "type"
                ]
            }
        },
        "TestVariableModel.test_get_related_variables_by_period_none_period": {
            "name": "test_get_related_variables_by_period_none_period",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "related_variables_by_concept": []
            }
        },
        "TestVariableModel.test_category_list_method_without_categories": {
            "name": "test_category_list_method_without_categories",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str"
                ]
            }
        },
        "TestVariableModel.test_category_list_method": {
            "name": "test_category_list_method",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestVariableModel.test_category_list_method_without_labels_de": {
            "name": "test_category_list_method_without_labels_de",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "dict"
                ]
            }
        },
        "TestVariableModel.test_is_categorical_method": {
            "name": "test_is_categorical_method",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestVariableModel.test_is_categorical_method_fails": {
            "name": "test_is_categorical_method_fails",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "TestVariableModel.test_has_translations": {
            "name": "test_has_translations",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "TestVariableModel.test_translation_languages": {
            "name": "test_translation_languages",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "TestVariableModel.test_translation_table": {
            "name": "test_translation_table",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Type[Any]",
                    "Optional[Dict[Hashable, Any]]",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "TestVariableModel.test_content_dict": {
            "name": "test_content_dict",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "dict",
                    "str",
                    "ddionrails.data.models.Variable",
                    "Set[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "TestVariableModel.test_to_topic_dict": {
            "name": "test_to_topic_dict",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "NamedTuple",
                    "ddionrails.data.models.Variable",
                    "bool"
                ]
            }
        },
        "TestVariableModel.test_to_topic_dict_de": {
            "name": "test_to_topic_dict_de",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "List[str]",
                    "Callable[..., Awaitable[None]]",
                    "Exception",
                    "MutableMapping[str, str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestVariableModel.test_to_topic_dict_concept": {
            "name": "test_to_topic_dict_concept",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "Exception",
                    "str"
                ],
                "concept": [
                    "str",
                    "T",
                    "Container[T]",
                    "zerver.models.UserProfile",
                    "Callable[..., None]",
                    "Sequence[Tuple[str, Any]]",
                    "Type"
                ]
            }
        },
        "TestDatasetModel.test_absolute_url_method": {
            "name": "test_absolute_url_method",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "Callable"
                ]
            }
        },
        "TestDatasetModel.test_direct_url_method": {
            "name": "test_direct_url_method",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": []
            }
        }
    },
    "ddionrails-master/tests/data/test_views.py": {
        "TestDatasetDetailView.test_detail_view_with_existing_names": {
            "name": "test_detail_view_with_existing_names",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "dataset": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Callable"
                ]
            }
        },
        "TestDatasetDetailView.test_detail_view_with_invalid_study_name": {
            "name": "test_detail_view_with_invalid_study_name",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "dataset": [
                    "Optional[Iterable[Any]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[Tuple[float, float]]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestDatasetDetailView.test_detail_view_with_invalid_dataset_name": {
            "name": "test_detail_view_with_invalid_dataset_name",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "dataset": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestVariableDetailView.test_detail_view_with_existing_names": {
            "name": "test_detail_view_with_existing_names",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "variable": [
                    "dict",
                    "estimark.application.domain.models.Entity"
                ]
            }
        },
        "TestVariableRedirectView.test_redirect_view_with_valid_pk": {
            "name": "test_redirect_view_with_valid_pk",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "List[str]",
                    "bool",
                    "str"
                ],
                "variable": [
                    "jumeaux.models.Reqs2ReqsAddOnPayload"
                ]
            }
        },
        "TestVariableRedirectView.test_redirect_view_with_invalid_pk": {
            "name": "test_redirect_view_with_invalid_pk",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/data/__init__.py": {},
    "ddionrails-master/tests/functional/conftest.py": {
        "_tmp_dir": {
            "name": "_tmp_dir",
            "location": 13,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "ddionrails-master/tests/functional/__init__.py": {},
    "ddionrails-master/tests/functional/browser/conftest.py": {
        "splinter_webdriver": {
            "name": "splinter_webdriver",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "splinter_remote_url": {
            "name": "splinter_remote_url",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "authenticated_browser": {
            "name": "authenticated_browser",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "browser": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "client": [],
                "live_server": [
                    "str"
                ],
                "user": [
                    "str",
                    "bool"
                ]
            }
        },
        "login_url": {
            "name": "login_url",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "live_server": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "search_url": {
            "name": "search_url",
            "location": 45,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "live_server": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/test_navigation.py": {
        "test_get_contact_page_from_home": {
            "name": "test_get_contact_page_from_home",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "live_server": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_get_imprint_page_from_home": {
            "name": "test_get_imprint_page_from_home",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "live_server": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_get_login_page_from_home": {
            "name": "test_get_login_page_from_home",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "live_server": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_get_back_home_from_other_page": {
            "name": "test_get_back_home_from_other_page",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "search_url": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "float"
                ]
            }
        },
        "test_get_register_page_from_login": {
            "name": "test_get_register_page_from_login",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "Optional[Callable[..., Any]]",
                    "bool",
                    "Optional[Callable[[str], bool]]"
                ],
                "login_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_password_reset_page_from_login": {
            "name": "test_get_password_reset_page_from_login",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "login_url": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_study_link_from_home_page_list": {
            "name": "test_study_link_from_home_page_list",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "live_server": [
                    "Dict[str, Sequence[str]]"
                ],
                "study": []
            }
        }
    },
    "ddionrails-master/tests/functional/browser/test_workspace.py": {
        "test_login_with_known_user": {
            "name": "test_login_with_known_user",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "Dict[str, Any]"
                ],
                "login_url": [
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_login_redirects_to_same_page": {
            "name": "test_login_redirects_to_same_page",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [],
                "live_server": [
                    "str"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_login_with_unknown_user": {
            "name": "test_login_with_unknown_user",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "login_url": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_logout_with_known_user": {
            "name": "test_logout_with_known_user",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "authenticated_browser": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "login_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_register_user": {
            "name": "test_register_user",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [],
                "live_server": [
                    "str"
                ]
            }
        },
        "test_create_basket": {
            "name": "test_create_basket",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "authenticated_browser": [],
                "live_server": [
                    "str",
                    "int"
                ],
                "study": [
                    "core.models.Recipe"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/__init__.py": {},
    "ddionrails-master/tests/functional/browser/search/conftest.py": {
        "search_test_case": {
            "name": "search_test_case",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "concepts_index": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "float",
                    "str"
                ],
                "publications_index": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "float",
                    "str"
                ],
                "questions_index": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "float",
                    "str"
                ],
                "topics_index": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "float",
                    "str"
                ],
                "variables_index": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_base_search.py": {
        "test_base_search": {
            "name": "test_base_search",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "Callable[[Any, Any], Any]",
                    "List[str]",
                    "Callable",
                    "str",
                    "bool",
                    "int"
                ],
                "live_server": [
                    "str"
                ],
                "search_test_case": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_concepts_search.py": {
        "concepts_search_url": {
            "name": "concepts_search_url",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "live_server": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_concepts_search_is_accessible": {
            "name": "test_concepts_search_is_accessible",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "concepts_search_url": [
                    "List[Callable]",
                    "Callable"
                ],
                "search_test_case": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "concept": [
                    "Callable",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_concepts_search_by_label_de": {
            "name": "test_concepts_search_by_label_de",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "bool",
                    "dict"
                ],
                "concepts_search_url": [
                    "str",
                    "bool"
                ],
                "search_test_case": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "concept": [
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_publications_search.py": {
        "publications_search_url": {
            "name": "publications_search_url",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "live_server": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_publications_search_is_accessible": {
            "name": "test_publications_search_is_accessible",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "publications_search_url": [
                    "List[Callable]",
                    "Callable"
                ],
                "search_test_case": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_publications_search_study_facet_url_parameters": {
            "name": "test_publications_search_study_facet_url_parameters",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "bool",
                    "List[Tuple[Any, Any]]"
                ],
                "publications_search_url": [
                    "str",
                    "bool"
                ],
                "search_test_case": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_publications_search_type_facet_url_parameters": {
            "name": "test_publications_search_type_facet_url_parameters",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "publications_search_url": [
                    "str",
                    "bool"
                ],
                "search_test_case": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_publications_search_year_facet_url_parameters": {
            "name": "test_publications_search_year_facet_url_parameters",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "publications_search_url": [
                    "str",
                    "bool"
                ],
                "search_test_case": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_questions_search.py": {
        "questions_search_url": {
            "name": "questions_search_url",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "live_server": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_questions_search_is_accessible": {
            "name": "test_questions_search_is_accessible",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "questions_search_url": [
                    "List[Callable]",
                    "Callable"
                ],
                "search_test_case": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "question": [
                    "Callable",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_search.py": {
        "test_search_url": {
            "name": "test_search_url",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_all_url": {
            "name": "test_search_all_url",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_concepts_url": {
            "name": "test_search_concepts_url",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_publications_url": {
            "name": "test_search_publications_url",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_questions_url": {
            "name": "test_search_questions_url",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_topics_url": {
            "name": "test_search_topics_url",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_variables_url": {
            "name": "test_search_variables_url",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_topics_search.py": {
        "topics_search_url": {
            "name": "topics_search_url",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "live_server": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_questions_search_is_accessible": {
            "name": "test_questions_search_is_accessible",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "topics_search_url": [
                    "List[Callable]",
                    "Callable"
                ],
                "search_test_case": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "topic": [
                    "Callable",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/test_variables_search.py": {
        "variables_search_url": {
            "name": "variables_search_url",
            "location": 16,
            "return": [],
            "arguments": {
                "live_server": []
            }
        },
        "test_variables_search_is_accessible": {
            "name": "test_variables_search_is_accessible",
            "location": 20,
            "return": [],
            "arguments": {
                "browser": [],
                "variables_search_url": [],
                "search_test_case": [],
                "variable": []
            }
        },
        "test_variables_search_by_label_de": {
            "name": "test_variables_search_by_label_de",
            "location": 31,
            "return": [],
            "arguments": {
                "browser": [],
                "variables_search_url": [],
                "search_test_case": [],
                "variable": []
            }
        }
    },
    "ddionrails-master/tests/functional/browser/search/__init__.py": {},
    "ddionrails-master/tests/functional/imports/test_imports.py": {
        "_study_import_manager": {
            "name": "_study_import_manager",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "study": [
                    "models.data_frames.data_frame.GUIInterface",
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "settings": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "_clean_search_index": {
            "name": "_clean_search_index",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_unittest_settings": {
            "name": "_unittest_settings",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "settings": [
                    "str",
                    "Optional[Any]",
                    "bytes"
                ]
            }
        },
        "TestStudyImportManagerUnittest.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudyImportManagerUnittest.test_import_csv_topics_exception": {
            "name": "test_import_csv_topics_exception",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudyImportManagerUnittest.test_import_attachments_exception": {
            "name": "test_import_attachments_exception",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudyImportManagerUnittest.test_import_attachments": {
            "name": "test_import_attachments",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudyImportManager.test_import_study": {
            "name": "test_import_study",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestStudyImportManager.test_import_csv_topics": {
            "name": "test_import_csv_topics",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestStudyImportManager.test_import_json_topics": {
            "name": "test_import_json_topics",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "tests.setup.SetupTest",
                    "Dict[str, Sequence[str]]",
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "TestStudyImportManager.test_import_concepts": {
            "name": "test_import_concepts",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str",
                    "pathlib.Path",
                    "Optional[List[str]]"
                ],
                "topic": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestStudyImportManager.test_import_analysis_units": {
            "name": "test_import_analysis_units",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestStudyImportManager.test_import_periods": {
            "name": "test_import_periods",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ],
                "study": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestStudyImportManager.test_import_conceptual_datasets": {
            "name": "test_import_conceptual_datasets",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestStudyImportManager.test_import_instruments": {
            "name": "test_import_instruments",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str",
                    "pathlib.Path"
                ],
                "period": [],
                "analysis_unit": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestStudyImportManager.test_import_json_datasets": {
            "name": "test_import_json_datasets",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestStudyImportManager.test_import_csv_datasets": {
            "name": "test_import_csv_datasets",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "pathlib.Path",
                    "str"
                ],
                "period": [],
                "analysis_unit": [
                    "tests.async_mock.Mock"
                ],
                "conceptual_dataset": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestStudyImportManager.test_import_variables": {
            "name": "test_import_variables",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Dict[str, Any]"
                ],
                "variable": [
                    "dict"
                ],
                "concept": [
                    "int"
                ]
            }
        },
        "TestStudyImportManager.test_import_variables_empty_concept": {
            "name": "test_import_variables_empty_concept",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestStudyImportManager.test_import_questions_variables": {
            "name": "test_import_questions_variables",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "app.utils.models.ModelManager"
                ],
                "variable": [
                    "Dict[str, Sequence[Any]]"
                ],
                "question": [
                    "int"
                ]
            }
        },
        "TestStudyImportManager.test_import_concepts_questions": {
            "name": "test_import_concepts_questions",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ],
                "concept": [
                    "tests.async_mock.Mock"
                ],
                "question": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestStudyImportManager.test_import_transformations": {
            "name": "test_import_transformations",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "app.utils.models.ModelManager"
                ],
                "variable": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestStudyImportManager.test_import_publications": {
            "name": "test_import_publications",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_import_manager": [
                    "Dict[str, Sequence[str]]"
                ],
                "study": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestStudyImportManager.test_import_all": {
            "name": "test_import_all",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str",
                    "Optional[List[str]]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "ddionrails-master/tests/functional/imports/test_system_import.py": {
        "TestSystemImport.test_import_system": {
            "name": "test_import_system",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        }
    },
    "ddionrails-master/tests/functional/imports/__init__.py": {},
    "ddionrails-master/tests/imports/conftest.py": {
        "tmp_import_path": {
            "name": "tmp_import_path",
            "location": 14,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "request": [
                    "dict"
                ],
                "study": [
                    "tracim.models.data.Workspace",
                    "List[str]"
                ]
            }
        }
    },
    "ddionrails-master/tests/imports/test_helpers.py": {
        "_unittest_mock": {
            "name": "_unittest_mock",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "_question_images_csv": {
            "name": "_question_images_csv",
            "location": 53,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, List[str]]",
                "kedro.io.core.Version"
            ],
            "arguments": {
                "request": [],
                "questions_images_data_factory": []
            }
        },
        "_questions_images_data_factory": {
            "name": "_questions_images_data_factory",
            "location": 71,
            "return": [
                "str",
                "bool",
                "Iterator[travelfootprininsta.types.FeedItem]",
                "int"
            ],
            "arguments": {}
        },
        "TestHelpers.test_read_csv": {
            "name": "test_read_csv",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_read_csv_without_path": {
            "name": "test_read_csv_without_path",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_questions_images_data_factory.Factory.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_questions_images_data_factory.Factory.__call__": {
            "name": "__call__",
            "location": 93,
            "return": [
                "str",
                "List[str]",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_questions_images_data_factory.Factory.content": {
            "name": "content",
            "location": 102,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/imports/test_imports.py": {
        "filename": {
            "name": "filename",
            "location": 15,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "csv_importer": {
            "name": "csv_importer",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "study": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "jekyll_importer": {
            "name": "jekyll_importer",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "study": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "TestImport.test_run_import_method": {
            "name": "test_run_import_method",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestImport.test_read_file_method": {
            "name": "test_read_file_method",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestCSVImport.test_read_file_method": {
            "name": "test_read_file_method",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "csv_importer": [
                    "str"
                ]
            }
        },
        "TestCSVImport.test_execute_import_method": {
            "name": "test_execute_import_method",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "csv_importer": [
                    "bool"
                ]
            }
        },
        "TestCSVImport.test_process_element_method": {
            "name": "test_process_element_method",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_importer": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestImport.test_run_import_method.SampleImport.execute_import": {
            "name": "execute_import",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/imports/test_managers.py": {
        "repository": {
            "name": "repository",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "study": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "mocked_pull": {
            "name": "mocked_pull",
            "location": 20,
            "return": [
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "float"
                ]
            }
        },
        "mocked_clone_from": {
            "name": "mocked_clone_from",
            "location": 25,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "mocked_exists": {
            "name": "mocked_exists",
            "location": 30,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "mocked_list_all_files": {
            "name": "mocked_list_all_files",
            "location": 35,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "set",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "TestRepository.test_pull_or_clone_method": {
            "name": "test_pull_or_clone_method",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocked_clone_from": []
            }
        },
        "TestRepository.test_pull_or_clone_method_pull": {
            "name": "test_pull_or_clone_method_pull",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocked_exists": [],
                "mocker": []
            }
        },
        "TestRepository.test_set_commit_id_method": {
            "name": "test_set_commit_id_method",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRepository.test_set_branch_method": {
            "name": "test_set_branch_method",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "settings": []
            }
        },
        "TestRepository.test_is_import_required_method": {
            "name": "test_is_import_required_method",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRepository.test_is_import_required_method_false": {
            "name": "test_is_import_required_method_false",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRepository.test_list_changed_files_method": {
            "name": "test_list_changed_files_method",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestRepository.test_list_all_files_method": {
            "name": "test_list_all_files_method",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "Callable"
                ]
            }
        },
        "TestRepository.test_import_list_method": {
            "name": "test_import_list_method",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocker": []
            }
        },
        "TestRepository.test_import_list_method_import_all": {
            "name": "test_import_list_method_import_all",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repository": [],
                "mocker": []
            }
        }
    },
    "ddionrails-master/tests/imports/test_question_imports.py": {
        "_tmp_dir": {
            "name": "_tmp_dir",
            "location": 21,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "request": []
            }
        },
        "QuestionImport.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionImport.test_main_question_import": {
            "name": "test_main_question_import",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionImport.test_question_item_import": {
            "name": "test_question_item_import",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionImport.test_answer_import": {
            "name": "test_answer_import",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/imports/test_statistics_import.py": {
        "TestStatisticsImport.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatisticsImport.test_statistics_import": {
            "name": "test_statistics_import",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatisticsImport.test_independent_variable_import": {
            "name": "test_independent_variable_import",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatisticsImport.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/imports/__init__.py": {},
    "ddionrails-master/tests/imports/management_commands/test_add.py": {
        "mocked_delete_method": {
            "name": "mocked_delete_method",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "list",
                    "Optional[List[str]]",
                    "annofabapi.models.Inspection"
                ]
            }
        },
        "test_add_command_without_study_name": {
            "name": "test_add_command_without_study_name",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_command_without_repo_url": {
            "name": "test_add_command_without_repo_url",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_command_displays_help": {
            "name": "test_add_command_displays_help",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "option": [
                    "str"
                ],
                "capsys": []
            }
        },
        "test_add_command_creates_study_object": {
            "name": "test_add_command_creates_study_object",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_command_with_existing_study_name": {
            "name": "test_add_command_with_existing_study_name",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "study": []
            }
        }
    },
    "ddionrails-master/tests/imports/management_commands/test_remove.py": {
        "_mocked_delete_method": {
            "name": "_mocked_delete_method",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "list",
                    "Optional[List[str]]",
                    "annofabapi.models.Inspection"
                ]
            }
        },
        "test_remove_command_without_study_name": {
            "name": "test_remove_command_without_study_name",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove_command_displays_help": {
            "name": "test_remove_command_displays_help",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "option": [
                    "str"
                ],
                "capsys": []
            }
        },
        "test_remove_command_with_non_existing_study": {
            "name": "test_remove_command_with_non_existing_study",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_remove_command_aborts": {
            "name": "test_remove_command_aborts",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "List[Tuple[str, str]]"
                ],
                "mocked_delete_method": [
                    "str",
                    "int",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "capsys": [
                    "Optional[str]",
                    "str",
                    "src.core.model.scripScript"
                ]
            }
        },
        "test_remove_command_removes_study": {
            "name": "test_remove_command_removes_study",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "Iterable[Tuple[int, int]]"
                ],
                "mocked_delete_method": [
                    "str",
                    "int",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "capsys": [
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "test_remove_command_force_removes_study": {
            "name": "test_remove_command_force_removes_study",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "option": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "study": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "int"
                ],
                "mocked_delete_method": [
                    "Dict[str, Sequence[Any]]",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "int"
                ],
                "capsys": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/tests/imports/management_commands/test_system.py": {
        "test_system_command": {
            "name": "test_system_command",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "capsys": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ddionrails-master/tests/imports/management_commands/test_update.py": {
        "_mocked_update_single_study": {
            "name": "_mocked_update_single_study",
            "location": 36,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Callable[[bytes], None]",
                    "str",
                    "int",
                    "float",
                    "Generator"
                ]
            }
        },
        "_mocked_update_study_partial": {
            "name": "_mocked_update_study_partial",
            "location": 43,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Callable[[bytes], None]",
                    "str",
                    "int",
                    "float",
                    "Generator"
                ]
            }
        },
        "_mocked_update_all_studies_completely": {
            "name": "_mocked_update_all_studies_completely",
            "location": 50,
            "return": [
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "django.http.HttpRequest",
                    "List[Dict]"
                ]
            }
        },
        "_mocked_import_single_entity": {
            "name": "_mocked_import_single_entity",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "_mocked_import_all_entities": {
            "name": "_mocked_import_all_entities",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "logging.LogRecord",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[int]",
                    "logging.LogRecord",
                    "bool"
                ]
            }
        },
        "test_update_study_partial": {
            "name": "test_update_study_partial",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.Mock"
                ],
                "mocked_import_single_entity": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "core_lib.core.repositories.VenueRepository"
                ]
            }
        },
        "test_update_single_study": {
            "name": "test_update_single_study",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock",
                    "str",
                    "int"
                ]
            }
        },
        "test_update_single_study_local": {
            "name": "test_update_single_study_local",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "study": []
            }
        },
        "test_update_single_study_entity": {
            "name": "test_update_single_study_entity",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_update_single_study_entity_filename": {
            "name": "test_update_single_study_entity_filename",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "salon.models.Stylist"
                ],
                "mocked_import_single_entity": []
            }
        },
        "test_update_single_study_entity_filename_without_redis": {
            "name": "test_update_single_study_entity_filename_without_redis",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_update_single_study_entity_nonexistent_filename": {
            "name": "test_update_single_study_entity_nonexistent_filename",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_update_all_studies_completely": {
            "name": "test_update_all_studies_completely",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "List[T]",
                    "pathlib.Path",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocked_update_single_study": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_update_command_shows_help": {
            "name": "test_update_command_shows_help",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "option": [
                    "cli_ui.tests.MessageRecorder",
                    "pathlib.Path",
                    "int"
                ],
                "capsys": [
                    "_pytescapture.CaptureFixture",
                    "int",
                    "Sequence[int]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_update_command_without_study_name": {
            "name": "test_update_command_without_study_name",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_update_all_studies_completely": []
            }
        },
        "test_update_command_without_study_name_local": {
            "name": "test_update_command_without_study_name_local",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "option": [
                    "antidote.core.DependencyContainer",
                    "cli_ui.tests.MessageRecorder"
                ],
                "mocked_update_all_studies_completely": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_update_command_with_invalid_study_name": {
            "name": "test_update_command_with_invalid_study_name",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "_pytescapture.CaptureFixture",
                    "kata.data.repos.KataLanguageRepo",
                    "bytes"
                ]
            }
        },
        "test_update_command_with_valid_study_name": {
            "name": "test_update_command_with_valid_study_name",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]"
                ],
                "mocked_update_single_study": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_update_command_with_valid_study_name_local": {
            "name": "test_update_command_with_valid_study_name_local",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "dict",
                    "List[List[Any]]"
                ],
                "option": [
                    "str"
                ],
                "mocked_update_single_study": [
                    "str"
                ]
            }
        },
        "test_update_command_with_valid_study_name_and_entity": {
            "name": "test_update_command_with_valid_study_name_and_entity",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "Dict[str, str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "dict",
                    "List[Tuple[bool, Any]]"
                ],
                "mocked_update_single_study": [
                    "str"
                ]
            }
        },
        "test_update_command_with_valid_study_name_and_invalid_entity": {
            "name": "test_update_command_with_valid_study_name_and_invalid_entity",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "list",
                    "Tuple[Any, Any, Any]",
                    "List[Dict[str, str]]",
                    "List[str]"
                ]
            }
        },
        "test_update_command_with_valid_study_name_and_valid_entity_and_filename": {
            "name": "test_update_command_with_valid_study_name_and_valid_entity_and_filename",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str"
                ],
                "option": [
                    "str"
                ]
            }
        },
        "test_instrument_import": {
            "name": "test_instrument_import",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "period": [],
                "analysis_unit": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_update_command_with_valid_study_name_and_invalid_entity_and_filename": {
            "name": "test_update_command_with_valid_study_name_and_invalid_entity_and_filename",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "tests.models.Customer",
                    "int",
                    "dict"
                ],
                "option": [
                    "str",
                    "tests.models.Customer",
                    "int",
                    "dict"
                ],
                "capsys": [
                    "_pytescapture.CaptureFixture",
                    "Iterable",
                    "str",
                    "int",
                    "core.models.MyUser"
                ]
            }
        },
        "TestUpdate.setUp": {
            "name": "setUp",
            "location": 324,
            "return": [
                "Set[str]",
                "int",
                "str",
                "Callable[[str, str], float]",
                "Optional[str]",
                "Mapping[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdate.test_clean_update": {
            "name": "test_clean_update",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdate.test_basket_protection": {
            "name": "test_basket_protection",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/imports/management_commands/__init__.py": {},
    "ddionrails-master/tests/instruments/conftest.py": {
        "invalid_instrument_data": {
            "name": "invalid_instrument_data",
            "location": 9,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "study": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "valid_instrument_data": {
            "name": "valid_instrument_data",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "study": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "invalid_question_data": {
            "name": "invalid_question_data",
            "location": 21,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "instrument": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "valid_question_data": {
            "name": "valid_question_data",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "instrument": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/instruments/factories.py": {},
    "ddionrails-master/tests/instruments/test_admin.py": {
        "test_instrument_admin_list": {
            "name": "test_instrument_admin_list",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "instrument": [
                    "bool"
                ]
            }
        },
        "test_instrument_admin_detail": {
            "name": "test_instrument_admin_detail",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "instrument": [
                    "dict"
                ]
            }
        },
        "test_question_admin_list": {
            "name": "test_question_admin_list",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "question": [
                    "bool"
                ]
            }
        },
        "test_question_admin_detail": {
            "name": "test_question_admin_detail",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "question": [
                    "dict"
                ]
            }
        },
        "test_concept_question_admin_list": {
            "name": "test_concept_question_admin_list",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "concept_question": [
                    "bool"
                ]
            }
        },
        "test_concept_question_admin_detail": {
            "name": "test_concept_question_admin_detail",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "concept_question": [
                    "dict"
                ]
            }
        },
        "test_question_variable_admin_list": {
            "name": "test_question_variable_admin_list",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [
                    "str"
                ],
                "question_variable": []
            }
        },
        "test_question_variable_admin_detail": {
            "name": "test_question_variable_admin_detail",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [
                    "str"
                ],
                "question_variable": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/instruments/test_documents.py": {
        "test_question_search_document_fields": {
            "name": "test_question_search_document_fields",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "question": [
                    "Tuple[int, int]",
                    "str",
                    "NamedTuple"
                ]
            }
        },
        "test_variable_search_document_fields_missing_related_objects": {
            "name": "test_variable_search_document_fields_missing_related_objects",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "questions_index": [
                    "bool",
                    "str"
                ],
                "question": []
            }
        }
    },
    "ddionrails-master/tests/instruments/test_models.py": {
        "test_get_absolute_url_method": {
            "name": "test_get_absolute_url_method",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "instrument": [],
                "study": []
            }
        },
        "TestQuestionModel.test_get_absolute_url_method": {
            "name": "test_get_absolute_url_method",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "dict"
                ]
            }
        },
        "TestQuestionModel.test_get_direct_url_method": {
            "name": "test_get_direct_url_method",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestQuestionModel.test_layout_class_method": {
            "name": "test_layout_class_method",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Type",
                    "tests.conftesWorker"
                ]
            }
        },
        "TestQuestionModel.test_previous_question_method": {
            "name": "test_previous_question_method",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": []
            }
        },
        "TestQuestionModel.test_previous_question_method_without_previous_question": {
            "name": "test_previous_question_method_without_previous_question",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": []
            }
        },
        "TestQuestionModel.test_next_question_method": {
            "name": "test_next_question_method",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": []
            }
        },
        "TestQuestionModel.test_next_question_method_without_next_question": {
            "name": "test_next_question_method_without_next_question",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": []
            }
        },
        "TestQuestionModel.test_get_concepts_method_no_concept": {
            "name": "test_get_concepts_method_no_concept",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": []
            }
        },
        "TestQuestionModel.test_get_concepts_method_single_concept": {
            "name": "test_get_concepts_method_single_concept",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "concept": [
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Any]",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestQuestionModel.test_translation_languages_method": {
            "name": "test_translation_languages_method",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestQuestionModel.test_translate_item_method": {
            "name": "test_translate_item_method",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestionModel.test_comparison_string_method": {
            "name": "test_comparison_string_method",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ddionrails-master/tests/instruments/test_views.py": {
        "TestInstrumentDetailView.test_detail_view_with_existing_names": {
            "name": "test_detail_view_with_existing_names",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "instrument": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ]
            }
        },
        "TestInstrumentDetailView.test_detail_view_with_invalid_study_name": {
            "name": "test_detail_view_with_invalid_study_name",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "instrument": [
                    "Optional[Iterable[Any]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[Tuple[float, float]]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestInstrumentDetailView.test_detail_view_with_invalid_instrument_name": {
            "name": "test_detail_view_with_invalid_instrument_name",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "instrument": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "cli_ui.tests.MessageRecorder",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestInstrumentRedirectView.test_redirect_view_with_valid_id": {
            "name": "test_redirect_view_with_valid_id",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "instrument": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestInstrumentRedirectView.test_redirect_view_with_invalid_id": {
            "name": "test_redirect_view_with_invalid_id",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "uuid_identifier": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Dict[str, Sequence[Any]]",
                    "bool",
                    "tests.components.withings.common.ComponentFactory",
                    "Optional[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestQuestionRedirectView.test_redirect_view_with_valid_id": {
            "name": "test_redirect_view_with_valid_id",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "question": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestQuestionRedirectView.test_redirect_view_with_invalid_id": {
            "name": "test_redirect_view_with_invalid_id",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "uuid_identifier": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Dict[str, Sequence[Any]]",
                    "bool",
                    "tests.components.withings.common.ComponentFactory",
                    "Optional[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "ddionrails-master/tests/instruments/__init__.py": {},
    "ddionrails-master/tests/publications/conftest.py": {
        "attachment": {
            "name": "attachment",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        }
    },
    "ddionrails-master/tests/publications/factories.py": {},
    "ddionrails-master/tests/publications/test_admin.py": {
        "test_attachment_admin_list": {
            "name": "test_attachment_admin_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "attachment": [
                    "bool"
                ]
            }
        },
        "test_attachment_admin_detail": {
            "name": "test_attachment_admin_detail",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "attachment": [
                    "dict"
                ]
            }
        },
        "test_publication_admin_list": {
            "name": "test_publication_admin_list",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "publication": [
                    "bool"
                ]
            }
        },
        "test_publication_admin_detail": {
            "name": "test_publication_admin_detail",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "publication": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/publications/test_documents.py": {
        "test_publication_search_document_fields": {
            "name": "test_publication_search_document_fields",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "publication_with_umlauts": [
                    "core.models.Grouping",
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/publications/test_models.py": {
        "TestPublicationModel.test_get_absolute_url_method": {
            "name": "test_get_absolute_url_method",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "publication": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/publications/test_views.py": {
        "TestPublicationRedirectView.test_with_valid_id": {
            "name": "test_with_valid_id",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "publication": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestPublicationRedirectView.test_with_invalid_id": {
            "name": "test_with_invalid_id",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "uuid_identifier": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Dict[str, Sequence[Any]]",
                    "Optional[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "TestPublicationDetailView.test_detail_view_with_existing_names": {
            "name": "test_detail_view_with_existing_names",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "publication": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestPublicationDetailView.test_detail_view_with_invalid_study_name": {
            "name": "test_detail_view_with_invalid_study_name",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "publication": [
                    "str",
                    "int"
                ]
            }
        },
        "TestStudyPublicationList.test_with_valid_name": {
            "name": "test_with_valid_name",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "publication": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestStudyPublicationList.test_with_invalid_name": {
            "name": "test_with_invalid_name",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "ddionrails-master/tests/publications/__init__.py": {},
    "ddionrails-master/tests/studies/factories.py": {},
    "ddionrails-master/tests/studies/test_admin.py": {
        "test_study_admin_list": {
            "name": "test_study_admin_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "study": [
                    "bool"
                ]
            }
        },
        "test_study_admin_detail": {
            "name": "test_study_admin_detail",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "study": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/studies/test_context_processors.py": {
        "test_studies_processor_with_study": {
            "name": "test_studies_processor_with_study",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "study": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "rf": []
            }
        },
        "test_studies_processor_without_study": {
            "name": "test_studies_processor_without_study",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "rf": []
            }
        }
    },
    "ddionrails-master/tests/studies/test_forms.py": {
        "TestStudyForm.test_form_without_data": {
            "name": "test_form_without_data",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": [
                    "str"
                ]
            }
        },
        "TestStudyForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "TestStudyInitialForm.test_form_without_data": {
            "name": "test_form_without_data",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudyInitialForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        }
    },
    "ddionrails-master/tests/studies/test_imports.py": {
        "filename": {
            "name": "filename",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "study_importer": {
            "name": "study_importer",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "int",
                    "Callable[[str], str]"
                ]
            }
        },
        "study_description_importer": {
            "name": "study_description_importer",
            "location": 25,
            "return": [
                "bool",
                "Dict[str, bool]"
            ],
            "arguments": {
                "study": [
                    "str",
                    "Dict[str, str]"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestStudyImport.test_import_with_valid_data": {
            "name": "test_import_with_valid_data",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_importer": [
                    "Dict[str, Any]",
                    "mtg_ssm.scryfall.models.ScryObject"
                ]
            }
        },
        "TestStudyImport.test_import_with_invalid_data": {
            "name": "test_import_with_invalid_data",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_importer": [
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestStudyDescriptionImport.test_import_with_valid_data": {
            "name": "test_import_with_valid_data",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_description_importer": []
            }
        },
        "TestStudyDescriptionImport.test_import_with_invalid_data": {
            "name": "test_import_with_invalid_data",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study_description_importer": [
                    "core.models.Recipe"
                ]
            }
        }
    },
    "ddionrails-master/tests/studies/test_models.py": {
        "TestStudyModel.test_string_method": {
            "name": "test_string_method",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Callable"
                ]
            }
        },
        "TestStudyModel.test_get_absolute_url_method": {
            "name": "test_get_absolute_url_method",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "List[str]"
                ]
            }
        },
        "TestStudyModel.test_repo_url_method_https": {
            "name": "test_repo_url_method_https",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": []
            }
        },
        "TestStudyModel.test_repo_url_method_ssh": {
            "name": "test_repo_url_method_ssh",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": []
            }
        },
        "TestStudyModel.test_repo_url_method_exception": {
            "name": "test_repo_url_method_exception",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str",
                    "int"
                ],
                "settings": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestStudyModel.test_has_topics_method": {
            "name": "test_has_topics_method",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": []
            }
        },
        "TestStudyModel.test_has_topics_method_returns_true": {
            "name": "test_has_topics_method_returns_true",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [],
                "topic": [
                    "dict"
                ]
            }
        },
        "TestStudyModel.test_set_topiclist_method": {
            "name": "test_set_topiclist_method",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "str"
                ]
            }
        },
        "TestStudyModel.test_get_topiclist_method": {
            "name": "test_get_topiclist_method",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [],
                "topiclist": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestStudyModel.test_get_topiclist_method_without_topic_list": {
            "name": "test_get_topiclist_method_without_topic_list",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": []
            }
        }
    },
    "ddionrails-master/tests/studies/test_views.py": {
        "TestStudyDetailView.test_study_detail_view_with_existing_study_pk": {
            "name": "test_study_detail_view_with_existing_study_pk",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "study": [
                    "django.tesClient",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]"
                ]
            }
        },
        "TestStudyDetailView.test_study_detail_view_with_non_existing_study_name": {
            "name": "test_study_detail_view_with_non_existing_study_name",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestStudyTopicsView.test_study_topics_view_with_existing_study_name": {
            "name": "test_study_topics_view_with_existing_study_name",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "study": [
                    "str"
                ]
            }
        },
        "TestStudyTopicsView.test_study_topics_view_with_non_existing_study_name": {
            "name": "test_study_topics_view_with_non_existing_study_name",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "ddionrails-master/tests/studies/__init__.py": {},
    "ddionrails-master/tests/workspace/conftest.py": {
        "script": {
            "name": "script",
            "location": 12,
            "return": [
                "str",
                "Callable",
                "dict",
                "bool"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "_basket_variable": {
            "name": "_basket_variable",
            "location": 22,
            "return": [
                "str",
                "Iterator",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "Iterator"
                ],
                "db": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/factories.py": {},
    "ddionrails-master/tests/workspace/test_admin.py": {
        "test_basket_variable_admin_list": {
            "name": "test_basket_variable_admin_list",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [
                    "str"
                ],
                "basket_variable": []
            }
        },
        "test_basket_variable_admin_detail": {
            "name": "test_basket_variable_admin_detail",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [
                    "str"
                ],
                "basket_variable": [
                    "dict"
                ]
            }
        },
        "test_basket_admin_list": {
            "name": "test_basket_admin_list",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "basket": [
                    "bool"
                ]
            }
        },
        "test_basket_admin_detail": {
            "name": "test_basket_admin_detail",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "basket": [
                    "dict"
                ]
            }
        },
        "test_script_admin_list": {
            "name": "test_script_admin_list",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "script": [
                    "bool"
                ]
            }
        },
        "test_script_admin_detail": {
            "name": "test_script_admin_detail",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "admin_client": [],
                "script": [
                    "dict"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/test_backup.py": {
        "_clirunner": {
            "name": "_clirunner",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "TestUserResource.test_export": {
            "name": "test_export",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "salon.models.Stylist",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestUserResource.test_import": {
            "name": "test_import",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketResource.test_export": {
            "name": "test_export",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "dict",
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor",
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "TestBasketResource.test_import": {
            "name": "test_import",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.dto.NewUserRequest",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "dict"
                ],
                "study": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestBasketVariableResource.test_export": {
            "name": "test_export",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "pathlib.Path",
                    "core.D.Version",
                    "dict"
                ],
                "basket": [
                    "str"
                ]
            }
        },
        "TestBasketVariableResource.test_import": {
            "name": "test_import",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [],
                "variable": [
                    "dict",
                    "dep_check.models.Rules"
                ]
            }
        },
        "TestScriptResource.test_export": {
            "name": "test_export",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestScriptResource.test_import": {
            "name": "test_import",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "Dict[str, Any]"
                ],
                "basket": []
            }
        },
        "TestBackupManagementCommand.test_backup_users": {
            "name": "test_backup_users",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "clirunner": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "argument": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "TestBackupManagementCommand.test_backup_baskets": {
            "name": "test_backup_baskets",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "clirunner": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "argument": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestBackupManagementCommand.test_backup_scripts": {
            "name": "test_backup_scripts",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackupManagementCommand.test_backup_basket_variables": {
            "name": "test_backup_basket_variables",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackupManagementCommand.test_backup_all": {
            "name": "test_backup_all",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRestoreManagementCommand.test_restore_users": {
            "name": "test_restore_users",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argument": [],
                "client": [],
                "capsys": [
                    "_pytescapture.CaptureFixture",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestRestoreManagementCommand.test_restore_baskets": {
            "name": "test_restore_baskets",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "list",
                    "bool"
                ],
                "user": [],
                "study": [],
                "capsys": [
                    "_pytescapture.CaptureFixture",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "TestRestoreManagementCommand.test_restore_scripts": {
            "name": "test_restore_scripts",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRestoreManagementCommand.test_restore_basket_variables": {
            "name": "test_restore_basket_variables",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRestoreManagementCommand.test_restore_all": {
            "name": "test_restore_all",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ddionrails-master/tests/workspace/test_forms.py": {
        "valid_basket_data": {
            "name": "valid_basket_data",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "study": [
                    "List[str]",
                    "Type[T]",
                    "str",
                    "Iterable[str]"
                ],
                "user": [
                    "List[str]",
                    "Type[T]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "invalid_basket_csv_data": {
            "name": "invalid_basket_csv_data",
            "location": 20,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "valid_user_data": {
            "name": "valid_user_data",
            "location": 26,
            "return": [
                "dict",
                "int",
                "Dict[int, List[str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "valid_user_creation_data": {
            "name": "valid_user_creation_data",
            "location": 33,
            "return": [
                "int",
                "Exception",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "TestBasketForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": [
                    "bytes"
                ]
            }
        },
        "TestBasketForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_basket_data": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestUserCreationForm.test_form_with_invalid_data": {
            "name": "test_form_with_invalid_data",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_data": [
                    "dict",
                    "Mapping"
                ]
            }
        },
        "TestUserCreationForm.test_form_with_valid_data": {
            "name": "test_form_with_valid_data",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_user_creation_data": [
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/test_mixins.py": {
        "soepmixin": {
            "name": "soepmixin",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "script_dict": {
            "name": "script_dict",
            "location": 18,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "TestSoepMixin.test_generate_script_dict_method": {
            "name": "test_generate_script_dict_method",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepmixin": []
            }
        },
        "TestSoepMixin.test_create_dataset_dict_method": {
            "name": "test_create_dataset_dict_method",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepmixin": []
            }
        },
        "TestSoepMixin.test_enrich_dataset_dict_method": {
            "name": "test_enrich_dataset_dict_method",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepmixin": []
            }
        },
        "TestSoepMixin.test_validate_datasets_method": {
            "name": "test_validate_datasets_method",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script_dict": [
                    "int",
                    "Optional[Sequence['cirq.Qid']]",
                    "bytes"
                ],
                "soepmixin": [
                    "int",
                    "Optional[Sequence['cirq.Qid']]",
                    "bytes"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/test_models.py": {
        "_csv_heading": {
            "name": "_csv_heading",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "TestBasketModel.test_string_method": {
            "name": "test_string_method",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "Dict[str, Any]",
                    "set",
                    "tests.e2e.Helper"
                ]
            }
        },
        "TestBasketModel.test_absolute_url_method": {
            "name": "test_absolute_url_method",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestBasketModel.test_html_description_method": {
            "name": "test_html_description_method",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int",
                    "tests.async_mock.MagicMock"
                ],
                "basket": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestBasketModel.test_title_method": {
            "name": "test_title_method",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestBasketModel.test_title_method_with_label": {
            "name": "test_title_method_with_label",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "Dict[str, Sequence[Any]]",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestBasketModel.test_get_script_generators_method": {
            "name": "test_get_script_generators_method",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": []
            }
        },
        "TestBasketModel.test_get_script_generators_method_with_config": {
            "name": "test_get_script_generators_method_with_config",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "study": [
                    "kata.data.repos.HardCoded.ConfigRepo"
                ],
                "basket": [
                    "src.core.model.scripScript"
                ]
            }
        },
        "TestBasketModel.test_to_csv_method_with_empty_basket": {
            "name": "test_to_csv_method_with_empty_basket",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder"
                ],
                "csv_heading": [
                    "bool",
                    "Dict[str, float]"
                ]
            }
        },
        "TestBasketModel.test_to_csv_method_with_variable_in_basket": {
            "name": "test_to_csv_method_with_variable_in_basket",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "static_frame.core.series.Series"
                ],
                "variable": [
                    "asgard.models.spec.env.EnvSpec"
                ],
                "csv_heading": [
                    "tests.hints.RightAccumulatorCall",
                    "bool",
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall"
                ]
            }
        },
        "TestBasketModel.test_to_csv_method_with_variable_and_concept_in_basket": {
            "name": "test_to_csv_method_with_variable_and_concept_in_basket",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "static_frame.core.series.Series"
                ],
                "variable": [
                    "NamedTuple",
                    "ddionrails.data.models.Variable",
                    "Mapping"
                ],
                "concept": [
                    "ddionrails.data.models.Variable",
                    "list"
                ],
                "csv_heading": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.hints.LeftAccumulatorCall"
                ]
            }
        },
        "TestBasketModel.test_backup": {
            "name": "test_backup",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "models.Form700Filing",
                    "str",
                    "dict",
                    "models.user.User"
                ],
                "variable": []
            }
        },
        "TestBasketModel.test_study_specific_backup": {
            "name": "test_study_specific_backup",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basket": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "models.Project",
                    "models.Category",
                    "ddionrails.data.models.Variable"
                ],
                "variable": [
                    "List[str]",
                    "estimark.application.domain.models.Entity",
                    "Dict[Tuple[RESOURCE, EVT], pydcop.dcop.objects.Variable]",
                    "Callable"
                ]
            }
        },
        "TestBasketVariableModel.test_clean_method": {
            "name": "test_clean_method",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableModel.test_clean_method_fails": {
            "name": "test_clean_method_fails",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableModel.test_remove_dangling_basket_variables": {
            "name": "test_remove_dangling_basket_variables",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasketVariableModel.test_remove_dangling_basket_variables_study_specific": {
            "name": "test_remove_dangling_basket_variables_study_specific",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScriptModel.test_get_config_method": {
            "name": "test_get_config_method",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestScriptModel.test_get_config_method_with_local_config": {
            "name": "test_get_config_method_with_local_config",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "dict"
                ]
            }
        },
        "TestScriptModel.test_get_settings_method": {
            "name": "test_get_settings_method",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": []
            }
        },
        "TestScriptModel.test_get_settings_method_without_settings_dict": {
            "name": "test_get_settings_method_without_settings_dict",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": []
            }
        },
        "TestScriptModel.test_get_script_input_method": {
            "name": "test_get_script_input_method",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "script": [
                    "str"
                ]
            }
        },
        "TestScriptModel.test_title_method": {
            "name": "test_title_method",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestScriptModel.test_title_method_with_label": {
            "name": "test_title_method_with_label",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "Dict[str, Sequence[Any]]",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestScriptModel.test_string_method": {
            "name": "test_string_method",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "set",
                    "Optional[\"Game\"]",
                    "str"
                ]
            }
        },
        "TestScriptModel.test_absolute_url_method": {
            "name": "test_absolute_url_method",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/test_scripts.py": {
        "_soepstata": {
            "name": "_soepstata",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "script": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "basket": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "_soepspss": {
            "name": "_soepspss",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "script": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "basket": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "_soepr": {
            "name": "_soepr",
            "location": 27,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "script": [
                    "Callable",
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "basket": [
                    "Callable",
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "_script_config": {
            "name": "_script_config",
            "location": 33,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "script": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "List[str]"
                ],
                "basket": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "TestScriptConfig.test_get_script_input_method": {
            "name": "test_get_script_input_method",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "script_config": [
                    "dict",
                    "IO[str]"
                ]
            }
        },
        "TestScriptConfig.test_get_datasets_and_variables_method": {
            "name": "test_get_datasets_and_variables_method",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script_config": [
                    "Callable[[list], None]",
                    "bool"
                ],
                "variable": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "TestScriptConfig.test_get_config_method": {
            "name": "test_get_config_method",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSoepStata.test_render_individual_gender_method_with_male": {
            "name": "test_render_individual_gender_method_with_male",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": []
            }
        },
        "TestSoepStata.test_render_individual_gender_method_with_female": {
            "name": "test_render_individual_gender_method_with_female",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": []
            }
        },
        "TestSoepStata.test_render_individual_gender_method_with_both": {
            "name": "test_render_individual_gender_method_with_both",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": []
            }
        },
        "TestSoepStata.test_render_household_gender_method_with_both": {
            "name": "test_render_household_gender_method_with_both",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": []
            }
        },
        "TestSoepStata.test_disclaimer": {
            "name": "test_disclaimer",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": [
                    "Callable"
                ]
            }
        },
        "TestSoepStata.test_render_sort_pfad": {
            "name": "test_render_sort_pfad",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": [
                    "Callable"
                ]
            }
        },
        "TestSoepStata.test_render_done": {
            "name": "test_render_done",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepstata": [
                    "Callable"
                ]
            }
        },
        "TestSoepSpssClass.test_render_individual_gender_method_with_male": {
            "name": "test_render_individual_gender_method_with_male",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepspss": []
            }
        },
        "TestSoepSpssClass.test_render_individual_gender_method_with_female": {
            "name": "test_render_individual_gender_method_with_female",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepspss": []
            }
        },
        "TestSoepSpssClass.test_render_individual_gender_method_with_both": {
            "name": "test_render_individual_gender_method_with_both",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepspss": []
            }
        },
        "TestSoepSpssClass.test_render_household_gender_method_with_both": {
            "name": "test_render_household_gender_method_with_both",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepspss": []
            }
        },
        "TestSoepSpssClass.test_render_done": {
            "name": "test_render_done",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepspss": [
                    "Callable"
                ]
            }
        },
        "TestSoepR.test_render_individual_gender_method_with_male": {
            "name": "test_render_individual_gender_method_with_male",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepr": []
            }
        },
        "TestSoepR.test_render_individual_gender_method_with_female": {
            "name": "test_render_individual_gender_method_with_female",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepr": []
            }
        },
        "TestSoepR.test_render_individual_gender_method_with_both": {
            "name": "test_render_individual_gender_method_with_both",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepr": []
            }
        },
        "TestSoepR.test_render_household_gender_method_with_both": {
            "name": "test_render_household_gender_method_with_both",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepr": []
            }
        },
        "TestSoepR.test_render_done": {
            "name": "test_render_done",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "soepr": [
                    "Callable"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/test_views.py": {
        "client_with_referer": {
            "name": "client_with_referer",
            "location": 20,
            "return": [
                "django.tesClient"
            ],
            "arguments": {}
        },
        "basket_variable_with_concept": {
            "name": "basket_variable_with_concept",
            "location": 26,
            "return": [
                "T",
                "bool",
                "str"
            ],
            "arguments": {
                "basket_variable": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "concept": [
                    "dict",
                    "Dict[str, Any]",
                    "models.User"
                ]
            }
        },
        "TestOwnBasketOnlyDecorator.test_basket_belongs_to_user": {
            "name": "test_basket_belongs_to_user",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "clienmodels.Client"
                ],
                "basket": []
            }
        },
        "TestOwnBasketOnlyDecorator.test_basket_belongs_to_other_user": {
            "name": "test_basket_belongs_to_other_user",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "basket": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestOwnBasketOnlyDecorator.test_basket_does_not_exist": {
            "name": "test_basket_does_not_exist",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "neuromation.api.Client"
                ]
            }
        },
        "TestScriptDetailView.test_script_detail_view_with_script_created_before_update": {
            "name": "test_script_detail_view_with_script_created_before_update",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "clienmodels.Client"
                ],
                "basket": [],
                "script": []
            }
        },
        "TestAccountOverview.test_account_overview_anonymous_user": {
            "name": "test_account_overview_anonymous_user",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "neuromation.api.Client"
                ]
            }
        },
        "TestAccountOverview.test_account_overview_authenticated_user": {
            "name": "test_account_overview_authenticated_user",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ],
                "user": [
                    "core.models.MyUser",
                    "authark.application.domain.common.User",
                    "django.tesClient",
                    "neuromation.api.Client",
                    "zerver.models.UserProfile",
                    "core.models.Recipe",
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "TestBasketList.test_basket_list_anonymous_user": {
            "name": "test_basket_list_anonymous_user",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "basket": [
                    "bool",
                    "neuromation.api.Client"
                ]
            }
        },
        "TestBasketList.test_basket_list_authenticated_user": {
            "name": "test_basket_list_authenticated_user",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ],
                "basket": [
                    "str",
                    "core.models.MyUser",
                    "neuromation.api.Client",
                    "tests.conftesWorker"
                ]
            }
        },
        "TestAddVariable.test_with_valid_ids": {
            "name": "test_with_valid_ids",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "clienmodels.Client",
                    "server.models.PickupPoint"
                ],
                "basket": [],
                "variable": [
                    "dict"
                ]
            }
        },
        "TestAddVariable.test_with_invalid_basket_id": {
            "name": "test_with_invalid_basket_id",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "variable": [
                    "type"
                ]
            }
        },
        "TestAddVariable.test_with_invalid_variable_id": {
            "name": "test_with_invalid_variable_id",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "server.models.PickupPoint",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "clienmodels.Client",
                    "tests.setup.SetupTest"
                ],
                "basket": [],
                "uuid_identifier": [
                    "core.models.Grouping",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestRemoveVariable.test_with_valid_ids": {
            "name": "test_with_valid_ids",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "clienmodels.Client"
                ],
                "basket_variable": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestRemoveVariable.test_with_invalid_basket_id": {
            "name": "test_with_invalid_basket_id",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "basket_variable": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestRemoveVariable.test_with_invalid_variable_id": {
            "name": "test_with_invalid_variable_id",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "basket_variable": [
                    "int",
                    "bool"
                ],
                "uuid_identifier": [
                    "str"
                ]
            }
        },
        "TestAddConcept.test_with_valid_ids": {
            "name": "test_with_valid_ids",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "clienmodels.Client",
                    "server.models.PickupPoint"
                ],
                "basket": [],
                "variable_with_concept": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestAddConcept.test_with_invalid_basket_id": {
            "name": "test_with_invalid_basket_id",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [],
                "variable_with_concept": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestAddConcept.test_with_invalid_concept_id": {
            "name": "test_with_invalid_concept_id",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "server.models.PickupPoint",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "clienmodels.Client",
                    "tests.setup.SetupTest"
                ],
                "basket": [],
                "uuid_identifier": [
                    "core.models.Grouping",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestRemoveConcept.test_with_valid_ids": {
            "name": "test_with_valid_ids",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "Callable[[List, bool], None]",
                    "tests.setup.SetupTest"
                ],
                "basket_variable_with_concept": []
            }
        },
        "TestRemoveConcept.test_with_invalid_basket_id": {
            "name": "test_with_invalid_basket_id",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "Callable[[List, bool], None]",
                    "tests.setup.SetupTest"
                ],
                "basket_variable_with_concept": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "TestRemoveConcept.test_with_invalid_concept_id": {
            "name": "test_with_invalid_concept_id",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_with_referer": [
                    "Callable[[List, bool], None]",
                    "tests.setup.SetupTest"
                ],
                "basket_variable_with_concept": [
                    "Callable[[List, bool], None]"
                ],
                "uuid_identifier": [
                    "bool",
                    "Callable",
                    "str",
                    "core.models.Grouping"
                ]
            }
        },
        "TestBasketToCsv.test_with_valid_id": {
            "name": "test_with_valid_id",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "basket_variable": [
                    "bool"
                ]
            }
        },
        "TestBasketToCsv.test_with_invalid_id": {
            "name": "test_with_invalid_id",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "basket_variable": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "TestBasketDetail.test_with_valid_id": {
            "name": "test_with_valid_id",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "basket": [
                    "core.models.Grouping",
                    "Callable"
                ]
            }
        },
        "TestBasketDetail.test_with_invalid_id": {
            "name": "test_with_invalid_id",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "basket": [
                    "str",
                    "tests.conftesWorker",
                    "core.models.MyUser",
                    "neuromation.api.Client"
                ]
            }
        },
        "TestBasketSearch.test_with_valid_id": {
            "name": "test_with_valid_id",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "basket": [
                    "core.models.Grouping",
                    "Callable"
                ]
            }
        },
        "TestBasketSearch.test_with_invalid_id": {
            "name": "test_with_invalid_id",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "basket": [
                    "str",
                    "tests.conftesWorker",
                    "core.models.MyUser",
                    "neuromation.api.Client"
                ]
            }
        },
        "TestUserDelete.test_with_valid_user": {
            "name": "test_with_valid_user",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ],
                "user": [
                    "core.models.MyUser",
                    "str",
                    "zerver.models.UserProfile",
                    "tests.conftesWorker",
                    "tests.hints.RightFolderCall",
                    "authark.application.domain.common.User",
                    "neuromation.api.Client"
                ]
            }
        }
    },
    "ddionrails-master/tests/workspace/__init__.py": {}
}
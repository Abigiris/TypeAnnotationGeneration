{
    "debate-checker-master/fact_checker.py": {
        "is_claim_a_quote": {
            "name": "is_claim_a_quote",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "claim": [
                    "str"
                ],
                "quote": [
                    "str"
                ],
                "similarity_threshold": [
                    "float",
                    "str",
                    "dict"
                ]
            }
        },
        "fact_check_claim": {
            "name": "fact_check_claim",
            "location": 37,
            "return": [
                "bool",
                "int",
                "tuple",
                "Iterable[List[str]]"
            ],
            "arguments": {
                "claim": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "bool"
                ],
                "FACTCHECK": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "debate-checker-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 13,
            "return": [
                "List[str]",
                "str",
                "list",
                "Iterable",
                "List[List[str]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "mypy_typecheck": {
            "name": "mypy_typecheck",
            "location": 29,
            "return": [
                "Iterator"
            ],
            "arguments": {}
        },
        "mypy_typecheck.list_files": {
            "name": "list_files",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "mypy_typecheck.py_file": {
            "name": "py_file",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "BuildCmd.run": {
            "name": "run",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "debate-checker-master/text/summarize.py": {
        "paragraph_to_summary": {
            "name": "paragraph_to_summary",
            "location": 17,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "paragraph": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ],
                "summary_len": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "debate-checker-master/text/textual_claims.py": {
        "listen_for_textual_claims": {
            "name": "listen_for_textual_claims",
            "location": 15,
            "return": [],
            "arguments": {
                "text_stream": []
            }
        },
        "clean_text": {
            "name": "clean_text",
            "location": 40,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "spacy_tokenizer": {
            "name": "spacy_tokenizer",
            "location": 46,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "find_numerical_claims": {
            "name": "find_numerical_claims",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "find_entity_and_event_properties": {
            "name": "find_entity_and_event_properties",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "find_position_statements": {
            "name": "find_position_statements",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "find_quote_verification_assessments": {
            "name": "find_quote_verification_assessments",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "predictors.transform": {
            "name": "transform",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "predictors.fit": {
            "name": "fit",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": []
            }
        },
        "predictors.get_params": {
            "name": "get_params",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        }
    },
    "debate-checker-master/text/utils.py": {
        "append_files_from_path": {
            "name": "append_files_from_path",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "Optional[str]",
                    "Union[List, str]",
                    "str"
                ]
            }
        },
        "flatten_list_of_lists": {
            "name": "flatten_list_of_lists",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "l": [
                    "List[List[str]]",
                    "int",
                    "Optional[Callable]",
                    "Callable",
                    "Union[int, float]"
                ]
            }
        }
    }
}
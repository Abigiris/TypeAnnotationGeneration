{
    "decision-engine-master/decision_engine/comparisons.py": {
        "Comparison.check": {
            "name": "check",
            "location": 8,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "NoOp.check": {
            "name": "check",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Equal.check": {
            "name": "check",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "NotEqual.check": {
            "name": "check",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "GreaterThan.check": {
            "name": "check",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "GreaterThanOrEqual.check": {
            "name": "check",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "LessThan.check": {
            "name": "check",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "LessThanOrEqual.check": {
            "name": "check",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        }
    },
    "decision-engine-master/decision_engine/engine.py": {
        "Engine.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Engine.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "Set[str]",
                "bool",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.decide": {
            "name": "decide",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "list",
                    "bytes"
                ]
            }
        }
    },
    "decision-engine-master/decision_engine/parser.py": {
        "load_json_file": {
            "name": "load_json_file",
            "location": 22,
            "return": [
                "str",
                "bool",
                "pathlib2.Path",
                "pathlib.Path",
                "List[str]",
                "path.Path",
                "Path"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "definition": [
                    "int",
                    "Callable",
                    "str"
                ],
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_check_param_type": {
            "name": "_check_param_type",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "param": [
                    "bool",
                    "Type",
                    "type"
                ]
            }
        },
        "_check_source_param_exists": {
            "name": "_check_source_param_exists",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "param": [
                    "str",
                    "int",
                    "bool"
                ],
                "sources": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_parse_source_params": {
            "name": "_parse_source_params",
            "location": 49,
            "return": [
                "set",
                "list",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "pathlib.Path",
                    "dict"
                ],
                "parsed_sources": [
                    "str",
                    "dict",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "parse_sources": {
            "name": "parse_sources",
            "location": 64,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "sources": [
                    "str",
                    "set",
                    "pathlib.Path"
                ]
            }
        },
        "_check_rule_param_exists": {
            "name": "_check_rule_param_exists",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "param": [
                    "str"
                ],
                "rules": [
                    "int",
                    "str",
                    "Dict[str, Set[str]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_parse_rule_params": {
            "name": "_parse_rule_params",
            "location": 85,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "str",
                    "List[pypi2nix.path.Path]",
                    "int",
                    "pypi2nix.path.Path"
                ],
                "parsed_rules": [
                    "dict",
                    "lib.Path",
                    "List[str]",
                    "str"
                ],
                "sources": [
                    "Dict[str, str]",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "parse_rules": {
            "name": "parse_rules",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rules": [
                    "Optional[int]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]"
                ],
                "sources": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "parse_engines": {
            "name": "parse_engines",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "engines": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "rules": [
                    "str"
                ]
            }
        },
        "parse_json": {
            "name": "parse_json",
            "location": 140,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "definition": [
                    "List[dict]",
                    "str",
                    "Optional[bool]",
                    "List[Dict[str, Any]]",
                    "pathlib.Path"
                ]
            }
        },
        "parse_json_file": {
            "name": "parse_json_file",
            "location": 153,
            "return": [
                "bool",
                "str",
                "pathlib.Path",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[Any]"
                ]
            }
        }
    },
    "decision-engine-master/decision_engine/rules.py": {
        "Rule.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Rule.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.check": {
            "name": "check",
            "location": 17,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SimpleComparisonRule.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source1": [
                    "str",
                    "Dict[str, Any]",
                    "list",
                    "bool"
                ],
                "source2": [
                    "str",
                    "Dict[str, Any]",
                    "list",
                    "bool"
                ],
                "comparison": [
                    "Set[str]",
                    "int",
                    "Callable",
                    "List[str]",
                    "str"
                ],
                "name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SimpleComparisonRule.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleComparisonRule.check": {
            "name": "check",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[dict]",
                    "dict"
                ]
            }
        },
        "BooleanOrRule.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BooleanOrRule.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "Type",
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanOrRule.check": {
            "name": "check",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "list",
                    "bytes"
                ]
            }
        },
        "BooleanAndRule.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BooleanAndRule.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "Type",
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanAndRule.check": {
            "name": "check",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "list",
                    "bytes"
                ]
            }
        }
    },
    "decision-engine-master/decision_engine/sources.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Source.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.get_value": {
            "name": "get_value",
            "location": 17,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "bytes",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "DictSource.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "dict",
                    "T"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DictSource.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "bytes",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictSource.get_value": {
            "name": "get_value",
            "location": 29,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "Optional[int]",
                "bool",
                "list",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[None, int, str]",
                    "bytes",
                    "Optional[dict]",
                    "dict"
                ]
            }
        },
        "FixedValueSource.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "Dict[str, Callable[[str], Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FixedValueSource.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str",
                "Dict[str, float]",
                "Optional[Any]",
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedValueSource.get_value": {
            "name": "get_value",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "bytes",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "PercentageSource.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percentage": [
                    "str",
                    "int",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "TextIO"
                ],
                "source": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Exception",
                    "Optional[str]"
                ]
            }
        },
        "PercentageSource.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "bool",
                "Type",
                "int",
                "type",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Iterable[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PercentageSource.get_value": {
            "name": "get_value",
            "location": 59,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Optional[int]",
                    "dict",
                    "Dict[str, object]"
                ]
            }
        },
        "RandomIntSource.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "min_value": [
                    "bool",
                    "int",
                    "Exception"
                ],
                "max_value": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "seed": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RandomIntSource.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "Type[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomIntSource.get_value": {
            "name": "get_value",
            "location": 80,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "bytes",
                    "bool",
                    "Set[str]"
                ]
            }
        }
    },
    "decision-engine-master/decision_engine/__init__.py": {},
    "decision-engine-master/tests/test_comparisons.py": {
        "test_no_op": {
            "name": "test_no_op",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_equal": {
            "name": "test_equal",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_equal": {
            "name": "test_not_equal",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_greater_than": {
            "name": "test_greater_than",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_greater_than_or_equal": {
            "name": "test_greater_than_or_equal",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_less_than": {
            "name": "test_less_than",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_less_than_or_equal": {
            "name": "test_less_than_or_equal",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "decision-engine-master/tests/test_engine.py": {
        "test_single_stupid_rule_engine": {
            "name": "test_single_stupid_rule_engine",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_single_rule_engine": {
            "name": "test_single_rule_engine",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "salary": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_multiple_rules_engine": {
            "name": "test_multiple_rules_engine",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "air_miles": [],
                "land_miles": [],
                "age": [],
                "vip": [],
                "expected": [
                    "int"
                ]
            }
        }
    },
    "decision-engine-master/tests/test_parser.py": {
        "_load_json_file": {
            "name": "_load_json_file",
            "location": 21,
            "return": [
                "str",
                "bool",
                "pathlib2.Path",
                "pathlib.Path",
                "List[str]",
                "path.Path",
                "Path"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "test_sources_parsed_correctly": {
            "name": "test_sources_parsed_correctly",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "definition_file": [
                    "str",
                    "Union[slice, List[slice], List[int]]",
                    "pathlib.Path",
                    "List[str]",
                    "List[pypi2nix.path.Path]"
                ]
            }
        },
        "test_rules_parsed_correctly": {
            "name": "test_rules_parsed_correctly",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_engines_parsed_correctly": {
            "name": "test_engines_parsed_correctly",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_test_definition": {
            "name": "test_valid_test_definition",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_errors": {
            "name": "test_validation_errors",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "test_fully_parsed_engine": {
            "name": "test_fully_parsed_engine",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "air_miles": [],
                "land_miles": [],
                "age": [],
                "vip": [],
                "expected": [
                    "int"
                ]
            }
        },
        "test_validation_fails_with_invalid_definition": {
            "name": "test_validation_fails_with_invalid_definition",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "decision-engine-master/tests/test_rules.py": {
        "test_simple_comparison_rule": {
            "name": "test_simple_comparison_rule",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "smoker": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_boolean_or_rule": {
            "name": "test_boolean_or_rule",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "colour": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_boolean_and_rule": {
            "name": "test_boolean_and_rule",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "age": [
                    "str",
                    "bool",
                    "Optional[Union[str, int]]",
                    "int"
                ],
                "smoker": [
                    "str",
                    "bool",
                    "Optional[Union[str, int]]",
                    "int"
                ],
                "voted_for_trump": [
                    "str",
                    "bool",
                    "Optional[Union[str, int]]",
                    "int"
                ],
                "expected": []
            }
        }
    },
    "decision-engine-master/tests/test_sources.py": {
        "test_dict_source": {
            "name": "test_dict_source",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fixed_value_source": {
            "name": "test_fixed_value_source",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_percentage_value_source": {
            "name": "test_percentage_value_source",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random_int_source": {
            "name": "test_random_int_source",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "decision-engine-master/tests/__init__.py": {}
}
{
    "dedalus-master/dedalus/asts.py": {},
    "dedalus-master/dedalus/asts_test.py": {
        "TestAsts.predicate": {
            "name": "predicate",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "TestAsts.test_program_predicates": {
            "name": "test_program_predicates",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_idb": {
            "name": "test_program_idb",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_edb": {
            "name": "test_program_edb",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_persistent_edb": {
            "name": "test_program_persistent_edb",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_is_positive": {
            "name": "test_program_is_positive",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_is_semipositive": {
            "name": "test_program_is_semipositive",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_deductive_pdg": {
            "name": "test_program_deductive_pdg",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_is_stratified": {
            "name": "test_program_is_stratified",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsts.test_program_has_guarded_asynchrony": {
            "name": "test_program_has_guarded_asynchrony",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dedalus-master/dedalus/dedalus.py": {
        "_parse_from_file": {
            "name": "_parse_from_file",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_desugar": {
            "name": "_desugar",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_typecheck": {
            "name": "_typecheck",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_is_dedalus_s": {
            "name": "_is_dedalus_s",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_pdg": {
            "name": "_pdg",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "timesteps": [
                    "list",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Optional[List[str]]"
                ],
                "randint": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 71,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup",
                "parser.Parser"
            ],
            "arguments": {}
        }
    },
    "dedalus-master/dedalus/desugar.py": {
        "_atom_contains_location": {
            "name": "_atom_contains_location",
            "location": 5,
            "return": [
                "bool",
                "int",
                "List[Tuple[int, str, str]]",
                "Tuple[str]",
                "str",
                "Dict[str, Any]",
                "Sequence[Any]"
            ],
            "arguments": {
                "atom": [
                    "bool",
                    "int"
                ]
            }
        },
        "desugar": {
            "name": "desugar",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "program": [
                    "dict",
                    "asts.Program",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "dedalus-master/dedalus/desugar_test.py": {
        "TestDesugar._strip_leading_whitespace": {
            "name": "_strip_leading_whitespace",
            "location": 7,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "TestDesugar.test_desugar": {
            "name": "test_desugar",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dedalus-master/dedalus/parser.py": {},
    "dedalus-master/dedalus/parser_test.py": {
        "TestParser.test_good_programs": {
            "name": "test_good_programs",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_bad_programs": {
            "name": "test_bad_programs",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dedalus-master/dedalus/repl.py": {
        "maybe": {
            "name": "maybe",
            "location": 92,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "repl": {
            "name": "repl",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "Help.run": {
            "name": "run",
            "location": 20,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Load.run": {
            "name": "run",
            "location": 27,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Show.run": {
            "name": "run",
            "location": 35,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[str]",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "Step.run": {
            "name": "run",
            "location": 45,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "IO",
                    "bytes",
                    "dict"
                ]
            }
        },
        "Line.run": {
            "name": "run",
            "location": 59,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "IO"
                ]
            }
        },
        "maybe.f": {
            "name": "f",
            "location": 94,
            "return": [
                "bool",
                "float",
                "Optional[DefaultDict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "dedalus-master/dedalus/run.py": {
        "_empty_database": {
            "name": "_empty_database",
            "location": 63,
            "return": [
                "List[str]",
                "int",
                "Optional[dict]",
                "Tuple[int]",
                "list",
                "List[float]"
            ],
            "arguments": {
                "program": [
                    "List[int]",
                    "list",
                    "asts.Program",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_empty_default_database": {
            "name": "_empty_default_database",
            "location": 66,
            "return": [
                "str",
                "int",
                "Set[str]",
                "bool"
            ],
            "arguments": {}
        },
        "_subst": {
            "name": "_subst",
            "location": 69,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "atom": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bindings": [
                    "list",
                    "Sequence[int]",
                    "int",
                    "List[Tuple[int, int]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "_unify": {
            "name": "_unify",
            "location": 91,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "atoms": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "tuples": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "_eval_rule": {
            "name": "_eval_rule",
            "location": 126,
            "return": [
                "typing.Generator[typing.Tuple[typing.Any, ...], None, None]"
            ],
            "arguments": {
                "process": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rule": [
                    "str",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "_stratify": {
            "name": "_stratify",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pdg": []
            }
        },
        "spawn": {
            "name": "spawn",
            "location": 211,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "program": [
                    "asts.Program",
                    "str"
                ],
                "randint": [
                    "IO[str]",
                    "str"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "process": [
                    "bytes"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 278,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "process": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "timesteps": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Process.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "step.is_constant_rule": {
            "name": "is_constant_rule",
            "location": 222,
            "return": [
                "str",
                "Type",
                "Callable[..., T]"
            ],
            "arguments": {
                "rule": [
                    "str"
                ]
            }
        },
        "Process.__str__.underline": {
            "name": "underline",
            "location": 31,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "Process.__str__.colored_relation": {
            "name": "colored_relation",
            "location": 34,
            "return": [
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ],
                "t": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Process.__str__.formatted_table": {
            "name": "formatted_table",
            "location": 39,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "r": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "dedalus-master/dedalus/run_test.py": {
        "TestRun.var": {
            "name": "var",
            "location": 13,
            "return": [
                "List[Dict]",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "TestRun.predicate": {
            "name": "predicate",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "TestRun.atom": {
            "name": "atom",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "TestRun.test_subst": {
            "name": "test_subst",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_unify": {
            "name": "test_unify",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_eval_rule": {
            "name": "test_eval_rule",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_stratify": {
            "name": "test_stratify",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_step": {
            "name": "test_step",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dedalus-master/dedalus/typecheck.py": {
        "_fixed_arities": {
            "name": "_fixed_arities",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_range_restricted": {
            "name": "_range_restricted",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "asts.Program",
                    "T",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "_timestamp_restricted": {
            "name": "_timestamp_restricted",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_location_restricted": {
            "name": "_location_restricted",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "asts.Program",
                    "str"
                ]
            }
        },
        "_stratified_deductive_pdg": {
            "name": "_stratified_deductive_pdg",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "typechecks": {
            "name": "typechecks",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_range_restricted.range_restricted_rule": {
            "name": "range_restricted_rule",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "rule": [
                    "str"
                ]
            }
        },
        "_location_restricted.location_restricted_rule": {
            "name": "location_restricted_rule",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "rule": [
                    "str",
                    "bool"
                ]
            }
        },
        "_stratified_deductive_pdg.is_negative_cycle": {
            "name": "is_negative_cycle",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "g": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "cycle": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dedalus-master/dedalus/typecheck_test.py": {
        "TestTypecheck.test_good_programs": {
            "name": "test_good_programs",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypecheck.test_bad_programs": {
            "name": "test_bad_programs",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dedalus-master/dedalus/__init__.py": {}
}
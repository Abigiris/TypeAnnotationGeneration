{
    "deserialize-master/inlinecss.py": {
        "inline": {
            "name": "inline",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str"
                ]
            }
        }
    },
    "deserialize-master/deserialize/conversions.py": {
        "camel_case": {
            "name": "camel_case",
            "location": 4,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str",
                    "list",
                    "int",
                    "List[str]"
                ]
            }
        },
        "pascal_case": {
            "name": "pascal_case",
            "location": 14,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "deserialize-master/deserialize/exceptions.py": {},
    "deserialize-master/deserialize/type_checks.py": {
        "is_typing_type": {
            "name": "is_typing_type",
            "location": 11,
            "return": [
                "bool",
                "Tuple[bool, str]",
                "\"Block\""
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "Callable",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 38,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "type_value": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Type[Any]"
                ]
            }
        },
        "union_types": {
            "name": "union_types",
            "location": 50,
            "return": [
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "type_value": [
                    "Type",
                    "str",
                    "bool"
                ],
                "debug_name": [
                    "str",
                    "Type",
                    "Union[int, str]"
                ]
            }
        },
        "is_classvar": {
            "name": "is_classvar",
            "location": 63,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Tuple[int, int]]",
                "type",
                "Mapping"
            ],
            "arguments": {
                "type_value": [
                    "str",
                    "Type",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "is_list": {
            "name": "is_list",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_value": [
                    "List[Optional[str]]",
                    "List[int]"
                ]
            }
        },
        "list_content_type": {
            "name": "list_content_type",
            "location": 98,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "type_value": [
                    "str",
                    "int"
                ],
                "debug_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "is_dict": {
            "name": "is_dict",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_value": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]",
                    "str",
                    "List[\"Block\"]"
                ]
            }
        },
        "dict_content_types": {
            "name": "dict_content_types",
            "location": 134,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "type_value": [
                    "bool",
                    "str",
                    "Type"
                ],
                "debug_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "deserialize-master/deserialize/__init__.py": {
        "deserialize": {
            "name": "deserialize",
            "location": 80,
            "return": [],
            "arguments": {
                "class_reference": [
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "data": [
                    "bool",
                    "Hashable",
                    "List[str]",
                    "list"
                ]
            }
        },
        "_deserialize": {
            "name": "_deserialize",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_reference": [
                    "Optional[str]",
                    "str",
                    "Optional[Type]"
                ],
                "data": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "debug_name": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "_deserialize_list": {
            "name": "_deserialize_list",
            "location": 231,
            "return": [
                "str",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "int",
                    "Type[Exception]"
                ],
                "list_data": [
                    "Optional[str]",
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ],
                "debug_name": [
                    "Type",
                    "str",
                    "Tuple[str, int, Dict[str, str]]"
                ]
            }
        },
        "_deserialize_dict": {
            "name": "_deserialize_dict",
            "location": 267,
            "return": [
                "Dict[str, Any]",
                "Sequence",
                "int",
                "bytes",
                "Union[Dict, Tuple]"
            ],
            "arguments": {
                "class_reference": [
                    "str"
                ],
                "data": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "debug_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RawStorageMode.child_mode": {
            "name": "child_mode",
            "location": 56,
            "return": [
                "bool",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_deserialize.finalize": {
            "name": "finalize",
            "location": 126,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "Optional[Any]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Iterable[object]",
                    "int",
                    "Union[str, 'Type']",
                    "bytes"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/constructed.py": {
        "constructed": {
            "name": "constructed",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "_call_constructed": {
            "name": "_call_constructed",
            "location": 15,
            "return": [],
            "arguments": {
                "class_reference": [
                    "str",
                    "Callable[[str], bool]",
                    "List[str]"
                ],
                "instance": [
                    "str",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "constructed.store_constructed": {
            "name": "store_constructed",
            "location": 7,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "class_reference": [
                    "bool",
                    "Callable[[str], bool]",
                    "Callable"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/default.py": {
        "default": {
            "name": "default",
            "location": 6,
            "return": [
                "bool",
                "str",
                "int",
                "type",
                "bytes"
            ],
            "arguments": {
                "key_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "default_value": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_has_default": {
            "name": "_has_default",
            "location": 22,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "class_reference": [
                    "str"
                ],
                "key_name": [
                    "List[str]",
                    "Tuple[int, int]",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "_get_default": {
            "name": "_get_default",
            "location": 34,
            "return": [],
            "arguments": {
                "class_reference": [
                    "str",
                    "List[str]",
                    "Type"
                ],
                "key_name": [
                    "str",
                    "float",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "default.store_defaults_map": {
            "name": "store_defaults_map",
            "location": 9,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "class_reference": [
                    "Type[BaseException]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/downcasting.py": {
        "downcast_field": {
            "name": "downcast_field",
            "location": 4,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "property_name": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_get_downcast_field": {
            "name": "_get_downcast_field",
            "location": 15,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "class_reference": [
                    "Dict[str, Any]",
                    "int",
                    "Optional[T]",
                    "str",
                    "bool"
                ]
            }
        },
        "downcast_identifier": {
            "name": "downcast_identifier",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "super_class": [
                    "type"
                ],
                "identifier": [
                    "type"
                ]
            }
        },
        "_get_downcast_class": {
            "name": "_get_downcast_class",
            "location": 35,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "super_class": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "identifier": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "OrderedDict"
                ]
            }
        },
        "allow_downcast_fallback": {
            "name": "allow_downcast_fallback",
            "location": 44,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "_allows_downcast_fallback": {
            "name": "_allows_downcast_fallback",
            "location": 55,
            "return": [
                "str",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "super_class": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "downcast_field.store_downcast_field_value": {
            "name": "store_downcast_field_value",
            "location": 7,
            "return": [
                "List[\"Name\"]",
                "T",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "class_reference": [
                    "str"
                ]
            }
        },
        "downcast_identifier.store_key_map": {
            "name": "store_key_map",
            "location": 23,
            "return": [
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "allow_downcast_fallback.store": {
            "name": "store",
            "location": 47,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "class_reference": [
                    "bool",
                    "type"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/ignore.py": {
        "ignore": {
            "name": "ignore",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "property_name": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "_should_ignore": {
            "name": "_should_ignore",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "bool"
                ],
                "property_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "ignore.store_key_map": {
            "name": "store_key_map",
            "location": 7,
            "return": [
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/key.py": {
        "key": {
            "name": "key",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Set[str]",
                "Mapping[str, bool]"
            ],
            "arguments": {
                "property_name": [
                    "str",
                    "List[str]"
                ],
                "key_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_key": {
            "name": "_get_key",
            "location": 19,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "property_name": [
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "key.store_key_map": {
            "name": "store_key_map",
            "location": 7,
            "return": [
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/parser.py": {
        "parser": {
            "name": "parser",
            "location": 4,
            "return": [],
            "arguments": {
                "key_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "parser_function": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_get_parser": {
            "name": "_get_parser",
            "location": 20,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]",
                "Optional[List[str]]",
                "list"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "bool"
                ],
                "key_name": [
                    "str"
                ]
            }
        },
        "parser.store_parser_map": {
            "name": "store_parser_map",
            "location": 7,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "int",
                    "Callable[[], None]",
                    "List[str]"
                ]
            }
        },
        "_get_parser.identity_parser": {
            "name": "identity_parser",
            "location": 23,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Collection[str]",
                    "bool"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/snake.py": {
        "auto_snake": {
            "name": "auto_snake",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "_uses_auto_snake": {
            "name": "_uses_auto_snake",
            "location": 15,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "super_class": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "auto_snake.store": {
            "name": "store",
            "location": 7,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "class_reference": [
                    "bool",
                    "type"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/unhandled.py": {
        "allow_unhandled": {
            "name": "allow_unhandled",
            "location": 4,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "key_name": [
                    "str",
                    "int"
                ]
            }
        },
        "_should_allow_unhandled": {
            "name": "_should_allow_unhandled",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "key_name": [
                    "str",
                    "Callable[..., T]",
                    "bool"
                ]
            }
        },
        "allow_unhandled.store_allow_unhandled_map": {
            "name": "store_allow_unhandled_map",
            "location": 7,
            "return": [
                "BaseException",
                "bool"
            ],
            "arguments": {
                "class_reference": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "deserialize-master/deserialize/decorators/__init__.py": {},
    "deserialize-master/docs/conf.py": {},
    "deserialize-master/tests/test_base_types.py": {
        "test_dicts": {
            "name": "test_dicts",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty_classes": {
            "name": "test_empty_classes",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lists": {
            "name": "test_lists",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_of_lists": {
            "name": "test_list_of_lists",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_of_optionals": {
            "name": "test_list_of_optionals",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base_type_lists": {
            "name": "test_base_type_lists",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base_type": {
            "name": "test_base_type",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_classvars.py": {
        "test_basic_classvar": {
            "name": "test_basic_classvar",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_constructed.py": {
        "convert_to_radians": {
            "name": "convert_to_radians",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "Union[str, int, float]",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "test_constructed": {
            "name": "test_constructed",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_polar": {
            "name": "test_polar",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_constructors.py": {
        "test_basic_constructor": {
            "name": "test_basic_constructor",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inherited_constructor": {
            "name": "test_inherited_constructor",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BasicConstructor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "one": [
                    "int",
                    "bool",
                    "float"
                ],
                "two": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "deserialize-master/tests/test_conversions.py": {
        "test_camel_case": {
            "name": "test_camel_case",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_pascal_case": {
            "name": "test_pascal_case",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_defaults.py": {
        "test_default": {
            "name": "test_default",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_deserialize.py": {
        "test_single_simple": {
            "name": "test_single_simple",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_simple": {
            "name": "test_multi_simple",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_single_complex": {
            "name": "test_single_complex",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_complex_nested": {
            "name": "test_complex_nested",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unannotated": {
            "name": "test_unannotated",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_with_dict": {
            "name": "test_type_with_dict",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_with_simple_dict": {
            "name": "test_type_with_simple_dict",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_with_complex_dict": {
            "name": "test_type_with_complex_dict",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_with_union": {
            "name": "test_type_with_union",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_json_types": {
            "name": "test_non_json_types",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "UnannotatedClass.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "SinglePropertySimpleType.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPropertySimpleType.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinglePropertyComplexType.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexNestedType.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deserialize-master/tests/test_downcasting.py": {
        "test_downcasting_foo": {
            "name": "test_downcasting_foo",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_downcasting_bar": {
            "name": "test_downcasting_bar",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_downcasting_baz": {
            "name": "test_downcasting_baz",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_downcasting_multi": {
            "name": "test_downcasting_multi",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_downcasting_nested": {
            "name": "test_downcasting_nested",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_downcasting_fallback": {
            "name": "test_downcasting_fallback",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_enums.py": {
        "test_enums_simple": {
            "name": "test_enums_simple",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enums_order": {
            "name": "test_enums_order",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_example.py": {
        "test_example": {
            "name": "test_example",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_ignore.py": {
        "test_keys": {
            "name": "test_keys",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_keys.py": {
        "test_keys": {
            "name": "test_keys",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_parsers.py": {
        "test_parser": {
            "name": "test_parser",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_raw_storage.py": {
        "test_root_simple": {
            "name": "test_root_simple",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_root_bigger": {
            "name": "test_root_bigger",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_simple": {
            "name": "test_all_simple",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_bigger": {
            "name": "test_all_bigger",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_snakecase_conversion.py": {
        "test_snake_case_from_camel": {
            "name": "test_snake_case_from_camel",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_snake_case_from_pascal": {
            "name": "test_snake_case_from_pascal",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_snake_case_non_snake_property": {
            "name": "test_snake_case_non_snake_property",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_snake_case": {
            "name": "test_non_snake_case",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_snake_case": {
            "name": "test_nested_snake_case",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_snake_case_failure": {
            "name": "test_nested_snake_case_failure",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_subclassing.py": {
        "test_rectangle": {
            "name": "test_rectangle",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_type_checks.py": {
        "test_is_typing_type": {
            "name": "test_is_typing_type",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_union": {
            "name": "test_is_union",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_types": {
            "name": "test_union_types",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_list": {
            "name": "test_is_list",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_content_type": {
            "name": "test_list_content_type",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_dict": {
            "name": "test_is_dict",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dict_content_types": {
            "name": "test_dict_content_types",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_unhandled.py": {
        "test_unhandled": {
            "name": "test_unhandled",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/test_unions.py": {
        "test_union_simple": {
            "name": "test_union_simple",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "deserialize-master/tests/__init__.py": {}
}
{
    "dictmentor-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 7,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "dictmentor-master/dictmentor/base.py": {
        "DictMentor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DictMentor._init_extensions": {
            "name": "_init_extensions",
            "location": 21,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "extensions": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "DictMentor.bind": {
            "name": "bind",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "bool",
                    "str",
                    "dict",
                    "Callable",
                    "int"
                ]
            }
        },
        "DictMentor.augment": {
            "name": "augment",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "document": [
                    "str",
                    "bool"
                ]
            }
        },
        "DictMentor._load_plain_yaml": {
            "name": "_load_plain_yaml",
            "location": 81,
            "return": [
                "bool",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]"
                ],
                "_yaml": [
                    "Type[object]"
                ]
            }
        },
        "DictMentor.load_yaml": {
            "name": "load_yaml",
            "location": 110,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "_yaml": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "dictmentor-master/dictmentor/extensions.py": {
        "Extension.is_valid_extension": {
            "name": "is_valid_extension",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Type",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ],
                "candidate": [
                    "str",
                    "opentrons.types.Mount",
                    "int",
                    "Callable"
                ]
            }
        },
        "Extension.config": {
            "name": "config",
            "location": 48,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension._config": {
            "name": "_config",
            "location": 78,
            "return": [
                "types.ExtensionConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.apply": {
            "name": "apply",
            "location": 81,
            "return": [
                "T",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Extension._apply": {
            "name": "_apply",
            "location": 98,
            "return": [
                "types.AugmentedDict"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExternalResource.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str",
                    "Optional[str]",
                    "Union[str, os.PathLike]"
                ],
                "locator": [
                    "Optional[str]",
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "ExternalResource._config": {
            "name": "_config",
            "location": 137,
            "return": [
                "Dict[str, str]",
                "str",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, str]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalResource._apply": {
            "name": "_apply",
            "location": 144,
            "return": [
                "types.solution_T",
                "str",
                "Dict[str, List[str]]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExternalYamlResource.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalYamlResource._config": {
            "name": "_config",
            "location": 220,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalYamlResource._apply": {
            "name": "_apply",
            "location": 227,
            "return": [
                "str",
                "List[str]",
                "Iterable[Sequence[str]]",
                "Tuple[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fail_on_unset": [
                    "bool",
                    "Union[bool, List[bool]]"
                ],
                "default": [
                    "int",
                    "str"
                ]
            }
        },
        "Environment._config": {
            "name": "_config",
            "location": 286,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment._apply": {
            "name": "_apply",
            "location": 294,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Set[str]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Variables.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fail_on_unset": [
                    "bool",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Optional[bool]"
                ],
                "default": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "Variables._config": {
            "name": "_config",
            "location": 363,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variables._apply": {
            "name": "_apply",
            "location": 371,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Set[str]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExternalResource._apply.process": {
            "name": "process",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "Pattern"
                ],
                "_str": [
                    "str"
                ]
            }
        },
        "Environment._apply.process": {
            "name": "process",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "Pattern"
                ],
                "_str": [
                    "str"
                ]
            }
        },
        "Variables._apply.process": {
            "name": "process",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "Pattern"
                ],
                "_str": [
                    "str"
                ]
            }
        }
    },
    "dictmentor-master/dictmentor/types.py": {},
    "dictmentor-master/dictmentor/utils.py": {
        "dict_find_pattern": {
            "name": "dict_find_pattern",
            "location": 15,
            "return": [
                "str",
                "Set[str]",
                "Dict[str, str]",
                "dict",
                "List[str]",
                "bool",
                "set"
            ],
            "arguments": {
                "_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Dict[int, Dict[str, str]]",
                    "bool",
                    "str"
                ],
                "pattern": [
                    "str",
                    "Optional[str]"
                ],
                "search_in_keys": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "search_in_values": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "modified_environ": {
            "name": "modified_environ",
            "location": 70,
            "return": [
                "typing.Iterator[None]"
            ],
            "arguments": {}
        },
        "eval_first_non_none": {
            "name": "eval_first_non_none",
            "location": 112,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "eval_list": [
                    "str",
                    "Dict[str, Set[str]]",
                    "dict",
                    "int"
                ]
            }
        },
        "multi_process": {
            "name": "multi_process",
            "location": 139,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "process_fun": [
                    "bool",
                    "Tuple[int, int]",
                    "List[str]",
                    "Optional[float]"
                ],
                "_pattern": [
                    "bool",
                    "Tuple[int, int]",
                    "List[str]",
                    "Optional[float]"
                ],
                "initial_value": [
                    "int",
                    "set",
                    "Tuple[tuple]",
                    "bool"
                ]
            }
        },
        "dict_find_pattern.find": {
            "name": "find",
            "location": 48,
            "return": [
                "PatternGenerator"
            ],
            "arguments": {
                "dic": [
                    "dict",
                    "Dict[str, str]",
                    "mypy.types.Instance"
                ],
                "regex": [
                    "Pattern[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "FileLocator.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str",
                    "Optional[str]"
                ],
                "parent_overrides_base": [
                    "Optional[int]",
                    "bool",
                    "Optional[dict]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FileLocator._eval_absolute_path": {
            "name": "_eval_absolute_path",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "abs_or_rel_file_path": [
                    "str"
                ],
                "parent_file_path": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "FileLocator._eval_base_path": {
            "name": "_eval_base_path",
            "location": 185,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "abs_or_rel_file_path": [
                    "str"
                ],
                "parent_file_path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "FileLocator._eval_parent_file_path": {
            "name": "_eval_parent_file_path",
            "location": 192,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "abs_or_rel_file_path": [
                    "str"
                ],
                "parent_file_path": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "FileLocator._eval_cwd": {
            "name": "_eval_cwd",
            "location": 201,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "abs_or_rel_file_path": [
                    "str"
                ],
                "parent_file_path": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "FileLocator._eval_list": {
            "name": "_eval_list",
            "location": 205,
            "return": [
                "bool",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLocator.__call__": {
            "name": "__call__",
            "location": 211,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "abs_or_rel_file_path": [],
                "parent_file_path": []
            }
        }
    },
    "dictmentor-master/dictmentor/validator.py": {
        "Validator.__logical_dict_merge": {
            "name": "__logical_dict_merge",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "first": [
                    "str",
                    "float",
                    "List[Dict]",
                    "bytes",
                    "bool"
                ],
                "second": [
                    "Dict[Any, bool]",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Validator.__test_all": {
            "name": "__test_all",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "condition": [],
                "formatter": [
                    "pathlib.Path",
                    "str"
                ],
                "raise_ex": [
                    "Callable[[list], None]"
                ],
                "summary": [
                    "Callable"
                ],
                "validators": [
                    "Optional[Iterable[Any]]",
                    "Callable[[list], None]",
                    "Optional[Union[bool, Any]]"
                ]
            }
        },
        "Validator.instance_of": {
            "name": "instance_of",
            "location": 77,
            "return": [
                "int",
                "str",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "target_type": [
                    "bool",
                    "Optional[type]",
                    "str",
                    "int"
                ],
                "raise_ex": [
                    "bool",
                    "Optional[type]",
                    "str",
                    "int"
                ],
                "summary": [
                    "bool",
                    "Optional[type]",
                    "str",
                    "int"
                ]
            }
        },
        "Validator.is_stream": {
            "name": "is_stream",
            "location": 150,
            "return": [
                "int",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "raise_ex": [
                    "bool",
                    "float"
                ],
                "summary": [
                    "bool",
                    "float"
                ]
            }
        },
        "Validator.is_file": {
            "name": "is_file",
            "location": 212,
            "return": [
                "pathlib.Path",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "raise_ex": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "summary": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Validator.is_real_iterable": {
            "name": "is_real_iterable",
            "location": 278,
            "return": [
                "int",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "raise_ex": [
                    "bool",
                    "Optional[Callable]"
                ],
                "summary": [
                    "bool",
                    "Optional[Callable]"
                ]
            }
        }
    },
    "dictmentor-master/dictmentor/__init__.py": {
        "version": {
            "name": "version",
            "location": 11,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {}
        }
    },
    "dictmentor-master/examples/Environment/run.py": {},
    "dictmentor-master/examples/ExternalResource/run.py": {},
    "dictmentor-master/examples/ExternalYamlResource/run.py": {},
    "dictmentor-master/examples/getting_started/run.py": {},
    "dictmentor-master/examples/Variables/run.py": {},
    "dictmentor-master/tests/test_dict_mentor.py": {
        "test_bind_extensions_via_init": {
            "name": "test_bind_extensions_via_init",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_extensions_with_non_iterable": {
            "name": "test_init_extensions_with_non_iterable",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bind_non_extensions": {
            "name": "test_bind_non_extensions",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_yaml_with_stream": {
            "name": "test_load_yaml_with_stream",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_yaml_invalid": {
            "name": "test_load_yaml_invalid",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dictmentor-master/tests/test_file_locator.py": {
        "test_build_abs_path_with_absolute_path": {
            "name": "test_build_abs_path_with_absolute_path",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_abs_path_relative_path_with_base_path_and_document_as_file": {
            "name": "test_build_abs_path_relative_path_with_base_path_and_document_as_file",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_abs_path_relative_path_with_base_path_and_nonfile_document": {
            "name": "test_build_abs_path_relative_path_with_base_path_and_nonfile_document",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_abs_path_relative_path_with_non_base_path_but_document_as_file": {
            "name": "test_build_abs_path_relative_path_with_non_base_path_but_document_as_file",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_abs_path_relative_path_with_non_base_path_and_nonfile_document": {
            "name": "test_build_abs_path_relative_path_with_non_base_path_and_nonfile_document",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dictmentor-master/tests/test_version.py": {
        "test_version_for_smoke": {
            "name": "test_version_for_smoke",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "dictmentor-master/tests/extensions/test_environment.py": {
        "test_environment_with_inline_default": {
            "name": "test_environment_with_inline_default",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_environment_with_nested_inline_default": {
            "name": "test_environment_with_nested_inline_default",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_environment_with_multiple_patterns": {
            "name": "test_environment_with_multiple_patterns",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "dictmentor-master/tests/extensions/test_variables.py": {
        "test_environment_with_multiple_patterns": {
            "name": "test_environment_with_multiple_patterns",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
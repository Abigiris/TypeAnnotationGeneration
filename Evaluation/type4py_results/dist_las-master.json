{
    "dist_las-master/setup.py": {},
    "dist_las-master/base/data_loader.py": {
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "\"Step\""
                ],
                "mode": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DataLoader.input_fn": {
            "name": "input_fn",
            "location": 21,
            "return": [
                "tensorflow.data.Dataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader._parse_example": {
            "name": "_parse_example",
            "location": 27,
            "return": [
                "typing.Tuple[typing.Dict[builtins.str, tensorflow.Tensor], tensorflow.Tensor]"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DataLoader.__len__": {
            "name": "__len__",
            "location": 39,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dist_las-master/base/model.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseModel.model": {
            "name": "model",
            "location": 14,
            "return": [
                "tensorflow.estimator.EstimatorSpec"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "Dict[str, tensorflow.Tensor]",
                    "tensorflow.Tensor",
                    "bool",
                    "List[dict]"
                ],
                "labels": [
                    "str",
                    "Dict[str, tensorflow.Tensor]",
                    "tensorflow.Tensor",
                    "bool",
                    "List[dict]"
                ],
                "mode": [
                    "str",
                    "Dict[str, tensorflow.Tensor]",
                    "tensorflow.Tensor",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "BaseModel._create_model": {
            "name": "_create_model",
            "location": 27,
            "return": [
                "tensorflow.Tensor"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ]
            }
        }
    },
    "dist_las-master/base/trainer.py": {
        "BaseTrain.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "model.Config",
                    "int"
                ],
                "model": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "train": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "val": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "pred": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "BaseTrain.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTrain._export_model": {
            "name": "_export_model",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "tensorflow.estimator.Estimator",
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "save_location": [
                    "str",
                    "tensorflow.estimator.Estimator",
                    "Optional[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "BaseTrain._predict": {
            "name": "_predict",
            "location": 47,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "pred_fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "dist_las-master/base/__init__.py": {},
    "dist_las-master/data_loader/data_loader.py": {
        "TFRecordDataLoader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Type['BaseConfig']"
                ],
                "mode": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "TFRecordDataLoader.input_fn": {
            "name": "input_fn",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordDataLoader._parse_example": {
            "name": "_parse_example",
            "location": 57,
            "return": [
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "bool",
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "TFRecordDataLoader.__len__": {
            "name": "__len__",
            "location": 86,
            "return": [
                "List[str]",
                "Iterable[str]",
                "str",
                "List[Tuple[str, Any]]",
                "List[Dict[str, str]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dist_las-master/data_loader/__init__.py": {},
    "dist_las-master/initialisers/task.py": {
        "init": {
            "name": "init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dist_las-master/initialisers/__init__.py": {},
    "dist_las-master/models/conf.py": {},
    "dist_las-master/models/example_model.py": {
        "_fc_block": {
            "name": "_fc_block",
            "location": 94,
            "return": [
                "str",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "x": [
                    "tensorflow.Tensor",
                    "bool",
                    "float",
                    "int"
                ],
                "size": [
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "float",
                    "Optional[int]",
                    "Dict[str, str]",
                    "List[float]"
                ],
                "is_training": [
                    "bool",
                    "tensorflow.Tensor",
                    "Union[int, float]",
                    "int"
                ],
                "drop": [
                    "float",
                    "bool"
                ]
            }
        },
        "_conv_block": {
            "name": "_conv_block",
            "location": 109,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "tensorflow.Tensor",
                    "int",
                    "Tuple[List[Any], List[str]]"
                ],
                "layers": [
                    "int",
                    "tensorflow.Tensor"
                ],
                "filters": [
                    "int",
                    "bool",
                    "str",
                    "text_recognizer.models.base.Model"
                ],
                "is_training": [
                    "bool",
                    "float",
                    "Callable[[str], float]",
                    "Dict[str, str]"
                ]
            }
        },
        "_create_model": {
            "name": "_create_model",
            "location": 127,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "tensorflow.Tensor",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "drop": [
                    "float",
                    "Callable[[str], float]",
                    "bool",
                    "set"
                ],
                "is_training": [
                    "bool",
                    "tensorflow.Tensor",
                    "int"
                ]
            }
        },
        "Mnist.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Mnist.model": {
            "name": "model",
            "location": 14,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "Sequence",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Union[int, float]",
                    "List[str]",
                    "bool"
                ],
                "labels": [
                    "bool",
                    "int",
                    "float"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "tuple",
                    "Optional[bool]"
                ]
            }
        }
    },
    "dist_las-master/models/func.py": {
        "dropout": {
            "name": "dropout",
            "location": 122,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "args": [],
                "keep_prob": [
                    "List[Type]",
                    "float",
                    "str"
                ],
                "is_train": [
                    "bool",
                    "int"
                ],
                "mode": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "softmax_mask": {
            "name": "softmax_mask",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "val": [
                    "float",
                    "numpy.ndarray",
                    "str"
                ],
                "mask": [
                    "float",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "pointer": {
            "name": "pointer",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "hidden": [
                    "dict"
                ],
                "mask": [
                    "dict"
                ],
                "scope": [
                    "numpy.ndarray",
                    "Sequence",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Counter"
                ]
            }
        },
        "summ": {
            "name": "summ",
            "location": 152,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "memory": [
                    "float",
                    "str",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "hidden": [
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "mask": [
                    "bool",
                    "int"
                ],
                "keep_prob": [
                    "bool",
                    "float",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "numpy.array"
                ],
                "is_train": [
                    "bool",
                    "float",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "numpy.array"
                ],
                "scope": [
                    "Optional[Sequence[Any]]",
                    "List[int]"
                ]
            }
        },
        "dot_attention": {
            "name": "dot_attention",
            "location": 189,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "inputs": [
                    "bool",
                    "float",
                    "Optional[Any]",
                    "str"
                ],
                "memory": [
                    "int",
                    "Mapping[str, Tuple[float, float, float]]",
                    "numpy.ndarray"
                ],
                "mask": [
                    "Optional[float]",
                    "float",
                    "bool"
                ],
                "hidden": [
                    "int",
                    "Optional[int]",
                    "Mapping[str, Tuple[float, float, float]]",
                    "numpy.ndarray"
                ],
                "keep_prob": [
                    "bool",
                    "float",
                    "Optional[Any]",
                    "str"
                ],
                "is_train": [
                    "bool",
                    "float",
                    "Optional[Any]",
                    "str"
                ],
                "scope": [
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "dense": {
            "name": "dense",
            "location": 217,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "numpy.ndarray"
                ],
                "hidden": [
                    "int",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "bytes"
                ],
                "use_bias": [
                    "bool",
                    "tuple",
                    "float"
                ],
                "scope": [
                    "int",
                    "str",
                    "numpy.array",
                    "float"
                ]
            }
        },
        "bi_lstm_unit": {
            "name": "bi_lstm_unit",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[\"ShipmentState\"]",
                    "Optional[\"PaymentState\"]",
                    "Optional[\"OrderState\"]"
                ],
                "name_scope": [
                    "str",
                    "bool"
                ],
                "hidden_size": [
                    "int",
                    "Type[numpy.number]",
                    "bytes",
                    "str",
                    "float",
                    "Union[float, int]"
                ],
                "reuse_flag": [
                    "str",
                    "bool"
                ]
            }
        },
        "bi_shortcut_stacked_lstm_return_sequences": {
            "name": "bi_shortcut_stacked_lstm_return_sequences",
            "location": 252,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "List[str]",
                    "dict",
                    "int"
                ],
                "name_scope": [
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "bool"
                ],
                "hidden_size_list": [
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "bool"
                ],
                "dropout_keep_prob": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "reuse_flag": [
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "cudnn_gru.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int",
                    "Optional[int]"
                ],
                "num_units": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "dict",
                    "float"
                ],
                "input_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "List[float]"
                ],
                "keep_prob": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "is_train": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "scope": [
                    "bool",
                    "int"
                ]
            }
        },
        "cudnn_gru.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float"
                ],
                "seq_len": [
                    "int",
                    "float",
                    "List[str]",
                    "numpy.ndarray",
                    "tuple",
                    "str"
                ],
                "keep_prob": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "is_train": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "concat_layers": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "native_gru.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int",
                    "Optional[int]"
                ],
                "num_units": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "dict",
                    "float"
                ],
                "input_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "List[float]"
                ],
                "keep_prob": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "is_train": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "scope": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "native_gru.__call__": {
            "name": "__call__",
            "location": 78,
            "return": [
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float"
                ],
                "seq_len": [
                    "numpy.ndarray",
                    "float",
                    "Optional[int]",
                    "Optional[numpy.ndarray]"
                ],
                "keep_prob": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "is_train": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "concat_layers": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "ptr_net.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Optional[float]",
                    "Mapping[str, Tuple[float, float, float]]",
                    "float"
                ],
                "hidden": [
                    "Optional[float]",
                    "float",
                    "Optional[numpy.ndarray]"
                ],
                "keep_prob": [
                    "Optional[float]",
                    "float",
                    "numpy.array"
                ],
                "is_train": [
                    "Optional[float]",
                    "Mapping[str, Tuple[float, float, float]]",
                    "float"
                ],
                "scope": [
                    "bool",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "numpy.array",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ptr_net.__call__": {
            "name": "__call__",
            "location": 113,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "int",
                    "bool"
                ],
                "match": [
                    "Match",
                    "Match[str]",
                    "Match[bytes]"
                ],
                "d": [
                    "int",
                    "bool"
                ],
                "mask": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "dist_las-master/models/han_model.py": {
        "load_word_mat": {
            "name": "load_word_mat",
            "location": 132,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_create_model": {
            "name": "_create_model",
            "location": 138,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "dict",
                    "list",
                    "OrderedDict",
                    "int"
                ],
                "drop": [
                    "float",
                    "str"
                ],
                "is_training": [
                    "bool",
                    "django.db.models.query.QuerySet",
                    "List[int]",
                    "list"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "HanModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "HanModel.model": {
            "name": "model",
            "location": 20,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "Sequence",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Union[int, float]",
                    "List[str]",
                    "bool"
                ],
                "labels": [
                    "numpy.array",
                    "bool",
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]",
                    "Optional[Dict[str, int]]",
                    "int",
                    "Optional[Any]"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "tuple",
                    "Optional[bool]"
                ]
            }
        }
    },
    "dist_las-master/models/model.py": {
        "RawModel.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "RawModel.model": {
            "name": "model",
            "location": 13,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "labels": [
                    "bytes",
                    "float",
                    "bool",
                    "base.Vertex"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "tuple",
                    "Optional[bool]"
                ]
            }
        },
        "RawModel._create_model": {
            "name": "_create_model",
            "location": 88,
            "return": [
                "tensorflow.Tensor"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ]
            }
        }
    },
    "dist_las-master/models/util.py": {
        "to_unicode": {
            "name": "to_unicode",
            "location": 8,
            "return": [
                "str",
                "Union[str, List[str]]",
                "Optional[tensorflow.Tensor]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_record_parser": {
            "name": "get_record_parser",
            "location": 12,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "int",
                    "Sequence[str]",
                    "List[str]"
                ],
                "is_test": [
                    "bool",
                    "int",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "get_batch_dataset": {
            "name": "get_batch_dataset",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "record_file": [
                    "str",
                    "Iterable[str]",
                    "List[Tuple[int, int]]",
                    "Callable",
                    "Tuple[str]",
                    "List[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "parser": [
                    "str",
                    "Iterable[str]",
                    "List[Tuple[int, int]]",
                    "Callable",
                    "Tuple[str]",
                    "List[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "config": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_dataset": {
            "name": "get_dataset",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "record_file": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "parser": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "config": [
                    "int",
                    "str"
                ]
            }
        },
        "get_record_parser.parse": {
            "name": "parse",
            "location": 13,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable",
                "numpy.ndarray"
            ],
            "arguments": {
                "example": [
                    "bytes"
                ]
            }
        },
        "get_batch_dataset.key_func": {
            "name": "key_func",
            "location": 38,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "context_idxs": [
                    "int",
                    "str"
                ],
                "ques_idxs": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ],
                "context_char_idxs": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ],
                "ques_char_idxs": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ],
                "y1": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ],
                "y2": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ],
                "qa_id": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ]
            }
        },
        "get_batch_dataset.reduce_func": {
            "name": "reduce_func",
            "location": 48,
            "return": [
                "bool",
                "dict",
                "Sequence[Sequence[str]]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict[str, object]",
                    "bool",
                    "Optional[int]"
                ],
                "elements": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "dist_las-master/models/__init__.py": {},
    "dist_las-master/trainers/example_train.py": {
        "ExampleTrainer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "model": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "train": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "val": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "pred": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ]
            }
        },
        "ExampleTrainer.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTrainer._export_model": {
            "name": "_export_model",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "OrderedDict",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "save_location": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "int",
                    "Optional[List]"
                ]
            }
        },
        "ExampleTrainer._predict": {
            "name": "_predict",
            "location": 88,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "int",
                    "str"
                ],
                "pred_fn": [
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "int",
                    "str"
                ]
            }
        }
    },
    "dist_las-master/trainers/han_train.py": {
        "HanTrainer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "model": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "train": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "val": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "pred": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ]
            }
        },
        "HanTrainer.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HanTrainer._export_model": {
            "name": "_export_model",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "OrderedDict",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "save_location": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "int",
                    "Optional[List]"
                ]
            }
        },
        "HanTrainer._predict": {
            "name": "_predict",
            "location": 92,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "int",
                    "str"
                ],
                "pred_fn": [
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "int",
                    "str"
                ]
            }
        }
    },
    "dist_las-master/trainers/train.py": {
        "RawTrainer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "model": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "train": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "val": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ],
                "pred": [
                    "data_loader.data_loader.TFRecordDataLoader",
                    "dict"
                ]
            }
        },
        "RawTrainer.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawTrainer._export_model": {
            "name": "_export_model",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "OrderedDict",
                    "human_activities.model.DirectoryViews",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "save_location": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "int",
                    "Optional[List]"
                ]
            }
        },
        "RawTrainer._predict": {
            "name": "_predict",
            "location": 88,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "pred_fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "dist_las-master/trainers/__init__.py": {},
    "dist_las-master/utils/make_tfrec.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_extract_data": {
            "name": "_extract_data",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dist_las-master/utils/prepro.py": {
        "word_tokenize": {
            "name": "word_tokenize",
            "location": 16,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "process_file": {
            "name": "process_file",
            "location": 21,
            "return": [],
            "arguments": {
                "filename": [],
                "word_counter": []
            }
        },
        "get_embedding": {
            "name": "get_embedding",
            "location": 57,
            "return": [],
            "arguments": {
                "counter": [],
                "data_type": [],
                "limit": [],
                "emb_file": [],
                "vec_size": [],
                "token2idx_dict": []
            }
        },
        "build_features": {
            "name": "build_features",
            "location": 95,
            "return": [],
            "arguments": {
                "examples": [],
                "out_file": [],
                "word2idx_dict": []
            }
        },
        "save": {
            "name": "save",
            "location": 142,
            "return": [],
            "arguments": {
                "filename": [],
                "obj": [],
                "message": []
            }
        },
        "prepro": {
            "name": "prepro",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "build_features._get_word": {
            "name": "_get_word",
            "location": 111,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "dist_las-master/utils/test.py": {},
    "dist_las-master/utils/utils.py": {
        "process_config": {
            "name": "process_config",
            "location": 6,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_args": {
            "name": "get_args",
            "location": 16,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "dist_las-master/utils/__init__.py": {}
}
{
    "django-axes-master/manage.py": {},
    "django-axes-master/setup.py": {},
    "django-axes-master/axes/admin.py": {
        "AccessAttemptAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "AccessLogAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "AccessFailureLogAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "bool",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        }
    },
    "django-axes-master/axes/apps.py": {
        "AppConfig.initialize": {
            "name": "initialize",
            "location": 15,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Dict]",
                    "IO[bytes]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "T"
                ]
            }
        },
        "AppConfig.ready": {
            "name": "ready",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/attempts.py": {
        "get_cool_off_threshold": {
            "name": "get_cool_off_threshold",
            "location": 15,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "attempt_time": [
                    "django.utils.timezone.datetime",
                    "int",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "filter_user_attempts": {
            "name": "filter_user_attempts",
            "location": 31,
            "return": [
                "List[str]",
                "List[Dict]",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "models.WalletRequest"
                ],
                "credentials": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "get_user_attempts": {
            "name": "get_user_attempts",
            "location": 50,
            "return": [
                "bytes",
                "Tuple[int, int]",
                "str",
                "Union[server.models.User, int]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "Dict[str, Any]",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Tuple[int]"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "clean_expired_user_attempts": {
            "name": "clean_expired_user_attempts",
            "location": 70,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "attempt_time": [
                    "django.utils.timezone.datetime",
                    "zerver.models.Realm",
                    "bool",
                    "int"
                ]
            }
        },
        "reset_user_attempts": {
            "name": "reset_user_attempts",
            "location": 91,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "datetime.date"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "django.http.HttpRequest"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-axes-master/axes/backends.py": {
        "AxesBackend.authenticate": {
            "name": "authenticate",
            "location": 26,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "django-axes-master/axes/checks.py": {
        "axes_cache_check": {
            "name": "axes_cache_check",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app_configs": []
            }
        },
        "axes_middleware_check": {
            "name": "axes_middleware_check",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app_configs": []
            }
        },
        "axes_backend_check": {
            "name": "axes_backend_check",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app_configs": []
            }
        },
        "axes_deprecation_check": {
            "name": "axes_deprecation_check",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app_configs": []
            }
        }
    },
    "django-axes-master/axes/conf.py": {},
    "django-axes-master/axes/decorators.py": {
        "axes_dispatch": {
            "name": "axes_dispatch",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "axes_form_invalid": {
            "name": "axes_form_invalid",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "axes_dispatch.inner": {
            "name": "inner",
            "location": 9,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "axes_form_invalid.inner": {
            "name": "inner",
            "location": 20,
            "return": [
                "float",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Type['Model']"
                ]
            }
        }
    },
    "django-axes-master/axes/exceptions.py": {},
    "django-axes-master/axes/helpers.py": {
        "get_cache": {
            "name": "get_cache",
            "location": 20,
            "return": [
                "dict",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_cache_timeout": {
            "name": "get_cache_timeout",
            "location": 28,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_cool_off": {
            "name": "get_cool_off",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_cool_off_iso8601": {
            "name": "get_cool_off_iso8601",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "delta": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_credentials": {
            "name": "get_credentials",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Tuple[str, str]",
                    "django.db.models.Model",
                    "List[str]"
                ]
            }
        },
        "get_client_username": {
            "name": "get_client_username",
            "location": 108,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "get_client_ip_address": {
            "name": "get_client_ip_address",
            "location": 151,
            "return": [
                "Callable"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "get_client_user_agent": {
            "name": "get_client_user_agent",
            "location": 170,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "apistar.http.Headers",
                    "dict"
                ]
            }
        },
        "get_client_path_info": {
            "name": "get_client_path_info",
            "location": 174,
            "return": [
                "str",
                "django.http.HttpResponse",
                "List[str]",
                "Optional[List]"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Headers",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "get_client_http_accept": {
            "name": "get_client_http_accept",
            "location": 178,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "apistar.http.Headers"
                ]
            }
        },
        "get_client_parameters": {
            "name": "get_client_parameters",
            "location": 182,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "username": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "ip_address": [
                    "str",
                    "bool",
                    "int"
                ],
                "user_agent": [
                    "str",
                    "Mapping[int, str]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "make_cache_key_list": {
            "name": "make_cache_key_list",
            "location": 213,
            "return": [
                "str",
                "bool",
                "List[str]",
                "pandas.core.frame.DataFrame",
                "Tuple[int, str]",
                "List[Callable]"
            ],
            "arguments": {
                "filter_kwargs_list": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "get_client_cache_key": {
            "name": "get_client_cache_key",
            "location": 224,
            "return": [
                "str",
                "dict",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request_or_attempt": [],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest",
                    "str",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "get_client_str": {
            "name": "get_client_str",
            "location": 250,
            "return": [
                "str",
                "list",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "logging.Logger"
                ],
                "ip_address": [
                    "str",
                    "bool",
                    "logging.Logger"
                ],
                "user_agent": [
                    "str",
                    "bool",
                    "logging.Logger"
                ],
                "path_info": [
                    "str",
                    "bool",
                    "logging.Logger"
                ],
                "request": [
                    "str",
                    "bool",
                    "logging.Logger"
                ]
            }
        },
        "cleanse_parameters": {
            "name": "cleanse_parameters",
            "location": 306,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "get_query_str": {
            "name": "get_query_str",
            "location": 331,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "query": [
                    "str",
                    "zerver.models.Message",
                    "List[str]"
                ],
                "max_length": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "get_failure_limit": {
            "name": "get_failure_limit",
            "location": 350,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "Dict[str, Any]"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_lockout_message": {
            "name": "get_lockout_message",
            "location": 362,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_lockout_response": {
            "name": "get_lockout_response",
            "location": 368,
            "return": [
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "is_ip_address_in_whitelist": {
            "name": "is_ip_address_in_whitelist",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip_address": [
                    "str"
                ]
            }
        },
        "is_ip_address_in_blacklist": {
            "name": "is_ip_address_in_blacklist",
            "location": 431,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip_address": [
                    "str"
                ]
            }
        },
        "is_client_ip_address_whitelisted": {
            "name": "is_client_ip_address_whitelisted",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "purplship.core.models.RateRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "is_client_ip_address_blacklisted": {
            "name": "is_client_ip_address_blacklisted",
            "location": 458,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "is_client_method_whitelisted": {
            "name": "is_client_method_whitelisted",
            "location": 474,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "viewer.models.Archive",
                    "Tuple[int]",
                    "dict"
                ]
            }
        },
        "is_user_attempt_whitelisted": {
            "name": "is_user_attempt_whitelisted",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "Tuple[int]"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "Tuple[int]"
                ]
            }
        },
        "toggleable": {
            "name": "toggleable",
            "location": 525,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "toggleable.inner": {
            "name": "inner",
            "location": 536,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "django-axes-master/axes/middleware.py": {
        "AxesMiddleware.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "AxesMiddleware.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-axes-master/axes/models.py": {
        "AccessFailureLog.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "tracim.models.data.Workspace"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessAttempt.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessLog.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/signals.py": {
        "handle_user_login_failed": {
            "name": "handle_user_login_failed",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "handle_user_logged_in": {
            "name": "handle_user_logged_in",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "handle_user_logged_out": {
            "name": "handle_user_logged_out",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "handle_post_save_access_attempt": {
            "name": "handle_post_save_access_attempt",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "handle_post_delete_access_attempt": {
            "name": "handle_post_delete_access_attempt",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "handle_setting_changed": {
            "name": "handle_setting_changed",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "IO[str]",
                    "Optional[str]"
                ],
                "setting": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "IO[str]",
                    "Optional[str]"
                ],
                "value": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "IO[str]",
                    "Optional[str]"
                ],
                "enter": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "django-axes-master/axes/utils.py": {
        "reset": {
            "name": "reset",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Callable]",
                    "Callable"
                ],
                "username": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Callable]",
                    "Callable"
                ],
                "ip_or_username": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Callable]",
                    "Callable"
                ]
            }
        },
        "reset_request": {
            "name": "reset_request",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "django.http.HttpRequest",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-axes-master/axes/__init__.py": {},
    "django-axes-master/axes/handlers/base.py": {
        "AbstractAxesHandler.user_login_failed": {
            "name": "user_login_failed",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict"
                ],
                "credentials": [
                    "dict"
                ],
                "request": [
                    "dict"
                ]
            }
        },
        "AbstractAxesHandler.user_logged_in": {
            "name": "user_logged_in",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "set"
                ],
                "request": [
                    "set"
                ],
                "user": [
                    "set"
                ]
            }
        },
        "AbstractAxesHandler.user_logged_out": {
            "name": "user_logged_out",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "request": [],
                "user": []
            }
        },
        "AbstractAxesHandler.get_failures": {
            "name": "get_failures",
            "location": 45,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "AxesBaseHandler.is_allowed": {
            "name": "is_allowed",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "AxesBaseHandler.is_blacklisted": {
            "name": "is_blacklisted",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Set[str]"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AxesBaseHandler.is_whitelisted": {
            "name": "is_whitelisted",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "Tuple[int]"
                ],
                "credentials": [
                    "dict",
                    "Tuple[int]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AxesBaseHandler.is_locked": {
            "name": "is_locked",
            "location": 124,
            "return": [
                "str",
                "type",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "AxesBaseHandler.is_admin_site": {
            "name": "is_admin_site",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AxesBaseHandler.reset_attempts": {
            "name": "reset_attempts",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesBaseHandler.reset_logs": {
            "name": "reset_logs",
            "location": 167,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesBaseHandler.reset_failure_logs": {
            "name": "reset_failure_logs",
            "location": 178,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesBaseHandler.remove_out_of_limit_failure_logs": {
            "name": "remove_out_of_limit_failure_logs",
            "location": 189,
            "return": [
                "Set[str]",
                "int",
                "Sequence[float]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandler.user_login_failed": {
            "name": "user_login_failed",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict"
                ],
                "credentials": [
                    "dict"
                ],
                "request": [
                    "dict"
                ]
            }
        },
        "AxesHandler.user_logged_in": {
            "name": "user_logged_in",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "set"
                ],
                "request": [
                    "set"
                ],
                "user": [
                    "set"
                ]
            }
        },
        "AxesHandler.user_logged_out": {
            "name": "user_logged_out",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "request": [],
                "user": []
            }
        },
        "AxesHandler.get_failures": {
            "name": "get_failures",
            "location": 218,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "django-axes-master/axes/handlers/cache.py": {
        "AxesCacheHandler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCacheHandler.reset_attempts": {
            "name": "reset_attempts",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCacheHandler.get_failures": {
            "name": "get_failures",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "credentials": []
            }
        },
        "AxesCacheHandler.user_login_failed": {
            "name": "user_login_failed",
            "location": 67,
            "return": [
                "bool",
                "list",
                "List[Dict]",
                "Optional[BaseException]",
                "int"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict"
                ],
                "credentials": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "zam_repondeur.models.Team",
                    "dict"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "AxesCacheHandler.user_logged_in": {
            "name": "user_logged_in",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "set"
                ],
                "request": [
                    "str",
                    "models.WalletRequest",
                    "app.models.dto.RenewRequest"
                ],
                "user": [
                    "str",
                    "Iterable[zerver.models.Stream]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AxesCacheHandler.user_logged_out": {
            "name": "user_logged_out",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "asgard.models.user.User"
                ],
                "request": [
                    "app.models.dto.RenewRequest",
                    "int"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zerver.models.Stream",
                    "str"
                ]
            }
        }
    },
    "django-axes-master/axes/handlers/database.py": {
        "AxesDatabaseHandler.reset_attempts": {
            "name": "reset_attempts",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandler.reset_logs": {
            "name": "reset_logs",
            "location": 59,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandler.reset_failure_logs": {
            "name": "reset_failure_logs",
            "location": 74,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandler.remove_out_of_limit_failure_logs": {
            "name": "remove_out_of_limit_failure_logs",
            "location": 89,
            "return": [
                "Set[str]",
                "int",
                "Sequence[float]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandler.get_failures": {
            "name": "get_failures",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "django.http.HttpRequest"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AxesDatabaseHandler.user_login_failed": {
            "name": "user_login_failed",
            "location": 117,
            "return": [
                "T",
                "List[Dict]",
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict",
                    "schema_salad.utils.CacheType"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "dict",
                    "Tuple[int]"
                ],
                "request": [
                    "str",
                    "zerver.models.Stream"
                ]
            }
        },
        "AxesDatabaseHandler.user_logged_in": {
            "name": "user_logged_in",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "set"
                ],
                "request": [
                    "app.models.dto.RenewRequest",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user": [
                    "str",
                    "Iterable[zerver.models.Stream]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AxesDatabaseHandler.user_logged_out": {
            "name": "user_logged_out",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "asgard.models.user.User"
                ],
                "request": [
                    "django.http.requesHttpRequest",
                    "app.models.dto.RenewRequest",
                    "django.http.HttpRequest",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zerver.models.Stream",
                    "str"
                ]
            }
        },
        "AxesDatabaseHandler.post_save_access_attempt": {
            "name": "post_save_access_attempt",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "AxesDatabaseHandler.post_delete_access_attempt": {
            "name": "post_delete_access_attempt",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        }
    },
    "django-axes-master/axes/handlers/dummy.py": {
        "AxesDummyHandler.is_allowed": {
            "name": "is_allowed",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ],
                "credentials": [
                    "dict"
                ]
            }
        },
        "AxesDummyHandler.user_login_failed": {
            "name": "user_login_failed",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict"
                ],
                "credentials": [
                    "dict"
                ],
                "request": [
                    "dict"
                ]
            }
        },
        "AxesDummyHandler.user_logged_in": {
            "name": "user_logged_in",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "set"
                ],
                "request": [
                    "set"
                ],
                "user": [
                    "set"
                ]
            }
        },
        "AxesDummyHandler.user_logged_out": {
            "name": "user_logged_out",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [],
                "request": [],
                "user": []
            }
        },
        "AxesDummyHandler.get_failures": {
            "name": "get_failures",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "dict"
                ],
                "credentials": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "django-axes-master/axes/handlers/proxy.py": {
        "AxesProxyHandler.get_implementation": {
            "name": "get_implementation",
            "location": 38,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "force": [
                    "bool",
                    "Type",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "AxesProxyHandler.reset_attempts": {
            "name": "reset_attempts",
            "location": 50,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Generator"
                ]
            }
        },
        "AxesProxyHandler.reset_logs": {
            "name": "reset_logs",
            "location": 62,
            "return": [
                "bool",
                "List[str]",
                "Callable",
                "str",
                "Optional[Dict[str, Any]]",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "AxesProxyHandler.reset_failure_logs": {
            "name": "reset_failure_logs",
            "location": 66,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "django.db.models.Model",
                    "int",
                    "List[str]",
                    "Type[django.db.models.base.Model]"
                ]
            }
        },
        "AxesProxyHandler.remove_out_of_limit_failure_logs": {
            "name": "remove_out_of_limit_failure_logs",
            "location": 70,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Dict]",
                    "Callable",
                    "IO[bytes]"
                ]
            }
        },
        "AxesProxyHandler.update_request": {
            "name": "update_request",
            "location": 78,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "AxesProxyHandler.is_locked": {
            "name": "is_locked",
            "location": 101,
            "return": [
                "bool",
                "OrderedDict",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "float",
                    "str",
                    "Optional[\"Response\"]",
                    "purplship.core.utils.Element"
                ],
                "request": [
                    "float",
                    "str",
                    "Optional[\"Response\"]",
                    "purplship.core.utils.Element"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AxesProxyHandler.is_allowed": {
            "name": "is_allowed",
            "location": 106,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "dict",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "request": [
                    "int"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AxesProxyHandler.get_failures": {
            "name": "get_failures",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[dict, list]"
                ],
                "request": [
                    "Union[dict, list]"
                ],
                "credentials": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AxesProxyHandler.user_login_failed": {
            "name": "user_login_failed",
            "location": 117,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "Callable[..., Coroutine]",
                    "dict"
                ],
                "sender": [
                    "dict",
                    "str",
                    "django.http.requesHttpRequest",
                    "int"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "django.http.requesHttpRequest",
                    "int"
                ],
                "request": [
                    "int",
                    "Optional[str]",
                    "Callable[..., Coroutine]",
                    "dict"
                ]
            }
        },
        "AxesProxyHandler.user_logged_in": {
            "name": "user_logged_in",
            "location": 125,
            "return": [
                "Optional[Iterable[Any]]",
                "str",
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "cls": [
                    "django.http.HttpRequest",
                    "str",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "sender": [
                    "str",
                    "int"
                ],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "user": [
                    "str",
                    "int"
                ]
            }
        },
        "AxesProxyHandler.user_logged_out": {
            "name": "user_logged_out",
            "location": 131,
            "return": [
                "str",
                "django.conf.settings.AUTH_USER_MODEL"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "sender": [
                    "str"
                ],
                "request": [
                    "str",
                    "dict"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "AxesProxyHandler.post_save_access_attempt": {
            "name": "post_save_access_attempt",
            "location": 137,
            "return": [],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "django.db.models.QuerySet",
                    "List[Dict[str, Any]]"
                ],
                "instance": [
                    "Dict[str, Any]",
                    "str",
                    "django.db.models.QuerySet",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AxesProxyHandler.post_delete_access_attempt": {
            "name": "post_delete_access_attempt",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [
                    "django.db.models.QuerySet",
                    "str",
                    "List[Dict[str, Any]]",
                    "grouper.settings.Settings"
                ],
                "instance": [
                    "django.db.models.QuerySet",
                    "str",
                    "List[Dict[str, Any]]",
                    "grouper.settings.Settings"
                ]
            }
        }
    },
    "django-axes-master/axes/handlers/test.py": {
        "AxesTestHandler.reset_attempts": {
            "name": "reset_attempts",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestHandler.reset_logs": {
            "name": "reset_logs",
            "location": 19,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestHandler.is_allowed": {
            "name": "is_allowed",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ],
                "credentials": [
                    "dict"
                ]
            }
        },
        "AxesTestHandler.get_failures": {
            "name": "get_failures",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "dict"
                ],
                "credentials": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "django-axes-master/axes/handlers/__init__.py": {},
    "django-axes-master/axes/management/__init__.py": {},
    "django-axes-master/axes/management/commands/axes_list_attempts.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/management/commands/axes_reset.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/management/commands/axes_reset_failure_logs.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/management/commands/axes_reset_ip.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/management/commands/axes_reset_logs.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/management/commands/axes_reset_username.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/axes/management/commands/__init__.py": {},
    "django-axes-master/axes/migrations/0001_initial.py": {},
    "django-axes-master/axes/migrations/0002_auto_20151217_2044.py": {},
    "django-axes-master/axes/migrations/0003_auto_20160322_0929.py": {},
    "django-axes-master/axes/migrations/0004_auto_20181024_1538.py": {},
    "django-axes-master/axes/migrations/0005_remove_accessattempt_trusted.py": {},
    "django-axes-master/axes/migrations/0006_remove_accesslog_trusted.py": {},
    "django-axes-master/axes/migrations/0007_alter_accessattempt_unique_together.py": {
        "deduplicate_attempts": {
            "name": "deduplicate_attempts",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "TextIO",
                    "gardnr.models.Grow",
                    "List[List[int]]"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "django-axes-master/axes/migrations/0008_accessfailurelog.py": {},
    "django-axes-master/axes/migrations/__init__.py": {},
    "django-axes-master/docs/conf.py": {},
    "django-axes-master/tests/base.py": {
        "custom_failure_limit": {
            "name": "custom_failure_limit",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "credentials": [
                    "bool"
                ]
            }
        },
        "AxesTestCase.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.tearDown": {
            "name": "tearDown",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.get_kwargs_with_defaults": {
            "name": "get_kwargs_with_defaults",
            "location": 89,
            "return": [
                "list",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.create_attempt": {
            "name": "create_attempt",
            "location": 99,
            "return": [
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.create_log": {
            "name": "create_log",
            "location": 104,
            "return": [
                "str",
                "Optional[Union[Dict, str, int, bytes]]",
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.create_failure_log": {
            "name": "create_failure_log",
            "location": 107,
            "return": [
                "int",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.reset": {
            "name": "reset",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "username": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "AxesTestCase.login": {
            "name": "login",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "is_valid_username": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "is_valid_password": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "remote_addr": [
                    "bool",
                    "Optional[str]",
                    "zerver.models.Realm",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AxesTestCase.logout": {
            "name": "logout",
            "location": 146,
            "return": [
                "purplship.providers.dhl.utils.Settings",
                "raiden.utils.Address",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.check_login": {
            "name": "check_login",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.almost_lockout": {
            "name": "almost_lockout",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.lockout": {
            "name": "lockout",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.check_lockout": {
            "name": "check_lockout",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.cool_off": {
            "name": "cool_off",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.check_logout": {
            "name": "check_logout",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestCase.check_handler": {
            "name": "check_handler",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/settings.py": {},
    "django-axes-master/tests/test_admin.py": {
        "AxesEnableAdminFlag.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AxesEnableAdminFlag.test_disable_admin": {
            "name": "test_disable_admin",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AxesEnableAdminFlag.test_enable_admin_by_default": {
            "name": "test_enable_admin_by_default",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_attempts.py": {
        "GetCoolOffThresholdTestCase.test_get_cool_off_threshold": {
            "name": "test_get_cool_off_threshold",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GetCoolOffThresholdTestCase.test_get_cool_off_threshold_error": {
            "name": "test_get_cool_off_threshold_error",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetTestCase.test_reset": {
            "name": "test_reset",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetTestCase.test_reset_ip": {
            "name": "test_reset_ip",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetTestCase.test_reset_username": {
            "name": "test_reset_username",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset": {
            "name": "test_reset",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip": {
            "name": "test_reset_ip",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_username": {
            "name": "test_reset_username",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_username": {
            "name": "test_reset_ip_username",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_user_failures": {
            "name": "test_reset_user_failures",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_user_failures": {
            "name": "test_reset_ip_user_failures",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_username_user_failures": {
            "name": "test_reset_username_user_failures",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_username_user_failures": {
            "name": "test_reset_ip_username_user_failures",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_user_or_ip": {
            "name": "test_reset_user_or_ip",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_user_or_ip": {
            "name": "test_reset_ip_user_or_ip",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_username_user_or_ip": {
            "name": "test_reset_username_user_or_ip",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_username_user_or_ip": {
            "name": "test_reset_ip_username_user_or_ip",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_user_and_ip": {
            "name": "test_reset_user_and_ip",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_user_and_ip": {
            "name": "test_reset_ip_user_and_ip",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_username_user_and_ip": {
            "name": "test_reset_username_user_and_ip",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetResponseTestCase.test_reset_ip_username_user_and_ip": {
            "name": "test_reset_ip_username_user_and_ip",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_backends.py": {
        "BackendTestCase.test_authenticate_raises_on_missing_request": {
            "name": "test_authenticate_raises_on_missing_request",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendTestCase.test_authenticate_raises_on_locked_request": {
            "name": "test_authenticate_raises_on_locked_request",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "django-axes-master/tests/test_checks.py": {
        "CacheCheckTestCase.test_cache_check": {
            "name": "test_cache_check",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheCheckTestCase.test_cache_check_warnings": {
            "name": "test_cache_check_warnings",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheCheckTestCase.test_cache_check_does_not_produce_check_warnings_with_database_handler": {
            "name": "test_cache_check_does_not_produce_check_warnings_with_database_handler",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddlewareCheckTestCase.test_cache_check_warnings": {
            "name": "test_cache_check_warnings",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCheckTestCase.test_backend_missing": {
            "name": "test_backend_missing",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCheckTestCase.test_specialized_backend": {
            "name": "test_specialized_backend",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCheckTestCase.test_import_error": {
            "name": "test_import_error",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendCheckTestCase.test_module_not_found_error": {
            "name": "test_module_not_found_error",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeprecatedSettingsTestCase.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeprecatedSettingsTestCase.test_deprecated_success_access_log_flag": {
            "name": "test_deprecated_success_access_log_flag",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_decorators.py": {
        "DecoratorTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTestCase.test_axes_dispatch_locks_out": {
            "name": "test_axes_dispatch_locks_out",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ],
                "__": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "DecoratorTestCase.test_axes_dispatch_dispatches": {
            "name": "test_axes_dispatch_dispatches",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "__": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DecoratorTestCase.test_axes_form_invalid_locks_out": {
            "name": "test_axes_form_invalid_locks_out",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture",
                    "str"
                ],
                "__": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture",
                    "str"
                ]
            }
        },
        "DecoratorTestCase.test_axes_form_invalid_dispatches": {
            "name": "test_axes_form_invalid_dispatches",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "__": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "django-axes-master/tests/test_failures.py": {
        "FailureLogTestCase.test_failure_log": {
            "name": "test_failure_log",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FailureLogTestCase.test_failure_locked_out": {
            "name": "test_failure_locked_out",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_handlers.py": {
        "AxesHandlerTestCase.test_is_allowed_with_blacklisted_ip_address": {
            "name": "test_is_allowed_with_blacklisted_ip_address",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandlerTestCase.test_is_allowed_with_whitelisted_ip_address": {
            "name": "test_is_allowed_with_whitelisted_ip_address",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandlerTestCase.test_is_allowed_with_whitelisted_method": {
            "name": "test_is_allowed_with_whitelisted_method",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandlerTestCase.test_is_allowed_no_lock_out": {
            "name": "test_is_allowed_no_lock_out",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandlerTestCase.test_only_admin_site": {
            "name": "test_only_admin_site",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandlerTestCase.test_is_admin_site": {
            "name": "test_is_admin_site",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesHandlerTestCase.test_is_admin_site_no_admin_site": {
            "name": "test_is_admin_site_no_admin_site",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesProxyHandlerTestCase.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesProxyHandlerTestCase.test_setting_changed_signal_triggers_handler_reimport": {
            "name": "test_setting_changed_signal_triggers_handler_reimport",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesProxyHandlerTestCase.test_user_login_failed": {
            "name": "test_user_login_failed",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "AxesProxyHandlerTestCase.test_user_logged_in": {
            "name": "test_user_logged_in",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "lms.lmsdb.models.Comment",
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "AxesProxyHandlerTestCase.test_user_logged_out": {
            "name": "test_user_logged_out",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "lms.lmsdb.models.Comment"
                ]
            }
        },
        "AxesProxyHandlerTestCase.test_post_save_access_attempt": {
            "name": "test_post_save_access_attempt",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "AxesProxyHandlerTestCase.test_post_delete_access_attempt": {
            "name": "test_post_delete_access_attempt",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int"
                ]
            }
        },
        "AxesHandlerBaseTestCase.check_whitelist": {
            "name": "check_whitelist",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "AxesHandlerBaseTestCase.check_empty_request": {
            "name": "check_empty_request",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "Optional[dict]",
                    "str",
                    "int"
                ],
                "handler": [
                    "Optional[dict]",
                    "str",
                    "int"
                ]
            }
        },
        "ResetAttemptsTestCase.setUp": {
            "name": "setUp",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsTestCase.test_handler_reset_attempts": {
            "name": "test_handler_reset_attempts",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsTestCase.test_handler_reset_attempts_username": {
            "name": "test_handler_reset_attempts_username",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsTestCase.test_handler_reset_attempts_ip": {
            "name": "test_handler_reset_attempts_ip",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsTestCase.test_handler_reset_attempts_ip_and_username": {
            "name": "test_handler_reset_attempts_ip_and_username",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsTestCase.test_handler_reset_attempts_ip_or_username": {
            "name": "test_handler_reset_attempts_ip_or_username",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_reset_attempts": {
            "name": "test_handler_reset_attempts",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_reset_logs": {
            "name": "test_handler_reset_logs",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_reset_logs_older_than_42_days": {
            "name": "test_handler_reset_logs_older_than_42_days",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_reset_failure_logs": {
            "name": "test_handler_reset_failure_logs",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_reset_failure_logs_older_than_42_days": {
            "name": "test_handler_reset_failure_logs_older_than_42_days",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_remove_out_of_limit_failure_logs": {
            "name": "test_handler_remove_out_of_limit_failure_logs",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler": {
            "name": "test_handler",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_without_reset": {
            "name": "test_handler_without_reset",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_callable_failure_limit": {
            "name": "test_handler_callable_failure_limit",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_str_failure_limit": {
            "name": "test_handler_str_failure_limit",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_invalid_failure_limit": {
            "name": "test_handler_invalid_failure_limit",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_handler_without_lockout": {
            "name": "test_handler_without_lockout",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_empty_request": {
            "name": "test_empty_request",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "aiocometd.transports.base.Headers"
                ]
            }
        },
        "AxesDatabaseHandlerTestCase.test_whitelist": {
            "name": "test_whitelist",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "AxesDatabaseHandlerTestCase.test_user_login_failed_only_user_failures_with_none_username": {
            "name": "test_user_login_failed_only_user_failures_with_none_username",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "helpers.ChromecastInfo",
                    "str",
                    "Tuple[str, int]",
                    "int"
                ]
            }
        },
        "AxesDatabaseHandlerTestCase.test_user_login_failed_with_none_username": {
            "name": "test_user_login_failed_with_none_username",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDatabaseHandlerTestCase.test_user_login_failed_multiple_username": {
            "name": "test_user_login_failed_multiple_username",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsCacheHandlerTestCase.set_up_login_attempts": {
            "name": "set_up_login_attempts",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsCacheHandlerTestCase.check_failures": {
            "name": "check_failures",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "failures": [
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "Sequence[Sequence[T]]",
                    "Dict[str, Any]"
                ],
                "username": [
                    "Optional[str]",
                    "bool",
                    "Optional[Tuple[Any, Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "ip_address": [
                    "Optional[bool]",
                    "datetime.timedelta",
                    "Optional[int]"
                ]
            }
        },
        "ResetAttemptsCacheHandlerTestCase.test_handler_reset_attempts": {
            "name": "test_handler_reset_attempts",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsCacheHandlerTestCase.test_handler_reset_attempts_username": {
            "name": "test_handler_reset_attempts_username",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsCacheHandlerTestCase.test_handler_reset_attempts_ip": {
            "name": "test_handler_reset_attempts_ip",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsCacheHandlerTestCase.test_handler_reset_attempts_ip_and_username": {
            "name": "test_handler_reset_attempts_ip_and_username",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAttemptsCacheHandlerTestCase.test_handler_reset_attempts_ip_or_username": {
            "name": "test_handler_reset_attempts_ip_or_username",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCacheHandlerTestCase.test_handler": {
            "name": "test_handler",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCacheHandlerTestCase.test_handler_without_reset": {
            "name": "test_handler_without_reset",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCacheHandlerTestCase.test_handler_without_lockout": {
            "name": "test_handler_without_lockout",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCacheHandlerTestCase.test_empty_request": {
            "name": "test_empty_request",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "aiocometd.transports.base.Headers"
                ]
            }
        },
        "AxesCacheHandlerTestCase.test_whitelist": {
            "name": "test_whitelist",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "AxesCacheHandlerTestCase.test_user_login_failed_only_user_failures_with_none_username": {
            "name": "test_user_login_failed_only_user_failures_with_none_username",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "cache_set": [
                    "int",
                    "bool",
                    "str",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "AxesCacheHandlerTestCase.test_user_login_failed_with_none_username": {
            "name": "test_user_login_failed_with_none_username",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cache_set": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "List[str]"
                ]
            }
        },
        "AxesDummyHandlerTestCase.test_handler": {
            "name": "test_handler",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDummyHandlerTestCase.test_handler_is_allowed": {
            "name": "test_handler_is_allowed",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDummyHandlerTestCase.test_handler_get_failures": {
            "name": "test_handler_get_failures",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestHandlerTestCase.test_handler_reset_attempts": {
            "name": "test_handler_reset_attempts",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestHandlerTestCase.test_handler_reset_logs": {
            "name": "test_handler_reset_logs",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestHandlerTestCase.test_handler_is_allowed": {
            "name": "test_handler_is_allowed",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesTestHandlerTestCase.test_handler_get_failures": {
            "name": "test_handler_get_failures",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_helpers.py": {
        "get_dummy_client_str": {
            "name": "get_dummy_client_str",
            "location": 272,
            "return": [
                "str",
                "models.scenes.scenes_base.Scene",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "ip_address": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "user_agent": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "path_info": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "request": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "get_dummy_client_str_using_request": {
            "name": "get_dummy_client_str_using_request",
            "location": 276,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ],
                "user_agent": [
                    "str"
                ],
                "path_info": [
                    "str"
                ],
                "request": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "get_username": {
            "name": "get_username",
            "location": 553,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "mock_get_cool_off_str": {
            "name": "mock_get_cool_off_str",
            "location": 660,
            "return": [
                "str",
                "Dict[str, Any]",
                "Tuple[int, int, int]",
                "bool"
            ],
            "arguments": {}
        },
        "mock_is_whitelisted": {
            "name": "mock_is_whitelisted",
            "location": 694,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "credentials": []
            }
        },
        "mock_get_lockout_response": {
            "name": "mock_get_lockout_response",
            "location": 722,
            "return": [
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "AxesDisabledTestCase.test_initialize": {
            "name": "test_initialize",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDisabledTestCase.test_toggleable": {
            "name": "test_toggleable",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheTestCase.test_get_cache_timeout_integer": {
            "name": "test_get_cache_timeout_integer",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheTestCase.test_get_cache_timeout_timedelta": {
            "name": "test_get_cache_timeout_timedelta",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheTestCase.test_get_cache_timeout_none": {
            "name": "test_get_cache_timeout_none",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampTestCase.test_iso8601": {
            "name": "test_iso8601",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.get_expected_client_str": {
            "name": "get_expected_client_str",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ClientStringTestCase.test_verbose_ip_only_client_details": {
            "name": "test_verbose_ip_only_client_details",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_imbalanced_quotes": {
            "name": "test_imbalanced_quotes",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_verbose_ip_only_client_details_tuple": {
            "name": "test_verbose_ip_only_client_details_tuple",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_non_verbose_ip_only_client_details": {
            "name": "test_non_verbose_ip_only_client_details",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_verbose_user_only_client_details": {
            "name": "test_verbose_user_only_client_details",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_non_verbose_user_only_client_details": {
            "name": "test_non_verbose_user_only_client_details",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_verbose_user_ip_combo_client_details": {
            "name": "test_verbose_user_ip_combo_client_details",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_non_verbose_user_ip_combo_client_details": {
            "name": "test_non_verbose_user_ip_combo_client_details",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_verbose_user_agent_client_details": {
            "name": "test_verbose_user_agent_client_details",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_non_verbose_user_agent_client_details": {
            "name": "test_non_verbose_user_agent_client_details",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_get_client_str_callable_return_str": {
            "name": "test_get_client_str_callable_return_str",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientStringTestCase.test_get_client_str_callable_using_request": {
            "name": "test_get_client_str_callable_using_request",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientParametersTestCase.test_get_filter_kwargs_user": {
            "name": "test_get_filter_kwargs_user",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientParametersTestCase.test_get_filter_kwargs_ip": {
            "name": "test_get_filter_kwargs_ip",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientParametersTestCase.test_get_filter_kwargs_user_and_ip": {
            "name": "test_get_filter_kwargs_user_and_ip",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientParametersTestCase.test_get_filter_kwargs_user_or_ip": {
            "name": "test_get_filter_kwargs_user_or_ip",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientParametersTestCase.test_get_filter_kwargs_ip_and_agent": {
            "name": "test_get_filter_kwargs_ip_and_agent",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientParametersTestCase.test_get_filter_kwargs_user_ip_agent": {
            "name": "test_get_filter_kwargs_user_ip_agent",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientCacheKeyTestCase.test_get_cache_key": {
            "name": "test_get_cache_key",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientCacheKeyTestCase.test_get_cache_key_empty_ip_address": {
            "name": "test_get_cache_key_empty_ip_address",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientCacheKeyTestCase.test_get_cache_key_credentials": {
            "name": "test_get_cache_key_credentials",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_default_get_client_username": {
            "name": "test_default_get_client_username",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_default_get_client_username_drf": {
            "name": "test_default_get_client_username_drf",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_default_get_client_username_credentials": {
            "name": "test_default_get_client_username_credentials",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.sample_customize_username": {
            "name": "sample_customize_username",
            "location": 489,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.db.models.query.QuerySet",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ],
                "credentials": [
                    "bool"
                ]
            }
        },
        "UsernameTestCase.test_custom_get_client_username_from_request": {
            "name": "test_custom_get_client_username_from_request",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.sample_customize_username_credentials": {
            "name": "sample_customize_username_credentials",
            "location": 507,
            "return": [
                "str",
                "bool",
                "models.Profile"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "UsernameTestCase.test_custom_get_client_username_from_credentials": {
            "name": "test_custom_get_client_username_from_credentials",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_get_client_username": {
            "name": "test_get_client_username",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_get_client_username_invalid_callable_too_few_arguments": {
            "name": "test_get_client_username_invalid_callable_too_few_arguments",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_get_client_username_invalid_callable_too_many_arguments": {
            "name": "test_get_client_username_invalid_callable_too_many_arguments",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_get_client_username_not_callable": {
            "name": "test_get_client_username_not_callable",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameTestCase.test_get_client_username_str": {
            "name": "test_get_client_username_str",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.setUp": {
            "name": "setUp",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_ip_in_whitelist_none": {
            "name": "test_ip_in_whitelist_none",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_ip_in_whitelist": {
            "name": "test_ip_in_whitelist",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_ip_in_blacklist_none": {
            "name": "test_ip_in_blacklist_none",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_ip_in_blacklist": {
            "name": "test_ip_in_blacklist",
            "location": 578,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_client_ip_address_blacklisted_ip_in_blacklist": {
            "name": "test_is_client_ip_address_blacklisted_ip_in_blacklist",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_is_client_ip_address_blacklisted_ip_not_in_blacklist": {
            "name": "test_is_is_client_ip_address_blacklisted_ip_not_in_blacklist",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_client_ip_address_blacklisted_ip_in_whitelist": {
            "name": "test_is_client_ip_address_blacklisted_ip_in_whitelist",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_already_locked_ip_not_in_whitelist": {
            "name": "test_is_already_locked_ip_not_in_whitelist",
            "location": 597,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_client_ip_address_whitelisted_never_lockout": {
            "name": "test_is_client_ip_address_whitelisted_never_lockout",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_client_ip_address_whitelisted_only_allow": {
            "name": "test_is_client_ip_address_whitelisted_only_allow",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IPWhitelistTestCase.test_is_client_ip_address_whitelisted_not": {
            "name": "test_is_client_ip_address_whitelisted_not",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodWhitelistTestCase.setUp": {
            "name": "setUp",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodWhitelistTestCase.test_is_client_method_whitelisted": {
            "name": "test_is_client_method_whitelisted",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodWhitelistTestCase.test_is_client_method_whitelisted_not": {
            "name": "test_is_client_method_whitelisted_not",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LockoutResponseTestCase.setUp": {
            "name": "setUp",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LockoutResponseTestCase.test_get_lockout_response_cool_off": {
            "name": "test_get_lockout_response_cool_off",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LockoutResponseTestCase.test_get_lockout_response_lockout_template": {
            "name": "test_get_lockout_response_lockout_template",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "render": [
                    "bool"
                ]
            }
        },
        "LockoutResponseTestCase.test_get_lockout_response_lockout_url": {
            "name": "test_get_lockout_response_lockout_url",
            "location": 646,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LockoutResponseTestCase.test_get_lockout_response_lockout_json": {
            "name": "test_get_lockout_response_lockout_json",
            "location": 650,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LockoutResponseTestCase.test_get_lockout_response_lockout_response": {
            "name": "test_get_lockout_response_lockout_response",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCoolOffTestCase.test_get_cool_off_none": {
            "name": "test_get_cool_off_none",
            "location": 666,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCoolOffTestCase.test_get_cool_off_int": {
            "name": "test_get_cool_off_int",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCoolOffTestCase.test_get_cool_off_callable": {
            "name": "test_get_cool_off_callable",
            "location": 686,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCoolOffTestCase.test_get_cool_off_path": {
            "name": "test_get_cool_off_path",
            "location": 690,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesWhitelistTestCase.setUp": {
            "name": "setUp",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesWhitelistTestCase.test_is_whitelisted": {
            "name": "test_is_whitelisted",
            "location": 705,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesWhitelistTestCase.test_is_whitelisted_override_callable": {
            "name": "test_is_whitelisted_override_callable",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesWhitelistTestCase.test_is_whitelisted_override_path": {
            "name": "test_is_whitelisted_override_path",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesWhitelistTestCase.test_is_whitelisted_override_invalid": {
            "name": "test_is_whitelisted_override_invalid",
            "location": 717,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLockoutTestCase.setUp": {
            "name": "setUp",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLockoutTestCase.test_get_lockout_response": {
            "name": "test_get_lockout_response",
            "location": 731,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLockoutTestCase.test_get_lockout_response_with_custom_http_response_code": {
            "name": "test_get_lockout_response_with_custom_http_response_code",
            "location": 736,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLockoutTestCase.test_get_lockout_response_override_callable": {
            "name": "test_get_lockout_response_override_callable",
            "location": 741,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLockoutTestCase.test_get_lockout_response_override_path": {
            "name": "test_get_lockout_response_override_path",
            "location": 748,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLockoutTestCase.test_get_lockout_response_override_invalid": {
            "name": "test_get_lockout_response_override_invalid",
            "location": 753,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCleanseParamsTestCase.setUp": {
            "name": "setUp",
            "location": 759,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCleanseParamsTestCase.test_cleanse_parameters": {
            "name": "test_cleanse_parameters",
            "location": 766,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCleanseParamsTestCase.test_cleanse_parameters_override_sensitive": {
            "name": "test_cleanse_parameters_override_sensitive",
            "location": 773,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCleanseParamsTestCase.test_cleanse_parameters_override_both": {
            "name": "test_cleanse_parameters_override_both",
            "location": 781,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesCleanseParamsTestCase.test_cleanse_parameters_override_empty": {
            "name": "test_cleanse_parameters_override_empty",
            "location": 788,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDisabledTestCase.test_toggleable.is_true": {
            "name": "is_true",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "UsernameTestCase.test_default_get_client_username_drf.DRFRequest.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_logging.py": {
        "AppsTestCase.test_axes_config_log_re_entrant": {
            "name": "test_axes_config_log_re_entrant",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AppsTestCase.test_axes_config_log_not_verbose": {
            "name": "test_axes_config_log_not_verbose",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "AppsTestCase.test_axes_config_log_user_only": {
            "name": "test_axes_config_log_user_only",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "int"
                ]
            }
        },
        "AppsTestCase.test_axes_config_log_ip_only": {
            "name": "test_axes_config_log_ip_only",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "int",
                    "str"
                ]
            }
        },
        "AppsTestCase.test_axes_config_log_user_ip": {
            "name": "test_axes_config_log_user_ip",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "int"
                ]
            }
        },
        "AppsTestCase.test_axes_config_log_user_or_ip": {
            "name": "test_axes_config_log_user_or_ip",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "int"
                ]
            }
        },
        "AccessLogTestCase.test_access_log_on_logout": {
            "name": "test_access_log_on_logout",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessLogTestCase.test_log_data_truncated": {
            "name": "test_log_data_truncated",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessLogTestCase.test_valid_logout_without_success_log": {
            "name": "test_valid_logout_without_success_log",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessLogTestCase.test_valid_login_without_success_log": {
            "name": "test_valid_login_without_success_log",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessLogTestCase.test_valid_logout_without_log": {
            "name": "test_valid_logout_without_log",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessLogTestCase.test_non_valid_login_without_log": {
            "name": "test_non_valid_login_without_log",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_login.py": {
        "DjangoLoginTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoContribAuthLoginTestCase.test_login": {
            "name": "test_login",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoContribAuthLoginTestCase.test_logout": {
            "name": "test_logout",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoTestClientLoginTestCase.test_client_login": {
            "name": "test_client_login",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoTestClientLoginTestCase.test_client_logout": {
            "name": "test_client_logout",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoTestClientLoginTestCase.test_client_force_login": {
            "name": "test_client_force_login",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase._login": {
            "name": "_login",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "List[str]",
                    "IO[bytes]"
                ],
                "password": [
                    "str",
                    "List[str]",
                    "IO[bytes]"
                ],
                "ip_addr": [
                    "str",
                    "bool"
                ]
            }
        },
        "DatabaseLoginTestCase._lockout_user_from_ip": {
            "name": "_lockout_user_from_ip",
            "location": 107,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "Mapping[str, Any]"
                ],
                "ip_addr": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DatabaseLoginTestCase._lockout_user1_from_ip1": {
            "name": "_lockout_user1_from_ip1",
            "location": 114,
            "return": [
                "zerver.models.Realm",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_login": {
            "name": "test_login",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_limit_once": {
            "name": "test_lockout_limit_once",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_limit_many": {
            "name": "test_lockout_limit_many",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.attempt_count": {
            "name": "attempt_count",
            "location": 161,
            "return": [
                "str",
                "models.Subtask",
                "Union[str, bytes]",
                "bool",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_reset_on_success_false": {
            "name": "test_reset_on_success_false",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_reset_on_success_true": {
            "name": "test_reset_on_success_true",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_combination_user_and_ip": {
            "name": "test_lockout_by_combination_user_and_ip",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_only_user_failures": {
            "name": "test_lockout_by_only_user_failures",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_blocks_when_same_user_same_ip_without_cache": {
            "name": "test_lockout_by_ip_blocks_when_same_user_same_ip_without_cache",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_allows_when_same_user_diff_ip_without_cache": {
            "name": "test_lockout_by_ip_allows_when_same_user_diff_ip_without_cache",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_blocks_when_diff_user_same_ip_without_cache": {
            "name": "test_lockout_by_ip_blocks_when_diff_user_same_ip_without_cache",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_allows_when_diff_user_diff_ip_without_cache": {
            "name": "test_lockout_by_ip_allows_when_diff_user_diff_ip_without_cache",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_blocks_when_same_user_same_ip_without_cache": {
            "name": "test_lockout_by_user_blocks_when_same_user_same_ip_without_cache",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_blocks_when_same_user_diff_ip_without_cache": {
            "name": "test_lockout_by_user_blocks_when_same_user_diff_ip_without_cache",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_allows_when_diff_user_same_ip_without_cache": {
            "name": "test_lockout_by_user_allows_when_diff_user_same_ip_without_cache",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_allows_when_diff_user_diff_ip_without_cache": {
            "name": "test_lockout_by_user_allows_when_diff_user_diff_ip_without_cache",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_with_empty_username_allows_other_users_without_cache": {
            "name": "test_lockout_by_user_with_empty_username_allows_other_users_without_cache",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_blocks_when_same_user_same_ip_without_cache": {
            "name": "test_lockout_by_user_and_ip_blocks_when_same_user_same_ip_without_cache",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_same_user_diff_ip_without_cache": {
            "name": "test_lockout_by_user_and_ip_allows_when_same_user_diff_ip_without_cache",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_diff_user_same_ip_without_cache": {
            "name": "test_lockout_by_user_and_ip_allows_when_diff_user_same_ip_without_cache",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_diff_user_diff_ip_without_cache": {
            "name": "test_lockout_by_user_and_ip_allows_when_diff_user_diff_ip_without_cache",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_with_empty_username_allows_other_users_without_cache": {
            "name": "test_lockout_by_user_and_ip_with_empty_username_allows_other_users_without_cache",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_blocks_when_same_user_same_ip_using_cache": {
            "name": "test_lockout_by_ip_blocks_when_same_user_same_ip_using_cache",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_allows_when_same_user_diff_ip_using_cache": {
            "name": "test_lockout_by_ip_allows_when_same_user_diff_ip_using_cache",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_blocks_when_diff_user_same_ip_using_cache": {
            "name": "test_lockout_by_ip_blocks_when_diff_user_same_ip_using_cache",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_ip_allows_when_diff_user_diff_ip_using_cache": {
            "name": "test_lockout_by_ip_allows_when_diff_user_diff_ip_using_cache",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_with_empty_username_allows_other_users_using_cache": {
            "name": "test_lockout_by_user_with_empty_username_allows_other_users_using_cache",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_blocks_when_same_user_same_ip_using_cache": {
            "name": "test_lockout_by_user_blocks_when_same_user_same_ip_using_cache",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_blocks_when_same_user_diff_ip_using_cache": {
            "name": "test_lockout_by_user_blocks_when_same_user_diff_ip_using_cache",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_allows_when_diff_user_same_ip_using_cache": {
            "name": "test_lockout_by_user_allows_when_diff_user_same_ip_using_cache",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_allows_when_diff_user_diff_ip_using_cache": {
            "name": "test_lockout_by_user_allows_when_diff_user_diff_ip_using_cache",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_blocks_when_same_user_same_ip_using_cache": {
            "name": "test_lockout_by_user_and_ip_blocks_when_same_user_same_ip_using_cache",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_same_user_diff_ip_using_cache": {
            "name": "test_lockout_by_user_and_ip_allows_when_same_user_diff_ip_using_cache",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_diff_user_same_ip_using_cache": {
            "name": "test_lockout_by_user_and_ip_allows_when_diff_user_same_ip_using_cache",
            "location": 473,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_diff_user_diff_ip_using_cache": {
            "name": "test_lockout_by_user_and_ip_allows_when_diff_user_diff_ip_using_cache",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_allows_when_diff_user_same_ip_using_cache_multiple_attempts": {
            "name": "test_lockout_by_user_and_ip_allows_when_diff_user_same_ip_using_cache_multiple_attempts",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_and_ip_with_empty_username_allows_other_users_using_cache": {
            "name": "test_lockout_by_user_and_ip_with_empty_username_allows_other_users_using_cache",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_blocks_when_same_user_same_ip_using_cache": {
            "name": "test_lockout_by_user_or_ip_blocks_when_same_user_same_ip_using_cache",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_allows_when_same_user_diff_ip_using_cache": {
            "name": "test_lockout_by_user_or_ip_allows_when_same_user_diff_ip_using_cache",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_allows_when_diff_user_same_ip_using_cache": {
            "name": "test_lockout_by_user_or_ip_allows_when_diff_user_same_ip_using_cache",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_allows_when_diff_user_same_ip_using_cache_multiple_attempts": {
            "name": "test_lockout_by_user_or_ip_allows_when_diff_user_same_ip_using_cache_multiple_attempts",
            "location": 561,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_allows_when_diff_user_same_ip_using_cache_multiple_failed_attempts": {
            "name": "test_lockout_by_user_or_ip_allows_when_diff_user_same_ip_using_cache_multiple_failed_attempts",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_allows_when_diff_user_diff_ip_using_cache": {
            "name": "test_lockout_by_user_or_ip_allows_when_diff_user_diff_ip_using_cache",
            "location": 616,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_lockout_by_user_or_ip_with_empty_username_allows_other_users_using_cache": {
            "name": "test_lockout_by_user_or_ip_with_empty_username_allows_other_users_using_cache",
            "location": 625,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_login_during_lockout_doesnt_reset_cool_off_time": {
            "name": "test_login_during_lockout_doesnt_reset_cool_off_time",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseLoginTestCase.test_login_during_lockout_does_reset_cool_off_time": {
            "name": "test_login_during_lockout_does_reset_cool_off_time",
            "location": 660,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheLoginTestCase.attempt_count": {
            "name": "attempt_count",
            "location": 679,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheLoginTestCase.reset": {
            "name": "reset",
            "location": 684,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_management.py": {
        "ResetAccessLogsManagementCommandTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAccessLogsManagementCommandTestCase.test_axes_delete_access_logs_default": {
            "name": "test_axes_delete_access_logs_default",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAccessLogsManagementCommandTestCase.test_axes_delete_access_logs_older_than_2_days": {
            "name": "test_axes_delete_access_logs_older_than_2_days",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAccessLogsManagementCommandTestCase.test_axes_delete_access_logs_older_than_4_days": {
            "name": "test_axes_delete_access_logs_older_than_4_days",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetAccessLogsManagementCommandTestCase.test_axes_delete_access_logs_older_than_16_days": {
            "name": "test_axes_delete_access_logs_older_than_16_days",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_list_attempts": {
            "name": "test_axes_list_attempts",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_reset": {
            "name": "test_axes_reset",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_reset_not_found": {
            "name": "test_axes_reset_not_found",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_reset_ip": {
            "name": "test_axes_reset_ip",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_reset_ip_not_found": {
            "name": "test_axes_reset_ip_not_found",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_reset_username": {
            "name": "test_axes_reset_username",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementCommandTestCase.test_axes_reset_username_not_found": {
            "name": "test_axes_reset_username_not_found",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_middleware.py": {
        "get_username": {
            "name": "get_username",
            "location": 9,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "credentials": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "MiddlewareTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddlewareTestCase.test_success_response": {
            "name": "test_success_response",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddlewareTestCase.test_lockout_response": {
            "name": "test_lockout_response",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddlewareTestCase.test_lockout_response_with_axes_callable_username": {
            "name": "test_lockout_response_with_axes_callable_username",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddlewareTestCase.test_respects_enabled_switch": {
            "name": "test_respects_enabled_switch",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddlewareTestCase.test_success_response.get_response": {
            "name": "get_response",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "MiddlewareTestCase.test_lockout_response.get_response": {
            "name": "get_response",
            "location": 29,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "MiddlewareTestCase.test_lockout_response_with_axes_callable_username.get_response": {
            "name": "get_response",
            "location": 38,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "MiddlewareTestCase.test_respects_enabled_switch.get_response": {
            "name": "get_response",
            "location": 49,
            "return": [
                "Tuple[int, str]",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "django-axes-master/tests/test_models.py": {
        "ModelsTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelsTestCase.test_access_attempt_str": {
            "name": "test_access_attempt_str",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelsTestCase.test_access_log_str": {
            "name": "test_access_log_str",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelsTestCase.test_access_failure_log_str": {
            "name": "test_access_failure_log_str",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationsTestCase.test_missing_migrations": {
            "name": "test_missing_migrations",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/test_signals.py": {
        "SignalTestCase.test_send_lockout_signal": {
            "name": "test_send_lockout_signal",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-axes-master/tests/urls.py": {},
    "django-axes-master/tests/urls_empty.py": {},
    "django-axes-master/tests/__init__.py": {}
}
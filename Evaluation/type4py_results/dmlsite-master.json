{
    "dmlsite-master/dev.py": {},
    "dmlsite-master/manage.py": {},
    "dmlsite-master/dmlblog/admin.py": {},
    "dmlsite-master/dmlblog/apps.py": {},
    "dmlsite-master/dmlblog/forms.py": {},
    "dmlsite-master/dmlblog/models.py": {
        "upload_location": {
            "name": "upload_location",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "dict",
                    "List[str]",
                    "float",
                    "db.models.Article"
                ],
                "filename": [
                    "str",
                    "int",
                    "Union[List[str], str]"
                ]
            }
        },
        "create_slug": {
            "name": "create_slug",
            "location": 112,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "raiden.utils.Secret",
                    "bool"
                ],
                "new_slug": [
                    "T",
                    "Optional[str]",
                    "Optional[\"Frame\"]",
                    "str",
                    "zam_repondeur.models.Article"
                ]
            }
        },
        "pre_save_post_reciever": {
            "name": "pre_save_post_reciever",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor",
                    "str",
                    "dict",
                    "bool"
                ],
                "instance": [
                    "bytes"
                ]
            }
        },
        "PostManager.active": {
            "name": "active",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "zerver.models.Realm",
                "int",
                "bool",
                "guillotina.db.orm.interfaces.IBaseObject",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostManager.public_posts": {
            "name": "public_posts",
            "location": 36,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostManager.private_posts": {
            "name": "private_posts",
            "location": 39,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.publish": {
            "name": "publish",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.unpublish": {
            "name": "unpublish",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 88,
            "return": [
                "str",
                "int",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_markdown": {
            "name": "get_markdown",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.comments": {
            "name": "comments",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_content_type": {
            "name": "get_content_type",
            "location": 104,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlblog/tests.py": {},
    "dmlsite-master/dmlblog/urls.py": {},
    "dmlsite-master/dmlblog/utils.py": {
        "count_words": {
            "name": "count_words",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "html_string": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_read_time": {
            "name": "get_read_time",
            "location": 14,
            "return": [
                "str",
                "Optional[datetime.timedelta]",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "html_string": [
                    "str",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "dmlsite-master/dmlblog/views.py": {
        "post_test": {
            "name": "post_test",
            "location": 27,
            "return": [
                "inspire_mitmproxy.http.MITMRequest",
                "core.models.Recipe",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "post_list": {
            "name": "post_list",
            "location": 41,
            "return": [
                "core.models.Recipe",
                "int",
                "inspire_mitmproxy.http.MITMRequest",
                "str",
                "robot_server.service.protocol.manager.ProtocolManager"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "Optional[str]"
                ]
            }
        },
        "post_detail": {
            "name": "post_detail",
            "location": 92,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "post_new": {
            "name": "post_new",
            "location": 157,
            "return": [
                "str",
                "zerver.models.Realm",
                "Dict[type, Any]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "post_edit": {
            "name": "post_edit",
            "location": 178,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "str",
                    "int",
                    "app.db.session.Session"
                ]
            }
        },
        "post_unpublish": {
            "name": "post_unpublish",
            "location": 195,
            "return": [
                "core.models.Recipe",
                "int",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "Callable"
                ],
                "pk": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "post_draft_list": {
            "name": "post_draft_list",
            "location": 203,
            "return": [
                "robot_server.service.protocol.manager.ProtocolManager",
                "int",
                "core.models.Recipe",
                "Optional[Dict]",
                "str",
                "zam_repondeur.models.Lecture",
                "bool",
                "inspire_mitmproxy.http.MITMRequest"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "post_publish": {
            "name": "post_publish",
            "location": 209,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "str",
                    "int",
                    "app.db.session.Session"
                ]
            }
        },
        "draft_remove": {
            "name": "draft_remove",
            "location": 216,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ],
                "pk": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "add_comment_to_post": {
            "name": "add_comment_to_post",
            "location": 223,
            "return": [
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "str",
                    "app.db.session.Session",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "comment_approve": {
            "name": "comment_approve",
            "location": 238,
            "return": [
                "bool",
                "cmk.utils.type_defs.HostName",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "pk": [
                    "int"
                ]
            }
        },
        "comment_remove": {
            "name": "comment_remove",
            "location": 249,
            "return": [
                "bool",
                "cmk.utils.type_defs.HostName",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "pk": [
                    "int"
                ]
            }
        },
        "tag_post": {
            "name": "tag_post",
            "location": 259,
            "return": [
                "bool",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "str",
                    "app.db.session.Session",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "dmlsite-master/dmlblog/__init__.py": {},
    "dmlsite-master/dmlblog/migrations/0001_initial.py": {},
    "dmlsite-master/dmlblog/migrations/0002_auto_20170226_0056.py": {},
    "dmlsite-master/dmlblog/migrations/0003_post_read_time.py": {},
    "dmlsite-master/dmlblog/migrations/0004_remove_post_read_time.py": {},
    "dmlsite-master/dmlblog/migrations/0005_post_read_time.py": {},
    "dmlsite-master/dmlblog/migrations/0006_auto_20170226_0142.py": {},
    "dmlsite-master/dmlblog/migrations/0007_auto_20170226_0149.py": {},
    "dmlsite-master/dmlblog/migrations/0008_auto_20170303_1420.py": {},
    "dmlsite-master/dmlblog/migrations/0009_auto_20170904_1424.py": {},
    "dmlsite-master/dmlblog/migrations/0010_auto_20180425_1212.py": {},
    "dmlsite-master/dmlblog/migrations/0011_delete_comment.py": {},
    "dmlsite-master/dmlblog/migrations/0012_auto_20200824_2220.py": {},
    "dmlsite-master/dmlblog/migrations/__init__.py": {},
    "dmlsite-master/dmlchat/admin.py": {},
    "dmlsite-master/dmlchat/apps.py": {},
    "dmlsite-master/dmlchat/consumers(async).py": {},
    "dmlsite-master/dmlchat/consumers.py": {
        "ChatConsumer.connect": {
            "name": "connect",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatConsumer.disconnect": {
            "name": "disconnect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "close_code": [
                    "str",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "ChatConsumer.receive": {
            "name": "receive",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "ChatConsumer.chat_message": {
            "name": "chat_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Callable",
                    "\"keras.models.Sequential\""
                ]
            }
        }
    },
    "dmlsite-master/dmlchat/models.py": {
        "Room.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlchat/routing.py": {},
    "dmlsite-master/dmlchat/tests.py": {
        "ChatViewsTestCase.test_homepage": {
            "name": "test_homepage",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlchat/urls.py": {},
    "dmlsite-master/dmlchat/views.py": {
        "chat_main": {
            "name": "chat_main",
            "location": 13,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "bytes",
                "dict",
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "chat_room": {
            "name": "chat_room",
            "location": 20,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.requesHttpRequest"
                ],
                "room_name": [
                    "dict",
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "Dict[str, object]"
                ]
            }
        }
    },
    "dmlsite-master/dmlchat/__init__.py": {},
    "dmlsite-master/dmlchat/migrations/0001_initial.py": {},
    "dmlsite-master/dmlchat/migrations/0002_delete_room.py": {},
    "dmlsite-master/dmlchat/migrations/0003_room.py": {},
    "dmlsite-master/dmlchat/migrations/__init__.py": {},
    "dmlsite-master/dmlcomments/admin.py": {},
    "dmlsite-master/dmlcomments/apps.py": {},
    "dmlsite-master/dmlcomments/forms.py": {},
    "dmlsite-master/dmlcomments/models.py": {
        "CommentQuerySet._all": {
            "name": "_all",
            "location": 21,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentQuerySet.get_by_pk": {
            "name": "get_by_pk",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "CommentQuerySet.filter_by_instance": {
            "name": "filter_by_instance",
            "location": 30,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Callable"
                ]
            }
        },
        "CommentQuerySet.approved_comments": {
            "name": "approved_comments",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 66,
            "return": [
                "str",
                "bool",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.get_delete_url": {
            "name": "get_delete_url",
            "location": 69,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.children": {
            "name": "children",
            "location": 72,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "List[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.is_parent": {
            "name": "is_parent",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.approve": {
            "name": "approve",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlcomments/tests.py": {},
    "dmlsite-master/dmlcomments/urls.py": {},
    "dmlsite-master/dmlcomments/views.py": {
        "comment_thread": {
            "name": "comment_thread",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "django.http.HttpResponse",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "int"
                ]
            }
        },
        "comment_delete": {
            "name": "comment_delete",
            "location": 59,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "comment_approve": {
            "name": "comment_approve",
            "location": 84,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "pk": [
                    "int",
                    "str",
                    "scrapy.http.Request"
                ]
            }
        },
        "comment_remove": {
            "name": "comment_remove",
            "location": 92,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "pk": [
                    "int",
                    "str",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "dmlsite-master/dmlcomments/__init__.py": {},
    "dmlsite-master/dmlcomments/migrations/0001_initial.py": {},
    "dmlsite-master/dmlcomments/migrations/0002_auto_20180425_1212.py": {},
    "dmlsite-master/dmlcomments/migrations/__init__.py": {},
    "dmlsite-master/dmlgeo/admin.py": {},
    "dmlsite-master/dmlgeo/apps.py": {},
    "dmlsite-master/dmlgeo/models.py": {},
    "dmlsite-master/dmlgeo/tests.py": {},
    "dmlsite-master/dmlgeo/urls.py": {},
    "dmlsite-master/dmlgeo/views.py": {},
    "dmlsite-master/dmlgeo/__init__.py": {},
    "dmlsite-master/dmlgeo/migrations/__init__.py": {},
    "dmlsite-master/dmlmain/admin.py": {},
    "dmlsite-master/dmlmain/apps.py": {},
    "dmlsite-master/dmlmain/forms.py": {
        "SignUpForm.clean_email": {
            "name": "clean_email",
            "location": 10,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpForm.clean_name": {
            "name": "clean_name",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlmain/models.py": {
        "SignUp.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlmain/tasks.py": {
        "create_html_report": {
            "name": "create_html_report",
            "location": 5,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "email_report": {
            "name": "email_report",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [
                    "str",
                    "Dict[str, str]"
                ],
                "text": [
                    "str",
                    "Dict[str, str]"
                ],
                "to_email": [
                    "str",
                    "Dict[str, str]"
                ],
                "from_email": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/tests.py": {
        "MainViewsTestCase.test_homepage": {
            "name": "test_homepage",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlsTest.test_responses": {
            "name": "test_responses",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlsTest.test_page_not_found_response": {
            "name": "test_page_not_found_response",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskTest.test_create_html_report": {
            "name": "test_create_html_report",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlmain/urls.py": {},
    "dmlsite-master/dmlmain/utils.py": {
        "render_to_pdf": {
            "name": "render_to_pdf",
            "location": 9,
            "return": [
                "dict",
                "Dict[str, str]",
                "List[Dict[str, Any]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "template_src": [
                    "str"
                ],
                "context_dict": [
                    "bool",
                    "Type['GenericList']",
                    "str",
                    "int"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/views.py": {
        "homepage": {
            "name": "homepage",
            "location": 25,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "contact_admins": {
            "name": "contact_admins",
            "location": 55,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "contact_jinja": {
            "name": "contact_jinja",
            "location": 71,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "django_admin_page": {
            "name": "django_admin_page",
            "location": 110,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "register": {
            "name": "register",
            "location": 114,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "handler404": {
            "name": "handler404",
            "location": 174,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "handler500": {
            "name": "handler500",
            "location": 178,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "GenerateInvoice.get": {
            "name": "get",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "name": []
            }
        },
        "GeneratePdf.get": {
            "name": "get",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "name": []
            }
        }
    },
    "dmlsite-master/dmlmain/__init__.py": {},
    "dmlsite-master/dmlmain/migrations/0001_initial.py": {},
    "dmlsite-master/dmlmain/migrations/__init__.py": {},
    "dmlsite-master/dmlmain/templatetags/crispy_form_jinja.py": {
        "crispify": {
            "name": "crispify",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "float",
                    "str"
                ],
                "form": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "crispy": {
            "name": "crispy",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "form": [
                    "str",
                    "Callable",
                    "bool",
                    "Tuple[int, int]"
                ],
                "label_class": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "field_class": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "template_pack": [
                    "str"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/templatetags/djjn_tag.py": {
        "django": {
            "name": "django",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "context": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "html": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Django.preprocess": {
            "name": "preprocess",
            "location": 13,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "filename": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Django._django": {
            "name": "_django",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Iterable[Any]"
                ],
                "html": [
                    "Iterable[Any]"
                ]
            }
        },
        "Django.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "str",
                "Type[T]",
                "Tuple[int, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "jinja2.parser.Parser"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/templatetags/globals.py": {
        "build_absolute_uri": {
            "name": "build_absolute_uri",
            "location": 24,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Set[str]]",
                "int"
            ],
            "arguments": {
                "relative_url": [
                    "str"
                ]
            }
        },
        "render_bundle": {
            "name": "render_bundle",
            "location": 32,
            "return": [
                "bool",
                "bytes",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "bundle_name": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "extension": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "config": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "attrs": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "cookielaw": {
            "name": "cookielaw",
            "location": 37,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "datetime.date"
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "should_enable_discourse": {
            "name": "should_enable_discourse",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "is_public": [
                    "int",
                    "List[domain.models.hotel.field.HotelField]",
                    "str",
                    "BaseException",
                    "Dict[str, Union[str, int]]",
                    "datetime.timedelta",
                    "bool"
                ]
            }
        },
        "is_debug": {
            "name": "is_debug",
            "location": 64,
            "return": [
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "release_version": {
            "name": "release_version",
            "location": 69,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "is_production": {
            "name": "is_production",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "deploy_environment": {
            "name": "deploy_environment",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "sentry_public_dsn": {
            "name": "sentry_public_dsn",
            "location": 84,
            "return": [
                "str",
                "Optional[int]",
                "List[Tuple[str, int]]",
                "bool"
            ],
            "arguments": {}
        },
        "provider_login_url": {
            "name": "provider_login_url",
            "location": 89,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "models.WalletRequest"
                ],
                "provider_id": [
                    "int",
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User"
                ]
            }
        },
        "is_checkbox": {
            "name": "is_checkbox",
            "location": 113,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "dict",
                "Sequence[Any]"
            ],
            "arguments": {
                "bound_field": []
            }
        },
        "add_field_css": {
            "name": "add_field_css",
            "location": 132,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "dataclasses.Field"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Dict[str, str]",
                    "zerver.models.CustomProfileField"
                ],
                "css_classes": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[bytes]",
                    "zerver.models.Realm"
                ]
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 163,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/templatetags/sitetree_jinja.py": {
        "sitetree_tree": {
            "name": "sitetree_tree",
            "location": 34,
            "return": [
                "list",
                "int",
                "IO[str]",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "parser": [
                    "str"
                ],
                "token": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "detect_clause": {
            "name": "detect_clause",
            "location": 60,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "clause_name": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, Union[Any, Any, Any]]"
                ],
                "tokens": [
                    "str",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 73,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "context": [
                    "django.template.Context"
                ],
                "tree_items": [
                    "Union[str, List[str]]",
                    "Dict[str, Set[str]]",
                    "type",
                    "Sized"
                ],
                "use_template": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Type[BaseException]",
                    "BaseException"
                ]
            }
        },
        "sitetree_treeNode.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_alias": [
                    "Callable",
                    "str",
                    "Dict[int, int]",
                    "Optional[Dict[str, str]]"
                ],
                "use_template": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "sitetree_treeNode.render": {
            "name": "render",
            "location": 27,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable",
                    "str",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/templatetags/urlify.py": {
        "urlify": {
            "name": "urlify",
            "location": 21,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "urlify_filter": {
            "name": "urlify_filter",
            "location": 26,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "urlify_tag": {
            "name": "urlify_tag",
            "location": 38,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[T]",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "Union[int, float]"
                ]
            }
        }
    },
    "dmlsite-master/dmlmain/templatetags/__init__.py": {},
    "dmlsite-master/dmlpolls/admin.py": {},
    "dmlsite-master/dmlpolls/apps.py": {},
    "dmlsite-master/dmlpolls/forms.py": {
        "AddPollForm.clean_question_text": {
            "name": "clean_question_text",
            "location": 16,
            "return": [
                "str",
                "Callable[..., T]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlpolls/models.py": {
        "QuestionQuerySet._filter": {
            "name": "_filter",
            "location": 27,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[Iterable[int]]",
                "Optional[List[Any]]",
                "Optional[Iterable[Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.was_published_recently": {
            "name": "was_published_recently",
            "location": 52,
            "return": [
                "int",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 66,
            "return": [
                "str",
                "bool",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.comments": {
            "name": "comments",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_content_type": {
            "name": "get_content_type",
            "location": 76,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlpolls/tests.py": {
        "QuestionMethodTests.test_was_published_recently_with_future_question": {
            "name": "test_was_published_recently_with_future_question",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionMethodTests.test_was_published_recently_with_old_question": {
            "name": "test_was_published_recently_with_old_question",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionMethodTests.test_was_published_recently_with_recent_question": {
            "name": "test_was_published_recently_with_recent_question",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionMethodTests.create_question": {
            "name": "create_question",
            "location": 33,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "question_text": [
                    "str",
                    "Optional[datetime.datetime]",
                    "int"
                ],
                "days": [
                    "int",
                    "float",
                    "datetime.datetime",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dmlsite-master/dmlpolls/urls.py": {},
    "dmlsite-master/dmlpolls/urls_old.py": {},
    "dmlsite-master/dmlpolls/views.py": {
        "poll_list": {
            "name": "poll_list",
            "location": 19,
            "return": [
                "Dict[str, List[str]]",
                "bool",
                "list"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "poll_detail": {
            "name": "poll_detail",
            "location": 54,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "int",
                    "django.http.HttpRequest",
                    "str",
                    "zam_repondeur.models.Team"
                ]
            }
        },
        "addpoll": {
            "name": "addpoll",
            "location": 123,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "add_choice": {
            "name": "add_choice",
            "location": 142,
            "return": [
                "int",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "question_id": [
                    "int"
                ]
            }
        },
        "vote": {
            "name": "vote",
            "location": 157,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "models.WalletRequest"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 176,
            "return": [
                "str",
                "inspire_mitmproxy.http.MITMRequest",
                "zam_repondeur.models.Lecture",
                "bool",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "PollIndexView.get_queryset": {
            "name": "get_queryset",
            "location": 99,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollDetailView.get_queryset": {
            "name": "get_queryset",
            "location": 109,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollResultsView.get_queryset": {
            "name": "get_queryset",
            "location": 118,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlpolls/views_old.py": {
        "index": {
            "name": "index",
            "location": 14,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "detail": {
            "name": "detail",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "question_id": [
                    "int",
                    "str"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 31,
            "return": [
                "bool",
                "Exception",
                "tartare.core.models.Job",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "question_id": [
                    "int"
                ]
            }
        },
        "vote": {
            "name": "vote",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "dict"
                ],
                "question_id": [
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "dmlsite-master/dmlpolls/__init__.py": {},
    "dmlsite-master/dmlpolls/migrations/0001_initial.py": {},
    "dmlsite-master/dmlpolls/migrations/0002_auto_20180425_1212.py": {},
    "dmlsite-master/dmlpolls/migrations/0003_auto_20190723_1440.py": {},
    "dmlsite-master/dmlpolls/migrations/0004_auto_20200824_1946.py": {},
    "dmlsite-master/dmlpolls/migrations/0005_auto_20200824_2220.py": {},
    "dmlsite-master/dmlpolls/migrations/0006_auto_20200824_2221.py": {},
    "dmlsite-master/dmlpolls/migrations/__init__.py": {},
    "dmlsite-master/dmlresearch/admin.py": {},
    "dmlsite-master/dmlresearch/apps.py": {},
    "dmlsite-master/dmlresearch/models.py": {},
    "dmlsite-master/dmlresearch/tests.py": {},
    "dmlsite-master/dmlresearch/urls.py": {},
    "dmlsite-master/dmlresearch/views.py": {
        "poster_view": {
            "name": "poster_view",
            "location": 35,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]",
                "dict",
                "jumeaux.models.Request"
            ],
            "arguments": {
                "request": []
            }
        },
        "HomeView.get": {
            "name": "get",
            "location": 31,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "bytes",
                "Optional[Dict]",
                "bool",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Iterable[int]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ChartData.get": {
            "name": "get",
            "location": 58,
            "return": [
                "int",
                "bytes",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "list"
                ],
                "format": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "list"
                ]
            }
        },
        "LineChartJSONView.get_labels": {
            "name": "get_labels",
            "location": 67,
            "return": [
                "str",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineChartJSONView.get_data": {
            "name": "get_data",
            "location": 71,
            "return": [
                "str",
                "int",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyticsIndexView.get_context_data": {
            "name": "get_context_data",
            "location": 88,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyticsIndexView.thirty_day_registrations": {
            "name": "thirty_day_registrations",
            "location": 95,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsite-master/dmlresearch/__init__.py": {},
    "dmlsite-master/dmlresearch/migrations/__init__.py": {},
    "dmlsite-master/dmlsite/admin.py": {},
    "dmlsite-master/dmlsite/asgi.py": {},
    "dmlsite-master/dmlsite/dashboard.py": {},
    "dmlsite-master/dmlsite/fields.py": {},
    "dmlsite-master/dmlsite/general_settings.py": {},
    "dmlsite-master/dmlsite/production_settings.py": {},
    "dmlsite-master/dmlsite/routing.py": {},
    "dmlsite-master/dmlsite/settings.py": {},
    "dmlsite-master/dmlsite/storages_custom.py": {
        "CachedS3BotoStorage.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedS3BotoStorage.url": {
            "name": "url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CachedS3BotoStorage.save": {
            "name": "save",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable[[str], bool]",
                    "Callable[[List], bool]",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "CachedS3BotoStorage.get_available_name": {
            "name": "get_available_name",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "max_length": [
                    "Iterable[str]",
                    "str"
                ]
            }
        }
    },
    "dmlsite-master/dmlsite/tasks.py": {
        "create_html_report": {
            "name": "create_html_report",
            "location": 6,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_hook": {
            "name": "test_hook",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "email_report": {
            "name": "email_report",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dmlsite-master/dmlsite/testrunners.py": {
        "PytestTestRunner.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "int",
                    "bool",
                    "float"
                ],
                "failfast": [
                    "int",
                    "bool",
                    "float"
                ],
                "keepdb": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PytestTestRunner.run_tests": {
            "name": "run_tests",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "test_labels": [
                    "List[dict]",
                    "List[Dict[str, Any]]",
                    "Callable"
                ]
            }
        }
    },
    "dmlsite-master/dmlsite/tests.py": {},
    "dmlsite-master/dmlsite/urls.py": {},
    "dmlsite-master/dmlsite/widgets.py": {
        "MyWidget.get_context": {
            "name": "get_context",
            "location": 9,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[Optional[str]]",
                    "float"
                ],
                "value": [
                    "str",
                    "List[Optional[str]]",
                    "float"
                ],
                "attrs": [
                    "str"
                ]
            }
        },
        "MyWidget.render": {
            "name": "render",
            "location": 15,
            "return": [
                "List[dict]",
                "Optional[List[int]]",
                "torch.nn.utils.rnn.PackedSequence",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ],
                "attrs": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dmlsite-master/dmlsite/wsgi.py": {},
    "dmlsite-master/dmlsite/__init__.py": {},
    "dmlsite-master/dmlsite/jinja/cookielaw_jinja.py": {
        "flatten_context": {
            "name": "flatten_context",
            "location": 28,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "django.template.Context",
                    "Callable[[None], bool]",
                    "Callable[..., Awaitable]",
                    "str",
                    "core.models.Grouping",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "flatten_context.do_flatten": {
            "name": "do_flatten",
            "location": 30,
            "return": [
                "float",
                "str",
                "django.template.Context",
                "int"
            ],
            "arguments": {
                "context": [
                    "float",
                    "str",
                    "django.template.Context",
                    "int"
                ]
            }
        },
        "InclusionTag.render_tag": {
            "name": "render_tag",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "ContextManager"
                ]
            }
        },
        "InclusionTag.get_template": {
            "name": "get_template",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "List[str]",
                    "Iterable[T]",
                    "Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "InclusionTag.get_context": {
            "name": "get_context",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "CookielawBanner.render_tag": {
            "name": "render_tag",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        }
    },
    "dmlsite-master/dmlsite/jinja/djangonow_jinja.py": {
        "DjangoNow.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "DjangoNow._now": {
            "name": "_now",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "date_format": [
                    "str",
                    "cdp.dom.Node.Id"
                ]
            }
        },
        "DjangoNow.parse": {
            "name": "parse",
            "location": 41,
            "return": [
                "float",
                "bool",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "jinja2.parser.Parser"
                ]
            }
        }
    },
    "dmlsite-master/dmlsite/jinja/djjn_tag.py": {
        "Django._django": {
            "name": "_django",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Django.parse": {
            "name": "parse",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "jinja2.parser.Parser",
                    "utils.parser.BinaryParser"
                ]
            }
        }
    },
    "dmlsite-master/dmlsite/jinja/jinja2_custom.py": {
        "dmlsite_jinja_env": {
            "name": "dmlsite_jinja_env",
            "location": 34,
            "return": [
                "Mapping[str, str]",
                "\"jinja2.Environment\"",
                "Environment",
                "List[int]",
                "dict"
            ],
            "arguments": {}
        }
    },
    "dmlsite-master/dmlsite/jinja/__init__.py": {},
    "dmlsite-master/dmlsite/templatetags/cookielaw_jinja.py": {
        "flatten_context": {
            "name": "flatten_context",
            "location": 29,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "django.template.Context",
                    "Callable[[None], bool]",
                    "Callable[..., Awaitable]",
                    "str",
                    "core.models.Grouping",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "clb": {
            "name": "clb",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "List[src.core.offer.Offer]",
                    "str"
                ]
            }
        },
        "flatten_context.do_flatten": {
            "name": "do_flatten",
            "location": 31,
            "return": [
                "float",
                "str",
                "django.template.Context",
                "int"
            ],
            "arguments": {
                "context": [
                    "float",
                    "str",
                    "django.template.Context",
                    "int"
                ]
            }
        },
        "InclusionTag.render_tag": {
            "name": "render_tag",
            "location": 58,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "ContextManager"
                ]
            }
        },
        "InclusionTag.get_template": {
            "name": "get_template",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "List[str]",
                    "Iterable[T]",
                    "Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "InclusionTag.get_context": {
            "name": "get_context",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "CookielawBanner.render_tag": {
            "name": "render_tag",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        }
    },
    "dmlsite-master/dmlsite/templatetags/__init__.py": {}
}
{
    "dmlsrim-master/dev.py": {},
    "dmlsrim-master/__init__.py": {},
    "dmlsrim-master/src/ceria.py": {},
    "dmlsrim-master/src/cli.py": {
        "hello": {
            "name": "hello",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "goodbye": {
            "name": "goodbye",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "formal": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "run_dcf": {
            "name": "run_dcf",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ],
                "formal": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "dmlsrim-master/src/dcf.py": {
        "make_element_subfolder_name": {
            "name": "make_element_subfolder_name",
            "location": 125,
            "return": [
                "str",
                "pathlib2.Path"
            ],
            "arguments": {
                "layer": [
                    "Dict[str, Any]",
                    "List[object]",
                    "int",
                    "List[str]"
                ],
                "ion": [
                    "Optional[str]",
                    "float",
                    "str",
                    "dict"
                ],
                "precision": [
                    "mytypes.precisionLitType",
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "Iterator"
                ]
            }
        },
        "make_data_path": {
            "name": "make_data_path",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "layer": [
                    "srim.Ion",
                    "mytypes.precisionLitType",
                    "srim.Layer"
                ],
                "ion": [
                    "srim.Ion",
                    "mytypes.precisionLitType",
                    "srim.Layer"
                ],
                "data_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "precision": [
                    "srim.Ion",
                    "mytypes.precisionLitType",
                    "srim.Layer"
                ]
            }
        },
        "make_image_path": {
            "name": "make_image_path",
            "location": 177,
            "return": [
                "str",
                "pathlib.PosixPath",
                "pathlib.Path",
                "Type[Any]"
            ],
            "arguments": {
                "layer": [
                    "mytypes.precisionLitType",
                    "srim.Ion",
                    "srim.Layer"
                ],
                "ion": [
                    "mytypes.precisionLitType",
                    "srim.Ion",
                    "srim.Layer"
                ],
                "image_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "precision": [
                    "mytypes.precisionLitType",
                    "srim.Ion",
                    "srim.Layer"
                ]
            }
        },
        "get_depth_damage_array": {
            "name": "get_depth_damage_array",
            "location": 189,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "results": [
                    "srim.outpuResults",
                    "bool",
                    "int",
                    "Iterable[Iterable[str]]",
                    "List[str]"
                ],
                "units": [
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "trunc_depth_damage_array": {
            "name": "trunc_depth_damage_array",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "results": [
                    "mytypes.precisionLitType",
                    "srim.outpuResults",
                    "str",
                    "int",
                    "bool"
                ],
                "units": [
                    "mytypes.precisionLitType",
                    "srim.outpuResults",
                    "str",
                    "int",
                    "bool"
                ],
                "depth": [
                    "bool",
                    "Tuple[str, str]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "get_damage_array": {
            "name": "get_damage_array",
            "location": 219,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "results": [
                    "int",
                    "srim.outpuResults",
                    "mytypes.precisionLitType",
                    "str"
                ],
                "units": [
                    "int",
                    "srim.outpuResults",
                    "mytypes.precisionLitType",
                    "str"
                ],
                "depth": [
                    "int",
                    "srim.outpuResults",
                    "mytypes.precisionLitType",
                    "str"
                ]
            }
        },
        "get_damage_stats": {
            "name": "get_damage_stats",
            "location": 225,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "results": [
                    "int",
                    "srim.outpuResults",
                    "mytypes.precisionLitType",
                    "List[int]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Any]"
                ],
                "units": [
                    "int",
                    "srim.outpuResults",
                    "mytypes.precisionLitType",
                    "List[int]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Any]"
                ],
                "depth": [
                    "int",
                    "srim.outpuResults",
                    "mytypes.precisionLitType",
                    "List[int]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "plot_damage_multi": {
            "name": "plot_damage_multi",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "list",
                    "dict",
                    "tuple",
                    "List[str]"
                ],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "T",
                    "Optional[int]",
                    "int"
                ],
                "units": [
                    "mytypes.precisionLitType",
                    "int",
                    "float",
                    "bool"
                ],
                "depth": [
                    "mytypes.precisionLitType",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "plot_damage_multi_from_path": {
            "name": "plot_damage_multi_from_path",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "data_parent": [
                    "dict",
                    "numpy.ndarray",
                    "bytes"
                ],
                "units": [
                    "mytypes.precisionLitType",
                    "int",
                    "numpy.ndarray",
                    "dict",
                    "bool",
                    "bytes"
                ],
                "depth": [
                    "mytypes.precisionLitType",
                    "int",
                    "numpy.ndarray",
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "plot_damage_energy_per_ion": {
            "name": "plot_damage_energy_per_ion",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "srim.outpuResults",
                    "str"
                ],
                "folder": [
                    "str",
                    "Callable[[Any], bool]"
                ],
                "units": [
                    "mytypes.precisionLitType",
                    "srim.outpuResults",
                    "int",
                    "str"
                ]
            }
        },
        "plot_damage_energy_total": {
            "name": "plot_damage_energy_total",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "srim.outpuResults",
                    "str"
                ],
                "folder": [
                    "str",
                    "Callable[[Any], bool]"
                ],
                "units": [
                    "mytypes.precisionLitType",
                    "srim.outpuResults",
                    "int",
                    "str"
                ]
            }
        },
        "run_srim": {
            "name": "run_srim",
            "location": 327,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "ion": [
                    "int",
                    "Sequence[float]",
                    "Dict[str, int]",
                    "str",
                    "Iterable[Union[Any, int]]"
                ],
                "target": [
                    "float",
                    "int",
                    "str"
                ],
                "data_out_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "num_ions": [
                    "float",
                    "int",
                    "str"
                ],
                "srim_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "bool"
                ]
            }
        },
        "plot_srim": {
            "name": "plot_srim",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "srim.outpuResults",
                    "pathlib.Path",
                    "mytypes.precisionLitType",
                    "Optional[pathlib.Path]",
                    "str"
                ],
                "image_out_dir": [
                    "srim.outpuResults",
                    "pathlib.Path",
                    "mytypes.precisionLitType",
                    "Optional[pathlib.Path]",
                    "str"
                ],
                "units": [
                    "srim.outpuResults",
                    "pathlib.Path",
                    "mytypes.precisionLitType",
                    "Optional[pathlib.Path]",
                    "str"
                ],
                "total": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[pathlib.Path]"
                ],
                "per_ion": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[pathlib.Path]"
                ]
            }
        },
        "combined_srim": {
            "name": "combined_srim",
            "location": 353,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ion": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "bool",
                    "Optional[str]"
                ],
                "target": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "bool",
                    "Optional[str]"
                ],
                "data_path": [
                    "str",
                    "pathlib.Path"
                ],
                "num_ions": [
                    "pathlib.Path",
                    "int",
                    "str"
                ],
                "srim_dir": [
                    "pathlib.Path",
                    "str",
                    "int"
                ]
            }
        },
        "create_ion_list": {
            "name": "create_ion_list",
            "location": 381,
            "return": [
                "List[Dict]",
                "str",
                "list",
                "bool",
                "Union[str, List[Any]]",
                "List[str]",
                "matplotlib.colorbar.Colorbar",
                "List[int]"
            ],
            "arguments": {
                "ion_name": [
                    "str",
                    "List[str]"
                ],
                "energy_list": [
                    "str",
                    "List[str]"
                ],
                "units": [
                    "Literal",
                    "Sequence[str]",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "pool_srim": {
            "name": "pool_srim",
            "location": 389,
            "return": [
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "ions": [
                    "bool",
                    "str",
                    "Path",
                    "Optional[List]"
                ],
                "target": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ],
                "data_path": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ],
                "num_ions": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ],
                "srim_dir": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ]
            }
        },
        "pickle_srim": {
            "name": "pickle_srim",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "srimdata": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "json_srim": {
            "name": "json_srim",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "srimdata": [
                    "str",
                    "Callable",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Union[str, Dict]"
                ]
            }
        },
        "SrimData.__post_init__": {
            "name": "__post_init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimData.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElemClass.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElemClass.as_dict": {
            "name": "as_dict",
            "location": 92,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElemClass.as_typdict": {
            "name": "as_typdict",
            "location": 97,
            "return": [
                "int",
                "numpy.ndarray",
                "List[int]",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlsrim-master/src/dcfclass.py": {
        "make_element_subfolder_name": {
            "name": "make_element_subfolder_name",
            "location": 126,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "layer": [
                    "Dict[str, Any]",
                    "List[object]",
                    "int",
                    "List[str]"
                ],
                "ion": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ],
                "precision": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "make_data_path": {
            "name": "make_data_path",
            "location": 167,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "layer": [
                    "srim.Ion",
                    "mytypes.precisionLitType",
                    "srim.Layer"
                ],
                "ion": [
                    "srim.Ion",
                    "mytypes.precisionLitType",
                    "srim.Layer"
                ],
                "data_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "precision": [
                    "srim.Ion",
                    "mytypes.precisionLitType",
                    "srim.Layer"
                ]
            }
        },
        "make_image_path": {
            "name": "make_image_path",
            "location": 181,
            "return": [
                "str",
                "pathlib.PosixPath",
                "pathlib.Path",
                "Type[Any]"
            ],
            "arguments": {
                "layer": [
                    "mytypes.precisionLitType",
                    "srim.Ion",
                    "srim.Layer"
                ],
                "ion": [
                    "mytypes.precisionLitType",
                    "srim.Ion",
                    "srim.Layer"
                ],
                "image_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "precision": [
                    "mytypes.precisionLitType",
                    "srim.Ion",
                    "srim.Layer"
                ]
            }
        },
        "plot_damage_multi": {
            "name": "plot_damage_multi",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "deeplearning.ml4pl.models.epoch.Results",
                    "List[str]",
                    "bool"
                ],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "T",
                    "Optional[int]",
                    "int"
                ],
                "units": [
                    "str",
                    "multiprocessing.Queue",
                    "Exception"
                ],
                "depth": [
                    "int",
                    "str",
                    "dict",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "get_ion_energy_damage_total": {
            "name": "get_ion_energy_damage_total",
            "location": 700,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "results": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "plot_ion_energy_damage": {
            "name": "plot_ion_energy_damage",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "str",
                    "Union[int, str]"
                ],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "bool",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "plot_ion_energy_maxdmg_depth": {
            "name": "plot_ion_energy_maxdmg_depth",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "List[str]",
                    "int"
                ],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "bool",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "run_srim": {
            "name": "run_srim",
            "location": 747,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "ion": [
                    "int",
                    "Sequence[float]",
                    "Dict[str, int]",
                    "str",
                    "Iterable[Union[Any, int]]"
                ],
                "target": [
                    "float",
                    "int",
                    "str"
                ],
                "data_out_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "num_ions": [
                    "float",
                    "int",
                    "str"
                ],
                "srim_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "bool"
                ]
            }
        },
        "combined_srim": {
            "name": "combined_srim",
            "location": 761,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ion": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "bool",
                    "Optional[str]"
                ],
                "target": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "bool",
                    "Optional[str]"
                ],
                "data_path": [
                    "str",
                    "pathlib.Path"
                ],
                "num_ions": [
                    "pathlib.Path",
                    "int",
                    "str"
                ],
                "srim_dir": [
                    "pathlib.Path",
                    "str",
                    "int"
                ]
            }
        },
        "create_ion_list": {
            "name": "create_ion_list",
            "location": 790,
            "return": [
                "List[Dict]",
                "str",
                "list",
                "bool",
                "Union[str, List[Any]]",
                "List[str]",
                "matplotlib.colorbar.Colorbar",
                "List[int]"
            ],
            "arguments": {
                "ion_name": [
                    "str",
                    "List[str]"
                ],
                "energy_list": [
                    "str",
                    "List[str]"
                ],
                "units": [
                    "Literal",
                    "Sequence[str]",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "pool_srim": {
            "name": "pool_srim",
            "location": 798,
            "return": [
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "ions": [
                    "bool",
                    "str",
                    "Path",
                    "Optional[List]"
                ],
                "target": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ],
                "data_path": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ],
                "num_ions": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ],
                "srim_dir": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]"
                ]
            }
        },
        "pickle_srim": {
            "name": "pickle_srim",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "srimdata": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "json_srim": {
            "name": "json_srim",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "srimdata": [
                    "str",
                    "Callable",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Union[str, Dict]"
                ]
            }
        },
        "SrimData.__post_init__": {
            "name": "__post_init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimData.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElemClass.__post_init__": {
            "name": "__post_init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElemClass.as_dict": {
            "name": "as_dict",
            "location": 93,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElemClass.as_typdict": {
            "name": "as_typdict",
            "location": 98,
            "return": [
                "int",
                "numpy.ndarray",
                "List[int]",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inp": [
                    "str",
                    "dict",
                    "List[Callable]",
                    "List[str]",
                    "bool",
                    "numpy.ndarray"
                ],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "units": [
                    "str",
                    "List[int]"
                ],
                "depth": [
                    "int",
                    "bool",
                    "float"
                ],
                "savepath": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "SrimResults.__str__": {
            "name": "__str__",
            "location": 236,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.__eq__": {
            "name": "__eq__",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Type"
                ]
            }
        },
        "SrimResults.__lt__": {
            "name": "__lt__",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SrimResults._valid_units": {
            "name": "_valid_units",
            "location": 252,
            "return": [
                "dict",
                "bytes",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "Callable[[str], bool]",
                    "List[object]",
                    "Optional[str]",
                    "mytypes.precisionLitType",
                    "dict",
                    "int"
                ]
            }
        },
        "SrimResults.target": {
            "name": "target",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SrimResults.layers": {
            "name": "layers",
            "location": 272,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults._get_layer_depths": {
            "name": "_get_layer_depths",
            "location": 278,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults._get_total_thickness": {
            "name": "_get_total_thickness",
            "location": 285,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.get_depth_damage_array": {
            "name": "get_depth_damage_array",
            "location": 288,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.trunc_depth_damage_array": {
            "name": "trunc_depth_damage_array",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.make_depth_damage_table": {
            "name": "make_depth_damage_table",
            "location": 312,
            "return": [
                "str",
                "Optional[Iterable[Any]]",
                "list",
                "Optional[List[str]]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.make_depth_damage_csv": {
            "name": "make_depth_damage_csv",
            "location": 320,
            "return": [
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[pathlib.Path]",
                    "bool"
                ]
            }
        },
        "SrimResults.get_damage_array": {
            "name": "get_damage_array",
            "location": 330,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.get_depth_array": {
            "name": "get_depth_array",
            "location": 336,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults.get_index_from_depth": {
            "name": "get_index_from_depth",
            "location": 342,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "chosen_depth": [
                    "int",
                    "float"
                ]
            }
        },
        "SrimResults.get_damage_stats": {
            "name": "get_damage_stats",
            "location": 348,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SrimResults._create_damage_depth_fig": {
            "name": "_create_damage_depth_fig",
            "location": 357,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "depth_marker": [
                    "int",
                    "Union[concurrenfutures.Future, asyncio.futures.Future]",
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "plot_type": [
                    "Literal",
                    "type",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "SrimResults._add_damage_depth_line": {
            "name": "_add_damage_depth_line",
            "location": 381,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ],
                "plot_type": [
                    "Literal",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "SrimResults.plot_damage_depth": {
            "name": "plot_damage_depth",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]",
                    "int",
                    "Optional[IO[bytes]]",
                    "Iterable[str]",
                    "str",
                    "Union[pathlib.Path, str, None]"
                ],
                "depth_marker": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "plot_type": [
                    "str",
                    "int"
                ]
            }
        },
        "SrimResults.plot_srim": {
            "name": "plot_srim",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "dict",
                    "int",
                    "tuple"
                ],
                "depth_marker": [
                    "str",
                    "dict",
                    "int",
                    "tuple"
                ],
                "total": [
                    "bool",
                    "str"
                ],
                "per_ion": [
                    "bool",
                    "str"
                ]
            }
        },
        "MultiSrimResults.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inp": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PosixPath",
                    "BinaryIO",
                    "IO[Any]",
                    "IO[str]",
                    "Union[str, pathlib.Path]"
                ],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "units": [
                    "int",
                    "bool",
                    "float"
                ],
                "depth": [
                    "bool",
                    "Sequence[int]",
                    "Iterable[Any]",
                    "str"
                ],
                "savepath": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Generator[str, None, None]"
                ]
            }
        },
        "MultiSrimResults.plot_damage_multi": {
            "name": "plot_damage_multi",
            "location": 473,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "depth_marker": [
                    "int",
                    "str",
                    "Type[T]",
                    "Union[tuple, list]"
                ],
                "plot_type": [
                    "Literal",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "MultiSrimResults.get_depth_damage_arrays": {
            "name": "get_depth_damage_arrays",
            "location": 491,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiSrimResults.get_damage_total_energy_array": {
            "name": "get_damage_total_energy_array",
            "location": 494,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "depth_marker": [
                    "str",
                    "bool"
                ]
            }
        },
        "MultiSrimResults.plot_max_and_total_dmg": {
            "name": "plot_max_and_total_dmg",
            "location": 510,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "depth_marker": [
                    "int",
                    "bool",
                    "Sequence[str]"
                ],
                "x_max": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ],
                "depth_max": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ],
                "damage_max": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ],
                "title": [
                    "bool",
                    "List[int]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "MultiSrimResults.plot_damage_total_energy": {
            "name": "plot_damage_total_energy",
            "location": 574,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x_max": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y_max": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "title": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "MultiSrimResults.plot_max_dmgdepth_energy": {
            "name": "plot_max_dmgdepth_energy",
            "location": 597,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "depth_marker": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "Callable"
                ],
                "x_max": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ],
                "y_max": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "MultiSrimResults.plot_surface_damage": {
            "name": "plot_surface_damage",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chosen_depth": [
                    "str"
                ]
            }
        }
    },
    "dmlsrim-master/src/main.py": {
        "make_element_subfolder_name": {
            "name": "make_element_subfolder_name",
            "location": 79,
            "return": [],
            "arguments": {
                "layer": [],
                "ion": [],
                "precision": []
            }
        },
        "make_data_path": {
            "name": "make_data_path",
            "location": 118,
            "return": [],
            "arguments": {
                "layer": [],
                "ion": [],
                "data_path": [],
                "precision": []
            }
        },
        "make_image_path": {
            "name": "make_image_path",
            "location": 131,
            "return": [],
            "arguments": {
                "layer": [],
                "ion": [],
                "image_path": [],
                "precision": []
            }
        },
        "get_energy_damage_array": {
            "name": "get_energy_damage_array",
            "location": 143,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "calc_energy_damage": {
            "name": "calc_energy_damage",
            "location": 151,
            "return": [],
            "arguments": {
                "results": [],
                "units": []
            }
        },
        "save_damage_energy": {
            "name": "save_damage_energy",
            "location": 164,
            "return": [],
            "arguments": {
                "results": [],
                "units": []
            }
        },
        "plot_damage_energy": {
            "name": "plot_damage_energy",
            "location": 179,
            "return": [],
            "arguments": {
                "results": [],
                "ax": [],
                "units": [],
                "plot_label": []
            }
        }
    },
    "dmlsrim-master/src/mung.py": {},
    "dmlsrim-master/src/parser.py": {
        "is_balanced": {
            "name": "is_balanced",
            "location": 22,
            "return": [],
            "arguments": {
                "formula": []
            }
        },
        "is_real_elements": {
            "name": "is_real_elements",
            "location": 29,
            "return": [],
            "arguments": {
                "formula": []
            }
        },
        "_dictify": {
            "name": "_dictify",
            "location": 113,
            "return": [],
            "arguments": {
                "tuples": []
            }
        },
        "_fuse": {
            "name": "_fuse",
            "location": 124,
            "return": [],
            "arguments": {
                "mol1": [],
                "mol2": [],
                "w": []
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 137,
            "return": [],
            "arguments": {
                "formula": []
            }
        },
        "parse_formula": {
            "name": "parse_formula",
            "location": 177,
            "return": [],
            "arguments": {
                "formula": []
            }
        },
        "parse_print_from_input": {
            "name": "parse_print_from_input",
            "location": 214,
            "return": [],
            "arguments": {}
        }
    },
    "dmlsrim-master/src/reg.py": {
        "_read_target": {
            "name": "_read_target",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [
                    "str",
                    "bool",
                    "IO[str]",
                    "Iterable[\"Issue\"]"
                ]
            }
        }
    },
    "dmlsrim-master/src/urania.py": {},
    "dmlsrim-master/src/webgui.py": {},
    "dmlsrim-master/src/__init__.py": {},
    "dmlsrim-master/src/mytypes/__init__.py": {},
    "dmlsrim-master/src/mytypes/srim/output.py": {
        "buffered_findall": {
            "name": "buffered_findall",
            "location": 683,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "string": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "SRIM_Output._read_name": {
            "name": "_read_name",
            "location": 28,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "bool",
                    "bytes",
                    "numpy.ma.MaskedArray",
                    "Union[str, pathlib.Path, BinaryIO]",
                    "Iterable[str]"
                ]
            }
        },
        "SRIM_Output._read_ion": {
            "name": "_read_ion",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        },
        "SRIM_Output._read_target": {
            "name": "_read_target",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "bool",
                    "IO[str]",
                    "Iterable[\"Issue\"]"
                ]
            }
        },
        "SRIM_Output._read_num_ions": {
            "name": "_read_num_ions",
            "location": 71,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "bytes",
                    "List[str]",
                    "numpy.ndarray",
                    "Callable"
                ]
            }
        },
        "SRIM_Output._read_table": {
            "name": "_read_table",
            "location": 78,
            "return": [
                "bool",
                "dict",
                "pathlib.Path",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "Callable",
                    "List[Union[str, Any]]",
                    "str"
                ]
            }
        },
        "Results.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "T",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Ioniz.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "Ioniz.ion": {
            "name": "ion",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioniz.num_ions": {
            "name": "num_ions",
            "location": 163,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioniz.depth": {
            "name": "depth",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioniz.ions": {
            "name": "ions",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioniz.recoils": {
            "name": "recoils",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vacancy.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "Vacancy.ion": {
            "name": "ion",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vacancy.num_ions": {
            "name": "num_ions",
            "location": 218,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vacancy.depth": {
            "name": "depth",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vacancy.knock_ons": {
            "name": "knock_ons",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vacancy.vacancies": {
            "name": "vacancies",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoVacancy.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "NoVacancy.ion": {
            "name": "ion",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoVacancy.num_ions": {
            "name": "num_ions",
            "location": 276,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoVacancy.depth": {
            "name": "depth",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoVacancy.number": {
            "name": "number",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyToRecoils.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "EnergyToRecoils.ion": {
            "name": "ion",
            "location": 316,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyToRecoils.num_ions": {
            "name": "num_ions",
            "location": 324,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyToRecoils.depth": {
            "name": "depth",
            "location": 329,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyToRecoils.ions": {
            "name": "ions",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyToRecoils.absorbed": {
            "name": "absorbed",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phonons.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "Phonons.ion": {
            "name": "ion",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phonons.num_ions": {
            "name": "num_ions",
            "location": 380,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phonons.depth": {
            "name": "depth",
            "location": 385,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phonons.ions": {
            "name": "ions",
            "location": 390,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phonons.recoils": {
            "name": "recoils",
            "location": 395,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "Range.ion": {
            "name": "ion",
            "location": 426,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.num_ions": {
            "name": "num_ions",
            "location": 434,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.depth": {
            "name": "depth",
            "location": 439,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.ions": {
            "name": "ions",
            "location": 444,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.elements": {
            "name": "elements",
            "location": 449,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collision.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "int"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Collision._read_header": {
            "name": "_read_header",
            "location": 503,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "io.TextIO",
                    "Callable",
                    "str",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "Collision._read_ion": {
            "name": "_read_ion",
            "location": 518,
            "return": [
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "ion_str": [
                    "str",
                    "type",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "Collision._read_ion_footer": {
            "name": "_read_ion_footer",
            "location": 581,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "List[str]"
                ],
                "collisions": [
                    "bool",
                    "tuple"
                ]
            }
        },
        "Collision._read_cascade": {
            "name": "_read_cascade",
            "location": 615,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "Collision.__getitem__": {
            "name": "__getitem__",
            "location": 665,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Union[int, numpy.ndarray]"
                ]
            }
        },
        "Collision.__len__": {
            "name": "__len__",
            "location": 679,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRResults.__init__": {
            "name": "__init__",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "SRResults._read_stopping_units": {
            "name": "_read_stopping_units",
            "location": 722,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "Pattern",
                    "bytes"
                ]
            }
        },
        "SRResults._read_ion_info": {
            "name": "_read_ion_info",
            "location": 731,
            "return": [
                "Callable",
                "str",
                "Mapping[int, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        },
        "SRResults._read_target_info": {
            "name": "_read_target_info",
            "location": 743,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "pathlib.PurePath"
                ]
            }
        },
        "SRResults._read_stopping_table": {
            "name": "_read_stopping_table",
            "location": 791,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "dict",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SRResults.units": {
            "name": "units",
            "location": 866,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRResults.data": {
            "name": "data",
            "location": 870,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRResults.ion": {
            "name": "ion",
            "location": 884,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRResults.target": {
            "name": "target",
            "location": 895,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SRResults._read_stopping_table.energy_conversion": {
            "name": "energy_conversion",
            "location": 831,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "a": [
                    "float",
                    "numpy.ndarray",
                    "List[int]",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "SRResults._read_stopping_table.length_conversion": {
            "name": "length_conversion",
            "location": 838,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "numpy.ndarray",
                    "int",
                    "list",
                    "str",
                    "float",
                    "type"
                ]
            }
        }
    },
    "dmlsrim-master/src/mytypes/srim/core/types.py": {},
    "dmlsrim-master/tests/dependancy_tree.py": {
        "captured_output": {
            "name": "captured_output",
            "location": 11,
            "return": [
                "typing.Generator[io.StringIO, None, None]"
            ],
            "arguments": {
                "stream_name": [
                    "str",
                    "int"
                ]
            }
        },
        "captured_stdout": {
            "name": "captured_stdout",
            "location": 22,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "captured_stderr": {
            "name": "captured_stderr",
            "location": 27,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "captured_stdin": {
            "name": "captured_stdin",
            "location": 32,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "dmlsrim-master/tests/test_main.py": {
        "test_srim_directory_path": {
            "name": "test_srim_directory_path",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_data_path": {
            "name": "test_make_data_path",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_image_path": {
            "name": "test_make_image_path",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlsrim-master/tests/__init__.py": {}
}
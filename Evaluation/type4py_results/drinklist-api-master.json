{
    "drinklist-api-master/setup.py": {},
    "drinklist-api-master/drinklist_api/config.py": {},
    "drinklist-api-master/drinklist_api/loggingInit.py": {
        "dict_merge": {
            "name": "dict_merge",
            "location": 9,
            "return": [
                "str",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[str]",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "b": [
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/login.py": {
        "AuthUser.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "login_provider": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "LoginProvider.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "Dict[str, Any]"
                ],
                "provider_name": [
                    "Optional[List[str]]",
                    "str",
                    "Type",
                    "user.User",
                    "List[str]"
                ]
            }
        },
        "LoginProvider.register_provider": {
            "name": "register_provider",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "login_provider": [
                    "str",
                    "int"
                ]
            }
        },
        "LoginProvider.get_login_provider": {
            "name": "get_login_provider",
            "location": 65,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "LoginProvider.list_login_providers": {
            "name": "list_login_providers",
            "location": 78,
            "return": [
                "List[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {}
        },
        "LoginProvider.init": {
            "name": "init",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginProvider.valid_user": {
            "name": "valid_user",
            "location": 97,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LoginProvider.valid_password": {
            "name": "valid_password",
            "location": 104,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "LoginProvider.is_kiosk_user": {
            "name": "is_kiosk_user",
            "location": 111,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "LoginProvider.is_consuming_user": {
            "name": "is_consuming_user",
            "location": 118,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "LoginProvider.is_admin": {
            "name": "is_admin",
            "location": 125,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LoginService.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login_providers": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "LoginService.get_user": {
            "name": "get_user",
            "location": 149,
            "return": [
                "Optional[str]",
                "bool",
                "List[str]",
                "Callable[[], None]",
                "tracim.models.auth.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LoginService.check_password": {
            "name": "check_password",
            "location": 170,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "password": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/routes.py": {},
    "drinklist-api-master/drinklist_api/__init__.py": {},
    "drinklist-api-master/drinklist_api/api/api_models.py": {},
    "drinklist-api-master/drinklist_api/api/authentication.py": {
        "login_user": {
            "name": "login_user",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "AuthenticationRoutes.get": {
            "name": "get",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Login.post": {
            "name": "post",
            "location": 81,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreshLogin.post": {
            "name": "post",
            "location": 101,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.get": {
            "name": "get",
            "location": 119,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Refresh.post": {
            "name": "post",
            "location": 136,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drinklist-api-master/drinklist_api/api/beverage.py": {
        "BeverageList.get": {
            "name": "get",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeverageList.post": {
            "name": "post",
            "location": 41,
            "return": [
                "str",
                "Optional[sqlalchemy.engine.Engine]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeverageDetail.get": {
            "name": "get",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "beverage_id": [
                    "int",
                    "str"
                ]
            }
        },
        "BeverageDetail.put": {
            "name": "put",
            "location": 80,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "beverage_id": [
                    "int",
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/api/transaction.py": {
        "TransactionList.get": {
            "name": "get",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "TransactionList.post": {
            "name": "post",
            "location": 56,
            "return": [
                "bool",
                "Optional[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "UserDetail.get": {
            "name": "get",
            "location": 106,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "transaction_id": [
                    "int",
                    "str"
                ],
                "user_name": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "UserDetail.delete": {
            "name": "delete",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "transaction_id": [
                    "str",
                    "int"
                ],
                "user_name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/api/user.py": {
        "UserList.get": {
            "name": "get",
            "location": 28,
            "return": [
                "bool",
                "models.User",
                "arxiv.users.domain.User",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetail.get": {
            "name": "get",
            "location": 45,
            "return": [
                "set",
                "bool",
                "Iterable[str]",
                "bob_emploi.frontend.api.user_pb2.User",
                "Dict[str, Any]",
                "user.transfer.models.User"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "UserDetail.put": {
            "name": "put",
            "location": 59,
            "return": [
                "Optional[str]",
                "bool",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/api/__init__.py": {
        "satisfies_role": {
            "name": "satisfies_role",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "role": [
                    "bool",
                    "app.models.user.User.InDB",
                    "str",
                    "Callable[[Any], bool]",
                    "float",
                    "dict"
                ],
                "user_self_allowed": [
                    "bool",
                    "app.models.user.User.InDB",
                    "str",
                    "Callable[[Any], bool]",
                    "float",
                    "dict"
                ]
            }
        },
        "render_root": {
            "name": "render_root",
            "location": 70,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "load_user_identity": {
            "name": "load_user_identity",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "load_user_claims": {
            "name": "load_user_claims",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Optional[starlette.authentication.AuthCredentials]"
                ]
            }
        },
        "verify_claims": {
            "name": "verify_claims",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "claims": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "expired_token": {
            "name": "expired_token",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "invalid_token": {
            "name": "invalid_token",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "unauthorized": {
            "name": "unauthorized",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "float"
                ]
            }
        },
        "stale_token": {
            "name": "stale_token",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "revoked_token": {
            "name": "revoked_token",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "missing_header": {
            "name": "missing_header",
            "location": 153,
            "return": [
                "Optional[Callable]",
                "List[object]",
                "Dict[str, Callable[[], Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "werkzeug.exceptions.Unauthorized"
                ]
            }
        },
        "default_errorhandler": {
            "name": "default_errorhandler",
            "location": 162,
            "return": [],
            "arguments": {
                "error": [
                    "Optional[str]",
                    "Exception",
                    "str",
                    "Dict[str, Optional[str]]",
                    "Callable"
                ]
            }
        },
        "log_unauthorized": {
            "name": "log_unauthorized",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "satisfies_role.has_roles_decorator": {
            "name": "has_roles_decorator",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "RootResource.get": {
            "name": "get",
            "location": 191,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryResource.get": {
            "name": "get",
            "location": 213,
            "return": [
                "str",
                "Union[str, int]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "satisfies_role.has_roles_decorator.wrapper": {
            "name": "wrapper",
            "location": 44,
            "return": [
                "Dict[str, int]",
                "Generator",
                "int"
            ],
            "arguments": {}
        }
    },
    "drinklist-api-master/drinklist_api/auth_providers/basic_auth_provider.py": {
        "BasicAuthProvider.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuthProvider.init": {
            "name": "init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuthProvider.valid_user": {
            "name": "valid_user",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Dict[int, int]",
                    "int",
                    "dict"
                ]
            }
        },
        "BasicAuthProvider.valid_password": {
            "name": "valid_password",
            "location": 29,
            "return": [
                "Optional[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "BasicAuthProvider.is_admin": {
            "name": "is_admin",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "BasicAuthProvider.is_kiosk_user": {
            "name": "is_kiosk_user",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Dict[int, int]",
                    "int"
                ]
            }
        },
        "BasicAuthProvider.is_consuming_user": {
            "name": "is_consuming_user",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Dict[int, int]",
                    "int"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/auth_providers/ldap_auth_provider.py": {
        "LDAPAuthProvider.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPAuthProvider.init": {
            "name": "init",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LDAPAuthProvider.valid_user": {
            "name": "valid_user",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LDAPAuthProvider.combine_filters": {
            "name": "combine_filters",
            "location": 71,
            "return": [
                "str",
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]"
                ],
                "filters": [
                    "List[Dict]"
                ]
            }
        },
        "LDAPAuthProvider.valid_password": {
            "name": "valid_password",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Union[tuple, list]",
                    "List[int]"
                ],
                "password": [
                    "str",
                    "int",
                    "Type[static_frame.core.node_selector.Interface[static_frame.core.node_selector.TContainer]]"
                ]
            }
        },
        "LDAPAuthProvider.is_admin": {
            "name": "is_admin",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "LDAPAuthProvider.is_kiosk_user": {
            "name": "is_kiosk_user",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Dict[int, int]",
                    "int"
                ]
            }
        },
        "LDAPAuthProvider.is_consuming_user": {
            "name": "is_consuming_user",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Dict[int, int]",
                    "int"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/auth_providers/__init__.py": {},
    "drinklist-api-master/drinklist_api/db_models/beverage.py": {
        "Beverage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "price": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "stock": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Beverage.update": {
            "name": "update",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "price": [
                    "str",
                    "int"
                ],
                "stock": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/db_models/transaction.py": {
        "Transaction.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "int",
                    "User",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ],
                "amount": [
                    "bool",
                    "int",
                    "User",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ],
                "reason": [
                    "bool",
                    "int",
                    "User",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ],
                "cancels": [
                    "bool",
                    "int",
                    "User",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/db_models/transaction_beverage.py": {
        "TransactionBeverage.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "int",
                    "str",
                    "bool"
                ],
                "beverage": [
                    "int",
                    "str",
                    "bool"
                ],
                "count": [
                    "int",
                    "str",
                    "bool"
                ],
                "price": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/db_models/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "active": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "Sequence"
                ],
                "balance": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "Sequence"
                ]
            }
        },
        "User.update": {
            "name": "update",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "active": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/db_models/__init__.py": {
        "create_db": {
            "name": "create_db",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_db_function": {
            "name": "create_db_function",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "drop_db": {
            "name": "drop_db",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "drop_db_function": {
            "name": "drop_db_function",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "set_sqlite_pragma": {
            "name": "set_sqlite_pragma",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "dbapi_connection": [
                    "str",
                    "int",
                    "float"
                ],
                "connection_record": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "drinklist-api-master/drinklist_api/debug_routes/__init__.py": {
        "index": {
            "name": "index",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    }
}
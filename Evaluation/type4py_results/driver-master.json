{
    "driver-master/setup.py": {
        "setup": {
            "name": "setup",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "driver-master/lgd/colors.py": {},
    "driver-master/lgd/crc.py": {
        "CRC32.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gp": [
                    "Callable[[None], None]",
                    "int",
                    "Optional[IO[Any]]",
                    "List[dict]"
                ]
            }
        },
        "CRC32._calculate": {
            "name": "_calculate",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "byte": [
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "CRC32.calculate": {
            "name": "calculate",
            "location": 33,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "Union[bytes, bytearray, memoryview]",
                    "dict",
                    "int",
                    "List[float]"
                ]
            }
        }
    },
    "driver-master/lgd/kralik.py": {
        "callback": {
            "name": "callback",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "ch": [
                    "pika.spec.Basic.Deliver",
                    "pika.BasicProperties",
                    "pika.adapters.blocking_connection.BlockingChannel",
                    "bool"
                ],
                "method": [
                    "pika.spec.Basic.Deliver",
                    "pika.BasicProperties",
                    "pika.adapters.blocking_connection.BlockingChannel",
                    "bool"
                ],
                "properties": [
                    "pika.spec.Basic.Deliver",
                    "pika.BasicProperties",
                    "pika.adapters.blocking_connection.BlockingChannel",
                    "bool"
                ],
                "body": [
                    "bytes",
                    "bool",
                    "T",
                    "int",
                    "str"
                ]
            }
        }
    },
    "driver-master/lgd/log.py": {
        "err": {
            "name": "err",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "war": {
            "name": "war",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ok": {
            "name": "ok",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "stdo": {
            "name": "stdo",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "rx": {
            "name": "rx",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "dict"
                ],
                "prompt": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "tx": {
            "name": "tx",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "driver-master/lgd/main.py": {
        "read": {
            "name": "read",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "uart_rx_callback": {
            "name": "uart_rx_callback",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "rx_byte": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "driver-master/lgd/packet.py": {
        "Packet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ser": [
                    "int",
                    "bool",
                    "float"
                ],
                "crc": [
                    "int",
                    "bool",
                    "float"
                ],
                "address": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Packet.set_address": {
            "name": "set_address",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "float"
                ]
            }
        },
        "Packet.get_address": {
            "name": "get_address",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.set_data": {
            "name": "set_data",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "Packet.get_data": {
            "name": "get_data",
            "location": 29,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, List[int]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.set_stream": {
            "name": "set_stream",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "float"
                ]
            }
        },
        "Packet.get_stream": {
            "name": "get_stream",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.create": {
            "name": "create",
            "location": 38,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Union[Dict, List]",
                    "Union[Dict, None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Packet.tx": {
            "name": "tx",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "driver-master/lgd/uart.py": {
        "UART.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "baudrate": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "bytesize": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "parity": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "port": [
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "UART.__del__": {
            "name": "__del__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.cmd_delay": {
            "name": "cmd_delay",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.find_device": {
            "name": "find_device",
            "location": 31,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.list_ports": {
            "name": "list_ports",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.open_connection": {
            "name": "open_connection",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.close_connection": {
            "name": "close_connection",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.read_byte": {
            "name": "read_byte",
            "location": 60,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UART.send_byte": {
            "name": "send_byte",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "byte": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "UART.write": {
            "name": "write",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "dict",
                    "bytes",
                    "Optional[float]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "driver-master/lgd/__init__.py": {}
}
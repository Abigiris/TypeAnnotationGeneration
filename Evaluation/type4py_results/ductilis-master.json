{
    "ductilis-master/manage.py": {},
    "ductilis-master/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str",
                    "int"
                ],
                "merged_file_paths": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ],
                "append_linesep": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "Tuple[str, str]",
                    "str"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ductilis-master/computation/__init__.py": {},
    "ductilis-master/docs/conf.py": {},
    "ductilis-master/docs/__init__.py": {},
    "ductilis-master/ductilis/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "Union[str, int]",
                    "dict",
                    "int",
                    "Union[str, float]"
                ]
            }
        }
    },
    "ductilis-master/ductilis/urls.py": {},
    "ductilis-master/ductilis/wsgi.py": {},
    "ductilis-master/ductilis/__init__.py": {},
    "ductilis-master/ductilis/api/__init__.py": {},
    "ductilis-master/ductilis/api/v1/api.py": {
        "ticks_list": {
            "name": "ticks_list",
            "location": 95,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "tickerSymbol": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "dict"
                ]
            }
        },
        "PortfolioViewSet.create": {
            "name": "create",
            "location": 25,
            "return": [
                "bool",
                "core.models.User",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "WeightPortfolioViewSet.create": {
            "name": "create",
            "location": 46,
            "return": [
                "bool",
                "core.models.User",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "ductilis-master/ductilis/api/v1/apps.py": {},
    "ductilis-master/ductilis/api/v1/serializers.py": {},
    "ductilis-master/ductilis/api/v1/urls.py": {},
    "ductilis-master/ductilis/api/v1/views.py": {},
    "ductilis-master/ductilis/api/v1/__init__.py": {},
    "ductilis-master/ductilis/api/v1/tests/test_api.py": {
        "TickersTests.test_access_tickers": {
            "name": "test_access_tickers",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TicksTests.test_access_tickers": {
            "name": "test_access_tickers",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/api/v1/tests/__init__.py": {},
    "ductilis-master/ductilis/company/admin.py": {
        "ExportCsvMixin.export_as_csv": {
            "name": "export_as_csv",
            "location": 9,
            "return": [
                "bytes",
                "int",
                "List[str]",
                "str",
                "dict",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "apistar.http.Request"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "int",
                    "apistar.http.Request"
                ]
            }
        },
        "IndustryAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 31,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "IndustryAdmin.company_count": {
            "name": "company_count",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "SectorAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SectorAdmin.company_count": {
            "name": "company_count",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "ductilis-master/ductilis/company/apps.py": {},
    "ductilis-master/ductilis/company/models.py": {
        "Industry.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sector.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiscalPeriod.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "Mapping[str, Any]",
                "Callable",
                "core.models.Grouping"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/company/urls.py": {},
    "ductilis-master/ductilis/company/views.py": {
        "index": {
            "name": "index",
            "location": 10,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "detail": {
            "name": "detail",
            "location": 18,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "company_id": [
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "events": {
            "name": "events",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "str",
                    "bytes"
                ],
                "company_id": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "bool",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "ductilis-master/ductilis/company/__init__.py": {},
    "ductilis-master/ductilis/company/migrations/0001_initial.py": {},
    "ductilis-master/ductilis/company/migrations/__init__.py": {},
    "ductilis-master/ductilis/company/tests/test_models.py": {
        "CompanyTestCase.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompanyTestCase.test_companies_have_symbols": {
            "name": "test_companies_have_symbols",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/company/tests/__init__.py": {},
    "ductilis-master/ductilis/exchange/admin.py": {
        "ExchangeAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ExchangeAdmin.provider_count": {
            "name": "provider_count",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/apps.py": {},
    "ductilis-master/ductilis/exchange/models.py": {
        "Exchange.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticker.company_name": {
            "name": "company_name",
            "location": 49,
            "return": [
                "str",
                "zerver.models.Realm",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticker.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TickManager.get_by_natural_key": {
            "name": "get_by_natural_key",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "int"
                ],
                "date": [
                    "int"
                ],
                "provider": [
                    "int"
                ]
            }
        },
        "TickDefaultProviderManagerold.get_queryset": {
            "name": "get_queryset",
            "location": 80,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TickDefaultProviderManager.get_queryset": {
            "name": "get_queryset",
            "location": 88,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TickSingleSymbolManager.get_queryset": {
            "name": "get_queryset",
            "location": 93,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/tasks.py": {
        "call_iex_task": {
            "name": "call_iex_task",
            "location": 18,
            "return": [
                "Union[List, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "call_quandl_task": {
            "name": "call_quandl_task",
            "location": 22,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "call_yahoo_task": {
            "name": "call_yahoo_task",
            "location": 36,
            "return": [
                "Iterator[T]",
                "app.models.Article",
                "Dict[str, Any]",
                "Iterator[Dict[str, str]]",
                "dict",
                "Iterable[core.models.User]"
            ],
            "arguments": {}
        }
    },
    "ductilis-master/ductilis/exchange/urls.py": {},
    "ductilis-master/ductilis/exchange/views.py": {},
    "ductilis-master/ductilis/exchange/__init__.py": {},
    "ductilis-master/ductilis/exchange/migrations/0001_initial.py": {},
    "ductilis-master/ductilis/exchange/migrations/__init__.py": {},
    "ductilis-master/ductilis/exchange/providers/iex_call.py": {
        "clean_db": {
            "name": "clean_db",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "build_companies": {
            "name": "build_companies",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "string_to_date": {
            "name": "string_to_date",
            "location": 98,
            "return": [
                "Optional[str]",
                "datetime.date",
                "Optional[datetime.date]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "date_string": [
                    "str"
                ]
            }
        },
        "import_earnings": {
            "name": "import_earnings",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "import_chart": {
            "name": "import_chart",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_tickers_old": {
            "name": "create_tickers_old",
            "location": 182,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "asgard.models.job.ScheduledJob",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "apistar.http.Request"
                ]
            }
        },
        "create_tickers": {
            "name": "create_tickers",
            "location": 191,
            "return": [
                "bool",
                "app.models.dto.LoginResponse",
                "Dict[str, Any]",
                "asgard.models.job.ScheduledJob",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "apistar.http.Request"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/quandl_call.py": {
        "download_extract_zip": {
            "name": "download_extract_zip",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "query_data": {
            "name": "query_data",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "fill_ticks": {
            "name": "fill_ticks",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "Optional[str]"
                ],
                "ticker": [
                    "str",
                    "Type[db.models.BaseModel]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "fill_ticks_old": {
            "name": "fill_ticks_old",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "Optional[str]"
                ],
                "ticker": [
                    "str",
                    "List[str]",
                    "dict",
                    "Callable",
                    "bool"
                ]
            }
        },
        "create_tickers_old": {
            "name": "create_tickers_old",
            "location": 208,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "asgard.models.job.ScheduledJob",
                "Dict[str, Any]",
                "pd.DataFrame"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "apistar.http.Request"
                ]
            }
        },
        "create_tickers": {
            "name": "create_tickers",
            "location": 238,
            "return": [
                "bool",
                "app.models.dto.LoginResponse",
                "Dict[str, Any]",
                "asgard.models.job.ScheduledJob",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "apistar.http.Request"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/yahoo_call.py": {
        "fill_ticks": {
            "name": "fill_ticks",
            "location": 79,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ticker": [
                    "Optional[int]",
                    "Type[BaseException]",
                    "str"
                ]
            }
        },
        "create_tickers_old": {
            "name": "create_tickers_old",
            "location": 202,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "asgard.models.job.ScheduledJob",
                "Dict[str, Any]",
                "pd.DataFrame"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "apistar.http.Request"
                ]
            }
        },
        "create_tickers": {
            "name": "create_tickers",
            "location": 216,
            "return": [
                "bool",
                "app.models.dto.LoginResponse",
                "Dict[str, Any]",
                "asgard.models.job.ScheduledJob",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "apistar.http.Request"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/__init__.py": {},
    "ductilis-master/ductilis/exchange/providers/fix_yahoo_finance/__init__.py": {
        "get_yahoo_crumb": {
            "name": "get_yahoo_crumb",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "force": [
                    "str",
                    "bool"
                ]
            }
        },
        "parse_ticker_csv": {
            "name": "parse_ticker_csv",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "csv_str": [
                    "str",
                    "bool"
                ],
                "auto_adjust": [
                    "str",
                    "bool"
                ]
            }
        },
        "make_chunks": {
            "name": "make_chunks",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 111,
            "return": [
                "str",
                "Optional[T]",
                "Optional[bool]",
                "List[str]",
                "T"
            ],
            "arguments": {
                "tickers": [
                    "int",
                    "list",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "start": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[datetime.datetime]"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "datetime.datetime"
                ],
                "as_panel": [
                    "int"
                ],
                "group_by": [
                    "int"
                ],
                "auto_adjust": [
                    "Optional[int]",
                    "datetime.date"
                ],
                "progress": [
                    "Optional[int]",
                    "datetime.date"
                ],
                "actions": [
                    "Optional[int]",
                    "datetime.date"
                ],
                "threads": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "download_one": {
            "name": "download_one",
            "location": 222,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]"
                ],
                "start": [
                    "Union[int, float]",
                    "int",
                    "datetime.datetime",
                    "Iterable[Sequence[Hashable]]"
                ],
                "end": [
                    "Union[int, float]",
                    "int",
                    "datetime.datetime",
                    "Iterable[Sequence[Hashable]]"
                ],
                "interval": [
                    "Union[int, float]",
                    "int",
                    "datetime.datetime",
                    "Iterable[Sequence[Hashable]]"
                ],
                "auto_adjust": [
                    "Optional[int]",
                    "bytes",
                    "cdp.io.StreamHandle",
                    "numpy.array",
                    "int",
                    "str",
                    "io.BytesIO",
                    "bool"
                ],
                "actions": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "download_thread": {
            "name": "download_thread",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "tickers": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "start": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "end": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "auto_adjust": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "progress": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "actions": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "download_chunk": {
            "name": "download_chunk",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "tickers": [
                    "int",
                    "Sequence[str]",
                    "Callable",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "float",
                    "pandas.Series",
                    "Optional[float]"
                ],
                "end": [
                    "datetime.datetime",
                    "float",
                    "pandas.Series",
                    "Optional[float]"
                ],
                "auto_adjust": [
                    "datetime.datetime",
                    "float",
                    "pandas.Series",
                    "Optional[float]"
                ],
                "progress": [
                    "bool",
                    "AsyncIterator[T]",
                    "Optional[datetime.datetime]",
                    "AsyncIterable[T]"
                ],
                "actions": [
                    "datetime.datetime",
                    "float",
                    "pandas.Series",
                    "Optional[float]"
                ]
            }
        },
        "pdr_override": {
            "name": "pdr_override",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_ProgressBar.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterations": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "int"
                ],
                "text": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        },
        "_ProgressBar.completed": {
            "name": "completed",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ProgressBar.animate": {
            "name": "animate",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iteration": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "_ProgressBar.update_iteration": {
            "name": "update_iteration",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Optional[float]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "_ProgressBar.__update_amount": {
            "name": "__update_amount",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_amount": [
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "_ProgressBar.__str__": {
            "name": "__str__",
            "location": 429,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/base.py": {
        "_IEXBase.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_IEXBase.params": {
            "name": "params",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IEXBase._validate_response": {
            "name": "_validate_response",
            "location": 51,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, str]",
                    "dict",
                    "Sequence"
                ]
            }
        },
        "_IEXBase._execute_iex_query": {
            "name": "_execute_iex_query",
            "location": 77,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Dict[str, List[bytes]]"
                ]
            }
        },
        "_IEXBase._prepare_query": {
            "name": "_prepare_query",
            "location": 103,
            "return": [
                "str",
                "list",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IEXBase.fetch": {
            "name": "fetch",
            "location": 113,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/market.py": {
        "Market.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "str"
                ],
                "output_format": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Market.params": {
            "name": "params",
            "location": 40,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Market._output_format": {
            "name": "_output_format",
            "location": 46,
            "return": [
                "int",
                "bytes",
                "List[str]",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "str"
                ]
            }
        },
        "Market.fetch": {
            "name": "fetch",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Market.acc_pandas": {
            "name": "acc_pandas",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Market.symbol_required": {
            "name": "symbol_required",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Market.symbol_limit": {
            "name": "symbol_limit",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TOPS.url": {
            "name": "url",
            "location": 108,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TOPS.symbol_limit": {
            "name": "symbol_limit",
            "location": 112,
            "return": [
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Last.url": {
            "name": "url",
            "location": 125,
            "return": [
                "int",
                "List[Dict]",
                "Dict[str, int]",
                "Tuple[Tuple[int, int]]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Last.symbol_limit": {
            "name": "symbol_limit",
            "location": 129,
            "return": [
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEEP.url": {
            "name": "url",
            "location": 146,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEEP.acc_pandas": {
            "name": "acc_pandas",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEEP.symbol_required": {
            "name": "symbol_required",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEEP.symbol_limit": {
            "name": "symbol_limit",
            "location": 158,
            "return": [
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.acc_pandas": {
            "name": "acc_pandas",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.url": {
            "name": "url",
            "location": 177,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.symbol_required": {
            "name": "symbol_required",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.symbol_limit": {
            "name": "symbol_limit",
            "location": 185,
            "return": [
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/ref.py": {
        "ReferenceReader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "ReferenceReader.url": {
            "name": "url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorporateActions.endpoint": {
            "name": "endpoint",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dividends.endpoint": {
            "name": "endpoint",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextDay.endpoint": {
            "name": "endpoint",
            "location": 44,
            "return": [
                "int",
                "bool",
                "float",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListedSymbolDir.endpoint": {
            "name": "endpoint",
            "location": 51,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/stats.py": {
        "Stats.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_format": [
                    "str",
                    "werkzeug.exceptions.HTTPException",
                    "int",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "Stats._output_format": {
            "name": "_output_format",
            "location": 24,
            "return": [
                "int",
                "bytes",
                "List[str]",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "str"
                ]
            }
        },
        "Stats._validate_dates": {
            "name": "_validate_dates",
            "location": 39,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "pandas.Series",
                    "int",
                    "datetime.timedelta"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "str"
                ]
            }
        },
        "Stats.acc_pandas": {
            "name": "acc_pandas",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.url": {
            "name": "url",
            "location": 63,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.fetch": {
            "name": "fetch",
            "location": 66,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntradayReader.url": {
            "name": "url",
            "location": 76,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentReader.url": {
            "name": "url",
            "location": 87,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordsReader.url": {
            "name": "url",
            "location": 98,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailySummaryReader.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "datetime.timedelta"
                ],
                "end": [
                    "str",
                    "bool",
                    "List[int]",
                    "Tuple[float, float]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "last": [
                    "str",
                    "bool",
                    "List[int]",
                    "Tuple[float, float]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "output_format": [
                    "int",
                    "str"
                ]
            }
        },
        "DailySummaryReader._validate_params": {
            "name": "_validate_params",
            "location": 138,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailySummaryReader._validate_response": {
            "name": "_validate_response",
            "location": 150,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Sequence",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "str"
                ]
            }
        },
        "DailySummaryReader.url": {
            "name": "url",
            "location": 156,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailySummaryReader.islast": {
            "name": "islast",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailySummaryReader.params": {
            "name": "params",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailySummaryReader.fetch": {
            "name": "fetch",
            "location": 172,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailySummaryReader._fetch_dates": {
            "name": "_fetch_dates",
            "location": 189,
            "return": [
                "pandas.DataFrame",
                "datetime.datetime",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthlySummaryReader.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "int",
                    "datetime.date",
                    "Optional[int]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "end": [
                    "Optional[datetime.datetime]",
                    "str",
                    "datetime.datetime",
                    "int",
                    "django.utils.timezone.datetime"
                ],
                "output_format": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[int]",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "MonthlySummaryReader.url": {
            "name": "url",
            "location": 231,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthlySummaryReader.params": {
            "name": "params",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthlySummaryReader.fetch": {
            "name": "fetch",
            "location": 241,
            "return": [
                "bool",
                "str",
                "datetime.datetime",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/stock.py": {
        "output_format": {
            "name": "output_format",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "override": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "price_output_format": {
            "name": "price_output_format",
            "location": 50,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "override": [
                    "bool",
                    "Match[Any]",
                    "dict",
                    "T",
                    "Optional[BaseException]",
                    "str",
                    "int"
                ]
            }
        },
        "field_output_format": {
            "name": "field_output_format",
            "location": 88,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "override": [
                    "str",
                    "bool",
                    "float"
                ],
                "field_name": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "output_format._output_format": {
            "name": "_output_format",
            "location": 25,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "price_output_format._output_format": {
            "name": "_output_format",
            "location": 61,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "field_output_format._output_format": {
            "name": "_output_format",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "StockReader.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "List[str]",
                    "str",
                    "list",
                    "bool",
                    "dict",
                    "Iterable[int]",
                    "Generator[str, None, None]"
                ],
                "output_format": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "StockReader.change_output_format": {
            "name": "change_output_format",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_format": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "StockReader.get_all": {
            "name": "get_all",
            "location": 154,
            "return": [
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.url": {
            "name": "url",
            "location": 173,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.params": {
            "name": "params",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader._get_endpoint": {
            "name": "_get_endpoint",
            "location": 195,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "int",
                    "str",
                    "datetime.timedelta"
                ],
                "params": [
                    "str",
                    "bool"
                ]
            }
        },
        "StockReader.get_endpoints": {
            "name": "get_endpoints",
            "location": 210,
            "return": [
                "str",
                "int",
                "Optional[Mapping[str, Any]]",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "endpoints": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "StockReader.get_book": {
            "name": "get_book",
            "location": 251,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_chart": {
            "name": "get_chart",
            "location": 263,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_company": {
            "name": "get_company",
            "location": 295,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_delayed_quote": {
            "name": "get_delayed_quote",
            "location": 307,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_dividends": {
            "name": "get_dividends",
            "location": 320,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_earnings": {
            "name": "get_earnings",
            "location": 339,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_effective_spread": {
            "name": "get_effective_spread",
            "location": 352,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_financials": {
            "name": "get_financials",
            "location": 365,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_key_stats": {
            "name": "get_key_stats",
            "location": 378,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[List[cmk.utils.type_defs.HostName]]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_largest_trades": {
            "name": "get_largest_trades",
            "location": 390,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_logo": {
            "name": "get_logo",
            "location": 403,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_news": {
            "name": "get_news",
            "location": 415,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_ohlc": {
            "name": "get_ohlc",
            "location": 431,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_open_close": {
            "name": "get_open_close",
            "location": 443,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_peers": {
            "name": "get_peers",
            "location": 458,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_previous": {
            "name": "get_previous",
            "location": 473,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_price": {
            "name": "get_price",
            "location": 485,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_quote": {
            "name": "get_quote",
            "location": 497,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_relevant": {
            "name": "get_relevant",
            "location": 509,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Optional[Sequence[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_splits": {
            "name": "get_splits",
            "location": 521,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_time_series": {
            "name": "get_time_series",
            "location": 536,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_volume_by_venue": {
            "name": "get_volume_by_venue",
            "location": 551,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "tuple",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_company_name": {
            "name": "get_company_name",
            "location": 565,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_primary_exchange": {
            "name": "get_primary_exchange",
            "location": 569,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]",
                "Optional[T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_sector": {
            "name": "get_sector",
            "location": 573,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_open": {
            "name": "get_open",
            "location": 577,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_close": {
            "name": "get_close",
            "location": 581,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_years_high": {
            "name": "get_years_high",
            "location": 585,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_years_low": {
            "name": "get_years_low",
            "location": 589,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_ytd_change": {
            "name": "get_ytd_change",
            "location": 593,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_volume": {
            "name": "get_volume",
            "location": 597,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_market_cap": {
            "name": "get_market_cap",
            "location": 601,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_beta": {
            "name": "get_beta",
            "location": 605,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.LabelSources"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_short_interest": {
            "name": "get_short_interest",
            "location": 609,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_short_ratio": {
            "name": "get_short_ratio",
            "location": 613,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.LabelSources"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_latest_eps": {
            "name": "get_latest_eps",
            "location": 617,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.LabelSources"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_shares_outstanding": {
            "name": "get_shares_outstanding",
            "location": 621,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.LabelSources"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_float": {
            "name": "get_float",
            "location": 625,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.LabelSources"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockReader.get_eps_consensus": {
            "name": "get_eps_consensus",
            "location": 629,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.LabelSources"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalReader.__init__": {
            "name": "__init__",
            "location": 649,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "List[Optional[Any]]",
                    "list",
                    "Optional[list]",
                    "List[Dict[str, Any]]",
                    "Optional[List[warnings.WarningMessage]]",
                    "Optional[List[Any]]"
                ],
                "start": [
                    "bool",
                    "Optional[str]"
                ],
                "end": [
                    "bool",
                    "Optional[str]"
                ],
                "output_format": [
                    "str"
                ]
            }
        },
        "HistoricalReader.url": {
            "name": "url",
            "location": 665,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalReader.key": {
            "name": "key",
            "location": 669,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalReader.chart_range": {
            "name": "chart_range",
            "location": 673,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalReader.params": {
            "name": "params",
            "location": 690,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalReader.fetch": {
            "name": "fetch",
            "location": 702,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalReader._output_format": {
            "name": "_output_format",
            "location": 709,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "str"
                ]
            }
        },
        "MoversReader.__init__": {
            "name": "__init__",
            "location": 742,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mover": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MoversReader.url": {
            "name": "url",
            "location": 750,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "output_format._output_format._format_wrapper": {
            "name": "_format_wrapper",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "price_output_format._output_format._format_wrapper": {
            "name": "_format_wrapper",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "field_output_format._output_format._format_wrapper": {
            "name": "_format_wrapper",
            "location": 102,
            "return": [
                "str",
                "bytes",
                "rads.xml.base.Element",
                "Optional[int]"
            ],
            "arguments": {
                "self": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/__init__.py": {
        "Stock": {
            "name": "Stock",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "symbols": [
                    "str",
                    "List[str]",
                    "Tuple[Dict, Dict]"
                ],
                "output_format": [
                    "int",
                    "tuple",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "get_historical_data": {
            "name": "get_historical_data",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "symbols": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "T"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "output_format": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "T"
                ]
            }
        },
        "get_available_symbols": {
            "name": "get_available_symbols",
            "location": 71,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_iex_corporate_actions": {
            "name": "get_iex_corporate_actions",
            "location": 92,
            "return": [
                "Callable",
                "Iterable[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "start": [
                    "float",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "get_iex_dividends": {
            "name": "get_iex_dividends",
            "location": 105,
            "return": [
                "tuple"
            ],
            "arguments": {
                "start": [
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "get_iex_next_day_ex_date": {
            "name": "get_iex_next_day_ex_date",
            "location": 118,
            "return": [
                "bool",
                "Optional[Any]",
                "cmk.utils.type_defs.HostName",
                "str",
                "tuple"
            ],
            "arguments": {
                "start": [
                    "raiden.utils.BlockSpecification",
                    "T",
                    "eth.chains.base.MiningChain",
                    "int"
                ]
            }
        },
        "get_iex_listed_symbol_dir": {
            "name": "get_iex_listed_symbol_dir",
            "location": 131,
            "return": [
                "List[str]",
                "str",
                "Tuple[type]",
                "Type[T]"
            ],
            "arguments": {
                "start": [
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "get_market_tops": {
            "name": "get_market_tops",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "symbols": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "output_format": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "get_market_last": {
            "name": "get_market_last",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "symbols": [
                    "str",
                    "Optional[str]",
                    "float",
                    "bool"
                ],
                "output_format": [
                    "str",
                    "Optional[str]",
                    "float",
                    "bool"
                ]
            }
        },
        "get_market_deep": {
            "name": "get_market_deep",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "symbols": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "output_format": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "get_market_book": {
            "name": "get_market_book",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "symbols": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "output_format": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "get_stats_intraday": {
            "name": "get_stats_intraday",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "output_format": [
                    "str",
                    "bool",
                    "AsyncIterator[T]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "get_stats_recent": {
            "name": "get_stats_recent",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "output_format": [
                    "str",
                    "bool",
                    "AsyncIterator[T]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "get_stats_records": {
            "name": "get_stats_records",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "output_format": [
                    "str",
                    "bool",
                    "AsyncIterator[T]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "get_stats_daily": {
            "name": "get_stats_daily",
            "location": 248,
            "return": [
                "Callable",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "start": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "end": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "last": [
                    "bool",
                    "Optional[int]",
                    "Optional[Callable]",
                    "float"
                ],
                "output_format": [
                    "bool",
                    "Optional[int]",
                    "Optional[Callable]",
                    "float"
                ]
            }
        },
        "get_stats_monthly": {
            "name": "get_stats_monthly",
            "location": 272,
            "return": [
                "Callable",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "start": [
                    "int",
                    "raiden.utils.Address",
                    "Optional[raiden.utils.BlockNumber]",
                    "Optional[bool]"
                ],
                "end": [
                    "int",
                    "raiden.utils.Address",
                    "Optional[raiden.utils.BlockNumber]",
                    "Optional[bool]"
                ],
                "output_format": [
                    "int",
                    "raiden.utils.Address",
                    "Optional[raiden.utils.BlockNumber]",
                    "Optional[bool]"
                ]
            }
        },
        "get_market_gainers": {
            "name": "get_market_gainers",
            "location": 291,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_market_losers": {
            "name": "get_market_losers",
            "location": 299,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_market_most_active": {
            "name": "get_market_most_active",
            "location": 307,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_market_iex_volume": {
            "name": "get_market_iex_volume",
            "location": 315,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_market_iex_percent": {
            "name": "get_market_iex_percent",
            "location": 323,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_market_in_focus": {
            "name": "get_market_in_focus",
            "location": 331,
            "return": [
                "str",
                "tuple",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "get_sector_performance": {
            "name": "get_sector_performance",
            "location": 339,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/utils/exceptions.py": {
        "IEXSymbolError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "IEXSymbolError.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IEXEndpointError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IEXEndpointError.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "int",
                "str",
                "bool",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IEXFieldError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "field": [
                    "int",
                    "str",
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "IEXFieldError.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IEXQueryError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/iex/utils/__init__.py": {
        "_init_session": {
            "name": "_init_session",
            "location": 8,
            "return": [
                "str",
                "dict",
                "Exception",
                "int",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "requests.Session"
                ],
                "retry_count": [
                    "Optional[int]"
                ]
            }
        },
        "_sanitize_dates": {
            "name": "_sanitize_dates",
            "location": 14,
            "return": [
                "Union[int, float]",
                "tuple",
                "Optional[str]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "datetime.date",
                    "Optional[int]",
                    "datetime.datetime"
                ],
                "end": [
                    "datetime.datetime",
                    "datetime.date",
                    "Union[str, datetime.datetime]",
                    "datetime.datetime.datetime",
                    "str"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/providers/quandl/__init__.py": {},
    "ductilis-master/ductilis/exchange/providers/yahoofinancials/__init__.py": {
        "YahooFinanceETL.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "YahooFinanceETL.get_report_type": {
            "name": "get_report_type",
            "location": 94,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "frequency": [
                    "Dict[str, Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "YahooFinanceETL.format_date": {
            "name": "format_date",
            "location": 103,
            "return": [
                "str",
                "datetime.datetime",
                "float",
                "datetime.date",
                "int",
                "list"
            ],
            "arguments": {
                "in_date": [
                    "str",
                    "datetime.date",
                    "int"
                ]
            }
        },
        "YahooFinanceETL._convert_to_utc": {
            "name": "_convert_to_utc",
            "location": 112,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "mask": [
                    "datetime.datetime",
                    "int",
                    "str"
                ]
            }
        },
        "YahooFinanceETL._scrape_data": {
            "name": "_scrape_data",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[dict]",
                    "dict",
                    "int"
                ],
                "tech_type": [
                    "str"
                ],
                "statement_type": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "YahooFinanceETL._determine_numeric_value": {
            "name": "_determine_numeric_value",
            "location": 147,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "value_dict": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "YahooFinanceETL._format_time": {
            "name": "_format_time",
            "location": 155,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "in_time": [
                    "datetime.date",
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "YahooFinanceETL._get_cleaned_sub_dict_ent": {
            "name": "_get_cleaned_sub_dict_ent",
            "location": 161,
            "return": [
                "str",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "val_list": [
                    "str",
                    "bool"
                ]
            }
        },
        "YahooFinanceETL._clean_earnings_data": {
            "name": "_clean_earnings_data",
            "location": 177,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "Dict[int, Dict]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "YahooFinanceETL._clean_reports": {
            "name": "_clean_reports",
            "location": 209,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "bs4.BeautifulSoup",
                    "bool",
                    "int"
                ]
            }
        },
        "YahooFinanceETL._encode_ticker": {
            "name": "_encode_ticker",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ticker_str": [
                    "str",
                    "bool"
                ]
            }
        },
        "YahooFinanceETL._build_historical_url": {
            "name": "_build_historical_url",
            "location": 241,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "str",
                    "bool",
                    "MutableMapping",
                    "int"
                ],
                "hist_oj": [
                    "str",
                    "bool",
                    "MutableMapping",
                    "int"
                ]
            }
        },
        "YahooFinanceETL._clean_historical_data": {
            "name": "_clean_historical_data",
            "location": 248,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "hist_data": [
                    "dict",
                    "Dict[int, Dict]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "YahooFinanceETL._build_api_url": {
            "name": "_build_api_url",
            "location": 281,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hist_obj": [
                    "str",
                    "datetime.date",
                    "float",
                    "bytes",
                    "int"
                ],
                "up_ticker": [
                    "str",
                    "datetime.date",
                    "float",
                    "bytes",
                    "int"
                ]
            }
        },
        "YahooFinanceETL._get_api_data": {
            "name": "_get_api_data",
            "location": 290,
            "return": [
                "Callable",
                "dict",
                "str"
            ],
            "arguments": {
                "api_url": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "YahooFinanceETL._clean_api_data": {
            "name": "_clean_api_data",
            "location": 300,
            "return": [
                "bool",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "api_url": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "YahooFinanceETL._create_dict_ent": {
            "name": "_create_dict_ent",
            "location": 339,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "up_ticker": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable[[str], str]"
                ],
                "statement_type": [
                    "str",
                    "Optional[str]"
                ],
                "tech_type": [
                    "str",
                    "Optional[Any]"
                ],
                "report_name": [
                    "str",
                    "Optional[str]"
                ],
                "hist_obj": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "YahooFinanceETL._get_stmt_id": {
            "name": "_get_stmt_id",
            "location": 371,
            "return": [
                "Optional[str]",
                "str",
                "List[Dict[str, Any]]",
                "Optional[int]",
                "Optional[Any]",
                "Optional[datetime.datetime]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "statement_type": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "raw_data": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "YahooFinanceETL._reformat_stmt_data_process": {
            "name": "_reformat_stmt_data_process",
            "location": 383,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "str",
                "Optional[Dict[str, Any]]",
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "str",
                    "bool",
                    "int"
                ],
                "statement_type": [
                    "Exception",
                    "type"
                ]
            }
        },
        "YahooFinanceETL._get_sub_dict_ent": {
            "name": "_get_sub_dict_ent",
            "location": 407,
            "return": [
                "bool",
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ticker": [
                    "float",
                    "List[Dict]",
                    "Tuple[int, int]",
                    "str",
                    "bool"
                ],
                "raw_data": [
                    "str",
                    "OrderedDict",
                    "bool",
                    "Tuple[List[str], Optional[Any]]"
                ],
                "statement_type": [
                    "str",
                    "OrderedDict",
                    "bool",
                    "Tuple[List[str], Optional[Any]]"
                ]
            }
        },
        "YahooFinanceETL.get_time_code": {
            "name": "get_time_code",
            "location": 412,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "time_interval": [
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "YahooFinanceETL.get_stock_data": {
            "name": "get_stock_data",
            "location": 417,
            "return": [
                "dict",
                "str",
                "Callable",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "statement_type": [
                    "str"
                ],
                "tech_type": [
                    "str"
                ],
                "report_name": [
                    "str"
                ],
                "hist_obj": [
                    "str"
                ]
            }
        },
        "YahooFinanceETL.get_stock_tech_data": {
            "name": "get_stock_tech_data",
            "location": 429,
            "return": [
                "dict",
                "Dict[str, Any]",
                "type",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tech_type": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "YahooFinanceETL.get_reformatted_stmt_data": {
            "name": "get_reformatted_stmt_data",
            "location": 433,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "str"
                ],
                "statement_type": [
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "YahooFinanceETL.get_clean_data": {
            "name": "get_clean_data",
            "location": 451,
            "return": [
                "int",
                "bytes",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "raw_report_data": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "report_type": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "YahooFinancials._run_financial_stmt": {
            "name": "_run_financial_stmt",
            "location": 485,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[int, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "statement_type": [
                    "str",
                    "type"
                ],
                "report_num": [
                    "bool",
                    "str",
                    "Type[Any]",
                    "Iterable[str]",
                    "list"
                ],
                "reformat": [
                    "List[str]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "YahooFinancials.get_financial_stmts": {
            "name": "get_financial_stmts",
            "location": 495,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "frequency": [
                    "str",
                    "Optional[str]"
                ],
                "statement_type": [
                    "str"
                ],
                "reformat": [
                    "str"
                ]
            }
        },
        "YahooFinancials.get_stock_price_data": {
            "name": "get_stock_price_data",
            "location": 507,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reformat": [
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "YahooFinancials.get_stock_earnings_data": {
            "name": "get_stock_earnings_data",
            "location": 514,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reformat": [
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "YahooFinancials.get_summary_data": {
            "name": "get_summary_data",
            "location": 521,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "reformat": [
                    "Mapping[str, Any]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "YahooFinancials.get_stock_summary_url": {
            "name": "get_stock_summary_url",
            "location": 528,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_stock_quote_type_data": {
            "name": "get_stock_quote_type_data",
            "location": 534,
            "return": [
                "str",
                "bool",
                "Type['BaseModel']"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_historical_price_data": {
            "name": "get_historical_price_data",
            "location": 538,
            "return": [
                "str",
                "Mapping[str, str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "datetime.datetime"
                ],
                "end_date": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Sequence[str]",
                    "datetime.date"
                ],
                "time_interval": [
                    "int",
                    "str"
                ]
            }
        },
        "YahooFinancials._stock_price_data": {
            "name": "_stock_price_data",
            "location": 546,
            "return": [
                "str",
                "dict",
                "Optional[Dict[str, Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "data_field": [
                    "dict",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "YahooFinancials._stock_summary_data": {
            "name": "_stock_summary_data",
            "location": 561,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data_field": [
                    "dict",
                    "str"
                ]
            }
        },
        "YahooFinancials._financial_statement_data": {
            "name": "_financial_statement_data",
            "location": 576,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "stmt_type": [
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "stmt_code": [
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "field_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "freq": [
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ]
            }
        },
        "YahooFinancials.get_current_price": {
            "name": "get_current_price",
            "location": 602,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_current_change": {
            "name": "get_current_change",
            "location": 605,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_current_percent_change": {
            "name": "get_current_percent_change",
            "location": 608,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_current_volume": {
            "name": "get_current_volume",
            "location": 611,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_prev_close_price": {
            "name": "get_prev_close_price",
            "location": 614,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_open_price": {
            "name": "get_open_price",
            "location": 617,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_ten_day_avg_daily_volume": {
            "name": "get_ten_day_avg_daily_volume",
            "location": 620,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_three_month_avg_daily_volume": {
            "name": "get_three_month_avg_daily_volume",
            "location": 623,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_stock_exchange": {
            "name": "get_stock_exchange",
            "location": 626,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_market_cap": {
            "name": "get_market_cap",
            "location": 629,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_daily_low": {
            "name": "get_daily_low",
            "location": 632,
            "return": [
                "int",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_daily_high": {
            "name": "get_daily_high",
            "location": 635,
            "return": [
                "int",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_currency": {
            "name": "get_currency",
            "location": 638,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_yearly_high": {
            "name": "get_yearly_high",
            "location": 642,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_yearly_low": {
            "name": "get_yearly_low",
            "location": 645,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_dividend_yield": {
            "name": "get_dividend_yield",
            "location": 648,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_annual_avg_div_yield": {
            "name": "get_annual_avg_div_yield",
            "location": 651,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_five_yr_avg_div_yield": {
            "name": "get_five_yr_avg_div_yield",
            "location": 654,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_dividend_rate": {
            "name": "get_dividend_rate",
            "location": 657,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_annual_avg_div_rate": {
            "name": "get_annual_avg_div_rate",
            "location": 660,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_50day_moving_avg": {
            "name": "get_50day_moving_avg",
            "location": 663,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_200day_moving_avg": {
            "name": "get_200day_moving_avg",
            "location": 666,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_beta": {
            "name": "get_beta",
            "location": 669,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_payout_ratio": {
            "name": "get_payout_ratio",
            "location": 672,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_pe_ratio": {
            "name": "get_pe_ratio",
            "location": 675,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_price_to_sales": {
            "name": "get_price_to_sales",
            "location": 678,
            "return": [
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_exdividend_date": {
            "name": "get_exdividend_date",
            "location": 681,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_book_value": {
            "name": "get_book_value",
            "location": 685,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_ebit": {
            "name": "get_ebit",
            "location": 689,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_net_income": {
            "name": "get_net_income",
            "location": 692,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_interest_expense": {
            "name": "get_interest_expense",
            "location": 695,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_operating_income": {
            "name": "get_operating_income",
            "location": 698,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_total_operating_expense": {
            "name": "get_total_operating_expense",
            "location": 701,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_total_revenue": {
            "name": "get_total_revenue",
            "location": 704,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_cost_of_revenue": {
            "name": "get_cost_of_revenue",
            "location": 707,
            "return": [
                "Iterable[str]",
                "str",
                "IO[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_income_before_tax": {
            "name": "get_income_before_tax",
            "location": 710,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_income_tax_expense": {
            "name": "get_income_tax_expense",
            "location": 713,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_gross_profit": {
            "name": "get_gross_profit",
            "location": 716,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_net_income_from_continuing_ops": {
            "name": "get_net_income_from_continuing_ops",
            "location": 719,
            "return": [
                "List[str]",
                "Iterable['Notification']",
                "Sequence",
                "bool",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_research_and_development": {
            "name": "get_research_and_development",
            "location": 723,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_earnings_per_share": {
            "name": "get_earnings_per_share",
            "location": 727,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YahooFinancials.get_num_shares_outstanding": {
            "name": "get_num_shares_outstanding",
            "location": 744,
            "return": [
                "dict",
                "Optional[float]",
                "str",
                "Optional[Any]",
                "bool",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "price_type": [
                    "str",
                    "type",
                    "Type",
                    "Optional[type]"
                ]
            }
        }
    },
    "ductilis-master/ductilis/exchange/tests/tests.py": {},
    "ductilis-master/ductilis/exchange/tests/yahoo_call.py": {},
    "ductilis-master/ductilis/exchange/tests/__init__.py": {},
    "ductilis-master/ductilis/exchange/tests/iex/test_market.py": {
        "TestMarket.setup_class": {
            "name": "setup_class",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_last_json_default": {
            "name": "test_last_json_default",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_last_json_syms": {
            "name": "test_last_json_syms",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_last_pandas": {
            "name": "test_last_pandas",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_last_too_many_symbols": {
            "name": "test_last_too_many_symbols",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_TOPS_json_default": {
            "name": "test_TOPS_json_default",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_TOPS_json_syms": {
            "name": "test_TOPS_json_syms",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_TOPS_too_many_symbols": {
            "name": "test_TOPS_too_many_symbols",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_TOPS_pandas": {
            "name": "test_TOPS_pandas",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_DEEP_json_default": {
            "name": "test_DEEP_json_default",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_DEEP_json_syms": {
            "name": "test_DEEP_json_syms",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_DEEP_pandas": {
            "name": "test_DEEP_pandas",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_DEEP_too_many_syms": {
            "name": "test_DEEP_too_many_syms",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_Book_json_default": {
            "name": "test_Book_json_default",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_Book_json_syms": {
            "name": "test_Book_json_syms",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_Book_pandas": {
            "name": "test_Book_pandas",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarket.test_Book_too_many_symbols": {
            "name": "test_Book_too_many_symbols",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/tests/iex/test_ref.py": {
        "TestRef.setup_class": {
            "name": "setup_class",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_get_available_symbols": {
            "name": "test_get_available_symbols",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_get_iex_corporate_actions": {
            "name": "test_get_iex_corporate_actions",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_get_iex_dividends": {
            "name": "test_get_iex_dividends",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_iex_next_day_ex_date": {
            "name": "test_iex_next_day_ex_date",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_iex_listed_symbol_dir": {
            "name": "test_iex_listed_symbol_dir",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_get_iex_corporate_actions_dates": {
            "name": "test_get_iex_corporate_actions_dates",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_get_iex_dividends_dates": {
            "name": "test_get_iex_dividends_dates",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_iex_next_day_ex_date_dates": {
            "name": "test_iex_next_day_ex_date_dates",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRef.test_iex_listed_symbol_dir_dates": {
            "name": "test_iex_listed_symbol_dir_dates",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/tests/iex/test_stats.py": {
        "TestStats.test_intraday_json": {
            "name": "test_intraday_json",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStats.test_intraday_pandas": {
            "name": "test_intraday_pandas",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStats.test_recent_json": {
            "name": "test_recent_json",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStats.test_recent_pandas": {
            "name": "test_recent_pandas",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStats.test_records_json": {
            "name": "test_records_json",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStats.test_records_pandas": {
            "name": "test_records_pandas",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_last_json": {
            "name": "test_daily_last_json",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_last_pandas": {
            "name": "test_daily_last_pandas",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_dates_json": {
            "name": "test_daily_dates_json",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_dates_pandas": {
            "name": "test_daily_dates_pandas",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_invalid_last": {
            "name": "test_daily_invalid_last",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_invalid_start_date": {
            "name": "test_daily_invalid_start_date",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsDaily.test_daily_invalid_end_date": {
            "name": "test_daily_invalid_end_date",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsMonthly.test_monthly_json": {
            "name": "test_monthly_json",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsMonthly.test_monthly_pandas": {
            "name": "test_monthly_pandas",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsMonthly.test_monthly_fails_no_params": {
            "name": "test_monthly_fails_no_params",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsMonthly.test_monthly_invalid_start_date": {
            "name": "test_monthly_invalid_start_date",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatsMonthly.test_monthly_invalid_end_date": {
            "name": "test_monthly_invalid_end_date",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/tests/iex/test_stock.py": {
        "TestBase.test_wrong_iex_input_type": {
            "name": "test_wrong_iex_input_type",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.test_symbol_list_too_long": {
            "name": "test_symbol_list_too_long",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.setup_class": {
            "name": "setup_class",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_invalid_symbol": {
            "name": "test_invalid_symbol",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_all_format": {
            "name": "test_get_all_format",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_all": {
            "name": "test_get_all",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_endpoints": {
            "name": "test_get_endpoints",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_endpoints_bad_endpoint": {
            "name": "test_get_endpoints_bad_endpoint",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_book_format": {
            "name": "test_get_book_format",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_chart_format": {
            "name": "test_get_chart_format",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_chart_params": {
            "name": "test_get_chart_params",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_chart_reset": {
            "name": "test_get_chart_reset",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_company_format": {
            "name": "test_get_company_format",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_delayed_quote_format": {
            "name": "test_get_delayed_quote_format",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_dividends_format": {
            "name": "test_get_dividends_format",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_dividends_params": {
            "name": "test_get_dividends_params",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_earnings_format": {
            "name": "test_get_earnings_format",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_effective_spread_format": {
            "name": "test_get_effective_spread_format",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_financials_format": {
            "name": "test_get_financials_format",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_key_stats_format": {
            "name": "test_get_key_stats_format",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_largest_trades": {
            "name": "test_get_largest_trades",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_logo_format": {
            "name": "test_get_logo_format",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_news_format": {
            "name": "test_get_news_format",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_news_params": {
            "name": "test_get_news_params",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_ohlc": {
            "name": "test_ohlc",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_open_close_format": {
            "name": "test_get_open_close_format",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_peers_format": {
            "name": "test_get_peers_format",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_previous_format": {
            "name": "test_get_previous_format",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_quote_format": {
            "name": "test_get_quote_format",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_quote_params": {
            "name": "test_get_quote_params",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_relevant_format": {
            "name": "test_get_relevant_format",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_splits_format": {
            "name": "test_get_splits_format",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_splits_params": {
            "name": "test_get_splits_params",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_time_series": {
            "name": "test_get_time_series",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_get_volume_by_venue_format": {
            "name": "test_get_volume_by_venue_format",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShareDefault.test_filter": {
            "name": "test_filter",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.setup_class": {
            "name": "setup_class",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_invalid_symbol_or_symbols": {
            "name": "test_invalid_symbol_or_symbols",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_endpoints": {
            "name": "test_get_endpoints",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_endpoints_bad_endpoint": {
            "name": "test_get_endpoints_bad_endpoint",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_all": {
            "name": "test_get_all",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_all_format": {
            "name": "test_get_all_format",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_book_format": {
            "name": "test_get_book_format",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_chart_format": {
            "name": "test_get_chart_format",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_chart_params": {
            "name": "test_get_chart_params",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_chart_reset": {
            "name": "test_get_chart_reset",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_company_format": {
            "name": "test_get_company_format",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_delayed_quote_format": {
            "name": "test_get_delayed_quote_format",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_dividends_format": {
            "name": "test_get_dividends_format",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_dividends_params": {
            "name": "test_get_dividends_params",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_earnings_format": {
            "name": "test_get_earnings_format",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_effective_spread_format": {
            "name": "test_get_effective_spread_format",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_financials_format": {
            "name": "test_get_financials_format",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_key_stats_format": {
            "name": "test_get_key_stats_format",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_logo_format": {
            "name": "test_get_logo_format",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_news_format": {
            "name": "test_get_news_format",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_ohlc": {
            "name": "test_ohlc",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_open_close_format": {
            "name": "test_get_open_close_format",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_peers_format": {
            "name": "test_get_peers_format",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_previous_format": {
            "name": "test_get_previous_format",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_price_format": {
            "name": "test_get_price_format",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_quote_format": {
            "name": "test_get_quote_format",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_relevant_format": {
            "name": "test_get_relevant_format",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_splits": {
            "name": "test_get_splits",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_splits_params": {
            "name": "test_get_splits_params",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_time_series": {
            "name": "test_time_series",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_volume_by_venue_format": {
            "name": "test_get_volume_by_venue_format",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBatchDefault.test_get_select_ep_bad_params": {
            "name": "test_get_select_ep_bad_params",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.setup_class": {
            "name": "setup_class",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_company_name": {
            "name": "test_get_company_name",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_primary_exchange": {
            "name": "test_get_primary_exchange",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_sector": {
            "name": "test_get_sector",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_close": {
            "name": "test_get_close",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_years_high": {
            "name": "test_get_years_high",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_years_low": {
            "name": "test_get_years_low",
            "location": 578,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_ytd_change": {
            "name": "test_get_ytd_change",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_volume": {
            "name": "test_get_volume",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_market_cap": {
            "name": "test_get_market_cap",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_beta": {
            "name": "test_get_beta",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_short_interest": {
            "name": "test_get_short_interest",
            "location": 637,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_latest_eps": {
            "name": "test_get_latest_eps",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_shares_outstanding": {
            "name": "test_get_shares_outstanding",
            "location": 666,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_float": {
            "name": "test_get_float",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsShare.test_get_eps_consensus": {
            "name": "test_get_eps_consensus",
            "location": 688,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.setup_class": {
            "name": "setup_class",
            "location": 702,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_company_name": {
            "name": "test_get_company_name",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_primary_exchange": {
            "name": "test_get_primary_exchange",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_sector": {
            "name": "test_get_sector",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_open": {
            "name": "test_get_open",
            "location": 736,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_close": {
            "name": "test_get_close",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_years_high": {
            "name": "test_get_years_high",
            "location": 756,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_years_low": {
            "name": "test_get_years_low",
            "location": 766,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_ytd_change": {
            "name": "test_get_ytd_change",
            "location": 776,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_volume": {
            "name": "test_get_volume",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_market_cap": {
            "name": "test_get_market_cap",
            "location": 795,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_beta": {
            "name": "test_get_beta",
            "location": 805,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_latest_eps": {
            "name": "test_get_latest_eps",
            "location": 843,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_shares_outstanding": {
            "name": "test_get_shares_outstanding",
            "location": 857,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_float": {
            "name": "test_get_float",
            "location": 867,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldMethodsBatch.test_get_eps_consensus": {
            "name": "test_get_eps_consensus",
            "location": 877,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.setup_class": {
            "name": "setup_class",
            "location": 894,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_single_historical_json": {
            "name": "test_single_historical_json",
            "location": 898,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_single_historical_pandas": {
            "name": "test_single_historical_pandas",
            "location": 912,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_batch_historical_json": {
            "name": "test_batch_historical_json",
            "location": 928,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_batch_historical_pandas": {
            "name": "test_batch_historical_pandas",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_invalid_dates": {
            "name": "test_invalid_dates",
            "location": 990,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_invalid_dates_batch": {
            "name": "test_invalid_dates_batch",
            "location": 996,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_invalid_symbol_single": {
            "name": "test_invalid_symbol_single",
            "location": 1002,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_invalid_symbol_batch": {
            "name": "test_invalid_symbol_batch",
            "location": 1008,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarketMovers.test_market_gainers": {
            "name": "test_market_gainers",
            "location": 1017,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarketMovers.test_market_losers": {
            "name": "test_market_losers",
            "location": 1021,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarketMovers.test_market_most_active": {
            "name": "test_market_most_active",
            "location": 1025,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarketMovers.test_market_iex_volume": {
            "name": "test_market_iex_volume",
            "location": 1029,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarketMovers.test_market_iex_percent": {
            "name": "test_market_iex_percent",
            "location": 1033,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarketMovers.test_market_in_focus": {
            "name": "test_market_in_focus",
            "location": 1037,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.setup_class": {
            "name": "setup_class",
            "location": 1044,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_listed_crypto_symbols": {
            "name": "test_listed_crypto_symbols",
            "location": 1050,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSectorPerformance.test_list_sector_performance": {
            "name": "test_list_sector_performance",
            "location": 1057,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/exchange/tests/iex/__init__.py": {},
    "ductilis-master/ductilis/settings/base.py": {},
    "ductilis-master/ductilis/settings/development.py": {},
    "ductilis-master/ductilis/settings/local.py": {},
    "ductilis-master/ductilis/settings/production.py": {},
    "ductilis-master/ductilis/settings/__init__.py": {},
    "ductilis-master/ductilis/simulation/admin.py": {
        "PortfolioAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 21,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "PortfolioAdmin.ticker_count": {
            "name": "ticker_count",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "ductilis-master/ductilis/simulation/apps.py": {},
    "ductilis-master/ductilis/simulation/models.py": {
        "WeightPortfolio.symbol": {
            "name": "symbol",
            "location": 22,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/simulation/tests.py": {},
    "ductilis-master/ductilis/simulation/urls.py": {},
    "ductilis-master/ductilis/simulation/views.py": {},
    "ductilis-master/ductilis/simulation/__init__.py": {},
    "ductilis-master/ductilis/simulation/migrations/0001_initial.py": {},
    "ductilis-master/ductilis/simulation/migrations/__init__.py": {},
    "ductilis-master/ductilis/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 17,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "ductilis-master/ductilis/users/admin.py": {},
    "ductilis-master/ductilis/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/users/urls.py": {},
    "ductilis-master/ductilis/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/users/__init__.py": {},
    "ductilis-master/ductilis/users/migrations/0001_initial.py": {},
    "ductilis-master/ductilis/users/migrations/__init__.py": {},
    "ductilis-master/ductilis/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "ductilis-master/ductilis/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ductilis-master/ductilis/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "ductilis-master/ductilis/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ductilis-master/ductilis/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "int",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "ductilis-master/ductilis/users/tests/__init__.py": {}
}
{
    "duniter-python-api-master/docs/conf.py": {
        "Mock.__getattr__": {
            "name": "__getattr__",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Type[T]",
                    "bool"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/constants.py": {},
    "duniter-python-api-master/duniterpy/tools.py": {
        "ensure_bytes": {
            "name": "ensure_bytes",
            "location": 23,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "Union[str, bytes]",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "ensure_str": {
            "name": "ensure_str",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Union[str, bytes]",
                    "bytes",
                    "str",
                    "List[int]",
                    "Union[int, bytes]"
                ]
            }
        },
        "xor_bytes": {
            "name": "xor_bytes",
            "location": 49,
            "return": [
                "bool",
                "List[object]"
            ],
            "arguments": {
                "b1": [
                    "bytes",
                    "Tuple[int, int]",
                    "List[int]",
                    "int",
                    "Sequence[str]"
                ],
                "b2": [
                    "bytes",
                    "Tuple[int, int]",
                    "List[int]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "convert_seedhex_to_seed": {
            "name": "convert_seedhex_to_seed",
            "location": 63,
            "return": [
                "bytes",
                "bytearray",
                "str",
                "Callable",
                "int",
                "bool",
                "Union[bytes, bytearray]",
                "BinaryIO",
                "List[float]"
            ],
            "arguments": {
                "seedhex": [
                    "str",
                    "Union[int, float]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "convert_seed_to_seedhex": {
            "name": "convert_seed_to_seedhex",
            "location": 73,
            "return": [
                "str",
                "Union[int, float]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "seed": [
                    "bytes",
                    "bytearray",
                    "int",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "get_ws2p_challenge": {
            "name": "get_ws2p_challenge",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "duniter-python-api-master/duniterpy/__init__.py": {},
    "duniter-python-api-master/duniterpy/api/client.py": {
        "parse_text": {
            "name": "parse_text",
            "location": 47,
            "return": [
                "str",
                "dict",
                "Callable",
                "Dict[str, str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "schema": [
                    "dict",
                    "str"
                ]
            }
        },
        "parse_error": {
            "name": "parse_error",
            "location": 64,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "WSConnection.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ]
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_handler": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bool",
                    "List[str]",
                    "Optional[List[Any]]"
                ],
                "headers": [
                    "dict",
                    "Optional[Dict]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "API.reverse_url": {
            "name": "reverse_url",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ],
                "path": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_endpoint": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "session": [
                    "aiohttp.ClientSession",
                    "dict",
                    "str",
                    "Optional[aiohttp.ClientSession]"
                ],
                "proxy": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "Client.__call__": {
            "name": "__call__",
            "location": 543,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "_function": [
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/api/endpoint.py": {
        "endpoint": {
            "name": "endpoint",
            "location": 800,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "bytes",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "ConnectionHandler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_scheme": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "ws_scheme": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "server": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "port": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "bool",
                    "Optional[Callable]"
                ],
                "session": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "proxy": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "ConnectionHandler.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.from_inline": {
            "name": "from_inline",
            "location": 69,
            "return": [
                "EndpointType"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "inline": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Endpoint.inline": {
            "name": "inline",
            "location": 72,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.conn_handler": {
            "name": "conn_handler",
            "location": 75,
            "return": [
                "ConnectionHandler"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list",
                    "aiohttp.ClientSession",
                    "Iterable"
                ],
                "proxy": [
                    "str",
                    "list",
                    "aiohttp.ClientSession",
                    "Iterable"
                ]
            }
        },
        "Endpoint.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "UnknownEndpoint.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict]"
                ],
                "properties": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "UnknownEndpoint.from_inline": {
            "name": "from_inline",
            "location": 99,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "inline": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "UnknownEndpoint.inline": {
            "name": "inline",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 124,
            "return": [
                "bool",
                "Callable",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list",
                    "aiohttp.ClientSession",
                    "Iterable"
                ],
                "proxy": [
                    "str",
                    "list",
                    "aiohttp.ClientSession",
                    "Iterable"
                ]
            }
        },
        "UnknownEndpoint.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownEndpoint.__eq__": {
            "name": "__eq__",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "UnknownEndpoint.__hash__": {
            "name": "__hash__",
            "location": 146,
            "return": [
                "int",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMAEndpoint.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "bool",
                    "float"
                ],
                "ipv4": [
                    "int",
                    "bool",
                    "float"
                ],
                "ipv6": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BMAEndpoint.from_inline": {
            "name": "from_inline",
            "location": 179,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "inline": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "BMAEndpoint.inline": {
            "name": "inline",
            "location": 195,
            "return": [
                "int",
                "float",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMAEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 208,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "aiohttp.ClientSession"
                ],
                "proxy": [
                    "str",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "BMAEndpoint.__str__": {
            "name": "__str__",
            "location": 233,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMAEndpoint.__eq__": {
            "name": "__eq__",
            "location": 236,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BMAEndpoint.__hash__": {
            "name": "__hash__",
            "location": 246,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecuredBMAEndpoint.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "ipv4": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "ipv6": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SecuredBMAEndpoint.from_inline": {
            "name": "from_inline",
            "location": 279,
            "return": [
                "str",
                "Tuple[str, str]",
                "int",
                "Callable",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "inline": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "SecuredBMAEndpoint.inline": {
            "name": "inline",
            "location": 300,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecuredBMAEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 313,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "int",
                    "bool"
                ],
                "proxy": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "int",
                    "bool"
                ]
            }
        },
        "WS2PEndpoint.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws2pid": [
                    "Iterator[int]",
                    "int",
                    "Tuple[int]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "server": [
                    "Iterator[int]",
                    "int",
                    "Tuple[int]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "port": [
                    "Iterator[int]",
                    "int",
                    "Tuple[int]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "WS2PEndpoint.from_inline": {
            "name": "from_inline",
            "location": 368,
            "return": [
                "str",
                "Tuple[str, str]",
                "int",
                "Callable",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]"
                ],
                "inline": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "WS2PEndpoint.inline": {
            "name": "inline",
            "location": 386,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WS2PEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 399,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "aiohttp.ClientSession"
                ],
                "proxy": [
                    "str",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "WS2PEndpoint.__str__": {
            "name": "__str__",
            "location": 424,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "WS2PEndpoint.__eq__": {
            "name": "__eq__",
            "location": 427,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str",
                    "Tuple[float]"
                ]
            }
        },
        "WS2PEndpoint.__hash__": {
            "name": "__hash__",
            "location": 437,
            "return": [
                "int",
                "bool",
                "Union[Dict[str, Any], List[Any]]",
                "Tuple[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCoreEndpoint.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ESCoreEndpoint.from_inline": {
            "name": "from_inline",
            "location": 458,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "inline": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "ESCoreEndpoint.inline": {
            "name": "inline",
            "location": 472,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]",
                "Optional[constants.AgeClass]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCoreEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 481,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ],
                "proxy": [
                    "str"
                ]
            }
        },
        "ESCoreEndpoint.__str__": {
            "name": "__str__",
            "location": 495,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCoreEndpoint.__eq__": {
            "name": "__eq__",
            "location": 498,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "List['cirq.Qid']",
                    "List[str]"
                ]
            }
        },
        "ESCoreEndpoint.__hash__": {
            "name": "__hash__",
            "location": 503,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESUserEndpoint.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ESUserEndpoint.from_inline": {
            "name": "from_inline",
            "location": 524,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "inline": [
                    "str",
                    "bytes",
                    "Mapping"
                ]
            }
        },
        "ESUserEndpoint.inline": {
            "name": "inline",
            "location": 538,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESUserEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 547,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ],
                "proxy": [
                    "str"
                ]
            }
        },
        "ESUserEndpoint.__str__": {
            "name": "__str__",
            "location": 561,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESUserEndpoint.__eq__": {
            "name": "__eq__",
            "location": 564,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Union[tuple, list]"
                ]
            }
        },
        "ESUserEndpoint.__hash__": {
            "name": "__hash__",
            "location": 569,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESSubscribtionEndpoint.__init__": {
            "name": "__init__",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ESSubscribtionEndpoint.from_inline": {
            "name": "from_inline",
            "location": 592,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "inline": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "ESSubscribtionEndpoint.inline": {
            "name": "inline",
            "location": 608,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESSubscribtionEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 617,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ],
                "proxy": [
                    "str"
                ]
            }
        },
        "ESSubscribtionEndpoint.__str__": {
            "name": "__str__",
            "location": 631,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESSubscribtionEndpoint.__eq__": {
            "name": "__eq__",
            "location": 634,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "List['cirq.Qid']",
                    "List[str]"
                ]
            }
        },
        "ESSubscribtionEndpoint.__hash__": {
            "name": "__hash__",
            "location": 639,
            "return": [
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GVAEndpoint.__init__": {
            "name": "__init__",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "server": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "ipv4": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "ipv6": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "port": [
                    "bool",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "path": [
                    "str",
                    "Optional[Callable]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GVAEndpoint.from_inline": {
            "name": "from_inline",
            "location": 679,
            "return": [
                "str",
                "bool",
                "IO",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "inline": [
                    "str",
                    "float"
                ]
            }
        },
        "GVAEndpoint.inline": {
            "name": "inline",
            "location": 701,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GVAEndpoint.conn_handler": {
            "name": "conn_handler",
            "location": 721,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ],
                "proxy": [
                    "str"
                ]
            }
        },
        "GVAEndpoint.__str__": {
            "name": "__str__",
            "location": 761,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "GVAEndpoint.__eq__": {
            "name": "__eq__",
            "location": 764,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GVAEndpoint.__hash__": {
            "name": "__hash__",
            "location": 774,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/api/errors.py": {
        "DuniterError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bool",
                    "bytes",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/api/__init__.py": {},
    "duniter-python-api-master/duniterpy/api/bma/blockchain.py": {},
    "duniter-python-api-master/duniterpy/api/bma/network.py": {},
    "duniter-python-api-master/duniterpy/api/bma/node.py": {},
    "duniter-python-api-master/duniterpy/api/bma/tx.py": {},
    "duniter-python-api-master/duniterpy/api/bma/ud.py": {},
    "duniter-python-api-master/duniterpy/api/bma/wot.py": {},
    "duniter-python-api-master/duniterpy/api/bma/ws.py": {},
    "duniter-python-api-master/duniterpy/api/bma/__init__.py": {},
    "duniter-python-api-master/duniterpy/api/elasticsearch/__init__.py": {},
    "duniter-python-api-master/duniterpy/api/ws2p/network.py": {},
    "duniter-python-api-master/duniterpy/api/ws2p/requests.py": {
        "get_current": {
            "name": "get_current",
            "location": 177,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "request_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_block": {
            "name": "get_block",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "request_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "block_number": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "get_blocks": {
            "name": "get_blocks",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "request_id": [
                    "str",
                    "int",
                    "dict"
                ],
                "from_number": [
                    "int",
                    "bytes"
                ],
                "count": [
                    "int",
                    "bytes"
                ]
            }
        },
        "get_requirements_pending": {
            "name": "get_requirements_pending",
            "location": 223,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "request_id": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "min_cert": [
                    "int"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/api/ws2p/__init__.py": {},
    "duniter-python-api-master/duniterpy/documents/block.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "Set[str]",
                    "str",
                    "Mapping[str, Any]"
                ],
                "currency": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "number": [
                    "int"
                ],
                "powmin": [
                    "int"
                ],
                "time": [
                    "int"
                ],
                "mediantime": [
                    "int"
                ],
                "ud": [
                    "int"
                ],
                "unit_base": [
                    "str",
                    "bytes",
                    "int",
                    "Tuple[int, int]"
                ],
                "issuer": [
                    "int"
                ],
                "issuers_frame": [
                    "int"
                ],
                "issuers_frame_var": [
                    "str",
                    "bool"
                ],
                "different_issuers_count": [
                    "int",
                    "Union[int, str]",
                    "Tuple[int]"
                ],
                "prev_hash": [
                    "int"
                ],
                "prev_issuer": [
                    "int"
                ],
                "parameters": [
                    "int"
                ],
                "members_count": [
                    "int",
                    "bool",
                    "float"
                ],
                "identities": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "joiners": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "actives": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "leavers": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "revokations": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "excluded": [
                    "int"
                ],
                "certifications": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "transactions": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "inner_hash": [
                    "int"
                ],
                "nonce": [
                    "int"
                ],
                "signature": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Block.blockUID": {
            "name": "blockUID",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.from_parsed_json": {
            "name": "from_parsed_json",
            "location": 256,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "str"
                ],
                "parsed_json_block": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Block.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 334,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "Tuple[float, float, float, float]"
                ],
                "signed_raw": [
                    "bytes",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "Block.raw": {
            "name": "raw",
            "location": 532,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.proof_of_work": {
            "name": "proof_of_work",
            "location": 611,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.computed_inner_hash": {
            "name": "computed_inner_hash",
            "location": 620,
            "return": [
                "float",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.sign": {
            "name": "sign",
            "location": 625,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Block.__eq__": {
            "name": "__eq__",
            "location": 638,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "str"
                ]
            }
        },
        "Block.__lt__": {
            "name": "__lt__",
            "location": 643,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "str"
                ]
            }
        },
        "Block.__gt__": {
            "name": "__gt__",
            "location": 648,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "str"
                ]
            }
        },
        "Block.__le__": {
            "name": "__le__",
            "location": 653,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "str"
                ]
            }
        },
        "Block.__ge__": {
            "name": "__ge__",
            "location": 658,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "str"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/block_uid.py": {
        "block_uid": {
            "name": "block_uid",
            "location": 107,
            "return": [
                "int",
                "\"Parameter\"",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Collection",
                    "Optional[str]",
                    "Sequence[str]",
                    "Tuple[Union[str, int]]",
                    "float"
                ]
            }
        },
        "BlockUID.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "str"
                ],
                "sha_hash": [
                    "str",
                    "Optional[str]",
                    "set"
                ]
            }
        },
        "BlockUID.empty": {
            "name": "empty",
            "location": 49,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "BlockUID.from_str": {
            "name": "from_str",
            "location": 53,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "FrozenSet[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "int"
                ],
                "blockid": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "BlockUID.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockUID.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "str",
                    "Union[str, int, float]",
                    "int"
                ]
            }
        },
        "BlockUID.__lt__": {
            "name": "__lt__",
            "location": 80,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Type",
                    "Union[str, int, float]",
                    "int"
                ]
            }
        },
        "BlockUID.__gt__": {
            "name": "__gt__",
            "location": 85,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Type",
                    "Union[str, int, float]",
                    "int"
                ]
            }
        },
        "BlockUID.__le__": {
            "name": "__le__",
            "location": 90,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Type",
                    "Union[str, int, float]",
                    "int"
                ]
            }
        },
        "BlockUID.__ge__": {
            "name": "__ge__",
            "location": 95,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Type",
                    "Union[str, int, float]",
                    "int"
                ]
            }
        },
        "BlockUID.__hash__": {
            "name": "__hash__",
            "location": 100,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockUID.__bool__": {
            "name": "__bool__",
            "location": 103,
            "return": [
                "Optional[Dict[str, Any]]",
                "MutableMapping[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/certification.py": {
        "Certification.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "float"
                ],
                "currency": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "float"
                ],
                "pubkey_from": [
                    "bool",
                    "Optional[dict]",
                    "List['cirq.Circuit']",
                    "float"
                ],
                "identity": [
                    "int",
                    "Optional[str]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Optional[list]",
                    "Optional[float]"
                ],
                "timestamp": [
                    "bool",
                    "Optional[dict]",
                    "List['cirq.Circuit']",
                    "float"
                ],
                "signature": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "Certification.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 114,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "signed_raw": [
                    "bytes",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "Certification.from_inline": {
            "name": "from_inline",
            "location": 171,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "version": [
                    "str",
                    "int",
                    "bool"
                ],
                "currency": [
                    "str",
                    "int",
                    "bool"
                ],
                "blockhash": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "inline": [
                    "str"
                ]
            }
        },
        "Certification.raw": {
            "name": "raw",
            "location": 204,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certification.sign": {
            "name": "sign",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "Certification.signed_raw": {
            "name": "signed_raw",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certification.inline": {
            "name": "inline",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/crc_pubkey.py": {
        "CRCPubkey.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "int",
                    "bool",
                    "float"
                ],
                "crc": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CRCPubkey.from_str": {
            "name": "from_str",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "int"
                ],
                "crc_pubkey": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "CRCPubkey.from_pubkey": {
            "name": "from_pubkey",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "pubkey": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "CRCPubkey.is_valid": {
            "name": "is_valid",
            "location": 81,
            "return": [
                "str",
                "List[Callable]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRCPubkey.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/document.py": {
        "MalformedDocumentError.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ]
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "currency": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "signatures": [
                    "Iterable[str]",
                    "List[str]",
                    "bool",
                    "List[List[Callable]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Document.parse_field": {
            "name": "parse_field",
            "location": 74,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "field_name": [
                    "str",
                    "dict"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Document.sign": {
            "name": "sign",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "Document.raw": {
            "name": "raw",
            "location": 105,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.signed_raw": {
            "name": "signed_raw",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.sha_hash": {
            "name": "sha_hash",
            "location": 123,
            "return": [
                "bool",
                "str",
                "IO[Any]",
                "float",
                "Tuple[bytes]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/identity.py": {
        "Identity.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "str",
                    "float"
                ],
                "currency": [
                    "int",
                    "str",
                    "float"
                ],
                "pubkey": [
                    "int"
                ],
                "uid": [
                    "bool",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "list"
                ],
                "ts": [
                    "str",
                    "float",
                    "Union[int, str]",
                    "int",
                    "bool"
                ],
                "signature": [
                    "Optional[str]",
                    "str",
                    "Sequence[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Identity.from_inline": {
            "name": "from_inline",
            "location": 92,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float",
                    "dict",
                    "List[str]"
                ],
                "version": [
                    "str",
                    "int",
                    "float",
                    "dict",
                    "List[str]"
                ],
                "currency": [
                    "str",
                    "int",
                    "float",
                    "dict",
                    "List[str]"
                ],
                "inline": [
                    "str",
                    "dict"
                ]
            }
        },
        "Identity.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 113,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "slice"
                ],
                "signed_raw": [
                    "bytes",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "Identity.raw": {
            "name": "raw",
            "location": 144,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identity.inline": {
            "name": "inline",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/membership.py": {
        "Membership.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "bool"
                ],
                "currency": [
                    "str",
                    "int",
                    "bool"
                ],
                "issuer": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "membership_ts": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "membership_type": [
                    "bool",
                    "str",
                    "AsyncContextManager[None]",
                    "Optional[int]",
                    "int"
                ],
                "uid": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "identity_ts": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "signature": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Membership.from_inline": {
            "name": "from_inline",
            "location": 114,
            "return": [
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bytes"
                ],
                "version": [
                    "str",
                    "int",
                    "bytes"
                ],
                "currency": [
                    "str",
                    "int",
                    "bytes"
                ],
                "membership_type": [
                    "str",
                    "int",
                    "bytes"
                ],
                "inline": [
                    "str",
                    "Tuple[str, List[str], List[str]]"
                ]
            }
        },
        "Membership.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 150,
            "return": [
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "signed_raw": [
                    "bytes",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "Membership.raw": {
            "name": "raw",
            "location": 198,
            "return": [
                "List[Dict[str, Any]]",
                "Tuple[str, str]",
                "int",
                "Type[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Membership.inline": {
            "name": "inline",
            "location": 222,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/peer.py": {
        "Peer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "currency": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "pubkey": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[List[str]]",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "block_uid": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "endpoints": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[List[str]]",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "signature": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Peer.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 92,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "raw": [
                    "str",
                    "Union[Callable, None]"
                ]
            }
        },
        "Peer.raw": {
            "name": "raw",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.from_bma": {
            "name": "from_bma",
            "location": 154,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "data": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/revocation.py": {
        "Revocation.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "currency": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "identity": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "dict",
                    "Iterable[str]",
                    "Union[str, Pattern]"
                ],
                "signature": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Revocation.from_inline": {
            "name": "from_inline",
            "location": 85,
            "return": [
                "str",
                "Callable[[str], T]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "version": [
                    "str",
                    "int",
                    "bool"
                ],
                "currency": [
                    "str",
                    "int",
                    "bool"
                ],
                "inline": [
                    "str",
                    "dict"
                ]
            }
        },
        "Revocation.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 108,
            "return": [
                "str",
                "Callable[[str], T]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "signed_raw": [
                    "bytes",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "Revocation.extract_self_cert": {
            "name": "extract_self_cert",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "signed_raw": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Revocation.inline": {
            "name": "inline",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.raw": {
            "name": "raw",
            "location": 195,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.sign": {
            "name": "sign",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "Revocation.signed_raw": {
            "name": "signed_raw",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/transaction.py": {
        "reduce_base": {
            "name": "reduce_base",
            "location": 35,
            "return": [],
            "arguments": {
                "amount": [],
                "base": []
            }
        },
        "InputSource.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "base": [],
                "source": [],
                "origin_id": [],
                "index": []
            }
        },
        "InputSource.__eq__": {
            "name": "__eq__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InputSource.__hash__": {
            "name": "__hash__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputSource.from_inline": {
            "name": "from_inline",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "inline": []
            }
        },
        "InputSource.inline": {
            "name": "inline",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputSource.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "base": [],
                "condition": []
            }
        },
        "OutputSource.__eq__": {
            "name": "__eq__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OutputSource.__hash__": {
            "name": "__hash__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputSource.from_inline": {
            "name": "from_inline",
            "location": 195,
            "return": [],
            "arguments": {
                "cls": [],
                "inline": []
            }
        },
        "OutputSource.inline": {
            "name": "inline",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputSource.inline_condition": {
            "name": "inline_condition",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputSource.condition_from_text": {
            "name": "condition_from_text",
            "location": 230,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "SIGParameter.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SIGParameter.__eq__": {
            "name": "__eq__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SIGParameter.__hash__": {
            "name": "__hash__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SIGParameter.from_parameter": {
            "name": "from_parameter",
            "location": 277,
            "return": [],
            "arguments": {
                "cls": [],
                "parameter": []
            }
        },
        "SIGParameter.__str__": {
            "name": "__str__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XHXParameter.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "integer": []
            }
        },
        "XHXParameter.__eq__": {
            "name": "__eq__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "XHXParameter.__hash__": {
            "name": "__hash__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XHXParameter.from_parameter": {
            "name": "from_parameter",
            "location": 333,
            "return": [],
            "arguments": {
                "cls": [],
                "parameter": []
            }
        },
        "XHXParameter.compute": {
            "name": "compute",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XHXParameter.__str__": {
            "name": "__str__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnlockParameter.from_parameter": {
            "name": "from_parameter",
            "location": 367,
            "return": [],
            "arguments": {
                "cls": [],
                "parameter": []
            }
        },
        "UnlockParameter.compute": {
            "name": "compute",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unlock.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "parameters": []
            }
        },
        "Unlock.__eq__": {
            "name": "__eq__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Unlock.__hash__": {
            "name": "__hash__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unlock.from_inline": {
            "name": "from_inline",
            "location": 431,
            "return": [],
            "arguments": {
                "cls": [],
                "inline": []
            }
        },
        "Unlock.inline": {
            "name": "inline",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "version": [],
                "currency": [],
                "blockstamp": [],
                "locktime": [],
                "issuers": [],
                "inputs": [],
                "unlocks": [],
                "outputs": [],
                "comment": [],
                "signatures": [],
                "time": []
            }
        },
        "Transaction.__eq__": {
            "name": "__eq__",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transaction.__hash__": {
            "name": "__hash__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.from_bma_history": {
            "name": "from_bma_history",
            "location": 615,
            "return": [],
            "arguments": {
                "cls": [],
                "currency": [],
                "tx_data": []
            }
        },
        "Transaction.from_compact": {
            "name": "from_compact",
            "location": 653,
            "return": [],
            "arguments": {
                "cls": [],
                "currency": [],
                "compact": []
            }
        },
        "Transaction.from_signed_raw": {
            "name": "from_signed_raw",
            "location": 739,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": [],
                "time": []
            }
        },
        "Transaction.raw": {
            "name": "raw",
            "location": 825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.compact": {
            "name": "compact",
            "location": 863,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleTransaction.__init__": {
            "name": "__init__",
            "location": 910,
            "return": [],
            "arguments": {
                "self": [],
                "version": [],
                "currency": [],
                "blockstamp": [],
                "locktime": [],
                "issuer": [],
                "single_input": [],
                "unlocks": [],
                "outputs": [],
                "comment": [],
                "signature": [],
                "time": []
            }
        },
        "SimpleTransaction.is_simple": {
            "name": "is_simple",
            "location": 954,
            "return": [],
            "arguments": {
                "tx": []
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/__init__.py": {},
    "duniter-python-api-master/duniterpy/documents/ws2p/heads.py": {
        "API.from_inline": {
            "name": "from_inline",
            "location": 46,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "inline": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "API.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Head.from_inline": {
            "name": "from_inline",
            "location": 65,
            "return": [
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "inline": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Dict[str, str]]"
                ],
                "signature": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "Head.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadV0.from_inline": {
            "name": "from_inline",
            "location": 101,
            "return": [
                "bool",
                "str",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "inline": [
                    "str",
                    "Pattern[str]",
                    "bytes"
                ],
                "signature": [
                    "str"
                ]
            }
        },
        "HeadV0.inline": {
            "name": "inline",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadV1.from_inline": {
            "name": "from_inline",
            "location": 148,
            "return": [
                "bool",
                "Callable[..., None]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "str",
                    "Dict[str, int]",
                    "set",
                    "Optional[dict]",
                    "List[List[Any]]",
                    "Iterable[str]",
                    "list"
                ],
                "inline": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "signature": [
                    "str",
                    "float",
                    "Iterable[Union[Any, int]]"
                ]
            }
        },
        "HeadV2.from_inline": {
            "name": "from_inline",
            "location": 190,
            "return": [
                "bool",
                "Callable[..., None]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str, int]",
                    "dict",
                    "Optional[dict]"
                ],
                "inline": [
                    "str",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "signature": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/ws2p/messages.py": {
        "HandshakeMessage.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "pubkey": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[bytes]",
                    "bool"
                ],
                "challenge": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "signature": [
                    "Optional[str]",
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "HandshakeMessage.raw": {
            "name": "raw",
            "location": 66,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandshakeMessage.get_signed_json": {
            "name": "get_signed_json",
            "location": 79,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "signing_key": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "HandshakeMessage.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ack.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "pubkey": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "challenge": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "signature": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Ack.get_signed_json": {
            "name": "get_signed_json",
            "location": 124,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "signing_key": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "Ok.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "pubkey": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "challenge": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "signature": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Ok.get_signed_json": {
            "name": "get_signed_json",
            "location": 157,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "signing_key": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "DocumentMessage.get_json": {
            "name": "get_json",
            "location": 187,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "document_type_id": [
                    "str",
                    "int"
                ],
                "document": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/documents/ws2p/__init__.py": {},
    "duniter-python-api-master/duniterpy/grammars/output.py": {
        "SIG.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "SIG.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIG.__eq__": {
            "name": "__eq__",
            "location": 72,
            "return": [
                "int",
                "tuple",
                "float",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "SIG.__hash__": {
            "name": "__hash__",
            "location": 80,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIG.token": {
            "name": "token",
            "location": 84,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "pubkey": [
                    "str",
                    "Callable"
                ]
            }
        },
        "SIG.compose": {
            "name": "compose",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "grammar": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "attr_of": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "CSV.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "CSV.__str__": {
            "name": "__str__",
            "location": 129,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSV.__eq__": {
            "name": "__eq__",
            "location": 132,
            "return": [
                "int",
                "str",
                "bool",
                "tuple",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "CSV.__hash__": {
            "name": "__hash__",
            "location": 140,
            "return": [
                "int",
                "float",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSV.token": {
            "name": "token",
            "location": 144,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "float",
                    "int",
                    "Sequence[float]"
                ],
                "time": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "CSV.compose": {
            "name": "compose",
            "location": 155,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "grammar": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "attr_of": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "CLTV.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "CLTV.__str__": {
            "name": "__str__",
            "location": 188,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLTV.__eq__": {
            "name": "__eq__",
            "location": 191,
            "return": [
                "int",
                "tuple",
                "float",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "CLTV.__hash__": {
            "name": "__hash__",
            "location": 199,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLTV.token": {
            "name": "token",
            "location": 203,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        },
        "CLTV.compose": {
            "name": "compose",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "grammar": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "attr_of": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "XHX.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "XHX.__str__": {
            "name": "__str__",
            "location": 247,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XHX.__eq__": {
            "name": "__eq__",
            "location": 250,
            "return": [
                "int",
                "tuple",
                "float",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "XHX.__hash__": {
            "name": "__hash__",
            "location": 258,
            "return": [
                "int",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "XHX.token": {
            "name": "token",
            "location": 262,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sized",
                    "Optional[int]"
                ],
                "sha_hash": [
                    "str",
                    "Sized",
                    "Optional[int]"
                ]
            }
        },
        "XHX.compose": {
            "name": "compose",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "grammar": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "attr_of": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Operator.token": {
            "name": "token",
            "location": 299,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Iterable[str]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "int",
                    "type"
                ],
                "keyword": [
                    "bool",
                    "Type",
                    "int",
                    "type"
                ]
            }
        },
        "Operator.compose": {
            "name": "compose",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "grammar": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ],
                "attr_of": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Condition.__eq__": {
            "name": "__eq__",
            "location": 345,
            "return": [
                "int",
                "tuple",
                "float",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Condition.__hash__": {
            "name": "__hash__",
            "location": 358,
            "return": [
                "int",
                "str",
                "Sequence[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__str__": {
            "name": "__str__",
            "location": 361,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.token": {
            "name": "token",
            "location": 365,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Union[int, float]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "left": [
                    "str",
                    "bool",
                    "int",
                    "Union[int, float]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "op": [
                    "Dict[str, Any]",
                    "Iterable[Hashable]",
                    "bytes",
                    "int",
                    "Optional[int]"
                ],
                "right": [
                    "str",
                    "bool",
                    "int",
                    "Union[int, float]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Condition.compose": {
            "name": "compose",
            "location": 387,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str"
                ],
                "grammar": [
                    "str"
                ],
                "attr_of": [
                    "str"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/grammars/__init__.py": {},
    "duniter-python-api-master/duniterpy/helpers/blockchain.py": {
        "Blockchain": {
            "name": "Blockchain",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "json_blockchain": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "load_json": {
            "name": "load_json",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PurePath",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 107,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[Dict]",
                    "list"
                ]
            }
        },
        "JsonBlockchain.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "Callable",
                    "List[List[Any]]",
                    "Optional[str]",
                    "List[str]",
                    "Iterable[T]",
                    "str",
                    "list"
                ]
            }
        },
        "JsonBlockchain.parsechunk": {
            "name": "parsechunk",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonBlockchain.__iter__": {
            "name": "__iter__",
            "location": 60,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonBlockchain.__next__": {
            "name": "__next__",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonBlockchain.current_block": {
            "name": "current_block",
            "location": 80,
            "return": [
                "int",
                "bool",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonBlockchain.get_block_number": {
            "name": "get_block_number",
            "location": 85,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "float",
                    "Tuple[int]"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/helpers/money.py": {
        "output_available": {
            "name": "output_available",
            "location": 22,
            "return": [
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "str",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "condition": [
                    "str",
                    "int",
                    "float"
                ],
                "comparison": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/helpers/network.py": {},
    "duniter-python-api-master/duniterpy/helpers/ws2p.py": {},
    "duniter-python-api-master/duniterpy/helpers/__init__.py": {},
    "duniter-python-api-master/duniterpy/key/ascii_armor.py": {
        "AsciiArmor.create": {
            "name": "create",
            "location": 84,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "pubkey": [
                    "str",
                    "Optional[str]",
                    "Optional[bytes]",
                    "int",
                    "bool"
                ],
                "signing_keys": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ],
                "message_comment": [
                    "Optional[str]",
                    "str",
                    "int",
                    "type",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "signatures_comment": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AsciiArmor._remove_trailing_spaces": {
            "name": "_remove_trailing_spaces",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "AsciiArmor._dash_escape_text": {
            "name": "_dash_escape_text",
            "location": 182,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "AsciiArmor._parse_dash_escaped_line": {
            "name": "_parse_dash_escaped_line",
            "location": 198,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]",
                "Callable[..., T]"
            ],
            "arguments": {
                "dash_escaped_line": [
                    "str"
                ]
            }
        },
        "AsciiArmor._get_version_field": {
            "name": "_get_version_field",
            "location": 215,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "AsciiArmor._get_comment_field": {
            "name": "_get_comment_field",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]",
                    "bytearray"
                ]
            }
        },
        "AsciiArmor._get_signature_block": {
            "name": "_get_signature_block",
            "location": 234,
            "return": [
                "str",
                "Type[BaseException]",
                "Type[T]",
                "Any"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "signing_key": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "close_block": [
                    "bool",
                    "int",
                    "str"
                ],
                "comment": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "AsciiArmor.parse": {
            "name": "parse",
            "location": 279,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "ascii_armor_message": [],
                "signing_key": [
                    "bytes",
                    "Optional[int]",
                    "Optional[AnyStr]"
                ],
                "sender_pubkeys": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "AsciiArmor._decrypt": {
            "name": "_decrypt",
            "location": 442,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "ascii_armor_message": [
                    "str",
                    "certificate_engine.ssl.key.Key",
                    "bytes"
                ],
                "signing_key": [
                    "str",
                    "certificate_engine.ssl.key.Key",
                    "bytes"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/key/base58.py": {
        "Base58Encoder.encode": {
            "name": "encode",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Union[str, bytes]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Base58Encoder.decode": {
            "name": "decode",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/key/constants.py": {},
    "duniter-python-api-master/duniterpy/key/encryption_key.py": {
        "SecretKey.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "salt": [
                    "str",
                    "Optional[bytes]",
                    "int"
                ],
                "password": [
                    "str",
                    "Optional[bytes]",
                    "int"
                ],
                "scrypt_params": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Callable]",
                    "Optional[Tuple[int, int]]",
                    "Optional[Dict[str, dict]]"
                ]
            }
        },
        "SecretKey.encrypt": {
            "name": "encrypt",
            "location": 63,
            "return": [
                "List[int]",
                "str",
                "bytes",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "str"
                ],
                "nonce": [
                    "int",
                    "str",
                    "Dict[str, Sequence[str]]",
                    "bytes",
                    "Union[bytes, bytearray]"
                ],
                "text": [
                    "int",
                    "str",
                    "Dict[str, Sequence[str]]",
                    "bytes",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "SecretKey.decrypt": {
            "name": "decrypt",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "str"
                ],
                "nonce": [
                    "int",
                    "str",
                    "Dict[str, Sequence[str]]",
                    "bytes",
                    "Union[bytes, bytearray]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "PublicKey.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "int",
                    "Optional[int]",
                    "str",
                    "tuple",
                    "Optional[float]"
                ]
            }
        },
        "PublicKey.base58": {
            "name": "base58",
            "location": 115,
            "return": [
                "str",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.encrypt_seal": {
            "name": "encrypt_seal",
            "location": 121,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "Union[bytes, str]"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/key/scrypt_params.py": {
        "ScryptParams.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "r": [
                    "int",
                    "Optional[List[int]]",
                    "bytes"
                ],
                "p": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "seed_length": [
                    "int",
                    "bool",
                    "tuple"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/key/signing_key.py": {
        "SigningKey.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "SigningKey.from_credentials": {
            "name": "from_credentials",
            "location": 51,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "salt": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[bytes]"
                ],
                "password": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[bytes]"
                ],
                "scrypt_params": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, dict]]",
                    "Optional[float]",
                    "Optional[Callable]"
                ]
            }
        },
        "SigningKey.from_credentials_file": {
            "name": "from_credentials_file",
            "location": 81,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "path": [
                    "str"
                ],
                "scrypt_params": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "SigningKey.save_seedhex_file": {
            "name": "save_seedhex_file",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SigningKey.from_seedhex_file": {
            "name": "from_seedhex_file",
            "location": 113,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "SigningKey.from_seedhex": {
            "name": "from_seedhex",
            "location": 124,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "seedhex": [
                    "str",
                    "dict"
                ]
            }
        },
        "SigningKey.save_private_key": {
            "name": "save_private_key",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SigningKey.from_private_key": {
            "name": "from_private_key",
            "location": 147,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict[cmk.utils.type_defs.HostName, str]"
                ]
            }
        },
        "SigningKey.decrypt_seal": {
            "name": "decrypt_seal",
            "location": 158,
            "return": [
                "List[dict]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "raiden.utils.Any",
                    "str",
                    "Union[bytes, str]"
                ]
            }
        },
        "SigningKey.from_pubsec_file": {
            "name": "from_pubsec_file",
            "location": 173,
            "return": [
                "str",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "SigningKey.save_pubsec_file": {
            "name": "save_pubsec_file",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SigningKey.from_wif_or_ewif_file": {
            "name": "from_wif_or_ewif_file",
            "location": 231,
            "return": [
                "bool",
                "Optional[Any]",
                "bytes",
                "Mapping",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SigningKey.from_wif_or_ewif_hex": {
            "name": "from_wif_or_ewif_hex",
            "location": 254,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list"
            ],
            "arguments": {
                "wif_hex": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Optional[int]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "SigningKey.from_wif_file": {
            "name": "from_wif_file",
            "location": 277,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "SigningKey.from_wif_hex": {
            "name": "from_wif_hex",
            "location": 297,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "wif_hex": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[Exception]"
                ]
            }
        },
        "SigningKey.save_wif_file": {
            "name": "save_wif_file",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SigningKey.from_ewif_file": {
            "name": "from_ewif_file",
            "location": 354,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SigningKey.from_ewif_hex": {
            "name": "from_ewif_hex",
            "location": 375,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "ewif_hex": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[Callable]",
                    "bytes"
                ]
            }
        },
        "SigningKey.save_ewif_file": {
            "name": "save_ewif_file",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "password": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "SigningKey.from_ssb_file": {
            "name": "from_ssb_file",
            "location": 487,
            "return": [
                "str",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/key/verifying_key.py": {
        "VerifyingKey.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "str"
                ]
            }
        },
        "VerifyingKey.verify_document": {
            "name": "verify_document",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "bool",
                    "slice",
                    "float"
                ]
            }
        },
        "VerifyingKey.verify_ws2p_head": {
            "name": "verify_ws2p_head",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VerifyingKey.get_verified_data": {
            "name": "get_verified_data",
            "location": 79,
            "return": [
                "dict",
                "str",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "bytes",
                    "Iterable",
                    "int"
                ]
            }
        }
    },
    "duniter-python-api-master/duniterpy/key/__init__.py": {},
    "duniter-python-api-master/examples/create_public_key.py": {},
    "duniter-python-api-master/examples/listen_ws2p.py": {},
    "duniter-python-api-master/examples/load_binary_encrypted_message.py": {},
    "duniter-python-api-master/examples/load_binary_signed_message.py": {},
    "duniter-python-api-master/examples/load_cleartext_ascii_armor_message.py": {},
    "duniter-python-api-master/examples/load_credentials_file.py": {},
    "duniter-python-api-master/examples/load_encrypted_ascii_armor_message.py": {},
    "duniter-python-api-master/examples/load_local_blockchain.py": {},
    "duniter-python-api-master/examples/load_scuttlebutt_file.py": {},
    "duniter-python-api-master/examples/request_available_nodes.py": {},
    "duniter-python-api-master/examples/request_data.py": {},
    "duniter-python-api-master/examples/request_data_async.py": {},
    "duniter-python-api-master/examples/request_data_elasticsearch.py": {},
    "duniter-python-api-master/examples/request_data_graphql.py": {},
    "duniter-python-api-master/examples/request_web_socket_block.py": {},
    "duniter-python-api-master/examples/request_ws2p.py": {},
    "duniter-python-api-master/examples/save_and_load_private_key_file.py": {},
    "duniter-python-api-master/examples/save_and_load_private_key_file_ewif.py": {},
    "duniter-python-api-master/examples/save_and_load_private_key_file_pubsec.py": {},
    "duniter-python-api-master/examples/save_and_load_private_key_file_wif.py": {},
    "duniter-python-api-master/examples/save_binary_encrypted_message.py": {},
    "duniter-python-api-master/examples/save_binary_signed_message.py": {},
    "duniter-python-api-master/examples/save_cleartext_ascii_armor_message.py": {},
    "duniter-python-api-master/examples/save_encrypted_ascii_armor_message.py": {},
    "duniter-python-api-master/examples/save_revoke_document.py": {
        "get_signed_raw_revocation_document": {
            "name": "get_signed_raw_revocation_document",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "identity": [
                    "duniterpy.documents.Identity",
                    "str"
                ],
                "salt": [
                    "str",
                    "List[str]",
                    "Callable[[T], bool]"
                ],
                "password": [
                    "str",
                    "List[str]",
                    "Callable[[T], bool]"
                ]
            }
        }
    },
    "duniter-python-api-master/examples/send_certification.py": {
        "get_certification_document": {
            "name": "get_certification_document",
            "location": 79,
            "return": [
                "str",
                "dict",
                "Iterable[int]",
                "bytes"
            ],
            "arguments": {
                "current_block": [
                    "str",
                    "duniterpy.documents.Identity",
                    "dict",
                    "type"
                ],
                "self_cert_document": [
                    "str",
                    "duniterpy.documents.Identity",
                    "dict",
                    "type"
                ],
                "from_pubkey": [
                    "str",
                    "duniterpy.documents.Identity",
                    "dict",
                    "type"
                ]
            }
        }
    },
    "duniter-python-api-master/examples/send_identity.py": {
        "get_identity_document": {
            "name": "get_identity_document",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "current_block": [
                    "str",
                    "cirq.api.google.v1.params_pb2.SingleSweep",
                    "Optional[int]"
                ],
                "uid": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ],
                "key": [
                    "Dict[str, Union[str, int, bool]]",
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        }
    },
    "duniter-python-api-master/examples/send_membership.py": {
        "get_membership_document": {
            "name": "get_membership_document",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "membership_type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "current_block": [
                    "Type[T]",
                    "cirq.api.google.v1.params_pb2.SingleSweep",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, float]"
                ],
                "identity": [
                    "bool",
                    "Optional[bool]",
                    "Callable",
                    "int",
                    "str"
                ],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "duniter-python-api-master/examples/send_transaction.py": {
        "get_transaction_document": {
            "name": "get_transaction_document",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "current_block": [
                    "str"
                ],
                "source": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "from_pubkey": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "to_pubkey": [
                    "str"
                ]
            }
        }
    },
    "duniter-python-api-master/tests/__init__.py": {},
    "duniter-python-api-master/tests/api/test_endpoints.py": {
        "TestEndpoint.test_gva": {
            "name": "test_gva",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoint.test_gva_subscription": {
            "name": "test_gva_subscription",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/webserver.py": {
        "find_unused_port": {
            "name": "find_unused_port",
            "location": 28,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {}
        },
        "WebFunctionalSetupMixin.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebFunctionalSetupMixin.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/__init__.py": {},
    "duniter-python-api-master/tests/api/bma/test_blockchain.py": {
        "TestBmaBlockchain.test_parameters": {
            "name": "test_parameters",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_parameters_bad": {
            "name": "test_parameters_bad",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_block_0": {
            "name": "test_schema_block_0",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_block_bad": {
            "name": "test_block_bad",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_current_bad": {
            "name": "test_current_bad",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_block": {
            "name": "test_schema_block",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_hardship": {
            "name": "test_schema_hardship",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_hardship_bad": {
            "name": "test_hardship_bad",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_membership": {
            "name": "test_schema_membership",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_membership_bad": {
            "name": "test_membership_bad",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_newcomers": {
            "name": "test_schema_newcomers",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_newcomers_bad": {
            "name": "test_newcomers_bad",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_certifications": {
            "name": "test_schema_certifications",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_certifications_bad": {
            "name": "test_certifications_bad",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_joiners": {
            "name": "test_schema_joiners",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_joiners_bad": {
            "name": "test_joiners_bad",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_actives": {
            "name": "test_schema_actives",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_actives_bad": {
            "name": "test_actives_bad",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_leavers": {
            "name": "test_schema_leavers",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_leavers_bad": {
            "name": "test_leavers_bad",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_ud": {
            "name": "test_schema_ud",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_blocks": {
            "name": "test_schema_blocks",
            "location": 548,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_ud_bad": {
            "name": "test_ud_bad",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_schema_tx": {
            "name": "test_schema_tx",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaBlockchain.test_tx_bad": {
            "name": "test_tx_bad",
            "location": 688,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/bma/test_bma.py": {
        "TestBmaApi.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.test_reverse_url_complete": {
            "name": "test_reverse_url_complete",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.test_reverse_url_complete_bmas": {
            "name": "test_reverse_url_complete_bmas",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.test_reverse_url_complete_gva": {
            "name": "test_reverse_url_complete_gva",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.test_reverse_url_only_ipv4": {
            "name": "test_reverse_url_only_ipv4",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.test_reverse_url_only_ipv6": {
            "name": "test_reverse_url_only_ipv6",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaApi.test_parse_error": {
            "name": "test_parse_error",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/bma/test_network.py": {
        "TestBmaNetwork.test_peers": {
            "name": "test_peers",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_peering": {
            "name": "test_peering",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_peering_bad": {
            "name": "test_peering_bad",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_peering_peers_root": {
            "name": "test_peering_peers_root",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_peering_peers_leaf": {
            "name": "test_peering_peers_leaf",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_peering_peers_bad": {
            "name": "test_peering_peers_bad",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_ws2p_heads": {
            "name": "test_ws2p_heads",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaNetwork.test_ws2p_heads_bad": {
            "name": "test_ws2p_heads_bad",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/bma/test_tx.py": {
        "TestBmaTx.test_bma_tx_history": {
            "name": "test_bma_tx_history",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaTx.test_bma_tx_history_bad": {
            "name": "test_bma_tx_history_bad",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaTx.test_bma_tx_history_blocks_bad": {
            "name": "test_bma_tx_history_blocks_bad",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaTx.test_bma_tx_sources": {
            "name": "test_bma_tx_sources",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaTx.test_bma_tx_sources_bad": {
            "name": "test_bma_tx_sources_bad",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/bma/test_wot.py": {
        "TestBmaWot.test_bma_wot_lookup": {
            "name": "test_bma_wot_lookup",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_lookup_bad": {
            "name": "test_bma_wot_lookup_bad",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_members": {
            "name": "test_bma_wot_members",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_members_bad": {
            "name": "test_bma_wot_members_bad",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_cert": {
            "name": "test_bma_wot_cert",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_certifiers_bad": {
            "name": "test_bma_wot_certifiers_bad",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_certifiers_inner_bad": {
            "name": "test_bma_wot_certifiers_inner_bad",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_certified_bad": {
            "name": "test_bma_wot_certified_bad",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWot.test_bma_wot_requirements": {
            "name": "test_bma_wot_requirements",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/bma/test_ws.py": {
        "TestBmaWebsocket.test_block": {
            "name": "test_block",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBmaWebsocket.test_peer": {
            "name": "test_peer",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/api/bma/__init__.py": {},
    "duniter-python-api-master/tests/api/ws2p/test_ws2p.py": {
        "TestWs2p.test_block": {
            "name": "test_block",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWs2p.test_error_response_validation": {
            "name": "test_error_response_validation",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWs2p.test_block_response_validation": {
            "name": "test_block_response_validation",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWs2p.test_blocks_response_validation": {
            "name": "test_blocks_response_validation",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWs2p.test_requirements_pending": {
            "name": "test_requirements_pending",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWs2p.test_document_message": {
            "name": "test_document_message",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_block.py": {
        "TestBlock.test_fromraw": {
            "name": "test_fromraw",
            "location": 1651,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_fromraw_12": {
            "name": "test_fromraw_12",
            "location": 1674,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_from_signed_raw_block_zero": {
            "name": "test_from_signed_raw_block_zero",
            "location": 1701,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_toraw_fromsignedraw": {
            "name": "test_toraw_fromsignedraw",
            "location": 1747,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_toraw_fromrawzero": {
            "name": "test_toraw_fromrawzero",
            "location": 1780,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_raw_with_tx": {
            "name": "test_raw_with_tx",
            "location": 1806,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_raw_with_leavers": {
            "name": "test_raw_with_leavers",
            "location": 1833,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_block_uid__compare": {
            "name": "test_block_uid__compare",
            "location": 1866,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_parse_with_excluded": {
            "name": "test_parse_with_excluded",
            "location": 1877,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_parse_negative_issuers_frame_var": {
            "name": "test_parse_negative_issuers_frame_var",
            "location": 1883,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_block_uid_converter": {
            "name": "test_block_uid_converter",
            "location": 1889,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_block_uid_converter_error": {
            "name": "test_block_uid_converter_error",
            "location": 1899,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_block_uid_no_convert": {
            "name": "test_block_uid_no_convert",
            "location": 1903,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_block_uid_non_zero": {
            "name": "test_block_uid_non_zero",
            "location": 1915,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_proof_of_work": {
            "name": "test_proof_of_work",
            "location": 1924,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_block_signature": {
            "name": "test_block_signature",
            "location": 1958,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_from_parsed_json_block_0": {
            "name": "test_from_parsed_json_block_0",
            "location": 1964,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlock.test_from_parsed_json_block_250004": {
            "name": "test_from_parsed_json_block_250004",
            "location": 1970,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_certification.py": {
        "TestCertification.test_self_certification_from_inline": {
            "name": "test_self_certification_from_inline",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertification.test_raw_self_certification": {
            "name": "test_raw_self_certification",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertification.test_certifications_from_inline": {
            "name": "test_certifications_from_inline",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertification.test_certification_raw": {
            "name": "test_certification_raw",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertification.test_revokation_from_inline": {
            "name": "test_revokation_from_inline",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertification.test_revokation_raw": {
            "name": "test_revokation_raw",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCertification.test_revokation_from_signed_raw": {
            "name": "test_revokation_from_signed_raw",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_crc_pubkey.py": {
        "TestCRCPubkey.test_from_pubkey": {
            "name": "test_from_pubkey",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_membership.py": {
        "TestMembership.test_frominline": {
            "name": "test_frominline",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMembership.test_fromraw": {
            "name": "test_fromraw",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMembership.test_fromraw_toraw": {
            "name": "test_fromraw_toraw",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_peer.py": {
        "TestPeer.test_fromraw": {
            "name": "test_fromraw",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_fromraw_toraw": {
            "name": "test_fromraw_toraw",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_incorrect": {
            "name": "test_incorrect",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_transaction.py": {
        "TestTransaction.test_fromcompact": {
            "name": "test_fromcompact",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_fromraw_toraw": {
            "name": "test_fromraw_toraw",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_compact_change": {
            "name": "test_compact_change",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_reduce_base": {
            "name": "test_reduce_base",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_reduce_base_2": {
            "name": "test_reduce_base_2",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_is_simple": {
            "name": "test_is_simple",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_inputsource_from_inline": {
            "name": "test_inputsource_from_inline",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_outputsource_from_inline": {
            "name": "test_outputsource_from_inline",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_outputsource_inline_condition": {
            "name": "test_outputsource_inline_condition",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_transaction_equality": {
            "name": "test_transaction_equality",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_transaction_document_generation": {
            "name": "test_transaction_document_generation",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_unlock": {
            "name": "test_unlock",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/test_ws2p_heads.py": {
        "TestWS2PHeads.test_headv0": {
            "name": "test_headv0",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWS2PHeads.test_ws2p_headv1": {
            "name": "test_ws2p_headv1",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWS2PHeads.test_ws2p_headv2": {
            "name": "test_ws2p_headv2",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/documents/__init__.py": {},
    "duniter-python-api-master/tests/grammars/test_output.py": {
        "TestOutputgrammar.test_sig": {
            "name": "test_sig",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_xhx": {
            "name": "test_xhx",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_sig_condition": {
            "name": "test_sig_condition",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_xhr_condition": {
            "name": "test_xhr_condition",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_simple_condition": {
            "name": "test_simple_condition",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_simple_and_condition": {
            "name": "test_simple_and_condition",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_simple_or_condition": {
            "name": "test_simple_or_condition",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_complex_condition": {
            "name": "test_complex_condition",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_csv_cltv_condition": {
            "name": "test_csv_cltv_condition",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_instanciate_condition": {
            "name": "test_instanciate_condition",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_SIG_token_and_compose": {
            "name": "test_SIG_token_and_compose",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_CSV_token_and_compose": {
            "name": "test_CSV_token_and_compose",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_CLTV_token_and_compose": {
            "name": "test_CLTV_token_and_compose",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputgrammar.test_HXH_token_and_compose": {
            "name": "test_HXH_token_and_compose",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/grammars/__init__.py": {},
    "duniter-python-api-master/tests/helpers/money.py": {
        "TestHelpersMoney.test_output_available": {
            "name": "test_output_available",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/helpers/ws2p.py": {},
    "duniter-python-api-master/tests/key/test_ascii_armor.py": {
        "TestAsciiArmor.test_create_encrypted_and_signed": {
            "name": "test_create_encrypted_and_signed",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsciiArmor.test_create_encrypted": {
            "name": "test_create_encrypted",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAsciiArmor.test_create_signed_cleartext": {
            "name": "test_create_signed_cleartext",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/key/test_encryption_key.py": {
        "TestEncryptionKey.test_from_bob_to_alice": {
            "name": "test_from_bob_to_alice",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/key/test_public_key.py": {
        "TestPublicKey.test_encrypt_seal": {
            "name": "test_encrypt_seal",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/key/test_signing_key.py": {
        "TestSigningKey.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_decrypt_seal": {
            "name": "test_decrypt_seal",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_from_credentials": {
            "name": "test_from_credentials",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_and_load_from_seedhex_file": {
            "name": "test_save_and_load_from_seedhex_file",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_and_load_from_pubsec_file": {
            "name": "test_save_and_load_from_pubsec_file",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_and_load_from_wif_file": {
            "name": "test_save_and_load_from_wif_file",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_and_load_from_private_key_file": {
            "name": "test_save_and_load_from_private_key_file",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_and_load_from_ewif_file": {
            "name": "test_save_and_load_from_ewif_file",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_ewif_and_load_from_ewif_or_wif_file": {
            "name": "test_save_ewif_and_load_from_ewif_or_wif_file",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_save_wif_and_load_from_ewif_or_wif_file": {
            "name": "test_save_wif_and_load_from_ewif_or_wif_file",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_load_credentials_file": {
            "name": "test_load_credentials_file",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningKey.test_load_ssb_file": {
            "name": "test_load_ssb_file",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/key/test_verifying_key.py": {
        "TestVerifyingKey.test_from_sign_to_verify": {
            "name": "test_from_sign_to_verify",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_get_verified_data": {
            "name": "test_get_verified_data",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_peer_signature": {
            "name": "test_peer_signature",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_ws2p_headv0": {
            "name": "test_ws2p_headv0",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_ws2p_headv1": {
            "name": "test_ws2p_headv1",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_ws2p_headv2": {
            "name": "test_ws2p_headv2",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_block_document": {
            "name": "test_block_document",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifyingKey.test_transaction_document": {
            "name": "test_transaction_document",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "duniter-python-api-master/tests/key/__init__.py": {}
}
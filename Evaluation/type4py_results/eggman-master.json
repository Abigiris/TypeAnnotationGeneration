{
    "eggman-master/setup.py": {},
    "eggman-master/tasks.py": {
        "isort": {
            "name": "isort",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "bool",
                    "Iterator[Any]",
                    "list"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "c": []
            }
        }
    },
    "eggman-master/eggman/alias.py": {},
    "eggman-master/eggman/blueprint.py": {
        "Router.add_route": {
            "name": "add_route",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "str",
                    "bool"
                ],
                "rule": [
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "str",
                    "bool"
                ]
            }
        },
        "Router.add_websocket_route": {
            "name": "add_websocket_route",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "str",
                    "bool"
                ],
                "rule": [
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "str",
                    "bool"
                ]
            }
        },
        "Blueprint.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "url_prefix": [
                    "str",
                    "MutableSequence[str]",
                    "Optional[Any]"
                ],
                "host": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ],
                "version": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ],
                "strict_slashes": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ]
            }
        },
        "Blueprint.mount": {
            "name": "mount",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bp": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        },
        "Blueprint.route": {
            "name": "route",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "Blueprint.websocket": {
            "name": "websocket",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "Blueprint.move_routes": {
            "name": "move_routes",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "caller": [
                    "str"
                ]
            }
        },
        "Blueprint.jab": {
            "name": "jab",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.route.wrapper": {
            "name": "wrapper",
            "location": 56,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "Blueprint.websocket.wrapper": {
            "name": "wrapper",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "eggman.types.WebSocketHandler",
                    "Callable",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "Blueprint.jab.constructor": {
            "name": "constructor",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "eggman-master/eggman/server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Callable",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ],
                "port": [
                    "str",
                    "Callable",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ],
                "debug": [
                    "bool",
                    "starlette.types.ASGIApp"
                ]
            }
        },
        "Server.add_route": {
            "name": "add_route",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "eggman.types.Handler",
                    "bool",
                    "eggman.types.WebSocketHandler",
                    "List[Dict]"
                ],
                "rule": [
                    "str",
                    "eggman.types.Handler",
                    "bool",
                    "eggman.types.WebSocketHandler",
                    "List[Dict]"
                ]
            }
        },
        "Server.add_websocket_route": {
            "name": "add_websocket_route",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "List[Dict]",
                    "bool"
                ],
                "rule": [
                    "str",
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "Server.starlette": {
            "name": "starlette",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.jab": {
            "name": "jab",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.jab.constructor": {
            "name": "constructor",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "eggman-master/eggman/types.py": {
        "BlueprintAlreadyInvoked.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caller": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "bool"
                ],
                "bp_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "bool"
                ],
                "owner": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "bool"
                ]
            }
        },
        "UnboundMethodConstructor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnboundMethodConstructor.update_offset": {
            "name": "update_offset",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "UnboundMethodConstructor.add": {
            "name": "add",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "rule": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "eggman-master/eggman/__init__.py": {},
    "eggman-master/test/test_blueprint.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 63,
            "return": [
                "T",
                "bool",
                "Tuple[int, float]",
                "Optional[Dict[str, str]]",
                "\"ArticleComment\"",
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "bool"
                ]
            }
        },
        "hello_mount": {
            "name": "hello_mount",
            "location": 72,
            "return": [
                "T",
                "bool",
                "Tuple[int, float]",
                "Optional[Dict[str, str]]",
                "\"ArticleComment\"",
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "bool"
                ]
            }
        },
        "test_jab": {
            "name": "test_jab",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_free_route": {
            "name": "test_free_route",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mounted_blueprint": {
            "name": "test_mounted_blueprint",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_blueprint_wiring": {
            "name": "test_blueprint_wiring",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_websocket": {
            "name": "test_websocket",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_chained_invoke": {
            "name": "test_chained_invoke",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "alpha": {
            "name": "alpha",
            "location": 273,
            "return": [
                "T",
                "bool",
                "Tuple[int, float]",
                "Optional[Dict[str, str]]",
                "\"ArticleComment\"",
                "str"
            ],
            "arguments": {
                "req": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "beta": {
            "name": "beta",
            "location": 278,
            "return": [
                "T",
                "bool",
                "Tuple[int, float]",
                "Optional[Dict[str, str]]",
                "\"ArticleComment\"",
                "str"
            ],
            "arguments": {
                "req": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "gamma": {
            "name": "gamma",
            "location": 283,
            "return": [
                "T",
                "bool",
                "Tuple[int, float]",
                "Optional[Dict[str, str]]",
                "\"ArticleComment\"",
                "str"
            ],
            "arguments": {
                "req": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_blueprint_mounting": {
            "name": "test_blueprint_mounting",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_invoke": {
            "name": "test_multi_invoke",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MockServer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockServer.add_route": {
            "name": "add_route",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "str",
                    "bool"
                ],
                "rule": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "MockServer.add_websocket_route": {
            "name": "add_websocket_route",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "eggman.types.WebSocketHandler",
                    "eggman.types.Handler",
                    "str",
                    "bool"
                ],
                "rule": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GetIncr.get": {
            "name": "get",
            "location": 29,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetIncr.incr": {
            "name": "incr",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetDecr.get": {
            "name": "get",
            "location": 37,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetDecr.decr": {
            "name": "decr",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get": {
            "name": "get",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.incr": {
            "name": "incr",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.decr": {
            "name": "decr",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Home.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "bool",
                    "float"
                ],
                "log": [
                    "str",
                    "int",
                    "requests.Response"
                ]
            }
        },
        "Other.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "MountedOther.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "WsOther.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "eips.exposed-master/setup.py": {
        "requirements_to_list": {
            "name": "requirements_to_list",
            "location": 19,
            "return": [
                "List[str]",
                "int",
                "List[dict]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/__init__.py": {},
    "eips.exposed-master/eips_exposed/common/config.py": {
        "assert_required_config": {
            "name": "assert_required_config",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "Set[str]",
                    "str",
                    "pathlib.Path",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/common/db.py": {
        "get_session": {
            "name": "get_session",
            "location": 137,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "yield_session": {
            "name": "yield_session",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "commit": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "Mapping[str, Any]",
                    "Tuple[int, int, int]",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "get_latest_commit": {
            "name": "get_latest_commit",
            "location": 153,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_total_eips": {
            "name": "get_total_eips",
            "location": 158,
            "return": [
                "bool",
                "Callable",
                "apistar.types.WSGIEnviron",
                "dict",
                "str",
                "Tuple[str]",
                "Dict[str, bool]"
            ],
            "arguments": {}
        },
        "get_total_commits": {
            "name": "get_total_commits",
            "location": 163,
            "return": [
                "str",
                "Dict[str, bool]",
                "int"
            ],
            "arguments": {}
        },
        "get_total_committers": {
            "name": "get_total_committers",
            "location": 168,
            "return": [
                "int",
                "Dict[str, bool]",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {}
        },
        "get_total_errors": {
            "name": "get_total_errors",
            "location": 173,
            "return": [
                "Mapping[str, Any]",
                "Callable",
                "str",
                "dict",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "get_all_tags": {
            "name": "get_all_tags",
            "location": 178,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_eip_tags": {
            "name": "get_eip_tags",
            "location": 190,
            "return": [
                "str",
                "Mapping",
                "Dict[str, Type]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "eip_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_categories_with_totals": {
            "name": "get_categories_with_totals",
            "location": 195,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_statuses_with_totals": {
            "name": "get_statuses_with_totals",
            "location": 203,
            "return": [
                "int",
                "Exception",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "set_error": {
            "name": "set_error",
            "location": 211,
            "return": [
                "str",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "session": [
                    "Optional[str]",
                    "datetime.datetime",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "eip_id": [
                    "str",
                    "int",
                    "Tuple[str, int]"
                ],
                "error_type": [
                    "str",
                    "int",
                    "Tuple[str, int]"
                ],
                "message": [
                    "str",
                    "int",
                    "Tuple[str, int]"
                ]
            }
        },
        "EIP.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [
                "Iterable[int]",
                "Callable",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIP.search": {
            "name": "search",
            "location": 82,
            "return": [
                "str",
                "Exception",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ],
                "terms": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ]
            }
        },
        "Commit.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.search": {
            "name": "search",
            "location": 103,
            "return": [
                "str",
                "Exception",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ],
                "terms": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ]
            }
        },
        "Tag.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [
                "str",
                "List[List[mypy.types.Type]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 133,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eips.exposed-master/eips_exposed/common/exceptions.py": {},
    "eips.exposed-master/eips_exposed/common/logging.py": {
        "setDebugLogging": {
            "name": "setDebugLogging",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "getLogger": {
            "name": "getLogger",
            "location": 131,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "loggingShutdown": {
            "name": "loggingShutdown",
            "location": 135,
            "return": [
                "str",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {}
        },
        "ColoredStyle.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ColoredStyle.usesTime": {
            "name": "usesTime",
            "location": 67,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColoredStyle.validate": {
            "name": "validate",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ColoredStyle._format": {
            "name": "_format",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Union[BinaryIO, str]"
                ]
            }
        },
        "ColoredStyle.format": {
            "name": "format",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "tuple"
                ]
            }
        },
        "ColoredFormatter.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Callable[[List], List[str]]"
                ],
                "datefmt": [
                    "str",
                    "bool",
                    "Sequence"
                ],
                "style": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Callable[[List], List[str]]"
                ],
                "validate": [
                    "str",
                    "bool",
                    "Sequence"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/common/__init__.py": {
        "type_or_none": {
            "name": "type_or_none",
            "location": 12,
            "return": [
                "Optional[str]",
                "Tuple[Optional[str], Optional[str]]",
                "Tuple[List[str], Optional[str]]",
                "Optional[Callable[[bool], None]]",
                "Optional[T]"
            ],
            "arguments": {
                "t": [
                    "str",
                    "int",
                    "list"
                ],
                "v": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "int_or_none": {
            "name": "int_or_none",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "list_of_int_or_none": {
            "name": "list_of_int_or_none",
            "location": 25,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]"
                ]
            }
        },
        "datetime_or_none": {
            "name": "datetime_or_none",
            "location": 45,
            "return": [
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Sequence[str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "datetime.datetime",
                    "Union[datetime.datetime, datetime.date]",
                    "datetime.date"
                ]
            }
        },
        "eip_id_from_file": {
            "name": "eip_id_from_file",
            "location": 56,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/processor/git.py": {
        "get_eip_repo": {
            "name": "get_eip_repo",
            "location": 11,
            "return": [
                "str",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {}
        },
        "clone_eip_repo": {
            "name": "clone_eip_repo",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "repo_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "latest_commit_hash": {
            "name": "latest_commit_hash",
            "location": 54,
            "return": [
                "Iterable[str]",
                "bool",
                "set",
                "Iterable['cirq.Operation']",
                "Set[str]",
                "int"
            ],
            "arguments": {}
        },
        "file_history": {
            "name": "file_history",
            "location": 60,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "fil": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "all_commits": {
            "name": "all_commits",
            "location": 69,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/eips_exposed/processor/main.py": {
        "list_eip_files": {
            "name": "list_eip_files",
            "location": 27,
            "return": [
                "List[str]",
                "List[pathlib.Path]"
            ],
            "arguments": {}
        },
        "get_public_attrs": {
            "name": "get_public_attrs",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "create_eip_model_instance": {
            "name": "create_eip_model_instance",
            "location": 48,
            "return": [
                "Union[int, float, complex]",
                "dict"
            ],
            "arguments": {
                "eip": [
                    "str",
                    "Callable",
                    "Match[str]"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 54,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/eips_exposed/processor/objects.py": {
        "EIPStatus.get_by_val": {
            "name": "get_by_val",
            "location": 23,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "v": [
                    "Set[str]",
                    "str"
                ]
            }
        },
        "EIPType.get_by_val": {
            "name": "get_by_val",
            "location": 40,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "v": [
                    "Set[str]",
                    "str"
                ]
            }
        },
        "EIPCategory.get_by_val": {
            "name": "get_by_val",
            "location": 58,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "v": [
                    "Set[str]",
                    "str"
                ]
            }
        },
        "EIPCommit.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EIPCommit.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIPCommit.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIPCommit.parse_git_commit": {
            "name": "parse_git_commit",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "Dict[str, str]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EIP.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "EIP.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIP.parse_headers": {
            "name": "parse_headers",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/processor/parser.py": {
        "pluck_headers": {
            "name": "pluck_headers",
            "location": 11,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "eip_text": [
                    "str"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/processor/__init__.py": {
        "parse_eip": {
            "name": "parse_eip",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "eip_text": [
                    "str"
                ]
            }
        }
    },
    "eips.exposed-master/eips_exposed/processor/__main__.py": {},
    "eips.exposed-master/eips_exposed/server/app.py": {
        "GraphQLHandler.set_default_headers": {
            "name": "set_default_headers",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLHandler.options": {
            "name": "options",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EIPSExposedApplication.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eips.exposed-master/eips_exposed/server/__init__.py": {},
    "eips.exposed-master/eips_exposed/server/__main__.py": {},
    "eips.exposed-master/eips_exposed/server/schema/__init__.py": {
        "Query.resolve_eip": {
            "name": "resolve_eip",
            "location": 118,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "_": [
                    "str"
                ],
                "info": [
                    "str"
                ],
                "eip_id": [
                    "List[int]",
                    "int",
                    "str",
                    "cnaas_nms.db.session.sqla_session"
                ]
            }
        },
        "Query.resolve_eips": {
            "name": "resolve_eips",
            "location": 124,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "_": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "info": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "limit": [
                    "str",
                    "Optional[int]"
                ],
                "offset": [
                    "str",
                    "Optional[int]"
                ],
                "tag": [
                    "str",
                    "Optional[dict]",
                    "int"
                ],
                "category": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "status": [
                    "int",
                    "str",
                    "Set[int]",
                    "bool"
                ],
                "search": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Query.resolve_commits": {
            "name": "resolve_commits",
            "location": 154,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[Tuple[str, int]]"
                ],
                "info": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[Tuple[str, int]]"
                ],
                "limit": [
                    "str",
                    "Optional[str]",
                    "Set[int]",
                    "Iterable[str]",
                    "int"
                ],
                "offset": [
                    "str",
                    "Optional[str]",
                    "Set[int]",
                    "Iterable[str]",
                    "int"
                ],
                "eip_id": [
                    "str",
                    "Optional[str]",
                    "Set[int]",
                    "Iterable[str]",
                    "int"
                ],
                "search": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Query.resolve_errors": {
            "name": "resolve_errors",
            "location": 174,
            "return": [
                "dict",
                "Dict[str, bool]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "tuple"
                ],
                "info": [
                    "bool",
                    "tuple"
                ]
            }
        },
        "Query.resolve_stats": {
            "name": "resolve_stats",
            "location": 178,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "_": [
                    "bool"
                ],
                "info": [
                    "bool"
                ]
            }
        },
        "Query.resolve_tags": {
            "name": "resolve_tags",
            "location": 186,
            "return": [
                "Optional[AbstractSet[str]]",
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "_": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]",
                    "bool",
                    "list"
                ],
                "info": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]",
                    "bool",
                    "list"
                ],
                "eip_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Query.resolve_categories": {
            "name": "resolve_categories",
            "location": 192,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "_": [
                    "bool"
                ],
                "info": [
                    "bool"
                ]
            }
        },
        "Query.resolve_statuses": {
            "name": "resolve_statuses",
            "location": 195,
            "return": [
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "_": [
                    "bool"
                ],
                "info": [
                    "bool"
                ]
            }
        }
    },
    "eips.exposed-master/ops/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/ops/alembic/versions/3c301f386faa_create_tag_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/ops/alembic/versions/4a09f47e77ff_create_eip_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/ops/alembic/versions/4b68d97ca7d4_add_error_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/ops/alembic/versions/7857e9131ddb_create_commit_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/ops/alembic/versions/9c40cd3c04d8_add_author_to_commit_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "eips.exposed-master/ops/alembic/versions/e8a8b2096cfe_create_fti.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
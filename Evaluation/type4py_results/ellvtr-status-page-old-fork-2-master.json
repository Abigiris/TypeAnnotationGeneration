{
    "ellvtr-status-page-old-fork-2-master/backend/setup.py": {},
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/metrics_cli.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "eth_rpc": [
                    "str"
                ]
            }
        },
        "write_topology_task": {
            "name": "write_topology_task",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "pathfinding_service": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[Hashable]"
                ]
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/metrics_service.py": {
        "error_handler": {
            "name": "error_handler",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "tuple",
                    "Dict[str, Any]",
                    "model.keys.Keys",
                    "Iterable[model.info.InfoPoint]"
                ],
                "exc_info": [
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "MetricsService.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "Optional[str]",
                    "str",
                    "raiden.constants.RoutingMode",
                    "int"
                ],
                "contract_manager": [
                    "Optional[\"NetworkManager\"]"
                ],
                "registry_address": [
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "sync_start_block": [
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName"
                ]
            }
        },
        "MetricsService._setup_token_networks": {
            "name": "_setup_token_networks",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsService._run": {
            "name": "_run",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsService.stop": {
            "name": "stop",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsService.follows_token_network": {
            "name": "follows_token_network",
            "location": 87,
            "return": [
                "List[Callable]",
                "int",
                "str",
                "Optional[Callable[[str], bool]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "raiden_libs.types.Address",
                    "web3.contracContract",
                    "web3.Web3",
                    "raiden.utils.TokenAddress",
                    "str",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "MetricsService._get_token_network": {
            "name": "_get_token_network",
            "location": 93,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address",
                    "int",
                    "str",
                    "Optional[str]",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "MetricsService.handle_channel_event": {
            "name": "handle_channel_event",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "telegram.utils.AsyncResult",
                    "raiden_libs.events.Event",
                    "Dict[str, Any]"
                ]
            }
        },
        "MetricsService.handle_channel_opened": {
            "name": "handle_channel_opened",
            "location": 117,
            "return": [
                "int",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "MetricsService.handle_channel_new_deposit": {
            "name": "handle_channel_new_deposit",
            "location": 139,
            "return": [
                "int",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "MetricsService.handle_channel_closed": {
            "name": "handle_channel_closed",
            "location": 162,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "List[dict]",
                    "raiden_libs.types.ChannelIdentifier"
                ]
            }
        },
        "MetricsService.handle_channel_settled": {
            "name": "handle_channel_settled",
            "location": 177,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "List[dict]",
                    "raiden_libs.types.ChannelIdentifier"
                ]
            }
        },
        "MetricsService.handle_token_network_created": {
            "name": "handle_token_network_created",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "raiden_libs.events.Event",
                    "List[dict]"
                ]
            }
        },
        "MetricsService.create_token_network_for_address": {
            "name": "create_token_network_for_address",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.ChannelID",
                    "int",
                    "raiden.utils.SecreHash",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "block_number": [
                    "int",
                    "web3.contracContract",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/__init__.py": {},
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/api/rest.py": {
        "NetworkInfoResource.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_service": [
                    "int",
                    "bool",
                    "metrics_backend.metrics_service.MetricsService",
                    "float"
                ]
            }
        },
        "NetworkInfoResource.get": {
            "name": "get",
            "location": 18,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "Optional[List[str]]",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkInfoAPI.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_service": [
                    "int",
                    "bool",
                    "metrics_backend.metrics_service.MetricsService",
                    "float"
                ]
            }
        },
        "NetworkInfoAPI.run": {
            "name": "run",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/api/__init__.py": {},
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/model/channel_view.py": {
        "ChannelView.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_id": [
                    "str",
                    "int",
                    "mypy.types.Any"
                ],
                "participant1": [
                    "str",
                    "List[str]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "Optional[str]"
                ],
                "participant2": [
                    "str",
                    "List[str]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "Optional[str]"
                ],
                "deposit": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "ChannelView.update_capacity": {
            "name": "update_capacity",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deposit": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "ChannelView.update_state": {
            "name": "update_state",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "str",
                    "Optional[Type[Any]]",
                    "Optional[T]",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "ChannelView.deposit": {
            "name": "deposit",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/model/token_network.py": {
        "TokenNetwork.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        },
        "TokenNetwork.handle_channel_opened_event": {
            "name": "handle_channel_opened_event",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "raiden_libs.types.ChannelIdentifier",
                    "metrics_backend.utils.Address",
                    "metrics_backend.utils.ChannelIdentifier"
                ],
                "participant1": [
                    "metrics_backend.utils.Address",
                    "raiden_libs.types.ChannelIdentifier",
                    "int"
                ],
                "participant2": [
                    "metrics_backend.utils.Address",
                    "raiden_libs.types.ChannelIdentifier",
                    "int"
                ]
            }
        },
        "TokenNetwork.handle_channel_new_deposit_event": {
            "name": "handle_channel_new_deposit_event",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "raiden_libs.types.ChannelIdentifier"
                ],
                "receiver": [
                    "raiden_libs.types.Address",
                    "str"
                ],
                "total_deposit": [
                    "dict",
                    "str"
                ]
            }
        },
        "TokenNetwork.handle_channel_closed_event": {
            "name": "handle_channel_closed_event",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "raiden_libs.types.ChannelIdentifier"
                ]
            }
        },
        "TokenNetwork.handle_channel_settled_event": {
            "name": "handle_channel_settled_event",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "raiden_libs.types.ChannelIdentifier"
                ]
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/model/__init__.py": {},
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/utils/blockchain_listener.py": {
        "create_channel_event_topics": {
            "name": "create_channel_event_topics",
            "location": 23,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[web3.Web3]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "create_registry_event_topics": {
            "name": "create_registry_event_topics",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "decode_event": {
            "name": "decode_event",
            "location": 37,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "abi": [
                    "int",
                    "dict",
                    "hackathon.utils.utils.ResultsMessage",
                    "Dict[str, Any]"
                ],
                "log": [
                    "logging.Logger",
                    "raiden.utils.Dict",
                    "int"
                ]
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "int",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "contract_manager": [
                    "str",
                    "Optional[bool]",
                    "Optional[bytes]",
                    "int",
                    "tuple",
                    "Tuple[str]"
                ],
                "contract_name": [
                    "str",
                    "Optional[bool]",
                    "Optional[bytes]",
                    "int",
                    "tuple",
                    "Tuple[str]"
                ],
                "contract_address": [
                    "bool",
                    "Optional[str]",
                    "Hashable"
                ],
                "topics": [
                    "bool",
                    "Optional[str]",
                    "Hashable"
                ],
                "from_block": [
                    "bool",
                    "Optional[str]",
                    "Hashable"
                ],
                "to_block": [
                    "bool",
                    "Optional[str]",
                    "Hashable"
                ]
            }
        },
        "BlockchainListener.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "int",
                    "float",
                    "Optional[Callable[[Any], None]]"
                ],
                "contract_manager": [
                    "str",
                    "bool",
                    "int"
                ],
                "contract_name": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "contract_address": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "Tuple[int]",
                    "List[str]"
                ]
            }
        },
        "BlockchainListener.add_confirmed_listener": {
            "name": "add_confirmed_listener",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "Optional[str]"
                ],
                "callback": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainListener.add_unconfirmed_listener": {
            "name": "add_unconfirmed_listener",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "Optional[str]"
                ],
                "callback": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainListener._run": {
            "name": "_run",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener.stop": {
            "name": "stop",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener.wait_sync": {
            "name": "wait_sync",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener._update": {
            "name": "_update",
            "location": 182,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener.filter_events": {
            "name": "filter_events",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filter_params": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, object]"
                ],
                "name_to_callback": [
                    "dict",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "BlockchainListener._detected_chain_reorg": {
            "name": "_detected_chain_reorg",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_block": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "Type[object]"
                ]
            }
        },
        "BlockchainListener.reset_unconfirmed_on_reorg": {
            "name": "reset_unconfirmed_on_reorg",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_block": [
                    "int",
                    "Sequence[Hashable]"
                ]
            }
        },
        "BlockchainListener.get_filter_params": {
            "name": "get_filter_params",
            "location": 343,
            "return": [
                "Optional[str]",
                "List[str]",
                "Iterable[str]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "from_block": [
                    "int",
                    "raiden.utils.Address",
                    "List[str]",
                    "raiden.utils.BlockSpecification"
                ],
                "to_block": [
                    "int",
                    "raiden.utils.Address",
                    "List[str]",
                    "raiden.utils.BlockSpecification"
                ]
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/utils/serialisation.py": {
        "_state_to_str": {
            "name": "_state_to_str",
            "location": 6,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "token_network_to_dict": {
            "name": "token_network_to_dict",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "token_network": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, List[int]]",
                    "int"
                ]
            }
        }
    },
    "ellvtr-status-page-old-fork-2-master/backend/metrics_backend/utils/__init__.py": {}
}
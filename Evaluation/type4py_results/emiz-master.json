{
    "emiz-master/setup.py": {
        "read_local_files": {
            "name": "read_local_files",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_local_files._read_single_file": {
            "name": "_read_single_file",
            "location": 65,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "emiz-master/emiz/dummy_miz.py": {},
    "emiz-master/emiz/edit_miz.py": {
        "edit_miz": {
            "name": "edit_miz",
            "location": 19,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "infile": [
                    "int",
                    "bool",
                    "str"
                ],
                "outfile": [
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "metar": [
                    "str",
                    "float",
                    "int"
                ],
                "time": [
                    "str",
                    "int",
                    "float"
                ],
                "min_wind": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Union[int, float]"
                ],
                "max_wind": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Union[int, float]"
                ]
            }
        }
    },
    "emiz-master/emiz/mission.py": {
        "BaseMissionObject.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "dict",
                    "bool",
                    "int"
                ],
                "l10n": [
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "BaseMissionObject.get_country_by_name": {
            "name": "get_country_by_name",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "country_name": [
                    "str"
                ]
            }
        },
        "BaseMissionObject.get_country_by_id": {
            "name": "get_country_by_id",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "country_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseMissionObject.get_groups_from_category": {
            "name": "get_groups_from_category",
            "location": 89,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "BaseMissionObject.get_units_from_category": {
            "name": "get_units_from_category",
            "location": 103,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseMissionObject.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 117,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "BaseMissionObject.get_clients_groups": {
            "name": "get_clients_groups",
            "location": 133,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.get_group_by_name": {
            "name": "get_group_by_name",
            "location": 144,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str"
                ]
            }
        },
        "BaseMissionObject.get_unit_by_name": {
            "name": "get_unit_by_name",
            "location": 160,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "unit_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseMissionObject.get_unit_by_id": {
            "name": "get_unit_by_id",
            "location": 176,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "unit_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[Any]"
                ]
            }
        },
        "BaseMissionObject.units": {
            "name": "units",
            "location": 193,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.groups": {
            "name": "groups",
            "location": 205,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.next_group_id": {
            "name": "next_group_id",
            "location": 217,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.next_unit_id": {
            "name": "next_unit_id",
            "location": 231,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.coalitions": {
            "name": "coalitions",
            "location": 245,
            "return": [
                "typing.Iterator['Coalition']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.countries": {
            "name": "countries",
            "location": 254,
            "return": [
                "typing.Iterator['Country']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject._section_date": {
            "name": "_section_date",
            "location": 264,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.day": {
            "name": "day",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseMissionObject.month": {
            "name": "month",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        },
        "BaseMissionObject.year": {
            "name": "year",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        },
        "BaseMissionObject.mission_start_time": {
            "name": "mission_start_time",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseMissionObject._start_time_as_string": {
            "name": "_start_time_as_string",
            "location": 320,
            "return": [
                "Tuple[float, float]",
                "str",
                "bool"
            ],
            "arguments": {
                "start_time": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BaseMissionObject._start_date_as_string": {
            "name": "_start_date_as_string",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {
                "day": [
                    "int",
                    "str",
                    "bool"
                ],
                "month": [
                    "int",
                    "str",
                    "bool"
                ],
                "year": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseMissionObject._start_datetime_as_string": {
            "name": "_start_datetime_as_string",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "startime": [
                    "str",
                    "float"
                ]
            }
        },
        "BaseMissionObject.mission_start_time_as_string": {
            "name": "mission_start_time_as_string",
            "location": 331,
            "return": [
                "str",
                "int",
                "Optional[Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.mission_start_date_as_string": {
            "name": "mission_start_date_as_string",
            "location": 338,
            "return": [
                "str",
                "bool",
                "Optional[List[Any]]",
                "Type[T]",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.mission_start_datetime_as_string": {
            "name": "mission_start_datetime_as_string",
            "location": 345,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject._sortie_name_key": {
            "name": "_sortie_name_key",
            "location": 352,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.sortie_name": {
            "name": "sortie_name",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "AnyStr"
                ]
            }
        },
        "Mission.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "Optional[Any]",
                    "Optional[float]",
                    "bool",
                    "float"
                ]
            }
        },
        "Mission.__repr__": {
            "name": "__repr__",
            "location": 421,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.blue_coa": {
            "name": "blue_coa",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.red_coa": {
            "name": "red_coa",
            "location": 432,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.farps": {
            "name": "farps",
            "location": 438,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.__init__": {
            "name": "__init__",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [],
                "ln10": [],
                "coa_color": [
                    "str",
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "bytes",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Coalition.__repr__": {
            "name": "__repr__",
            "location": 459,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.__eq__": {
            "name": "__eq__",
            "location": 462,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[Dict[str, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Coalition._section_coalition": {
            "name": "_section_coalition",
            "location": 468,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition._section_bullseye": {
            "name": "_section_bullseye",
            "location": 472,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.bullseye_x": {
            "name": "bullseye_x",
            "location": 476,
            "return": [
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.bullseye_y": {
            "name": "bullseye_y",
            "location": 483,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.bullseye_position": {
            "name": "bullseye_position",
            "location": 490,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition._section_nav_points": {
            "name": "_section_nav_points",
            "location": 497,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.coalition_name": {
            "name": "coalition_name",
            "location": 501,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition._section_country": {
            "name": "_section_country",
            "location": 508,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.countries": {
            "name": "countries",
            "location": 512,
            "return": [
                "typing.Iterator['Country']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.get_country_by_name": {
            "name": "get_country_by_name",
            "location": 524,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "country_name": [
                    "str"
                ]
            }
        },
        "Coalition.get_country_by_id": {
            "name": "get_country_by_id",
            "location": 543,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "country_id": [
                    "bytes",
                    "str",
                    "Set[str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Coalition.groups": {
            "name": "groups",
            "location": 563,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.statics": {
            "name": "statics",
            "location": 574,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.farps": {
            "name": "farps",
            "location": 585,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.get_groups_from_category": {
            "name": "get_groups_from_category",
            "location": 594,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "Coalition.get_units_from_category": {
            "name": "get_units_from_category",
            "location": 607,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "dict"
                ]
            }
        },
        "Coalition.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 620,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Trig.__init__": {
            "name": "__init__",
            "location": 641,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Trig._section_trig": {
            "name": "_section_trig",
            "location": 645,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Result._section_result": {
            "name": "_section_result",
            "location": 658,
            "return": [
                "Dict[str, bool]",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.__init__": {
            "name": "__init__",
            "location": 668,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GroundControl.__repr__": {
            "name": "__repr__",
            "location": 671,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl._section_ground_control": {
            "name": "_section_ground_control",
            "location": 675,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl._section_ground_control_roles": {
            "name": "_section_ground_control_roles",
            "location": 679,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.pilots_control_vehicles": {
            "name": "pilots_control_vehicles",
            "location": 690,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl._section_artillery_commander": {
            "name": "_section_artillery_commander",
            "location": 695,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.artillery_commander_red": {
            "name": "artillery_commander_red",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl.instructor_blue": {
            "name": "instructor_blue",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl.instructor_red": {
            "name": "instructor_red",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl._section_observer": {
            "name": "_section_observer",
            "location": 735,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.observer_blue": {
            "name": "observer_blue",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl.observer_red": {
            "name": "observer_red",
            "location": 758,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl._section_forward_observer": {
            "name": "_section_forward_observer",
            "location": 763,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.forward_observer_blue": {
            "name": "forward_observer_blue",
            "location": 774,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl.forward_observer_red": {
            "name": "forward_observer_red",
            "location": 786,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl.artillery_commander_blue": {
            "name": "artillery_commander_blue",
            "location": 798,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl._section_instructor": {
            "name": "_section_instructor",
            "location": 803,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.__init__": {
            "name": "__init__",
            "location": 858,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Weather.__repr__": {
            "name": "__repr__",
            "location": 861,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.__eq__": {
            "name": "__eq__",
            "location": 864,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[Dict[str, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Weather.get_season_code_from_name": {
            "name": "get_season_code_from_name",
            "location": 869,
            "return": [
                "bool",
                "str",
                "type",
                "int"
            ],
            "arguments": {
                "self": [],
                "season_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Weather._section_wind_at_ground_level": {
            "name": "_section_wind_at_ground_level",
            "location": 880,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.turbulence_at_ground_level": {
            "name": "turbulence_at_ground_level",
            "location": 891,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.wind_at_ground_level_speed": {
            "name": "wind_at_ground_level_speed",
            "location": 903,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bool",
                    "T",
                    "bytes"
                ]
            }
        },
        "Weather._section_fog": {
            "name": "_section_fog",
            "location": 908,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.fog_thickness": {
            "name": "fog_thickness",
            "location": 919,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.fog_visibility": {
            "name": "fog_visibility",
            "location": 931,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.fog_enabled": {
            "name": "fog_enabled",
            "location": 943,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather._section_visibility": {
            "name": "_section_visibility",
            "location": 948,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.visibility": {
            "name": "visibility",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.precipitations": {
            "name": "precipitations",
            "location": 971,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "Weather.wind_at8000_dir": {
            "name": "wind_at8000_dir",
            "location": 992,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "Weather._section_weather": {
            "name": "_section_weather",
            "location": 997,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.temperature": {
            "name": "temperature",
            "location": 1008,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather._section_wind_at8000": {
            "name": "_section_wind_at8000",
            "location": 1017,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.wind_at_ground_level_dir": {
            "name": "wind_at_ground_level_dir",
            "location": 1028,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Weather._section_wind": {
            "name": "_section_wind",
            "location": 1033,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._section_wind_at2000": {
            "name": "_section_wind_at2000",
            "location": 1037,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.season_name": {
            "name": "season_name",
            "location": 1041,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.qnh": {
            "name": "qnh",
            "location": 1055,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.wind_at2000_speed": {
            "name": "wind_at2000_speed",
            "location": 1067,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.wind_at2000_dir": {
            "name": "wind_at2000_dir",
            "location": 1079,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "Weather._section_season": {
            "name": "_section_season",
            "location": 1084,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.atmosphere_type": {
            "name": "atmosphere_type",
            "location": 1095,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "type",
                    "Type",
                    "dict",
                    "Iterable",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "Weather.season_code": {
            "name": "season_code",
            "location": 1107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Set[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Weather._section_clouds": {
            "name": "_section_clouds",
            "location": 1116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.cloud_thickness": {
            "name": "cloud_thickness",
            "location": 1127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.cloud_base": {
            "name": "cloud_base",
            "location": 1139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Weather.cloud_density": {
            "name": "cloud_density",
            "location": 1151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.wind_at8000_speed": {
            "name": "wind_at8000_speed",
            "location": 1163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Country.__init__": {
            "name": "__init__",
            "location": 1174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ],
                "coa_color": [
                    "int",
                    "float",
                    "bool"
                ],
                "country_index": [
                    "str",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "Country.__repr__": {
            "name": "__repr__",
            "location": 1185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.__eq__": {
            "name": "__eq__",
            "location": 1188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[Dict[str, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Country._section_this_country": {
            "name": "_section_this_country",
            "location": 1194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.country_id": {
            "name": "country_id",
            "location": 1198,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.country_name": {
            "name": "country_name",
            "location": 1205,
            "return": [
                "Dict[str, str]",
                "str",
                "List[Callable]",
                "list",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.groups": {
            "name": "groups",
            "location": 1212,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.statics": {
            "name": "statics",
            "location": 1226,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.get_groups_from_category": {
            "name": "get_groups_from_category",
            "location": 1237,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "Country.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 1250,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Static.__init__": {
            "name": "__init__",
            "location": 1270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "str",
                    "bool"
                ],
                "l10n": [
                    "str",
                    "bool"
                ],
                "coa_color": [
                    "str",
                    "bool"
                ],
                "country_index": [
                    "str",
                    "bool"
                ],
                "static_index": [
                    "int",
                    "Tuple[float, float]",
                    "list",
                    "bool"
                ]
            }
        },
        "Static.static_id": {
            "name": "static_id",
            "location": 1282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "Static._section_static": {
            "name": "_section_static",
            "location": 1287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static._static_name_key": {
            "name": "_static_name_key",
            "location": 1291,
            "return": [
                "List[str]",
                "bool",
                "type",
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.static_name": {
            "name": "static_name",
            "location": 1302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "Static.static_category": {
            "name": "static_category",
            "location": 1307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.static_is_farp": {
            "name": "static_is_farp",
            "location": 1314,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.static_position": {
            "name": "static_position",
            "location": 1321,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 1372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ],
                "coa_color": [
                    "int",
                    "float",
                    "bool"
                ],
                "country_index": [
                    "int",
                    "float",
                    "bool"
                ],
                "group_category": [
                    "int",
                    "float"
                ],
                "group_index": [
                    "int",
                    "float"
                ]
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 1385,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__eq__": {
            "name": "__eq__",
            "location": 1389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]"
                ]
            }
        },
        "Group.group_route": {
            "name": "group_route",
            "location": 1407,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "Group._section_group": {
            "name": "_section_group",
            "location": 1412,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group._group_name_key": {
            "name": "_group_name_key",
            "location": 1416,
            "return": [
                "List[str]",
                "bool",
                "type",
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.group_name": {
            "name": "group_name",
            "location": 1427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Group.group_hidden": {
            "name": "group_hidden",
            "location": 1439,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Group.group_id": {
            "name": "group_id",
            "location": 1451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "Group.group_start_delay": {
            "name": "group_start_delay",
            "location": 1463,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "float"
                ]
            }
        },
        "Group.group_start_time": {
            "name": "group_start_time",
            "location": 1477,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Group.group_start_date_time_as_string": {
            "name": "group_start_date_time_as_string",
            "location": 1482,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]",
                "Type",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.units": {
            "name": "units",
            "location": 1489,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.first_unit": {
            "name": "first_unit",
            "location": 1503,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.group_size": {
            "name": "group_size",
            "location": 1509,
            "return": [
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "bool",
                "list",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.get_unit_by_index": {
            "name": "get_unit_by_index",
            "location": 1515,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "unit_index": [
                    "bool",
                    "int"
                ]
            }
        },
        "Group.group_is_client_group": {
            "name": "group_is_client_group",
            "location": 1533,
            "return": [
                "bool",
                "IO",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.group_start_position": {
            "name": "group_start_position",
            "location": 1545,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.__init__": {
            "name": "__init__",
            "location": 1562,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "str",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "BaseUnit.__repr__": {
            "name": "__repr__",
            "location": 1566,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit._section_unit": {
            "name": "_section_unit",
            "location": 1572,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit._unit_name_key": {
            "name": "_unit_name_key",
            "location": 1576,
            "return": [
                "List[str]",
                "bool",
                "type",
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.unit_name": {
            "name": "unit_name",
            "location": 1587,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int, float]",
                    "str"
                ]
            }
        },
        "BaseUnit.skill": {
            "name": "skill",
            "location": 1599,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseUnit.speed": {
            "name": "speed",
            "location": 1611,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseUnit.unit_type": {
            "name": "unit_type",
            "location": 1623,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "type",
                    "Type",
                    "dict",
                    "Iterable",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "BaseUnit.unit_id": {
            "name": "unit_id",
            "location": 1635,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "BaseUnit.unit_pos_x": {
            "name": "unit_pos_x",
            "location": 1647,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "BaseUnit.unit_pos_y": {
            "name": "unit_pos_y",
            "location": 1659,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseUnit.unit_position": {
            "name": "unit_position",
            "location": 1671,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BaseUnit.heading": {
            "name": "heading",
            "location": 1682,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "BaseUnit.radio_presets": {
            "name": "radio_presets",
            "location": 1687,
            "return": [
                "typing.Iterator['FlyingUnit.RadioPresets']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.has_radio_presets": {
            "name": "has_radio_presets",
            "location": 1694,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.__eq__": {
            "name": "__eq__",
            "location": 1700,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "List[Dict[str, str]]",
                    "List[float]"
                ]
            }
        },
        "FlyingUnit.__init__": {
            "name": "__init__",
            "location": 1948,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "FlyingUnit.radio_presets": {
            "name": "radio_presets",
            "location": 1952,
            "return": [
                "typing.Iterator['FlyingUnit.RadioPresets']"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.radios": {
            "name": "radios",
            "location": 1963,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.get_radio_by_name": {
            "name": "get_radio_by_name",
            "location": 1972,
            "return": [
                "Optional[int]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "radio_name": [
                    "str",
                    "tuple"
                ]
            }
        },
        "FlyingUnit.get_radio_by_number": {
            "name": "get_radio_by_number",
            "location": 1987,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "radio_number": []
            }
        },
        "FlyingUnit.livery": {
            "name": "livery",
            "location": 2011,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "FlyingUnit.onboard_num": {
            "name": "onboard_num",
            "location": 2024,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, str]",
                    "int",
                    "str",
                    "float",
                    "List[int]"
                ]
            }
        },
        "Helicopter.__init__": {
            "name": "__init__",
            "location": 2034,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Plane.__init__": {
            "name": "__init__",
            "location": 2043,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Vehicle.__init__": {
            "name": "__init__",
            "location": 2052,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Ship.__init__": {
            "name": "__init__",
            "location": 2061,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Group.Route.__init__": {
            "name": "__init__",
            "location": 1352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_group": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Group.Route.__repr__": {
            "name": "__repr__",
            "location": 1355,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.Route._section_route": {
            "name": "_section_route",
            "location": 1359,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.Route.points": {
            "name": "points",
            "location": 1363,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.__init__": {
            "name": "__init__",
            "location": 1851,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_unit": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "float"
                ],
                "radio_num": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "FlyingUnit.RadioPresets.__eq__": {
            "name": "__eq__",
            "location": 1856,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "str"
                ]
            }
        },
        "FlyingUnit.RadioPresets.radio_name": {
            "name": "radio_name",
            "location": 1868,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.channels_qty": {
            "name": "channels_qty",
            "location": 1875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.min": {
            "name": "min",
            "location": 1882,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.max": {
            "name": "max",
            "location": 1889,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets._section_radio": {
            "name": "_section_radio",
            "location": 1896,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets._section_channels": {
            "name": "_section_channels",
            "location": 1900,
            "return": [
                "Dict[str, int]",
                "int",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.channels": {
            "name": "channels",
            "location": 1904,
            "return": [
                "typing.Iterator[builtins.tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.get_frequency": {
            "name": "get_frequency",
            "location": 1911,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "datetime.date.time"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Callable",
                    "str"
                ]
            }
        },
        "FlyingUnit.RadioPresets.set_frequency": {
            "name": "set_frequency",
            "location": 1926,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int"
                ],
                "frequency": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Group.Route.Point.__init__": {
            "name": "__init__",
            "location": 1346,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_route": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Group.Route.Point.__repr__": {
            "name": "__repr__",
            "location": 1349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "emiz-master/emiz/mission_time.py": {
        "MissionTime.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "moment": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "datetime.timedelta"
                ]
            }
        },
        "MissionTime.apply_to_miz": {
            "name": "apply_to_miz",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "miz": [
                    "int",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "MissionTime.from_string": {
            "name": "from_string",
            "location": 51,
            "return": [
                "str",
                "datetime.date",
                "int",
                "datetime.timedelta"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ]
            }
        },
        "MissionTime.now": {
            "name": "now",
            "location": 80,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "datetime.timedelta",
                "Optional[datetime.timedelta]"
            ],
            "arguments": {}
        }
    },
    "emiz-master/emiz/miz.py": {},
    "emiz-master/emiz/new_miz.py": {
        "wrong_version": {
            "name": "wrong_version",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "obj_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "obj_version": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "expected_version": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "NewMiz.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_miz_file": [
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[pathlib.Path]"
                ],
                "temp_dir": [
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[pathlib.Path]"
                ],
                "keep_temp_dir": [
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[pathlib.Path]"
                ],
                "overwrite": [
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "NewMiz._missing_name": {
            "name": "_missing_name",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "NewMiz._check_resource": {
            "name": "_check_resource",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "resource_name": [
                    "str"
                ],
                "miz": [
                    "str",
                    "emiz.miz.Miz"
                ]
            }
        },
        "NewMiz._translate": {
            "name": "_translate",
            "location": 61,
            "return": [
                "int",
                "dict",
                "Optional[str]",
                "str",
                "float"
            ],
            "arguments": {
                "dict_key": [
                    "bytes",
                    "int",
                    "Union[str, bytes]"
                ],
                "miz": [
                    "emiz.miz.Miz",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "NewMiz._write_output_to_file": {
            "name": "_write_output_to_file",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "dict",
                    "str",
                    "int"
                ],
                "output": [
                    "pathlib.Path",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "NewMiz._decompose_list_dict": {
            "name": "_decompose_list_dict",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "dict_": [
                    "bool",
                    "List[str]",
                    "List[dict]",
                    "Dict[str, Any]",
                    "float"
                ],
                "output_folder": [
                    "str"
                ],
                "version": [
                    "dict",
                    "bool",
                    "str",
                    "Exception"
                ],
                "miz": [
                    "emiz.miz.Miz",
                    "str",
                    "dict"
                ]
            }
        },
        "NewMiz._decompose_dict": {
            "name": "_decompose_dict",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "dict_": [
                    "dict",
                    "bool",
                    "str"
                ],
                "key_name": [
                    "str",
                    "Optional[str]"
                ],
                "output_folder": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Optional[object]",
                    "Optional[List[str]]"
                ],
                "version": [
                    "str"
                ],
                "miz": [
                    "str",
                    "emiz.miz.Miz",
                    "Optional[str]"
                ]
            }
        },
        "NewMiz._sorted": {
            "name": "_sorted",
            "location": 149,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "dict_": [
                    "dict",
                    "Dict[str, object]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "NewMiz._recreate_dict_from_folder": {
            "name": "_recreate_dict_from_folder",
            "location": 162,
            "return": [
                "dict",
                "Iterable",
                "str",
                "list",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "folder": [
                    "dict",
                    "Optional[Container[str]]",
                    "Union[Dict, List]",
                    "Optional[str]"
                ],
                "version": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "NewMiz._recreate_dict_from_ordered_folder": {
            "name": "_recreate_dict_from_ordered_folder",
            "location": 188,
            "return": [
                "dict",
                "Iterable",
                "str",
                "list",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "TextIO"
                ],
                "version": [
                    "str",
                    "bool",
                    "Union[Dict[str, Any], List[Any]]",
                    "int"
                ]
            }
        },
        "NewMiz._recreate_dict_from_file": {
            "name": "_recreate_dict_from_file",
            "location": 211,
            "return": [
                "str",
                "List[str]",
                "bool",
                "dict",
                "pathlib.Path",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "bytes",
                    "Exception",
                    "int",
                    "Dict[int, Set[str]]"
                ],
                "version": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "NewMiz._get_subfolders": {
            "name": "_get_subfolders",
            "location": 237,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "output_folder": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bytes"
                ]
            }
        },
        "NewMiz._wipe_folders": {
            "name": "_wipe_folders",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "NewMiz._reorder_warehouses": {
            "name": "_reorder_warehouses",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "assets_folder": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "type"
                ]
            }
        },
        "NewMiz.decompose": {
            "name": "decompose",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "miz_file": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str",
                    "List[pathlib.Path]",
                    "paradigm.catalog.Path"
                ],
                "output_folder": [
                    "pathlib.Path",
                    "str",
                    "paradigm.catalog.Path",
                    "Optional[path.Path]"
                ]
            }
        },
        "NewMiz.recompose": {
            "name": "recompose",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "src": [
                    "pathlib.Path",
                    "str",
                    "Optional[Union[str, pathlib.Path]]",
                    "List[str]",
                    "bool"
                ],
                "target_file": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "emiz-master/emiz/parking_spots.py": {
        "clear_farps": {
            "name": "clear_farps",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "add_farp": {
            "name": "add_farp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "farp": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "unit_pos_to_spot": {
            "name": "unit_pos_to_spot",
            "location": 39,
            "return": [
                "str",
                "bool",
                "List[Dict[str, str]]",
                "list",
                "Tuple[Sequence]"
            ],
            "arguments": {
                "unit_pos": [
                    "float",
                    "int",
                    "Union[bool, None]",
                    "str"
                ]
            }
        }
    },
    "emiz-master/emiz/parse_parking_spots.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "miz_path": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/emiz/sltp.py": {
        "BaseSLTPError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTPParsingError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTPEmptyObjectError.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.decode": {
            "name": "decode",
            "location": 62,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SLTP.encode": {
            "name": "encode",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "qualifier": [
                    "str"
                ]
            }
        },
        "SLTP.__encode": {
            "name": "__encode",
            "location": 120,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict"
                ],
                "dict_name": [
                    "Optional[str]",
                    "str",
                    "type"
                ]
            }
        },
        "SLTP.__get_context": {
            "name": "__get_context",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.white": {
            "name": "white",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.next_chr": {
            "name": "next_chr",
            "location": 185,
            "return": [
                "Optional[str]",
                "tuple",
                "Optional[float]",
                "Dict[str, Any]",
                "Union[str, None]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.value": {
            "name": "value",
            "location": 194,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.string": {
            "name": "string",
            "location": 213,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "end": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "SLTP.object": {
            "name": "object",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.word": {
            "name": "word",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.number": {
            "name": "number",
            "location": 309,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.digit": {
            "name": "digit",
            "location": 345,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.hex": {
            "name": "hex",
            "location": 353,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.number.next_digit": {
            "name": "next_digit",
            "location": 311,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "err": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/emiz/validator.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Callable]",
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Union[str, int]",
                    "Dict[str, Any]"
                ],
                "param_name": [
                    "str",
                    "int",
                    "Callable[[], Any]"
                ],
                "exc": [
                    "Optional[bool]",
                    "Optional[str]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "str"
                ],
                "logger": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Validator.error": {
            "name": "error",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_msg": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "emiz-master/emiz/_parking_spots.py": {},
    "emiz-master/emiz/__init__.py": {},
    "emiz-master/emiz/avwx/core.py": {
        "valid_station": {
            "name": "valid_station",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "station": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "uses_na_format": {
            "name": "uses_na_format",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "station": [
                    "int",
                    "type",
                    "str"
                ]
            }
        },
        "is_unknown": {
            "name": "is_unknown",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Sequence[T]",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "unpack_fraction": {
            "name": "unpack_fraction",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str"
                ]
            }
        },
        "remove_leading_zeros": {
            "name": "remove_leading_zeros",
            "location": 73,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "dict",
                "str"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "spoken_number": {
            "name": "spoken_number",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "str",
                    "Optional[str]",
                    "Union[None, str, List[str]]",
                    "datetime.timezone"
                ]
            }
        },
        "make_number": {
            "name": "make_number",
            "location": 104,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "num": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "repr_": [
                    "Optional[int]",
                    "int",
                    "Union[int, None]"
                ],
                "speak": [
                    "int",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "find_first_in_list": {
            "name": "find_first_in_list",
            "location": 128,
            "return": [
                "float",
                "str",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "str_list": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_remarks": {
            "name": "get_remarks",
            "location": 141,
            "return": [
                "Callable",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_taf_remarks": {
            "name": "get_taf_remarks",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "list",
                    "List[int]",
                    "List[str]",
                    "Tuple[int, int]",
                    "Tuple[int]"
                ]
            }
        },
        "sanitize_report_string": {
            "name": "sanitize_report_string",
            "location": 180,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "sanitize_line": {
            "name": "sanitize_line",
            "location": 222,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "txt": [
                    "Optional[Tuple[str, ...]]",
                    "int",
                    "Dict[str, Any]",
                    "Iterable[Type]",
                    "Mapping[str, str]"
                ]
            }
        },
        "extra_space_exists": {
            "name": "extra_space_exists",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "str1": [
                    "str",
                    "List[str]",
                    "Tuple[str, str, int]",
                    "int",
                    "T"
                ],
                "str2": [
                    "str",
                    "int"
                ]
            }
        },
        "sanitize_report_list": {
            "name": "sanitize_report_list",
            "location": 289,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "Sequence[int]",
                "str"
            ],
            "arguments": {
                "wxdata": [
                    "Set[int]"
                ],
                "remove_clr_and_skc": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        },
        "get_altimeter": {
            "name": "get_altimeter",
            "location": 354,
            "return": [
                "Optional[str]",
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "wxdata": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "units": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Dict]"
                ],
                "version": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "get_taf_alt_ice_turb": {
            "name": "get_taf_alt_ice_turb",
            "location": 406,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "wxdata": [
                    "Pattern",
                    "int",
                    "Dict[str, List[str]]",
                    "bool"
                ]
            }
        },
        "is_possible_temp": {
            "name": "is_possible_temp",
            "location": 423,
            "return": [
                "bool"
            ],
            "arguments": {
                "temp": [
                    "str",
                    "int"
                ]
            }
        },
        "get_temp_and_dew": {
            "name": "get_temp_and_dew",
            "location": 433,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "wxdata": [
                    "Optional[str]"
                ]
            }
        },
        "get_station_and_time": {
            "name": "get_station_and_time",
            "location": 461,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "wxdata": [
                    "str",
                    "bool",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_wind": {
            "name": "get_wind",
            "location": 477,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "wxdata": [
                    "list",
                    "List[int]",
                    "int"
                ],
                "units": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_visibility": {
            "name": "get_visibility",
            "location": 529,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "wxdata": [
                    "int",
                    "datetime.datetime",
                    "Callable[[int], None]",
                    "List[Tuple[int, int, int]]"
                ],
                "units": [
                    "str",
                    "bool"
                ]
            }
        },
        "starts_new_line": {
            "name": "starts_new_line",
            "location": 570,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "item": [
                    "str"
                ]
            }
        },
        "split_taf": {
            "name": "split_taf",
            "location": 584,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "get_type_and_times": {
            "name": "get_type_and_times",
            "location": 600,
            "return": [
                "str"
            ],
            "arguments": {
                "wxdata": []
            }
        },
        "_is_tempo_or_prob": {
            "name": "_is_tempo_or_prob",
            "location": 633,
            "return": [
                "bool"
            ],
            "arguments": {
                "report_type": [
                    "str",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "_get_next_time": {
            "name": "_get_next_time",
            "location": 644,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "int"
                ],
                "target": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "find_missing_taf_times": {
            "name": "find_missing_taf_times",
            "location": 654,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "lines": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[str]"
                ],
                "start": [
                    "int",
                    "str",
                    "Tuple[int, int, int, int]",
                    "Optional[Tuple[int, int]]"
                ],
                "end": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "get_temp_min_and_max": {
            "name": "get_temp_min_and_max",
            "location": 682,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "wxlist": [
                    "float",
                    "Optional[list]"
                ]
            }
        },
        "_get_digit_list": {
            "name": "_get_digit_list",
            "location": 710,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "alist": [
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[List[Any]]",
                    "Tuple[int]",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]",
                    "List[list]",
                    "list",
                    "Callable"
                ],
                "from_index": [
                    "List[List[Any]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "Tuple[int]",
                    "Callable",
                    "List[list]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "get_oceania_temp_and_alt": {
            "name": "get_oceania_temp_and_alt",
            "location": 722,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "wxlist": [
                    "list",
                    "dict",
                    "int"
                ]
            }
        },
        "sanitize_cloud": {
            "name": "sanitize_cloud",
            "location": 734,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cloud": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "split_cloud": {
            "name": "split_cloud",
            "location": 748,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "cloud": [
                    "str"
                ]
            }
        },
        "make_cloud": {
            "name": "make_cloud",
            "location": 774,
            "return": [
                "bool",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "cloud": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_clouds": {
            "name": "get_clouds",
            "location": 783,
            "return": [
                "str"
            ],
            "arguments": {
                "wxdata": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "tuple"
                ]
            }
        },
        "get_flight_rules": {
            "name": "get_flight_rules",
            "location": 795,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "vis": [
                    "str"
                ],
                "ceiling": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_taf_flight_rules": {
            "name": "get_taf_flight_rules",
            "location": 827,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "get_ceiling": {
            "name": "get_ceiling",
            "location": 849,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "clouds": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 865,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "datetime.date",
                    "List[int]",
                    "datetime.datetime.datetime",
                    "List[datetime.date]",
                    "list",
                    "str"
                ],
                "hour_threshold": [
                    "str",
                    "int",
                    "datetime.date"
                ]
            }
        },
        "make_timestamp": {
            "name": "make_timestamp",
            "location": 892,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "emiz-master/emiz/avwx/exceptions.py": {},
    "emiz-master/emiz/avwx/metar.py": {
        "fetch": {
            "name": "fetch",
            "location": 13,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "station": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "station": [
                    "str"
                ],
                "txt": [
                    "str"
                ]
            }
        },
        "parse_na": {
            "name": "parse_na",
            "location": 31,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "txt": [
                    "List[graphx.core.entities.Edge]"
                ]
            }
        },
        "parse_in": {
            "name": "parse_in",
            "location": 54,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "List[graphx.core.entities.Edge]",
                    "int"
                ]
            }
        }
    },
    "emiz-master/emiz/avwx/remarks.py": {
        "_tdec": {
            "name": "_tdec",
            "location": 11,
            "return": [],
            "arguments": {
                "code": [],
                "unit": []
            }
        },
        "temp_minmax": {
            "name": "temp_minmax",
            "location": 23,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "pressure_tendency": {
            "name": "pressure_tendency",
            "location": 31,
            "return": [],
            "arguments": {
                "code": [],
                "unit": []
            }
        },
        "precip_36": {
            "name": "precip_36",
            "location": 42,
            "return": [],
            "arguments": {
                "code": [],
                "unit": []
            }
        },
        "precip_24": {
            "name": "precip_24",
            "location": 50,
            "return": [],
            "arguments": {
                "code": [],
                "unit": []
            }
        },
        "sunshine_duration": {
            "name": "sunshine_duration",
            "location": 57,
            "return": [],
            "arguments": {
                "code": [],
                "unit": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 74,
            "return": [],
            "arguments": {
                "rmk": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 86,
            "return": [],
            "arguments": {
                "remarks": []
            }
        }
    },
    "emiz-master/emiz/avwx/service.py": {
        "get_service": {
            "name": "get_service",
            "location": 143,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "station": [
                    "str"
                ]
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_type": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Service.make_err": {
            "name": "make_err",
            "location": 27,
            "return": [
                "int",
                "List[str]",
                "bytes",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "int",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Optional[Callable]",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "bool",
                    "Tuple[str, str]"
                ]
            }
        },
        "Service._extract": {
            "name": "_extract",
            "location": 34,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "station": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Service.fetch": {
            "name": "fetch",
            "location": 40,
            "return": [
                "bool",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "station": [
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "Tuple[str, int]",
                    "botocore.exceptions.ClientError",
                    "float"
                ]
            }
        },
        "NOAA._extract": {
            "name": "_extract",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "station": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AMO._extract": {
            "name": "_extract",
            "location": 100,
            "return": [
                "bool",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "station": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MAC._extract": {
            "name": "_extract",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "station": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "emiz-master/emiz/avwx/speech.py": {
        "ordinal": {
            "name": "ordinal",
            "location": 13,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "_number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "wind": {
            "name": "wind",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "direction": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "speed": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "gust": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "vardir": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "unit": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "temperature": {
            "name": "temperature",
            "location": 34,
            "return": [
                "str",
                "bytes",
                "Union[int, List[int]]"
            ],
            "arguments": {
                "header": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]"
                ],
                "temp": [
                    "Dict[str, float]",
                    "Sequence[int]"
                ],
                "unit": [
                    "List[List[int]]",
                    "List[str]"
                ]
            }
        },
        "visibility": {
            "name": "visibility",
            "location": 46,
            "return": [
                "str",
                "core.Message"
            ],
            "arguments": {
                "vis": [
                    "structs.Number",
                    "Optional[complex]"
                ],
                "unit": [
                    "int",
                    "dict",
                    "blurr.core.aggregate.AggregateSchema"
                ]
            }
        },
        "altimeter": {
            "name": "altimeter",
            "location": 72,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "alt": [
                    "structs.Number",
                    "str"
                ],
                "unit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "other": {
            "name": "other",
            "location": 86,
            "return": [
                "str",
                "int",
                "deque"
            ],
            "arguments": {
                "wxcodes": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "type_and_times": {
            "name": "type_and_times",
            "location": 99,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "list",
                    "int",
                    "bool"
                ],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "probability": [
                    "structs.Number",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[Sequence[T]]"
                ]
            }
        },
        "wind_shear": {
            "name": "wind_shear",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shear": [
                    "str",
                    "bytearray",
                    "bool",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "unit_alt": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "unit_wind": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "metar": {
            "name": "metar",
            "location": 126,
            "return": [
                "str",
                "int",
                "Optional[dict]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "structs.MetarData"
                ],
                "units": [
                    "structs.Units",
                    "T",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "taf_line": {
            "name": "taf_line",
            "location": 150,
            "return": [
                "List[str]",
                "str",
                "Optional[Union[str, Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int",
                    "float"
                ],
                "units": [
                    "structs.Units",
                    "str",
                    "bool",
                    "Union[list, str]",
                    "Dict[str, Callable[[str], Any]]"
                ]
            }
        },
        "taf": {
            "name": "taf",
            "location": 176,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "units": [
                    "structs.Units",
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "emiz-master/emiz/avwx/static.py": {},
    "emiz-master/emiz/avwx/structs.py": {},
    "emiz-master/emiz/avwx/summary.py": {
        "metar": {
            "name": "metar",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trans": [
                    "structs.MetarTrans",
                    "float",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "taf": {
            "name": "taf",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trans": [
                    "structs.MetarTrans",
                    "float",
                    "Sequence['cirq.Qid']"
                ]
            }
        }
    },
    "emiz-master/emiz/avwx/taf.py": {
        "fetch": {
            "name": "fetch",
            "location": 12,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "station": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "station": [
                    "bool",
                    "int",
                    "str"
                ],
                "txt": [
                    "str"
                ]
            }
        },
        "parse_lines": {
            "name": "parse_lines",
            "location": 73,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "lines": [
                    "str"
                ],
                "units": [
                    "str",
                    "list",
                    "List[str]",
                    "int"
                ],
                "use_na": [
                    "str",
                    "list",
                    "List[str]",
                    "int"
                ]
            }
        },
        "parse_na_line": {
            "name": "parse_na_line",
            "location": 105,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "bytes"
                ],
                "units": [
                    "int",
                    "str"
                ]
            }
        },
        "parse_in_line": {
            "name": "parse_in_line",
            "location": 122,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Tuple[str]",
                    "Optional[Dict]"
                ],
                "units": [
                    "int"
                ]
            }
        }
    },
    "emiz-master/emiz/avwx/translate.py": {
        "get_cardinal_direction": {
            "name": "get_cardinal_direction",
            "location": 15,
            "return": [],
            "arguments": {
                "direction": []
            }
        },
        "wind": {
            "name": "wind",
            "location": 77,
            "return": [],
            "arguments": {
                "direction": [],
                "speed": [],
                "gust": [],
                "vardir": [],
                "unit": [],
                "cardinals": [],
                "spoken": []
            }
        },
        "visibility": {
            "name": "visibility",
            "location": 122,
            "return": [],
            "arguments": {
                "vis": [],
                "unit": []
            }
        },
        "temperature": {
            "name": "temperature",
            "location": 144,
            "return": [],
            "arguments": {
                "temp": [],
                "unit": []
            }
        },
        "altimeter": {
            "name": "altimeter",
            "location": 164,
            "return": [],
            "arguments": {
                "alt": [],
                "unit": []
            }
        },
        "clouds": {
            "name": "clouds",
            "location": 183,
            "return": [],
            "arguments": {
                "clds": [],
                "unit": []
            }
        },
        "wxcode": {
            "name": "wxcode",
            "location": 206,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "other_list": {
            "name": "other_list",
            "location": 233,
            "return": [],
            "arguments": {
                "wxcodes": []
            }
        },
        "wind_shear": {
            "name": "wind_shear",
            "location": 242,
            "return": [],
            "arguments": {
                "shear": [],
                "unit_alt": [],
                "unit_wind": [],
                "spoken": []
            }
        },
        "turb_ice": {
            "name": "turb_ice",
            "location": 255,
            "return": [],
            "arguments": {
                "turbice": [],
                "unit": []
            }
        },
        "min_max_temp": {
            "name": "min_max_temp",
            "location": 287,
            "return": [],
            "arguments": {
                "temp": [],
                "unit": []
            }
        },
        "shared": {
            "name": "shared",
            "location": 308,
            "return": [],
            "arguments": {
                "wxdata": [],
                "units": []
            }
        },
        "metar": {
            "name": "metar",
            "location": 320,
            "return": [],
            "arguments": {
                "wxdata": [],
                "units": []
            }
        },
        "taf": {
            "name": "taf",
            "location": 336,
            "return": [],
            "arguments": {
                "wxdata": [],
                "units": []
            }
        }
    },
    "emiz-master/emiz/avwx/__init__.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "station": [
                    "blurr.core.record.Record",
                    "bool",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "Report.update": {
            "name": "update",
            "location": 76,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Metar.update": {
            "name": "update",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Metar.summary": {
            "name": "summary",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metar.speech": {
            "name": "speech",
            "location": 115,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taf.update": {
            "name": "update",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Taf.summary": {
            "name": "summary",
            "location": 148,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taf.speech": {
            "name": "speech",
            "location": 157,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "emiz-master/emiz/weather/utils.py": {
        "hpa_to_mmhg": {
            "name": "hpa_to_mmhg",
            "location": 12,
            "return": [],
            "arguments": {
                "pressure": []
            }
        },
        "reverse_direction": {
            "name": "reverse_direction",
            "location": 24,
            "return": [],
            "arguments": {
                "heading": []
            }
        }
    },
    "emiz-master/emiz/weather/__init__.py": {},
    "emiz-master/emiz/weather/avwx/avwx.py": {
        "AVWX.metar_to_speech": {
            "name": "metar_to_speech",
            "location": 22,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "metar": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/avwx/avwx_result.py": {
        "_AVWXProp.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "_AVWXProp.__get__": {
            "name": "__get__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "_": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AVWXResult.default_factory": {
            "name": "default_factory",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "AVWXResult.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.altimeter": {
            "name": "altimeter",
            "location": 45,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.cloudlist": {
            "name": "cloudlist",
            "location": 50,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.dewpoint": {
            "name": "dewpoint",
            "location": 55,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.flightrules": {
            "name": "flightrules",
            "location": 60,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.info": {
            "name": "info",
            "location": 65,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.meta": {
            "name": "meta",
            "location": 70,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.otherlist": {
            "name": "otherlist",
            "location": 75,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.rawreport": {
            "name": "rawreport",
            "location": 80,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.remarks": {
            "name": "remarks",
            "location": 85,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.remarksinfo": {
            "name": "remarksinfo",
            "location": 90,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.runwayvislist": {
            "name": "runwayvislist",
            "location": 95,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.speech": {
            "name": "speech",
            "location": 100,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.station": {
            "name": "station",
            "location": 105,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.summary": {
            "name": "summary",
            "location": 110,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.temperature": {
            "name": "temperature",
            "location": 115,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.time": {
            "name": "time",
            "location": 120,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.translations": {
            "name": "translations",
            "location": 125,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.units": {
            "name": "units",
            "location": 130,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.visibility": {
            "name": "visibility",
            "location": 135,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.winddirection": {
            "name": "winddirection",
            "location": 140,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.windgust": {
            "name": "windgust",
            "location": 145,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.windspeed": {
            "name": "windspeed",
            "location": 150,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVWXResult.windvariabledir": {
            "name": "windvariabledir",
            "location": 155,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "emiz-master/emiz/weather/avwx/exc.py": {
        "StationNotFound.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/avwx/__init__.py": {},
    "emiz-master/emiz/weather/awc/awc.py": {
        "AWC._validate_icao": {
            "name": "_validate_icao",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "icao": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AWC._query": {
            "name": "_query",
            "location": 34,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "AWC.query_icao": {
            "name": "query_icao",
            "location": 48,
            "return": [
                "str",
                "Dict[str, str]",
                "OrderedDict",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "dict"
            ],
            "arguments": {
                "icao": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/awc/awc_result.py": {
        "AWCResult.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "raw_csv_data": [
                    "List[str]",
                    "Optional[int]",
                    "Optional[List[Any]]",
                    "bytes"
                ]
            }
        },
        "AWCResult._parsed_metar": {
            "name": "_parsed_metar",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWCResult.station_id": {
            "name": "station_id",
            "location": 46,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWCResult.flight_category": {
            "name": "flight_category",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWCResult.raw_metar": {
            "name": "raw_metar",
            "location": 202,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "emiz-master/emiz/weather/awc/exc.py": {
        "AWCRequestFailed.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "bool",
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "NoMetarForStation.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/awc/__init__.py": {},
    "emiz-master/emiz/weather/custom_metar/custom_metar.py": {
        "CustomMetar.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metar_code": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "month": [
                    "int",
                    "bool",
                    "Union[str, int]",
                    "str"
                ],
                "year": [
                    "int",
                    "bool",
                    "Union[str, int]",
                    "str"
                ],
                "utc_delta": [
                    "int",
                    "bool",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "CustomMetar.get_metar": {
            "name": "get_metar",
            "location": 27,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Dict]",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "metar": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "CustomMetar.string": {
            "name": "string",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomMetar._handlePressure": {
            "name": "_handlePressure",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Callable[[Any], T]"
                ]
            }
        },
        "CustomMetar._handleSealvlPressRemark": {
            "name": "_handleSealvlPressRemark",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/custom_metar/custom_metar_pressure.py": {
        "CustomPressure.value": {
            "name": "value",
            "location": 16,
            "return": [
                "bool",
                "float",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "Optional[str]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "CustomPressure.string": {
            "name": "string",
            "location": 41,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "dict",
                    "int",
                    "str",
                    "Mapping"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/custom_metar/__init__.py": {},
    "emiz-master/emiz/weather/mission_weather/mission_weather.py": {
        "_get_season": {
            "name": "_get_season",
            "location": 41,
            "return": [],
            "arguments": {
                "_datetime": []
            }
        },
        "MissionWeather.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "metar": [],
                "min_wind": [],
                "max_wind": []
            }
        },
        "MissionWeather._random_direction": {
            "name": "_random_direction",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "MissionWeather.reverse_direction": {
            "name": "reverse_direction",
            "location": 86,
            "return": [],
            "arguments": {
                "heading": []
            }
        },
        "MissionWeather._normalize_direction": {
            "name": "_normalize_direction",
            "location": 102,
            "return": [],
            "arguments": {
                "heading": []
            }
        },
        "MissionWeather._gauss": {
            "name": "_gauss",
            "location": 119,
            "return": [],
            "arguments": {
                "mean": [],
                "sigma": []
            }
        },
        "MissionWeather._randomize_speed": {
            "name": "_randomize_speed",
            "location": 133,
            "return": [],
            "arguments": {
                "base_speed": [],
                "sigma": []
            }
        },
        "MissionWeather._randomize_direction": {
            "name": "_randomize_direction",
            "location": 154,
            "return": [],
            "arguments": {
                "base_heading": [],
                "sigma": []
            }
        },
        "MissionWeather.wind_at_ground_level_dir": {
            "name": "wind_at_ground_level_dir",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather.wind_at_ground_level_speed": {
            "name": "wind_at_ground_level_speed",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather.qnh": {
            "name": "qnh",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather.visibility": {
            "name": "visibility",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather._parse_precipitations": {
            "name": "_parse_precipitations",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather._parse_clouds": {
            "name": "_parse_clouds",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather.temperature": {
            "name": "temperature",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather.turbulence": {
            "name": "turbulence",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionWeather.apply_to_miz": {
            "name": "apply_to_miz",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "miz": []
            }
        }
    },
    "emiz-master/emiz/weather/mission_weather/__init__.py": {},
    "emiz-master/emiz/weather/mizfile/mizfile_get_metar.py": {
        "get_metar_from_mission": {
            "name": "get_metar_from_mission",
            "location": 138,
            "return": [
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "mission_file": [
                    "str"
                ],
                "icao": [
                    "str"
                ],
                "time": [
                    "str"
                ]
            }
        },
        "_MetarFromMission.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mission_file": [
                    "str",
                    "bool",
                    "int"
                ],
                "icao": [
                    "int",
                    "Iterator[int]",
                    "Tuple[int]",
                    "bool"
                ],
                "time": [
                    "bool",
                    "int",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        },
        "_MetarFromMission._set_time": {
            "name": "_set_time",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "time": [
                    "Optional[str]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_MetarFromMission._weather": {
            "name": "_weather",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._wind": {
            "name": "_wind",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._precipitations": {
            "name": "_precipitations",
            "location": 74,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._clouds": {
            "name": "_clouds",
            "location": 78,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._temperature": {
            "name": "_temperature",
            "location": 88,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._pressure": {
            "name": "_pressure",
            "location": 95,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._qualifier": {
            "name": "_qualifier",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission._visibility": {
            "name": "_visibility",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetarFromMission.metar": {
            "name": "metar",
            "location": 115,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "emiz-master/emiz/weather/mizfile/mizfile_set_metar.py": {
        "set_weather_from_metar": {
            "name": "set_weather_from_metar",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "metar": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "in_file": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "out_file": [
                    "pathlib.Path",
                    "Optional[str]",
                    "str",
                    "Optional[pathlib.Path]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "emiz-master/emiz/weather/mizfile/__init__.py": {},
    "emiz-master/emiz/weather/noaa/__init__.py": {
        "retrieve_taf": {
            "name": "retrieve_taf",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "station_icao": [
                    "str",
                    "int"
                ]
            }
        },
        "retrieve_metar": {
            "name": "retrieve_metar",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "station_icao": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "emiz-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_setup_logging": {
            "name": "_setup_logging",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_all": {
            "name": "_all",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "str",
                    "int",
                    "dict"
                ],
                "out_file": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "test_file": {
            "name": "test_file",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "test_files_folder": [
                    "str"
                ]
            }
        },
        "out_file": {
            "name": "out_file",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "test_files_folder": [
                    "str",
                    "List[int]",
                    "pathlib.Path",
                    "List[str]",
                    "int"
                ]
            }
        },
        "weather_test_file": {
            "name": "weather_test_file",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "test_files_folder": [
                    "str",
                    "pathlib.Path",
                    "List[int]",
                    "int",
                    "bool",
                    "IO"
                ]
            }
        },
        "bad_zip_file": {
            "name": "bad_zip_file",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "missing_file": {
            "name": "missing_file",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "duplicate_group_id": {
            "name": "duplicate_group_id",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "all_objects": {
            "name": "all_objects",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "large_file": {
            "name": "large_file",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "radio_file": {
            "name": "radio_file",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_files_folder": {
            "name": "test_files_folder",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "remove_out_file": {
            "name": "remove_out_file",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mission": {
            "name": "mission",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sltp_pass": {
            "name": "sltp_pass",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "sltp_diff": {
            "name": "sltp_diff",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "sltp_long": {
            "name": "sltp_long",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "sltp_fail": {
            "name": "sltp_fail",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        }
    },
    "emiz-master/test/test_edit_miz.py": {
        "test_time": {
            "name": "test_time",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "Optional[str]",
                    "str"
                ],
                "out_file": []
            }
        },
        "test_weather": {
            "name": "test_weather",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "bool"
                ],
                "out_file": [
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_no_outfile": {
            "name": "test_no_outfile",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [],
                "out_file": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "test_nothing_to_do": {
            "name": "test_nothing_to_do",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "out_file": [
                    "str"
                ]
            }
        },
        "test_metar_error": {
            "name": "test_metar_error",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "out_file": [
                    "str"
                ]
            }
        },
        "test_bad_time_string": {
            "name": "test_bad_time_string",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "out_file": [
                    "str"
                ]
            }
        },
        "test_apply_metar_failed": {
            "name": "test_apply_metar_failed",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "out_file": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_apply_time_failed": {
            "name": "test_apply_time_failed",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "out_file": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_zip_error": {
            "name": "test_zip_error",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "IO[bytes]"
                ],
                "out_file": [
                    "str",
                    "IO[bytes]"
                ]
            }
        }
    },
    "emiz-master/test/test_imports.py": {
        "patch_version": {
            "name": "patch_version",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "Callable[[T], bool]",
                    "str",
                    "dict",
                    "int",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "int"
                ]
            }
        },
        "test_imports_tests": {
            "name": "test_imports_tests",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/test/test_mission_time.py": {
        "test_from_string": {
            "name": "test_from_string",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "example_datetime": [
                    "str",
                    "Awaitable"
                ]
            }
        },
        "test_now": {
            "name": "test_now",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_apply_to_miz": {
            "name": "test_apply_to_miz",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "Optional[str]"
                ],
                "example_datetime": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "emiz-master/test/test_miz.py": {
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Optional[List[str]]",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "cls": [
                    "str",
                    "T",
                    "Exception",
                    "Container[T]"
                ]
            }
        },
        "test_unzip": {
            "name": "test_unzip",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "test_context": {
            "name": "test_context",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "emiz-master/test/test_sltp.py": {
        "_assert_same": {
            "name": "_assert_same",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "input_": [
                    "bytes",
                    "int",
                    "List[int]",
                    "str"
                ],
                "output": [
                    "Sequence[float]",
                    "str",
                    "List[str]",
                    "int",
                    "tuple",
                    "list"
                ]
            }
        },
        "_assert_different": {
            "name": "_assert_different",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "input_": [
                    "bool"
                ],
                "output": [
                    "str",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "_do_test": {
            "name": "_do_test",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "dict"
                ],
                "compare_func": [
                    "int",
                    "Optional[str]",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "test_encode_decode_files": {
            "name": "test_encode_decode_files",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_pass": [
                    "Callable"
                ]
            }
        },
        "test_encode_decode_files_long": {
            "name": "test_encode_decode_files_long",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_long": [
                    "Callable"
                ]
            }
        },
        "test_encode_decode_files_fail": {
            "name": "test_encode_decode_files_fail",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_fail": [
                    "Callable"
                ]
            }
        },
        "test_encode_decode_files_diff": {
            "name": "test_encode_decode_files_diff",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_diff": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "emiz-master/test/__init__.py": {},
    "emiz-master/test/test_mission/test_base_mission_object.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_country_by_name": {
            "name": "test_get_country_by_name",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_get_country_by_id": {
            "name": "test_get_country_by_id",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_get_groups_from_category": {
            "name": "test_get_groups_from_category",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[int, int]"
                ],
                "category": [
                    "int"
                ]
            }
        },
        "test_get_units_from_category": {
            "name": "test_get_units_from_category",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[int, int]"
                ],
                "category": [
                    "int"
                ]
            }
        },
        "test_get_group_by_id": {
            "name": "test_get_group_by_id",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Tuple[str, int]"
                ]
            }
        },
        "test_get_unit_by_id": {
            "name": "test_get_unit_by_id",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Tuple[str, int]"
                ]
            }
        },
        "test_get_clients_groups": {
            "name": "test_get_clients_groups",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int"
                ]
            }
        },
        "test_day": {
            "name": "test_day",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int",
                    "List[Tuple[str, Any]]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "test_wrong_day": {
            "name": "test_wrong_day",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "day": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_month": {
            "name": "test_month",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "int"
                ]
            }
        },
        "test_wrong_month": {
            "name": "test_wrong_month",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [],
                "month": []
            }
        },
        "test_year": {
            "name": "test_year",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int"
                ]
            }
        },
        "test_wrong_year": {
            "name": "test_wrong_year",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "year": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "emiz-master/test/test_mission/test_coalition.py": {
        "test_eq": {
            "name": "test_eq",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_statics": {
            "name": "test_statics",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_farps": {
            "name": "test_farps",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "get_unit_by_id": {
            "name": "get_unit_by_id",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "emiz-master/test/test_mission/test_country.py": {
        "test_country_generator": {
            "name": "test_country_generator",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_country_by_name": {
            "name": "test_get_country_by_name",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_get_country": {
            "name": "test_get_country",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "test_file": [
                    "str"
                ]
            }
        },
        "test_compare_country": {
            "name": "test_compare_country",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/test/test_mission/test_group.py": {
        "test_groups": {
            "name": "test_groups",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_get_groups_from_category": {
            "name": "test_get_groups_from_category",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "int"
                ],
                "all_objects": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_group_by_id": {
            "name": "test_get_group_by_id",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_group_by_name": {
            "name": "test_group_by_name",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_set_hidden": {
            "name": "test_set_hidden",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "out_file": []
            }
        },
        "test_get_unit": {
            "name": "test_get_unit",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_get_group_by_name": {
            "name": "test_get_group_by_name",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        }
    },
    "emiz-master/test/test_mission/test_large.py": {
        "test_large_decode": {
            "name": "test_large_decode",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "large_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_large_zip": {
            "name": "test_large_zip",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "large_file": [
                    "pypi2nix.path.Path",
                    "str"
                ]
            }
        }
    },
    "emiz-master/test/test_mission/test_mission.py": {
        "test_bullseye": {
            "name": "test_bullseye",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ln10": {
            "name": "test_ln10",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_name": {
            "name": "test_name",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_ground_control": {
            "name": "test_ground_control",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_objects": {
            "name": "test_objects",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "all_objects": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_coalitions_generator": {
            "name": "test_coalitions_generator",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "bool"
                ]
            }
        },
        "test_next_group_id": {
            "name": "test_next_group_id",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[str]",
                    "bytes",
                    "int",
                    "bool"
                ],
                "duplicate_group_id": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_next_unit_id": {
            "name": "test_next_unit_id",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[str]",
                    "bytes",
                    "int",
                    "bool"
                ],
                "duplicate_group_id": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_sortie_name": {
            "name": "test_sortie_name",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "bool"
                ],
                "out_file": []
            }
        },
        "test_farps": {
            "name": "test_farps",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        }
    },
    "emiz-master/test/test_mission/test_mission_weather.py": {
        "test_qnh": {
            "name": "test_qnh",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_seasons": {
            "name": "test_seasons",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str"
                ]
            }
        },
        "test_wind": {
            "name": "test_wind",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Callable"
                ]
            }
        },
        "test_turbulence": {
            "name": "test_turbulence",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "bool"
                ]
            }
        },
        "test_atmosphere_type": {
            "name": "test_atmosphere_type",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Callable"
                ]
            }
        },
        "test_fog": {
            "name": "test_fog",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_clouds": {
            "name": "test_clouds",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "test_precipitations": {
            "name": "test_precipitations",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_compare_weather": {
            "name": "test_compare_weather",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "emiz-master/test/test_mission/test_miz_file.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "int"
                ]
            }
        },
        "test_context": {
            "name": "test_context",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ]
            }
        },
        "test_unzip": {
            "name": "test_unzip",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_decode": {
            "name": "test_decode",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_zip": {
            "name": "test_zip",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "out_file": [],
                "test_file": [
                    "str"
                ]
            }
        },
        "test_is_unzipped": {
            "name": "test_is_unzipped",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_missing_file_in_miz": {
            "name": "test_missing_file_in_miz",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "missing_file": []
            }
        },
        "test_bad_zip_file": {
            "name": "test_bad_zip_file",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "bad_zip_file": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_temp_dir_cleaning": {
            "name": "test_temp_dir_cleaning",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": []
            }
        }
    },
    "emiz-master/test/test_mission/test_radios.py": {
        "test_radios": {
            "name": "test_radios",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "unit_id": [
                    "str",
                    "int"
                ],
                "unit_type": [
                    "str",
                    "List[List[str]]",
                    "Dict[str, str]"
                ],
                "radios_to_test": [
                    "Optional[bool]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "radio_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_radios_set_freq": {
            "name": "test_radios_set_freq",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "radio_file": [
                    "bool"
                ],
                "out_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_radios_equal": {
            "name": "test_radios_equal",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "radio_file": [
                    "str",
                    "bool",
                    "BinaryIO"
                ]
            }
        },
        "test_radios_generator": {
            "name": "test_radios_generator",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "radio_file": [
                    "str",
                    "bool",
                    "BinaryIO"
                ]
            }
        }
    },
    "emiz-master/test/test_mission/test_start_time.py": {
        "test_mission_start_time": {
            "name": "test_mission_start_time",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "Callable",
                    "int",
                    "str"
                ],
                "mission": []
            }
        },
        "test_wrong_mission_start_time": {
            "name": "test_wrong_mission_start_time",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "mission": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_wrong_mission_start_time_neg": {
            "name": "test_wrong_mission_start_time_neg",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "mission": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_group_start_time": {
            "name": "test_group_start_time",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "out_file": []
            }
        }
    },
    "emiz-master/test/test_mission/test_unit.py": {
        "test_units": {
            "name": "test_units",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_units_from_category": {
            "name": "test_get_units_from_category",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "int"
                ],
                "all_objects": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_unit_by_id": {
            "name": "test_get_unit_by_id",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_unit_by_name": {
            "name": "test_unit_by_name",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_get_unit_by_name": {
            "name": "test_get_unit_by_name",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_get_unit_by_id_missing": {
            "name": "test_get_unit_by_id_missing",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int"
                ]
            }
        },
        "test_get_unit_by_name_missing": {
            "name": "test_get_unit_by_name_missing",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/test/test_weather/test_metar.py": {
        "_bogus_cloud_atl_test_file": {
            "name": "_bogus_cloud_atl_test_file",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "test_files_folder": [
                    "str",
                    "bool",
                    "List[int]",
                    "IO"
                ]
            }
        },
        "_randomize_weather": {
            "name": "_randomize_weather",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_set_weather_from_icao": {
            "name": "test_set_weather_from_icao",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "icao": [
                    "str",
                    "pypi2nix.path.Path",
                    "pathlib.PosixPath"
                ],
                "weather_test_file": [
                    "pathlib.Path",
                    "Callable",
                    "path.Path"
                ],
                "out_file": [
                    "pathlib.Path",
                    "path.Path",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_set_weather_from_metar": {
            "name": "test_set_weather_from_metar",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "metar": [
                    "pathlib.Path",
                    "dict",
                    "str",
                    "int"
                ],
                "out": [
                    "Sequence[str]",
                    "Union[Dict, List]",
                    "float",
                    "dict",
                    "Dict[int, Dict[int, Any]]",
                    "List[str]",
                    "bool"
                ],
                "weather_test_file": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "out_file": [
                    "str",
                    "pathlib.Path",
                    "pathx.Path",
                    "Sequence[str]"
                ]
            }
        },
        "test_bogus_cloud_alt": {
            "name": "test_bogus_cloud_alt",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "bogus_cloud_atl_test_file": []
            }
        }
    },
    "emiz-master/test/test_weather/test_mizfile_get_metar.py": {
        "_setup": {
            "name": "_setup",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_basic_metar": {
            "name": "test_basic_metar",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "setup": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_cavok": {
            "name": "test_cavok",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "setup": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_cloud_density": {
            "name": "test_cloud_density",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "setup": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ],
                "density": [
                    "str",
                    "float"
                ]
            }
        },
        "test_no_time": {
            "name": "test_no_time",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "setup": [
                    "float",
                    "int"
                ]
            }
        },
        "test_fog": {
            "name": "test_fog",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "setup": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ],
                "fog_visibility": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_float_visibility": {
            "name": "test_float_visibility",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "test_files_folder": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "emiz-master/test/test_weather/test_mizfile_set_metar.py": {
        "test_set_metar": {
            "name": "test_set_metar",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "Callable",
                    "bool"
                ],
                "out_file": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_no_out_file": {
            "name": "test_no_out_file",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_error_when_retrieving_metar": {
            "name": "test_error_when_retrieving_metar",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "test_error_when_applying_weather_to_mission": {
            "name": "test_error_when_applying_weather_to_mission",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "out_file": [
                    "str"
                ]
            }
        }
    },
    "emiz-master/test/test_weather/test_weather.py": {
        "test_reverse_direction": {
            "name": "test_reverse_direction",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "heading": [
                    "str",
                    "float"
                ]
            }
        },
        "test_normalize_direction": {
            "name": "test_normalize_direction",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "heading": [
                    "str",
                    "float"
                ]
            }
        },
        "test_deviate_wind_speed": {
            "name": "test_deviate_wind_speed",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "base_speed": [
                    "int",
                    "bytearray",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "test_get_season": {
            "name": "test_get_season",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "date": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "datetime.datetime",
                    "list"
                ],
                "season": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    }
}
{
    "enforced_invariant_confluence-master/benchmark/create_cluster_files.py": {
        "usage": {
            "name": "usage",
            "location": 4,
            "return": [
                "str",
                "bool",
                "Tuple[str, str]",
                "float"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "enforced_invariant_confluence-master/benchmark/plot.py": {
        "load_csv": {
            "name": "load_csv",
            "location": 28,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "extract_bank_account_data": {
            "name": "extract_bank_account_data",
            "location": 34,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "partition_by_server_type": {
            "name": "partition_by_server_type",
            "location": 45,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "records": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "plot_bank_account": {
            "name": "plot_bank_account",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Tuple[str]",
                    "bool",
                    "List[List[Any]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "plot_bank_account.filter_num_servers_sort_fraction": {
            "name": "filter_num_servers_sort_fraction",
            "location": 67,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "records": [
                    "int",
                    "Optional[int]",
                    "List[Tuple[int, ...]]"
                ],
                "n": [
                    "int",
                    "Tuple[int, int]",
                    "bytes"
                ]
            }
        },
        "plot_bank_account.filter_fraction_sort_num_servers": {
            "name": "filter_fraction_sort_num_servers",
            "location": 92,
            "return": [
                "str",
                "List[int]",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "records": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "f": [
                    "Optional[Any]",
                    "Optional[Dict]",
                    "bytes",
                    "dict",
                    "Dict[str, Union[int, str]]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/examples/all_datatypes.py": {},
    "enforced_invariant_confluence-master/examples/auction.py": {},
    "enforced_invariant_confluence-master/examples/bank_deposit_and_withdraw.py": {
        "add_base_invariants": {
            "name": "add_base_invariants",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "stratum": [
                    "Optional[str]"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/examples/bank_deposit_only.py": {},
    "enforced_invariant_confluence-master/examples/forall.py": {},
    "enforced_invariant_confluence-master/examples/foreign_key.py": {},
    "enforced_invariant_confluence-master/examples/parser.py": {
        "_get_parser": {
            "name": "_get_parser",
            "location": 5,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "get_checker": {
            "name": "get_checker",
            "location": 21,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "enforced_invariant_confluence-master/examples/subsets.py": {},
    "enforced_invariant_confluence-master/examples/sum_eq.py": {},
    "enforced_invariant_confluence-master/examples/tpcc01.py": {},
    "enforced_invariant_confluence-master/examples/tpcc02.py": {},
    "enforced_invariant_confluence-master/examples/two_ints.py": {},
    "enforced_invariant_confluence-master/examples/__init__.py": {},
    "enforced_invariant_confluence-master/iconfluence/ast.py": {
        "coerce": {
            "name": "coerce",
            "location": 171,
            "return": [
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "typed_coerce": {
            "name": "typed_coerce",
            "location": 213,
            "return": [
                "Optional[str]",
                "Type",
                "Tuple[List[str], Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "list"
                ],
                "typ": [
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        },
        "AstNode.__eq__": {
            "name": "__eq__",
            "location": 4,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AstNode.__hash__": {
            "name": "__hash__",
            "location": 9,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstNode.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstNode.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TInt.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TBool.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTuple2.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "TTuple2.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TSet.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "TSet.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TOption.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "TOption.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMap.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "TMap.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crdt.to_type": {
            "name": "to_type",
            "location": 64,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CIntMax.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CIntMax.to_type": {
            "name": "to_type",
            "location": 71,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "CIntMin.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CIntMin.to_type": {
            "name": "to_type",
            "location": 78,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "CBoolOr.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CBoolOr.to_type": {
            "name": "to_type",
            "location": 85,
            "return": [
                "Dict[str, type]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CBoolAnd.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CBoolAnd.to_type": {
            "name": "to_type",
            "location": 92,
            "return": [
                "Dict[str, type]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CTuple2.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "CTuple2.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CTuple2.to_type": {
            "name": "to_type",
            "location": 103,
            "return": [
                "bool",
                "Dict[str, type]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSetUnion.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "CSetUnion.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSetUnion.to_type": {
            "name": "to_type",
            "location": 113,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSetIntersect.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "CSetIntersect.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSetIntersect.to_type": {
            "name": "to_type",
            "location": 123,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "COption.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "COption.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "COption.to_type": {
            "name": "to_type",
            "location": 133,
            "return": [
                "Dict[str, type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CTop.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "CTop.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CTop.to_type": {
            "name": "to_type",
            "location": 154,
            "return": [
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMap.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "CMap.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMap.to_type": {
            "name": "to_type",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.is_none": {
            "name": "is_none",
            "location": 251,
            "return": [
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.is_some": {
            "name": "is_some",
            "location": 254,
            "return": [
                "Optional[int]",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.unwrap": {
            "name": "unwrap",
            "location": 257,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.__add__": {
            "name": "__add__",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Expr.__radd__": {
            "name": "__radd__",
            "location": 263,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__sub__": {
            "name": "__sub__",
            "location": 266,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__rsub__": {
            "name": "__rsub__",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__mul__": {
            "name": "__mul__",
            "location": 272,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__rmul__": {
            "name": "__rmul__",
            "location": 275,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__and__": {
            "name": "__and__",
            "location": 278,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__rand__": {
            "name": "__rand__",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__or__": {
            "name": "__or__",
            "location": 284,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__ror__": {
            "name": "__ror__",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__rshift__": {
            "name": "__rshift__",
            "location": 290,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "bool"
                ]
            }
        },
        "Expr.__rrshift__": {
            "name": "__rrshift__",
            "location": 293,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.finite": {
            "name": "finite",
            "location": 296,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.first": {
            "name": "first",
            "location": 299,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.second": {
            "name": "second",
            "location": 302,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.union": {
            "name": "union",
            "location": 305,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "str",
                    "Set[str]",
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Expr.intersect": {
            "name": "intersect",
            "location": 308,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "str",
                    "Set[str]",
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Expr.diff": {
            "name": "diff",
            "location": 311,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "str",
                    "Set[str]",
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Expr.subseteq": {
            "name": "subseteq",
            "location": 314,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "str",
                    "Set[str]",
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Expr.contains": {
            "name": "contains",
            "location": 317,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "Expr.forall": {
            "name": "forall",
            "location": 320,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "float",
                    "int"
                ],
                "phi": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Expr.contains_key": {
            "name": "contains_key",
            "location": 323,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Expr.__getitem__": {
            "name": "__getitem__",
            "location": 326,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "Expr.set": {
            "name": "set",
            "location": 329,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "Dict[str, Tuple[int, int]]",
                    "float"
                ],
                "v": [
                    "int",
                    "Dict[str, Tuple[int, int]]",
                    "float"
                ]
            }
        },
        "Expr.forall_keys": {
            "name": "forall_keys",
            "location": 332,
            "return": [
                "Optional[int]",
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "phi": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Expr.eq": {
            "name": "eq",
            "location": 335,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.ne": {
            "name": "ne",
            "location": 338,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__lt__": {
            "name": "__lt__",
            "location": 341,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__le__": {
            "name": "__le__",
            "location": 344,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__gt__": {
            "name": "__gt__",
            "location": 347,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Expr.__ge__": {
            "name": "__ge__",
            "location": 350,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EVar.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "EVar.assign": {
            "name": "assign",
            "location": 357,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int"
                ]
            }
        },
        "EVar.join_assign": {
            "name": "join_assign",
            "location": 360,
            "return": [
                "str",
                "float",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int"
                ]
            }
        },
        "EVar.__str__": {
            "name": "__str__",
            "location": 363,
            "return": [
                "int",
                "List[int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EInt.__init__": {
            "name": "__init__",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "EInt.__str__": {
            "name": "__str__",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBool.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "float",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "EBool.__str__": {
            "name": "__str__",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ETuple2.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Match",
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "ETuple2.__str__": {
            "name": "__str__",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EEmptySet.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "EEmptySet.__str__": {
            "name": "__str__",
            "location": 392,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESet.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float"
                ]
            }
        },
        "ESet.__str__": {
            "name": "__str__",
            "location": 399,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ENone.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "ENone.__str__": {
            "name": "__str__",
            "location": 406,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESome.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "ESome.__str__": {
            "name": "__str__",
            "location": 413,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EEmptyMap.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "int",
                    "tuple",
                    "float",
                    "str"
                ],
                "v": [
                    "bool",
                    "int",
                    "tuple",
                    "float",
                    "str"
                ]
            }
        },
        "EMap.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kvs": [
                    "List[str]",
                    "int",
                    "Dict[str, int]",
                    "Dict[str, List[str]]",
                    "list",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "EMap.__str__": {
            "name": "__str__",
            "location": 425,
            "return": [
                "List[str]",
                "str",
                "Iterable",
                "Optional[dict]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EUnaryOp.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "EBoolNot.__str__": {
            "name": "__str__",
            "location": 433,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetFinite.__str__": {
            "name": "__str__",
            "location": 437,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetMax.__str__": {
            "name": "__str__",
            "location": 441,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetMin.__str__": {
            "name": "__str__",
            "location": 445,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ETuple2First.__str__": {
            "name": "__str__",
            "location": 449,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ETuple2Second.__str__": {
            "name": "__str__",
            "location": 453,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EOptionIsNone.__str__": {
            "name": "__str__",
            "location": 457,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EOptionIsSome.__str__": {
            "name": "__str__",
            "location": 461,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EOptionUnwrap.__str__": {
            "name": "__str__",
            "location": 465,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBinaryOp.__init__": {
            "name": "__init__",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "bool",
                    "float"
                ],
                "rhs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EIntAdd.__str__": {
            "name": "__str__",
            "location": 474,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntSub.__str__": {
            "name": "__str__",
            "location": 478,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntMul.__str__": {
            "name": "__str__",
            "location": 482,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntMin.__str__": {
            "name": "__str__",
            "location": 486,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntMax.__str__": {
            "name": "__str__",
            "location": 490,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBoolAnd.__str__": {
            "name": "__str__",
            "location": 494,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBoolOr.__str__": {
            "name": "__str__",
            "location": 498,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EBoolImpl.__str__": {
            "name": "__str__",
            "location": 502,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetUnion.__str__": {
            "name": "__str__",
            "location": 506,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetIntersect.__str__": {
            "name": "__str__",
            "location": 510,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetDiff.__str__": {
            "name": "__str__",
            "location": 514,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetSubsetEq.__str__": {
            "name": "__str__",
            "location": 518,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESetContains.__str__": {
            "name": "__str__",
            "location": 522,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMapContainsKey.__str__": {
            "name": "__str__",
            "location": 526,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMapGet.__str__": {
            "name": "__str__",
            "location": 530,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EEq.__str__": {
            "name": "__str__",
            "location": 534,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ENe.__str__": {
            "name": "__str__",
            "location": 538,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntLt.__str__": {
            "name": "__str__",
            "location": 542,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntLe.__str__": {
            "name": "__str__",
            "location": 546,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntGt.__str__": {
            "name": "__str__",
            "location": 550,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIntGe.__str__": {
            "name": "__str__",
            "location": 554,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ETernaryOp.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        },
        "EMapSet.__str__": {
            "name": "__str__",
            "location": 564,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EIf.__str__": {
            "name": "__str__",
            "location": 568,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EForallOp.__init__": {
            "name": "__init__",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "int"
                ],
                "x": [
                    "float",
                    "int"
                ],
                "phi": [
                    "float",
                    "int"
                ]
            }
        },
        "ESetForall.__str__": {
            "name": "__str__",
            "location": 578,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMapForallKeys.__str__": {
            "name": "__str__",
            "location": 582,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAssign.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Union[int, float]"
                ],
                "e": [
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "SAssign.__str__": {
            "name": "__str__",
            "location": 594,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SJoinAssign.__init__": {
            "name": "__init__",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Union[int, float]"
                ],
                "e": [
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "SJoinAssign.__str__": {
            "name": "__str__",
            "location": 602,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/checker.py": {
        "Checker.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Checker.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker._register_var": {
            "name": "_register_var",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ],
                "crdt": [
                    "str"
                ],
                "coercible": [
                    "str",
                    "dict"
                ]
            }
        },
        "Checker.int_max": {
            "name": "int_max",
            "location": 79,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "float"
                ],
                "val": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Checker.int_min": {
            "name": "int_min",
            "location": 82,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "float"
                ],
                "val": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Checker.bool_or": {
            "name": "bool_or",
            "location": 85,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "val": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "Checker.bool_and": {
            "name": "bool_and",
            "location": 88,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "val": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "Checker.tuple2": {
            "name": "tuple2",
            "location": 91,
            "return": [
                "str",
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ],
                "a": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ],
                "b": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ],
                "val": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ]
            }
        },
        "Checker.set_union": {
            "name": "set_union",
            "location": 94,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "AsyncContextManager[None]"
                ],
                "a": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "AsyncContextManager[None]"
                ],
                "val": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "AsyncContextManager[None]"
                ]
            }
        },
        "Checker.set_intersect": {
            "name": "set_intersect",
            "location": 97,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "AsyncContextManager[None]"
                ],
                "a": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "AsyncContextManager[None]"
                ],
                "val": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "AsyncContextManager[None]"
                ]
            }
        },
        "Checker.map": {
            "name": "map",
            "location": 100,
            "return": [
                "str",
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ],
                "a": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ],
                "b": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ],
                "val": [
                    "bool",
                    "str",
                    "Optional[Type]",
                    "float"
                ]
            }
        },
        "Checker.option": {
            "name": "option",
            "location": 103,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Type]",
                    "int",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str, Type]"
                ],
                "a": [
                    "Optional[Type]",
                    "int",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str, Type]"
                ],
                "val": [
                    "Optional[Type]",
                    "int",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str, Type]"
                ]
            }
        },
        "Checker.top": {
            "name": "top",
            "location": 106,
            "return": [
                "str",
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "a": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "val": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Checker.add_transaction": {
            "name": "add_transaction",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "list"
                ],
                "txn": [
                    "str"
                ]
            }
        },
        "Checker.add_invariant": {
            "name": "add_invariant",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "inv": [
                    "str"
                ]
            }
        },
        "Checker._check": {
            "name": "_check",
            "location": 119,
            "return": [
                "Decision"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.check": {
            "name": "check",
            "location": 122,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/doctest_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 7,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "str",
                    "int"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/envs.py": {},
    "enforced_invariant_confluence-master/iconfluence/eval.py": {
        "eval_expr": {
            "name": "eval_expr",
            "location": 7,
            "return": [
                "str",
                "type",
                "float"
            ],
            "arguments": {
                "e": [
                    "Callable",
                    "Callable[[Any], T]",
                    "Callable[[], str]"
                ],
                "env": [
                    "envs.ValEnv",
                    "Callable",
                    "Iterable"
                ]
            }
        },
        "eval_stmt": {
            "name": "eval_stmt",
            "location": 137,
            "return": [
                "List[str]",
                "str",
                "Union[List, Dict]",
                "bool"
            ],
            "arguments": {
                "s": [
                    "envs.CrdtEnv",
                    "Type",
                    "List[Type]"
                ],
                "env": [
                    "envs.CrdtEnv",
                    "Callable",
                    "float"
                ],
                "cenv": [
                    "envs.CrdtEnv"
                ]
            }
        },
        "eval_txn": {
            "name": "eval_txn",
            "location": 151,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "txn": [
                    "Dict[str, str]",
                    "Iterable[str]",
                    "bool"
                ],
                "env": [
                    "Callable"
                ],
                "cenv": [
                    "Callable"
                ]
            }
        },
        "eval_invariant": {
            "name": "eval_invariant",
            "location": 156,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "inv": [
                    "envs.ValEnv"
                ],
                "env": [
                    "envs.ValEnv"
                ]
            }
        },
        "_eval_join_vals": {
            "name": "_eval_join_vals",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lhs": [
                    "float",
                    "bool",
                    "Optional[List[str]]"
                ],
                "rhs": [
                    "float",
                    "bool",
                    "Optional[List[str]]"
                ],
                "crdt": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "eval_join": {
            "name": "eval_join",
            "location": 201,
            "return": [
                "bool",
                "Iterable[int]",
                "int",
                "str"
            ],
            "arguments": {
                "lhs": [
                    "envs.ValEnv",
                    "envs.CrdtEnv",
                    "Mapping",
                    "Optional[Tuple[str, ...]]"
                ],
                "rhs": [
                    "envs.ValEnv",
                    "envs.CrdtEnv",
                    "Mapping",
                    "Optional[Tuple[str, ...]]"
                ],
                "cenv": [
                    "envs.ValEnv",
                    "envs.CrdtEnv",
                    "Mapping",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/eval_test.py": {
        "TestEval.test_eval_expr": {
            "name": "test_eval_expr",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEval.test_eval_stmt": {
            "name": "test_eval_stmt",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/state_explorer.py": {
        "StateExplorer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crdt_env": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable['adi.Instance']"
                ],
                "s0": [
                    "List[str]",
                    "List[int]",
                    "List[Tuple[str, float]]"
                ],
                "invariants": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable['adi.Instance']"
                ],
                "transactions": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable['adi.Instance']"
                ],
                "max_iters_per_state": [
                    "Dict[str, int]",
                    "bool",
                    "Iterable[str]",
                    "Union[int, Dict[str, int]]",
                    "Dict[str, List[str]]",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "StateExplorer._flip_coin": {
            "name": "_flip_coin",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateExplorer._random_state": {
            "name": "_random_state",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateExplorer._state_satisfies_invs": {
            "name": "_state_satisfies_invs",
            "location": 48,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Dict[str, Any]",
                "Tuple[str, bool]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "envs.ValEnv",
                    "str",
                    "bool",
                    "int",
                    "Callable[..., T]"
                ]
            }
        },
        "StateExplorer._explore": {
            "name": "_explore",
            "location": 52,
            "return": [
                "bool",
                "int",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateExplorer.explore": {
            "name": "explore",
            "location": 67,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "StateExplorer.add": {
            "name": "add",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[str]",
                    "int",
                    "list",
                    "type",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/typecheck.py": {
        "_assert": {
            "name": "_assert",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "bool",
                    "Optional[bool]",
                    "bytes",
                    "int"
                ],
                "msg": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "assert_type_eq": {
            "name": "assert_type_eq",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [
                    "bool",
                    "Dict[str, Any]",
                    "Hashable"
                ],
                "expected": [
                    "bool",
                    "Dict[str, Any]",
                    "Hashable"
                ],
                "sube": [
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "str",
                    "Type",
                    "bool"
                ],
                "e": [
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "assert_type_uniform": {
            "name": "assert_type_uniform",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "typ_a": [
                    "bool"
                ],
                "typ_b": [
                    "bool"
                ],
                "sub_a": [],
                "sub_b": [],
                "e": []
            }
        },
        "assert_type_instance": {
            "name": "assert_type_instance",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "typ": [
                    "type",
                    "bool"
                ],
                "expected": [
                    "type",
                    "bool"
                ],
                "sube": [
                    "FrozenSet[str]",
                    "Type[T]"
                ],
                "e": [
                    "FrozenSet[str]",
                    "Type[T]"
                ]
            }
        },
        "_typecheck_expr": {
            "name": "_typecheck_expr",
            "location": 44,
            "return": [
                "type"
            ],
            "arguments": {
                "e": [
                    "Callable",
                    "Callable[[Any], T]",
                    "bool",
                    "Iterable",
                    "Callable[[], str]"
                ],
                "env": [
                    "Callable",
                    "Iterable"
                ]
            }
        },
        "typecheck_expr": {
            "name": "typecheck_expr",
            "location": 250,
            "return": [],
            "arguments": {
                "e": [],
                "env": []
            }
        },
        "_typecheck_stmt": {
            "name": "_typecheck_stmt",
            "location": 254,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "Type[T]",
                    "Sequence[Sequence[Any]]",
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "callable"
                ],
                "env": [
                    "List[str]",
                    "Union[Sequence, 'SweepFixedValues']"
                ]
            }
        },
        "typecheck_stmt": {
            "name": "typecheck_stmt",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "set",
                    "int"
                ],
                "env": [
                    "str",
                    "bool"
                ]
            }
        },
        "_typecheck_txn": {
            "name": "_typecheck_txn",
            "location": 267,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txn": [
                    "Dict[str, str]",
                    "Iterable[str]",
                    "bool"
                ],
                "env": [
                    "Callable",
                    "list"
                ]
            }
        },
        "typecheck_txn": {
            "name": "typecheck_txn",
            "location": 272,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "txn": [],
                "env": []
            }
        },
        "_typecheck_invariant": {
            "name": "_typecheck_invariant",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inv": [
                    "dict",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "env": []
            }
        },
        "typecheck_invariant": {
            "name": "typecheck_invariant",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inv": [
                    "dict",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "env": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/__init__.py": {},
    "enforced_invariant_confluence-master/iconfluence/diamond/diamond_checker.py": {
        "DiamondChecker.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DiamondChecker._debug": {
            "name": "_debug",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "dict"
                ]
            }
        },
        "DiamondChecker._state_satisfies_invs": {
            "name": "_state_satisfies_invs",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "envs.ValEnv",
                    "T",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DiamondChecker._var_free_expr": {
            "name": "_var_free_expr",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "version_env.VersionEnv",
                    "envs.TypeEnv"
                ]
            }
        },
        "DiamondChecker._var_free_join": {
            "name": "_var_free_join",
            "location": 79,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "dict",
                    "str",
                    "Tuple[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "DiamondChecker._has_bottom": {
            "name": "_has_bottom",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "crdt": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "DiamondChecker._txn_is_constant_join": {
            "name": "_txn_is_constant_join",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DiamondChecker._compile_expr": {
            "name": "_compile_expr",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Type"
                ],
                "venv": [
                    "Type"
                ]
            }
        },
        "DiamondChecker._venv_satisfies_inv": {
            "name": "_venv_satisfies_inv",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DiamondChecker._venv_doesnt_satisfy_inv": {
            "name": "_venv_doesnt_satisfy_inv",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DiamondChecker._model_to_state": {
            "name": "_model_to_state",
            "location": 170,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict",
                    "Callable"
                ],
                "venv": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DiamondChecker._diamond_iconfluent": {
            "name": "_diamond_iconfluent",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiamondChecker._check": {
            "name": "_check",
            "location": 230,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/diamond/doctest_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 4,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "bool",
                    "str"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/diamond/__init__.py": {},
    "enforced_invariant_confluence-master/iconfluence/guess_and_check/doctest_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 4,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "bool",
                    "str"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/guess_and_check/guess_and_check_checker.py": {
        "GuessAndCheckChecker.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_states": [
                    "int"
                ],
                "verbose": [
                    "bool",
                    "float"
                ]
            }
        },
        "GuessAndCheckChecker._state_satisfies_invs": {
            "name": "_state_satisfies_invs",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "envs.ValEnv",
                    "T",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "GuessAndCheckChecker._check": {
            "name": "_check",
            "location": 27,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/guess_and_check/__init__.py": {},
    "enforced_invariant_confluence-master/iconfluence/interactive/doctest_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 6,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "str"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/interactive/interactive_checker.py": {
        "InteractiveChecker.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_explored_states_per_step": [],
                "verbose": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "InteractiveChecker.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker._wrap_print": {
            "name": "_wrap_print",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "InteractiveChecker._compile_expr": {
            "name": "_compile_expr",
            "location": 117,
            "return": [
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "envs.TypeEnv",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]",
                    "Union[Type[Any], Tuple[Any, ...]]"
                ],
                "venv": [
                    "envs.TypeEnv",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]",
                    "Union[Type[Any], Tuple[Any, ...]]"
                ]
            }
        },
        "InteractiveChecker._state_satisfies_invs": {
            "name": "_state_satisfies_invs",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "envs.ValEnv",
                    "T",
                    "str",
                    "bool",
                    "int"
                ],
                "invs": [
                    "envs.ValEnv",
                    "T",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "InteractiveChecker._venv_satisfies_refined_i": {
            "name": "_venv_satisfies_refined_i",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int"
                ]
            }
        },
        "InteractiveChecker._venv_doesnt_satisfy_refined_i": {
            "name": "_venv_doesnt_satisfy_refined_i",
            "location": 140,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ]
            }
        },
        "InteractiveChecker._model_to_state": {
            "name": "_model_to_state",
            "location": 152,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict",
                    "Callable"
                ],
                "venv": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "InteractiveChecker._uninfinite_state": {
            "name": "_uninfinite_state",
            "location": 160,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "envs.ValEnv",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "InteractiveChecker._model_to_exprs": {
            "name": "_model_to_exprs",
            "location": 177,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "T"
                ],
                "tenv": [
                    "envs.TypeEnv",
                    "dict",
                    "str",
                    "T"
                ]
            }
        },
        "InteractiveChecker._known_reachable": {
            "name": "_known_reachable",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "envs.ValEnv"
                ]
            }
        },
        "InteractiveChecker._record_state": {
            "name": "_record_state",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list"
                ],
                "label": [
                    "List[int]"
                ]
            }
        },
        "InteractiveChecker._is_refined_i_closed": {
            "name": "_is_refined_i_closed",
            "location": 213,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker._check": {
            "name": "_check",
            "location": 291,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker.lhs_reachable": {
            "name": "lhs_reachable",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker.lhs_unreachable": {
            "name": "lhs_unreachable",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker.rhs_reachable": {
            "name": "rhs_reachable",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker.rhs_unreachable": {
            "name": "rhs_unreachable",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveChecker.refine_invariant": {
            "name": "refine_invariant",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inv": [
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/interactive/__init__.py": {},
    "enforced_invariant_confluence-master/iconfluence/stratified/arbitrary_start_checker.py": {
        "_wrap_print": {
            "name": "_wrap_print",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "ArbitraryStartChecker.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "ArbitraryStartChecker.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArbitraryStartChecker._warn_if_not_none": {
            "name": "_warn_if_not_none",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "ArbitraryStartChecker._register_var_no_start_state": {
            "name": "_register_var_no_start_state",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "crdt": [
                    "str"
                ]
            }
        },
        "ArbitraryStartChecker.int_max": {
            "name": "int_max",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "ArbitraryStartChecker.int_min": {
            "name": "int_min",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "ArbitraryStartChecker.bool_or": {
            "name": "bool_or",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "val": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ArbitraryStartChecker.bool_and": {
            "name": "bool_and",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "val": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ArbitraryStartChecker.tuple2": {
            "name": "tuple2",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "val": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "float",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "ArbitraryStartChecker.set_union": {
            "name": "set_union",
            "location": 80,
            "return": [
                "str",
                "Type",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "int",
                    "Union[int, str]"
                ],
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "Union[int, str]"
                ],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "ArbitraryStartChecker.set_intersect": {
            "name": "set_intersect",
            "location": 84,
            "return": [
                "str",
                "Type",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "int",
                    "Union[int, str]"
                ],
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "Union[int, str]"
                ],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "ArbitraryStartChecker.map": {
            "name": "map",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "val": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "float",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "ArbitraryStartChecker.option": {
            "name": "option",
            "location": 92,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "a": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Type"
                ]
            }
        },
        "ArbitraryStartChecker.top": {
            "name": "top",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "a": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "val": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/stratified/arbitrary_start_interactive_checker.py": {
        "_wrap_print": {
            "name": "_wrap_print",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "_box_string_lhs": {
            "name": "_box_string_lhs",
            "location": 23,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "_box_string_rhs": {
            "name": "_box_string_rhs",
            "location": 26,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "_box_var_lhs": {
            "name": "_box_var_lhs",
            "location": 29,
            "return": [
                "str",
                "Iterable[str]",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Type",
                    "Iterable[object]",
                    "Set[str]",
                    "Callable[..., T]",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "_box_var_rhs": {
            "name": "_box_var_rhs",
            "location": 34,
            "return": [
                "str",
                "Iterable[str]",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Type",
                    "Iterable[object]",
                    "Set[str]",
                    "Callable[..., T]",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "ArbitraryStartInteractiveChecker.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool",
                    "int"
                ]
            }
        },
        "ArbitraryStartInteractiveChecker.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArbitraryStartInteractiveChecker._venv_satisfies_invs": {
            "name": "_venv_satisfies_invs",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tenv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "invs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ArbitraryStartInteractiveChecker._venv_doesnt_satisfy_invs": {
            "name": "_venv_doesnt_satisfy_invs",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tenv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "invs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ArbitraryStartInteractiveChecker._rename_venvs": {
            "name": "_rename_venvs",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "from_venv": [
                    "str",
                    "int",
                    "Iterable[Iterable[str]]"
                ],
                "from_tenv": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "to_venv": [
                    "Dict[str, Any]",
                    "bool",
                    "Union[int, bytes]",
                    "type",
                    "Optional[str]",
                    "Optional[int]",
                    "Type[T]",
                    "Type[Any]"
                ],
                "to_tenv": [
                    "bool",
                    "Union[int, bytes]",
                    "type",
                    "str",
                    "Union[type, Tuple[type, ...]]"
                ],
                "renames": [
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Dict[str, int]"
                ]
            }
        },
        "ArbitraryStartInteractiveChecker._check": {
            "name": "_check",
            "location": 140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArbitraryStartInteractiveChecker.coreachable": {
            "name": "coreachable",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArbitraryStartInteractiveChecker.counreachable": {
            "name": "counreachable",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArbitraryStartInteractiveChecker.split": {
            "name": "split",
            "location": 244,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "T"
                ]
            }
        },
        "ArbitraryStartInteractiveChecker.refine_coreachable": {
            "name": "refine_coreachable",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inv": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/stratified/doctest_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 6,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "str",
                    "float",
                    "Callable"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/stratified/stratified_checker.py": {
        "_wrap_print": {
            "name": "_wrap_print",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "BufferedChecker.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferedChecker.check": {
            "name": "check",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stratum.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "T",
                    "Optional[Pattern]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Stratum.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stratum.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stratum.add_transaction": {
            "name": "add_transaction",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "Callable[..., bool]",
                    "bool"
                ]
            }
        },
        "Stratum.add_invariant": {
            "name": "add_invariant",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inv": []
            }
        },
        "StratifiedChecker.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "StratifiedChecker.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StratifiedChecker._invs_implies_invs": {
            "name": "_invs_implies_invs",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StratifiedChecker._and": {
            "name": "_and",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "invs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StratifiedChecker._or": {
            "name": "_or",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "invs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StratifiedChecker.stratum": {
            "name": "stratum",
            "location": 119,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "StratifiedChecker._check": {
            "name": "_check",
            "location": 124,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/stratified/__init__.py": {},
    "enforced_invariant_confluence-master/iconfluence/z3_/compile.py": {
        "sort_to_type": {
            "name": "sort_to_type",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "type",
                "Mapping[Tuple[str, str], Any]",
                "dict"
            ],
            "arguments": {
                "sort": [
                    "z3.SortRef",
                    "type",
                    "str",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "compile_type": {
            "name": "compile_type",
            "location": 21,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "typ": []
            }
        },
        "compile_var": {
            "name": "compile_var",
            "location": 125,
            "return": [
                "type",
                "Callable",
                "bool",
                "List[Callable]",
                "str"
            ],
            "arguments": {
                "x": [
                    "envs.TypeEnv",
                    "dict",
                    "version_env.VersionEnv",
                    "Dict[int, float]"
                ],
                "venv": [
                    "version_env.VersionEnv"
                ],
                "tenv": [
                    "envs.TypeEnv",
                    "dict",
                    "version_env.VersionEnv",
                    "Dict[int, float]"
                ]
            }
        },
        "_compile_empty_set": {
            "name": "_compile_empty_set",
            "location": 140,
            "return": [
                "Set[str]",
                "set",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "typ": [
                    "FrozenSet[int]"
                ]
            }
        },
        "_compile_empty_map": {
            "name": "_compile_empty_map",
            "location": 154,
            "return": [
                "Set[str]",
                "set",
                "str",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "compile_expr": {
            "name": "compile_expr",
            "location": 166,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., None]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "e": [
                    "Callable"
                ],
                "venv": [
                    "version_env.VersionEnv",
                    "TypeEnv"
                ],
                "tenv": [
                    "envs.TypeEnv",
                    "version_env.VersionEnv"
                ],
                "fresh": [
                    "fresh_name.FreshName",
                    "int",
                    "bytes",
                    "Exception",
                    "dict",
                    "complex"
                ]
            }
        },
        "compile_stmt": {
            "name": "compile_stmt",
            "location": 394,
            "return": [
                "str"
            ],
            "arguments": {
                "stmt": [
                    "int",
                    "version_env.VersionEnv",
                    "str"
                ],
                "venv": [
                    "version_env.VersionEnv",
                    "envs.CrdtEnv",
                    "float"
                ],
                "tenv": [
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "fresh_name.FreshName",
                    "envs.CrdtEnv"
                ],
                "cenv": [
                    "envs.CrdtEnv",
                    "version_env.VersionEnv"
                ],
                "fresh": [
                    "fresh_name.FreshName",
                    "float"
                ]
            }
        },
        "compile_txn": {
            "name": "compile_txn",
            "location": 433,
            "return": [
                "fresh_name.FreshName",
                "envs.TypeEnv",
                "version_env.VersionEnv",
                "Mapping",
                "int"
            ],
            "arguments": {
                "txn": [
                    "str"
                ],
                "venv": [
                    "envs.CrdtEnv",
                    "version_env.VersionEnv",
                    "envs.TypeEnv",
                    "fresh_name.FreshName",
                    "str",
                    "bool",
                    "float",
                    "List[List[str]]"
                ],
                "tenv": [
                    "envs.CrdtEnv",
                    "version_env.VersionEnv",
                    "envs.TypeEnv",
                    "fresh_name.FreshName",
                    "str",
                    "bool",
                    "float",
                    "List[List[str]]"
                ],
                "cenv": [
                    "envs.CrdtEnv",
                    "version_env.VersionEnv",
                    "envs.TypeEnv",
                    "fresh_name.FreshName",
                    "str",
                    "bool",
                    "float",
                    "List[List[str]]"
                ],
                "fresh": [
                    "envs.CrdtEnv",
                    "version_env.VersionEnv",
                    "envs.TypeEnv",
                    "fresh_name.FreshName",
                    "str",
                    "bool",
                    "float",
                    "List[List[str]]"
                ]
            }
        },
        "_compile_z3_join": {
            "name": "_compile_z3_join",
            "location": 471,
            "return": [
                "Set[str]",
                "set",
                "str",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "lhs": [
                    "z3.ExprRef",
                    "str"
                ],
                "rhs": [
                    "z3.ExprRef",
                    "str"
                ],
                "crdt": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "fresh": [
                    "fresh_name.FreshName"
                ]
            }
        },
        "compile_join": {
            "name": "compile_join",
            "location": 529,
            "return": [
                "fresh_name.FreshName",
                "envs.TypeEnv",
                "version_env.VersionEnv",
                "Mapping",
                "int"
            ],
            "arguments": {
                "lhs_venv": [
                    "version_env.VersionEnv",
                    "list",
                    "dict"
                ],
                "rhs_venv": [
                    "version_env.VersionEnv",
                    "list",
                    "dict"
                ],
                "joined_venv": [
                    "bool",
                    "int"
                ],
                "cenv": [
                    "envs.CrdtEnv",
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, float]",
                    "List[float]",
                    "str"
                ],
                "tenv": [
                    "envs.TypeEnv",
                    "Iterable[Any]",
                    "List[Tuple[int, int, str]]",
                    "List[Tuple[int, int]]",
                    "Set[str]"
                ],
                "fresh": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ]
            }
        },
        "compile_venv_satisfies_invs": {
            "name": "compile_venv_satisfies_invs",
            "location": 563,
            "return": [
                "fresh_name.FreshName",
                "envs.TypeEnv",
                "version_env.VersionEnv",
                "Mapping",
                "int"
            ],
            "arguments": {
                "invs": [
                    "str"
                ],
                "venv": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ],
                "tenv": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ],
                "fresh": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ]
            }
        },
        "compile_venv_doesnt_satisfy_invs": {
            "name": "compile_venv_doesnt_satisfy_invs",
            "location": 575,
            "return": [
                "fresh_name.FreshName",
                "envs.TypeEnv",
                "version_env.VersionEnv",
                "Mapping",
                "int"
            ],
            "arguments": {
                "invs": [
                    "str"
                ],
                "venv": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ],
                "tenv": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ],
                "fresh": [
                    "fresh_name.FreshName",
                    "envs.TypeEnv",
                    "version_env.VersionEnv",
                    "Mapping",
                    "int"
                ]
            }
        },
        "Tuple2Sort.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Tuple2Sort.tuple2": {
            "name": "tuple2",
            "location": 83,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "bool",
                    "str",
                    "Iterable"
                ],
                "b": [
                    "bool",
                    "str",
                    "Iterable"
                ]
            }
        },
        "Tuple2Sort.a": {
            "name": "a",
            "location": 86,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float",
                    "list",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "Tuple2Sort.b": {
            "name": "b",
            "location": 89,
            "return": [
                "int",
                "Tuple[Tuple[int, Any]]",
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "List[str]",
                    "list",
                    "bytes"
                ]
            }
        },
        "OptionSort.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OptionSort.is_none": {
            "name": "is_none",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "List[str]"
                ]
            }
        },
        "OptionSort.none": {
            "name": "none",
            "location": 113,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionSort.is_some": {
            "name": "is_some",
            "location": 116,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "OptionSort.some": {
            "name": "some",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "OptionSort.x": {
            "name": "x",
            "location": 122,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "compile_expr.compile_expr_": {
            "name": "compile_expr_",
            "location": 198,
            "return": [],
            "arguments": {
                "e": [
                    "str",
                    "bool"
                ]
            }
        },
        "compile_expr.map1": {
            "name": "map1",
            "location": 201,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "e": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "f": [
                    "Callable",
                    "callable",
                    "Callable[..., None]"
                ]
            }
        },
        "compile_expr.map2": {
            "name": "map2",
            "location": 207,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "lhs": [
                    "bool",
                    "Optional[int]",
                    "Collection[int]",
                    "int"
                ],
                "rhs": [
                    "bool",
                    "Optional[int]",
                    "Collection[int]",
                    "int"
                ],
                "f": [
                    "list",
                    "float",
                    "Callable",
                    "Dict[str, Any]",
                    "bool",
                    "callable"
                ]
            }
        },
        "compile_expr.map3": {
            "name": "map3",
            "location": 215,
            "return": [
                "int",
                "str",
                "List[dict]",
                "List[int]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "str"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "Optional[int]",
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ],
                "f": [
                    "int",
                    "Tuple[int, int, int, int, int, int]",
                    "functools.partial[Any]"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/compile_test.py": {
        "TestCompile.test_compile_type": {
            "name": "test_compile_type",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompile.test_compile_expr": {
            "name": "test_compile_expr",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/doctest_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 8,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "str",
                    "int",
                    "Type",
                    "dict"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/fresh_name.py": {
        "FreshName.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str"
                ]
            }
        },
        "FreshName.get": {
            "name": "get",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/model.py": {
        "_translate_model_value": {
            "name": "_translate_model_value",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "list"
                ],
                "model": [
                    "z3.ModelRef",
                    "str",
                    "Callable",
                    "Union[str, int]"
                ]
            }
        },
        "model_to_state": {
            "name": "model_to_state",
            "location": 214,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "m": [
                    "z3.ModelRef",
                    "dict"
                ],
                "vs": [
                    "Set[str]",
                    "Type[T]",
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "model_and_venv_to_state": {
            "name": "model_and_venv_to_state",
            "location": 233,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Callable",
                    "dict",
                    "int",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']"
                ],
                "vs": [
                    "int",
                    "str",
                    "T"
                ],
                "venv": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "InfiniteSet.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_": [
                    "int",
                    "str",
                    "float"
                ],
                "not_in_": [
                    "int",
                    "str",
                    "float"
                ],
                "else_": [
                    "Optional[float]",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "int"
                ]
            }
        },
        "InfiniteSet.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteSet.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteSet.__contains__": {
            "name": "__contains__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "InfiniteSet.get": {
            "name": "get",
            "location": 79,
            "return": [
                "List[str]",
                "bool",
                "List[Dict[str, str]]",
                "Iterable[str]",
                "int",
                "List[Tuple[str, bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteSet.finite": {
            "name": "finite",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteMap.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "default": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "InfiniteMap.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str",
                "Tuple[str, str]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteMap.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteMap.__contains__": {
            "name": "__contains__",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "Optional[float]",
                    "Callable",
                    "List[\"Outcome\"]",
                    "Optional[int]",
                    "dict",
                    "Iterable['cirq.Qid']"
                ]
            }
        },
        "InfiniteMap.__getitem__": {
            "name": "__getitem__",
            "location": 142,
            "return": [
                "Optional[Any]",
                "bool",
                "Dict[str, float]",
                "Callable[..., None]",
                "str",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float"
                ]
            }
        },
        "InfiniteMap.get": {
            "name": "get",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfiniteMap.finite": {
            "name": "finite",
            "location": 152,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_translate_model_value.translate": {
            "name": "translate",
            "location": 158,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Sequence[Any]",
                    "Sequence[Sequence[Any]]",
                    "bool",
                    "Optional[Sequence[T]]"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/version_env.py": {
        "VersionEnv.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VersionEnv.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionEnv.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionEnv._copy": {
            "name": "_copy",
            "location": 52,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionEnv.get_version": {
            "name": "get_version",
            "location": 58,
            "return": [
                "str",
                "Set[str]",
                "Dict[str, 'LabwareDefinition']",
                "Dict[int, str]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Pattern[str]",
                    "Tuple[Literal, Literal, Literal, Literal]",
                    "Type[MutableMapping[Any, Any]]"
                ]
            }
        },
        "VersionEnv.get_name": {
            "name": "get_name",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "VersionEnv.with_suffix": {
            "name": "with_suffix",
            "location": 69,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str",
                    "bytes",
                    "Tuple[str, str]"
                ]
            }
        },
        "VersionEnv.assign": {
            "name": "assign",
            "location": 74,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "float",
                    "Sequence[T]"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/z3_util.py": {
        "scoped": {
            "name": "scoped",
            "location": 7,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "solver": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "enforced_invariant_confluence-master/iconfluence/z3_/__init__.py": {}
}
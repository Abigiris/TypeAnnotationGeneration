{
    "engster-server-master/main.py": {},
    "engster-server-master/manage.py": {
        "coroutine": {
            "name": "coroutine",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "List[int]",
                    "str"
                ],
                "env_file": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "current_revision": {
            "name": "current_revision",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "migrations_history": {
            "name": "migrations_history",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "make_migrations": {
            "name": "make_migrations",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "migrate": {
            "name": "migrate",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "downgrade_revision": {
            "name": "downgrade_revision",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "homeassistant_cli.config.Configuration"
                ],
                "revision": [
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "runserver": {
            "name": "runserver",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "coroutine.wrapper": {
            "name": "wrapper",
            "location": 18,
            "return": [
                "dict",
                "str",
                "List[dict]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "engster-server-master/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "engster-server-master/alembic/versions/27f113bd4f5f_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "engster-server-master/alembic/versions/30f57e0cdc6b_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "engster-server-master/alembic/versions/3fd7381645d1_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "engster-server-master/alembic/versions/9037bd61d896_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "engster-server-master/alembic/versions/c69a4fdbf0a7_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "engster-server-master/alembic/versions/c766dc0d8d62_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "engster-server-master/app/config.py": {},
    "engster-server-master/app/decorators.py": {
        "_get_request": {
            "name": "_get_request",
            "location": 10,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Optional[Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "_parse_query": {
            "name": "_parse_query",
            "location": 21,
            "return": [
                "str",
                "Type",
                "Tuple[str, str]"
            ],
            "arguments": {
                "query_args": [
                    "str",
                    "List[Union[Any, Any]]",
                    "Optional[list]",
                    "list",
                    "int",
                    "List[str]"
                ],
                "field_definitions": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ]
            }
        },
        "expect_query": {
            "name": "expect_query",
            "location": 48,
            "return": [
                "dict",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "expect_body": {
            "name": "expect_body",
            "location": 68,
            "return": [
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "expect_query.actual_expect_query": {
            "name": "actual_expect_query",
            "location": 49,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "func": [
                    "T",
                    "int",
                    "Iterable[T]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "expect_body.actual_expect_body": {
            "name": "actual_expect_body",
            "location": 69,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Optional[int]",
                    "Callable"
                ]
            }
        }
    },
    "engster-server-master/app/exceptions.py": {
        "UnsupportedExtension.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "InvalidDataFrame.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DataDoesNotExist.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "engster-server-master/app/models.py": {
        "BaseModel.to_dict": {
            "name": "to_dict",
            "location": 10,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Iterable[db.models.Name]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "dict"
                ],
                "hide": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 65,
            "return": [
                "str",
                "Optional[Callable]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "User.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Genre.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Subtitle.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "engster-server-master/app/schemas.py": {
        "UserModel.get_photo": {
            "name": "get_photo",
            "location": 30,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[Exception]",
                    "float",
                    "int"
                ],
                "v": [
                    "List[Tuple[str, str, str]]",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "engster-server-master/app/__init__.py": {
        "init_jwt": {
            "name": "init_jwt",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "sanic.Sanic",
                    "aiohttp.web.Application",
                    "routemaster.app.App",
                    "abilian.app.Application"
                ]
            }
        },
        "init_oauth": {
            "name": "init_oauth",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "int",
                    "aiohttp.web.Application",
                    "bool",
                    "app.AppT",
                    "dict"
                ]
            }
        },
        "init_error_handler": {
            "name": "init_error_handler",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "bool",
                    "aiohttp.web.Application"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 52,
            "return": [
                "aiohttp.web.Application"
            ],
            "arguments": {}
        }
    },
    "engster-server-master/app/core/email.py": {},
    "engster-server-master/app/core/jwt.py": {
        "encode_jwt": {
            "name": "encode_jwt",
            "location": 13,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "payload": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "expires_delta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "decode_jwt": {
            "name": "decode_jwt",
            "location": 23,
            "return": [
                "int",
                "str",
                "Optional[Exception]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "engster-server-master/app/core/sanic_jwt_extended.py": {
        "get_csrf_token": {
            "name": "get_csrf_token",
            "location": 21,
            "return": [
                "dict",
                "bool",
                "as3.scanner.Token",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "encoded_token": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "encode_jwt": {
            "name": "encode_jwt",
            "location": 27,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "as3.scanner.Token",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type['Declared']"
                ],
                "token_type": [
                    "str",
                    "type",
                    "Union[str, List[str]]"
                ],
                "payload": [
                    "str",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "Dict[str, str]",
                    "int"
                ],
                "expires_delta": [
                    "int",
                    "datetime.datetime",
                    "Union[float, None]",
                    "datetime.timedelta"
                ]
            }
        },
        "set_jwt_cookie": {
            "name": "set_jwt_cookie",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "encoded_token": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "remove_jwt_cookie": {
            "name": "remove_jwt_cookie",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "response": [],
                "is_access": [
                    "str",
                    "MutableMapping[str, Any]",
                    "int"
                ]
            }
        },
        "jwt_optional": {
            "name": "jwt_optional",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "admin_required": {
            "name": "admin_required",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "admin_required.wrapper": {
            "name": "wrapper",
            "location": 159,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "engster-server-master/app/core/subtitle.py": {
        "SubtitleList.to_csv": {
            "name": "to_csv",
            "location": 8,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtitleList.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSubtitle.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "int",
                    "Generator[str, None, None]",
                    "Tuple[int]"
                ]
            }
        },
        "BaseSubtitle.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "T",
                    "List[str]",
                    "int"
                ]
            }
        },
        "BaseSubtitle.__len__": {
            "name": "__len__",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSubtitle.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSubtitle.__getattr__": {
            "name": "__getattr__",
            "location": 34,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "BaseSubtitle.read": {
            "name": "read",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SRTSubtitle._trim": {
            "name": "_trim",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SRTSubtitle._process_time": {
            "name": "_process_time",
            "location": 62,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "SRTSubtitle.read": {
            "name": "read",
            "location": 67,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SMISubtitle._trim": {
            "name": "_trim",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SMISubtitle._process_time": {
            "name": "_process_time",
            "location": 116,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "SMISubtitle.read": {
            "name": "read",
            "location": 120,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SubtitleMatcher.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subtitles": [
                    "int",
                    "bool",
                    "float"
                ],
                "translations": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SubtitleMatcher._find_lte_idx": {
            "name": "_find_lte_idx",
            "location": 153,
            "return": [
                "str",
                "int",
                "float",
                "Dict[str, int]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "translations": [
                    "bytearray",
                    "str"
                ],
                "current_sub": [
                    "str",
                    "int"
                ],
                "next_sub": [
                    "str"
                ]
            }
        },
        "SubtitleMatcher._concat_translations": {
            "name": "_concat_translations",
            "location": 181,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SubtitleMatcher.match": {
            "name": "match",
            "location": 189,
            "return": [
                "bool",
                "str",
                "int",
                "OrderedDict",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "engster-server-master/app/core/__init__.py": {},
    "engster-server-master/app/services/content.py": {},
    "engster-server-master/app/services/genre.py": {},
    "engster-server-master/app/services/subtitle.py": {},
    "engster-server-master/app/services/translation.py": {},
    "engster-server-master/app/services/translation_review.py": {},
    "engster-server-master/app/services/user.py": {
        "generate_random_characters": {
            "name": "generate_random_characters",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "prefix_length": [
                    "bool",
                    "str",
                    "list",
                    "TextIO"
                ],
                "suffix_length": [
                    "bool",
                    "str",
                    "list",
                    "TextIO"
                ]
            }
        }
    },
    "engster-server-master/app/services/__init__.py": {},
    "engster-server-master/app/utils/csv.py": {
        "csv_to_dict": {
            "name": "csv_to_dict",
            "location": 4,
            "return": [
                "str",
                "float",
                "Optional[Dict[str, Any]]",
                "Sequence['cirq.Qid']",
                "dict",
                "int",
                "bytes"
            ],
            "arguments": {
                "csvfile": [
                    "int",
                    "Dict[str, Dict]",
                    "str",
                    "list"
                ],
                "delimiter": [
                    "int",
                    "Dict[str, Dict]",
                    "str",
                    "list"
                ],
                "quotechar": [
                    "int",
                    "Dict[str, Dict]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "engster-server-master/app/utils/db.py": {},
    "engster-server-master/app/utils/file.py": {
        "get_file_url": {
            "name": "get_file_url",
            "location": 1,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "engster-server-master/app/utils/hasher.py": {
        "force_bytes": {
            "name": "force_bytes",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Union[str, bytes]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "get_random_string": {
            "name": "get_random_string",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "bool"
                ],
                "allowed_chars": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "constant_time_compare": {
            "name": "constant_time_compare",
            "location": 31,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "val1": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "val2": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "List[List[int]]"
                ]
            }
        },
        "pbkdf2": {
            "name": "pbkdf2",
            "location": 36,
            "return": [
                "Callable"
            ],
            "arguments": {
                "password": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "salt": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "iterations": [
                    "str"
                ],
                "dklen": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, None]"
                ],
                "digest": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "PBKDF2PasswordHasher.salt": {
            "name": "salt",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBKDF2PasswordHasher.encode": {
            "name": "encode",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "salt": [
                    "str"
                ],
                "iterations": [
                    "str"
                ]
            }
        },
        "PBKDF2PasswordHasher.verify_password": {
            "name": "verify_password",
            "location": 70,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ],
                "encoded": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PBKDF2PasswordHasher.create_password": {
            "name": "create_password",
            "location": 76,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "engster-server-master/app/utils/serializer.py": {
        "jsonable_encoder": {
            "name": "jsonable_encoder",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "Optional[int]",
                    "Optional[float]",
                    "list"
                ],
                "include": [
                    "bool",
                    "int",
                    "float",
                    "List[Dict[str, Any]]",
                    "Union[None, List[str]]"
                ],
                "exclude": [
                    "bool",
                    "int",
                    "float",
                    "List[Dict[str, Any]]",
                    "Union[None, List[str]]"
                ],
                "by_alias": [
                    "str"
                ],
                "skip_defaults": [
                    "str"
                ],
                "include_none": [
                    "str"
                ],
                "custom_encoder": [
                    "str",
                    "bool",
                    "dict"
                ],
                "sqlalchemy_safe": [
                    "str"
                ]
            }
        },
        "JsonResponse": {
            "name": "JsonResponse",
            "location": 122,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "float",
                    "bool"
                ],
                "status": [
                    "dict",
                    "float",
                    "bool"
                ],
                "headers": [
                    "dict",
                    "float",
                    "bool"
                ],
                "content_type": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "engster-server-master/app/utils/__init__.py": {},
    "engster-server-master/app/vendors/sanic_oauth.py": {
        "UserInfo.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature._escape": {
            "name": "_escape",
            "location": 59,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "Signature.sign": {
            "name": "sign",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "consumer_secret": [],
                "method": [],
                "url": [],
                "oauth_token_secret": []
            }
        },
        "HmacSha1Signature.sign": {
            "name": "sign",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "consumer_secret": [],
                "method": [],
                "url": [],
                "oauth_token_secret": []
            }
        },
        "PlaintextSignature.sign": {
            "name": "sign",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "consumer_secret": [],
                "method": [],
                "url": [],
                "oauth_token_secret": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "aiohttp_session": [],
                "base_url": [],
                "authorize_url": [],
                "access_token_key": [],
                "access_token_url": [],
                "user_info_url": []
            }
        },
        "Client._get_url": {
            "name": "_get_url",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Client.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.user_parse": {
            "name": "user_parse",
            "location": 201,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "OAuth1Client.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "aiohttp_session": [],
                "consumer_key": [],
                "consumer_secret": [],
                "base_url": [],
                "authorize_url": [],
                "oauth_token": [],
                "oauth_token_secret": [],
                "request_token_url": [],
                "access_token_url": [],
                "access_token_key": [],
                "signature": [],
                "user_info_url": []
            }
        },
        "OAuth1Client.get_authorize_url": {
            "name": "get_authorize_url",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "request_token": []
            }
        },
        "OAuth2Client.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "aiohttp_session": [],
                "client_id": [],
                "client_secret": [],
                "base_url": [],
                "authorize_url": [],
                "access_token": [],
                "access_token_url": [],
                "access_token_key": [],
                "user_info_url": []
            }
        },
        "OAuth2Client.get_authorize_url": {
            "name": "get_authorize_url",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleClient.user_parse": {
            "name": "user_parse",
            "location": 465,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "FacebookClient.user_parse": {
            "name": "user_parse",
            "location": 501,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "NaverClient.user_parse": {
            "name": "user_parse",
            "location": 542,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "engster-server-master/app/vendors/__init__.py": {},
    "engster-server-master/app/views/auth.py": {
        "get_client": {
            "name": "get_client",
            "location": 80,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "starlette.requests.Request"
                ],
                "provider": [
                    "str",
                    "Request",
                    "sanic.requesRequest",
                    "requests.Request"
                ]
            }
        }
    },
    "engster-server-master/app/views/content.py": {},
    "engster-server-master/app/views/file.py": {},
    "engster-server-master/app/views/genre.py": {},
    "engster-server-master/app/views/subtitle.py": {
        "SubtitleToCSV._get_subtitle": {
            "name": "_get_subtitle",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "RandomSubtitles._get_required_ids": {
            "name": "_get_required_ids",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "SearchSubtitles._get_required_ids": {
            "name": "_get_required_ids",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "UserLikedSubtitles._get_required_ids": {
            "name": "_get_required_ids",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        }
    },
    "engster-server-master/app/views/translation.py": {
        "SearchTranslation._get_required_ids": {
            "name": "_get_required_ids",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "translations": []
            }
        },
        "UserLikedTranslations._get_required_ids": {
            "name": "_get_required_ids",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "translations": []
            }
        },
        "UserWrittenTranslations._get_required_ids": {
            "name": "_get_required_ids",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "translations": []
            }
        }
    },
    "engster-server-master/app/views/translation_review.py": {},
    "engster-server-master/app/views/user.py": {},
    "engster-server-master/app/views/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "engster-server-master/tests/conftest.py": {},
    "engster-server-master/tests/__init__.py": {},
    "engster-server-master/tests/core/test_reader.py": {
        "test_read_smi": {
            "name": "test_read_smi",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_read_srt": {
            "name": "test_read_srt",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_subtitle_matcher": {
            "name": "test_subtitle_matcher",
            "location": 68,
            "return": [],
            "arguments": {
                "subtitle": [],
                "translation": [],
                "matched": []
            }
        }
    },
    "engster-server-master/tests/core/__init__.py": {},
    "engster-server-master/tests/data/core_reader.py": {},
    "engster-server-master/tests/data/__init__.py": {}
}
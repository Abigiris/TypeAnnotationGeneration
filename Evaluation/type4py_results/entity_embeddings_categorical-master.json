{
    "entity_embeddings_categorical-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "entity_embeddings_categorical-master/docs/conf.py": {},
    "entity_embeddings_categorical-master/entity_embeddings/config.py": {
        "get_embedding_size": {
            "name": "get_embedding_size",
            "location": 16,
            "return": [
                "float",
                "numpy.ndarray",
                "List[int]",
                "bool",
                "Optional[float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "unique_values": [
                    "str",
                    "int"
                ]
            }
        },
        "generate_categories_from_df": {
            "name": "generate_categories_from_df",
            "location": 29,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Callable[[str], Any]]"
                ],
                "target_name": [
                    "str",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Category.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "bool",
                    "List[str]",
                    "List['cirq.Circuit']",
                    "int",
                    "list",
                    "str",
                    "Tuple[int, int, int]"
                ],
                "unique_values": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "target_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, list]",
                    "dict",
                    "Union[list, str]",
                    "Union[list, dict]"
                ],
                "train_ratio": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "target_processor": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ],
                "model_assembler": [
                    "bool",
                    "str"
                ],
                "epochs": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "verbose": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "artifacts_path": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Config.make_default_config": {
            "name": "make_default_config",
            "location": 107,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "csv_path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "target_name": [
                    "str"
                ],
                "target_type": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Container[\"Taxon\"]"
                ],
                "train_ratio": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "epochs": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "verbose": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "artifacts_path": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Config.make_custom_config": {
            "name": "make_custom_config",
            "location": 147,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "csv_path": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "target_name": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "train_ratio": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "target_processor": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "model_assembler": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "epochs": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "batch_size": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "verbose": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "artifacts_path": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Config.get_weights_path": {
            "name": "get_weights_path",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_labels_path": {
            "name": "get_labels_path",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_visualizations_dir": {
            "name": "get_visualizations_dir",
            "location": 196,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/embedder.py": {
        "Embedder.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "sphinx.config.Config"
                ]
            }
        },
        "Embedder.prepare_data": {
            "name": "prepare_data",
            "location": 22,
            "return": [
                "int",
                "List[int]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Embedder.perform_embedding": {
            "name": "perform_embedding",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/__init__.py": {},
    "entity_embeddings_categorical-master/entity_embeddings/network/assembler.py": {
        "get_model_assembler": {
            "name": "get_model_assembler",
            "location": 11,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "target_type": [
                    "entity_embeddings.processor.target_type.TargetType",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "Type[Any]"
                ],
                "n_unique_classes": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "str",
                    "Tuple[float, float]",
                    "Optional[dict]"
                ]
            }
        },
        "ModelAssembler.make_final_layer": {
            "name": "make_final_layer",
            "location": 22,
            "return": [
                "keras.engine.Layer"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ModelAssembler.compile_model": {
            "name": "compile_model",
            "location": 26,
            "return": [
                "keras.models.Model"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "keras.models.Model",
                    "Exception",
                    "int"
                ]
            }
        },
        "ModelAssembler.make_hidden_layers": {
            "name": "make_hidden_layers",
            "location": 29,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "List[str]",
                    "IO[str]",
                    "Optional[str]",
                    "sqlalchemy.engine.url.URL",
                    "bool"
                ]
            }
        },
        "BinaryClassificationAssembler.make_final_layer": {
            "name": "make_final_layer",
            "location": 39,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [
                    "keras.engine.Layer",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "BinaryClassificationAssembler.compile_model": {
            "name": "compile_model",
            "location": 44,
            "return": [
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "MulticlassClassificationAssembler.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_unique_classes": [
                    "bool",
                    "str",
                    "int",
                    "Callable[[], int]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MulticlassClassificationAssembler.make_final_layer": {
            "name": "make_final_layer",
            "location": 53,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [
                    "int",
                    "str",
                    "models.characters.mods_base.Mod",
                    "Callable[[], None]"
                ]
            }
        },
        "MulticlassClassificationAssembler.compile_model": {
            "name": "compile_model",
            "location": 58,
            "return": [
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "RegressionClassificationAssembler.make_final_layer": {
            "name": "make_final_layer",
            "location": 64,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [
                    "keras.engine.Layer",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "RegressionClassificationAssembler.compile_model": {
            "name": "compile_model",
            "location": 69,
            "return": [
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/network/network.py": {
        "EmbeddingNetwork.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ]
            }
        },
        "EmbeddingNetwork.__make_model": {
            "name": "__make_model",
            "location": 30,
            "return": [
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question",
                "src.autoks.callbacks.CallbackList"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingNetwork._make_embedding_layers": {
            "name": "_make_embedding_layers",
            "location": 44,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingNetwork.fit": {
            "name": "fit",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "X_train": [
                    "models.Model",
                    "float",
                    "Optional[numpy.ndarray]"
                ],
                "y_train": [
                    "numpy.ndarray",
                    "float",
                    "models.File"
                ],
                "X_val": [
                    "models.Model",
                    "float",
                    "Optional[numpy.ndarray]"
                ],
                "y_val": [
                    "numpy.ndarray",
                    "float",
                    "models.File"
                ]
            }
        },
        "EmbeddingNetwork._val_for_fit": {
            "name": "_val_for_fit",
            "location": 83,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float",
                    "List['world.PerceivedNoise']",
                    "numpy.ndarray",
                    "Exception",
                    "str"
                ]
            }
        },
        "EmbeddingNetwork._val_for_pred": {
            "name": "_val_for_pred",
            "location": 87,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/network/__init__.py": {},
    "entity_embeddings_categorical-master/entity_embeddings/processor/processor.py": {
        "TargetProcessor.process_target": {
            "name": "process_target",
            "location": 11,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BinaryClassificationProcessor.process_target": {
            "name": "process_target",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[List[str]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "list",
                    "List[int]"
                ]
            }
        },
        "MulticlassClassificationProcessor.process_target": {
            "name": "process_target",
            "location": 21,
            "return": [
                "bytearray",
                "numpy.ndarray",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "list",
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "RegressionProcessor.process_target": {
            "name": "process_target",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "list",
                    "List[int]",
                    "List[List[str]]",
                    "Tuple[int]",
                    "List[float]",
                    "List[List[int]]"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/processor/target_type.py": {},
    "entity_embeddings_categorical-master/entity_embeddings/processor/__init__.py": {},
    "entity_embeddings_categorical-master/entity_embeddings/util/dataframe_utils.py": {
        "load_guarantee_not_empty": {
            "name": "load_guarantee_not_empty",
            "location": 10,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "csv_path": [
                    "str",
                    "int"
                ]
            }
        },
        "get_all_columns_except": {
            "name": "get_all_columns_except",
            "location": 17,
            "return": [
                "str",
                "dict",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "column_to_skip": [
                    "pandas.DataFrame",
                    "str",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "create_random_dataframe": {
            "name": "create_random_dataframe",
            "location": 27,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "rows": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "cols": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "columns": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "create_random_csv": {
            "name": "create_random_csv",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "rows": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, int]"
                ],
                "cols": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, int]"
                ],
                "columns": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "remove_random_csv": {
            "name": "remove_random_csv",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/util/model_utils.py": {
        "get_weights": {
            "name": "get_weights",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "model": [
                    "List[dict]"
                ],
                "config": [
                    "entity_embeddings.Config",
                    "config.Config",
                    "Dict[str, Any]",
                    "sphinx.config.Config"
                ]
            }
        },
        "save_weights": {
            "name": "save_weights",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "weights": [
                    "list",
                    "Config",
                    "dict",
                    "config.Config"
                ],
                "config": [
                    "entity_embeddings.Config",
                    "backup.config.Config",
                    "dict",
                    "cerise.config.Config",
                    "str"
                ]
            }
        },
        "save_labels": {
            "name": "save_labels",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "labels": [
                    "list",
                    "bool",
                    "str",
                    "int"
                ],
                "config": [
                    "entity_embeddings.Config",
                    "dict",
                    "str",
                    "Config"
                ]
            }
        },
        "get_weights_from_layer": {
            "name": "get_weights_from_layer",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str, Any]"
                ],
                "layer_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/util/preprocessing_utils.py": {
        "series_to_list": {
            "name": "series_to_list",
            "location": 9,
            "return": [],
            "arguments": {
                "series": []
            }
        },
        "sample": {
            "name": "sample",
            "location": 21,
            "return": [],
            "arguments": {
                "X": [],
                "y": [],
                "n": []
            }
        },
        "get_X_y": {
            "name": "get_X_y",
            "location": 27,
            "return": [],
            "arguments": {
                "df": [],
                "name_target": []
            }
        },
        "label_encode": {
            "name": "label_encode",
            "location": 46,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "transpose_to_list": {
            "name": "transpose_to_list",
            "location": 64,
            "return": [],
            "arguments": {
                "X": []
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/util/processor_utils.py": {
        "get_target_processor": {
            "name": "get_target_processor",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "type": [
                    "int",
                    "str",
                    "Optional[List[int]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/util/validation_utils.py": {
        "check_csv_data": {
            "name": "check_csv_data",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "check_not_empty_dataframe": {
            "name": "check_not_empty_dataframe",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_target_name": {
            "name": "check_target_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "target_name": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "check_target_existent_in_df": {
            "name": "check_target_existent_in_df",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "target_name": [
                    "str"
                ],
                "df": [
                    "str"
                ]
            }
        },
        "check_train_ratio": {
            "name": "check_train_ratio",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "train_ratio": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_epochs": {
            "name": "check_epochs",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_batch_size": {
            "name": "check_batch_size",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "batch_size": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "check_weights_output": {
            "name": "check_weights_output",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "weights_output": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "check_target_processor": {
            "name": "check_target_processor",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "processor": [
                    "List[int]",
                    "slice",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "check_model_assembler": {
            "name": "check_model_assembler",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "assembler": [
                    "pandas.DataFrame",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/util/visualization_utils.py": {
        "make_visualizations": {
            "name": "make_visualizations",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "bool"
                ],
                "embeddings": [
                    "int",
                    "float",
                    "Tuple[int, int, int]",
                    "Tuple[int, int]",
                    "str"
                ],
                "df": [
                    "Dict[int, int]",
                    "List[dict]",
                    "bool",
                    "List[numpy.array]",
                    "List[str]"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "extension": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Sequence"
                ]
            }
        },
        "make_visualizations_from_config": {
            "name": "make_visualizations_from_config",
            "location": 67,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "config": [
                    "entity_embeddings.Config",
                    "config.Config",
                    "revlibs.connections.config.Config",
                    "sphinx.config.Config",
                    "str",
                    "dict"
                ],
                "extension": [
                    "str",
                    "sphinx.config.Config",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_not_single_embedding": {
            "name": "is_not_single_embedding",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "str",
                    "numpy.ndarray",
                    "bool",
                    "Set[str]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "make_plot_from_history": {
            "name": "make_plot_from_history",
            "location": 93,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "history": [
                    "bool",
                    "int",
                    "str"
                ],
                "output_path": [
                    "str"
                ],
                "extension": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/entity_embeddings/util/__init__.py": {},
    "entity_embeddings_categorical-master/example/custom/custom_config_example.py": {
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CustomProcessor.process_target": {
            "name": "process_target",
            "location": 16,
            "return": [
                "bytearray",
                "numpy.ndarray",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "list",
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "CustomAssembler.make_final_layer": {
            "name": "make_final_layer",
            "location": 22,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [
                    "keras.engine.Layer",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "CustomAssembler.compile_model": {
            "name": "compile_model",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "CustomAssembler.make_hidden_layers": {
            "name": "make_hidden_layers",
            "location": 35,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "List[str]",
                    "IO[str]",
                    "Optional[str]",
                    "sqlalchemy.engine.url.URL",
                    "bool"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/example/default/default_config_sample.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "entity_embeddings_categorical-master/tests/test_assembler.py": {
        "TestAssembler.make_config_for_type": {
            "name": "make_config_for_type",
            "location": 14,
            "return": [
                "dict",
                "box.conf.Config",
                "type",
                "Mapping[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "entity_embeddings.processor.target_type.TargetType",
                    "str",
                    "Optional[str]",
                    "Exception",
                    "Any"
                ]
            }
        },
        "TestAssembler.make_sample_layer": {
            "name": "make_sample_layer",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.test_activation_for_binary_is_sigmoid": {
            "name": "test_activation_for_binary_is_sigmoid",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.test_activation_for_multiclass_is_softmax": {
            "name": "test_activation_for_multiclass_is_softmax",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.test_activation_for_regression_is_sigmoid": {
            "name": "test_activation_for_regression_is_sigmoid",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.test_model_params_for_binary_classification": {
            "name": "test_model_params_for_binary_classification",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.test_model_params_for_multiclass_classification": {
            "name": "test_model_params_for_multiclass_classification",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.test_model_params_for_regression_classification": {
            "name": "test_model_params_for_regression_classification",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssembler.check_model_parameters": {
            "name": "check_model_parameters",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "django.db.models.Model",
                    "keras.engine.Layer",
                    "Dict[str, Any]",
                    "peewee.Model"
                ],
                "optimizer": [
                    "str",
                    "Model",
                    "int"
                ],
                "loss": [
                    "str",
                    "Model",
                    "Optional[str]",
                    "List[Tuple[int, int, float]]"
                ],
                "metrics": [
                    "str",
                    "Model",
                    "Optional[str]",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "TestAssembler.check_layer_properties": {
            "name": "check_layer_properties",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "str",
                    "keras.engine.Layer",
                    "Optional[Exception]"
                ],
                "activation": [
                    "str",
                    "BinaryIO",
                    "int",
                    "List[str]"
                ],
                "outputs": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "operation": [
                    "list",
                    "List[List[int]]",
                    "List[Tuple[bool, str]]"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_config.py": {
        "make_default_dataframe": {
            "name": "make_default_dataframe",
            "location": 57,
            "return": [
                "allennlp.common.util.JsonDict",
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {}
        },
        "TestConfig.test_default_config": {
            "name": "test_default_config",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_custom_config": {
            "name": "test_custom_config",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_embedding_size": {
            "name": "test_embedding_size",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomProcessor.process_target": {
            "name": "process_target",
            "location": 62,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[List[str]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "list",
                    "List[int]"
                ]
            }
        },
        "CustomAssembler.make_final_layer": {
            "name": "make_final_layer",
            "location": 68,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "previous_layer": [
                    "keras.engine.Layer",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "CustomAssembler.compile_model": {
            "name": "compile_model",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "CustomAssembler.make_hidden_layers": {
            "name": "make_hidden_layers",
            "location": 81,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "List[str]",
                    "IO[str]",
                    "Optional[str]",
                    "sqlalchemy.engine.url.URL",
                    "bool"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_dataframe_utils.py": {
        "TestDataframeUtils.test_create_random_dataframe": {
            "name": "test_create_random_dataframe",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataframeUtils.test_create_and_remove_random_csv": {
            "name": "test_create_and_remove_random_csv",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataframeUtils.test_load_guarantee_not_empty": {
            "name": "test_load_guarantee_not_empty",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataframeUtils.test_get_all_columns_except": {
            "name": "test_get_all_columns_except",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataframeUtils.__check_dataframe_data": {
            "name": "__check_dataframe_data",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "List[str]",
                    "list",
                    "int"
                ],
                "rows": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "cols": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "columns": [
                    "List[str]",
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_embedder.py": {
        "TestEmbedder.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedder.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedder.test_make_artifact_dir_when_not_existent": {
            "name": "test_make_artifact_dir_when_not_existent",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmbedder.make_default_config": {
            "name": "make_default_config",
            "location": 41,
            "return": [
                "dict",
                "Config",
                "Dict[str, str]",
                "Dict[str, Any]",
                "app.config.MQConfig",
                "Optional[dict]",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_network.py": {
        "TestNetwork.test_model_embedding_size": {
            "name": "test_model_embedding_size",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetwork.test_output_for_regression": {
            "name": "test_output_for_regression",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNetwork.test_output_for_binary_classification": {
            "name": "test_output_for_binary_classification",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_preprocessing_utils.py": {
        "TestPreprocessingUtils.test_transpose_to_list": {
            "name": "test_transpose_to_list",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocessingUtils.test_series_to_list": {
            "name": "test_series_to_list",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocessingUtils.test_label_encode": {
            "name": "test_label_encode",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocessingUtils.test_get_X_y": {
            "name": "test_get_X_y",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreprocessingUtils.__check_items": {
            "name": "__check_items",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X_array": [
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "int",
                    "str",
                    "bool"
                ],
                "feature_list": [
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "List[float]",
                    "list"
                ]
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_processor_utils.py": {
        "TestProcessorUtils.test_get_invalid_target_processor": {
            "name": "test_get_invalid_target_processor",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_validation_utils.py": {
        "TestValidationUtils.test_check_csv_data_not_existent": {
            "name": "test_check_csv_data_not_existent",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_csv_data_empty": {
            "name": "test_check_csv_data_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_not_empty_dataframe": {
            "name": "test_check_not_empty_dataframe",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_target_name": {
            "name": "test_check_target_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_target_existent_in_df": {
            "name": "test_check_target_existent_in_df",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_train_ratio_greater_than_one": {
            "name": "test_check_train_ratio_greater_than_one",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_train_ratio_equal_one": {
            "name": "test_check_train_ratio_equal_one",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_train_ratio_smaller_than_zero": {
            "name": "test_check_train_ratio_smaller_than_zero",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_train_ratio_equals_zero": {
            "name": "test_check_train_ratio_equals_zero",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_epochs": {
            "name": "test_check_epochs",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_batch_size": {
            "name": "test_check_batch_size",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_weights_output": {
            "name": "test_check_weights_output",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_target_processor": {
            "name": "test_check_target_processor",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidationUtils.test_check_model_assembler": {
            "name": "test_check_model_assembler",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/tests/test_visualization_utils.py": {
        "TestVisualizationUtils.test_make_visualizations_generate_artifacts": {
            "name": "test_make_visualizations_generate_artifacts",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity_embeddings_categorical-master/tests/__init__.py": {}
}
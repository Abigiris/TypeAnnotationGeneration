{
    "envelope-master/envelope/backend.py": {
        "commit": {
            "name": "commit",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Base.save": {
            "name": "save",
            "location": 18,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.update": {
            "name": "update",
            "location": 23,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.delete": {
            "name": "delete",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base._flush": {
            "name": "_flush",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "commit.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [
                    "tuple",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "envelope-master/envelope/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.debug_mode": {
            "name": "debug_mode",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.database_name": {
            "name": "database_name",
            "location": 18,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.database_path": {
            "name": "database_path",
            "location": 22,
            "return": [
                "str",
                "List[int]",
                "bool",
                "Union[pathlib.Path, str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.folder": {
            "name": "folder",
            "location": 26,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.snapshot_name": {
            "name": "snapshot_name",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.accounts": {
            "name": "accounts",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.accounts_names": {
            "name": "accounts_names",
            "location": 38,
            "return": [
                "List[str]",
                "str",
                "Dict[str, str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._load_config": {
            "name": "_load_config",
            "location": 43,
            "return": [
                "str",
                "IO",
                "Dict[str, Dict[str, str]]",
                "pathlib.Path",
                "dict",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._get_config_path": {
            "name": "_get_config_path",
            "location": 48,
            "return": [
                "Union[pathlib.Path, str]",
                "pathlib.Path",
                "pathlib.PurePath",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "envelope-master/envelope/ledger.py": {
        "Ledger.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.num_transactions": {
            "name": "num_transactions",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "sqlalchemy.MetaData",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.payees": {
            "name": "payees",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.currencies": {
            "name": "currencies",
            "location": 31,
            "return": [
                "str",
                "dict",
                "sqlalchemy.MetaData",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.accounts": {
            "name": "accounts",
            "location": 35,
            "return": [
                "Dict[str, Union[int, str]]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.start_date": {
            "name": "start_date",
            "location": 39,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.filter_transactions": {
            "name": "filter_transactions",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filter_attr": [
                    "Optional[bool]",
                    "Optional[str]",
                    "bool",
                    "tuple",
                    "dict",
                    "int"
                ],
                "value": [
                    "Optional[bool]",
                    "Optional[str]",
                    "bool",
                    "tuple",
                    "dict",
                    "int"
                ]
            }
        },
        "Ledger.last_import": {
            "name": "last_import",
            "location": 54,
            "return": [
                "bool",
                "Optional[str]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.end_date": {
            "name": "end_date",
            "location": 61,
            "return": [
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.running_balance": {
            "name": "running_balance",
            "location": 67,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "pendulum.DateTime"
                ],
                "end": [
                    "pendulum.DateTime"
                ]
            }
        },
        "Ledger.balance": {
            "name": "balance",
            "location": 73,
            "return": [
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.income_statement": {
            "name": "income_statement",
            "location": 85,
            "return": [
                "Dict[str, Any]",
                "dict",
                "sqlalchemy.MetaData",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "pendulum.DateTime",
                    "int"
                ],
                "end_date": [
                    "pendulum.DateTime",
                    "int"
                ]
            }
        },
        "Ledger.load_from_json": {
            "name": "load_from_json",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "pathlib.Path"
                ]
            }
        },
        "Ledger.import_transactions_from_file": {
            "name": "import_transactions_from_file",
            "location": 112,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "List[List[Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "envelope-master/envelope/parser.py": {
        "hash_file": {
            "name": "hash_file",
            "location": 42,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "file": [
                    "BinaryIO",
                    "pathlib.Path",
                    "List[str]",
                    "IO[bytes]"
                ]
            }
        },
        "parse_file": {
            "name": "parse_file",
            "location": 52,
            "return": [
                "pathlib.Path",
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "account_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "max_account_date": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "_ensure_no_duplicate_rows": {
            "name": "_ensure_no_duplicate_rows",
            "location": 64,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "rows": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "parse_csv": {
            "name": "parse_csv",
            "location": 78,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "bool"
                ],
                "account_name": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "float",
                    "Optional[List[str]]"
                ],
                "import_timestamp": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "float",
                    "Optional[List[str]]"
                ],
                "max_account_date": [
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "_parse_csv_row": {
            "name": "_parse_csv_row",
            "location": 105,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "List[str]"
                ],
                "mapping": [
                    "str"
                ],
                "account_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "import_timestamp": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "parse_ofx_statement": {
            "name": "parse_ofx_statement",
            "location": 134,
            "return": [
                "Iterable[str]",
                "int",
                "Set[int]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[str]"
                ],
                "account_name": [
                    "bool",
                    "List[str]",
                    "str",
                    "List['PydanticModelField']",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]",
                    "list"
                ],
                "import_timestamp": [
                    "bool",
                    "List[str]",
                    "str",
                    "List['PydanticModelField']",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]",
                    "list"
                ],
                "max_account_date": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_parse_ofx_transaction": {
            "name": "_parse_ofx_transaction",
            "location": 150,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Sequence[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "ofx_transaction": [],
                "account": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "mapping": [
                    "Dict[str, Any]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[str, int]",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, str]",
                    "dict"
                ],
                "import_timestamp": [
                    "str",
                    "List[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "_parse_decimal": {
            "name": "_parse_decimal",
            "location": 171,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "amount": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "separator": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "envelope-master/envelope/tools.py": {
        "list_files": {
            "name": "list_files",
            "location": 5,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[List, str]",
                    "list",
                    "Optional[str]"
                ]
            }
        }
    },
    "envelope-master/envelope/transaction.py": {
        "Transaction.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "date": [],
                "account": [],
                "amount": [],
                "payee": [],
                "currency": [],
                "purpose": [],
                "value_date": [],
                "category": [],
                "added_timestamp": [],
                "meta": []
            }
        },
        "Transaction.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__eq__": {
            "name": "__eq__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transaction.get_or_create": {
            "name": "get_or_create",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Transaction.iso_date": {
            "name": "iso_date",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.iso_value_date": {
            "name": "iso_value_date",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.as_dict": {
            "name": "as_dict",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.to_yaml": {
            "name": "to_yaml",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction._pendulum_to_datetime": {
            "name": "_pendulum_to_datetime",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "parsed": []
            }
        },
        "Transaction.from_yaml": {
            "name": "from_yaml",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Transaction.save": {
            "name": "save",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.update": {
            "name": "update",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.delete": {
            "name": "delete",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction._flush": {
            "name": "_flush",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "envelope-master/envelope/__init__.py": {},
    "envelope-master/envelope/__main__.py": {},
    "envelope-master/envelope/cli/commands.py": {
        "envelope": {
            "name": "envelope",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "list": {
            "name": "list",
            "location": 26,
            "return": [],
            "arguments": {
                "account": [],
                "n": []
            }
        },
        "edit": {
            "name": "edit",
            "location": 50,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "get": {
            "name": "get",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "income": {
            "name": "income",
            "location": 72,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": []
            }
        },
        "config": {
            "name": "config",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "balance": {
            "name": "balance",
            "location": 96,
            "return": [],
            "arguments": {
                "group": []
            }
        },
        "stats": {
            "name": "stats",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "import_files": {
            "name": "import_files",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "_load_transactions_from_file": {
            "name": "_load_transactions_from_file",
            "location": 122,
            "return": [],
            "arguments": {
                "file": [],
                "account_name": []
            }
        },
        "_get_account_name": {
            "name": "_get_account_name",
            "location": 131,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "_file_load_necessary": {
            "name": "_file_load_necessary",
            "location": 149,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "networth": {
            "name": "networth",
            "location": 159,
            "return": [],
            "arguments": {}
        }
    },
    "envelope-master/envelope/cli/output.py": {
        "pretty_dict": {
            "name": "pretty_dict",
            "location": 7,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "format_pendulum": {
            "name": "format_pendulum",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "format_float": {
            "name": "format_float",
            "location": 36,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "envelope-master/envelope/cli/__init__.py": {},
    "envelope-master/tests/conftest.py": {},
    "envelope-master/tests/__init__.py": {},
    "envelope-master/tests/integration/__init__.py": {},
    "envelope-master/tests/unit/test_ledger.py": {},
    "envelope-master/tests/unit/__init__.py": {}
}
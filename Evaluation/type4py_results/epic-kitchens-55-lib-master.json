{
    "epic-kitchens-55-lib-master/setup.py": {},
    "epic-kitchens-55-lib-master/docs/source/conf.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/labels.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/meta.py": {
        "set_version": {
            "name": "set_version",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "IO[bytes]",
                    "pathlib.Path"
                ]
            }
        },
        "set_datadir": {
            "name": "set_datadir",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "dir_": [
                    "str"
                ]
            }
        },
        "get_datadir": {
            "name": "get_datadir",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "verb_to_class": {
            "name": "verb_to_class",
            "location": 50,
            "return": [
                "str",
                "float",
                "List[Exception]",
                "dict"
            ],
            "arguments": {
                "verb": [
                    "str",
                    "float",
                    "List[Exception]",
                    "dict"
                ]
            }
        },
        "noun_to_class": {
            "name": "noun_to_class",
            "location": 66,
            "return": [
                "str",
                "float",
                "List[Exception]",
                "dict"
            ],
            "arguments": {
                "noun": [
                    "str",
                    "float",
                    "List[Exception]",
                    "dict"
                ]
            }
        },
        "class_to_verb": {
            "name": "class_to_verb",
            "location": 82,
            "return": [
                "List[str]",
                "Type",
                "type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ]
            }
        },
        "class_to_noun": {
            "name": "class_to_noun",
            "location": 97,
            "return": [
                "List[str]",
                "Type",
                "type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ]
            }
        },
        "action_tuples_to_ids": {
            "name": "action_tuples_to_ids",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "action_classes": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "action_id_from_verb_noun": {
            "name": "action_id_from_verb_noun",
            "location": 127,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "verb": [
                    "int",
                    "bool",
                    "list",
                    "Tuple[float]"
                ],
                "noun": [
                    "int",
                    "bool",
                    "list",
                    "Tuple[float]"
                ]
            }
        },
        "noun_id_from_action_id": {
            "name": "noun_id_from_action_id",
            "location": 149,
            "return": [
                "str",
                "dict",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "action": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "verb_id_from_action_id": {
            "name": "verb_id_from_action_id",
            "location": 172,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "action_id": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "noun_classes": {
            "name": "noun_classes",
            "location": 192,
            "return": [
                "Callable[..., T]",
                "Type",
                "Optional[bool]",
                "str"
            ],
            "arguments": {}
        },
        "verb_classes": {
            "name": "verb_classes",
            "location": 205,
            "return": [
                "Callable[..., T]",
                "Type",
                "Optional[bool]",
                "str"
            ],
            "arguments": {}
        },
        "many_shot_verbs": {
            "name": "many_shot_verbs",
            "location": 218,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {}
        },
        "many_shot_nouns": {
            "name": "many_shot_nouns",
            "location": 226,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {}
        },
        "many_shot_actions": {
            "name": "many_shot_actions",
            "location": 234,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {}
        },
        "is_many_shot_action": {
            "name": "is_many_shot_action",
            "location": 245,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "action_class": [
                    "set",
                    "int",
                    "Tuple[type]"
                ]
            }
        },
        "is_many_shot_verb": {
            "name": "is_many_shot_verb",
            "location": 257,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "verb_class": [
                    "set",
                    "int",
                    "Tuple[type]"
                ]
            }
        },
        "is_many_shot_noun": {
            "name": "is_many_shot_noun",
            "location": 268,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "noun_class": [
                    "set",
                    "int",
                    "Tuple[type]"
                ]
            }
        },
        "training_narrations": {
            "name": "training_narrations",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "training_labels": {
            "name": "training_labels",
            "location": 290,
            "return": [
                "Sequence[str]",
                "int",
                "str",
                "pathlib.Path",
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "training_object_labels": {
            "name": "training_object_labels",
            "location": 300,
            "return": [
                "Sequence[str]",
                "int",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "pathlib.Path",
                "dict",
                "Dict[str, Any]",
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "test_timestamps": {
            "name": "test_timestamps",
            "location": 310,
            "return": [
                "pandas.DataFrame",
                "pathlib.Path"
            ],
            "arguments": {
                "split": [
                    "str"
                ]
            }
        },
        "video_descriptions": {
            "name": "video_descriptions",
            "location": 335,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {}
        },
        "video_info": {
            "name": "video_info",
            "location": 345,
            "return": [
                "str",
                "bytes",
                "pathlib.Path",
                "dict",
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/metrics.py": {
        "compute_metrics": {
            "name": "compute_metrics",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "groundtruth_df": [
                    "str",
                    "AsyncGenerator"
                ],
                "scores": [
                    "str",
                    "float"
                ],
                "many_shot_verbs": [
                    "Optional[numpy.ndarray]",
                    "pandas.DataFrame",
                    "Optional[bytes]",
                    "Optional[\"Outcome\"]"
                ],
                "many_shot_nouns": [
                    "Optional[numpy.ndarray]",
                    "pandas.DataFrame",
                    "Optional[bytes]",
                    "Optional[\"Outcome\"]"
                ],
                "many_shot_actions": [
                    "Optional[numpy.ndarray]",
                    "pandas.DataFrame",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "action_priors": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "compute_class_aware_metrics": {
            "name": "compute_class_aware_metrics",
            "location": 149,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "groundtruth_df": [
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "ranks": [
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "top_k": [
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "compute_class_agnostic_metrics": {
            "name": "compute_class_agnostic_metrics",
            "location": 191,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "groundtruth_df": [
                    "pandas.DataFrame",
                    "Dict[str, numpy.ndarray]"
                ],
                "ranks": [
                    "Dict[str, numpy.ndarray]",
                    "Optional[str]",
                    "str"
                ],
                "many_shot_verbs": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "many_shot_nouns": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "many_shot_actions": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "topk_accuracy": {
            "name": "topk_accuracy",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rankings": [
                    "str",
                    "int",
                    "bool"
                ],
                "labels": [
                    "str",
                    "int",
                    "bool"
                ],
                "ks": [
                    "str",
                    "int",
                    "Tuple[bytes, bytes]",
                    "Optional[str]"
                ]
            }
        },
        "precision_recall": {
            "name": "precision_recall",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rankings": [
                    "str",
                    "Callable",
                    "Union[dict, list]",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "labels": [
                    "Optional[int]",
                    "str",
                    "numpy.array"
                ],
                "classes": [
                    "bool",
                    "Callable",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "_exclude_non_existent_classes": {
            "name": "_exclude_non_existent_classes",
            "location": 378,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "classes": [
                    "pandas.Series",
                    "numpy.ndarray",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "labels": [
                    "pandas.Series",
                    "numpy.ndarray",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_check_label_predictions_preconditions": {
            "name": "_check_label_predictions_preconditions",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "rankings": [
                    "numpy.ndarray",
                    "bytes",
                    "str",
                    "int"
                ],
                "labels": [
                    "numpy.ndarray",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/scoring.py": {
        "compute_action_scores": {
            "name": "compute_action_scores",
            "location": 5,
            "return": [],
            "arguments": {
                "verb_scores": [
                    "Optional[float]",
                    "float"
                ],
                "noun_scores": [
                    "Optional[float]",
                    "float"
                ],
                "top_k": [
                    "int",
                    "bool"
                ],
                "action_priors": [
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "scores_to_ranks": {
            "name": "scores_to_ranks",
            "location": 69,
            "return": [
                "numpy.ndarray",
                "str",
                "Dict[str, Any]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "scores": [
                    "numpy.ndarray",
                    "float",
                    "dict",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "scores_dict_to_ranks": {
            "name": "scores_dict_to_ranks",
            "location": 91,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "scores_dict": [
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Dict[str, str]",
                    "Dict[str, bool]"
                ]
            }
        },
        "top_scores": {
            "name": "top_scores",
            "location": 103,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "scores": [
                    "Union[str, int, float]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "top_k": [
                    "int",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "softmax": {
            "name": "softmax",
            "location": 130,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "_scores_array_to_ranks": {
            "name": "_scores_array_to_ranks",
            "location": 163,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "scores": [
                    "numpy.ndarray",
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        },
        "_scores_dict_to_ranks": {
            "name": "_scores_dict_to_ranks",
            "location": 188,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "scores": [
                    "List[Dict[int, float]]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable[[], T]",
                    "Iterator[str]"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/time.py": {
        "timestamp_to_seconds": {
            "name": "timestamp_to_seconds",
            "location": 8,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[int]"
                ]
            }
        },
        "seconds_to_timestamp": {
            "name": "seconds_to_timestamp",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "total_seconds": [
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "timestamp_to_frame": {
            "name": "timestamp_to_frame",
            "location": 65,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "timestamp": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "fps": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "flow_frame_count": {
            "name": "flow_frame_count",
            "location": 95,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "rgb_frame": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "stride": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "dilation": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/video.py": {
        "iterate_frame_dir": {
            "name": "iterate_frame_dir",
            "location": 72,
            "return": [
                "typing.Iterator[typing.Tuple[pathlib.Path, pathlib.Path]]"
            ],
            "arguments": {
                "root": [
                    "pathlib.Path",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "split_dataset_frames": {
            "name": "split_dataset_frames",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "modality_iterator": [
                    "str",
                    "bytes"
                ],
                "frames_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[\"Address\"]",
                    "int"
                ],
                "segment_root_dir": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]"
                ],
                "annotations": [
                    "str",
                    "Optional[Union[int, Any]]",
                    "Sequence[str]",
                    "pandas.DataFrame",
                    "Union[str, os.PathLike]"
                ],
                "frame_format": [
                    "str",
                    "bytes"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "get_narration": {
            "name": "get_narration",
            "location": 126,
            "return": [
                "MutableMapping"
            ],
            "arguments": {
                "annotation": [
                    "str",
                    "bool"
                ]
            }
        },
        "split_video_frames": {
            "name": "split_video_frames",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "modality_iterator": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "Optional[List[Any]]",
                    "Union[str, int]"
                ],
                "frame_format": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "video_annotations": [
                    "pandas.DataFrame",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "segment_root_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "video_dir": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "_split_frames_by_segment": {
            "name": "_split_frames_by_segment",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "frame_format": [
                    "pathlib.Path",
                    "str",
                    "dict"
                ],
                "frame_iterator": [
                    "bool",
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "segment_dir": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "video_dir": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "ModalityIterator.frame_iterator": {
            "name": "frame_iterator",
            "location": 22,
            "return": [
                "typing.Iterable[builtins.int]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "bool"
                ],
                "stop": [
                    "int",
                    "bool"
                ]
            }
        },
        "RGBModalityIterator.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fps": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RGBModalityIterator.frame_iterator": {
            "name": "frame_iterator",
            "location": 40,
            "return": [
                "str",
                "numpy.ndarray",
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "stop": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FlowModalityIterator.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dilation": [
                    "float",
                    "numpy.array",
                    "int",
                    "tuple",
                    "str",
                    "bool",
                    "Callable"
                ],
                "stride": [
                    "float",
                    "numpy.array",
                    "int",
                    "tuple",
                    "str",
                    "bool",
                    "Callable"
                ],
                "bound": [
                    "float",
                    "numpy.array",
                    "int",
                    "tuple",
                    "str",
                    "bool",
                    "Callable"
                ],
                "rgb_fps": [
                    "float",
                    "numpy.array",
                    "int",
                    "tuple",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "FlowModalityIterator.frame_iterator": {
            "name": "frame_iterator",
            "location": 62,
            "return": [
                "str",
                "numpy.ndarray",
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "float",
                    "str",
                    "Optional[Callable]"
                ],
                "stop": [
                    "int",
                    "float",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "FlowModalityIterator._seconds_to_flow_frame_index": {
            "name": "_seconds_to_flow_frame_index",
            "location": 67,
            "return": [
                "str",
                "pandas.DataFrame",
                "pandas.Series",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "pandas.DataFrame",
                    "pandas.Series",
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/__init__.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/__version__.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/dataset/epic_dataset.py": {
        "_verb_class_getter": {
            "name": "_verb_class_getter",
            "location": 17,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "metadata": [
                    "Callable[..., T]",
                    "Type",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "_noun_class_getter": {
            "name": "_noun_class_getter",
            "location": 21,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "metadata": [
                    "Callable[..., T]",
                    "Type",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "GulpVideoSegment.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_metadata_dict": [
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "class_getter": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "GulpVideoSegment.id": {
            "name": "id",
            "location": 63,
            "return": [
                "int",
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GulpVideoSegment.label": {
            "name": "label",
            "location": 68,
            "return": [
                "bool",
                "dict",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GulpVideoSegment.num_frames": {
            "name": "num_frames",
            "location": 78,
            "return": [
                "int",
                "Callable[[T], List[T]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GulpVideoSegment.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "GulpVideoSegment.__getattr__": {
            "name": "__getattr__",
            "location": 85,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "GulpVideoSegment.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [
                "str",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GulpVideoSegment.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "str",
                "Exception",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpicVideoDataset.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": [
                    "float",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "class_type": [
                    "bool",
                    "str",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "Optional[Callable[[bool], None]]"
                ]
            }
        },
        "EpicVideoDataset.video_segments": {
            "name": "video_segments",
            "location": 152,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpicVideoDataset.load_frames": {
            "name": "load_frames",
            "location": 159,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "int",
                    "List[int]",
                    "list",
                    "Callable[[T], bool]"
                ],
                "indices": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[str, int]"
                ]
            }
        },
        "EpicVideoDataset.__len__": {
            "name": "__len__",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpicVideoDataset.__getitem__": {
            "name": "__getitem__",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "EpicVideoDataset.__contains__": {
            "name": "__contains__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "int",
                    "bytes"
                ]
            }
        },
        "EpicVideoDataset.__iter__": {
            "name": "__iter__",
            "location": 195,
            "return": [
                "str",
                "Callable",
                "int",
                "bytes",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpicVideoDataset._read_segments": {
            "name": "_read_segments",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gulp_dir_meta_dict": [
                    "str",
                    "Optional[str]"
                ],
                "class_getter": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EpicVideoDataset._sample_video_at_index": {
            "name": "_sample_video_at_index",
            "location": 212,
            "return": [
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "bool"
                ],
                "index": [
                    "int",
                    "list"
                ]
            }
        },
        "EpicVideoFlowDataset._sample_video_at_index": {
            "name": "_sample_video_at_index",
            "location": 226,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "bool"
                ],
                "index": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/dataset/video_dataset.py": {
        "VideoSegment.id": {
            "name": "id",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoSegment.label": {
            "name": "label",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoSegment.num_frames": {
            "name": "num_frames",
            "location": 21,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDataset.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_count": [
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "dict",
                    "bool"
                ],
                "segment_filter": [
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "sample_transform": [
                    "bool",
                    "int",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "VideoDataset.video_segments": {
            "name": "video_segments",
            "location": 54,
            "return": [
                "typing.List[VideoSegment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDataset.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDataset.load_frames": {
            "name": "load_frames",
            "location": 60,
            "return": [
                "typing.List[PIL.Image.Image]"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "Optional[List[int]]",
                    "str"
                ],
                "idx": [
                    "Optional[List[int]]",
                    "str"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/dataset/__init__.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/gulp/adapter.py": {
        "_intersperse": {
            "name": "_intersperse",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "EpicDatasetAdapter.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "video_segment_dir": [],
                "annotations_df": [],
                "frame_size": [],
                "extension": [],
                "labelled": []
            }
        },
        "EpicDatasetAdapter.iter_data": {
            "name": "iter_data",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "slice_element": []
            }
        },
        "EpicDatasetAdapter.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EpicDatasetAdapter._transform_annotations": {
            "name": "_transform_annotations",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "annotations": [],
                "labelled": []
            }
        },
        "EpicDatasetAdapter._segment_metadata_to_clip_id": {
            "name": "_segment_metadata_to_clip_id",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "meta": []
            }
        },
        "EpicDatasetAdapter._find_frames": {
            "name": "_find_frames",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "folder": []
            }
        },
        "EpicFlowDatasetAdapter.iter_data": {
            "name": "iter_data",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "slice_element": []
            }
        },
        "EpicFlowDatasetAdapter._find_uv_frames": {
            "name": "_find_uv_frames",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "meta": []
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/gulp/visualisation.py": {
        "_grey_to_rgb": {
            "name": "_grey_to_rgb",
            "location": 12,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "frames": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "clipify_rgb": {
            "name": "clipify_rgb",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "frames": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "clipify_flow": {
            "name": "clipify_flow",
            "location": 52,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "frames": []
            }
        },
        "combine_flow_uv_frames": {
            "name": "combine_flow_uv_frames",
            "location": 73,
            "return": [
                "Dict[str, int]",
                "int",
                "Iterable[str]",
                "numpy.ndarray",
                "dict"
            ],
            "arguments": {
                "uv_frames": [
                    "int",
                    "str",
                    "List[int]",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "hstack_frames": {
            "name": "hstack_frames",
            "location": 88,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Visualiser.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Visualiser.show": {
            "name": "show",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "bytearray"
                ]
            }
        },
        "Visualiser._clipify_frames": {
            "name": "_clipify_frames",
            "location": 109,
            "return": [
                "moviepy.editor.ImageSequenceClip"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "fps": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RgbVisualiser._clipify_frames": {
            "name": "_clipify_frames",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fps": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FlowVisualiser._clipify_frames": {
            "name": "_clipify_frames",
            "location": 125,
            "return": [
                "int",
                "List[str]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fps": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/gulp/__init__.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/gulp/__main__.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/internal/loading.py": {
        "_read_video_info": {
            "name": "_read_video_info",
            "location": 35,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "fp": [
                    "str",
                    "list",
                    "pathlib.Path"
                ]
            }
        },
        "AnnotationRepository.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ],
                "local_dir": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "str",
                    "Optional[TextIO]",
                    "Path",
                    "pathlib.Path",
                    "Union[str, pathlib.Path, None]"
                ]
            }
        },
        "AnnotationRepository.local_dir": {
            "name": "local_dir",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ]
            }
        },
        "AnnotationRepository.inverse_noun_lookup": {
            "name": "inverse_noun_lookup",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.inverse_verb_lookup": {
            "name": "inverse_verb_lookup",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.train_action_labels": {
            "name": "train_action_labels",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.train_object_labels": {
            "name": "train_object_labels",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.test_seen_timestamps": {
            "name": "test_seen_timestamps",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.test_unseen_timestamps": {
            "name": "test_unseen_timestamps",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.verb_classes": {
            "name": "verb_classes",
            "location": 127,
            "return": [
                "IO",
                "Type[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.noun_classes": {
            "name": "noun_classes",
            "location": 130,
            "return": [
                "IO",
                "Type[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.many_shot_verbs": {
            "name": "many_shot_verbs",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.many_shot_nouns": {
            "name": "many_shot_nouns",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.many_shot_actions": {
            "name": "many_shot_actions",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.train_action_narrations": {
            "name": "train_action_narrations",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.video_descriptions": {
            "name": "video_descriptions",
            "location": 145,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationRepository.video_info": {
            "name": "video_info",
            "location": 148,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loaders.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_loaders": [
                    "str",
                    "pathlib.Path",
                    "BinaryIO"
                ],
                "filetype_loaders": [
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "Loaders.__getitem__": {
            "name": "__getitem__",
            "location": 159,
            "return": [
                "str",
                "Dict[str, Any]",
                "IO"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "Loaders._get_filetype": {
            "name": "_get_filetype",
            "location": 173,
            "return": [
                "Optional[str]",
                "str",
                "pathx.Path",
                "int",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "HttpFolder.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "local_dir": [
                    "pathlib.Path",
                    "str",
                    "Sequence[str]",
                    "Union[str, pathlib.Path]",
                    "cerulean.Path"
                ],
                "loaders": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HttpFolder.load_file": {
            "name": "load_file",
            "location": 185,
            "return": [
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "HttpFolder._maybe_download": {
            "name": "_maybe_download",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "file_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/internal/utils.py": {
        "before": {
            "name": "before",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "before_fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "maybe_download": {
            "name": "maybe_download",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "before.decorator": {
            "name": "decorator",
            "location": 14,
            "return": [
                "bool",
                "List[List[int]]",
                "Callable[[int], None]"
            ],
            "arguments": {
                "fn": [
                    "bytes",
                    "T",
                    "dict"
                ]
            }
        },
        "before.decorator.wrapped_fn": {
            "name": "wrapped_fn",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/internal/__init__.py": {},
    "epic-kitchens-55-lib-master/epic_kitchens/preprocessing/split_segments.py": {
        "main": {
            "name": "main",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "epic-kitchens-55-lib-master/epic_kitchens/preprocessing/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/system/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/system/gulp/test_adapter.py": {
        "test_gulping_labelled_rgb_segments": {
            "name": "test_gulping_labelled_rgb_segments",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_gulping_unlabelled_rgb_segments": {
            "name": "test_gulping_unlabelled_rgb_segments",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_gulping_labelled_flow_segments": {
            "name": "test_gulping_labelled_flow_segments",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "Optional[str]"
                ]
            }
        },
        "test_gulping_unlabelled_flow_segments": {
            "name": "test_gulping_unlabelled_flow_segments",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "Optional[str]"
                ]
            }
        },
        "assert_number_of_segments": {
            "name": "assert_number_of_segments",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "gulp_dir": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "number_of_segments": [
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "assert_gulped_flow_frames_similar_to_on_disk": {
            "name": "assert_gulped_flow_frames_similar_to_on_disk",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "gulp_dir": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "annotations": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "segment_dir": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "uid": [
                    "str",
                    "Optional[str]"
                ],
                "min_ssim": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "assert_gulped_rgb_frames_similar_to_on_disk": {
            "name": "assert_gulped_rgb_frames_similar_to_on_disk",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "gulp_dir": [
                    "str",
                    "bool",
                    "int"
                ],
                "annotations": [
                    "str",
                    "Optional[TextIO]",
                    "int",
                    "Union[str, bool]",
                    "list",
                    "bool"
                ],
                "segment_dir": [
                    "str",
                    "Optional[TextIO]",
                    "int",
                    "Union[str, bool]",
                    "list",
                    "bool"
                ],
                "uid": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "max_discrepancy": [
                    "int"
                ]
            }
        },
        "get_segment_path": {
            "name": "get_segment_path",
            "location": 128,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "root_segment_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "annotations": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "axis": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "uid": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "read_images": {
            "name": "read_images",
            "location": 141,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "paths": [
                    "List[str]"
                ]
            }
        },
        "bgr_to_rgb": {
            "name": "bgr_to_rgb",
            "location": 151,
            "return": [
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray",
                    "numpy.array",
                    "str",
                    "int"
                ]
            }
        },
        "gulp": {
            "name": "gulp",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "segment_root_dir": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "gulp_dir": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "label_path": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "modality": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "labelled": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/gulp/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/system/meta/conftest.py": {
        "tmp_datadir": {
            "name": "tmp_datadir",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "Optional[Any]",
                    "Union[str, Tuple[Any]]",
                    "List[int]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/test_classes.py": {
        "test_reading_verb_classes": {
            "name": "test_reading_verb_classes",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_datadir": [
                    "str"
                ]
            }
        },
        "test_reading_noun_classes": {
            "name": "test_reading_noun_classes",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_datadir": [
                    "str"
                ]
            }
        },
        "test_reading_many_shot_verbs": {
            "name": "test_reading_many_shot_verbs",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_reading_many_shot_nouns": {
            "name": "test_reading_many_shot_nouns",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_reading_many_shot_actions": {
            "name": "test_reading_many_shot_actions",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/test_descriptions.py": {
        "descriptions": {
            "name": "descriptions",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "tmp_datadir": [
                    "bool",
                    "List[str]",
                    "int",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "test_descriptions_has_at_least_432_entries": {
            "name": "test_descriptions_has_at_least_432_entries",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "descriptions": []
            }
        },
        "test_descriptions_has_video_id_index": {
            "name": "test_descriptions_has_video_id_index",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "descriptions": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_description_has_columns": {
            "name": "test_description_has_columns",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "str"
                ],
                "descriptions": [
                    "str"
                ]
            }
        },
        "test_descriptions_reads_date_and_time_to_datetime": {
            "name": "test_descriptions_reads_date_and_time_to_datetime",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "descriptions": [
                    "str"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/test_narrations.py": {
        "training_narrations": {
            "name": "training_narrations",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmp_datadir": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_training_narrations_has_at_least_20_000_entries": {
            "name": "test_training_narrations_has_at_least_20_000_entries",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "training_narrations": [
                    "str",
                    "float"
                ]
            }
        },
        "test_training_narrations_has_columns": {
            "name": "test_training_narrations_has_columns",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "str"
                ],
                "training_narrations": [
                    "str"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/test_test.py": {
        "test_seen_timestamps": {
            "name": "test_seen_timestamps",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_unseen_timestamps": {
            "name": "test_unseen_timestamps",
            "location": 12,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_timestamps": {
            "name": "test_timestamps",
            "location": 17,
            "return": [],
            "arguments": {
                "test_seen_timestamps": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "test_unseen_timestamps": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_seen_split_has_more_than_8000_items": {
            "name": "test_seen_split_has_more_than_8000_items",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "test_seen_timestamps": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_unseen_split_has_more_than_1000_items": {
            "name": "test_unseen_split_has_more_than_1000_items",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "test_unseen_timestamps": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_seen_split_has_uid_index": {
            "name": "test_seen_split_has_uid_index",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_seen_timestamps": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_unseen_split_has_uid_index": {
            "name": "test_unseen_split_has_uid_index",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "test_unseen_timestamps": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_all_timestamps_is_as_long_as_sum_of_both_timestamp_splits": {
            "name": "test_all_timestamps_is_as_long_as_sum_of_both_timestamp_splits",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "test_timestamps": [
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]"
                ],
                "test_unseen_timestamps": [
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]"
                ],
                "test_seen_timestamps": [
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_seen_timestamp_has_column": {
            "name": "test_seen_timestamp_has_column",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "List[str]",
                    "str"
                ],
                "test_seen_timestamps": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_unseen_timestamp_has_column": {
            "name": "test_unseen_timestamp_has_column",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "List[str]",
                    "str"
                ],
                "test_unseen_timestamps": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/test_train.py": {
        "training_labels": {
            "name": "training_labels",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "training_object_labels": {
            "name": "training_object_labels",
            "location": 14,
            "return": [
                "str",
                "dict",
                "Sequence[str]",
                "int",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "test_training_action_labels_has_more_than_20000_items": {
            "name": "test_training_action_labels_has_more_than_20000_items",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "training_labels": [
                    "List[int]"
                ]
            }
        },
        "test_training_action_labels_has_uid_index": {
            "name": "test_training_action_labels_has_uid_index",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "training_labels": [
                    "bytes",
                    "str",
                    "Callable[[], str]",
                    "int"
                ]
            }
        },
        "test_training_action_labels_has_column": {
            "name": "test_training_action_labels_has_column",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "training_labels": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "test_training_object_labels_has_column": {
            "name": "test_training_object_labels_has_column",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "int",
                    "str"
                ],
                "training_object_labels": [
                    "int",
                    "str"
                ]
            }
        },
        "test_training_object_labels_has_over_350_000_rows": {
            "name": "test_training_object_labels_has_over_350_000_rows",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "training_object_labels": [
                    "List[int]",
                    "Union[str, float]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_training_object_labels_has_list_of_bounding_boxes_per_row": {
            "name": "test_training_object_labels_has_list_of_bounding_boxes_per_row",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "training_object_labels": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_training_object_labels_has_4_tuple_bounding_boxes": {
            "name": "test_training_object_labels_has_4_tuple_bounding_boxes",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "training_object_labels": [
                    "int",
                    "str"
                ]
            }
        },
        "test_training_object_labels_has_4_tuple_bounding_boxes.all_fours": {
            "name": "all_fours",
            "location": 69,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "all_fours_so_far": [
                    "bool",
                    "str",
                    "Callable",
                    "int",
                    "Sequence[int]"
                ],
                "bounding_boxes": [
                    "bool",
                    "str",
                    "Callable",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/test_video_info.py": {
        "video_info": {
            "name": "video_info",
            "location": 7,
            "return": [
                "dict",
                "str",
                "List[dict]",
                "float",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "tmp_datadir": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "test_video_info_has_video_id_index": {
            "name": "test_video_info_has_video_id_index",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "video_info": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_video_info_has_at_least_432_entries": {
            "name": "test_video_info_has_at_least_432_entries",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "video_info": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "test_video_info_has_columns": {
            "name": "test_video_info_has_columns",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "col": [
                    "str",
                    "dict",
                    "Optional[List[T]]",
                    "int"
                ],
                "video_info": [
                    "str",
                    "dict",
                    "Optional[List[T]]",
                    "int"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/meta/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/system/preprocessing/test_split_segments.py": {
        "test_splitting_labelled_rgb": {
            "name": "test_splitting_labelled_rgb",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "tests.e2e.Helper",
                    "pathlib.Path"
                ]
            }
        },
        "test_splitting_unlabelled_rgb": {
            "name": "test_splitting_unlabelled_rgb",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pypi2nix.path.Path",
                    "Callable",
                    "pathlib.Path"
                ]
            }
        },
        "test_splitting_labelled_flow": {
            "name": "test_splitting_labelled_flow",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_splitting_unlabelled_flow": {
            "name": "test_splitting_unlabelled_flow",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "split_actions": {
            "name": "split_actions",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "video_id": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "frame_dir": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "segment_dir": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "annotations_path": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "modality": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "get_frame_dir": {
            "name": "get_frame_dir",
            "location": 108,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "modality": [
                    "str",
                    "int"
                ],
                "participant_id": [
                    "str",
                    "int"
                ],
                "video_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_segment_dir": {
            "name": "get_segment_dir",
            "location": 112,
            "return": [
                "str",
                "pathlib.Path",
                "piro.parser.Schema",
                "Iterable[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "pathlib.Path"
                ],
                "participant_id": [
                    "str",
                    "int"
                ],
                "video_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/system/preprocessing/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/unit/test_metrics.py": {
        "TestPrecision.test_all_tp": {
            "name": "test_all_tp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecision.test_all_fp": {
            "name": "test_all_fp",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecision.test_no_fp_and_no_tp": {
            "name": "test_no_fp_and_no_tp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecision.test_filter_existing_class": {
            "name": "test_filter_existing_class",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecision.test_filter_nonexisting_class": {
            "name": "test_filter_nonexisting_class",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecision.test_throws_exception_if_labels_and_ranks_are_different_lengths": {
            "name": "test_throws_exception_if_labels_and_ranks_are_different_lengths",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecall.test_all_tp": {
            "name": "test_all_tp",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecall.test_all_fn": {
            "name": "test_all_fn",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyAtK.test_at_1": {
            "name": "test_at_1",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyAtK.test_at_2": {
            "name": "test_at_2",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyAtK.test_at_3": {
            "name": "test_at_3",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyAtK.test_at_1_and_3": {
            "name": "test_at_1_and_3",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_verb_accuracy_at_1": {
            "name": "test_verb_accuracy_at_1",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_verb_accuracy_at_5": {
            "name": "test_verb_accuracy_at_5",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_noun_accuracy_at_1": {
            "name": "test_noun_accuracy_at_1",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_noun_accuracy_at_5": {
            "name": "test_noun_accuracy_at_5",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_action_accuracy_at_1": {
            "name": "test_action_accuracy_at_1",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_action_accuracy_at_5": {
            "name": "test_action_accuracy_at_5",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_verb_precision": {
            "name": "test_verb_precision",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_verb_recall": {
            "name": "test_verb_recall",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_noun_precision": {
            "name": "test_noun_precision",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_noun_recall": {
            "name": "test_noun_recall",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_action_recall": {
            "name": "test_action_recall",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeMetrics.test_action_precision": {
            "name": "test_action_precision",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/unit/test_scoring.py": {
        "TestComputeActionScores.test_action_scores_without_prior": {
            "name": "test_action_scores_without_prior",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeActionScores.test_action_scores_with_priors": {
            "name": "test_action_scores_with_priors",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/unit/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/unit/internal/test_loading.py": {
        "http_folder": {
            "name": "http_folder",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "dummy_path_mkdir": {
            "name": "dummy_path_mkdir",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "dummy_urlretrieve": {
            "name": "dummy_urlretrieve",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "Iterable[Any]"
                ]
            }
        },
        "TestHttpFolder.test_load_file_downloads_file_if_it_doesnt_exist": {
            "name": "test_load_file_downloads_file_if_it_doesnt_exist",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "pathlib.Path"
                ],
                "http_folder": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestHttpFolder.test_load_file_uses_loader_for_file": {
            "name": "test_load_file_uses_loader_for_file",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "pathlib.Path"
                ],
                "http_folder": [
                    "path.Path",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestHttpFolder.test_load_file_caches_file_load": {
            "name": "test_load_file_caches_file_load",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "pathlib.Path"
                ],
                "http_folder": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestHttpFolder.test_load_file_creates_parent_dir_if_it_doesnt_exist": {
            "name": "test_load_file_creates_parent_dir_if_it_doesnt_exist",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "pathlib.Path",
                    "labm8.py.internal.lockfile_pb2.LockFile"
                ],
                "http_folder": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestLoaders.test_loader_defaults_to_filetype_loader_for_unknown_file": {
            "name": "test_loader_defaults_to_filetype_loader_for_unknown_file",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoaders.test_loader_uses_file_specific_loader_for_known_file": {
            "name": "test_loader_uses_file_specific_loader_for_known_file",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationRepository.test_defaults_to_user_cache_dir_for_storage_location": {
            "name": "test_defaults_to_user_cache_dir_for_storage_location",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationRepository.test_uses_version_string_in_storage_location": {
            "name": "test_uses_version_string_in_storage_location",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationRepository.test_uses_version_string_in_url": {
            "name": "test_uses_version_string_in_url",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnotationRepository.test_uses_XDG_CACHE_HOME_if_set_for_storage_location": {
            "name": "test_uses_XDG_CACHE_HOME_if_set_for_storage_location",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/unit/internal/test_utils.py": {
        "test_before_decorator": {
            "name": "test_before_decorator",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_maybe_download_when_file_doesnt_exist": {
            "name": "test_maybe_download_when_file_doesnt_exist",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_maybe_download_when_file_does_exist": {
            "name": "test_maybe_download_when_file_does_exist",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[Tuple[float, float]]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/unit/internal/__init__.py": {},
    "epic-kitchens-55-lib-master/tests/unit/meta/test_classes.py": {
        "test_class_to_verb": {
            "name": "test_class_to_verb",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "verb_class": [
                    "Callable",
                    "bool"
                ],
                "verb": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_nouns_to_class": {
            "name": "test_nouns_to_class",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "noun_class": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ],
                "noun": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_class_to_nouns": {
            "name": "test_class_to_nouns",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "noun_class": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "noun": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "epic-kitchens-55-lib-master/tests/unit/meta/test_module_functions.py": {
        "test_default_version_is_1_5_0": {
            "name": "test_default_version_is_1_5_0",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_changing_annotation_version": {
            "name": "test_changing_annotation_version",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
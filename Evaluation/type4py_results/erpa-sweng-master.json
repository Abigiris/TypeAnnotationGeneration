{
    "erpa-sweng-master/server/api.py": {
        "with_operations": {
            "name": "with_operations",
            "location": 32,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "with_operations_and_maybe_user": {
            "name": "with_operations_and_maybe_user",
            "location": 43,
            "return": [
                "int",
                "dep_check.models.Rules"
            ],
            "arguments": {
                "f": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bool",
                    "app.models.dto.CoordinateDTO"
                ]
            }
        },
        "with_operations_and_user": {
            "name": "with_operations_and_user",
            "location": 59,
            "return": [
                "int",
                "dep_check.models.Rules"
            ],
            "arguments": {
                "f": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Optional[BaseException]"
                ]
            }
        },
        "gson_camelize": {
            "name": "gson_camelize",
            "location": 74,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "to_camelize": [
                    "str",
                    "bool",
                    "list",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "retrieve_post_data": {
            "name": "retrieve_post_data",
            "location": 103,
            "return": [
                "bool",
                "Optional[str]",
                "werkzeug.datastructures.MultiDict",
                "Callable[[KT], VT]",
                "Type[BaseException]",
                "grouper.models.group.Group",
                "dict",
                "db.models.Name"
            ],
            "arguments": {
                "dto_type": [
                    "str",
                    "int"
                ]
            }
        },
        "send_object": {
            "name": "send_object",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "ping": {
            "name": "ping",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "get_games": {
            "name": "get_games",
            "location": 137,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "ops": [
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "maybe_user": [
                    "bool",
                    "app.models.user.User.InDB",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "get_game": {
            "name": "get_game",
            "location": 153,
            "return": [
                "str",
                "List[str]",
                "game.Game",
                "Optional[str]"
            ],
            "arguments": {
                "ops": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "maybe_user": [
                    "bool",
                    "app.models.user.User.InDB",
                    "Iterable[str]",
                    "str"
                ],
                "uuid": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "create_game": {
            "name": "create_game",
            "location": 162,
            "return": [
                "Callable[..., None]",
                "Optional[datetime.timedelta]",
                "int"
            ],
            "arguments": {
                "ops": [
                    "tracim.models.User",
                    "server.models.User",
                    "tildes.models.user.User",
                    "str",
                    "Optional[Dict[str, str]]",
                    "List[server.models.Rental]",
                    "django.contrib.auth.models.User",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "tracim.models.User",
                    "server.models.User",
                    "tildes.models.user.User",
                    "str",
                    "Optional[Dict[str, str]]",
                    "List[server.models.Rental]",
                    "django.contrib.auth.models.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "update_game": {
            "name": "update_game",
            "location": 169,
            "return": [
                "Callable",
                "bool"
            ],
            "arguments": {
                "ops": [
                    "app.user.models.User",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "zerver.models.UserProfile",
                    "int",
                    "str"
                ],
                "user": [
                    "app.user.models.User",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "zerver.models.UserProfile",
                    "int",
                    "str"
                ],
                "uuid": [
                    "User",
                    "List[zerver.models.UserProfile]",
                    "zerver.models.UserProfile",
                    "str",
                    "app.models.user.User.InDB",
                    "tracim.models.User"
                ]
            }
        },
        "get_game_participants": {
            "name": "get_game_participants",
            "location": 176,
            "return": [
                "str",
                "List[str]",
                "game.Game",
                "Optional[str]"
            ],
            "arguments": {
                "ops": [
                    "str",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ],
                "maybe_user": [
                    "str",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ],
                "uuid": [
                    "str",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ]
            }
        },
        "join_game": {
            "name": "join_game",
            "location": 183,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "ops": [
                    "str",
                    "esm.models.dashboard_clienDashboardClient",
                    "programl.models.lstm.lstm.Lstm"
                ],
                "user": [
                    "str",
                    "esm.models.dashboard_clienDashboardClient",
                    "programl.models.lstm.lstm.Lstm"
                ],
                "uuid": [
                    "str",
                    "esm.models.dashboard_clienDashboardClient",
                    "programl.models.lstm.lstm.Lstm"
                ]
            }
        },
        "update_game_join_request": {
            "name": "update_game_join_request",
            "location": 190,
            "return": [
                "bool",
                "Callable[[None, None], bool]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ops": [
                    "str",
                    "dict",
                    "zerver.models.UserProfile",
                    "arxiv.submission.User"
                ],
                "user": [
                    "str",
                    "dict",
                    "zerver.models.UserProfile",
                    "arxiv.submission.User"
                ],
                "uuid": [
                    "str",
                    "dict",
                    "zerver.models.UserProfile",
                    "arxiv.submission.User"
                ]
            }
        },
        "get_username_uuid": {
            "name": "get_username_uuid",
            "location": 198,
            "return": [
                "Optional[str]",
                "List[dict]",
                "app.models.external.UserDTO",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "ops": [
                    "Optional[int]"
                ],
                "username": [
                    "Optional[int]"
                ]
            }
        },
        "get_uuid_for_username": {
            "name": "get_uuid_for_username",
            "location": 205,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "ops": [
                    "zerver.models.UserProfile",
                    "Optional[core.models.User]",
                    "models.User",
                    "user.User",
                    "Optional[Dict]"
                ],
                "user_uuid": [
                    "zerver.models.UserProfile",
                    "Optional[core.models.User]",
                    "models.User",
                    "user.User",
                    "Optional[Dict]"
                ]
            }
        },
        "register_username": {
            "name": "register_username",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "ops": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "username": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "register_user_auth": {
            "name": "register_user_auth",
            "location": 219,
            "return": [
                "dict",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "ops": [
                    "sqlalchemy.orm.state.InstanceState",
                    "Dict[str, Any]",
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "get_challenge": {
            "name": "get_challenge",
            "location": 228,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "ops": [
                    "User",
                    "Optional[str]",
                    "str",
                    "zerver.models.UserProfile",
                    "bool"
                ],
                "user_uuid": [
                    "User",
                    "Optional[str]",
                    "str",
                    "zerver.models.UserProfile",
                    "bool"
                ]
            }
        },
        "get_session_token_from_challenge": {
            "name": "get_session_token_from_challenge",
            "location": 238,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "users.models.User",
                "article.transfer.models.ArticleNumber",
                "metaswitch_tinder.database.User"
            ],
            "arguments": {
                "ops": [
                    "str",
                    "bool",
                    "zerver.models.UserProfile",
                    "Mapping[str, Any]",
                    "http_quesuser.model.User"
                ],
                "user_uuid": [
                    "str",
                    "bool",
                    "zerver.models.UserProfile",
                    "Mapping[str, Any]",
                    "http_quesuser.model.User"
                ]
            }
        },
        "register_user": {
            "name": "register_user",
            "location": 248,
            "return": [
                "str",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "ops": []
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 255,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "ops": [
                    "zerver.models.UserProfile",
                    "zerver.models.Stream"
                ],
                "requesting_user": [
                    "zerver.models.UserProfile",
                    "zerver.models.Stream"
                ],
                "uuid": [
                    "Union[zerver.models.UserProfile, django.contrib.auth.models.AnonymousUser]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "ops": [
                    "str",
                    "Union[int, str]"
                ],
                "uuid": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "handle_invalid_resource": {
            "name": "handle_invalid_resource",
            "location": 272,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "exception": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "handle_invalid_values": {
            "name": "handle_invalid_values",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "exception": [
                    "dict",
                    "str",
                    "Type['Declared']"
                ]
            }
        },
        "handle_invalid_usage": {
            "name": "handle_invalid_usage",
            "location": 287,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "exception": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "handle_server_errors": {
            "name": "handle_server_errors",
            "location": 294,
            "return": [
                "Sequence[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "exception": [
                    "str"
                ]
            }
        },
        "with_operations.mk_ops": {
            "name": "mk_ops",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "with_operations_and_maybe_user.register_user": {
            "name": "register_user",
            "location": 50,
            "return": [],
            "arguments": {
                "ops": []
            }
        },
        "with_operations_and_user.register_user": {
            "name": "register_user",
            "location": 66,
            "return": [],
            "arguments": {
                "ops": [],
                "user": []
            }
        },
        "ErpaJsonEncoder.default": {
            "name": "default",
            "location": 87,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "datetime.date",
                    "datetime.datetime",
                    "float"
                ]
            }
        }
    },
    "erpa-sweng-master/server/api_test.py": {
        "mk_default_auth": {
            "name": "mk_default_auth",
            "location": 52,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Tuple[str, bool]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "list",
                    "app.models.user.User.InDB"
                ],
                "user_uuid": [
                    "str",
                    "bob_emploi.frontend.api.user_pb2.User"
                ]
            }
        },
        "mk_def_auth_header": {
            "name": "mk_def_auth_header",
            "location": 58,
            "return": [
                "Dict[str, str]",
                "zerver.models.Realm",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "user_uuid": [
                    "bool",
                    "List[zerver.models.UserProfile]",
                    "str",
                    "List[str]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "create_and_register_username": {
            "name": "create_and_register_username",
            "location": 62,
            "return": [
                "bool",
                "models.User",
                "Optional[app.models.User]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "curl": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ],
                "username": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "with_user_and_token": {
            "name": "with_user_and_token",
            "location": 77,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]",
                "BaseException",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "models.Pkg",
                    "T"
                ]
            }
        },
        "with_user_token_and_game": {
            "name": "with_user_token_and_game",
            "location": 87,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "f": [
                    "Dict[str, Any]",
                    "models.Channel",
                    "tracim.models.data.User"
                ]
            }
        },
        "MyCurl.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "type"
                ],
                "token": [
                    "str",
                    "tracim.models.data.Content",
                    "dict"
                ]
            }
        },
        "MyCurl.with_session": {
            "name": "with_session",
            "location": 35,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Callable[[Dict], None]",
                    "Optional[str]"
                ]
            }
        },
        "MyCurl.__getattr__": {
            "name": "__getattr__",
            "location": 38,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "with_user_and_token.mk_user": {
            "name": "mk_user",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "str",
                    "TextIO",
                    "zerver.models.UserProfile",
                    "Dict[str, str]"
                ]
            }
        },
        "with_user_token_and_game.mk_game": {
            "name": "mk_game",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "str",
                    "Optional[int]"
                ],
                "user": [
                    "bytes",
                    "List[str]",
                    "str"
                ],
                "token": [
                    "str",
                    "dict",
                    "BaseException"
                ]
            }
        },
        "TestAPI.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_ping": {
            "name": "test_ping",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_register_new_user": {
            "name": "test_register_new_user",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_update_user": {
            "name": "test_update_user",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_games": {
            "name": "test_get_games",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_create_game": {
            "name": "test_create_game",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "slice"
                ],
                "token": [
                    "str",
                    "core.models.Recipe"
                ],
                "game": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestAPI.test_update_game": {
            "name": "test_update_game",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "slice"
                ],
                "token": [
                    "str",
                    "core.models.Recipe"
                ],
                "game": []
            }
        },
        "TestAPI.test_join_game": {
            "name": "test_join_game",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "token": [
                    "core.models.Recipe",
                    "str"
                ],
                "game": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "TestAPI.test_join_game_after_reject": {
            "name": "test_join_game_after_reject",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "token": [
                    "core.models.Recipe",
                    "str"
                ],
                "game": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "TestAPI.test_refinement": {
            "name": "test_refinement",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "token": [
                    "str",
                    "core.models.Recipe"
                ],
                "game": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "MyCurl.__getattr__.mk_wrapped_call": {
            "name": "mk_wrapped_call",
            "location": 39,
            "return": [
                "dict"
            ],
            "arguments": {}
        }
    },
    "erpa-sweng-master/server/contexts.py": {
        "is_context_manager": {
            "name": "is_context_manager",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Optional[Any]",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "mk_with_context_decorator": {
            "name": "mk_with_context_decorator",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ctx_generator": [
                    "bool",
                    "str"
                ],
                "ctx_generator_args_from_fn_args": [
                    "bool",
                    "str"
                ],
                "fn_args_from_fn_args_and_ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "with_context": {
            "name": "with_context",
            "location": 50,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "context_generator": []
            }
        },
        "with_context_using_instance": {
            "name": "with_context_using_instance",
            "location": 63,
            "return": [
                "Optional[int]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "context_generator": [
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "tmp_directory_ctx_generator": {
            "name": "tmp_directory_ctx_generator",
            "location": 78,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "maybe_self": [],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "tmp_file_ctx_generator": {
            "name": "tmp_file_ctx_generator",
            "location": 101,
            "return": [
                "typing.Generator[typing.IO, None, None]"
            ],
            "arguments": {
                "maybe_self": [],
                "prefix": []
            }
        },
        "mk_with_context_decorator.decorator": {
            "name": "decorator",
            "location": 32,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "memoryview",
                    "bool",
                    "IO[bytes]"
                ]
            }
        },
        "with_context.ctx_generator_args_from_fn_args": {
            "name": "ctx_generator_args_from_fn_args",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "with_context.fn_args_from_fn_args_and_ctx": {
            "name": "fn_args_from_fn_args_and_ctx",
            "location": 58,
            "return": [],
            "arguments": {
                "fn_args": [],
                "fn_kwargs": [],
                "ctx": []
            }
        },
        "with_context_using_instance.ctx_generator_args_from_fn_args": {
            "name": "ctx_generator_args_from_fn_args",
            "location": 69,
            "return": [],
            "arguments": {
                "fn_args": [
                    "dict"
                ],
                "_": [
                    "bool",
                    "Type"
                ]
            }
        },
        "with_context_using_instance.fn_args_from_fn_args_and_ctx": {
            "name": "fn_args_from_fn_args_and_ctx",
            "location": 72,
            "return": [],
            "arguments": {
                "fn_args": [
                    "bool",
                    "int"
                ],
                "fn_kwargs": [
                    "bool",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "int"
                ]
            }
        },
        "mk_with_context_decorator.decorator.function_wrapper": {
            "name": "function_wrapper",
            "location": 33,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {}
        },
        "mk_with_context_decorator.decorator.generator_wrapper": {
            "name": "generator_wrapper",
            "location": 40,
            "return": [
                "typing.Generator[G, None, None]"
            ],
            "arguments": {}
        }
    },
    "erpa-sweng-master/server/crypto.py": {
        "non_null_params": {
            "name": "non_null_params",
            "location": 9,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "str"
                ]
            }
        },
        "with_engine_from_last_argument": {
            "name": "with_engine_from_last_argument",
            "location": 70,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "Iterator[int]"
                ]
            }
        },
        "non_null_params.fn": {
            "name": "fn",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "CryptoGrenouille._get_verifying_key_from_user_auth": {
            "name": "_get_verifying_key_from_user_auth",
            "location": 26,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_auth": [
                    "str",
                    "bool",
                    "dict",
                    "users.models.User"
                ]
            }
        },
        "CryptoGrenouille.validate_user_auth": {
            "name": "validate_user_auth",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_auth": [
                    "[dict]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "zerver.models.UserProfile",
                    "asgard.models.user.User"
                ]
            }
        },
        "CryptoGrenouille.verify_message_signature": {
            "name": "verify_message_signature",
            "location": 54,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "b64_signature": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "Dict[str, str]",
                    "defaultdict",
                    "List[str]",
                    "dict",
                    "bytes"
                ],
                "user_auth": [
                    "str",
                    "Optional[int]",
                    "Union[str, dict]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "with_engine_from_last_argument.fn": {
            "name": "fn",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Crypto.validate_user_auth": {
            "name": "validate_user_auth",
            "location": 86,
            "return": [
                "Mapping[str, Any]",
                "core.models.Recipe",
                "Optional[str]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "user_auth": [
                    "models.UserAuth",
                    "str",
                    "int"
                ],
                "engine": [
                    "models.UserAuth",
                    "str",
                    "int"
                ]
            }
        },
        "Crypto.verify_message_signature": {
            "name": "verify_message_signature",
            "location": 91,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "b64_signature": [
                    "str",
                    "models.UserAuth"
                ],
                "message": [
                    "str",
                    "models.UserAuth"
                ],
                "user_auth": [
                    "str",
                    "models.UserAuth"
                ],
                "engine": [
                    "str",
                    "models.UserAuth"
                ]
            }
        }
    },
    "erpa-sweng-master/server/crypto_test.py": {
        "with_crypto": {
            "name": "with_crypto",
            "location": 14,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[..., None]",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "with_crypto.mk_crypto": {
            "name": "mk_crypto",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CryptoTest.test_verify_signature_received": {
            "name": "test_verify_signature_received",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "crypto": [
                    "int"
                ]
            }
        }
    },
    "erpa-sweng-master/server/game_refiner.py": {
        "refine_queries": {
            "name": "refine_queries",
            "location": 13,
            "return": [
                "str",
                "bool",
                "db.models.Taxon"
            ],
            "arguments": {
                "query": [
                    "sqlalchemy.orm.query.Query",
                    "Optional[str]",
                    "Tuple[int, str]",
                    "dict",
                    "bool",
                    "Iterable[str]"
                ],
                "filters": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "Dict[str, int]",
                    "bool",
                    "Tuple[bytes]"
                ]
            }
        },
        "refine_query": {
            "name": "refine_query",
            "location": 19,
            "return": [
                "str",
                "bool",
                "db.models.Taxon"
            ],
            "arguments": {
                "query": [
                    "str",
                    "sqlalchemy.orm.query.Query",
                    "Optional[str]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "key": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "value": [
                    "str",
                    "sqlalchemy.orm.query.Query",
                    "Optional[str]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        }
    },
    "erpa-sweng-master/server/game_refiner_test.py": {
        "T.with_session": {
            "name": "with_session",
            "location": 19,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "salon.models.Stylist",
                "zam_repondeur.models.Amendement",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "T.with_session_as_kwarg": {
            "name": "with_session_as_kwarg",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "List[str]",
                    "type",
                    "Set[str]"
                ]
            }
        },
        "T.with_username": {
            "name": "with_username",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "username_or_fn": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "no_inject": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "T.with_userprofile": {
            "name": "with_userprofile",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "skip_or_fn": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "T.with_game": {
            "name": "with_game",
            "location": 91,
            "return": [
                "int",
                "type"
            ],
            "arguments": {
                "title_or_fn": [
                    "bool",
                    "Optional[bool]",
                    "int"
                ],
                "no_inject": [
                    "bool",
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "TestGameRefiner.test_refine_singletons": {
            "name": "test_refine_singletons",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u1": [
                    "core.models.MyUser"
                ],
                "g1": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGameRefiner.test_refine_all": {
            "name": "test_refine_all",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u1": [],
                "g1": [
                    "sqlalchemy.orm.session.Session",
                    "core.models.Recipe"
                ],
                "u2": [],
                "g2": [
                    "sqlalchemy.orm.session.Session",
                    "core.models.Recipe"
                ],
                "u3": [],
                "g3": [
                    "sqlalchemy.orm.session.Session",
                    "core.models.Recipe"
                ]
            }
        },
        "TestGameRefiner.test_player_requests_queries": {
            "name": "test_player_requests_queries",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u1": [],
                "g1": [],
                "u2": [],
                "g2": [],
                "u3": [],
                "g3": []
            }
        },
        "T.with_session.mk_session": {
            "name": "mk_session",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "T.with_session_as_kwarg.runner": {
            "name": "runner",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "T.with_username.dec": {
            "name": "dec",
            "location": 47,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "T.with_userprofile.dec": {
            "name": "dec",
            "location": 75,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "T.with_game.dec": {
            "name": "dec",
            "location": 100,
            "return": [
                "float",
                "bool",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "T.with_username.dec.mk_entity": {
            "name": "mk_entity",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "T.with_userprofile.dec.mk_entity": {
            "name": "mk_entity",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "T.with_game.dec.mk_entity": {
            "name": "mk_entity",
            "location": 102,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "erpa-sweng-master/server/main.py": {},
    "erpa-sweng-master/server/models.py": {
        "mk_uuid_gen": {
            "name": "mk_uuid_gen",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "Game.generate_new_uuid": {
            "name": "generate_new_uuid",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.uuid_is_valid": {
            "name": "uuid_is_valid",
            "location": 69,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUuid.generate_new_uuid": {
            "name": "generate_new_uuid",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUuid.uuid_is_valid": {
            "name": "uuid_is_valid",
            "location": 139,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "erpa-sweng-master/server/operations.py": {
        "with_session": {
            "name": "with_session",
            "location": 17,
            "return": [
                "bool",
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "bytes",
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "aaLogbook.models.xmlElementModel.LogbookElement",
                    "dict"
                ]
            }
        },
        "with_session.mk_session": {
            "name": "mk_session",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "ops": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Operations.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_broker": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "nox.sessions.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Operations.get_authenticated_user": {
            "name": "get_authenticated_user",
            "location": 32,
            "return": [
                "tracim.models.auth.User",
                "zam_repondeur.models.Lecture",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "metaswitch_tinder.database.models.User",
                "set"
            ],
            "arguments": {
                "self": [],
                "authtoken": [
                    "zerver.models.UserProfile",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "tildes.models.user.User",
                    "django.contrib.auth.models.User",
                    "bool"
                ],
                "session": [
                    "zerver.models.UserProfile",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "tildes.models.user.User",
                    "django.contrib.auth.models.User",
                    "bool"
                ]
            }
        },
        "Operations.create_game": {
            "name": "create_game",
            "location": 42,
            "return": [
                "bool",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "new_game": [
                    "telegram.User",
                    "dict",
                    "Exception",
                    "core_lib.core.models.Event",
                    "str"
                ],
                "user": [
                    "bool",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Optional[sqlalchemy.engine.Engine]",
                    "Optional[str]"
                ],
                "session": [
                    "app.models.Game",
                    "Optional[docker.models.images.Image]",
                    "projects.models.Project",
                    "str"
                ]
            }
        },
        "Operations.update_game": {
            "name": "update_game",
            "location": 69,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "updated_game": [
                    "str",
                    "grouper.models.user.User",
                    "src.domain.entity.user.User",
                    "article.transfer.models.ArticleNumber",
                    "Iterable[str]",
                    "bytes"
                ],
                "user": [
                    "str",
                    "grouper.models.user.User",
                    "src.domain.entity.user.User",
                    "article.transfer.models.ArticleNumber",
                    "Iterable[str]",
                    "bytes"
                ],
                "session": [
                    "sqlalchemy.orm.query.Query",
                    "models.UserAuth",
                    "zerver.models.Stream",
                    "Optional[Mapping]",
                    "src.domain.entity.user.User",
                    "str"
                ]
            }
        },
        "Operations.get_game": {
            "name": "get_game",
            "location": 90,
            "return": [
                "str",
                "List[str]",
                "tracim.models.data.Content",
                "List[List[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Operations.get_games": {
            "name": "get_games",
            "location": 100,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "str"
                ],
                "page_start": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "str"
                ],
                "page_length": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "str"
                ],
                "refinements": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Operations.get_game_participants": {
            "name": "get_game_participants",
            "location": 109,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "game_uuid": [
                    "bool",
                    "asgard.workers.models.scalable_app.ScalableApp"
                ],
                "user": [
                    "str"
                ],
                "session": [
                    "bool",
                    "asgard.workers.models.scalable_app.ScalableApp"
                ]
            }
        },
        "Operations.join_game": {
            "name": "join_game",
            "location": 129,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_uuid": [],
                "user": [
                    "bytes"
                ],
                "session": [
                    "bool",
                    "zerver.models.Client",
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "Operations.update_game_join_request": {
            "name": "update_game_join_request",
            "location": 155,
            "return": [
                "List[str]",
                "dict",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "game_uuid": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "user": [
                    "str",
                    "Dict[str, Any]"
                ],
                "updated_request": [
                    "annofabapi.models.Task",
                    "Mapping",
                    "core_lib.core.models.Event"
                ],
                "session": [
                    "annofabapi.models.Task",
                    "Mapping",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "Operations.register_username": {
            "name": "register_username",
            "location": 196,
            "return": [
                "str",
                "Mapping",
                "bool",
                "sqlalchemy.orm.state.InstanceState"
            ],
            "arguments": {
                "self": [],
                "username_str": [
                    "Dict[str, Any]",
                    "db.models.Name",
                    "str",
                    "Optional[Any]"
                ],
                "session": [
                    "Mapping[str, Any]",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Operations.get_user_uuid_from_username": {
            "name": "get_user_uuid_from_username",
            "location": 216,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "username_str": [
                    "str",
                    "correios.models.posting.Package",
                    "dict",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "accounts.models.Account"
                ],
                "session": [
                    "str",
                    "correios.models.posting.Package",
                    "dict",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "accounts.models.Account"
                ]
            }
        },
        "Operations.get_username_from_user_uuid": {
            "name": "get_username_from_user_uuid",
            "location": 228,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "zerver.models.UserProfile",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "zerver.models.UserProfile",
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Operations.register_user_auth": {
            "name": "register_user_auth",
            "location": 240,
            "return": [
                "Callable",
                "User",
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "models.User",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "user_auth": [
                    "str",
                    "arxiv.users.domain.User",
                    "Dict[str, Dict[str, str]]"
                ],
                "session": [
                    "str",
                    "int",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "user.User"
                ]
            }
        },
        "Operations.get_user_auth": {
            "name": "get_user_auth",
            "location": 258,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "models.User",
                "Callable",
                "User"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "str",
                    "zerver.models.UserProfile",
                    "int",
                    "apistar.backends.sqlalchemy_backend.Session"
                ],
                "session": [
                    "str",
                    "zerver.models.UserProfile",
                    "int",
                    "apistar.backends.sqlalchemy_backend.Session"
                ]
            }
        },
        "Operations.register_user": {
            "name": "register_user",
            "location": 269,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "User",
                    "arxiv.users.domain.User",
                    "readicomponents.User",
                    "models.User",
                    "user.User"
                ],
                "session": [
                    "arxiv.users.domain.User",
                    "User",
                    "readicomponents.User",
                    "user.User",
                    "zerver.models.UserGroup",
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "Operations.update_user": {
            "name": "update_user",
            "location": 283,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "updated_user": [
                    "str",
                    "daylighdb.models.User",
                    "int",
                    "Optional[Dict[str, str]]",
                    "user_models.User"
                ],
                "requesting_user": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "lms.lmsdb.models.User",
                    "Optional[int]",
                    "Optional[str]",
                    "tracim.models.auth.User",
                    "zerver.models.Client"
                ],
                "session": [
                    "excars.models.user.User",
                    "bool",
                    "tracim.models.auth.User",
                    "labm8.py.sqlutil.Session",
                    "str"
                ]
            }
        },
        "Operations.get_user": {
            "name": "get_user",
            "location": 300,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "str",
                    "users.models.User"
                ],
                "session": [
                    "str",
                    "users.models.User"
                ]
            }
        },
        "Operations.get_user_from_session_token": {
            "name": "get_user_from_session_token",
            "location": 312,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "Dict[str, Any]",
                "List[str]",
                "medtagger.database.models.Scan"
            ],
            "arguments": {
                "self": [],
                "session_token": [
                    "apistar.backends.sqlalchemy_backend.Session",
                    "str"
                ],
                "session": [
                    "apistar.backends.sqlalchemy_backend.Session",
                    "str"
                ]
            }
        },
        "Operations.get_user_tokens_for_user": {
            "name": "get_user_tokens_for_user",
            "location": 325,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "List[str]",
                "zerver.models.Stream",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "zerver.models.UserProfile",
                    "arxiv.users.domain.Session",
                    "arxiv.users.domain.User",
                    "tracim.models.auth.User",
                    "Optional[zerver.models.UserProfile]",
                    "user.User",
                    "daylighdb.models.User"
                ],
                "session": [
                    "zerver.models.UserProfile",
                    "arxiv.users.domain.Session",
                    "arxiv.users.domain.User",
                    "tracim.models.auth.User",
                    "Optional[zerver.models.UserProfile]",
                    "user.User",
                    "daylighdb.models.User"
                ]
            }
        },
        "Operations.get_auth_challenge_for_user": {
            "name": "get_auth_challenge_for_user",
            "location": 333,
            "return": [
                "bool",
                "models.PermissionLookup",
                "Dict[str, Any]",
                "List[dict]",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "arxiv.users.domain.Session",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.UserProfile",
                    "user.User",
                    "arxiv.users.domain.User",
                    "User",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "session": [
                    "arxiv.users.domain.Session",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.UserProfile",
                    "user.User",
                    "arxiv.users.domain.User",
                    "User",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ]
            }
        },
        "Operations.gen_auth_challenge_for_user": {
            "name": "gen_auth_challenge_for_user",
            "location": 344,
            "return": [
                "set",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "zerver.models.UserProfile",
                    "arxiv.users.domain.User",
                    "zerver.models.UserGroup",
                    "Optional[List[Any]]",
                    "readicomponents.User",
                    "User",
                    "Optional[Dict[str, str]]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "session": [
                    "app.models.User",
                    "karmabomodels.User",
                    "http_quesuser.model.User",
                    "readicomponents.User",
                    "str",
                    "bool",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "Operations.session_token_from_signed_challenge": {
            "name": "session_token_from_signed_challenge",
            "location": 358,
            "return": [
                "str",
                "T",
                "dict"
            ],
            "arguments": {
                "self": [],
                "user_uuid": [
                    "zerver.models.UserProfile",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Callable[[], str]"
                ],
                "b64_signed": [
                    "authentication.session.models.current_user.CurrentUser",
                    "int",
                    "float",
                    "Callable"
                ],
                "session": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "http_quesuser.model.User",
                    "app.models.User",
                    "recidiviz.persistence.database.session.Session",
                    "users.models.JustfixUser"
                ]
            }
        },
        "Operations.get_game_participants.filter_game_join_requests": {
            "name": "filter_game_join_requests",
            "location": 118,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "gp": [
                    "str",
                    "int"
                ]
            }
        },
        "Operations.update_game_join_request.joined_user_leaving_game": {
            "name": "joined_user_leaving_game",
            "location": 158,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "old_request": [
                    "libkol.Session",
                    "str",
                    "dict",
                    "requests.models.Response"
                ],
                "new_request": [
                    "libkol.Session",
                    "str",
                    "dict",
                    "requests.models.Response"
                ]
            }
        },
        "Operations.update_game_join_request.has_left_user_joining_game": {
            "name": "has_left_user_joining_game",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "old_request": [
                    "dict",
                    "str",
                    "requests.models.Response",
                    "Optional[Dict[str, str]]",
                    "Mapping[str, str]"
                ],
                "new_request": [
                    "dict",
                    "str",
                    "requests.models.Response",
                    "Optional[Dict[str, str]]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "erpa-sweng-master/server/operations_test.py": {
        "with_operations": {
            "name": "with_operations",
            "location": 15,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "mk_x509_ed22519_cert": {
            "name": "mk_x509_ed22519_cert",
            "location": 24,
            "return": [
                "str",
                "Tuple[str, str]",
                "float"
            ],
            "arguments": {
                "public_key": [
                    "bytes",
                    "Optional[str]",
                    "str",
                    "core.models.GroupingKey",
                    "core.models.Groups"
                ]
            }
        },
        "mk_user": {
            "name": "mk_user",
            "location": 44,
            "return": [
                "Optional[str]",
                "bool",
                "models.User",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mk_game": {
            "name": "mk_game",
            "location": 48,
            "return": [
                "Set[str]",
                "dict",
                "bool",
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "create_and_register_username": {
            "name": "create_and_register_username",
            "location": 52,
            "return": [
                "bool",
                "salon.models.Stylist",
                "str",
                "float"
            ],
            "arguments": {
                "username": [
                    "str",
                    "List[str]"
                ],
                "ops": [
                    "dict",
                    "salon.models.Stylist",
                    "zerver.models.UserProfile",
                    "daylighdb.models.User",
                    "int"
                ]
            }
        },
        "with_operations_and_user": {
            "name": "with_operations_and_user",
            "location": 68,
            "return": [
                "int",
                "dep_check.models.Rules"
            ],
            "arguments": {
                "f": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Optional[BaseException]"
                ]
            }
        },
        "with_operations.mk_ops": {
            "name": "mk_ops",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "with_operations_and_user.register_user": {
            "name": "register_user",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "ops": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestOperations.test_mk_same_username_twice_excepts": {
            "name": "test_mk_same_username_twice_excepts",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str"
                ],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestOperations.test_mk_user": {
            "name": "test_mk_user",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": []
            }
        },
        "TestOperations.test_register_new_user": {
            "name": "test_register_new_user",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": []
            }
        },
        "TestOperations.test_update_user": {
            "name": "test_update_user",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "bool",
                    "str",
                    "models.User"
                ],
                "user": [
                    "models.user.User"
                ]
            }
        },
        "TestOperations.test_get_authenticated_user": {
            "name": "test_get_authenticated_user",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": []
            }
        },
        "TestOperations.test_create_game_invalid_uuid": {
            "name": "test_create_game_invalid_uuid",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [],
                "user": []
            }
        },
        "TestOperations.test_create_game_twice_yields_two_uuid": {
            "name": "test_create_game_twice_yields_two_uuid",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [],
                "user": []
            }
        },
        "TestOperations.test_update_existing_game": {
            "name": "test_update_existing_game",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [],
                "user": []
            }
        },
        "TestOperations.test_update_not_existing_game": {
            "name": "test_update_not_existing_game",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str",
                    "bool",
                    "server.models.Bike"
                ],
                "user": [
                    "str",
                    "bool",
                    "server.models.Bike"
                ],
                "_": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "TestOperations.test_get_game": {
            "name": "test_get_game",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str",
                    "ultron8.api.models.user.UserInDB"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "TestOperations.test_get_games": {
            "name": "test_get_games",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [],
                "user": [
                    "str",
                    "salon.models.Stylist"
                ]
            }
        },
        "TestOperations.test_no_session_token_for_new_user": {
            "name": "test_no_session_token_for_new_user",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "core.models.Grouping"
                ]
            }
        },
        "TestOperations.test_get_user_from_session_token": {
            "name": "test_get_user_from_session_token",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": []
            }
        },
        "TestOperations.test_get_user_tokens": {
            "name": "test_get_user_tokens",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [],
                "user": []
            }
        },
        "TestOperations.test_register_and_retrieve_auth_challenges": {
            "name": "test_register_and_retrieve_auth_challenges",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "core.models.Recipe"
                ],
                "user": []
            }
        },
        "TestOperations.test_player_joins_game": {
            "name": "test_player_joins_game",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "TestOperations.test_player_joining_after_removed": {
            "name": "test_player_joining_after_removed",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str"
                ],
                "user": [
                    "str",
                    "core.models.Team",
                    "core.models.Recipe"
                ]
            }
        },
        "TestOperations.test_gm_joining_his_own_game": {
            "name": "test_gm_joining_his_own_game",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "core.models.Team"
                ],
                "user": [
                    "core.models.Team"
                ],
                "_": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "TestOperations.test_player_joining_after_rejected": {
            "name": "test_player_joining_after_rejected",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str"
                ],
                "user": [
                    "str",
                    "core.models.Team",
                    "core.models.Recipe"
                ],
                "_": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        }
    },
    "erpa-sweng-master/server/session.py": {
        "SessionBroker.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "engine": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "SessionBroker.maybe_initialize_tables": {
            "name": "maybe_initialize_tables",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "sqlalchemy.engine.base.Engine",
                    "str",
                    "Sequence"
                ]
            }
        },
        "SessionBroker.get_session": {
            "name": "get_session",
            "location": 39,
            "return": [
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionBroker.__init__.memoized_engine": {
            "name": "memoized_engine",
            "location": 22,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "database_url": [
                    "str",
                    "Set[str]",
                    "bytes"
                ]
            }
        }
    },
    "erpa-sweng-master/server/session_test.py": {
        "with_session": {
            "name": "with_session",
            "location": 15,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "salon.models.Stylist",
                "zam_repondeur.models.Amendement",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "with_session.mk_session": {
            "name": "mk_session",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestDBSession.test_session_test_context_unique": {
            "name": "test_session_test_context_unique",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBSession.test_mk_user": {
            "name": "test_mk_user",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "grouper.models.base.session.Session",
                    "Optional[str]",
                    "models.Token"
                ]
            }
        },
        "TestDBSession.test_mk_user_uuid": {
            "name": "test_mk_user_uuid",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str"
                ]
            }
        },
        "TestDBSession.test_mk_user_without_existing_uuid_should_fail": {
            "name": "test_mk_user_without_existing_uuid_should_fail",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]"
                ],
                "_": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "TestDBSession.test_db_storage_backend": {
            "name": "test_db_storage_backend",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "models.WalletRequest",
                    "recidiviz.persistence.database.session.Session"
                ]
            }
        },
        "TestDBSession.test_session_test_context_unique.test_create_user_in_session": {
            "name": "test_create_user_in_session",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "abilian.core.models.subjects.User",
                    "serverwamp.session.WAMPSession",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "erpa-sweng-master/server/secrets/__init__.py": {}
}
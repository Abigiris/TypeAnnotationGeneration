{
    "expressmanage-sandbox-master/manage.py": {},
    "expressmanage-sandbox-master/config/urls.py": {},
    "expressmanage-sandbox-master/config/views.py": {
        "Dashboard_DetailView.get": {
            "name": "get",
            "location": 15,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Dashboard_DetailView.get_total_customers": {
            "name": "get_total_customers",
            "location": 30,
            "return": [
                "int",
                "str",
                "List[int]",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {}
        },
        "Dashboard_DetailView.get_todays_collection": {
            "name": "get_todays_collection",
            "location": 33,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "Dashboard_DetailView.get_todays_inward_orders": {
            "name": "get_todays_inward_orders",
            "location": 36,
            "return": [
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "raiden.utils.BlockIdentifier",
                "models.User"
            ],
            "arguments": {}
        },
        "Dashboard_DetailView.get_todays_outward_orders": {
            "name": "get_todays_outward_orders",
            "location": 39,
            "return": [
                "str",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "raiden.utils.BlockIdentifier",
                "models.User"
            ],
            "arguments": {}
        }
    },
    "expressmanage-sandbox-master/config/wsgi.py": {},
    "expressmanage-sandbox-master/config/__init__.py": {},
    "expressmanage-sandbox-master/config/settings/base.py": {},
    "expressmanage-sandbox-master/config/settings/local.py": {},
    "expressmanage-sandbox-master/config/settings/production.py": {},
    "expressmanage-sandbox-master/config/settings/test.py": {},
    "expressmanage-sandbox-master/config/settings/__init__.py": {},
    "expressmanage-sandbox-master/docs/conf.py": {},
    "expressmanage-sandbox-master/docs/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "expressmanage-sandbox-master/expressmanage/utils.py": {
        "normalize_string": {
            "name": "normalize_string",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "pString": [
                    "str",
                    "Union[Literal, str]"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/contrib/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/contrib/sites/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/contrib/sites/migrations/0001_initial.py": {},
    "expressmanage-sandbox-master/expressmanage/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "expressmanage-sandbox-master/expressmanage/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/contrib/sites/migrations/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/customers/admin.py": {},
    "expressmanage-sandbox-master/expressmanage/customers/apps.py": {},
    "expressmanage-sandbox-master/expressmanage/customers/forms.py": {
        "CustomerForm.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/customers/helper.py": {
        "CustomerSummary.get_recent_invoices": {
            "name": "get_recent_invoices",
            "location": 8,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "customer": [
                    "zerver.models.Realm",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CustomerSummary.get_active_lots": {
            "name": "get_active_lots",
            "location": 11,
            "return": [
                "str",
                "models.Profile",
                "Iterable[int]"
            ],
            "arguments": {
                "customer": [
                    "int",
                    "daylighdb.models.User"
                ]
            }
        },
        "CustomerSummary.get_active_invoices": {
            "name": "get_active_invoices",
            "location": 14,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "customer": [
                    "int",
                    "Union[server.models.Bike, int]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CustomerSummary.get_pending_amount": {
            "name": "get_pending_amount",
            "location": 17,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bool",
                "int"
            ],
            "arguments": {
                "customer": [
                    "str",
                    "int",
                    "dict",
                    "Union[server.models.Bike, int]"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/customers/models.py": {
        "Customer.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.save": {
            "name": "save",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/customers/tests.py": {},
    "expressmanage-sandbox-master/expressmanage/customers/urls.py": {},
    "expressmanage-sandbox-master/expressmanage/customers/views.py": {
        "Customer_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 12,
            "return": [
                "int",
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer_DetailView.get": {
            "name": "get",
            "location": 24,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Customer_CreateView.get_success_url": {
            "name": "get_success_url",
            "location": 50,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer_UpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 62,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/customers/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/customers/migrations/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/invoices/admin.py": {},
    "expressmanage-sandbox-master/expressmanage/invoices/apps.py": {},
    "expressmanage-sandbox-master/expressmanage/invoices/forms.py": {
        "PaymentForm.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentForm.clean": {
            "name": "clean",
            "location": 22,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "LotPaymentForm.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LotPaymentForm.clean": {
            "name": "clean",
            "location": 42,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/invoices/models.py": {
        "Invoice.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invoice.save": {
            "name": "save",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InvoiceLineItem.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvoiceLineItem.save": {
            "name": "save",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.save": {
            "name": "save",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.generate_receipt": {
            "name": "generate_receipt",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "invoice": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "payment": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Receipt.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Receipt.save": {
            "name": "save",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/invoices/tests.py": {},
    "expressmanage-sandbox-master/expressmanage/invoices/urls.py": {},
    "expressmanage-sandbox-master/expressmanage/invoices/views.py": {
        "load_customer_invoices": {
            "name": "load_customer_invoices",
            "location": 138,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Union[None, str]",
                "games.models.Game"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "http.MITMRequest"
                ]
            }
        },
        "load_customer_inward_orders": {
            "name": "load_customer_inward_orders",
            "location": 144,
            "return": [
                "Dict[str, str]",
                "str",
                "int",
                "games.models.Game",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "http.MITMRequest"
                ]
            }
        },
        "fetch_invoice_details": {
            "name": "fetch_invoice_details",
            "location": 150,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, dict]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "load_order_amount_pending": {
            "name": "load_order_amount_pending",
            "location": 156,
            "return": [
                "dict",
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "http.MITMRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "Invoice_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 22,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 50,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment_CreateView.get_success_url": {
            "name": "get_success_url",
            "location": 62,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "LotPayment_CreateView.get": {
            "name": "get",
            "location": 74,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "LotPayment_CreateView.post": {
            "name": "post",
            "location": 79,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Callable",
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "LotPayment_CreateView.form_valid": {
            "name": "form_valid",
            "location": 88,
            "return": [
                "django.http.HttpResponse",
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Tuple[float, float]",
                    "int"
                ]
            }
        },
        "LotPayment_CreateView.form_invalid": {
            "name": "form_invalid",
            "location": 110,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "str"
                ]
            }
        },
        "Receipt_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 124,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/invoices/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/invoices/migrations/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/admin.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/apps.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/forms.py": {
        "InwardOrderForm.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InOliForm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InOliResultForm.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InOliUpdateForm.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OutwardOrderForm.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OutwardOrderUpdateForm.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OutOliForm.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OutOliForm.clean": {
            "name": "clean",
            "location": 104,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/orders/helpers.py": {
        "get_oli_elapsed_days": {
            "name": "get_oli_elapsed_days",
            "location": 9,
            "return": [
                "str",
                "int",
                "Iterable[Iterable[str]]"
            ],
            "arguments": {
                "out_oli": []
            }
        },
        "get_oli_applicable_rate": {
            "name": "get_oli_applicable_rate",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "out_oli": [
                    "int",
                    "str",
                    "zerver.models.Realm",
                    "contests.models.User"
                ],
                "elapsed_days": [
                    "int",
                    "Callable[[float], float]",
                    "float",
                    "Optional[Iterable[str]]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ]
            }
        },
        "get_invoice": {
            "name": "get_invoice",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "outward_order": [
                    "str",
                    "bool"
                ]
            }
        },
        "populate_invoice": {
            "name": "populate_invoice",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "invoice": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "invoice_lis": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_oli_invoice_li": {
            "name": "get_oli_invoice_li",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "invoice": [
                    "str",
                    "bool"
                ],
                "out_oli": [
                    "str",
                    "int",
                    "salon.models.Stylist",
                    "models.Payment",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "get_out_olis": {
            "name": "get_out_olis",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "inward_order": [
                    "str"
                ]
            }
        },
        "get_order_invoices": {
            "name": "get_order_invoices",
            "location": 47,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "inward_order": [
                    "zerver.models.Realm",
                    "int",
                    "server.models.Bike",
                    "socialhome.users.models.Profile",
                    "str"
                ]
            }
        },
        "get_order_amount_total": {
            "name": "get_order_amount_total",
            "location": 51,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bool",
                "int"
            ],
            "arguments": {
                "inward_order": [
                    "zerver.models.Realm",
                    "str",
                    "int",
                    "server.models.Bike"
                ]
            }
        },
        "get_order_amount_received": {
            "name": "get_order_amount_received",
            "location": 55,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bool",
                "int"
            ],
            "arguments": {
                "inward_order": [
                    "zerver.models.Realm",
                    "str",
                    "int",
                    "server.models.Bike"
                ]
            }
        },
        "get_order_amount_pending": {
            "name": "get_order_amount_pending",
            "location": 59,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bool",
                "int"
            ],
            "arguments": {
                "inward_order": [
                    "zerver.models.Realm",
                    "str",
                    "int",
                    "server.models.Bike"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/orders/models.py": {
        "InwardOrder.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "InwardOrder.save": {
            "name": "save",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InOli.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InOli.save": {
            "name": "save",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OutwardOrder.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutwardOrder.save": {
            "name": "save",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OutOli.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutOli.save": {
            "name": "save",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/orders/tests.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/urls.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/views.py": {
        "load_customer_in_orders": {
            "name": "load_customer_in_orders",
            "location": 342,
            "return": [
                "int",
                "bool",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "load_order_olis": {
            "name": "load_order_olis",
            "location": 348,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "http.MITMRequest"
                ]
            }
        },
        "InwardOrder_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 23,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "InwardOrder_DetailView.get": {
            "name": "get",
            "location": 35,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "InwardOrder_CreateView.get": {
            "name": "get",
            "location": 64,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "InwardOrder_CreateView.post": {
            "name": "post",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "InwardOrder_CreateView.form_valid": {
            "name": "form_valid",
            "location": 85,
            "return": [
                "django.http.HttpResponse",
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "Type",
                    "Iterable[str]",
                    "str"
                ],
                "in_oli_formset": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "paradigm.models.Base"
                ]
            }
        },
        "InwardOrder_CreateView.form_invalid": {
            "name": "form_invalid",
            "location": 95,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "T",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "in_oli_formset": [
                    "bool",
                    "T",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "InwardOrder_CreateView.get_success_url": {
            "name": "get_success_url",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InwardOrder_UpdateView.get_object": {
            "name": "get_object",
            "location": 113,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "InwardOrder_UpdateView.get": {
            "name": "get",
            "location": 117,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "InwardOrder_UpdateView.post": {
            "name": "post",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "InwardOrder_UpdateView.form_valid": {
            "name": "form_valid",
            "location": 135,
            "return": [
                "django.http.HttpResponse",
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "Type",
                    "Iterable[str]",
                    "str"
                ],
                "in_oli_formset": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "paradigm.models.Base"
                ]
            }
        },
        "InwardOrder_UpdateView.form_invalid": {
            "name": "form_invalid",
            "location": 144,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "T",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "in_oli_formset": [
                    "bool",
                    "T",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "InwardOrder_UpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InwardOrder_InvoiceView.get": {
            "name": "get",
            "location": 170,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "InwardOrder_InvoicePrintView.get": {
            "name": "get",
            "location": 185,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "OutwardOrder_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 199,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutwardOrder_CreateView.get_context_data": {
            "name": "get_context_data",
            "location": 220,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutwardOrder_CreateView.get": {
            "name": "get",
            "location": 225,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "OutwardOrder_CreateView.post": {
            "name": "post",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "OutwardOrder_CreateView.form_valid": {
            "name": "form_valid",
            "location": 246,
            "return": [
                "django.http.HttpResponse",
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "List[str]"
                ],
                "in_order_results": [
                    "bool",
                    "List[Dict[str, str]]",
                    "str"
                ],
                "out_oli_formset": [
                    "str",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "OutwardOrder_CreateView.form_invalid": {
            "name": "form_invalid",
            "location": 271,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "dict",
                    "str",
                    "List[str]"
                ],
                "in_order_results": [
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "dict",
                    "str",
                    "List[str]"
                ],
                "out_oli_formset": [
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "OutwardOrder_CreateView.get_success_url": {
            "name": "get_success_url",
            "location": 276,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/orders/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/migrations/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/orders/templatetags/math_filters.py": {
        "subtract_value": {
            "name": "subtract_value",
            "location": 8,
            "return": [
                "float",
                "int",
                "bool",
                "tuple"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str"
                ],
                "num": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/orders/templatetags/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/products/admin.py": {},
    "expressmanage-sandbox-master/expressmanage/products/apps.py": {},
    "expressmanage-sandbox-master/expressmanage/products/forms.py": {
        "ProductForm.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerTypeForm.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RateSlabForm.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/products/models.py": {
        "Product.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.save": {
            "name": "save",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerType.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerType.save": {
            "name": "save",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RateSlab.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/products/tests.py": {},
    "expressmanage-sandbox-master/expressmanage/products/urls.py": {},
    "expressmanage-sandbox-master/expressmanage/products/views.py": {
        "Product_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 18,
            "return": [
                "str",
                "Union[str, List[str]]",
                "float",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product_CreateView.get_success_url": {
            "name": "get_success_url",
            "location": 38,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product_UpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 50,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerType_IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 71,
            "return": [
                "str",
                "Mapping[str, Any]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerType_CreateView.get": {
            "name": "get",
            "location": 92,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "ContainerType_CreateView.post": {
            "name": "post",
            "location": 102,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Callable",
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Team",
                    "bytes",
                    "str",
                    "zam_repondeur.models.Lecture"
                ]
            }
        },
        "ContainerType_CreateView.form_valid": {
            "name": "form_valid",
            "location": 113,
            "return": [
                "django.http.HttpResponse",
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "rate_slab_formset": [
                    "str"
                ]
            }
        },
        "ContainerType_CreateView.form_invalid": {
            "name": "form_invalid",
            "location": 123,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "str"
                ],
                "rate_slab_formset": [
                    "dict",
                    "str"
                ]
            }
        },
        "ContainerType_CreateView.get_success_url": {
            "name": "get_success_url",
            "location": 128,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerType_UpdateView.get_object": {
            "name": "get_object",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "ContainerType_UpdateView.get": {
            "name": "get",
            "location": 145,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "ContainerType_UpdateView.post": {
            "name": "post",
            "location": 153,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Callable",
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "ContainerType_UpdateView.form_valid": {
            "name": "form_valid",
            "location": 163,
            "return": [
                "django.http.HttpResponse",
                "Dict[str, Any]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Sequence[Tuple[float, float]]"
                ],
                "rate_slab_formset": [
                    "str"
                ]
            }
        },
        "ContainerType_UpdateView.form_invalid": {
            "name": "form_invalid",
            "location": 171,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "str"
                ],
                "rate_slab_formset": [
                    "dict",
                    "str"
                ]
            }
        },
        "ContainerType_UpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 176,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/products/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/products/migrations/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 17,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/admin.py": {},
    "expressmanage-sandbox-master/expressmanage/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/urls.py": {},
    "expressmanage-sandbox-master/expressmanage/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/users/migrations/__init__.py": {},
    "expressmanage-sandbox-master/expressmanage/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "int",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "expressmanage-sandbox-master/expressmanage/users/tests/__init__.py": {}
}
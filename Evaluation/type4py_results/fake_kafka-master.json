{
    "fake_kafka-master/setup.py": {},
    "fake_kafka-master/docs/conf.py": {},
    "fake_kafka-master/examples/consumer.py": {
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "fake_kafka-master/examples/producer.py": {
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "fake_kafka-master/fake_kafka/api.py": {},
    "fake_kafka-master/fake_kafka/client.py": {},
    "fake_kafka-master/fake_kafka/consumer.py": {
        "AIOKafkaConsumer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "bool",
                    "int"
                ],
                "bootstrap_servers": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "group_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "use_websocket": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "AIOKafkaConsumer.__aiter__": {
            "name": "__aiter__",
            "location": 42,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fake_kafka-master/fake_kafka/consumer_fsm.py": {
        "_NotStarted.__aiter__": {
            "name": "__aiter__",
            "location": 30,
            "return": [
                "consumer.AIOKafkaConsumer"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_Started.__aiter__": {
            "name": "__aiter__",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_Stopped.__aiter__": {
            "name": "__aiter__",
            "location": 84,
            "return": [
                "consumer.AIOKafkaConsumer"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "fake_kafka-master/fake_kafka/exceptions.py": {},
    "fake_kafka-master/fake_kafka/messages.py": {},
    "fake_kafka-master/fake_kafka/producer.py": {
        "AIOKafkaProducer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bootstrap_servers": [
                    "str",
                    "Optional[Type[Any]]"
                ],
                "use_websocket": [
                    "str",
                    "Optional[Type[Any]]"
                ]
            }
        }
    },
    "fake_kafka-master/fake_kafka/proxy.py": {
        "FakeKafkaServerProxy.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "use_websocket": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "fake_kafka-master/fake_kafka/server.py": {
        "FakeKafkaServer.__new__": {
            "name": "__new__",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "FakeKafkaServer._init_topics": {
            "name": "_init_topics",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "partitions_per_topic": [
                    "int"
                ]
            }
        },
        "FakeKafkaServer.build_partitions": {
            "name": "build_partitions",
            "location": 73,
            "return": [
                "List[str]",
                "List[Dict]",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeKafkaServer.consumer_hello": {
            "name": "consumer_hello",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "consumer": []
            }
        },
        "FakeKafkaServer.consumer_unsubscribe_all": {
            "name": "consumer_unsubscribe_all",
            "location": 110,
            "return": [
                "float",
                "int",
                "Optional[List[str]]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "consumer": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "FakeKafkaServer.consumer_rebalance": {
            "name": "consumer_rebalance",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "group_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "fake_kafka-master/fake_kafka/types.py": {},
    "fake_kafka-master/fake_kafka/__init__.py": {},
    "fake_kafka-master/perf_test/single_process.py": {
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "fake_kafka-master/perf_test/single_process_with_api.py": {
        "start_server": {
            "name": "start_server",
            "location": 71,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "limit_max_requests": []
            }
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_server.CustomServer.install_signal_handlers": {
            "name": "install_signal_handlers",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fake_kafka-master/perf_test/single_process_with_ws.py": {
        "start_server": {
            "name": "start_server",
            "location": 72,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "limit_max_requests": []
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_server.CustomServer.install_signal_handlers": {
            "name": "install_signal_handlers",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fake_kafka-master/tests/test_api.py": {
        "test_client": {
            "name": "test_client",
            "location": 14,
            "return": [
                "Callable",
                "Callable[..., neuromation.api.Client]"
            ],
            "arguments": {}
        },
        "test_all_partitions": {
            "name": "test_all_partitions",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_consumer_hello": {
            "name": "test_consumer_hello",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "starlette.testclienTestClient"
                ],
                "fake_kafka_server": []
            }
        },
        "test_consumer_subscribe": {
            "name": "test_consumer_subscribe",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "int",
                    "str"
                ],
                "fake_kafka_server": []
            }
        },
        "test_consumer_unsubscribe": {
            "name": "test_consumer_unsubscribe",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "Callable[..., neuromation.api.Client]",
                    "str"
                ],
                "fake_kafka_server": [
                    "starlette.graphql.GraphQLApp"
                ]
            }
        },
        "test_send_message": {
            "name": "test_send_message",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "aiohttp.test_utils.TestClient"
                ],
                "fake_kafka_server": [
                    "str"
                ]
            }
        },
        "test_get_message": {
            "name": "test_get_message",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "Callable[..., neuromation.api.Client]"
                ],
                "fake_kafka_server": []
            }
        },
        "test_send_message_websocket": {
            "name": "test_send_message_websocket",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [],
                "fake_kafka_server": [
                    "str"
                ]
            }
        },
        "test_seek": {
            "name": "test_seek",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "neuromation.api.Client"
                ],
                "fake_kafka_server": [
                    "str"
                ]
            }
        }
    },
    "fake_kafka-master/tests/test_client.py": {},
    "fake_kafka-master/tests/test_fake_kafka.py": {
        "fake_kafka_server": {
            "name": "fake_kafka_server",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_server": {
            "name": "test_server",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "fake_kafka_server": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "fake_kafka-master/tests/test_proxy.py": {
        "api_server_factory": {
            "name": "api_server_factory",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "api_server_factory._factory": {
            "name": "_factory",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "limit_max_requests": []
            }
        },
        "api_server_factory._factory.CustomServer.install_signal_handlers": {
            "name": "install_signal_handlers",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
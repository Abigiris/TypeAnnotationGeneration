{
    "falcon-batteries-included-master/start_worker.py": {},
    "falcon-batteries-included-master/app/apispec.py": {},
    "falcon-batteries-included-master/app/config.py": {},
    "falcon-batteries-included-master/app/constants.py": {},
    "falcon-batteries-included-master/app/exceptions.py": {
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "bool",
                    "int"
                ],
                "errors": [
                    "bool",
                    "Mapping[str, Any]",
                    "Sequence",
                    "Optional[int]",
                    "str",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "HTTPError.to_dict": {
            "name": "to_dict",
            "location": 11,
            "return": [
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]",
                "List[Dict[str, Any]]",
                "int",
                "dict",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-batteries-included-master/app/hooks.py": {
        "LoadObjectFromDB.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "LoadObjectFromDB.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "dict",
                    "Dict[str, str]",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ],
                "resp": [
                    "str",
                    "list"
                ],
                "resource": [
                    "str",
                    "list"
                ],
                "params": [
                    "dict",
                    "Dict[str, str]",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/routes.py": {},
    "falcon-batteries-included-master/app/search.py": {
        "add_to_index": {
            "name": "add_to_index",
            "location": 4,
            "return": [
                "Set[str]",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "index": [
                    "str",
                    "Optional[Any]"
                ],
                "model": [
                    "type"
                ]
            }
        },
        "remove_from_index": {
            "name": "remove_from_index",
            "location": 13,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "index": [
                    "str",
                    "List[app.models.Question]",
                    "app.models.Question",
                    "type"
                ],
                "model": [
                    "str",
                    "List[app.models.Question]",
                    "app.models.Question",
                    "type"
                ]
            }
        },
        "query_index": {
            "name": "query_index",
            "location": 19,
            "return": [
                "str",
                "IO",
                "Iterable[str]",
                "list",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "index": [
                    "str",
                    "Pattern",
                    "Dict[Any, str]",
                    "Sequence",
                    "list"
                ],
                "query": [
                    "str",
                    "Pattern",
                    "Dict[Any, str]",
                    "Sequence",
                    "list"
                ],
                "page": [
                    "str",
                    "Pattern",
                    "Dict[Any, str]",
                    "Sequence",
                    "list"
                ],
                "per_page": [
                    "str",
                    "Pattern",
                    "Dict[Any, str]",
                    "Sequence",
                    "list"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/utilities.py": {
        "find_by_id": {
            "name": "find_by_id",
            "location": 12,
            "return": [
                "str",
                "Callable[[str], None]",
                "int"
            ],
            "arguments": {
                "db": [
                    "django.contrib.auth.models.User",
                    "aw_core.models.Event"
                ],
                "model": [
                    "django.contrib.auth.models.User",
                    "aw_core.models.Event"
                ],
                "id": [
                    "django.contrib.auth.models.User",
                    "aw_core.models.Event"
                ]
            }
        },
        "generate_password_hash": {
            "name": "generate_password_hash",
            "location": 22,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "password_matches": {
            "name": "password_matches",
            "location": 26,
            "return": [
                "bool",
                "Callable[[KT], VT]",
                "str",
                "int"
            ],
            "arguments": {
                "password": [
                    "str",
                    "IO[str]"
                ],
                "hashed_password": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "user_loader": {
            "name": "user_loader",
            "location": 30,
            "return": [
                "List[str]",
                "int",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "payload": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/__init__.py": {},
    "falcon-batteries-included-master/app/middleware/marshmallow.py": {
        "SerializationMiddleware.process_resource": {
            "name": "process_resource",
            "location": 10,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "resp": [
                    "list",
                    "Optional[marshmallow.Schema]",
                    "bool"
                ],
                "resource": [
                    "str",
                    "set",
                    "Dict[str, Any]"
                ],
                "params": [
                    "list",
                    "Optional[marshmallow.Schema]",
                    "bool"
                ]
            }
        },
        "SerializationMiddleware.process_response": {
            "name": "process_response",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Dict[str, Any]"
                ],
                "resp": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "resource": [
                    "str",
                    "Dict[str, Any]"
                ],
                "req_succeeded": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/middleware/sqlalchemy.py": {
        "SQLAlchemySessionManager.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "SQLAlchemySessionManager.process_request": {
            "name": "process_request",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str"
                ],
                "resp": [
                    "dict",
                    "str"
                ]
            }
        },
        "SQLAlchemySessionManager.process_response": {
            "name": "process_response",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "dict"
                ],
                "resp": [
                    "str",
                    "bool"
                ],
                "resource": [
                    "str",
                    "bool"
                ],
                "req_succeeded": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/middleware/__init__.py": {},
    "falcon-batteries-included-master/app/models/base.py": {
        "BaseModel.__tablename__": {
            "name": "__tablename__",
            "location": 22,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "BaseModel.patch": {
            "name": "patch",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/models/movie.py": {
        "Movie.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-batteries-included-master/app/models/rating.py": {},
    "falcon-batteries-included-master/app/models/search.py": {
        "SearchableMixin.search": {
            "name": "search",
            "location": 7,
            "return": [
                "Callable[[Dict], None]",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]"
                ],
                "expression": [],
                "page": [],
                "per_page": []
            }
        },
        "SearchableMixin.before_commit": {
            "name": "before_commit",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "session": [
                    "Dict[str, Any]",
                    "List[List[Any]]"
                ]
            }
        },
        "SearchableMixin.after_commit": {
            "name": "after_commit",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "session": [
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "SearchableMixin.reindex": {
            "name": "reindex",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Type"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/models/task.py": {
        "Task.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_rq_job": {
            "name": "get_rq_job",
            "location": 24,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_progress": {
            "name": "get_progress",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-batteries-included-master/app/models/user.py": {
        "User.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.full_name": {
            "name": "full_name",
            "location": 28,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.email_username": {
            "name": "email_username",
            "location": 32,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.email_domain": {
            "name": "email_domain",
            "location": 36,
            "return": [
                "Mapping[str, Any]",
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-batteries-included-master/app/models/__init__.py": {},
    "falcon-batteries-included-master/app/resources/health_check.py": {
        "HealthCheckResource.on_get": {
            "name": "on_get",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/login.py": {
        "LoginResource.on_post": {
            "name": "on_post",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Response",
                    "str",
                    "bool",
                    "int"
                ],
                "resp": [
                    "falcon.Response",
                    "str"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/movies.py": {
        "MoviesResource.on_get": {
            "name": "on_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ],
                "resp": [
                    "falcon.Response"
                ],
                "args": []
            }
        },
        "MoviesResource.on_post": {
            "name": "on_post",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Any]"
                ],
                "resp": [
                    "falcon.Response",
                    "falcon.Request"
                ]
            }
        },
        "MoviesItemResource.on_delete": {
            "name": "on_delete",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Set[str]]",
                    "int",
                    "Dict[str, str]"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "bytes",
                    "IO[bytes]"
                ],
                "id": [
                    "int",
                    "str",
                    "bool",
                    "falcon.Request"
                ]
            }
        },
        "MoviesItemResource.on_get": {
            "name": "on_get",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request"
                ],
                "resp": [
                    "falcon.Response",
                    "Union['KspNativeControl', int]",
                    "str"
                ],
                "id": [
                    "int",
                    "falcon.Request",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "MoviesItemResource.on_patch": {
            "name": "on_patch",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Set[str]]",
                    "int"
                ],
                "resp": [
                    "falcon.Response",
                    "Union['KspNativeControl', int]",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "falcon.Request"
                ]
            }
        },
        "MoviesBulkResource.on_post": {
            "name": "on_post",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "resp": [
                    "falcon.Response",
                    "falcon.Request"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/playground.py": {
        "task_to_run": {
            "name": "task_to_run",
            "location": 20,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "Optional[object]"
            ],
            "arguments": {
                "sec_to_run": [
                    "int",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "PlaygroundResource.on_get": {
            "name": "on_get",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/ratings.py": {
        "RateResource.on_post": {
            "name": "on_post",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Optional[int]",
                    "models.JournalEntryOrigin",
                    "List[str]",
                    "float"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "Type[models.taxonomies.T]",
                    "Optional[int]"
                ],
                "id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/swagger.py": {
        "ApiSpecResource.on_get": {
            "name": "on_get",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "str"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/users.py": {
        "UsersExistsResource.on_post": {
            "name": "on_post",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "str",
                    "bool"
                ],
                "resp": [
                    "falcon.Response",
                    "str"
                ]
            }
        },
        "UsersResource.on_post": {
            "name": "on_post",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "falcon.Response",
                    "falcon.Request"
                ]
            }
        },
        "UsersItemResource.on_delete": {
            "name": "on_delete",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Set[str]]",
                    "int",
                    "Dict[str, str]"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "bytes",
                    "IO[bytes]"
                ],
                "id": [
                    "int",
                    "str",
                    "bool",
                    "falcon.Request"
                ]
            }
        },
        "UsersItemResource.on_get": {
            "name": "on_get",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request"
                ],
                "resp": [
                    "falcon.Response",
                    "Union['KspNativeControl', int]",
                    "str"
                ],
                "id": [
                    "int",
                    "falcon.Request",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "UsersItemResource.on_patch": {
            "name": "on_patch",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Set[str]]",
                    "int"
                ],
                "resp": [
                    "falcon.Response",
                    "Union['KspNativeControl', int]",
                    "str",
                    "int"
                ],
                "id": [
                    "int",
                    "str",
                    "falcon.Request"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/resources/__init__.py": {},
    "falcon-batteries-included-master/app/schemas/common.py": {
        "PaginationSchema.validate_page": {
            "name": "validate_page",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/schemas/login.py": {
        "LoginSchema.make_user": {
            "name": "make_user",
            "location": 18,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "zerver.models.UserProfile",
                    "list",
                    "medtagger.database.models.User"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/schemas/movies.py": {
        "MovieSchema.validate_release_year": {
            "name": "validate_release_year",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "bytes",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "MovieSchema.make_movie": {
            "name": "make_movie",
            "location": 22,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/schemas/ratings.py": {
        "RatingSchema.validate_rating": {
            "name": "validate_rating",
            "location": 10,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/schemas/users.py": {
        "UserExistsSchema.validate_email": {
            "name": "validate_email",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "zerver.models.UserProfile",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "UserSchema.validate_email": {
            "name": "validate_email",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "zerver.models.UserProfile",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "UserSchema.make_user": {
            "name": "make_user",
            "location": 41,
            "return": [
                "int",
                "dict",
                "amundsen_application.models.user.User"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "Sequence",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/schemas/__init__.py": {},
    "falcon-batteries-included-master/app/tasks/email.py": {
        "_send_email": {
            "name": "_send_email",
            "location": 16,
            "return": [
                "Iterator[object]",
                "Union[tuple, list]",
                "bool",
                "app.models.move.Coordinate",
                "DefaultDict"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool",
                    "groveco_challenge.models.GeoLocation",
                    "List[str]"
                ]
            }
        },
        "send_welcome_message": {
            "name": "send_welcome_message",
            "location": 30,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/tasks/__init__.py": {},
    "falcon-batteries-included-master/app/workflows/user.py": {
        "process_new_user": {
            "name": "process_new_user",
            "location": 10,
            "return": [
                "core.models.User",
                "django.db.models.QuerySet",
                "app.models.user.User",
                "user_models.User",
                "User",
                "app.models.User"
            ],
            "arguments": {
                "db": [
                    "app.models.User",
                    "http_quesuser.model.User"
                ],
                "user": [
                    "app.models.User",
                    "http_quesuser.model.User",
                    "str"
                ]
            }
        }
    },
    "falcon-batteries-included-master/app/workflows/__init__.py": {},
    "falcon-batteries-included-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "falcon-batteries-included-master/migrations/__init__.py": {},
    "falcon-batteries-included-master/migrations/versions/20180722_18-19-25__create_initial_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "falcon-batteries-included-master/migrations/versions/20180805_00-29-05__add_tasks_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "falcon-batteries-included-master/scripts/ipython_shell.py": {},
    "falcon-batteries-included-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 8,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "falcon-batteries-included-master/tests/run_test.py": {
        "test_pass_ci": {
            "name": "test_pass_ci",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "falcon-batteries-included-master/tests/__init__.py": {},
    "falcon-batteries-included-master/tests/functional-tests/conftest.py": {
        "full_path": {
            "name": "full_path",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "str",
                    "bool"
                ]
            }
        },
        "login_and_create_jwt": {
            "name": "login_and_create_jwt",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "create_account": [
                    "str"
                ]
            }
        },
        "create_account": {
            "name": "create_account",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
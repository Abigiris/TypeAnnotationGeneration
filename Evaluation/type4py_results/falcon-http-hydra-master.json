{
    "falcon-http-hydra-master/cli.py": {
        "startserver": {
            "name": "startserver",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "adduser": [
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str"
                ],
                "api": [
                    "str",
                    "bool",
                    "Set[str]",
                    "int",
                    "hackathon.utils.utils.DataMessage"
                ],
                "auth": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]",
                    "int",
                    "List[str]"
                ],
                "hydradoc": [
                    "str"
                ],
                "port": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]"
                ],
                "serve": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "falcon-http-hydra-master/doc.py": {},
    "falcon-http-hydra-master/main.py": {},
    "falcon-http-hydra-master/setup.py": {},
    "falcon-http-hydra-master/examples/drones/doc_gen.py": {
        "doc_gen": {
            "name": "doc_gen",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "API": [
                    "str",
                    "bool"
                ],
                "BASE_URL": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "falcon-http-hydra-master/examples/subsystem/spacecraft_parsed_classes.py": {},
    "falcon-http-hydra-master/examples/subsystem/spacecraft_vocab_jsonld.py": {},
    "falcon-http-hydra-master/examples/subsystem/subsystem_parsed_classes.py": {},
    "falcon-http-hydra-master/examples/subsystem/subsystem_vocab_jsonld.py": {},
    "falcon-http-hydra-master/examples/subsystem/__init__.py": {},
    "falcon-http-hydra-master/hydrus/app.py": {
        "validObject": {
            "name": "validObject",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "failed_authentication": {
            "name": "failed_authentication",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "resp": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "set_response_headers": {
            "name": "set_response_headers",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, str]]",
                "Type[T]"
            ],
            "arguments": {
                "resp": [
                    "int",
                    "tracim.models.data.Content",
                    "str"
                ],
                "ct": [
                    "str",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "utils.types.Vec3D"
                ],
                "status_code": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "hydrafy": {
            "name": "hydrafy",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[Hashable, Any]]",
                    "Sequence[object]"
                ],
                "object_": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[Hashable, Any]]",
                    "Sequence[object]"
                ]
            }
        },
        "checkEndpoint": {
            "name": "checkEndpoint",
            "location": 55,
            "return": [
                "bool",
                "str",
                "\"Task\"",
                "Dict[str, str]",
                "Optional[bytes]"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "method": [
                    "str",
                    "Match",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "type_": [
                    "Union[int, bytes]",
                    "type",
                    "dict",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "getType": {
            "name": "getType",
            "location": 71,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "Type[Any]",
                    "type",
                    "bool",
                    "Dict[str, str]"
                ],
                "class_type": [
                    "str",
                    "Type[Any]",
                    "type",
                    "bool",
                    "Dict[str, str]"
                ],
                "method": [
                    "str",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]"
                ]
            }
        },
        "checkClassOp": {
            "name": "checkClassOp",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "resp": [
                    "Type",
                    "str"
                ],
                "class_type": [
                    "Type",
                    "str"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "app_factory": {
            "name": "app_factory",
            "location": 504,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "API_NAME": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "gsm": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Index.on_get": {
            "name": "on_get",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "str",
                    "dict"
                ]
            }
        },
        "Vocab.on_get": {
            "name": "on_get",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": []
            }
        },
        "Entrypoint.on_get": {
            "name": "on_get",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "Optional[str]",
                    "str",
                    "lib.model.user.user.User",
                    "bytes"
                ]
            }
        },
        "Item.on_get": {
            "name": "on_get",
            "location": 118,
            "return": [
                "Iterable[int]",
                "str",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "str"
                ],
                "resp": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[List[int]]"
                ],
                "id_": [
                    "str",
                    "List[Dict[str, str]]",
                    "Optional[str]"
                ],
                "type_": [
                    "str",
                    "Type[Any]",
                    "utils.types.Vec3D",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "Optional[str]"
                ]
            }
        },
        "Item.on_post": {
            "name": "on_post",
            "location": 149,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "str"
                ],
                "resp": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "id_": [
                    "str",
                    "bool"
                ],
                "type_": [
                    "Optional[int]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Item.on_put": {
            "name": "on_put",
            "location": 198,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "str"
                ],
                "resp": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "id_": [
                    "bool",
                    "str",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "raiden_contracts.utils.type_aliases.ChainID",
                    "Optional[str]"
                ],
                "type_": [
                    "bool",
                    "Sequence[T]",
                    "Callable",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item"
                ]
            }
        },
        "Item.on_delete": {
            "name": "on_delete",
            "location": 246,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[int]"
                ],
                "resp": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "id_": [
                    "str",
                    "models.user.User"
                ],
                "type_": [
                    "str",
                    "Optional[str]",
                    "Type[Any]"
                ]
            }
        },
        "ItemCollection.on_get": {
            "name": "on_get",
            "location": 287,
            "return": [
                "Iterable[int]",
                "str",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "List[\"InlineContent\"]",
                    "List[int]",
                    "bool"
                ],
                "resp": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Mapping[str, Any]",
                    "memoryview"
                ],
                "type_": [
                    "str",
                    "Type[ValueError]"
                ]
            }
        },
        "ItemCollection.on_put": {
            "name": "on_put",
            "location": 327,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[Dict[str, Any]]",
                    "List[\"InlineContent\"]"
                ],
                "resp": [
                    "memoryview",
                    "Optional[int]",
                    "bool",
                    "str",
                    "bytes"
                ],
                "type_": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "ItemCollection.on_post": {
            "name": "on_post",
            "location": 402,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "resp": [
                    "Dict[str, Any]",
                    "str"
                ],
                "type_": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "ItemCollection.on_delete": {
            "name": "on_delete",
            "location": 446,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "List[\"InlineContent\"]",
                    "int"
                ],
                "resp": [
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "List[str]"
                ],
                "type_": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Type[Exception]",
                    "str"
                ]
            }
        },
        "Contexts.on_get": {
            "name": "on_get",
            "location": 484,
            "return": [
                "bool",
                "Dict[str, Dict[str, str]]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "int",
                    "str",
                    "Mapping[str, Any]"
                ],
                "category": [
                    "Mapping"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/utils.py": {
        "get_doc": {
            "name": "get_doc",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_authentication": {
            "name": "get_authentication",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "get_api_name": {
            "name": "get_api_name",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "resp": [
                    "List[str]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "get_hydrus_server_url": {
            "name": "get_hydrus_server_url",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "resp": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Union[None, str]",
                    "str"
                ]
            }
        },
        "get_session": {
            "name": "get_session",
            "location": 62,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "Union[str, int]",
                    "T",
                    "MutableMapping[str, Any]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Getter_setter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_session": [
                    "str",
                    "Optional[List[str]]"
                ],
                "hydrus_server_url": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "api_name": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "api_doc": [
                    "str",
                    "dict"
                ],
                "authentication": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "Getter_setter.process_request": {
            "name": "process_request",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "dict",
                    "str"
                ],
                "resp": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/__init__.py": {},
    "falcon-http-hydra-master/hydrus/data/crud.py": {
        "get": {
            "name": "get",
            "location": 19,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "id_": [
                    "int",
                    "Optional[int]",
                    "Iterable[int]",
                    "float",
                    "str",
                    "Iterable[Union[dict, str]]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "type_": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[List[str]]"
                ],
                "api_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Optional[str]"
                ],
                "recursive": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "insert": {
            "name": "insert",
            "location": 71,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "object_": [
                    "Dict[str, Any]"
                ],
                "session": [
                    "sqlalchemy.orm.scoping.scoped_session",
                    "dict",
                    "sqlalchemy.orm.session.Session"
                ],
                "id_": [
                    "Optional[int]",
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "int"
                ],
                "type_": [
                    "Union[str, Tuple[str, ...]]",
                    "Set[str]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "List[str]"
                ],
                "session": [
                    "str"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 184,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "bool",
                    "Union[str, int]",
                    "Optional[str]",
                    "Union[dict, str]",
                    "type"
                ],
                "type_": [
                    "str",
                    "type",
                    "Union[dict, str]",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "object_": [
                    "Dict[str,str]",
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "session": [
                    "str",
                    "bool",
                    "Union[str, int]",
                    "Optional[str]",
                    "Union[dict, str]",
                    "type"
                ],
                "api_name": [
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "get_collection": {
            "name": "get_collection",
            "location": 204,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "API_NAME": [
                    "Optional[str]",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Optional[List[str]]"
                ],
                "type_": [
                    "Optional[str]",
                    "Union[None, str]"
                ],
                "session": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "get_single": {
            "name": "get_single",
            "location": 232,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "api_name": [
                    "Mapping[str, Any]",
                    "T",
                    "dict",
                    "sqlalchemy.Column",
                    "str",
                    "Dict[str, Any]"
                ],
                "session": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "insert_single": {
            "name": "insert_single",
            "location": 250,
            "return": [
                "str",
                "Union[str, Dict]",
                "int",
                "dict"
            ],
            "arguments": {
                "object_": [
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "dict"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "Type[T]",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update_single": {
            "name": "update_single",
            "location": 265,
            "return": [
                "Dict[str, Any]",
                "Optional[int]",
                "Union[float, str]",
                "float"
            ],
            "arguments": {
                "object_": [
                    "Dict[str, Any]",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "dict"
                ],
                "session": [
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str",
                    "Type"
                ],
                "api_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete_single": {
            "name": "delete_single",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "session": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/db_models.py": {
        "RDFClass.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceProperty.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProperty.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphCAC.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIAC.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIII.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIIT.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/doc_parse.py": {
        "get_classes": {
            "name": "get_classes",
            "location": 11,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "apidoc": [
                    "str"
                ]
            }
        },
        "get_all_properties": {
            "name": "get_all_properties",
            "location": 21,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "classes": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Callable",
                    "bool",
                    "ClassVar"
                ]
            }
        },
        "insert_classes": {
            "name": "insert_classes",
            "location": 33,
            "return": [
                "str",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "classes": [
                    "dict",
                    "str",
                    "Optional[Dict[str, float]]"
                ],
                "session": [
                    "dict",
                    "str",
                    "Optional[Dict[str, float]]"
                ]
            }
        },
        "insert_properties": {
            "name": "insert_properties",
            "location": 49,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "properties": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "str"
                ],
                "session": [
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/exceptions.py": {
        "ClassNotFound.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "ClassNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 13,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceNotFound.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "int",
                    "str",
                    "float"
                ],
                "id_": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "InstanceNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 26,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyNotFound.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "PropertyNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceExists.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "int",
                    "str",
                    "float"
                ],
                "id_": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "InstanceExists.get_HTTP": {
            "name": "get_HTTP",
            "location": 54,
            "return": [
                "Tuple[str, str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotInstanceProperty.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "NotInstanceProperty.get_HTTP": {
            "name": "get_HTTP",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAbstractProperty.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "NotAbstractProperty.get_HTTP": {
            "name": "get_HTTP",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExists.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "UserExists.get_HTTP": {
            "name": "get_HTTP",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserNotFound.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "UserNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 105,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/user.py": {
        "add_user": {
            "name": "add_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[List[str]]"
                ],
                "paraphrase": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str"
                ]
            }
        },
        "generate_basic_digest": {
            "name": "generate_basic_digest",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "id_": [
                    "int",
                    "str",
                    "Optional[int]",
                    "FrozenSet[str]"
                ],
                "paraphrase": [
                    "str"
                ]
            }
        },
        "authenticate_user": {
            "name": "authenticate_user",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "id_": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ],
                "paraphrase": [
                    "str",
                    "int"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ]
            }
        },
        "check_authorization": {
            "name": "check_authorization",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "sqlalchemy.orm.session.Session"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.session.Session.Transaction"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/__init__.py": {},
    "falcon-http-hydra-master/hydrus/data/legacy/generator.py": {
        "randomValue": {
            "name": "randomValue",
            "location": 106,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "interval": [
                    "Dict[str, int]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "generateObject": {
            "name": "generateObject",
            "location": 113,
            "return": [
                "Tuple[float, float]",
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "subsystem": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "gen_random_object": {
            "name": "gen_random_object",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gen_cots": {
            "name": "gen_cots",
            "location": 209,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/legacy/insert_classes.py": {
        "filter_objects": {
            "name": "filter_objects",
            "location": 10,
            "return": [
                "List[Dict]",
                "List[str]",
                "bool",
                "list",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "data": [
                    "list",
                    "str",
                    "int",
                    "Callable[[], Any]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "T"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Hashable",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "get_rdf_lables": {
            "name": "get_rdf_lables",
            "location": 20,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel"
            ],
            "arguments": {
                "obj_list": [
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "List[int]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "gen_classes": {
            "name": "gen_classes",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "bool",
                    "Exception",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/legacy/insert_data.py": {
        "insert_data": {
            "name": "insert_data",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "objects": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Iterable[str]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/doc_maker.py": {
        "error_mapping": {
            "name": "error_mapping",
            "location": 11,
            "return": [
                "Mapping",
                "Dict[str, str]",
                "Dict[str, int]",
                "Dict[str, float]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "input_key_check": {
            "name": "input_key_check",
            "location": 28,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "body": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "body_type": [
                    "str",
                    "int"
                ],
                "literal": [
                    "bool",
                    "Optional[Any]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "create_doc": {
            "name": "create_doc",
            "location": 45,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "doc": [
                    "str"
                ],
                "HYDRUS_SERVER_URL": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "API_NAME": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "create_class": {
            "name": "create_class",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "entrypoint": [
                    "Dict[str, Union[Any, int]]",
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "class_dict": [
                    "dict",
                    "Dict[str, Tuple[int, int]]",
                    "Callable",
                    "Set[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "get_entrypoint": {
            "name": "get_entrypoint",
            "location": 154,
            "return": [
                "str",
                "BaseException",
                "bool",
                "int"
            ],
            "arguments": {
                "doc": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "convert_literal": {
            "name": "convert_literal",
            "location": 172,
            "return": [
                "Sequence[Any]"
            ],
            "arguments": {
                "literal": [
                    "str",
                    "Union[str, int]",
                    "Optional[BaseException]"
                ]
            }
        },
        "create_property": {
            "name": "create_property",
            "location": 193,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "supported_prop": [
                    "Dict[str, Any]",
                    "Callable[[Any], str]",
                    "dict",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "class_in_endpoint": {
            "name": "class_in_endpoint",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "bytes",
                    "list",
                    "int"
                ],
                "entrypoint": [
                    "Type",
                    "type",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "collection_in_endpoint": {
            "name": "collection_in_endpoint",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "type",
                    "Callable[[str], bool]",
                    "bool"
                ],
                "entrypoint": [
                    "Type",
                    "type",
                    "Callable[[str], bool]",
                    "bool"
                ]
            }
        },
        "create_operation": {
            "name": "create_operation",
            "location": 266,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]",
                "Optional[List[\"DeliveryItem\"]]",
                "bool"
            ],
            "arguments": {
                "supported_op": [
                    "Dict[str, Any]",
                    "int",
                    "Tuple['cirq.Qid']",
                    "str"
                ]
            }
        },
        "create_status": {
            "name": "create_status",
            "location": 285,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "possible_status": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Tuple[Any, Any]]",
                    "str"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/doc_writer.py": {
        "HydraDoc.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "API": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "bytes",
                    "List[Dict]",
                    "Optional[Mapping]",
                    "int"
                ],
                "title": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "desc": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "entrypoint": [
                    "bool",
                    "Union[str, bytes]",
                    "str",
                    "List[Dict]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "base_url": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "HydraDoc.add_supported_class": {
            "name": "add_supported_class",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "str",
                    "Optional[str]",
                    "tuple",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ],
                "collection": [
                    "str",
                    "List[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "collectionGet": [
                    "Set[str]",
                    "int",
                    "float",
                    "Callable"
                ],
                "collectionPost": [
                    "Set[str]",
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "HydraDoc.add_possible_status": {
            "name": "add_possible_status",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "HydraDoc.add_baseCollection": {
            "name": "add_baseCollection",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraDoc.add_baseResource": {
            "name": "add_baseResource",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraDoc.add_to_context": {
            "name": "add_to_context",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T",
                    "int"
                ],
                "value": [
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "HydraDoc.gen_EntryPoint": {
            "name": "gen_EntryPoint",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraDoc.generate": {
            "name": "generate",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraClass.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "Optional[Union[str, int]]"
                ],
                "title": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "desc": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "endpoint": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "sub_classof": [
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "HydraClass.add_supported_prop": {
            "name": "add_supported_prop",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "HydraClass.add_supported_op": {
            "name": "add_supported_op",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "Callable"
                ]
            }
        },
        "HydraClass.generate": {
            "name": "generate",
            "location": 112,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraClassProp.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "int",
                    "bool",
                    "float"
                ],
                "title": [
                    "int",
                    "bool",
                    "float"
                ],
                "read": [
                    "int",
                    "bytes"
                ],
                "write": [
                    "int",
                    "bool",
                    "float"
                ],
                "required": [
                    "int",
                    "bool",
                    "float"
                ],
                "desc": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HydraClassProp.generate": {
            "name": "generate",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraClassOp.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "method": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "expects": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "returns": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "HydraClassOp.get_type": {
            "name": "get_type",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Awaitable"
                ]
            }
        },
        "HydraClassOp.generate": {
            "name": "generate",
            "location": 189,
            "return": [
                "dict",
                "Iterable[str]",
                "Tuple[type]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraCollection.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "str",
                    "bool",
                    "dict"
                ],
                "get": [
                    "bool"
                ],
                "post": [
                    "bool"
                ]
            }
        },
        "HydraCollection.generate": {
            "name": "generate",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraCollectionOp.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "Optional[str]",
                    "str",
                    "Iterator[str]",
                    "Union[list, str]"
                ],
                "type_": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "method": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "desc": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "expects": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "returns": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "status": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "HydraCollectionOp.generate": {
            "name": "generate",
            "location": 267,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraEntryPoint.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "Iterable[str]",
                    "Pattern",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ],
                "entrypoint": [
                    "Optional[Callable]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "HydraEntryPoint.add_Class": {
            "name": "add_Class",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "str"
                ]
            }
        },
        "HydraEntryPoint.add_Collection": {
            "name": "add_Collection",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "HydraEntryPoint.generate": {
            "name": "generate",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraEntryPoint.get": {
            "name": "get",
            "location": 312,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPointCollection.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "EntryPointCollection.generate": {
            "name": "generate",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPointClass.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "str",
                    "Callable",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "EntryPointClass.generate": {
            "name": "generate",
            "location": 368,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPointOp.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "Optional[str]"
                ],
                "method": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "desc": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "expects": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "returns": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "statusCodes": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "type_": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "label": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "EntryPointOp.get_type": {
            "name": "get_type",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Awaitable"
                ]
            }
        },
        "EntryPointOp.generate": {
            "name": "generate",
            "location": 426,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraStatus.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "title": [
                    "int",
                    "str",
                    "float"
                ],
                "desc": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "HydraStatus.generate": {
            "name": "generate",
            "location": 453,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "Optional[int]"
                ],
                "adders": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "Optional[bool]"
                ],
                "class_": [
                    "Optional[str]",
                    "Optional[int]"
                ],
                "collection": [
                    "bool",
                    "Optional[str]"
                ],
                "entrypoint": [
                    "Optional[int]",
                    "Optional[Exception]",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Context.createContext": {
            "name": "createContext",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "Type[T]",
                    "dict",
                    "Type",
                    "str"
                ]
            }
        },
        "Context.generate": {
            "name": "generate",
            "location": 560,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.add": {
            "name": "add",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/doc_writer_sample.py": {},
    "falcon-http-hydra-master/hydrus/hydraspec/doc_writer_sample_output.py": {},
    "falcon-http-hydra-master/hydrus/hydraspec/__init__.py": {},
    "falcon-http-hydra-master/hydrus/hydraspec/legacy/crud_template.py": {
        "template": {
            "name": "template",
            "location": 4,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/legacy/parser.py": {
        "fix_keyword": {
            "name": "fix_keyword",
            "location": 10,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "keyword": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_all_classes": {
            "name": "get_all_classes",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "owl_data": [
                    "Optional[bytes]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "hydrafy_class": {
            "name": "hydrafy_class",
            "location": 31,
            "return": [
                "Callable[..., T]",
                "str",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "class_": [
                    "Optional[List[Any]]",
                    "Optional[Callable[..., Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "supported_props": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Sequence[Any]]",
                    "List[int]"
                ],
                "semantic_ref_name": [
                    "str"
                ]
            }
        },
        "hydrafy_classes": {
            "name": "hydrafy_classes",
            "location": 75,
            "return": [
                "Callable[..., T]",
                "str",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "classes": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "properties": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "semantic_ref_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "get_all_properties": {
            "name": "get_all_properties",
            "location": 100,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "owl_data": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[bytes]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "hydrafy_property": {
            "name": "hydrafy_property",
            "location": 114,
            "return": [
                "type",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "prop": [
                    "str",
                    "bool"
                ],
                "semantic_ref_name": [
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "hydrafy_properties": {
            "name": "hydrafy_properties",
            "location": 140,
            "return": [
                "type",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "properties": [
                    "str",
                    "bool",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "semantic_ref_name": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "terminal_props": {
            "name": "terminal_props",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "class_": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional['Node']",
                    "dict"
                ],
                "properties": [
                    "int",
                    "float",
                    "Set[str]",
                    "bool"
                ],
                "semantic_ref_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "dict",
                    "list"
                ]
            }
        },
        "gen_supported_classes": {
            "name": "gen_supported_classes",
            "location": 172,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "hydra_classes": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, str]]",
                    "Type[T]"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/test_app.py": {
        "gen_dummy_object": {
            "name": "gen_dummy_object",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "type"
                ],
                "doc": [
                    "Callable[..., None]"
                ]
            }
        },
        "ViewsTestCase.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Index": {
            "name": "test_Index",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_EntryPoint_context": {
            "name": "test_EntryPoint_context",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Vocab": {
            "name": "test_Vocab",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Collections_GET": {
            "name": "test_Collections_GET",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Collections_PUT": {
            "name": "test_Collections_PUT",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_object_POST": {
            "name": "test_object_POST",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_object_DELETE": {
            "name": "test_object_DELETE",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_object_PUT_at_id": {
            "name": "test_object_PUT_at_id",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_PUT": {
            "name": "test_endpointClass_PUT",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_POST": {
            "name": "test_endpointClass_POST",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_DELETE": {
            "name": "test_endpointClass_DELETE",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_GET": {
            "name": "test_endpointClass_GET",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_bad_objects": {
            "name": "test_bad_objects",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_bad_requests": {
            "name": "test_bad_requests",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Endpoints_Contexts": {
            "name": "test_Endpoints_Contexts",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/test_auth.py": {
        "AuthTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongID_GET": {
            "name": "test_wrongID_GET",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongID_POST": {
            "name": "test_wrongID_POST",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongPass_GET": {
            "name": "test_wrongPass_GET",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongPass_POST": {
            "name": "test_wrongPass_POST",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_GET": {
            "name": "test_Auth_GET",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_POST": {
            "name": "test_Auth_POST",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_PUT": {
            "name": "test_Auth_PUT",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_DELETE": {
            "name": "test_Auth_DELETE",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/test_crud.py": {
        "gen_dummy_object": {
            "name": "gen_dummy_object",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "type"
                ],
                "doc": [
                    "Callable[..., None]"
                ]
            }
        },
        "TestCRUD.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_insert": {
            "name": "test_insert",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_get": {
            "name": "test_get",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_update": {
            "name": "test_update",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_delete": {
            "name": "test_delete",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_get_id": {
            "name": "test_get_id",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_get_type": {
            "name": "test_get_type",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_delete_type": {
            "name": "test_delete_type",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_delete_id": {
            "name": "test_delete_id",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_insert_type": {
            "name": "test_insert_type",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_insert_id": {
            "name": "test_insert_id",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/__init__.py": {}
}
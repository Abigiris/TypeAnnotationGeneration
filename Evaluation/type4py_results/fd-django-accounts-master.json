{
    "fd-django-accounts-master/manage.py": {},
    "fd-django-accounts-master/runtests.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "fd-django-accounts-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 9,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "List[\"libkol.Item\"]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "fd-django-accounts-master/docs/conf.py": {},
    "fd-django-accounts-master/fd_dj_accounts/apps.py": {
        "_validate_app_settings": {
            "name": "_validate_app_settings",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AccountsAppConfig.ready": {
            "name": "ready",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/fd_dj_accounts/auth_backends.py": {
        "AbstractAuthBackend.authenticate": {
            "name": "authenticate",
            "location": 56,
            "return": [
                "typing.Optional[typing.Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "AbstractAuthBackend.get_user": {
            "name": "get_user",
            "location": 79,
            "return": [
                "typing.Optional[typing.Any]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "AuthUserModelAuthBackend.authenticate": {
            "name": "authenticate",
            "location": 120,
            "return": [
                "type",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[django.http.HttpRequest]",
                    "str",
                    "django.http.requesHttpRequest",
                    "bool"
                ],
                "username": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "AuthUserModelAuthBackend.user_can_authenticate": {
            "name": "user_can_authenticate",
            "location": 147,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "AuthUserModelAuthBackend.get_user": {
            "name": "get_user",
            "location": 154,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "str",
                "List[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "fd-django-accounts-master/fd_dj_accounts/base_models.py": {
        "UserManager._create_user": {
            "name": "_create_user",
            "location": 33,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "Dict[str, Any]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "UserManager.create_user": {
            "name": "create_user",
            "location": 52,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Type"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "zerver.models.UserProfile"
                ],
                "password": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "UserManager.create_superuser": {
            "name": "create_superuser",
            "location": 66,
            "return": [
                "django.http.HttpResponse",
                "models.User",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseUser.clean": {
            "name": "clean",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.deactivate": {
            "name": "deactivate",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.__str__": {
            "name": "__str__",
            "location": 207,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.__eq__": {
            "name": "__eq__",
            "location": 210,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "AnonymousUser.__hash__": {
            "name": "__hash__",
            "location": 213,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.save": {
            "name": "save",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.delete": {
            "name": "delete",
            "location": 219,
            "return": [
                "typing.Tuple[builtins.int, builtins.dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.set_password": {
            "name": "set_password",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_password": [
                    "str",
                    "bool"
                ]
            }
        },
        "AnonymousUser.check_password": {
            "name": "check_password",
            "location": 225,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "raw_password": [
                    "str",
                    "bool"
                ]
            }
        },
        "AnonymousUser.deactivate": {
            "name": "deactivate",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.is_anonymous": {
            "name": "is_anonymous",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.is_authenticated": {
            "name": "is_authenticated",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.get_username": {
            "name": "get_username",
            "location": 239,
            "return": [
                "str",
                "Union[str, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/fd_dj_accounts/models.py": {
        "get_or_create_system_user": {
            "name": "get_or_create_system_user",
            "location": 14,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "UserManager._create_user": {
            "name": "_create_user",
            "location": 63,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "Dict[str, Any]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "User.save": {
            "name": "save",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/fd_dj_accounts/urls.py": {},
    "fd-django-accounts-master/fd_dj_accounts/views.py": {},
    "fd-django-accounts-master/fd_dj_accounts/__init__.py": {},
    "fd-django-accounts-master/fd_dj_accounts/migrations/0001_initial.py": {},
    "fd-django-accounts-master/fd_dj_accounts/migrations/__init__.py": {},
    "fd-django-accounts-master/tests/factories.py": {
        "generate_email_address": {
            "name": "generate_email_address",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_user": {
            "name": "create_user",
            "location": 11,
            "return": [
                "float",
                "Tuple[float, float]",
                "bool",
                "Dict[int, int]"
            ],
            "arguments": {}
        }
    },
    "fd-django-accounts-master/tests/settings.py": {},
    "fd-django-accounts-master/tests/test_apps.py": {
        "AppConfigTestCase.test_ready": {
            "name": "test_ready",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test__validate_app_settings_ok": {
            "name": "test__validate_app_settings_ok",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test__validate_app_settings_fail_not_set": {
            "name": "test__validate_app_settings_fail_not_set",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test__validate_app_settings_fail_invalid": {
            "name": "test__validate_app_settings_fail_invalid",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/tests/test_auth_backends.py": {
        "CountingMD5PasswordHasher.encode": {
            "name": "encode",
            "location": 24,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.setUpClass": {
            "name": "setUpClass",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthUserModelAuthBackendTestMixin.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_authentication_timing": {
            "name": "test_authentication_timing",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_authenticate_inactive": {
            "name": "test_authenticate_inactive",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_authenticate": {
            "name": "test_authenticate",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_authenticate_with_USERNAME_FIELD": {
            "name": "test_authenticate_with_USERNAME_FIELD",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_authenticate_bad_password": {
            "name": "test_authenticate_bad_password",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_authenticate_bad_username_field": {
            "name": "test_authenticate_bad_username_field",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_get_user": {
            "name": "test_get_user",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_get_user_pk_str": {
            "name": "test_get_user_pk_str",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_get_user_inactive": {
            "name": "test_get_user_inactive",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthUserModelAuthBackendTestMixin.test_get_user_does_not_exist": {
            "name": "test_get_user_does_not_exist",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FdDjAccountsAuthUserModelAuthBackendTest.create_users": {
            "name": "create_users",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/tests/test_factories.py": {
        "FunctionsTestCase.test_generate_email_address": {
            "name": "test_generate_email_address",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test_create_user_default": {
            "name": "test_create_user_default",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test_create_user_custom": {
            "name": "test_create_user_custom",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/tests/test_models.py": {
        "FunctionsTestCase.test_get_or_create_system_user": {
            "name": "test_get_or_create_system_user",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NaturalKeysTestCase.test_user_natural_key": {
            "name": "test_user_natural_key",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadDataWithoutNaturalKeysTestCase.test_user_is_created": {
            "name": "test_user_is_created",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserManagerTestCase.test_create_user": {
            "name": "test_create_user",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserManagerTestCase.test_empty_username": {
            "name": "test_empty_username",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserManagerTestCase.test_create_user_is_staff": {
            "name": "test_create_user_is_staff",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserManagerTestCase.test_create_superuser": {
            "name": "test_create_superuser",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserManagerTestCase.test_create_super_user_raises_error_on_false_is_superuser": {
            "name": "test_create_super_user_raises_error_on_false_is_superuser",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserManagerTestCase.test_create_superuser_raises_error_on_false_is_staff": {
            "name": "test_create_superuser_raises_error_on_false_is_staff",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_model_manager": {
            "name": "test_model_manager",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_clean_normalize_email_address_as_username": {
            "name": "test_clean_normalize_email_address_as_username",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_user_clean_normalize_email": {
            "name": "test_user_clean_normalize_email",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_default_email": {
            "name": "test_default_email",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_created_by": {
            "name": "test_created_by",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_deactivate": {
            "name": "test_deactivate",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IsActiveTestCase.test_builtin_user_isactive": {
            "name": "test_builtin_user_isactive",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.setUp": {
            "name": "setUp",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_properties": {
            "name": "test_properties",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_str": {
            "name": "test_str",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_eq": {
            "name": "test_eq",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_hash": {
            "name": "test_hash",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_delete": {
            "name": "test_delete",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_save": {
            "name": "test_save",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_set_password": {
            "name": "test_set_password",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_check_password": {
            "name": "test_check_password",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserTests.test_deactivate": {
            "name": "test_deactivate",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "fd-django-accounts-master/tests/urls.py": {},
    "fd-django-accounts-master/tests/utils.py": {
        "auth_user_model_swapped_receiver": {
            "name": "auth_user_model_swapped_receiver",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "fd-django-accounts-master/tests/__init__.py": {}
}
{
    "filepy-master/setup.py": {},
    "filepy-master/filepy/analyse_helper.py": {
        "classify_attribute": {
            "name": "classify_attribute",
            "location": 6,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "attribute": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "create_attributes_to_save": {
            "name": "create_attributes_to_save",
            "location": 14,
            "return": [
                "int",
                "Type"
            ],
            "arguments": {
                "dto": [
                    "filepy.dto.DTO",
                    "list",
                    "dict",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "extract_filename_from_path_to_file": {
            "name": "extract_filename_from_path_to_file",
            "location": 29,
            "return": [
                "str",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "path_to_file": [
                    "str"
                ]
            }
        },
        "is_line_containing_declaration": {
            "name": "is_line_containing_declaration",
            "location": 36,
            "return": [
                "bool",
                "Mapping",
                "Union[List[str], List[Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "declaration": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "split_attributes": {
            "name": "split_attributes",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "filepy-master/filepy/arff_reader.py": {
        "ArffReader.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_to_file": [
                    "str",
                    "List[str]"
                ],
                "delimiter": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ArffReader._analyse": {
            "name": "_analyse",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "filepy-master/filepy/arff_writer.py": {
        "ArffWriter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_to_file": [
                    "str",
                    "List[str]"
                ],
                "delimiter": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ArffWriter.path_to_file": {
            "name": "path_to_file",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArffWriter.delimiter": {
            "name": "delimiter",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArffWriter.write": {
            "name": "write",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dto": [
                    "Callable[[Any], bool]",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "filepy-master/filepy/csv_reader.py": {
        "CsvReader.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_to_file": [
                    "str"
                ],
                "delimiter": [
                    "str",
                    "Callable[[str], str]"
                ],
                "first_line_column_names": [
                    "bool",
                    "Optional[Union[Any, Any]]",
                    "Optional[bool]",
                    "List[str]"
                ],
                "skip_first_column": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "CsvReader._analyse": {
            "name": "_analyse",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "filepy-master/filepy/csv_writer.py": {
        "CsvWriter.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_to_file": [
                    "str",
                    "bool"
                ],
                "delimiter": [
                    "str",
                    "int",
                    "Callable[[str], str]",
                    "Sequence[str]",
                    "List[str]"
                ],
                "skip_writing_columns": [
                    "bool",
                    "Optional[Union[Any, Any]]",
                    "List[str]"
                ]
            }
        },
        "CsvWriter.write": {
            "name": "write",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dto": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "filepy-master/filepy/dto.py": {
        "DTO.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "int",
                    "dict"
                ],
                "columns": [
                    "list",
                    "int",
                    "dict"
                ],
                "additional": [
                    "dict",
                    "bool"
                ]
            }
        },
        "DTO.data": {
            "name": "data",
            "location": 8,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DTO.columns": {
            "name": "columns",
            "location": 12,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DTO.additional": {
            "name": "additional",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "filepy-master/filepy/file_converter.py": {
        "convert": {
            "name": "convert",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "input_reader": [
                    "Iterable[float]",
                    "List[T]",
                    "str",
                    "int",
                    "float"
                ],
                "output_writer": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "filepy-master/filepy/__init__.py": {},
    "filepy-master/test/__init__.py": {},
    "filepy-master/test/at/test_arff_to_arff.py": {
        "test_should_correctly_convert_arff_to_arff": {
            "name": "test_should_correctly_convert_arff_to_arff",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/at/test_arff_to_csv.py": {
        "test_should_correctly_convert_arff_to_csv": {
            "name": "test_should_correctly_convert_arff_to_csv",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/at/test_csv_to_arff.py": {
        "test_should_correctly_convert_csv_to_arff": {
            "name": "test_should_correctly_convert_csv_to_arff",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/at/test_csv_to_csv.py": {
        "test_should_correctly_convert_csv_to_csv": {
            "name": "test_should_correctly_convert_csv_to_csv",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/functional_tests/test_ArffReader_ft.py": {
        "test_correctly_read_matrix_with_column_labels": {
            "name": "test_correctly_read_matrix_with_column_labels",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_correctly_read_when_comments_are_put_between_data_and_data_attribute": {
            "name": "test_correctly_read_when_comments_are_put_between_data_and_data_attribute",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_correctly_read_when_lot_of_blank_lines_put_between_parts": {
            "name": "test_correctly_read_when_lot_of_blank_lines_put_between_parts",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/functional_tests/test_ArffWriter_ft.py": {
        "test_should_correctly_save_file": {
            "name": "test_should_correctly_save_file",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_corectly_save_file_with_non_default_delimiter": {
            "name": "test_should_corectly_save_file_with_non_default_delimiter",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/functional_tests/test_CsvReader_ft.py": {
        "test_should_correctly_read_csv_with_column_labels": {
            "name": "test_should_correctly_read_csv_with_column_labels",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_correctly_read_csv_without_column_labels": {
            "name": "test_should_correctly_read_csv_without_column_labels",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_correctly_read_csv_without_first_column": {
            "name": "test_should_correctly_read_csv_without_first_column",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_correctly_read_csv_without_first_column_and_without_column_labels": {
            "name": "test_should_correctly_read_csv_without_first_column_and_without_column_labels",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/functional_tests/test_CsvWriter_ft.py": {
        "test_should_correctly_save_file": {
            "name": "test_should_correctly_save_file",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_corectly_save_file_with_non_default_delimiter": {
            "name": "test_should_corectly_save_file_with_non_default_delimiter",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_corectly_save_file_when_skipping_writing_columns": {
            "name": "test_should_corectly_save_file_when_skipping_writing_columns",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/ut/test_classify_attribute.py": {
        "test_should_classify_as_numeric_when_number_passed": {
            "name": "test_should_classify_as_numeric_when_number_passed",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_classify_as_string_when_string_passed": {
            "name": "test_should_classify_as_string_when_string_passed",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/ut/test_create_attributes_to_save.py": {
        "test_should_return_numeric_attributes": {
            "name": "test_should_return_numeric_attributes",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_return_numeric_and_string_attributes": {
            "name": "test_should_return_numeric_and_string_attributes",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_return_numeric_attributues_and_columns_ordered_by_number_when_dto_without_columns_passed": {
            "name": "test_should_return_numeric_attributues_and_columns_ordered_by_number_when_dto_without_columns_passed",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/ut/test_extract_filename_from_path_to_file.py": {
        "test_should_return_correct_filename_when_absolute_path_passed": {
            "name": "test_should_return_correct_filename_when_absolute_path_passed",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_return_correct_filename_when_only_filename_passed": {
            "name": "test_should_return_correct_filename_when_only_filename_passed",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/ut/test_is_line_containing_declaration.py": {
        "test_should_return_true_when_line_contains_passed_declaration": {
            "name": "test_should_return_true_when_line_contains_passed_declaration",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_return_false_when_line_does_not_contain_passed_declaration": {
            "name": "test_should_return_false_when_line_does_not_contain_passed_declaration",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "filepy-master/test/ut/test_split_attributes.py": {
        "test_should_return_correctly_split_attributes_when_columns_are_passed_in_parentheses": {
            "name": "test_should_return_correctly_split_attributes_when_columns_are_passed_in_parentheses",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
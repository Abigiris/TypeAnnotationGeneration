{
    "find_meats-master/find_meats/__init__.py": {},
    "find_meats-master/find_meats/data/convert2voc_format.py": {
        "_process_annotation": {
            "name": "_process_annotation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "annotation_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[pathlib.Path]"
                ],
                "target_path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Optional[str]"
                ],
                "dataset_name": [
                    "str",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "_get_output_file_name": {
            "name": "_get_output_file_name",
            "location": 58,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "output_dir": [
                    "str",
                    "pathlib.Path",
                    "List[pathlib.Path]"
                ],
                "index": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "List[pathlib.Path]",
                    "Optional[str]"
                ],
                "suffix": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "List[pathlib.Path]",
                    "Optional[str]"
                ]
            }
        },
        "_prepare_dirs": {
            "name": "_prepare_dirs",
            "location": 67,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "bool",
                "Optional[pathlib.Path]",
                "Callable"
            ],
            "arguments": {
                "base_dir": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str",
                    "path.Path"
                ],
                "suffix": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "_convert": {
            "name": "_convert",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "source_annot_paths": [
                    "str",
                    "Optional[List[str]]",
                    "Tuple[str, int]",
                    "Dict[str, Any]",
                    "Optional[pathlib.Path]",
                    "Optional[str]"
                ],
                "source_img_dirs": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "target_annot_dir": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "int"
                ],
                "target_img_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "dataset_name": [
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "name_indexing": [
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "convert2voc_format": {
            "name": "convert2voc_format",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "Tuple[pathlib.Path]",
                    "int",
                    "Optional[str]"
                ],
                "dataset_name": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "name_indexing": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "find_meats-master/find_meats/data/create_meat_master_tf_record.py": {
        "dict_to_tf_example": {
            "name": "dict_to_tf_example",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "example_dict": [
                    "int",
                    "Dict[int, int]",
                    "List[str]",
                    "Tuple[Any, str]",
                    "Dict[str, int]"
                ],
                "label_map_dict": [
                    "Dict[str, int]",
                    "Sequence[int]",
                    "int",
                    "dict"
                ],
                "images_dir": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "cmk.utils.type_defs.UserId",
                    "Optional[str]"
                ]
            }
        },
        "create_tf_record": {
            "name": "create_tf_record",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "annotation_dir": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "List[str]",
                    "Union[pathlib3x.Path, IO[str], None]"
                ],
                "images_dir": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "List[str]",
                    "Optional[str]"
                ],
                "label_map_dict": [
                    "dict",
                    "list",
                    "bool",
                    "Union[dict, str]"
                ],
                "examples": [
                    "List[str]",
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "find_meats-master/find_meats/data/split_videos.py": {
        "split_video": {
            "name": "split_video",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "target_dir_path": [
                    "str",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ],
                "num_fps": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "resize": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "get_all_files": {
            "name": "get_all_files",
            "location": 70,
            "return": [
                "pathlib.Path",
                "bool",
                "str"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "pathlib.Path"
                ],
                "allowed_suffix": [
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "find_meats-master/find_meats/data/__init__.py": {},
    "find_meats-master/find_meats/data_visualizer/base_statistics_getter.py": {
        "BaseStatisticsGetter.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels_text": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "filenames": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "label2filenames": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "Optional[str]"
                ],
                "label2objects_num": [
                    "int",
                    "str",
                    "float",
                    "Sequence[int]",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Optional[List[str]]"
                ],
                "filename2objects": [
                    "bool",
                    "int",
                    "Dict[str, object]",
                    "tuple"
                ],
                "filename2shape": [
                    "int",
                    "str",
                    "float",
                    "Sequence[int]",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Optional[List[str]]"
                ],
                "filename2annot_path": [
                    "str",
                    "Dict[str, List[str]]",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "Dict[int, Set[str]]",
                    "Set[str]"
                ],
                "filename2img_path": [
                    "str",
                    "Dict[str, List[str]]",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "Dict[int, Set[str]]",
                    "Set[str]"
                ]
            }
        },
        "BaseStatisticsGetter.images_num": {
            "name": "images_num",
            "location": 58,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStatisticsGetter.objects_num": {
            "name": "objects_num",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStatisticsGetter.difficult_num": {
            "name": "difficult_num",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStatisticsGetter.truncated_num": {
            "name": "truncated_num",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStatisticsGetter.labels": {
            "name": "labels",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStatisticsGetter.filenames": {
            "name": "filenames",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStatisticsGetter.create": {
            "name": "create",
            "location": 112,
            "return": [
                "bool",
                "Dict[int, Dict[int, Any]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "dataset_dir": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "process_annot_fn": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "IO",
                    "Sequence[Any]"
                ],
                "annot_format": [
                    "str"
                ],
                "img_format": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "BaseStatisticsGetter._annot2img": {
            "name": "_annot2img",
            "location": 200,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "str",
                    "list"
                ],
                "annot_path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Sequence[str]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "img_format": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter._img2annot": {
            "name": "_img2annot",
            "location": 224,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "str",
                    "list"
                ],
                "img_path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Sequence[str]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "annot_format": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.load": {
            "name": "load",
            "location": 248,
            "return": [
                "'BaseStatisticsGetter'"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Tuple[str]"
                ],
                "path": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Tuple[str]"
                ]
            }
        },
        "BaseStatisticsGetter.save": {
            "name": "save",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[str, bytes, int]",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "List[Tuple[pathlib.PurePosixPath, parso.python.tree.Scope]]",
                    "Sequence"
                ]
            }
        },
        "BaseStatisticsGetter.label2images_num": {
            "name": "label2images_num",
            "location": 264,
            "return": [
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.label2objects_num": {
            "name": "label2objects_num",
            "location": 273,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "BaseStatisticsGetter.label2filenames": {
            "name": "label2filenames",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "path.Path"
                ]
            }
        },
        "BaseStatisticsGetter.filename2image_path": {
            "name": "filename2image_path",
            "location": 292,
            "return": [
                "pathlib.Path",
                "str",
                "Set[pathlib.Path]",
                "int",
                "tuple",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.filename2annotation_path": {
            "name": "filename2annotation_path",
            "location": 301,
            "return": [
                "str",
                "pathlib.Path",
                "Generator[pathlib.Path, None, None]",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.filename2objects": {
            "name": "filename2objects",
            "location": 310,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.filename2shape": {
            "name": "filename2shape",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.filename2labels": {
            "name": "filename2labels",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseStatisticsGetter.filename2bboxes": {
            "name": "filename2bboxes",
            "location": 344,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BaseStatisticsGetter.filename2difficult": {
            "name": "filename2difficult",
            "location": 359,
            "return": [
                "List[str]",
                "list",
                "Dict[str, str]",
                "Tuple[str, str, str, str, str, str, str, str, str, str, str, str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "list"
                ]
            }
        },
        "BaseStatisticsGetter.filename2truncated": {
            "name": "filename2truncated",
            "location": 374,
            "return": [
                "List[str]",
                "list",
                "Dict[str, str]",
                "Tuple[str, str, str, str, str, str, str, str, str, str, str, str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "list"
                ]
            }
        },
        "BaseStatisticsGetter.absolute2relative_bbox_position": {
            "name": "absolute2relative_bbox_position",
            "location": 389,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bboxes": [
                    "int",
                    "str",
                    "bool",
                    "BaseException"
                ],
                "img_shape": [
                    "int",
                    "list",
                    "str",
                    "float"
                ],
                "precision": [
                    "int",
                    "str",
                    "list",
                    "dict"
                ]
            }
        }
    },
    "find_meats-master/find_meats/data_visualizer/voc_statistics_getter.py": {
        "VocStatisticsGetter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels_text": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "filenames": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "label2filenames": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "label2objects_num": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "filename2objects": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "filename2shape": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "filename2annot_path": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "filename2img_path": [
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "VocStatisticsGetter.create": {
            "name": "create",
            "location": 40,
            "return": [
                "Iterable[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Optional[int]"
                ],
                "dataset_dir": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]"
                ],
                "process_annot_fn": [
                    "Optional[str]",
                    "str",
                    "Callable[[], str]"
                ],
                "annot_format": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "img_format": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "VocStatisticsGetter.load": {
            "name": "load",
            "location": 79,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Mapping[int, str]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str"
                ]
            }
        },
        "VocStatisticsGetter.save": {
            "name": "save",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "VocStatisticsGetter.get_voc_info": {
            "name": "get_voc_info",
            "location": 140,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Tuple[str]",
                    "pathlib.Path",
                    "bool"
                ],
                "annotation_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        }
    },
    "find_meats-master/find_meats/data_visualizer/__init__.py": {},
    "find_meats-master/find_meats/util/config_loader.py": {
        "load": {
            "name": "load",
            "location": 10,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "config_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "IO[Any]"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "out_name": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "int",
                    "Union[str, bytes, IO[bytes]]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "find_meats-master/find_meats/util/file_loader.py": {
        "generate_all_files": {
            "name": "generate_all_files",
            "location": 10,
            "return": [
                "typing.Generator[pathlib.Path, None, None]"
            ],
            "arguments": {
                "base_dir": [
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "str"
                ],
                "allowed_suffix": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Callable[[], str]"
                ]
            }
        },
        "get_all_files": {
            "name": "get_all_files",
            "location": 37,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "base_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ],
                "allowed_suffix": [
                    "str",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[str]",
                    "Sequence"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 69,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str"
                ]
            }
        }
    },
    "find_meats-master/find_meats/util/preprocessor.py": {
        "train_test_split": {
            "name": "train_test_split",
            "location": 8,
            "return": [
                "Dict[str, List[Any]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_list": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "test_num": [
                    "int",
                    "float",
                    "Optional[Collection[int]]",
                    "Optional[Union[int, slice]]",
                    "bool",
                    "Optional[List[Any]]",
                    "str"
                ],
                "test_ratio": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Optional[Any]"
                ],
                "shuffle": [
                    "bool",
                    "int"
                ]
            }
        },
        "preprocess_img": {
            "name": "preprocess_img",
            "location": 39,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "source_image": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "float",
                    "int",
                    "str"
                ],
                "img_shape": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "float",
                    "int",
                    "str"
                ],
                "img_mean": [
                    "float",
                    "str",
                    "int",
                    "tuple",
                    "Optional[str]"
                ],
                "img_scale": [
                    "float",
                    "str",
                    "int",
                    "tuple",
                    "Optional[str]"
                ]
            }
        }
    },
    "find_meats-master/find_meats/util/__init__.py": {},
    "find_meats-master/tests/conftest.py": {},
    "find_meats-master/tests/__init__.py": {},
    "find_meats-master/tests/data/test_convert2voc_format.py": {
        "test_process_annotation": {
            "name": "test_process_annotation",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_get_output_file_name": {
            "name": "test_get_output_file_name",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert": {
            "name": "test_convert",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_prepare_dirs": {
            "name": "test_prepare_dirs",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_convert2voc_format": {
            "name": "test_convert2voc_format",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "find_meats-master/tests/data/test_split_videos.py": {
        "test_split_movie": {
            "name": "test_split_movie",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_all_files": {
            "name": "test_get_all_files",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "find_meats-master/tests/data_visualizer/conftest.py": {
        "loaded_voc_getter": {
            "name": "loaded_voc_getter",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "find_meats-master/tests/data_visualizer/test_base_statistics_getter.py": {
        "test_image_num": {
            "name": "test_image_num",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_objects_num": {
            "name": "test_objects_num",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_difficults_num": {
            "name": "test_difficults_num",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_truncated_num": {
            "name": "test_truncated_num",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_labels": {
            "name": "test_labels",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_filenames": {
            "name": "test_filenames",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_label2images_num": {
            "name": "test_label2images_num",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_label2objects_num": {
            "name": "test_label2objects_num",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_label2filenames": {
            "name": "test_label2filenames",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_img2annot": {
            "name": "test_img2annot",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_annot2img": {
            "name": "test_annot2img",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_images2objects": {
            "name": "test_images2objects",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_image2bboxes": {
            "name": "test_image2bboxes",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_image2difficult": {
            "name": "test_image2difficult",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_image2truncated": {
            "name": "test_image2truncated",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_absolute2relative_bbox_position": {
            "name": "test_absolute2relative_bbox_position",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "find_meats-master/tests/data_visualizer/test_configurations.py": {},
    "find_meats-master/tests/data_visualizer/test_voc_statistics_getter.py": {
        "test_create": {
            "name": "test_create",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_save_and_load": {
            "name": "test_save_and_load",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_get_voc_info": {
            "name": "test_get_voc_info",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_image_num": {
            "name": "test_image_num",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "int",
                    "str"
                ]
            }
        },
        "test_objects_num": {
            "name": "test_objects_num",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "bool"
                ]
            }
        },
        "test_difficult_num": {
            "name": "test_difficult_num",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "bool"
                ]
            }
        },
        "test_truncated_num": {
            "name": "test_truncated_num",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "bool"
                ]
            }
        },
        "test_labels": {
            "name": "test_labels",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "int"
                ]
            }
        },
        "test_filenames": {
            "name": "test_filenames",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "Type[Exception]",
                    "List[dict]",
                    "List[List[int]]"
                ]
            }
        },
        "test_annot2img": {
            "name": "test_annot2img",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_img2annot": {
            "name": "test_img2annot",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_label2images_num": {
            "name": "test_label2images_num",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": []
            }
        },
        "test_label2objects_num": {
            "name": "test_label2objects_num",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "Union[str, float]",
                    "List[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_label2filenames": {
            "name": "test_label2filenames",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "pathlib.Path",
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "test_filename2image_path": {
            "name": "test_filename2image_path",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_filename2annot_path": {
            "name": "test_filename2annot_path",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, str]"
                ]
            }
        },
        "test_filename2objects": {
            "name": "test_filename2objects",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_filename2shape": {
            "name": "test_filename2shape",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_filename2labels": {
            "name": "test_filename2labels",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str"
                ]
            }
        },
        "test_filename2bboxes": {
            "name": "test_filename2bboxes",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "float"
                ]
            }
        },
        "test_filename2difficult": {
            "name": "test_filename2difficult",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "float"
                ]
            }
        },
        "test_filename2truncated": {
            "name": "test_filename2truncated",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "float"
                ]
            }
        },
        "test_absolute2relative_bbox_position": {
            "name": "test_absolute2relative_bbox_position",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "loaded_voc_getter": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "find_meats-master/tests/data_visualizer/__init__.py": {},
    "find_meats-master/tests/util/preprocessor.py": {
        "test_train_test_split_with_num": {
            "name": "test_train_test_split_with_num",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_test_split_with_num_and_shuffle": {
            "name": "test_train_test_split_with_num_and_shuffle",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_test_split_with_ratio": {
            "name": "test_train_test_split_with_ratio",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_test_split_with_ratio_and_shuffle": {
            "name": "test_train_test_split_with_ratio_and_shuffle",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
{
    "find_motion-main/find_motion.py": {},
    "find_motion-main/setup.py": {},
    "find_motion-main/find_motion/DummyProgressBar.py": {
        "DummyProgressBar.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyProgressBar.__exit__": {
            "name": "__exit__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyProgressBar.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyProgressBar.update": {
            "name": "update",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "find_motion-main/find_motion/find_motion.py": {
        "init_worker": {
            "name": "init_worker",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Callable",
                    "\"keras.models.Sequential\"",
                    "numpy.ndarray"
                ]
            }
        },
        "find_files": {
            "name": "find_files",
            "location": 1200,
            "return": [
                "str"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "verify_files": {
            "name": "verify_files",
            "location": 1207,
            "return": [
                "str"
            ],
            "arguments": {
                "file_list": [
                    "str",
                    "pathlib.Path",
                    "pathlib2.Path"
                ]
            }
        },
        "sort_files_by_time": {
            "name": "sort_files_by_time",
            "location": 1214,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "file_list": [
                    "Iterable[Tuple[int, Any]]",
                    "Tuple[int]",
                    "list"
                ],
                "priority_intervals": [
                    "List[str]",
                    "Sequence[str]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "in_interval": {
            "name": "in_interval",
            "location": 1246,
            "return": [
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "vid_file": [
                    "int",
                    "str",
                    "allennlp.data.Vocabulary",
                    "Optional[bool]",
                    "pathlib.Path",
                    "Union[str, Tuple[str, ...]]"
                ],
                "time_interval": [
                    "int",
                    "Dict[int, object]",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "run_vid": {
            "name": "run_vid",
            "location": 1292,
            "return": [
                "str",
                "List[str]",
                "List[Union[str, pathlib.Path]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "connection": [
                    "str"
                ]
            }
        },
        "get_progress": {
            "name": "get_progress",
            "location": 1316,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "log_file": [
                    "str",
                    "IO",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "run_pool": {
            "name": "run_pool",
            "location": 1330,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "list",
                    "float",
                    "List[str]",
                    "Dict[int, Any]",
                    "str"
                ],
                "processes": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "float",
                    "Iterator[int]"
                ],
                "files": [
                    "int"
                ],
                "pbar": [
                    "List[Dict]",
                    "bytes",
                    "Dict[str, List[Any]]",
                    "Iterable[allennlp.data.instance.Instance]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "progress_log": [
                    "Optional[str]",
                    "str",
                    "Optional[pathlib.Path]",
                    "Optional[IO[str]]"
                ]
            }
        },
        "run_map": {
            "name": "run_map",
            "location": 1422,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "bool",
                    "Callable[[], bool]",
                    "Optional[bool]",
                    "Callable",
                    "str",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]"
                ],
                "files": [
                    "bool",
                    "Callable[[], bool]",
                    "Optional[bool]",
                    "Callable",
                    "str",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]"
                ],
                "pbar": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str, str, str, str]",
                    "Dict[int, Set[str]]",
                    "bool",
                    "Optional[Dict['cirq.Qid', int]]",
                    "Optional[str]",
                    "int"
                ],
                "progress_log": [
                    "Optional[str]",
                    "str",
                    "Optional[IO[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "run_stream": {
            "name": "run_stream",
            "location": 1449,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "dict",
                    "str",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "processes": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ],
                "cameras": [
                    "bytes",
                    "bool",
                    "float",
                    "list",
                    "Tuple[int, int]",
                    "str"
                ],
                "progress_log": [
                    "version.D.URI",
                    "IO[bytes]",
                    "Union[bytes, str]"
                ]
            }
        },
        "test_files": {
            "name": "test_files",
            "location": 1509,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "Tuple[pathlib.Path, pathlib.Path]",
                    "list",
                    "autorecurse.gnumake.data.Makefile",
                    "Sequence[pathlib.Path]",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "test_stream": {
            "name": "test_stream",
            "location": 1519,
            "return": [
                "None"
            ],
            "arguments": {
                "cameras": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 1528,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_pbar_widgets": {
            "name": "make_pbar_widgets",
            "location": 1543,
            "return": [
                "str",
                "AnyStr",
                "logging.LogRecord"
            ],
            "arguments": {
                "num_files": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "bool"
                ]
            }
        },
        "make_progressbar": {
            "name": "make_progressbar",
            "location": 1556,
            "return": [
                "bool",
                "str",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "progress": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "allennlp.data.tokenizers.Token.izer",
                    "int"
                ],
                "num_files": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "allennlp.data.tokenizers.Token.izer",
                    "int"
                ]
            }
        },
        "read_masks": {
            "name": "read_masks",
            "location": 1567,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "masks_file": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "Path",
                    "pathlib.Path"
                ]
            }
        },
        "set_log_file": {
            "name": "set_log_file",
            "location": 1586,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "input_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "output_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 1591,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "print_help": [
                    "str",
                    "bool"
                ]
            }
        },
        "process_progress": {
            "name": "process_progress",
            "location": 1704,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "files": [
                    "List[pathlib.Path]",
                    "bool",
                    "BinaryIO",
                    "lib.Path",
                    "pathlib.PosixPath",
                    "str"
                ],
                "log_file": [
                    "str",
                    "dict",
                    "\"IConnection\"",
                    "Set[str]"
                ],
                "ignore_drive": [
                    "bool",
                    "str"
                ]
            }
        },
        "process_times": {
            "name": "process_times",
            "location": 1717,
            "return": [
                "float",
                "int",
                "Dict[int, datetime.datetime]",
                "List[float]",
                "List[Tuple[Any, str, int]]",
                "numpy.ndarray",
                "str",
                "Dict[str, List[float]]"
            ],
            "arguments": {
                "time_order": [
                    "float",
                    "numpy.ndarray",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "process_config": {
            "name": "process_config",
            "location": 1737,
            "return": [
                "str",
                "List[str]",
                "Union[List, Dict]",
                "Tuple[Any, Any, Any]",
                "Dict[str, Set[str]]",
                "dict"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "configparser.RawConfigParser",
                    "Callable[[str], None]"
                ],
                "args": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 1767,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "VideoError.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_msg": [
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "Union[str, int]",
                    "argparse.Namespace"
                ]
            }
        },
        "VideoInfo.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "log_level": [
                    "str",
                    "int"
                ]
            }
        },
        "VideoInfo.__str__": {
            "name": "__str__",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoInfo._load_video": {
            "name": "_load_video",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoInfo._get_video_info": {
            "name": "_get_video_info",
            "location": 200,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [],
                "show": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[numpy.ndarray]",
                    "str",
                    "dict"
                ],
                "show_extras": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "gaussian": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Iterable[int]"
                ],
                "mask_areas": [
                    "int",
                    "bool",
                    "float"
                ],
                "scale": [
                    "float",
                    "str",
                    "datetime.timedelta"
                ],
                "threshold": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, int]"
                ],
                "box_size": [
                    "int",
                    "float",
                    "BinaryIO",
                    "logging.LogRecord"
                ],
                "no_shade": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str",
                    "float"
                ],
                "no_hue": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str",
                    "float"
                ],
                "no_edges": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str",
                    "float"
                ]
            }
        },
        "VideoFrame.find_edges": {
            "name": "find_edges",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.make_hue": {
            "name": "make_hue",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.diff": {
            "name": "diff",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_frame": [
                    "dict",
                    "int",
                    "numpy.ndarray"
                ],
                "ref_color": [
                    "dict",
                    "int",
                    "numpy.ndarray"
                ],
                "ref_edges": [
                    "dict",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "VideoFrame.threshold": {
            "name": "threshold",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.find_contours": {
            "name": "find_contours",
            "location": 287,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.make_mini": {
            "name": "make_mini",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.blur_frame": {
            "name": "blur_frame",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.mask_off_areas": {
            "name": "mask_off_areas",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFrame.mask_off_frame": {
            "name": "mask_off_frame",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ],
                "scale": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VideoFrame.cleanup": {
            "name": "cleanup",
            "location": 370,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "connection": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "outdir": [
                    "str",
                    "Optional[str]",
                    "int",
                    "TextIO",
                    "bool"
                ],
                "fps": [
                    "int"
                ],
                "box_size": [
                    "int",
                    "str",
                    "bool"
                ],
                "min_box_scale": [
                    "int",
                    "bool",
                    "str"
                ],
                "cache_time": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "min_time": [
                    "int",
                    "bool"
                ],
                "threshold": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "avg": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "datetime.timedelta"
                ],
                "blur_scale": [
                    "int",
                    "bool",
                    "str"
                ],
                "mask_areas": [
                    "list",
                    "Sequence[Sequence[str]]",
                    "int",
                    "List[str]",
                    "str"
                ],
                "show": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "show_extras": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "int"
                ],
                "codec": [
                    "str",
                    "Optional[str]",
                    "int",
                    "TextIO"
                ],
                "log_level": [
                    "bool"
                ],
                "mem": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "cleanup": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "multiprocess": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "cascades": [
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "List[List[str]]",
                    "Optional",
                    "List[Dict[str, Any]]"
                ],
                "haarcascades_path": [
                    "str",
                    "int"
                ],
                "yolov3": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "yolov4": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "yolo_tiny": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "confidence": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "datetime.timedelta"
                ],
                "yolo_path": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "no_object_detection": [
                    "bool",
                    "List[str]"
                ],
                "always_object_detection": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "object_detect_frame_interval": [
                    "int",
                    "bool",
                    "str"
                ],
                "no_shade": [
                    "bool",
                    "List[str]"
                ],
                "no_hue": [
                    "bool",
                    "List[str]"
                ],
                "no_edges": [
                    "bool",
                    "List[str]"
                ],
                "no_output": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "VideoMotion._load_cascades": {
            "name": "_load_cascades",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion._prepare_yolov4": {
            "name": "_prepare_yolov4",
            "location": 539,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion._calc_min_area": {
            "name": "_calc_min_area",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion._load_video": {
            "name": "_load_video",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion._get_video_info": {
            "name": "_get_video_info",
            "location": 603,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion._make_outfile": {
            "name": "_make_outfile",
            "location": 622,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion._make_gaussian": {
            "name": "_make_gaussian",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.make_mini": {
            "name": "make_mini",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "VideoMotion.find_edges": {
            "name": "find_edges",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Optional[str]",
                    "argparse.Namespace",
                    "bool"
                ]
            }
        },
        "VideoMotion.blur_frame": {
            "name": "blur_frame",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "VideoMotion.read": {
            "name": "read",
            "location": 684,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.output_frame": {
            "name": "output_frame",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "bool",
                    "str"
                ]
            }
        },
        "VideoMotion.output_raw_frame": {
            "name": "output_raw_frame",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Optional[str]",
                    "bool",
                    "IO[Any]",
                    "int",
                    "str"
                ]
            }
        },
        "VideoMotion.decide_output": {
            "name": "decide_output",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.cleanup_cache": {
            "name": "cleanup_cache",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.is_open": {
            "name": "is_open",
            "location": 796,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.scale_area": {
            "name": "scale_area",
            "location": 803,
            "return": [
                "numpy.ndarray",
                "float",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "area": [
                    "int",
                    "str"
                ],
                "scale": [
                    "int",
                    "str"
                ]
            }
        },
        "VideoMotion.make_hue": {
            "name": "make_hue",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "VideoMotion.mask_off_areas": {
            "name": "mask_off_areas",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "VideoMotion.find_diff": {
            "name": "find_diff",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "float",
                    "int",
                    "str",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "VideoMotion.find_movement": {
            "name": "find_movement",
            "location": 867,
            "return": [
                "int",
                "Union[tuple, list]",
                "Set[str]",
                "Set[VT]"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "VideoMotion.process_contours": {
            "name": "process_contours",
            "location": 890,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ],
                "contours": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "color": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VideoMotion.find_objects": {
            "name": "find_objects",
            "location": 916,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "Callable[..., None]",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "bool",
                    "int",
                    "datetime",
                    "Callable[[str], int]",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "width": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "numpy.array"
                ],
                "scaleFactor": [
                    "Union[str, int]",
                    "bool",
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "Optional[float]",
                    "int"
                ],
                "minNeighbours": [
                    "Union[str, int]",
                    "bool",
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "Optional[float]",
                    "int"
                ],
                "nmsthreshold": [
                    "int",
                    "float",
                    "str",
                    "Optional[List[str]]",
                    "datetime.datetime"
                ]
            }
        },
        "VideoMotion.draw_objects": {
            "name": "draw_objects",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "numpy.ndarray"
                ],
                "scale": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        },
        "VideoMotion.find_centre": {
            "name": "find_centre",
            "location": 1000,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "area": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "VideoMotion.draw_text": {
            "name": "draw_text",
            "location": 1006,
            "return": [
                "int",
                "Union[tuple, list]",
                "Optional[bool]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "VideoMotion.make_box": {
            "name": "make_box",
            "location": 1020,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "self": [],
                "contour": [
                    "int",
                    "Callable",
                    "str"
                ],
                "frame": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "VideoMotion.make_area_from_box": {
            "name": "make_area_from_box",
            "location": 1028,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "object_tuple": [
                    "bool",
                    "float",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "VideoMotion.make_area_from_box_2": {
            "name": "make_area_from_box_2",
            "location": 1035,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "object_tuple": [
                    "int",
                    "str",
                    "pygame.math.Vector2",
                    "Union[numpy.ndarray, xarray.DataArray]"
                ]
            }
        },
        "VideoMotion.make_area_from_rect": {
            "name": "make_area_from_rect",
            "location": 1041,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "object_tuple": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "VideoMotion.draw_box": {
            "name": "draw_box",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "area": [
                    "int",
                    "Callable",
                    "str"
                ],
                "frame": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "List[str]"
                ],
                "color": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VideoMotion.key_pressed": {
            "name": "key_pressed",
            "location": 1054,
            "return": [
                "str",
                "int",
                "Callable[[Dict], Any]",
                "bytes",
                "Optional[str]",
                "Sequence[Sequence[Any]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "Union[str, int]"
                ]
            }
        },
        "VideoMotion.cleanup": {
            "name": "cleanup",
            "location": 1058,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.find_motion": {
            "name": "find_motion",
            "location": 1083,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMotion.show_frames": {
            "name": "show_frames",
            "location": 1154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTime.__init__": {
            "name": "__init__",
            "location": 1256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "struct_time": [
                    "int",
                    "float",
                    "datetime.datetime"
                ]
            }
        },
        "ClockTime.__str__": {
            "name": "__str__",
            "location": 1261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockTime.__lt__": {
            "name": "__lt__",
            "location": 1265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClockTime.__le__": {
            "name": "__le__",
            "location": 1270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClockTime.__eq__": {
            "name": "__eq__",
            "location": 1274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClockTime.__ne__": {
            "name": "__ne__",
            "location": 1279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ClockTime.__gt__": {
            "name": "__gt__",
            "location": 1282,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClockTime.__ge__": {
            "name": "__ge__",
            "location": 1287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "find_motion-main/find_motion/__init__.py": {},
    "find_motion-main/find_motion/__main__.py": {},
    "find_motion-main/find_motion/data/__init__.py": {}
}
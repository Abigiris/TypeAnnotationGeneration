{
    "flake8-adjustable-complexity-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 16,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/ast_helpers.py": {
        "get_all_funcdefs_from": {
            "name": "get_all_funcdefs_from",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "tree": [
                    "int",
                    "Callable"
                ]
            }
        },
        "extract_all_vars_in_node": {
            "name": "extract_all_vars_in_node",
            "location": 13,
            "return": [
                "OrderedDict",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Callable[[], Any]]"
            ],
            "arguments": {
                "ast_tree": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "get_var_names_from_assignment": {
            "name": "get_var_names_from_assignment",
            "location": 26,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "assignment_node": []
            }
        },
        "get_var_names_from_funcdef": {
            "name": "get_var_names_from_funcdef",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Set[str]",
                "IO"
            ],
            "arguments": {
                "funcdef_node": [
                    "Type",
                    "Set[str]",
                    "Union"
                ]
            }
        },
        "get_var_names_from_for": {
            "name": "get_var_names_from_for",
            "location": 45,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "for_node": [
                    "Iterable[T]",
                    "Optional[List[str]]",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/checker.py": {
        "CyclomaticComplexityAdjustableChecker.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "CyclomaticComplexityAdjustableChecker.add_options": {
            "name": "add_options",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "argparse.ArgumentParser",
                    "Dict[str, Any]",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "CyclomaticComplexityAdjustableChecker.parse_options": {
            "name": "parse_options",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Config",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "T"
                ],
                "option_manager": [
                    "Dict[str, Any]",
                    "Config",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "T"
                ],
                "options": [
                    "Dict[str, Any]",
                    "Config",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "T"
                ],
                "args": []
            }
        },
        "CyclomaticComplexityAdjustableChecker.parse_options_to_config": {
            "name": "parse_options_to_config",
            "location": 81,
            "return": [
                "lightbus.config.Config",
                "Dict[str, str]",
                "Config",
                "Dict[str, Any]",
                "opentrons.config.robot_configs.robot_config",
                "pyramid.config.Configurator"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "option_manager": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "options": [
                    "str",
                    "List[dict]",
                    "Mapping[str, str]",
                    "List[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "args": []
            }
        },
        "CyclomaticComplexityAdjustableChecker.run": {
            "name": "run",
            "location": 110,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.int, builtins.str, builtins.type], None, None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/complexity_helpers.py": {
        "validate_adjustable_complexity_in_tree": {
            "name": "validate_adjustable_complexity_in_tree",
            "location": 14,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "tree": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]"
                ],
                "var_names_blacklist": [
                    "bool",
                    "Callable[[T], Any]"
                ],
                "max_complexity": [
                    "bool",
                    "Callable[[T], Any]"
                ],
                "bad_var_name_penalty": [
                    "bool",
                    "Callable[[T], Any]"
                ],
                "allow_single_names_in_vars": [
                    "bool",
                    "Callable[[T], Any]"
                ],
                "single_letter_var_whitelist": [
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "check_funcdef_adjustable_complexity": {
            "name": "check_funcdef_adjustable_complexity",
            "location": 37,
            "return": [
                "List[int]",
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "funcdef": [
                    "str",
                    "bool",
                    "int"
                ],
                "var_names_blacklist": [
                    "int",
                    "bool",
                    "Dict[str, object]",
                    "List[int]"
                ],
                "default_max_complexity": [
                    "bool",
                    "int",
                    "List[str]",
                    "float"
                ],
                "bad_var_name_penalty": [
                    "int",
                    "str",
                    "Optional[str]",
                    "type",
                    "Optional[int]",
                    "bool"
                ],
                "allow_single_names_in_vars": [
                    "bool",
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "Optional[Type[Warning]]"
                ],
                "single_letter_var_whitelist": [
                    "bool",
                    "int",
                    "Hashable",
                    "\"Cash\""
                ]
            }
        },
        "get_mccabe_complexity_for": {
            "name": "get_mccabe_complexity_for",
            "location": 75,
            "return": [
                "str",
                "List[str]",
                "List[List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "node": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/config.py": {},
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/list_helpers.py": {
        "flat": {
            "name": "flat",
            "location": 4,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "list",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "list_of_lists": [
                    "List[List]",
                    "list",
                    "List[List[T]]",
                    "List[int]",
                    "List[float]",
                    "List[Union[int, float]]"
                ]
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/violations.py": {
        "BaseViolation.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "str",
                    "bool",
                    "List[int]",
                    "int",
                    "Optional[Dict]"
                ],
                "col_offset": [
                    "str",
                    "bool",
                    "List[int]",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "BaseViolation.format_message": {
            "name": "format_message",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "BaseViolation.get_context": {
            "name": "get_context",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexityViolation.get_context": {
            "name": "get_context",
            "location": 31,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PenaltyTooHighViolation.get_context": {
            "name": "get_context",
            "location": 46,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/__init__.py": {},
    "flake8-adjustable-complexity-master/tests/conftest.py": {
        "get_option_manager": {
            "name": "get_option_manager",
            "location": 13,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "_parse_options": {
            "name": "_parse_options",
            "location": 19,
            "return": [
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "manager": [
                    "Sequence[str]"
                ],
                "args": []
            }
        },
        "parse_options": {
            "name": "parse_options",
            "location": 29,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "run_validator_for_test_file": {
            "name": "run_validator_for_test_file",
            "location": 39,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "Dict[str, Type]",
                "Dict[str, int]",
                "Type[dict]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "args": []
            }
        },
        "parse_options.with_args": {
            "name": "with_args",
            "location": 30,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "flake8-adjustable-complexity-master/tests/test_adjustable_complexity.py": {
        "test_checker": {
            "name": "test_checker",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[Callable[[Any], None]]"
                ],
                "args": [],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "flake8-adjustable-complexity-master/tests/test_config.py": {
        "test_parse_max_mccabe_complexity": {
            "name": "test_parse_max_mccabe_complexity",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "parse_options": [
                    "dss.config.Replica",
                    "str",
                    "Callable"
                ],
                "args": [],
                "max_mccabe_complexity": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_parse_max_complexity_per_path": {
            "name": "test_parse_max_complexity_per_path",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "parse_options": [
                    "Callable",
                    "str"
                ],
                "args": [],
                "max_complexity_per_path": [
                    "int"
                ]
            }
        },
        "test_parse_max_complexity_per_path_error": {
            "name": "test_parse_max_complexity_per_path_error",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "parse_options": [
                    "List[str]",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "test_parse_var_names_blacklist": {
            "name": "test_parse_var_names_blacklist",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "parse_options": [
                    "str",
                    "List[str]",
                    "dss.config.Replica"
                ],
                "args": [],
                "var_names_blacklist": [
                    "str"
                ]
            }
        }
    },
    "flake8-adjustable-complexity-master/tests/test_files/code_CAC001.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "flake8-adjustable-complexity-master/tests/test_files/code_CAC002.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "flake8-adjustable-complexity-master/tests/test_files/too_complex_with_blacklisted.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    }
}
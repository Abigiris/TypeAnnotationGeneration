{
    "flake8-annotations-coverage-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 17,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "flake8-annotations-coverage-master/flake8_annotations_coverage/annotations_coverage.py": {
        "AnnotationsCoverageChecker.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "AnnotationsCoverageChecker.add_options": {
            "name": "add_options",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "AnnotationsCoverageChecker.parse_options": {
            "name": "parse_options",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, str]"
                ],
                "options": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "AnnotationsCoverageChecker.run": {
            "name": "run",
            "location": 33,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-annotations-coverage-master/flake8_annotations_coverage/ast_helpers.py": {
        "has_type_annotations": {
            "name": "has_type_annotations",
            "location": 3,
            "return": [
                "str",
                "bool",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "func_def": [
                    "Exception"
                ]
            }
        }
    },
    "flake8-annotations-coverage-master/flake8_annotations_coverage/__init__.py": {},
    "flake8-annotations-coverage-master/tests/conftest.py": {
        "run_validator_for_test_file": {
            "name": "run_validator_for_test_file",
            "location": 7,
            "return": [
                "list",
                "List[str]",
                "str",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "min_coverage": [
                    "str",
                    "bool",
                    "Sequence[Dict[str, str]]"
                ]
            }
        }
    },
    "flake8-annotations-coverage-master/tests/test_annotations_coverage.py": {
        "test_always_ok_for_empty_file": {
            "name": "test_always_ok_for_empty_file",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ok_for_fully_annotated_file": {
            "name": "test_ok_for_fully_annotated_file",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ok_for_args_only_annotated_file": {
            "name": "test_ok_for_args_only_annotated_file",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ok_for_kwonly_annotated_file": {
            "name": "test_ok_for_kwonly_annotated_file",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ok_for_kwargs_annotated_file": {
            "name": "test_ok_for_kwargs_annotated_file",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "flake8-annotations-coverage-master/tests/test_files/arg_only_annotated.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "bar": {
            "name": "bar",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "flake8-annotations-coverage-master/tests/test_files/empty.py": {},
    "flake8-annotations-coverage-master/tests/test_files/fully_annotated.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bar": {
            "name": "bar",
            "location": 5,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "flake8-annotations-coverage-master/tests/test_files/kwargs_annotated.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "flake8-annotations-coverage-master/tests/test_files/kwonly_arg_annotated.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "bar": {
            "name": "bar",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
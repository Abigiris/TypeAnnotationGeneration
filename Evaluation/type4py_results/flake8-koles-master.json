{
    "flake8-koles-master/setup.py": {},
    "flake8-koles-master/flake8_koles/checker.py": {
        "KolesChecker.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "KolesChecker.run": {
            "name": "run",
            "location": 31,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.int, builtins.str, builtins.type], None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KolesChecker.add_options": {
            "name": "add_options",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "utils.parser.BinaryParser",
                    "str",
                    "qutebrowser.utils.usertypes.KeyMode"
                ],
                "parser": []
            }
        },
        "KolesChecker.parse_options": {
            "name": "parse_options",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "optparse.Values",
                    "str"
                ],
                "options": [
                    "optparse.Values",
                    "str"
                ]
            }
        },
        "KolesChecker._get_pattern": {
            "name": "_get_pattern",
            "location": 64,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "KolesChecker._get_swears_data": {
            "name": "_get_swears_data",
            "location": 75,
            "return": [
                "dict",
                "str",
                "Callable",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KolesChecker._is_swear_ignored": {
            "name": "_is_swear_ignored",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "list",
                    "str",
                    "Sequence[T]",
                    "int",
                    "float"
                ]
            }
        },
        "KolesChecker._get_file_content": {
            "name": "_get_file_content",
            "location": 92,
            "return": [
                "bool",
                "str",
                "Optional['SparkSession']",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KolesChecker._get_filename_errors": {
            "name": "_get_filename_errors",
            "location": 99,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KolesChecker._get_content_errors": {
            "name": "_get_content_errors",
            "location": 113,
            "return": [
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "KolesChecker._check_row": {
            "name": "_check_row",
            "location": 133,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.str], None, None]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "KolesChecker._censor_word": {
            "name": "_censor_word",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "KolesChecker._get_lang_choices": {
            "name": "_get_lang_choices",
            "location": 146,
            "return": [
                "bool",
                "int",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "flake8-koles-master/flake8_koles/__about__.py": {},
    "flake8-koles-master/flake8_koles/__init__.py": {},
    "flake8-koles-master/tests/conftest.py": {
        "koles_checker": {
            "name": "koles_checker",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "flake8-koles-master/tests/test_checker.py": {
        "test_run": {
            "name": "test_run",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "mock_get_pattern": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "mock_readlines": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_add_options": {
            "name": "test_add_options",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "koles_checker": []
            }
        },
        "test_parse_options": {
            "name": "test_parse_options",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "koles_checker": [
                    "Dict[str, Any]",
                    "IO[str]"
                ]
            }
        },
        "test_get_pattern": {
            "name": "test_get_pattern",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "mock_get_swears_data": [],
                "ignore_shorties": [],
                "ignore_swears": [],
                "expected_result": [
                    "int",
                    "unittesmock.Mock",
                    "Callable",
                    "float"
                ],
                "get_swears_data_value": [],
                "koles_checker": []
            }
        },
        "test_get_swears_data": {
            "name": "test_get_swears_data",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "mock_resource_string": [
                    "int",
                    "unittesmock.Mock"
                ],
                "lang": [
                    "str"
                ],
                "resource_string_value": [
                    "int",
                    "unittesmock.Mock"
                ],
                "expected_result": [
                    "Mapping[str, Any]",
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[int, Any]"
                ],
                "koles_checker": [
                    "str"
                ]
            }
        },
        "test_get_file_content_stdin": {
            "name": "test_get_file_content_stdin",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin_get_value": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "filename": [
                    "str"
                ],
                "koles_checker": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_file_content_regular_filename": {
            "name": "test_get_file_content_regular_filename",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "mock_readlines": [
                    "unittesmock.Mock"
                ],
                "koles_checker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_get_filename_errors": {
            "name": "test_get_filename_errors",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "mock_censor_word": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_check_row": [
                    "unittesmock.Mock"
                ],
                "filename": [
                    "str"
                ],
                "check_row_value": [
                    "unittesmock.Mock"
                ],
                "censor_word_value": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "expected_result": [
                    "bool"
                ],
                "koles_checker": [
                    "str"
                ]
            }
        },
        "test_get_content_errors": {
            "name": "test_get_content_errors",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "mock_censor_word": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_check_row": [
                    "unittesmock.Mock"
                ],
                "content": [],
                "check_row_value": [
                    "unittesmock.Mock"
                ],
                "censor_word_value": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "expected_result": [
                    "unittesmock.Mock"
                ],
                "koles_checker": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_get_content_errors_empty_pattern": {
            "name": "test_get_content_errors_empty_pattern",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "koles_checker": []
            }
        },
        "test_check_row": {
            "name": "test_check_row",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int",
                    "type"
                ],
                "string": [
                    "str",
                    "List[int]",
                    "dict",
                    "List[str]",
                    "bool"
                ],
                "expected_result": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "koles_checker": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "test_censor_word": {
            "name": "test_censor_word",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "word": [
                    "Union[int, slice]"
                ],
                "censor_msg": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "expected_result": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "koles_checker": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_lang_choices": {
            "name": "test_get_lang_choices",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "listdir_mock": [],
                "listdir_value": [],
                "expected_result": [],
                "koles_checker": []
            }
        }
    }
}
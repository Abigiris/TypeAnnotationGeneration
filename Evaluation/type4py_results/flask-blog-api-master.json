{
    "flask-blog-api-master/config.py": {},
    "flask-blog-api-master/api/models.py": {
        "Article.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleSchema.validate_unique_slug": {
            "name": "validate_unique_slug",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "bytes",
                    "List['PlotInfo']",
                    "dict"
                ]
            }
        }
    },
    "flask-blog-api-master/api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 25,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config_class": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "configure_app": {
            "name": "configure_app",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "config_class": [
                    "int",
                    "bool",
                    "str",
                    "OrderedDict",
                    "Dict[str, Any]"
                ],
                "app": [
                    "Optional[str]",
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "initialize_extensions": {
            "name": "initialize_extensions",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "dict"
                ]
            }
        }
    },
    "flask-blog-api-master/api/controllers/articles.py": {
        "parse_errors": {
            "name": "parse_errors",
            "location": 9,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "errors": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "all_articles": {
            "name": "all_articles",
            "location": 23,
            "return": [
                "float",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        },
        "article_by_slug": {
            "name": "article_by_slug",
            "location": 47,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "zerver.models.Realm",
                    "db.models.Region",
                    "float",
                    "app.models.Journey"
                ]
            }
        }
    },
    "flask-blog-api-master/api/controllers/root.py": {
        "api_directory": {
            "name": "api_directory",
            "location": 7,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {}
        }
    },
    "flask-blog-api-master/api/controllers/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "flask-blog-api-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "database": {
            "name": "database",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "flask-blog-api-master/tests/test_models.py": {
        "test_create_article": {
            "name": "test_create_article",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialize_article_to_dict": {
            "name": "test_serialize_article_to_dict",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deserialize_article_to_article_instance": {
            "name": "test_deserialize_article_to_article_instance",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "bool",
                    "neuromation.api.Client"
                ],
                "database": [
                    "bool",
                    "neuromation.api.Client"
                ]
            }
        }
    },
    "flask-blog-api-master/tests/controllers/test_articles.py": {
        "mock_articles": {
            "name": "mock_articles",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "database": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_parse_errors": {
            "name": "test_parse_errors",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestArticlesGetCollection.test_get_empty_articles": {
            "name": "test_get_empty_articles",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]"
                ]
            }
        },
        "TestArticlesGetCollection.test_get_all_articles": {
            "name": "test_get_all_articles",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]"
                ],
                "mock_articles": [
                    "List[T]"
                ]
            }
        },
        "TestArticlesGetResource.test_get_article_by_slug": {
            "name": "test_get_article_by_slug",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "mock_articles": [
                    "List[T]"
                ]
            }
        },
        "TestArticlesGetResource.test_get_article_not_found": {
            "name": "test_get_article_not_found",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestArticlesCreateResource.test_create_article": {
            "name": "test_create_article",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestArticlesCreateResource.test_create_article_no_request_body": {
            "name": "test_create_article_no_request_body",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestArticlesCreateResource.test_create_article_missing_title": {
            "name": "test_create_article_missing_title",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestArticlesCreateResource.test_create_article_missing_content": {
            "name": "test_create_article_missing_content",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestArticlesCreateResource.test_create_article_unique_title": {
            "name": "test_create_article_unique_title",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "mock_articles": [
                    "List[T]",
                    "Generator[None, Any, None]"
                ]
            }
        },
        "TestArticlesUpdateResource.test_update_article": {
            "name": "test_update_article",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "database": [
                    "str",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "mock_articles": [
                    "str",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestArticlesUpdateResource.test_update_article_to_existing_title": {
            "name": "test_update_article_to_existing_title",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "database": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Any]"
                ],
                "mock_articles": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestArticlesUpdateResource.test_update_article_no_request_body": {
            "name": "test_update_article_no_request_body",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "mock_articles": [
                    "List[T]"
                ]
            }
        },
        "TestArticlesUpdateResource.test_update_article_missing_title": {
            "name": "test_update_article_missing_title",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "neuromation.api.Client"
                ],
                "mock_articles": [
                    "List[T]"
                ]
            }
        },
        "TestArticlesUpdateResource.test_update_article_missing_content": {
            "name": "test_update_article_missing_content",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "neuromation.api.Client"
                ],
                "mock_articles": [
                    "List[T]"
                ]
            }
        },
        "TestArticlesDeleteResource.test_delete_article_by_slug_response": {
            "name": "test_delete_article_by_slug_response",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ],
                "mock_articles": [
                    "List[T]",
                    "Generator[None, Any, None]"
                ]
            }
        },
        "TestArticlesDeleteResource.test_delete_article_not_found": {
            "name": "test_delete_article_not_found",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "flask-blog-api-master/tests/controllers/test_root.py": {
        "test_root_content": {
            "name": "test_root_content",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    }
}
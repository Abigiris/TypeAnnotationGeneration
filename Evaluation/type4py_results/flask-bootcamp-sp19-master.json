{
    "flask-bootcamp-sp19-master/manage.py": {
        "runserver": {
            "name": "runserver",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "runworker": {
            "name": "runworker",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "flask-bootcamp-sp19-master/api/core.py": {
        "create_response": {
            "name": "create_response",
            "location": 24,
            "return": [],
            "arguments": {
                "data": [],
                "status": [],
                "message": []
            }
        },
        "serialize_list": {
            "name": "serialize_list",
            "location": 50,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "all_exception_handler": {
            "name": "all_exception_handler",
            "location": 62,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "Mixin.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-bootcamp-sp19-master/api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 17,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "test_config": [
                    "bool",
                    "Type[T]",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "RequestFormatter.format": {
            "name": "format",
            "location": 11,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "flask-bootcamp-sp19-master/api/views/main.py": {
        "find_item": {
            "name": "find_item",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "items": [
                    "int",
                    "List[str]",
                    "str",
                    "list",
                    "Optional[str]",
                    "List[int]"
                ],
                "id": [
                    "Set[str]",
                    "str",
                    "list",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_all_items": {
            "name": "get_all_items",
            "location": 42,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_item": {
            "name": "get_item",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "add_item": {
            "name": "add_item",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "remove_item": {
            "name": "remove_item",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "edit_item": {
            "name": "edit_item",
            "location": 71,
            "return": [
                "str",
                "Optional[bool]",
                "Sequence[str]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "TodoItem.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "TodoItem.to_dict": {
            "name": "to_dict",
            "location": 15,
            "return": [
                "Dict[str, bool]",
                "Dict[str, Any]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_items": {
            "name": "get_items",
            "location": 23,
            "return": [
                "str",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-bootcamp-sp19-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "flask-bootcamp-sp19-master/tests/test_basic.py": {
        "test_index": {
            "name": "test_index",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_person": {
            "name": "test_get_person",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "neuromation.api.Client"
                ]
            }
        }
    },
    "flask-bootcamp-sp19-master/tests/__init__.py": {}
}
{
    "flask-calendar-master/config.py": {},
    "flask-calendar-master/flask_calendar/actions.py": {
        "get_authentication": {
            "name": "get_authentication",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "Callable",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "index_action": {
            "name": "index_action",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "login_action": {
            "name": "login_action",
            "location": 42,
            "return": [
                "List[str]",
                "bool",
                "Set[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "do_login_action": {
            "name": "do_login_action",
            "location": 46,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "main_calendar_action": {
            "name": "main_calendar_action",
            "location": 78,
            "return": [
                "str",
                "List[Tuple[str, str, int]]",
                "Dict[str, str]",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "calendar_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "new_task_action": {
            "name": "new_task_action",
            "location": 134,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, Union[int, str]]",
                "Sequence[int]"
            ],
            "arguments": {
                "calendar_id": [
                    "str",
                    "Optional[int]"
                ],
                "year": [
                    "int",
                    "bool"
                ],
                "month": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "edit_task_action": {
            "name": "edit_task_action",
            "location": 180,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "calendar_id": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "year": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "month": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "day": [
                    "str",
                    "Optional[float]",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "task_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "update_task_action": {
            "name": "update_task_action",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "calendar_id": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "year": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "month": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "day": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "task_id": [
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "save_task_action": {
            "name": "save_task_action",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "calendar_id": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_task_action": {
            "name": "delete_task_action",
            "location": 365,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "List[dict]",
                "dict"
            ],
            "arguments": {
                "calendar_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "year": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "month": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "day": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "task_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "update_task_day_action": {
            "name": "update_task_day_action",
            "location": 380,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "werkzeug.wrappers.Response"
            ],
            "arguments": {
                "calendar_id": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ],
                "year": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ],
                "month": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ],
                "day": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ],
                "task_id": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "hide_repetition_task_instance_action": {
            "name": "hide_repetition_task_instance_action",
            "location": 398,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "calendar_id": [
                    "str"
                ],
                "year": [
                    "str"
                ],
                "month": [
                    "str"
                ],
                "day": [
                    "str"
                ],
                "task_id": [
                    "str"
                ]
            }
        }
    },
    "flask-calendar-master/flask_calendar/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 25,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config_overrides": [
                    "dict",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "create_app.favicon": {
            "name": "favicon",
            "location": 40,
            "return": [
                "bytes",
                "List[str]",
                "Optional[str]",
                "dict",
                "flask.Response",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "flask-calendar-master/flask_calendar/app_utils.py": {
        "authenticated": {
            "name": "authenticated",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decorated_function": [
                    "Callable"
                ]
            }
        },
        "authorized": {
            "name": "authorized",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decorated_function": [
                    "Callable"
                ]
            }
        },
        "previous_month_link": {
            "name": "previous_month_link",
            "location": 48,
            "return": [
                "str",
                "Iterable",
                "bool"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ]
            }
        },
        "next_month_link": {
            "name": "next_month_link",
            "location": 57,
            "return": [
                "str",
                "Iterable",
                "bool"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ]
            }
        },
        "new_session_id": {
            "name": "new_session_id",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "is_session_valid": {
            "name": "is_session_valid",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, str]"
                ]
            }
        },
        "add_session": {
            "name": "add_session",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "get_session_username": {
            "name": "get_session_username",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "task_details_for_markup": {
            "name": "task_details_for_markup",
            "location": 82,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "details": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "authenticated.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "authorized.wrapper": {
            "name": "wrapper",
            "location": 35,
            "return": [
                "tuple",
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {}
        }
    },
    "flask-calendar-master/flask_calendar/authentication.py": {
        "Authentication.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_folder": [
                    "str"
                ],
                "password_salt": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "failed_login_delay_base": [
                    "bool",
                    "Union[str, Iterable[str]]",
                    "bytes"
                ]
            }
        },
        "Authentication.is_valid": {
            "name": "is_valid",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "float"
                ]
            }
        },
        "Authentication.user_data": {
            "name": "user_data",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "Dict[str, Dict[str, Any]]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "Authentication.add_user": {
            "name": "add_user",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int"
                ],
                "plaintext_password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "default_calendar": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Authentication.delete_user": {
            "name": "delete_user",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Union[str, IO]",
                    "str",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "Authentication._hash_password": {
            "name": "_hash_password",
            "location": 52,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "plaintext_password": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Authentication._save": {
            "name": "_save",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication._failed_attempt": {
            "name": "_failed_attempt",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flask-calendar-master/flask_calendar/authorization.py": {
        "Authorization.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calendar_data": [
                    "bytes",
                    "Dict[str, str]",
                    "calendar_data.CalendarData",
                    "Dict[str, dict]",
                    "Tuple[int, str, bytearray]"
                ]
            }
        },
        "Authorization.can_access": {
            "name": "can_access",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "List[int]",
                    "bytes",
                    "List[str]",
                    "Tuple[int]"
                ],
                "data": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "calendar_id": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "flask-calendar-master/flask_calendar/calendar_data.py": {
        "CalendarData.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_folder": [
                    "Tuple[float, float]",
                    "bool",
                    "int",
                    "List[Dict]",
                    "List[int]"
                ],
                "first_weekday": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "CalendarData.load_calendar": {
            "name": "load_calendar",
            "location": 32,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "CalendarData.users_list": {
            "name": "users_list",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Optional[str]",
                    "int"
                ],
                "calendar_id": [
                    "int",
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ]
            }
        },
        "CalendarData.user_details": {
            "name": "user_details",
            "location": 50,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "data": [
                    "Optional[Dict]",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[bytes]"
                ],
                "calendar_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "CalendarData.is_past": {
            "name": "is_past",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "year": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "month": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "current_year": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "current_month": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CalendarData.tasks_from_calendar": {
            "name": "tasks_from_calendar",
            "location": 75,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[int]"
                ],
                "month": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[int]"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "CalendarData.hide_past_tasks": {
            "name": "hide_past_tasks",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "dict",
                    "float",
                    "datetime.timedelta"
                ],
                "month": [
                    "int",
                    "dict",
                    "float",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "tasks": [
                    "int",
                    "dict",
                    "float",
                    "Optional[str]",
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "CalendarData.task_from_calendar": {
            "name": "task_from_calendar",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "int",
                    "str"
                ],
                "year": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "month": [
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "day": [
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "task_id": [
                    "int",
                    "str",
                    "IO[bytes]",
                    "bool"
                ]
            }
        },
        "CalendarData.repetitive_task_from_calendar": {
            "name": "repetitive_task_from_calendar",
            "location": 139,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "int"
                ],
                "year": [
                    "int",
                    "str",
                    "Optional[datetime.timedelta]",
                    "Optional[datetime.datetime]"
                ],
                "month": [
                    "int",
                    "str",
                    "Optional[datetime.timedelta]",
                    "Optional[datetime.datetime]"
                ],
                "task_id": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "CalendarData.date_for_frontend": {
            "name": "date_for_frontend",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "year": [
                    "int",
                    "str"
                ],
                "month": [
                    "int",
                    "str"
                ],
                "day": [
                    "int",
                    "str"
                ]
            }
        },
        "CalendarData.add_repetitive_tasks_from_calendar": {
            "name": "add_repetitive_tasks_from_calendar",
            "location": 151,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "List[str]",
                    "int",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "month": [
                    "List[str]",
                    "int",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "data": [
                    "List[str]",
                    "int",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "tasks": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CalendarData.delete_task": {
            "name": "delete_task",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "str"
                ],
                "year_str": [
                    "str"
                ],
                "month_str": [
                    "str"
                ],
                "day_str": [
                    "str"
                ],
                "task_id": [
                    "int",
                    "str"
                ]
            }
        },
        "CalendarData.update_task_day": {
            "name": "update_task_day",
            "location": 202,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "str",
                    "int"
                ],
                "year_str": [
                    "str"
                ],
                "month_str": [
                    "str"
                ],
                "day_str": [
                    "str"
                ],
                "task_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "new_day_str": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "CalendarData.create_task": {
            "name": "create_task",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "year": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Dict[str, str]"
                ],
                "month": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Dict[str, str]"
                ],
                "day": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Dict[str, str]"
                ],
                "title": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]"
                ],
                "is_all_day": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]"
                ],
                "start_time": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]"
                ],
                "details": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "List[str]",
                    "List[datetime.date]"
                ],
                "color": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]"
                ],
                "has_repetition": [
                    "bool",
                    "int",
                    "Mapping",
                    "Sequence",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "repetition_type": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]",
                    "List[Tuple[str, int]]"
                ],
                "repetition_subtype": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "repetition_value": [
                    "bool",
                    "Optional[str]",
                    "List[Tuple[str, int]]",
                    "float",
                    "str"
                ],
                "end_time": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.date]"
                ]
            }
        },
        "CalendarData.hide_repetition_task_instance": {
            "name": "hide_repetition_task_instance",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "str"
                ],
                "year_str": [
                    "str",
                    "List[str]"
                ],
                "month_str": [
                    "str"
                ],
                "day_str": [
                    "str"
                ],
                "task_id_str": [
                    "str"
                ]
            }
        },
        "CalendarData.add_task_to_list": {
            "name": "add_task_to_list",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "tasks": [
                    "str",
                    "dict",
                    "bool"
                ],
                "day_str": [
                    "str",
                    "dict",
                    "bool"
                ],
                "month_str": [
                    "str",
                    "dict",
                    "bool"
                ],
                "new_task": [
                    "dict",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Set[str]",
                    "List[T]",
                    "List[Tuple[str, str, bool]]",
                    "list"
                ]
            }
        },
        "CalendarData._repetitive_tasks_from_calendar": {
            "name": "_repetitive_tasks_from_calendar",
            "location": 306,
            "return": [
                "Tuple[int, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "bool",
                    "str",
                    "dict"
                ],
                "month": [
                    "int",
                    "bool",
                    "str",
                    "dict"
                ],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "CalendarData._is_repetition_hidden_for_day": {
            "name": "_is_repetition_hidden_for_day",
            "location": 350,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict"
                ],
                "id_str": [
                    "str",
                    "dict"
                ],
                "year_str": [
                    "str",
                    "dict",
                    "bool"
                ],
                "month_str": [
                    "str",
                    "dict",
                    "bool"
                ],
                "day_str": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "CalendarData._is_repetition_hidden": {
            "name": "_is_repetition_hidden",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "constants.HttpRequestMethod",
                    "List[str]"
                ],
                "id_str": [
                    "str",
                    "dict",
                    "constants.HttpRequestMethod",
                    "List[str]"
                ],
                "year_str": [
                    "str",
                    "dict"
                ],
                "month_str": [
                    "str",
                    "dict"
                ]
            }
        },
        "CalendarData._save_calendar": {
            "name": "_save_calendar",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ],
                "filename": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "CalendarData._clear_empty_entries": {
            "name": "_clear_empty_entries",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "CalendarData._clear_past_hidden_entries": {
            "name": "_clear_past_hidden_entries",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        }
    },
    "flask-calendar-master/flask_calendar/constants.py": {},
    "flask-calendar-master/flask_calendar/gregorian_calendar.py": {
        "GregorianCalendar.setfirstweekday": {
            "name": "setfirstweekday",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "weekday": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GregorianCalendar.previous_month_and_year": {
            "name": "previous_month_and_year",
            "location": 28,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ]
            }
        },
        "GregorianCalendar.next_month_and_year": {
            "name": "next_month_and_year",
            "location": 33,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "year": [
                    "datetime.datetime",
                    "float",
                    "int"
                ],
                "month": [
                    "datetime.datetime",
                    "float",
                    "int"
                ]
            }
        },
        "GregorianCalendar.current_date": {
            "name": "current_date",
            "location": 39,
            "return": [
                "datetime.datetime",
                "int",
                "Union[str, int]"
            ],
            "arguments": {}
        },
        "GregorianCalendar.month_days": {
            "name": "month_days",
            "location": 44,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "year": [
                    "int",
                    "dict"
                ],
                "month": [
                    "int",
                    "dict"
                ]
            }
        },
        "GregorianCalendar.month_days_with_weekday": {
            "name": "month_days_with_weekday",
            "location": 48,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "year": [
                    "int",
                    "dict"
                ],
                "month": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "flask-calendar-master/flask_calendar/uwsgi.py": {},
    "flask-calendar-master/flask_calendar/__init__.py": {},
    "flask-calendar-master/test/conftest.py": {
        "app": {
            "name": "app",
            "location": 8,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[type]",
                "dict"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 13,
            "return": [
                "flask.Flask",
                "flask.testing.FlaskClient"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "str",
                    "app.utils.models.ModelManager"
                ]
            }
        }
    },
    "flask-calendar-master/test/multi_day_logic.py": {},
    "flask-calendar-master/test/test_app.py": {
        "test_login_credentials": {
            "name": "test_login_credentials",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "username": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "password": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "success": [
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_session_id_cookie_set_when_logged_in": {
            "name": "test_session_id_cookie_set_when_logged_in",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "username": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "password": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "success": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_redirects_to_calendar_when_logged_in": {
            "name": "test_redirects_to_calendar_when_logged_in",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        }
    },
    "flask-calendar-master/test/test_app_utils.py": {
        "test_supported_task_details_for_markup": {
            "name": "test_supported_task_details_for_markup",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "url": [
                    "str"
                ],
                "description": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "test_unsupported_task_details_for_markup": {
            "name": "test_unsupported_task_details_for_markup",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "url": [
                    "str"
                ],
                "description": [
                    "str",
                    "flask.Flask"
                ]
            }
        }
    },
    "flask-calendar-master/test/test_authentication.py": {
        "authentication": {
            "name": "authentication",
            "location": 9,
            "return": [
                "str",
                "IO",
                "bool",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {}
        },
        "test_is_valid_authentication": {
            "name": "test_is_valid_authentication",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "authentication": [
                    "str",
                    "bool"
                ],
                "username": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_retrieve_user_data": {
            "name": "test_retrieve_user_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "authentication": [
                    "authentication.Authentication"
                ]
            }
        },
        "test_password_is_not_stored_plain": {
            "name": "test_password_is_not_stored_plain",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "authentication": [
                    "authentication.Authentication"
                ]
            }
        }
    },
    "flask-calendar-master/test/test_authorization.py": {
        "authorization": {
            "name": "authorization",
            "location": 9,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "test_unauthorized_if_calendar_users_list_empty": {
            "name": "test_unauthorized_if_calendar_users_list_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "authorization": [
                    "flask_calendar.authorization.Authorization"
                ]
            }
        },
        "test_unauthorized_if_calendar_user_not_in_list": {
            "name": "test_unauthorized_if_calendar_user_not_in_list",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "authorization": [
                    "flask_calendar.authorization.Authorization"
                ]
            }
        },
        "test_authorized_if_calendar_user_in_list": {
            "name": "test_authorized_if_calendar_user_in_list",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "authorization": [
                    "flask_calendar.authorization.Authorization"
                ]
            }
        },
        "test_authorized_if_calendar_user_in_list_using_calendar_data": {
            "name": "test_authorized_if_calendar_user_in_list_using_calendar_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "authorization": [
                    "flask_calendar.authorization.Authorization"
                ]
            }
        }
    },
    "flask-calendar-master/test/test_calendar_data.py": {
        "calendar_data": {
            "name": "calendar_data",
            "location": 9,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "sample_data_file_data": {
            "name": "sample_data_file_data",
            "location": 14,
            "return": [
                "IO[bytes]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "calendar_data": [
                    "flask_calendar.calendar_data.CalendarData",
                    "str",
                    "dict"
                ]
            }
        },
        "past_normal_tasks_data": {
            "name": "past_normal_tasks_data",
            "location": 19,
            "return": [
                "Callable[[Any], bool]",
                "IO[bytes]",
                "bool",
                "str"
            ],
            "arguments": {
                "calendar_data": [
                    "flask_calendar.calendar_data.CalendarData",
                    "str",
                    "dict",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "test_error_retrieving_tasks_from_calendar": {
            "name": "test_error_retrieving_tasks_from_calendar",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "year": [
                    "int",
                    "dict",
                    "flask_calendar.calendar_data.CalendarData",
                    "bool"
                ],
                "month": [
                    "int",
                    "dict",
                    "flask_calendar.calendar_data.CalendarData",
                    "bool"
                ],
                "data": [
                    "int",
                    "dict",
                    "flask_calendar.calendar_data.CalendarData",
                    "bool"
                ],
                "calendar_data": [
                    "int",
                    "dict",
                    "flask_calendar.calendar_data.CalendarData",
                    "bool"
                ]
            }
        },
        "test_loads_a_valid_data_file": {
            "name": "test_loads_a_valid_data_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "flask_calendar.calendar_data.CalendarData",
                    "bytes",
                    "dict",
                    "str",
                    "Optional[List[Dict]]",
                    "bool"
                ],
                "sample_data_file_data": [
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "test_loads_normal_tasks_from_calendar_given_data": {
            "name": "test_loads_normal_tasks_from_calendar_given_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "dict",
                    "str"
                ],
                "sample_data_file_data": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_joins_repetitive_tasks_with_normal_ones": {
            "name": "test_joins_repetitive_tasks_with_normal_ones",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "dict",
                    "Dict[str, str]"
                ],
                "sample_data_file_data": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_creates_new_normal_task": {
            "name": "test_creates_new_normal_task",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "save_calendar_mock": [
                    "unittesmock.MagicMock"
                ],
                "calendar_data": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "test_creates_task_with_start_and_end_dates": {
            "name": "test_creates_task_with_start_and_end_dates",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "save_calendar_mock": [
                    "unittesmock.MagicMock"
                ],
                "calendar_data": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_hidden_montly_monthday_repetitions_dont_appear": {
            "name": "test_hidden_montly_monthday_repetitions_dont_appear",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "str",
                    "flask_calendar.calendar_data.CalendarData",
                    "calendar_data.CalendarData",
                    "List[str]"
                ]
            }
        },
        "test_hidden_montly_weekday_repetitions_dont_appear": {
            "name": "test_hidden_montly_weekday_repetitions_dont_appear",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "str",
                    "flask_calendar.calendar_data.CalendarData",
                    "calendar_data.CalendarData",
                    "List[str]"
                ]
            }
        },
        "test_tasks_can_be_filtered_after_retrieval": {
            "name": "test_tasks_can_be_filtered_after_retrieval",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "int",
                    "bool",
                    "dict",
                    "flask_calendar.calendar_data.CalendarData",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "past_normal_tasks_data": [
                    "Dict[str, str]",
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "MutableMapping",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_existing_individual_task_retrieval": {
            "name": "test_existing_individual_task_retrieval",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "calendar_data.CalendarData",
                    "int",
                    "flask_calendar.calendar_data.CalendarData",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_non_existing_individual_task_retrieval": {
            "name": "test_non_existing_individual_task_retrieval",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "calendar_data.CalendarData",
                    "flask_calendar.calendar_data.CalendarData",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_existing_repetitive_task_retrieval": {
            "name": "test_existing_repetitive_task_retrieval",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "calendar_data.CalendarData",
                    "flask_calendar.calendar_data.CalendarData",
                    "bytes"
                ]
            }
        },
        "test_non_existing_repetitive_task_retrieval": {
            "name": "test_non_existing_repetitive_task_retrieval",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "calendar_data": [
                    "calendar_data.CalendarData",
                    "flask_calendar.calendar_data.CalendarData",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "flask-calendar-master/test/test_linters.py": {
        "test_mypy_compliance": {
            "name": "test_mypy_compliance",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask-calendar-master/test/__init__.py": {}
}
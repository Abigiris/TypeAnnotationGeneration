{
    "flask-hintful-master/sample.py": {
        "dataclass_route": {
            "name": "dataclass_route",
            "location": 30,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "query_arg": [
                    "int",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "model": [
                    "int",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "flask-hintful-master/setup.py": {},
    "flask-hintful-master/docs/source/conf.py": {
        "setup": {
            "name": "setup",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "flask-hintful-master/flask_hintful/deserializer.py": {
        "str_to_bool": {
            "name": "str_to_bool",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Deserializer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Deserializer.add_deserializer": {
            "name": "add_deserializer",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Tuple[type]"
                ],
                "deserializer_func": [
                    "str",
                    "Tuple[type]"
                ]
            }
        },
        "Deserializer.deserialize_args": {
            "name": "deserialize_args",
            "location": 48,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "params": [
                    "str"
                ],
                "body": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Type",
                    "Optional[Dict]"
                ]
            }
        },
        "Deserializer.deserialize": {
            "name": "deserialize",
            "location": 80,
            "return": [
                "Sequence['cirq.Qid']",
                "Sequence",
                "dict",
                "Union[Dict, List]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "T",
                    "int"
                ],
                "type_": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Sequence[T]"
                ]
            }
        },
        "Deserializer.is_dataclass": {
            "name": "is_dataclass",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "Deserializer.deserialize_dataclass": {
            "name": "deserialize_dataclass",
            "location": 124,
            "return": [
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "type_": []
            }
        },
        "Deserializer.is_marshmallow_model": {
            "name": "is_marshmallow_model",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "T",
                    "dict",
                    "bytes",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "Deserializer.deserialize_marshmallow_model": {
            "name": "deserialize_marshmallow_model",
            "location": 159,
            "return": [
                "Dict[str, Any]",
                "list",
                "str",
                "Callable"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict"
                ],
                "type_": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "flask-hintful-master/flask_hintful/flask_hintful.py": {
        "FlaskHintful.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "dict",
                    "str",
                    "flask.Flask"
                ],
                "serializer": [
                    "str",
                    "Mapping[str, str]",
                    "Tuple[int, int]",
                    "flask.Flask"
                ],
                "deserializer": [
                    "str",
                    "Mapping[str, str]",
                    "Tuple[int, int]",
                    "flask.Flask"
                ],
                "openapi_provider": [
                    "dict",
                    "flask.Flask",
                    "str"
                ],
                "openapi_security": [
                    "str",
                    "flask.Flask",
                    "dict"
                ]
            }
        },
        "FlaskHintful.route": {
            "name": "route",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "list",
                    "flask.Blueprint"
                ]
            }
        },
        "FlaskHintful.register_blueprint": {
            "name": "register_blueprint",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "flask.Blueprint",
                    "bytes",
                    "Optional[Iterable[Any]]",
                    "int",
                    "str",
                    "Union[str, bytes]",
                    "TextIO"
                ]
            }
        },
        "FlaskHintful.route.decorator": {
            "name": "decorator",
            "location": 56,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "view_func": [
                    "Callable[[str], int]",
                    "bytes",
                    "int",
                    "tuple",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "flask-hintful-master/flask_hintful/openapi.py": {
        "OpenApiProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenApiProvider.add_security": {
            "name": "add_security",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth_list": [
                    "List[str]",
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "OpenApiProvider.add_openapi_path": {
            "name": "add_openapi_path",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "List[str]"
                ],
                "methods": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "view_func": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "OpenApiProvider.get_openapi_spec": {
            "name": "get_openapi_spec",
            "location": 92,
            "return": [
                "float",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenApiProvider.get_openapi_ui": {
            "name": "get_openapi_ui",
            "location": 103,
            "return": [
                "Type",
                "str",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {}
        }
    },
    "flask-hintful-master/flask_hintful/serializer.py": {
        "isodate_json_encoder": {
            "name": "isodate_json_encoder",
            "location": 207,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "\"Date\"",
                    "Union[None, int, float]"
                ]
            }
        },
        "Serializer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.add_serializer": {
            "name": "add_serializer",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Type"
                ],
                "serializer_func": [
                    "str",
                    "Type"
                ]
            }
        },
        "Serializer.serialize_response": {
            "name": "serialize_response",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "flask.wrappers.Response",
                "str",
                "requests.Response",
                "Dict[str, str]",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "T",
                    "dict",
                    "Dict[str, Any]",
                    "requests.Response",
                    "List[str]"
                ]
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Serializer.is_dataclass": {
            "name": "is_dataclass",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "T",
                    "dict",
                    "bytes",
                    "Iterable[T]"
                ]
            }
        },
        "Serializer.serialize_dataclass": {
            "name": "serialize_dataclass",
            "location": 119,
            "return": [
                "str",
                "Union[str, Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Serializer.serialize_dataclass_to_dict": {
            "name": "serialize_dataclass_to_dict",
            "location": 132,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "bytes",
                "Dict[str, Any]",
                "float",
                "Optional[float]"
            ],
            "arguments": {
                "data": [
                    "T",
                    "dict",
                    "Iterable[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Serializer.is_marshmallow_model": {
            "name": "is_marshmallow_model",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "T",
                    "dict",
                    "bytes",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "Serializer.serialize_marshmallow_model": {
            "name": "serialize_marshmallow_model",
            "location": 151,
            "return": [
                "str",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "T",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "Serializer.serialize_marshmallow_model_to_dict": {
            "name": "serialize_marshmallow_model_to_dict",
            "location": 164,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Response",
                "\"ks.Series\"",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "T",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Serializer.is_list": {
            "name": "is_list",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "T",
                    "str",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Serializer.serialize_list": {
            "name": "serialize_list",
            "location": 190,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "T",
                    "List[int]",
                    "List[List[Any]]",
                    "List[T]"
                ]
            }
        }
    },
    "flask-hintful-master/flask_hintful/utils.py": {
        "get_func_sig": {
            "name": "get_func_sig",
            "location": 5,
            "return": [
                "Tuple[List[str], List[str]]"
            ],
            "arguments": {
                "func": [
                    "Dict[str, Any]",
                    "Callable",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        }
    },
    "flask-hintful-master/flask_hintful/wrapper.py": {
        "view_func_wrapper": {
            "name": "view_func_wrapper",
            "location": 11,
            "return": [
                "float",
                "cmk.utils.type_defs.EventRule",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "view_func": [
                    "Callable",
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "type"
                ],
                "serializer": [
                    "Callable",
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "type"
                ],
                "deserializer": [
                    "Callable",
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "type"
                ]
            }
        },
        "view_func_wrapper.decorator": {
            "name": "decorator",
            "location": 23,
            "return": [
                "List[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "BlueprintWrapper.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "url_prefix": [
                    "str",
                    "Dict[Any, int]",
                    "bool",
                    "bytes",
                    "List[str]",
                    "Callable[[Any, Any], Any]"
                ]
            }
        },
        "BlueprintWrapper.add_url_rule": {
            "name": "add_url_rule",
            "location": 46,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "bool",
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "endpoint": [
                    "bool",
                    "Type['BaseConfig']",
                    "Type[T]"
                ],
                "view_func": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flask-hintful-master/flask_hintful/__init__.py": {},
    "flask-hintful-master/tests/conftest.py": {
        "api": {
            "name": "api",
            "location": 12,
            "return": [
                "flask.Flask",
                "str"
            ],
            "arguments": {}
        },
        "simple_type": {
            "name": "simple_type",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "dataclass_type": {
            "name": "dataclass_type",
            "location": 23,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "marshmallow_type": {
            "name": "marshmallow_type",
            "location": 28,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "model_dict": {
            "name": "model_dict",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "MarshmallowModel.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ],
                "int_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ],
                "float_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ],
                "bool_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ],
                "list_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ],
                "date_field": [
                    "datetime.datetime",
                    "List[float]",
                    "List[int]"
                ],
                "datetime_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ],
                "nested_field": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "MarshmallowModel.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [
                "Dict[str, Any]",
                "Mapping",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NestedModelSchema.make_some_model": {
            "name": "make_some_model",
            "location": 99,
            "return": [
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]",
                "IO[bytes]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ]
            }
        },
        "MarshmallowModelSchema.make_some_model": {
            "name": "make_some_model",
            "location": 114,
            "return": [
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]",
                "IO[bytes]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ]
            }
        }
    },
    "flask-hintful-master/tests/test_args.py": {
        "test_view_arg": {
            "name": "test_view_arg",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_query_args": {
            "name": "test_query_args",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_extra_query_args": {
            "name": "test_extra_query_args",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_kwargs": {
            "name": "test_kwargs",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_view_arg._": {
            "name": "_",
            "location": 13,
            "return": [],
            "arguments": {
                "str_arg": [],
                "int_arg": [],
                "float_arg": [],
                "bool_arg": [],
                "date_arg": [],
                "datetime_arg": []
            }
        },
        "test_query_args._": {
            "name": "_",
            "location": 48,
            "return": [],
            "arguments": {
                "str_arg": [],
                "int_arg": [],
                "float_arg": [],
                "bool_arg": [],
                "list_arg": [],
                "date_arg": [],
                "datetime_arg": []
            }
        },
        "test_extra_query_args._": {
            "name": "_",
            "location": 91,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_kwargs._": {
            "name": "_",
            "location": 103,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "flask-hintful-master/tests/test_decorated_func.py": {
        "test_decorated_func": {
            "name": "test_decorated_func",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_decorated_func.some_decorator": {
            "name": "some_decorator",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "test_decorated_func._": {
            "name": "_",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_decorated_func.some_decorator.decorator": {
            "name": "decorator",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "flask-hintful-master/tests/test_deserializer.py": {
        "test_deserialize": {
            "name": "test_deserialize",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deserialize_dataclass": {
            "name": "test_deserialize_dataclass",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "dataclass_type": [
                    "str",
                    "int",
                    "dict"
                ],
                "model_dict": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_deserialize_marshmallow_dict": {
            "name": "test_deserialize_marshmallow_dict",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "marshmallow_type": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ],
                "model_dict": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ]
            }
        },
        "test_deserialize_marshmallow_str": {
            "name": "test_deserialize_marshmallow_str",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "marshmallow_type": [
                    "Dict[str, Any]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool",
                    "str"
                ],
                "model_dict": [
                    "Dict[str, Any]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool",
                    "str"
                ]
            }
        },
        "test_deserialize_invalid_type": {
            "name": "test_deserialize_invalid_type",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "simple_type": [
                    "str",
                    "Type[Any]",
                    "bool",
                    "type"
                ]
            }
        },
        "test_add_deserializer": {
            "name": "test_add_deserializer",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deserialize_args": {
            "name": "test_deserialize_args",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "marshmallow_type": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "model_dict": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_str_to_bool": {
            "name": "test_str_to_bool",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deserialize_args._": {
            "name": "_",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "foo": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[Any]"
                ],
                "body": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[Any]"
                ]
            }
        }
    },
    "flask-hintful-master/tests/test_openapi.py": {
        "test_openapi_json": {
            "name": "test_openapi_json",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_openapi_ui": {
            "name": "test_openapi_ui",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_openapi_blueprint": {
            "name": "test_openapi_blueprint",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_openapi_args": {
            "name": "test_openapi_args",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_openapi_request_body": {
            "name": "test_openapi_request_body",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "marshmallow_type": [
                    "str"
                ],
                "dataclass_type": [
                    "str"
                ]
            }
        },
        "test_openapi_security": {
            "name": "test_openapi_security",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_openapi_blueprint.api_route": {
            "name": "api_route",
            "location": 39,
            "return": [],
            "arguments": {
                "id": [],
                "foo": []
            }
        },
        "test_openapi_args.api_route": {
            "name": "api_route",
            "location": 56,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Union[int, str]",
                    "Optional[Union[float, int]]",
                    "Optional[int]",
                    "List[str]"
                ],
                "foo": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Union[int, str]",
                    "Optional[Union[float, int]]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "test_openapi_request_body.marshmallow_route": {
            "name": "marshmallow_route",
            "location": 83,
            "return": [
                "marshmallow_type"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_openapi_request_body.dataclass_route": {
            "name": "dataclass_route",
            "location": 87,
            "return": [
                "dataclass_type"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "flask-hintful-master/tests/test_route.py": {
        "test_register_route": {
            "name": "test_register_route",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_register_blueprint": {
            "name": "test_register_blueprint",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_register_blueprint_before_after_requests": {
            "name": "test_register_blueprint_before_after_requests",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_register_route._": {
            "name": "_",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_register_blueprint._": {
            "name": "_",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_register_blueprint.__": {
            "name": "__",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_register_blueprint_before_after_requests.before_request": {
            "name": "before_request",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_blueprint_before_after_requests.before_app_first_request": {
            "name": "before_app_first_request",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_blueprint_before_after_requests.after_request": {
            "name": "after_request",
            "location": 57,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "flask.Response",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "response": [
                    "list"
                ]
            }
        },
        "test_register_blueprint_before_after_requests._": {
            "name": "_",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "flask-hintful-master/tests/test_serializer.py": {
        "test_serialize": {
            "name": "test_serialize",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialize_list": {
            "name": "test_serialize_list",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "dataclass_type": [
                    "str",
                    "int",
                    "Type[Any]"
                ],
                "marshmallow_type": [
                    "str",
                    "int",
                    "Type[Any]"
                ],
                "model_dict": [
                    "str",
                    "int",
                    "Type[Any]"
                ]
            }
        },
        "test_serialize_dataclass": {
            "name": "test_serialize_dataclass",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "dataclass_type": [
                    "float",
                    "str",
                    "Dict[str, Any]"
                ],
                "model_dict": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "float",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_serialize_marshmallow": {
            "name": "test_serialize_marshmallow",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "marshmallow_type": [
                    "str"
                ],
                "model_dict": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_serialize_invalid_type": {
            "name": "test_serialize_invalid_type",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "simple_type": [
                    "str",
                    "Type[Any]",
                    "bool",
                    "type"
                ]
            }
        },
        "test_add_serializer": {
            "name": "test_add_serializer",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialize_response_class": {
            "name": "test_serialize_response_class",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_serialize_tuple_data_status": {
            "name": "test_serialize_tuple_data_status",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_serialize_tuple_data_header": {
            "name": "test_serialize_tuple_data_header",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_serialize_tuple_data_status_header": {
            "name": "test_serialize_tuple_data_status_header",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "api": []
            }
        },
        "test_serialize_response_class._": {
            "name": "_",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_serialize_tuple_data_status._": {
            "name": "_",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_serialize_tuple_data_header._": {
            "name": "_",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_serialize_tuple_data_status_header._": {
            "name": "_",
            "location": 115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "flask-hintful-master/tests/__init__.py": {}
}
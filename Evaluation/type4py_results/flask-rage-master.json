{
    "flask-rage-master/flask_rage.py": {
        "current_millis": {
            "name": "current_millis",
            "location": 21,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "FlaskRageFormatter.format": {
            "name": "format",
            "location": 31,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "FlaskRageFormatter.__prepare_error_info": {
            "name": "__prepare_error_info",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output": [
                    "Callable",
                    "List[int]",
                    "Callable[..., None]",
                    "Type[T]"
                ],
                "record": [
                    "Callable",
                    "bool",
                    "List[Callable]"
                ]
            }
        },
        "FlaskRageFormatter.__extract_msg": {
            "name": "__extract_msg",
            "location": 60,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "exc": [
                    "str",
                    "Callable"
                ]
            }
        },
        "FlaskRage.init_app": {
            "name": "init_app",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "logging.Logger",
                    "flask.Flask"
                ]
            }
        },
        "FlaskRage.log_request": {
            "name": "log_request",
            "location": 93,
            "return": [
                "dict",
                "_models.Response",
                "Dict[str, Any]",
                "Response",
                "Optional[Any]",
                "Tuple[int, str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "flask.Response",
                    "requests.Response",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "FlaskRage.log_exception": {
            "name": "log_exception",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "Exception",
                    "List[str]",
                    "Optional[Tuple]",
                    "dict",
                    "List[int]",
                    "bool",
                    "flask.Response"
                ]
            }
        },
        "FlaskRage._setup_db_timer": {
            "name": "_setup_db_timer",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlaskRage._register_handlers": {
            "name": "_register_handlers",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "str",
                    "dict",
                    "flask.Flask"
                ]
            }
        },
        "FlaskRage._add_request_start_time": {
            "name": "_add_request_start_time",
            "location": 132,
            "return": [
                "Dict[str, Any]",
                "int",
                "Set[VT]",
                "tuple",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRage._parse": {
            "name": "_parse",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Callable",
                    "sqlalchemy.orm.Session"
                ],
                "resp": [
                    "Dict[str, Any]",
                    "Optional[fausweb.Response]",
                    "flask.Response",
                    "dict"
                ]
            }
        },
        "FlaskRage._db_time": {
            "name": "_db_time",
            "location": 175,
            "return": [
                "Optional[str]",
                "Type",
                "bool",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRage._duration": {
            "name": "_duration",
            "location": 185,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]",
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRage._view_time": {
            "name": "_view_time",
            "location": 196,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "int",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRage._before_cursor_execute": {
            "name": "_before_cursor_execute",
            "location": 203,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "List[Dict]",
                    "List[str]"
                ],
                "_cur": [
                    "bool",
                    "Optional[str]"
                ],
                "_stmt": [
                    "bool",
                    "Optional[str]"
                ],
                "_params": [
                    "bool",
                    "Optional[str]"
                ],
                "_ctx": [
                    "bool",
                    "Optional[str]"
                ],
                "_exec_many": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FlaskRage._after_cursor_execute": {
            "name": "_after_cursor_execute",
            "location": 208,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "Union[int, float]",
                    "int"
                ],
                "_cur": [
                    "bool",
                    "Optional[str]"
                ],
                "_stmt": [
                    "bool",
                    "Optional[str]"
                ],
                "_params": [
                    "bool",
                    "Optional[str]"
                ],
                "_ctx": [
                    "bool",
                    "Optional[str]"
                ],
                "_exec_many": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "flask-rage-master/setup.py": {},
    "flask-rage-master/test_flask_rage.py": {
        "SampleError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "TestFlaskRageFormatter.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRageFormatter.test_dumps_json": {
            "name": "test_dumps_json",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_dumps": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestFlaskRageFormatter.test_adds_basic_info": {
            "name": "test_adds_basic_info",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRageFormatter.test_extracts_request_info_from_logrecord": {
            "name": "test_extracts_request_info_from_logrecord",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRageFormatter.test_handle_exceptions_correctly": {
            "name": "test_handle_exceptions_correctly",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRageFormatter.test_handle_exceptions_with_message_correctly": {
            "name": "test_handle_exceptions_with_message_correctly",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRageFormatter._log_record": {
            "name": "_log_record",
            "location": 79,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Tuple[int, str, str, str]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "extra": [
                    "float",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "TestFlaskRage.setUp": {
            "name": "setUp",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_initializes_new_flask_application": {
            "name": "test_initializes_new_flask_application",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "before_request": [],
                "after_request": [
                    "str",
                    "int",
                    "List[List[int]]",
                    "bool"
                ]
            }
        },
        "TestFlaskRage.test_initializes_legacy_flask_application": {
            "name": "test_initializes_legacy_flask_application",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "flask.Flask",
                    "str"
                ]
            }
        },
        "TestFlaskRage.test_logs_request": {
            "name": "test_logs_request",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_logs_error_for_request_with_code_gteq_400_and_neq_404": {
            "name": "test_logs_error_for_request_with_code_gteq_400_and_neq_404",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_logs_info_for_request_with_code_eq_404": {
            "name": "test_logs_info_for_request_with_code_eq_404",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_does_not_log_request_for_exceptions": {
            "name": "test_does_not_log_request_for_exceptions",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_logs_exception": {
            "name": "test_logs_exception",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_adds_request_start_time_to_stack": {
            "name": "test_adds_request_start_time_to_stack",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current": [
                    "unittesmock.Mock"
                ],
                "stack": [
                    "bytes",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestFlaskRage.test_parses_request_and_response": {
            "name": "test_parses_request_and_response",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_parses_request_and_exception": {
            "name": "test_parses_request_and_exception",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_parses_url_query_into_dict": {
            "name": "test_parses_url_query_into_dict",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlaskRage.test_takes_db_time_from_stack": {
            "name": "test_takes_db_time_from_stack",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestFlaskRage.test_takes_request_duration_from_stack": {
            "name": "test_takes_request_duration_from_stack",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "Callable[..., None]"
                ]
            }
        },
        "TestFlaskRage.test_calculates_view_time": {
            "name": "test_calculates_view_time",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "duration": [
                    "unittesmock.Mock"
                ],
                "db_time": [
                    "Callable"
                ]
            }
        }
    }
}
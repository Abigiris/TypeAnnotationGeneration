{
    "flexio-flow-master/src/Executor.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cwd": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Executor.__extract_options": {
            "name": "__extract_options",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.__extract_task_action": {
            "name": "__extract_task_action",
            "location": 53,
            "return": [
                "str",
                "bytes",
                "bool",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.__ensure_version_dir": {
            "name": "__ensure_version_dir",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.__ensure_tasks": {
            "name": "__ensure_tasks",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.__ensure_config_handler": {
            "name": "__ensure_config_handler",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.__ensure_version_controller": {
            "name": "__ensure_version_controller",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Executor.exec": {
            "name": "exec",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Executor.config": {
            "name": "config",
            "location": 107,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/ExecutorConfig.py": {},
    "flexio-flow-master/src/main.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "int",
                    "Generator[str, None, None]",
                    "Optional[str]"
                ]
            }
        }
    },
    "flexio-flow-master/src/setup.py": {},
    "flexio-flow-master/src/__init__.py": {},
    "flexio-flow-master/src/Branches/Branches.py": {
        "Branches.has_value": {
            "name": "has_value",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/Branches/BranchesConfig.py": {
        "BranchesConfig.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "develop": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "feature": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "hotfix": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "master": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "release": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "BranchesConfig.from_dict": {
            "name": "from_dict",
            "location": 18,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "branches": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "BranchesConfig.develop": {
            "name": "develop",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchesConfig.is_develop": {
            "name": "is_develop",
            "location": 31,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "BranchesConfig.feature": {
            "name": "feature",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchesConfig.is_feature": {
            "name": "is_feature",
            "location": 38,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "BranchesConfig.hotfix": {
            "name": "hotfix",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchesConfig.is_hotfix": {
            "name": "is_hotfix",
            "location": 45,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "BranchesConfig.master": {
            "name": "master",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchesConfig.is_master": {
            "name": "is_master",
            "location": 52,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "BranchesConfig.release": {
            "name": "release",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchesConfig.is_release": {
            "name": "is_release",
            "location": 59,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "BranchesConfig.to_dict": {
            "name": "to_dict",
            "location": 62,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/BranchHandler.py": {
        "BranchHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Optional[str]"
                ],
                "branches": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "BranchHandler.with_issue": {
            "name": "with_issue",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BranchHandler.with_topics": {
            "name": "with_topics",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BranchHandler.__format_branch_name": {
            "name": "__format_branch_name",
            "location": 28,
            "return": [
                "Optional[str]",
                "dict",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "BranchHandler.branch_name_from_version": {
            "name": "branch_name_from_version",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "dict"
                ]
            }
        },
        "BranchHandler.branch_name_from_version_with_name": {
            "name": "branch_name_from_version_with_name",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "BranchHandler.issue_number_from_branch_name": {
            "name": "issue_number_from_branch_name",
            "location": 62,
            "return": [
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "BranchHandler.topics_number_from_branch_name": {
            "name": "topics_number_from_branch_name",
            "location": 71,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "name": [
                    "Callable"
                ]
            }
        }
    },
    "flexio-flow-master/src/Branches/__init__.py": {},
    "flexio-flow-master/src/Branches/Actions/Action.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version_control": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "branch": [
                    "Optional[str]",
                    "Optional[Branches.Branches.Branches]",
                    "str",
                    "Optional[Any]",
                    "Optional[dict]"
                ],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "options": [
                    "mypy.options.Options",
                    "List[str]",
                    "FlexioFlow.Options.Options",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler",
                    "dict"
                ]
            }
        },
        "Action.process": {
            "name": "process",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/ActionBuilder.py": {
        "ActionBuilder.build": {
            "name": "build",
            "location": 21,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "action": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "version_control": [
                    "Core.ConfigHandler.ConfigHandler",
                    "VersionControl.VersionControl.VersionControl",
                    "FlexioFlow.StateHandler.StateHandler",
                    "Optional[Branches.Branches.Branches]",
                    "FlexioFlow.Options.Options",
                    "bool",
                    "str"
                ],
                "branch": [
                    "Core.ConfigHandler.ConfigHandler",
                    "VersionControl.VersionControl.VersionControl",
                    "FlexioFlow.StateHandler.StateHandler",
                    "Optional[Branches.Branches.Branches]",
                    "FlexioFlow.Options.Options",
                    "bool",
                    "str"
                ],
                "state_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "VersionControl.VersionControl.VersionControl",
                    "FlexioFlow.StateHandler.StateHandler",
                    "Optional[Branches.Branches.Branches]",
                    "FlexioFlow.Options.Options",
                    "bool",
                    "str"
                ],
                "options": [
                    "Core.ConfigHandler.ConfigHandler",
                    "VersionControl.VersionControl.VersionControl",
                    "FlexioFlow.StateHandler.StateHandler",
                    "Optional[Branches.Branches.Branches]",
                    "FlexioFlow.Options.Options",
                    "bool",
                    "str"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "VersionControl.VersionControl.VersionControl",
                    "FlexioFlow.StateHandler.StateHandler",
                    "Optional[Branches.Branches.Branches]",
                    "FlexioFlow.Options.Options",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Actions.py": {
        "Actions.has_value": {
            "name": "has_value",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Commit.py": {
        "Commit.__start_message": {
            "name": "__start_message",
            "location": 14,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.__input_message": {
            "name": "__input_message",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.__final_message": {
            "name": "__final_message",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "Commit.process": {
            "name": "process",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Finish.py": {
        "Finish.__with_action": {
            "name": "__with_action",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "VersionControl.Branch.Branch",
                    "bool",
                    "adam.situation.Action[adam.ontology.OntologyNode, adam.situation.SituationObject]",
                    "asyncworker.options.Actions"
                ]
            }
        },
        "Finish.__with_options": {
            "name": "__with_options",
            "location": 22,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "dict",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Finish.__with_issue": {
            "name": "__with_issue",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "issue": [
                    "Optional[List[VersionControlProvider.Topic.Topic]]",
                    "VersionControlProvider.Issue.Issue",
                    "Optional[bool]",
                    "Optional[\"Outcome\"]",
                    "bool",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "Finish.__with_topic": {
            "name": "__with_topic",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "topics": [
                    "Optional[List[VersionControlProvider.Topic.Topic]]",
                    "VersionControlProvider.Issue.Issue",
                    "Optional[bool]",
                    "Optional[\"Outcome\"]",
                    "bool",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "Finish.__should_close_issue": {
            "name": "__should_close_issue",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.process": {
            "name": "process",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Init.py": {
        "Init.__start_message": {
            "name": "__start_message",
            "location": 21,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__input_version": {
            "name": "__input_version",
            "location": 38,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__input_level": {
            "name": "__input_level",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__input_schemes": {
            "name": "__input_schemes",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__write_file": {
            "name": "__write_file",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__input_topics": {
            "name": "__input_topics",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__ensure_have_state": {
            "name": "__ensure_have_state",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__final_message": {
            "name": "__final_message",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__ensure_version_control_initialized": {
            "name": "__ensure_version_control_initialized",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.process": {
            "name": "process",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/PreCheck.py": {
        "PreCheck.process": {
            "name": "process",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Start.py": {
        "Start.__with_action": {
            "name": "__with_action",
            "location": 23,
            "return": [
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "VersionControl.Branch.Branch",
                    "bool",
                    "adam.situation.Action[adam.ontology.OntologyNode, adam.situation.SituationObject]",
                    "asyncworker.options.Actions"
                ]
            }
        },
        "Start.__with_options": {
            "name": "__with_options",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "dict",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Start.__with_issue": {
            "name": "__with_issue",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "issue": [
                    "Optional[List[VersionControlProvider.Topic.Topic]]",
                    "VersionControlProvider.Issue.Issue",
                    "Optional[bool]",
                    "Optional[\"Outcome\"]",
                    "bool",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "Start.__with_topics": {
            "name": "__with_topics",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "topics": [
                    "Optional[List[VersionControlProvider.Topic.Topic]]",
                    "VersionControlProvider.Issue.Issue",
                    "Optional[bool]",
                    "Optional[\"Outcome\"]",
                    "bool",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "Start.__ensure_is_major": {
            "name": "__ensure_is_major",
            "location": 41,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Callable[[T], bool]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Start.__ensure_name": {
            "name": "__ensure_name",
            "location": 62,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "VersionControl.Branch.Branch",
                    "Match[str]",
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Start.__ensure_stash_start": {
            "name": "__ensure_stash_start",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__ensure_stash_end": {
            "name": "__ensure_stash_end",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.process": {
            "name": "process",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/__init__.py": {},
    "flexio-flow-master/src/Branches/Actions/Issuer/IssueBuilder.py": {
        "IssueBuilder.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version_control": [
                    "str",
                    "float",
                    "bool"
                ],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "branch": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[Any]",
                    "dict"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "Dict[str, Any]"
                ]
            }
        },
        "IssueBuilder.try_ensure_issue": {
            "name": "try_ensure_issue",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueBuilder.find_issue_from_branch_name": {
            "name": "find_issue_from_branch_name",
            "location": 50,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueBuilder.comment_issue_with_topic": {
            "name": "comment_issue_with_topic",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "Callable",
                    "int",
                    "str",
                    "Union[None, int, str]"
                ]
            }
        },
        "IssueBuilder.issue": {
            "name": "issue",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueBuilder.issuer": {
            "name": "issuer",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Issuer/IssueDefaultBuilder.py": {
        "IssueDefaultBuilder.build": {
            "name": "build",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "FlexioFlow.Options.Options",
                    "Iterable[str]",
                    "List[int]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "str",
                    "dict",
                    "bool"
                ],
                "branch": [
                    "Optional[Branches.Branches.Branches]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "bool",
                    "str"
                ],
                "options": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "FlexioFlow.Options.Options",
                    "Iterable[str]",
                    "List[int]"
                ]
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Issuer/__init__.py": {},
    "flexio-flow-master/src/Branches/Actions/Topicer/TopicBuilder.py": {
        "TopicBuilder.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version_control": [
                    "str",
                    "float",
                    "bool"
                ],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "branch": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[Any]",
                    "dict"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "Dict[str, Any]"
                ]
            }
        },
        "TopicBuilder.__init_topicer": {
            "name": "__init_topicer",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuilder.__build_default": {
            "name": "__build_default",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuilder.try_ensure_topic": {
            "name": "try_ensure_topic",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuilder.attach_issue": {
            "name": "attach_issue",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TopicBuilder.find_topic_from_branch_name": {
            "name": "find_topic_from_branch_name",
            "location": 82,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuilder.topics": {
            "name": "topics",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicBuilder.topicer": {
            "name": "topicer",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Branches/Actions/Topicer/__init__.py": {},
    "flexio-flow-master/src/ConsoleColors/Bg.py": {},
    "flexio-flow-master/src/ConsoleColors/Fg.py": {},
    "flexio-flow-master/src/ConsoleColors/PrintColor.py": {
        "PrintColor.log": {
            "name": "log",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "flexio-flow-master/src/ConsoleColors/Style.py": {},
    "flexio-flow-master/src/ConsoleColors/__init__.py": {},
    "flexio-flow-master/src/Core/Config.py": {
        "Config.with_github": {
            "name": "with_github",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "github": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Config.with_flexio": {
            "name": "with_flexio",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "flexio": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Config.with_branches_config": {
            "name": "with_branches_config",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "Union[List, Dict]",
                "dict",
                "List[str]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "branches_config": [
                    "Optional[List[Any]]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "Config.github": {
            "name": "github",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.flexio": {
            "name": "flexio",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.branches_config": {
            "name": "branches_config",
            "location": 50,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.to_dict": {
            "name": "to_dict",
            "location": 53,
            "return": [
                "List[str]",
                "dict",
                "int",
                "Tuple[str, str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/ConfigHandler.py": {
        "ConfigHandler.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "dict"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ConfigHandler.config": {
            "name": "config",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "ConfigHandler.file_exists": {
            "name": "file_exists",
            "location": 32,
            "return": [
                "str",
                "Union[pathlib.Path, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.load_file_config": {
            "name": "load_file_config",
            "location": 35,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.write_file": {
            "name": "write_file",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.file_path": {
            "name": "file_path",
            "location": 69,
            "return": [
                "pathlib.Path",
                "str",
                "pathlib.PurePath",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.has_issuer": {
            "name": "has_issuer",
            "location": 72,
            "return": [
                "List[str]",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.has_topicer": {
            "name": "has_topicer",
            "location": 75,
            "return": [
                "List[str]",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.reset_config": {
            "name": "reset_config",
            "location": 78,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.master": {
            "name": "master",
            "location": 82,
            "return": [
                "Callable",
                "Mapping[str, str]",
                "bool",
                "str",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.develop": {
            "name": "develop",
            "location": 85,
            "return": [
                "Callable",
                "Mapping[str, str]",
                "bool",
                "str",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.feature": {
            "name": "feature",
            "location": 88,
            "return": [
                "Callable",
                "Mapping[str, str]",
                "bool",
                "str",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.hotfix": {
            "name": "hotfix",
            "location": 91,
            "return": [
                "Callable",
                "Mapping[str, str]",
                "bool",
                "str",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigHandler.release": {
            "name": "release",
            "location": 94,
            "return": [
                "Callable",
                "Mapping[str, str]",
                "bool",
                "str",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/Core.py": {
        "Core.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict",
                    "List[str]",
                    "bool"
                ],
                "options": [
                    "FlexioFlow.Options.Options"
                ],
                "config_handler": [
                    "_pytesconfig.Config",
                    "str"
                ]
            }
        },
        "Core.process": {
            "name": "process",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.config": {
            "name": "config",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.read": {
            "name": "read",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.branch": {
            "name": "branch",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/IssuerHandler.py": {
        "IssuerHandler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler",
                    "bool"
                ],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "options": [
                    "bool",
                    "FlexioFlow.Options.Options",
                    "str"
                ]
            }
        },
        "IssuerHandler.issuer": {
            "name": "issuer",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/TopicerHandler.py": {
        "TopicerHandler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        },
        "TopicerHandler.topicer": {
            "name": "topicer",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/__init__.py": {},
    "flexio-flow-master/src/Core/Actions/Actions.py": {
        "Actions.has_value": {
            "name": "has_value",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/Core/Actions/Branch.py": {
        "Branch.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "Branch.__config_handler": {
            "name": "__config_handler",
            "location": 10,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.process": {
            "name": "process",
            "location": 13,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/Actions/Config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "Config.__config_handler": {
            "name": "__config_handler",
            "location": 21,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "Config",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__exec": {
            "name": "__exec",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Config.__exec_for_stdout": {
            "name": "__exec_for_stdout",
            "location": 27,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Config.__start_message": {
            "name": "__start_message",
            "location": 31,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__write_file": {
            "name": "__write_file",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__final_message": {
            "name": "__final_message",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__default_config": {
            "name": "__default_config",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__ensure_have_config": {
            "name": "__ensure_have_config",
            "location": 79,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.process": {
            "name": "process",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/Actions/InputBranchesConfig.py": {
        "InputBranchesConfig.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "InputBranchesConfig.__input": {
            "name": "__input",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "InputBranchesConfig.add_to_config_handler": {
            "name": "add_to_config_handler",
            "location": 16,
            "return": [
                "Optional[dict]",
                "Dict[str, Any]",
                "Sequence",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/Actions/Read.py": {
        "Read.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "Read.__config_handler": {
            "name": "__config_handler",
            "location": 11,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Read.__ensure_have_config": {
            "name": "__ensure_have_config",
            "location": 14,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Read.process": {
            "name": "process",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Core/Actions/__init__.py": {},
    "flexio-flow-master/src/Exceptions/BranchAlreadyExist.py": {
        "BranchAlreadyExist.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BranchAlreadyExist.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/BranchHaveDiverged.py": {
        "BranchHaveDiverged.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BranchHaveDiverged.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/BranchNotExist.py": {
        "BranchNotExist.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BranchNotExist.__str__": {
            "name": "__str__",
            "location": 6,
            "return": [
                "str",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/GitMergeConflictError.py": {
        "GitMergeConflictError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branch_name": [
                    "str"
                ],
                "message": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GitMergeConflictError.__str__": {
            "name": "__str__",
            "location": 6,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/HaveDevDependencyException.py": {
        "HaveDevDependencyException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dependencies": [
                    "int",
                    "bool",
                    "float"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HaveDevDependencyException.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NoBranchSelected.py": {
        "NoBranchSelected.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoBranchSelected.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NoChangesInBranch.py": {
        "NoChangesInBranch.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoChangesInBranch.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NoIssue.py": {
        "NoIssue.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoIssue.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NoIssuerConfigured.py": {
        "NoIssuerConfigured.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoIssuerConfigured.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NoRemote.py": {
        "NoRemote.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoRemote.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "dict",
                "str",
                "Type",
                "Type[T]",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NotCleanWorkingTree.py": {
        "NotCleanWorkingTree.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NotCleanWorkingTree.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/NoTopicerConfigured.py": {
        "NoTopicerConfigured.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoTopicerConfigured.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/ParseFailureException.py": {
        "ParseFailureException.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "flexio-flow-master/src/Exceptions/RemoteDivergence.py": {
        "RemoteDivergence.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RemoteDivergence.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Exceptions/__init__.py": {},
    "flexio-flow-master/src/FlexioFlow/FlexioFlow.py": {
        "FlexioFlow.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "ExecutorConfig.ExecutorConfig",
                    "Dict[str, Any]"
                ]
            }
        },
        "FlexioFlow.__ensure_state_handler": {
            "name": "__ensure_state_handler",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__ensure_version_control": {
            "name": "__ensure_version_control",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__ensure_config_handler": {
            "name": "__ensure_config_handler",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_subject_core": {
            "name": "__process_subject_core",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_subject_version": {
            "name": "__process_subject_version",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_subject_convert": {
            "name": "__process_subject_convert",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_subject_issue": {
            "name": "__process_subject_issue",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_subject_topic": {
            "name": "__process_subject_topic",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_branch_action": {
            "name": "__process_branch_action",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__process_poom_ci": {
            "name": "__process_poom_ci",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.__ensure_precheck": {
            "name": "__ensure_precheck",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioFlow.process": {
            "name": "process",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Level.py": {},
    "flexio-flow-master/src/FlexioFlow/Options.py": {},
    "flexio-flow-master/src/FlexioFlow/State.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.version": {
            "name": "version",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "State.level": {
            "name": "level",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "Match"
                ]
            }
        },
        "State.schemes": {
            "name": "schemes",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[Schemes.Schemes.Schemes]",
                    "Iterable[T]",
                    "Type[object]",
                    "dict",
                    "Iterator[T]",
                    "Mapping[str, str]",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "State.topics": {
            "name": "topics",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[str]",
                    "Tuple[float, int]",
                    "list",
                    "T",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "State.to_dict": {
            "name": "to_dict",
            "location": 55,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Dict[str, Any]",
                "Optional[int]",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_major": {
            "name": "next_major",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_minor": {
            "name": "next_minor",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_patch": {
            "name": "next_patch",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_dev_patch": {
            "name": "next_dev_patch",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next_dev_minor": {
            "name": "next_dev_minor",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.set_stable": {
            "name": "set_stable",
            "location": 85,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.set_dev": {
            "name": "set_dev",
            "location": 89,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__schemeListValue": {
            "name": "__schemeListValue",
            "location": 93,
            "return": [
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__topicNumberValue": {
            "name": "__topicNumberValue",
            "location": 99,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/StateHandler.py": {
        "StateHandler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str"
                ]
            }
        },
        "StateHandler.state": {
            "name": "state",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Union[str, List[str]]",
                    "int"
                ]
            }
        },
        "StateHandler.reset_state": {
            "name": "reset_state",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.file_exists": {
            "name": "file_exists",
            "location": 37,
            "return": [
                "str",
                "Union[pathlib.Path, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.__topics_from_list_number": {
            "name": "__topics_from_list_number",
            "location": 40,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "list": [
                    "Optional[dict]",
                    "dict",
                    "int",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "StateHandler.find_file_version": {
            "name": "find_file_version",
            "location": 48,
            "return": [
                "str",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "cwd": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib2.Path"
                ]
            }
        },
        "StateHandler.load_file_config": {
            "name": "load_file_config",
            "location": 59,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.write_file": {
            "name": "write_file",
            "location": 81,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.file_path": {
            "name": "file_path",
            "location": 88,
            "return": [
                "pathlib.Path",
                "pathlib.PurePath",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.next_major": {
            "name": "next_major",
            "location": 91,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.next_minor": {
            "name": "next_minor",
            "location": 95,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.next_patch": {
            "name": "next_patch",
            "location": 99,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.reset_patch": {
            "name": "reset_patch",
            "location": 103,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.reset_minor": {
            "name": "reset_minor",
            "location": 107,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.reset_major": {
            "name": "reset_major",
            "location": 111,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.is_dev": {
            "name": "is_dev",
            "location": 115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.next_dev_patch": {
            "name": "next_dev_patch",
            "location": 118,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.get_next_patch_version": {
            "name": "get_next_patch_version",
            "location": 122,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.next_dev_minor": {
            "name": "next_dev_minor",
            "location": 125,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.version_as_str": {
            "name": "version_as_str",
            "location": 129,
            "return": [
                "str",
                "Type[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.set_dev": {
            "name": "set_dev",
            "location": 132,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.set_stable": {
            "name": "set_stable",
            "location": 136,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.first_scheme": {
            "name": "first_scheme",
            "location": 140,
            "return": [
                "bool",
                "str",
                "float",
                "Optional[bytes]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.has_default_topic": {
            "name": "has_default_topic",
            "location": 146,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.default_topics": {
            "name": "default_topics",
            "location": 149,
            "return": [
                "str",
                "bool",
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Task.py": {
        "Task.has_value": {
            "name": "has_value",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Version.py": {
        "Version.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "major": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "minor": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "patch": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Version.from_str": {
            "name": "from_str",
            "location": 18,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "\"SqlFile\"",
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "v": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "Version.major": {
            "name": "major",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.minor": {
            "name": "minor",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.patch": {
            "name": "patch",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.parse_str": {
            "name": "parse_str",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "Version.next_major": {
            "name": "next_major",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.next_minor": {
            "name": "next_minor",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.next_patch": {
            "name": "next_patch",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.reset_patch": {
            "name": "reset_patch",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.reset_minor": {
            "name": "reset_minor",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.reset_major": {
            "name": "reset_major",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.to_dict": {
            "name": "to_dict",
            "location": 64,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/__init__.py": {},
    "flexio-flow-master/src/FlexioFlow/Actions/Convert.py": {
        "Convert.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict[str, Any]",
                    "FlexioFlow.Options.Options",
                    "OrderedDict",
                    "dict",
                    "Callable[[Callable], Callable[..., None]]",
                    "Optional[str]"
                ]
            }
        },
        "Convert.process": {
            "name": "process",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Actions/Issue.py": {
        "Issue.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "dict"
                ],
                "version_control": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "Dict[str, Any]",
                    "List[Dict]"
                ]
            }
        },
        "Issue.process": {
            "name": "process",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Actions/IssueActions.py": {
        "IssueActions.has_value": {
            "name": "has_value",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Actions/Topic.py": {
        "Topic.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "dict"
                ],
                "version_control": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "Dict[str, Any]",
                    "List[Dict]"
                ]
            }
        },
        "Topic.process": {
            "name": "process",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Actions/TopicActions.py": {
        "TopicActions.has_value": {
            "name": "has_value",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Actions/Version.py": {
        "Version.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "options": [
                    "mypy.options.Options",
                    "Callable[[Callable], Callable[..., None]]",
                    "type",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Version.__get_scheme_option_or_default": {
            "name": "__get_scheme_option_or_default",
            "location": 20,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.process": {
            "name": "process",
            "location": 28,
            "return": [
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/Actions/__init__.py": {},
    "flexio-flow-master/src/FlexioFlow/options/AutoStash.py": {
        "AutoStash.exec": {
            "name": "exec",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Config.py": {
        "Config.exec": {
            "name": "exec",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Create.py": {
        "Create.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Debug.py": {
        "Debug.exec": {
            "name": "exec",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Default.py": {
        "Default.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/FileName.py": {
        "FileName.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/From.py": {
        "From.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Help.py": {
        "Help.exec": {
            "name": "exec",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/KeepBranch.py": {
        "KeepBranch.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Major.py": {
        "Major.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Message.py": {
        "Message.exec": {
            "name": "exec",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/NoCli.py": {
        "NoCli.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Option.py": {
        "Option.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opt": [
                    "str",
                    "Optional[str]"
                ],
                "arg": [
                    "str",
                    "Optional[str]"
                ],
                "options": [
                    "Dict[str, Any]",
                    "FlexioFlow.Options.Options",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "Option.clean_space": {
            "name": "clean_space",
            "location": 22,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Option.test": {
            "name": "test",
            "location": 25,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.exec": {
            "name": "exec",
            "location": 34,
            "return": [
                "FlexioFlow.Options.Options"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.process": {
            "name": "process",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Sequence[Tuple[str, str]]",
                    "int",
                    "Sequence[str]"
                ],
                "opt": [
                    "dict",
                    "Sequence[Tuple[str, str]]",
                    "int",
                    "Sequence[str]"
                ],
                "arg": [
                    "dict",
                    "Sequence[Tuple[str, str]]",
                    "int",
                    "Sequence[str]"
                ],
                "options": [
                    "dict",
                    "Sequence[Tuple[str, str]]",
                    "int",
                    "Sequence[str]"
                ]
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Read.py": {
        "Read.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/RepositoryCheckoutSpec.py": {
        "RepositoryCheckoutSpec.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/RepositoryId.py": {
        "RepositoryId.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/RepositoryName.py": {
        "RepositoryName.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Resolver.py": {
        "Resolver.resolve": {
            "name": "resolve",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "opt": [
                    "str",
                    "bool"
                ],
                "arg": [
                    "str",
                    "bool"
                ],
                "options": [
                    "str",
                    "mypy.options.Options"
                ]
            }
        },
        "Resolver.short_name_options": {
            "name": "short_name_options",
            "location": 36,
            "return": [
                "str",
                "Dict[str, int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolver.name_options": {
            "name": "name_options",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Scheme.py": {
        "Scheme.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/SchemeDir.py": {
        "SchemeDir.exec": {
            "name": "exec",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/To.py": {
        "To.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/Version.py": {
        "Version.exec": {
            "name": "exec",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/VersionDir.py": {
        "VersionDir.exec": {
            "name": "exec",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/FlexioFlow/options/__init__.py": {},
    "flexio-flow-master/src/Log/Log.py": {
        "Log.info": {
            "name": "info",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "mes": [
                    "str"
                ]
            }
        },
        "Log.warning": {
            "name": "warning",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "mes": [
                    "str",
                    "int"
                ]
            }
        },
        "Log.critical": {
            "name": "critical",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "mes": [
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "Log.error": {
            "name": "error",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "mes": [
                    "str"
                ]
            }
        },
        "Log.exception": {
            "name": "exception",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "mes": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "flexio-flow-master/src/Log/__init__.py": {},
    "flexio-flow-master/src/PoomCiDependency/FullRepository.py": {
        "FullRepository.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "checkout_spec": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "FullRepository.from_repository": {
            "name": "from_repository",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "repository": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "FullRepository.append_dependency": {
            "name": "append_dependency",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "FullRepository.append_produce": {
            "name": "append_produce",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "produce": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/Module.py": {
        "Module.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "bool",
                    "tuple",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "version": [
                    "bool",
                    "tuple",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/PoomCiDependency.py": {
        "PoomCiDependency.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "List[Dict]"
                ]
            }
        },
        "PoomCiDependency.process": {
            "name": "process",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/PoomCiDependencyJSONEncoder.py": {
        "PoomCiDependencyJSONEncoder.default": {
            "name": "default",
            "location": 10,
            "return": [
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "Callable",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/Repository.py": {
        "Repository.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "checkout_spec": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/__init__.py": {},
    "flexio-flow-master/src/PoomCiDependency/Actions/Actions.py": {
        "Actions.has_value": {
            "name": "has_value",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/Actions/FullRepositoryBuilder.py": {
        "FullRepositoryBuilder.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "options": [
                    "mypy.options.Options",
                    "Callable[[Callable], Callable[..., None]]",
                    "type",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "FullRepositoryBuilder.__ensure_have_repo": {
            "name": "__ensure_have_repo",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FullRepositoryBuilder.__get_scheme_option_or_default": {
            "name": "__get_scheme_option_or_default",
            "location": 33,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullRepositoryBuilder.build": {
            "name": "build",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/Actions/FullRepositoryJsonAction.py": {
        "FullRepositoryJsonAction.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "options": [
                    "mypy.options.Options",
                    "Callable[[Callable], Callable[..., None]]",
                    "type",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "FullRepositoryJsonAction.process": {
            "name": "process",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/PoomCiDependency/Actions/__init__.py": {},
    "flexio-flow-master/src/Schemes/Dependencies.py": {
        "Dependencies.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependencies.from_list": {
            "name": "from_list",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "dependencies": [
                    "List[List[str]]",
                    "bool",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "Dependencies.append": {
            "name": "append",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dep_id": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "version": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Dependencies.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependencies.__next__": {
            "name": "__next__",
            "location": 24,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependencies.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependencies.__dict__": {
            "name": "__dict__",
            "location": 34,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependencies.to_list": {
            "name": "to_list",
            "location": 37,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/DevPrefix.py": {
        "DevPrefix.from_schemes": {
            "name": "from_schemes",
            "location": 10,
            "return": [
                "dict",
                "list",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "schemes": [
                    "Schemes.Schemes.Schemes",
                    "str",
                    "int"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/Scheme.py": {
        "Scheme.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Sequence[int]"
                ]
            }
        },
        "Scheme.set_version": {
            "name": "set_version",
            "location": 16,
            "return": [
                "typing.Type[Scheme]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheme.release_precheck": {
            "name": "release_precheck",
            "location": 20,
            "return": [
                "Schemes.Dependencies.Dependencies"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheme.get_version": {
            "name": "get_version",
            "location": 24,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheme.get_poom_ci_dependencies": {
            "name": "get_poom_ci_dependencies",
            "location": 28,
            "return": [
                "typing.List[PoomCiDependency.Module.Module]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheme.get_poom_ci_produces": {
            "name": "get_poom_ci_produces",
            "location": 32,
            "return": [
                "typing.List[PoomCiDependency.Module.Module]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/SchemeBuilder.py": {
        "SchemeBuilder.create": {
            "name": "create",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "scheme": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/Schemes.py": {
        "Schemes.list_from_value": {
            "name": "list_from_value",
            "location": 14,
            "return": [
                "bool",
                "Union[bytes, str]",
                "str",
                "Optional[str]",
                "Iterable[Tuple[str, str]]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[str]",
                    "list",
                    "Tuple[Sequence[Any], Sequence[str], Sequence[Any]]",
                    "Tuple[str, Sequence[str], Sequence[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "v": [
                    "int",
                    "Union[int, float, str]",
                    "str"
                ]
            }
        },
        "Schemes.value_of": {
            "name": "value_of",
            "location": 23,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[list]",
                    "bool",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/UpdateSchemeVersion.py": {
        "UpdateSchemeVersion.from_state_handler": {
            "name": "from_state_handler",
            "location": 9,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "defaultdict"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/__init__.py": {},
    "flexio-flow-master/src/Schemes/Composer/ComposerFileHandler.py": {
        "ComposerFileHandler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "ComposerFileHandler.data": {
            "name": "data",
            "location": 17,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerFileHandler.__load_file": {
            "name": "__load_file",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerFileHandler.get_version": {
            "name": "get_version",
            "location": 27,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerFileHandler.set_version": {
            "name": "set_version",
            "location": 30,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "ComposerFileHandler.get_name": {
            "name": "get_name",
            "location": 34,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerFileHandler.write": {
            "name": "write",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Composer/ComposerScheme.py": {
        "ComposerScheme.set_version": {
            "name": "set_version",
            "location": 16,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerScheme.release_precheck": {
            "name": "release_precheck",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerScheme.get_version": {
            "name": "get_version",
            "location": 29,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerScheme.get_poom_ci_dependencies": {
            "name": "get_poom_ci_dependencies",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerScheme.get_poom_ci_produces": {
            "name": "get_poom_ci_produces",
            "location": 36,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str",
                "List[Dict[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Composer/PoomCiDependencies.py": {
        "PoomCiDependencies.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer_handler": [
                    "Schemes.Composer.ComposerFileHandler.ComposerFileHandler",
                    "List[Dict[str, float]]"
                ]
            }
        },
        "PoomCiDependencies.__is_git": {
            "name": "__is_git",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "PoomCiDependencies.__git_version": {
            "name": "__git_version",
            "location": 20,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "PoomCiDependencies.__clean_version": {
            "name": "__clean_version",
            "location": 25,
            "return": [
                "str",
                "Callable[[], bool]",
                "int"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PoomCiDependencies.process": {
            "name": "process",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Composer/PreCheck.py": {
        "PreCheck.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composer_handler": [
                    "Schemes.Composer.ComposerFileHandler.ComposerFileHandler",
                    "List[Dict[str, float]]"
                ],
                "dev_suffix": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "PreCheck.process": {
            "name": "process",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreCheck.is_dev": {
            "name": "is_dev",
            "location": 28,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ]
            }
        },
        "PreCheck.is_flexio_dep": {
            "name": "is_flexio_dep",
            "location": 33,
            "return": [
                "bool",
                "Optional[str]",
                "Type[Any]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, dict]"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/Composer/__init__.py": {},
    "flexio-flow-master/src/Schemes/Docker/__init__.py": {},
    "flexio-flow-master/src/Schemes/Maven/MavenPreCheck.py": {
        "MavenPreCheck.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Sequence[int]"
                ]
            }
        },
        "MavenPreCheck.check": {
            "name": "check",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Maven/MavenScheme.py": {
        "MavenScheme.set_version": {
            "name": "set_version",
            "location": 16,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MavenScheme.release_precheck": {
            "name": "release_precheck",
            "location": 20,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MavenScheme.get_version": {
            "name": "get_version",
            "location": 23,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MavenScheme.get_poom_ci_dependencies": {
            "name": "get_poom_ci_dependencies",
            "location": 27,
            "return": [
                "typing.List[PoomCiDependency.Module.Module]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MavenScheme.get_poom_ci_produces": {
            "name": "get_poom_ci_produces",
            "location": 30,
            "return": [
                "typing.List[PoomCiDependency.Module.Module]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Maven/MavenSetVersion.py": {
        "MavenSetVersion.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "target_version": [
                    "str",
                    "bool"
                ]
            }
        },
        "MavenSetVersion.set": {
            "name": "set",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Maven/ReportFileReader.py": {
        "ReportFileReader.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reportFile": [
                    "str",
                    "TextIO",
                    "IO",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "ReportFileReader.read": {
            "name": "read",
            "location": 13,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Maven/__init__.py": {},
    "flexio-flow-master/src/Schemes/Package/PackageFileHandler.py": {
        "PackageFileHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "PackageFileHandler.data": {
            "name": "data",
            "location": 19,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageFileHandler.__load_file": {
            "name": "__load_file",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageFileHandler.get_version": {
            "name": "get_version",
            "location": 29,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageFileHandler.set_version": {
            "name": "set_version",
            "location": 32,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "PackageFileHandler.get_name": {
            "name": "get_name",
            "location": 36,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageFileHandler.write": {
            "name": "write",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageFileHandler.is_git_dependency": {
            "name": "is_git_dependency",
            "location": 46,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/Package/PackageScheme.py": {
        "PackageScheme.set_version": {
            "name": "set_version",
            "location": 18,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageScheme.release_precheck": {
            "name": "release_precheck",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageScheme.get_version": {
            "name": "get_version",
            "location": 31,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageScheme.get_poom_ci_dependencies": {
            "name": "get_poom_ci_dependencies",
            "location": 35,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageScheme.get_poom_ci_produces": {
            "name": "get_poom_ci_produces",
            "location": 38,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str",
                "List[Dict[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Package/PoomCiDependencies.py": {
        "PoomCiDependencies.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_handler": [
                    "Schemes.Package.PackageFileHandler.PackageFileHandler"
                ]
            }
        },
        "PoomCiDependencies.__is_git": {
            "name": "__is_git",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "PoomCiDependencies.__git_version": {
            "name": "__git_version",
            "location": 20,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "PoomCiDependencies.__clean_version": {
            "name": "__clean_version",
            "location": 25,
            "return": [
                "str",
                "Callable[[], bool]",
                "int"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PoomCiDependencies.process": {
            "name": "process",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/Schemes/Package/PreCheck.py": {
        "PreCheck.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_handler": [
                    "Schemes.Package.PackageFileHandler.PackageFileHandler"
                ],
                "dev_suffix": [
                    "str",
                    "bool"
                ]
            }
        },
        "PreCheck.process": {
            "name": "process",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreCheck.is_dev": {
            "name": "is_dev",
            "location": 27,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ]
            }
        },
        "PreCheck.is_flexio_dep": {
            "name": "is_flexio_dep",
            "location": 32,
            "return": [
                "bool",
                "Optional[str]",
                "Type[Any]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, dict]"
                ]
            }
        }
    },
    "flexio-flow-master/src/Schemes/Package/__init__.py": {},
    "flexio-flow-master/src/tests/TestFlexioFlowConfig.py": {},
    "flexio-flow-master/src/tests/tests.py": {
        "suite": {
            "name": "suite",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "flexio-flow-master/src/tests/__init__.py": {},
    "flexio-flow-master/src/tests/Branches/TestBranchHandler.py": {
        "TestBranchHandler.test_topics": {
            "name": "test_topics",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBranchHandler.test_issue": {
            "name": "test_issue",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/Branches/__init__.py": {},
    "flexio-flow-master/src/tests/ConsoleColors/TestColors.py": {
        "TestColors.test_fg": {
            "name": "test_fg",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColors.test_bg": {
            "name": "test_bg",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColors.test_style": {
            "name": "test_style",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColors.test_logging": {
            "name": "test_logging",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/ConsoleColors/__init__.py": {},
    "flexio-flow-master/src/tests/FlexioFlow/TestState.py": {
        "TestState.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestState.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestState.test_should_bump_major": {
            "name": "test_should_bump_major",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestState.test_should_bump_minor": {
            "name": "test_should_bump_minor",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestState.test_should_bump_patch": {
            "name": "test_should_bump_patch",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestState.test_should_reset_patch": {
            "name": "test_should_reset_patch",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/FlexioFlow/TestVersion.py": {
        "TestVersion.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.tearDown": {
            "name": "tearDown",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.test_should_bump_major": {
            "name": "test_should_bump_major",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.test_should_bump_minor": {
            "name": "test_should_bump_minor",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.test_should_bump_patch": {
            "name": "test_should_bump_patch",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.test_should_reset_patch": {
            "name": "test_should_reset_patch",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/FlexioFlow/__init__.py": {},
    "flexio-flow-master/src/tests/FlexioFlow/Actions/TestPreCheck.py": {
        "TestPreCheck.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreCheck.test_should_dev_dependencies_empty": {
            "name": "test_should_dev_dependencies_empty",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/FlexioFlow/Actions/__init__.py": {},
    "flexio-flow-master/src/tests/Schemes/TestSchemesHelper.py": {
        "TestSchemesHelper.fake_state": {
            "name": "fake_state",
            "location": 19,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "TestSchemesHelper.fake_state_handler": {
            "name": "fake_state_handler",
            "location": 27,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Union[object, type]"
                ]
            }
        },
        "TestSchemesHelper.mount_workdir_without_dev_dependencies": {
            "name": "mount_workdir_without_dev_dependencies",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "packaging.version.Version",
                    "float"
                ]
            }
        },
        "TestSchemesHelper.mount_workdir_with_dev_dependencies": {
            "name": "mount_workdir_with_dev_dependencies",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "packaging.version.Version",
                    "float"
                ]
            }
        },
        "TestSchemesHelper.clean_workdir": {
            "name": "clean_workdir",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "flexio-flow-master/src/tests/Schemes/__init__.py": {},
    "flexio-flow-master/src/tests/Schemes/Maven/TestReportFileReader.py": {
        "TestReportFileReader.test_given_report_file_doesnt_exists__then_dependencies_is_empty": {
            "name": "test_given_report_file_doesnt_exists__then_dependencies_is_empty",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportFileReader.test_given_report_rile_exists__when_report_is_empty__then_dependencies_is_empty": {
            "name": "test_given_report_rile_exists__when_report_is_empty__then_dependencies_is_empty",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportFileReader.test_given_report_file_exists__when_report_contains_one_parseable_line__then_dependencies_has_one_element": {
            "name": "test_given_report_file_exists__when_report_contains_one_parseable_line__then_dependencies_has_one_element",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportFileReader.test_given_report_file_exists__when_report_contains_many_parseable_line__then_dependencies_has_many_elements": {
            "name": "test_given_report_file_exists__when_report_contains_many_parseable_line__then_dependencies_has_many_elements",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportFileReader.test_given_report_file_exists__when_report_contains_one_unparseable_line__then_dependencies_has_one_element": {
            "name": "test_given_report_file_exists__when_report_contains_one_unparseable_line__then_dependencies_has_one_element",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportFileReader.ressource_path": {
            "name": "ressource_path",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "flexio-flow-master/src/tests/Schemes/Maven/__init__.py": {},
    "flexio-flow-master/src/tests/Schemes/Package/TestPackageHelper.py": {
        "TestPackageHelper.get_json_without_dev_dependencies": {
            "name": "get_json_without_dev_dependencies",
            "location": 19,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestPackageHelper.get_json_with_dev_dependencies": {
            "name": "get_json_with_dev_dependencies",
            "location": 26,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestPackageHelper.fake_state": {
            "name": "fake_state",
            "location": 33,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "TestPackageHelper.write_package_without_dev_dependencies": {
            "name": "write_package_without_dev_dependencies",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "dir_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestPackageHelper.mount_workdir_without_dev_dependencies": {
            "name": "mount_workdir_without_dev_dependencies",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bytes",
                    "Optional[TextIO]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPackageHelper.write_package_with_dev_dependencies": {
            "name": "write_package_with_dev_dependencies",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "dir_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestPackageHelper.mount_workdir_with_dev_dependencies": {
            "name": "mount_workdir_with_dev_dependencies",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Tuple[\"SqlFile\", List[\"SqlFile\"], Optional[Any]]",
                    "str"
                ]
            }
        },
        "TestPackageHelper.clean_workdir": {
            "name": "clean_workdir",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "flexio-flow-master/src/tests/Schemes/Package/TestPackageScheme.py": {
        "TestPackageScheme.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackageScheme.test_should_find_file_or_raise": {
            "name": "test_should_find_file_or_raise",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackageScheme.test_should_change_version": {
            "name": "test_should_change_version",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackageScheme.test_should_plan_release_empty": {
            "name": "test_should_plan_release_empty",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackageScheme.test_should_plan_release_not_empty": {
            "name": "test_should_plan_release_not_empty",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/Schemes/Package/__init__.py": {},
    "flexio-flow-master/src/tests/VersionControl/__init__.py": {},
    "flexio-flow-master/src/tests/VersionControl/GitFlow/CleanRepo.py": {
        "CleanRepo.test_clean": {
            "name": "test_clean",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestFlexioFlowInit.py": {
        "TestFlexioFlowInit.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexioFlowInit.__get_master_state": {
            "name": "__get_master_state",
            "location": 20,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexioFlowInit.__get_develop_state": {
            "name": "__get_develop_state",
            "location": 26,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexioFlowInit.test_should_init_master_and_develop": {
            "name": "test_should_init_master_and_develop",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestGitCmd.py": {
        "TestGitCmd.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitCmd.test_has_branch": {
            "name": "test_has_branch",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitCmd.test_current_branch": {
            "name": "test_current_branch",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitCmd.test_has_tag": {
            "name": "test_has_tag",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitCmd.test_has_not_tag": {
            "name": "test_has_not_tag",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitCmd.test_has_remote": {
            "name": "test_has_remote",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestGitFlow.py": {
        "TestGitFlow.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlow.test_should_remote_tag_and_check": {
            "name": "test_should_remote_tag_and_check",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlow.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlow.test_has_hotfix": {
            "name": "test_has_hotfix",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlow.test_has_conflict": {
            "name": "test_has_conflict",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlow.test_get_repo": {
            "name": "test_get_repo",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestGitFlowFeature.py": {
        "TestGitFlowFeature.__feature_start": {
            "name": "__feature_start",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "issue": []
            }
        },
        "TestGitFlowFeature.__feature_finish": {
            "name": "__feature_finish",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "issue": []
            }
        },
        "TestGitFlowFeature.__get_master_state": {
            "name": "__get_master_state",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.__get_feature_state": {
            "name": "__get_feature_state",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "branch_name": []
            }
        },
        "TestGitFlowFeature.__get_dev_state": {
            "name": "__get_dev_state",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.tearDown": {
            "name": "tearDown",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.setUp": {
            "name": "setUp",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.test_vide": {
            "name": "test_vide",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.test_should_start_feature": {
            "name": "test_should_start_feature",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.test_should_start_feature_with_issue": {
            "name": "test_should_start_feature_with_issue",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.test_should_finish_feature": {
            "name": "test_should_finish_feature",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowFeature.test_should_finish_release_with_issue": {
            "name": "test_should_finish_release_with_issue",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestGitFlowHelper.py": {
        "TestGitFlowHelper.mount_workdir_and_clone": {
            "name": "mount_workdir_and_clone",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, bool]",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "TestGitFlowHelper.clean_workdir": {
            "name": "clean_workdir",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "TestGitFlowHelper.clean_remote_repo": {
            "name": "clean_remote_repo",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Any]"
                ],
                "version": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "TestGitFlowHelper.fake_state": {
            "name": "fake_state",
            "location": 49,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "TestGitFlowHelper.init_repo": {
            "name": "init_repo",
            "location": 57,
            "return": [
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ],
                "version": [
                    "str",
                    "Exception",
                    "Optional[Exception]"
                ]
            }
        },
        "TestGitFlowHelper.setup_config_handler": {
            "name": "setup_config_handler",
            "location": 67,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "Config",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "dict",
                    "Core.ConfigHandler.ConfigHandler",
                    "Callable"
                ]
            }
        },
        "TestGitFlowHelper.setup_github_repo": {
            "name": "setup_github_repo",
            "location": 79,
            "return": [
                "str",
                "model.Config",
                "bool",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "pathlib.Path",
                    "tuple",
                    "Dict[str, Any]",
                    "Config"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "str",
                    "bool",
                    "model.Config"
                ]
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestGitFlowHotfix.py": {
        "TestGitFlowHotfix.__hotfix_start": {
            "name": "__hotfix_start",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Optional[VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "TestGitFlowHotfix.__hotfix_finish": {
            "name": "__hotfix_finish",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Optional[VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub]",
                    "str"
                ]
            }
        },
        "TestGitFlowHotfix.__get_master_state": {
            "name": "__get_master_state",
            "location": 47,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.__get_hotfix_state": {
            "name": "__get_hotfix_state",
            "location": 51,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.__get_dev_state": {
            "name": "__get_dev_state",
            "location": 55,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.__post_issue": {
            "name": "__post_issue",
            "location": 59,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Dict[str, Any]",
                    "int",
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "bytes"
                ]
            }
        },
        "TestGitFlowHotfix.tearDown": {
            "name": "tearDown",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.__setup_config": {
            "name": "__setup_config",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.test_should_start_hotfix": {
            "name": "test_should_start_hotfix",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.test_should_start_hotfix_with_issue": {
            "name": "test_should_start_hotfix_with_issue",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.test_should_finish_hotfix": {
            "name": "test_should_finish_hotfix",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.test_should_finish_hotfix_with_issue": {
            "name": "test_should_finish_hotfix_with_issue",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowHotfix.test_clean_fail": {
            "name": "test_clean_fail",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/TestGitFlowRelease.py": {
        "TestGitFlowRelease.__release_start": {
            "name": "__release_start",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Optional[VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "TestGitFlowRelease.__release_finish": {
            "name": "__release_finish",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Optional[VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub]",
                    "str"
                ]
            }
        },
        "TestGitFlowRelease.__get_master_state": {
            "name": "__get_master_state",
            "location": 40,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.__get_release_state": {
            "name": "__get_release_state",
            "location": 44,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.__get_dev_state": {
            "name": "__get_dev_state",
            "location": 49,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.tearDown": {
            "name": "tearDown",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.setUp": {
            "name": "setUp",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.test_vide": {
            "name": "test_vide",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.test_should_start_release": {
            "name": "test_should_start_release",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.test_should_start_release_with_issue": {
            "name": "test_should_start_release_with_issue",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.test_should_finish_release": {
            "name": "test_should_finish_release",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFlowRelease.test_should_finish_release_with_issue": {
            "name": "test_should_finish_release_with_issue",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControl/GitFlow/__init__.py": {},
    "flexio-flow-master/src/tests/VersionControlProvider/__init__.py": {},
    "flexio-flow-master/src/tests/VersionControlProvider/Flexio/TestFlexio.py": {
        "TestFlexio.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexio.test_post_record": {
            "name": "test_post_record",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexio.test_get_last_record": {
            "name": "test_get_last_record",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexio.test_get_total": {
            "name": "test_get_total",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexio.test_get_last_100_records": {
            "name": "test_get_last_100_records",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexio.test_get_topic_by_number": {
            "name": "test_get_topic_by_number",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexio.test_color": {
            "name": "test_color",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControlProvider/Flexio/__init__.py": {},
    "flexio-flow-master/src/tests/VersionControlProvider/Github/TestGithub.py": {
        "TestGithub.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_get_user": {
            "name": "test_get_user",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_get_users": {
            "name": "test_get_users",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_list_labels": {
            "name": "test_list_labels",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_list_milestones": {
            "name": "test_list_milestones",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_create_milestone": {
            "name": "test_create_milestone",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_create_issue": {
            "name": "test_create_issue",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_read_issue": {
            "name": "test_read_issue",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGithub.test_create_issue_comment": {
            "name": "test_create_issue_comment",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/tests/VersionControlProvider/Github/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Branch.py": {
        "Branch.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        },
        "Branch.with_issue": {
            "name": "with_issue",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Branch.with_topics": {
            "name": "with_topics",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Branch.with_name": {
            "name": "with_name",
            "location": 35,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Branch.with_options": {
            "name": "with_options",
            "location": 39,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "List[str]",
                    "eth.abc.ComputationAPI",
                    "str",
                    "Type[eth.abc.ChainAPI]",
                    "bool"
                ]
            }
        },
        "Branch.process": {
            "name": "process",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.with_action": {
            "name": "with_action",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "List[str]",
                    "Pattern",
                    "list",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Branch.start_message": {
            "name": "start_message",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Commit.py": {
        "Commit.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.with_message": {
            "name": "with_message",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControl/CommitHandler.py": {
        "CommitHandler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Sequence[int]"
                ]
            }
        },
        "CommitHandler.with_commit": {
            "name": "with_commit",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CommitHandler.do_commit": {
            "name": "do_commit",
            "location": 22,
            "return": [
                "CommitHandler"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommitHandler.push": {
            "name": "push",
            "location": 26,
            "return": [
                "CommitHandler"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommitHandler.can_commit": {
            "name": "can_commit",
            "location": 30,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Release.py": {
        "Release.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "dict",
                    "str"
                ],
                "config_handler": [
                    "dict",
                    "str"
                ]
            }
        },
        "Release.with_major": {
            "name": "with_major",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "is_major": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControl/VersionControl.py": {
        "VersionControl.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        },
        "VersionControl.hotfix": {
            "name": "hotfix",
            "location": 19,
            "return": [
                "VersionControl.Branch.Branch"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.release": {
            "name": "release",
            "location": 23,
            "return": [
                "VersionControl.Branch.Branch"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.feature": {
            "name": "feature",
            "location": 27,
            "return": [
                "VersionControl.Branch.Branch"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.build_branch": {
            "name": "build_branch",
            "location": 31,
            "return": [
                "VersionControl.Branch.Branch"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "VersionControl.get_issue_number": {
            "name": "get_issue_number",
            "location": 35,
            "return": [
                "typing.Optional[builtins.int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.get_topics_number": {
            "name": "get_topics_number",
            "location": 39,
            "return": [
                "typing.Optional[typing.List[builtins.int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.commit": {
            "name": "commit",
            "location": 43,
            "return": [
                "VersionControl.CommitHandler.CommitHandler"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VersionControl.is_current_branch_develop": {
            "name": "is_current_branch_develop",
            "location": 47,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.stash_start": {
            "name": "stash_start",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionControl.stash_end": {
            "name": "stash_end",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/VersionControlBuilder.py": {
        "VersionControlBuilder.build": {
            "name": "build",
            "location": 10,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "version_controller": [
                    "Callable",
                    "str",
                    "MutableMapping[str, Any]",
                    "Optional[str]"
                ],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControl/VersionController.py": {},
    "flexio-flow-master/src/VersionControl/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Git.py": {
        "Git.build_branch": {
            "name": "build_branch",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "Branches.Branches.Branches",
                    "dict"
                ]
            }
        },
        "Git.feature": {
            "name": "feature",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.hotfix": {
            "name": "hotfix",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.master": {
            "name": "master",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.release": {
            "name": "release",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.get_issue_number": {
            "name": "get_issue_number",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.get_topics_number": {
            "name": "get_topics_number",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.commit": {
            "name": "commit",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "str",
                    "Callable[..., Awaitable]",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "Git.is_current_branch_develop": {
            "name": "is_current_branch_develop",
            "location": 50,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.stash_start": {
            "name": "stash_start",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Git.stash_end": {
            "name": "stash_end",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/GitCmd.py": {
        "GitCmd.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "dict",
                    "str"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "GitCmd.with_config_handler": {
            "name": "with_config_handler",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "config_handler": []
            }
        },
        "GitCmd.__exec": {
            "name": "__exec",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GitCmd.__exec_for_stdout": {
            "name": "__exec_for_stdout",
            "location": 32,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GitCmd.__decode_stdout": {
            "name": "__decode_stdout",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "str",
                    "bytes"
                ]
            }
        },
        "GitCmd.add_all": {
            "name": "add_all",
            "location": 39,
            "return": [
                "Tuple[bytes]",
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.branch_exists_from_branches": {
            "name": "branch_exists_from_branches",
            "location": 43,
            "return": [
                "str",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "int",
                    "Protocol"
                ]
            }
        },
        "GitCmd.local_branch_exists_from_branches": {
            "name": "local_branch_exists_from_branches",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "Branches.Branches.Branches",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "GitCmd.remote_branch_exists_from_branches": {
            "name": "remote_branch_exists_from_branches",
            "location": 50,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "Branches.Branches.Branches",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "GitCmd.branch_exists": {
            "name": "branch_exists",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Exception",
                    "dict",
                    "float"
                ]
            }
        },
        "GitCmd.local_branch_exists": {
            "name": "local_branch_exists",
            "location": 57,
            "return": [
                "int",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "GitCmd.remote_branch_exists": {
            "name": "remote_branch_exists",
            "location": 61,
            "return": [
                "str",
                "dict",
                "pathlib.Path",
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "GitCmd.can_commit": {
            "name": "can_commit",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.checkout": {
            "name": "checkout",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GitCmd.checkout_without_refresh_state": {
            "name": "checkout_without_refresh_state",
            "location": 76,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "GitCmd.checkout_with_branch_name": {
            "name": "checkout_with_branch_name",
            "location": 80,
            "return": [
                "Iterator",
                "Dict[str, Any]",
                "str",
                "int",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "dict",
                    "Mapping[str, T]",
                    "List[Tuple[str, str]]"
                ],
                "options": [
                    "dict",
                    "Mapping[str, T]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "GitCmd.reload_state": {
            "name": "reload_state",
            "location": 84,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.checkout_file_with_branch_name": {
            "name": "checkout_file_with_branch_name",
            "location": 91,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "List[int]",
                    "pathlib.PurePath"
                ],
                "file": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "Path"
                ]
            }
        },
        "GitCmd.create_branch_from": {
            "name": "create_branch_from",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_branch_name": [
                    "str",
                    "dict",
                    "type",
                    "Optional[str]"
                ],
                "source": [
                    "str",
                    "Branches.Branches.Branches",
                    "Optional[Dict]"
                ]
            }
        },
        "GitCmd.commit": {
            "name": "commit",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Exception",
                    "Dict[str, str]",
                    "bool",
                    "FrozenSet[str]",
                    "Union[str, List[str]]"
                ],
                "options": [
                    "str",
                    "bool",
                    "IO[str]",
                    "int",
                    "dict",
                    "set"
                ]
            }
        },
        "GitCmd.clone": {
            "name": "clone",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "GitCmd.undo_last_commit": {
            "name": "undo_last_commit",
            "location": 116,
            "return": [
                "str",
                "float",
                "Tuple[int, int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.delete_tag": {
            "name": "delete_tag",
            "location": 120,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ],
                "remote": [
                    "bool",
                    "str",
                    "List[int]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GitCmd.delete_branch": {
            "name": "delete_branch",
            "location": 127,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Branches.Branches.Branches",
                    "Dict[str, Any]"
                ]
            }
        },
        "GitCmd.delete_local_branch_from_name": {
            "name": "delete_local_branch_from_name",
            "location": 132,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "GitCmd.delete_remote_branch_from_name": {
            "name": "delete_remote_branch_from_name",
            "location": 137,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "GitCmd.try_delete_remote_branch_from_name": {
            "name": "try_delete_remote_branch_from_name",
            "location": 141,
            "return": [
                "List[str]",
                "Dict[str, Union[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "GitCmd.get_branch_name_from_git": {
            "name": "get_branch_name_from_git",
            "location": 148,
            "return": [
                "str",
                "type",
                "int",
                "Optional[str]",
                "Callable[[str], Any]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "VersionControl.VersionControl.VersionControl",
                    "Dict[str, str]"
                ]
            }
        },
        "GitCmd.__get_branch_name_from_git_list": {
            "name": "__get_branch_name_from_git_list",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GitCmd.get_conflict": {
            "name": "get_conflict",
            "location": 181,
            "return": [
                "bool",
                "str",
                "int",
                "Hashable",
                "float",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.get_branches": {
            "name": "get_branches",
            "location": 184,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.get_local_branches": {
            "name": "get_local_branches",
            "location": 187,
            "return": [
                "int",
                "list",
                "List[Dict[str, str]]",
                "Tuple[int, int]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.get_remote_branches": {
            "name": "get_remote_branches",
            "location": 191,
            "return": [
                "int",
                "list",
                "List[Dict[str, str]]",
                "Tuple[int, int]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.get_repo": {
            "name": "get_repo",
            "location": 195,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.match_remote_url_ssh": {
            "name": "match_remote_url_ssh",
            "location": 208,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "GitCmd.match_remote_url_https": {
            "name": "match_remote_url_https",
            "location": 214,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "GitCmd.get_current_branch_name": {
            "name": "get_current_branch_name",
            "location": 220,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.has_conflict": {
            "name": "has_conflict",
            "location": 225,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.has_head": {
            "name": "has_head",
            "location": 228,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.stash": {
            "name": "stash",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.stash_pop": {
            "name": "stash_pop",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.is_branch_ahead": {
            "name": "is_branch_ahead",
            "location": 237,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[float, float]",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "compare_to": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "GitCmd.list_commit_diff": {
            "name": "list_commit_diff",
            "location": 240,
            "return": [
                "Optional[str]",
                "bool",
                "type",
                "Dict[str, Tuple[str, str]]",
                "str",
                "tuple",
                "float"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "float"
                ],
                "compare_to": [
                    "str",
                    "float"
                ]
            }
        },
        "GitCmd.is_local_remote_equal": {
            "name": "is_local_remote_equal",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "GitCmd.is_clean_working_tree": {
            "name": "is_clean_working_tree",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.compare_refs": {
            "name": "compare_refs",
            "location": 284,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "branch1": [
                    "str",
                    "pathlib.Path"
                ],
                "branch2": [
                    "str"
                ]
            }
        },
        "GitCmd.init_head": {
            "name": "init_head",
            "location": 319,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.has_remote": {
            "name": "has_remote",
            "location": 324,
            "return": [
                "str",
                "dict",
                "pathlib.Path",
                "Awaitable[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.last_tag": {
            "name": "last_tag",
            "location": 328,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.merge": {
            "name": "merge",
            "location": 331,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "Branches.Branches.Branches",
                    "Callable",
                    "type",
                    "Match[str]",
                    "bytes",
                    "Iterable[str]",
                    "int"
                ],
                "options": [
                    "Branches.Branches.Branches",
                    "List[str]",
                    "str"
                ]
            }
        },
        "GitCmd.merge_from_branch_name": {
            "name": "merge_from_branch_name",
            "location": 335,
            "return": [
                "IO",
                "str",
                "bytes",
                "Dict[str, Any]",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "Mapping[str, T]"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "Mapping[str, T]"
                ]
            }
        },
        "GitCmd.merge_with_version_message": {
            "name": "merge_with_version_message",
            "location": 340,
            "return": [
                "str",
                "bool",
                "IO"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Branches.Branches.Branches"
                ],
                "message": [
                    "str",
                    "Branches.Branches.Branches"
                ],
                "options": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Tuple[bool, str]]",
                    "list",
                    "bool"
                ]
            }
        },
        "GitCmd.merge_with_version_message_from_branch_name": {
            "name": "merge_with_version_message_from_branch_name",
            "location": 348,
            "return": [
                "Sequence[str]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "message": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "GitCmd.merge_with_theirs": {
            "name": "merge_with_theirs",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "int",
                    "str",
                    "float",
                    "Branches.Branches.Branches"
                ]
            }
        },
        "GitCmd.push_tag": {
            "name": "push_tag",
            "location": 364,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "Union[str, List[str]]"
                ]
            }
        },
        "GitCmd.pull": {
            "name": "pull",
            "location": 368,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.push": {
            "name": "push",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.push_force": {
            "name": "push_force",
            "location": 376,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.tag_exists": {
            "name": "tag_exists",
            "location": 380,
            "return": [
                "str",
                "Tuple[str, str, str, str]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "GitCmd.remote_tag_exists": {
            "name": "remote_tag_exists",
            "location": 386,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "GitCmd.local_tag_exists": {
            "name": "local_tag_exists",
            "location": 390,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "GitCmd.reset_to_tag": {
            "name": "reset_to_tag",
            "location": 410,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str"
                ]
            }
        },
        "GitCmd.set_upstream": {
            "name": "set_upstream",
            "location": 415,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.try_to_pull": {
            "name": "try_to_pull",
            "location": 420,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.try_to_push": {
            "name": "try_to_push",
            "location": 426,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.try_to_push_force": {
            "name": "try_to_push_force",
            "location": 432,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.try_to_push_tag": {
            "name": "try_to_push_tag",
            "location": 438,
            "return": [
                "str",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GitCmd.try_to_set_upstream": {
            "name": "try_to_set_upstream",
            "location": 445,
            "return": [
                "Set[str]",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCmd.tag": {
            "name": "tag",
            "location": 451,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "msg": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GitCmd.local_branch_name": {
            "name": "local_branch_name",
            "location": 456,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "GitCmd.remote_branch_name": {
            "name": "remote_branch_name",
            "location": 463,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "GitCmd.local_commits": {
            "name": "local_commits",
            "location": 470,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/GitConfig.py": {},
    "flexio-flow-master/src/VersionControl/Git/IssueHandler.py": {
        "IssueHandler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Sequence[int]"
                ]
            }
        },
        "IssueHandler.number_from_branch_name": {
            "name": "number_from_branch_name",
            "location": 13,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/TopicHandler.py": {
        "TopicHandler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Sequence[int]"
                ]
            }
        },
        "TopicHandler.numbers_from_branch_name": {
            "name": "numbers_from_branch_name",
            "location": 13,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Actions/CommitHandler.py": {
        "CommitHandler.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "CommitHandler.do_commit": {
            "name": "do_commit",
            "location": 14,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommitHandler.push": {
            "name": "push",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommitHandler.can_commit": {
            "name": "can_commit",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Actions/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Branches/BranchBuilder.py": {
        "BranchBuilder.create": {
            "name": "create",
            "location": 15,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "branch": [
                    "dict",
                    "\"Config\""
                ],
                "state_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/GitFlowCmd.py": {
        "GitFlowCmd.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        },
        "GitFlowCmd.__exec": {
            "name": "__exec",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GitFlowCmd.__exec_for_stdout": {
            "name": "__exec_for_stdout",
            "location": 27,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GitFlowCmd.init_config": {
            "name": "init_config",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.ensure_head": {
            "name": "ensure_head",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.ensure_master_branch": {
            "name": "ensure_master_branch",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.ensure_develop_branch": {
            "name": "ensure_develop_branch",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.has_hotfix": {
            "name": "has_hotfix",
            "location": 69,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "GitFlowCmd.has_release": {
            "name": "has_release",
            "location": 72,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "GitFlowCmd.has_feature": {
            "name": "has_feature",
            "location": 75,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "GitFlowCmd.is_feature": {
            "name": "is_feature",
            "location": 78,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.is_release": {
            "name": "is_release",
            "location": 86,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.is_hotfix": {
            "name": "is_hotfix",
            "location": 94,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitFlowCmd.__has_branch_from_parent": {
            "name": "__has_branch_from_parent",
            "location": 102,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "Optional[str]"
                ],
                "remote": [
                    "float",
                    "bool",
                    "Dict[str, float]",
                    "dict",
                    "Sequence[str]"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Branches/Develop/Develop.py": {
        "Develop.process": {
            "name": "process",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Develop/Init.py": {
        "Init.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        },
        "Init.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 20,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.__init_develop": {
            "name": "__init_develop",
            "location": 24,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Init.process": {
            "name": "process",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Develop/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Branches/Feature/Feature.py": {
        "Feature.with_name": {
            "name": "with_name",
            "location": 12,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Feature.process": {
            "name": "process",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Feature/Finish.py": {
        "Finish.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "issue": [
                    "Optional[List]",
                    "str",
                    "Optional[dict]"
                ],
                "topics": [
                    "Optional[List]",
                    "str"
                ],
                "keep_branch": [
                    "bool",
                    "Optional[bool]"
                ],
                "close_issue": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "Finish.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 40,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__pull_develop": {
            "name": "__pull_develop",
            "location": 44,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__checkout_current_feature": {
            "name": "__checkout_current_feature",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__merge_develop": {
            "name": "__merge_develop",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__delete_feature": {
            "name": "__delete_feature",
            "location": 95,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__finish_feature": {
            "name": "__finish_feature",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.process": {
            "name": "process",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Feature/Start.py": {
        "Start.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "issue": [
                    "Optional[str]",
                    "Dict[Any, bool]",
                    "Dict[str, Any]"
                ],
                "topics": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[VersionControlProvider.Topic.Topic]]",
                    "Optional[List]",
                    "email.message.Message",
                    "Dict[str, str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Start.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 31,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__pull_develop": {
            "name": "__pull_develop",
            "location": 35,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__start_feature": {
            "name": "__start_feature",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.process": {
            "name": "process",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Feature/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Branches/Hotfix/Finish.py": {
        "Finish.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "issue": [
                    "Optional[List]",
                    "str",
                    "Optional[dict]"
                ],
                "topics": [
                    "Optional[List]",
                    "str"
                ],
                "keep_branch": [
                    "bool",
                    "Optional[bool]"
                ],
                "close_issue": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "Finish.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 42,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__checkout_current_hotfix": {
            "name": "__checkout_current_hotfix",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__pull_develop": {
            "name": "__pull_develop",
            "location": 49,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__pull_master": {
            "name": "__pull_master",
            "location": 53,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__merge_master": {
            "name": "__merge_master",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__merge_develop": {
            "name": "__merge_develop",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__delete_hotfix": {
            "name": "__delete_hotfix",
            "location": 153,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__finish_hotfix": {
            "name": "__finish_hotfix",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.process": {
            "name": "process",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Hotfix/Hotfix.py": {
        "Hotfix.process": {
            "name": "process",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Hotfix/Start.py": {
        "Start.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "issue": [
                    "Optional[List]",
                    "str",
                    "Optional[dict]"
                ],
                "topics": [
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "Start.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 33,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__pull_develop": {
            "name": "__pull_develop",
            "location": 37,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__pull_master": {
            "name": "__pull_master",
            "location": 41,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__start_hotfix": {
            "name": "__start_hotfix",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.process": {
            "name": "process",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Hotfix/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Branches/Master/Master.py": {
        "Master.process": {
            "name": "process",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Master/__init__.py": {},
    "flexio-flow-master/src/VersionControl/Git/Branches/Release/Finish.py": {
        "Finish.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "issue": [
                    "Optional[List]",
                    "str",
                    "Optional[dict]"
                ],
                "topics": [
                    "Optional[List]",
                    "str"
                ],
                "keep_branch": [
                    "bool",
                    "Optional[bool]"
                ],
                "close_issue": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "Finish.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 44,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__checkout_current_release": {
            "name": "__checkout_current_release",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__pull_develop": {
            "name": "__pull_develop",
            "location": 51,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__pull_master": {
            "name": "__pull_master",
            "location": 57,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__merge_master": {
            "name": "__merge_master",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__merge_develop": {
            "name": "__merge_develop",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__delete_release": {
            "name": "__delete_release",
            "location": 156,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.__finish_release": {
            "name": "__finish_release",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Finish.process": {
            "name": "process",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Release/PreCheck.py": {
        "PreCheck.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "issue": [
                    "Optional[List]",
                    "str",
                    "Optional[dict]"
                ],
                "topics": [
                    "Optional[List[Any]]"
                ]
            }
        },
        "PreCheck.process": {
            "name": "process",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Release/Release.py": {
        "Release.process": {
            "name": "process",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Release/Start.py": {
        "Start.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "issue": [
                    "Optional[Sequence[str]]",
                    "Optional[Dict]",
                    "Optional[List]",
                    "Optional[Collection[int]]"
                ],
                "topics": [
                    "Optional[str]",
                    "Optional[List]",
                    "Optional[List[str]]",
                    "Dict[str, str]",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[List[VersionControlProvider.Topic.Topic]]"
                ],
                "is_major": [
                    "str",
                    "bool"
                ]
            }
        },
        "Start.__init_gitflow": {
            "name": "__init_gitflow",
            "location": 34,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__pull_develop": {
            "name": "__pull_develop",
            "location": 38,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__pull_master": {
            "name": "__pull_master",
            "location": 42,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__set_version": {
            "name": "__set_version",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__start_check": {
            "name": "__start_check",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.__start_release": {
            "name": "__start_release",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Start.process": {
            "name": "process",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControl/Git/Branches/Release/__init__.py": {},
    "flexio-flow-master/src/VersionControlProvider/DefaultTopic.py": {
        "DefaultTopic.__dict__": {
            "name": "__dict__",
            "location": 7,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultTopic.url": {
            "name": "url",
            "location": 12,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultTopic.get_ref": {
            "name": "get_ref",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultTopic.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [
                "str",
                "Tuple[str, str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Issue.py": {
        "Issue.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.with_number": {
            "name": "with_number",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Issue.with_url": {
            "name": "with_url",
            "location": 34,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "List[str]",
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "Issue.get_ref": {
            "name": "get_ref",
            "location": 39,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.__dict__": {
            "name": "__dict__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/IssueDefault.py": {
        "IssueDefault.get_ref": {
            "name": "get_ref",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueDefault.__dict__": {
            "name": "__dict__",
            "location": 14,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/IssueMessage.py": {
        "IssueMessage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]"
                ],
                "issue": [
                    "Optional[Type[VersionControlProvider.Issue.Issue]]",
                    "str"
                ]
            }
        },
        "IssueMessage.keywords_dialect": {
            "name": "keywords_dialect",
            "location": 18,
            "return": [
                "typing.Type[VersionControlProvider.KeyWordsDialect.KeyWordsDialect]"
            ],
            "arguments": {}
        },
        "IssueMessage.with_close": {
            "name": "with_close",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueMessage.with_ref": {
            "name": "with_ref",
            "location": 33,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Issuer.py": {
        "Issuer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler",
                    "bool"
                ],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "options": [
                    "bool",
                    "FlexioFlow.Options.Options",
                    "str"
                ]
            }
        },
        "Issuer.repo": {
            "name": "repo",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issuer.with_repo": {
            "name": "with_repo",
            "location": 26,
            "return": [
                "Callable",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Issuer.create": {
            "name": "create",
            "location": 31,
            "return": [
                "VersionControlProvider.Issue.Issue"
            ],
            "arguments": {
                "self": [],
                "default_issue": [
                    "Optional[VersionControlProvider.IssueDefaulIssueDefault]",
                    "List[str]",
                    "int",
                    "Iterable",
                    "list",
                    "IO"
                ]
            }
        },
        "Issuer.attach_or_create": {
            "name": "attach_or_create",
            "location": 35,
            "return": [
                "VersionControlProvider.Issue.Issue"
            ],
            "arguments": {
                "self": [],
                "default_issue": [
                    "FlexioFlow.Options.Options",
                    "Optional[VersionControlProvider.IssueDefaulIssueDefault]",
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "Optional[VersionControlProvider.IssueDefaulIssueDefault]",
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Issuer.read_issue_by_number": {
            "name": "read_issue_by_number",
            "location": 39,
            "return": [
                "VersionControlProvider.Issue.Issue"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Issuer.message_builder": {
            "name": "message_builder",
            "location": 43,
            "return": [
                "VersionControlProvider.IssueMessage.IssueMessage"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[VersionControlProvider.Issue.Issue]",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "issue": [
                    "str",
                    "Optional[VersionControlProvider.Issue.Issue]",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Issuer.issue_builder": {
            "name": "issue_builder",
            "location": 47,
            "return": [
                "VersionControlProvider.Issue.Issue"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issuer.comment": {
            "name": "comment",
            "location": 51,
            "return": [
                "VersionControlProvider.Issue.Issue"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "VersionControlProvider.Issue.Issue"
                ],
                "text": [
                    "str",
                    "VersionControlProvider.Issue.Issue"
                ]
            }
        },
        "Issuer.has_repo": {
            "name": "has_repo",
            "location": 55,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/IssuerFactory.py": {
        "IssuerFactory.build": {
            "name": "build",
            "location": 14,
            "return": [
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "state_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler",
                    "FlexioFlow.Options.Options",
                    "bool"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler",
                    "FlexioFlow.Options.Options",
                    "bool"
                ],
                "issuer": [
                    "bool",
                    "str",
                    "dict"
                ],
                "options": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler",
                    "FlexioFlow.Options.Options",
                    "bool"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/IssuerHandler.py": {
        "IssuerHandler.issuers_from_config_handler": {
            "name": "issuers_from_config_handler",
            "location": 10,
            "return": [
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Issuers.py": {
        "Issuers.has_value": {
            "name": "has_value",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/IssueState.py": {},
    "flexio-flow-master/src/VersionControlProvider/KeyWordsDialect.py": {
        "KeyWordsDialect.ref": {
            "name": "ref",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "KeyWordsDialect.close": {
            "name": "close",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Topic.py": {
        "Topic.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.with_number": {
            "name": "with_number",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Topic.__dict__": {
            "name": "__dict__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.url": {
            "name": "url",
            "location": 30,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.get_ref": {
            "name": "get_ref",
            "location": 34,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.to_api_dict": {
            "name": "to_api_dict",
            "location": 37,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topic.to_dict": {
            "name": "to_dict",
            "location": 42,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Topicer.py": {
        "Topicer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Dict[str, Any]"
                ],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler",
                    "FlexioFlow.StateHandler.StateHandler"
                ]
            }
        },
        "Topicer.create": {
            "name": "create",
            "location": 21,
            "return": [
                "VersionControlProvider.Topic.Topic"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topicer.attach_or_create": {
            "name": "attach_or_create",
            "location": 25,
            "return": [
                "typing.List[VersionControlProvider.Topic.Topic]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topicer.attach_issue": {
            "name": "attach_issue",
            "location": 29,
            "return": [
                "Topicer"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "issue": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Topicer.topic_builder": {
            "name": "topic_builder",
            "location": 33,
            "return": [
                "VersionControlProvider.Topic.Topic"
            ],
            "arguments": {
                "self": []
            }
        },
        "Topicer.from_default": {
            "name": "from_default",
            "location": 37,
            "return": [
                "VersionControlProvider.Topic.Topic"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Topicer.read_topic_by_number": {
            "name": "read_topic_by_number",
            "location": 41,
            "return": [
                "VersionControlProvider.Topic.Topic"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/TopicerBuilder.py": {
        "TopicerBuilder.build": {
            "name": "build",
            "location": 13,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "state_handler": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str"
                ],
                "config_handler": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str"
                ],
                "topicer": [
                    "str",
                    "list",
                    "int"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Topicers.py": {
        "Topicers.has_value": {
            "name": "has_value",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "VT",
                    "str"
                ],
                "value": [
                    "Type[T]",
                    "VT",
                    "str"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/__init__.py": {},
    "flexio-flow-master/src/VersionControlProvider/Flexio/ConfigFlexio.py": {
        "ConfigFlexio.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "activate": [
                    "Optional[str]",
                    "Set[str]",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "FrozenSet"
                ],
                "user_token": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ConfigFlexio.user_token": {
            "name": "user_token",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigFlexio.activate": {
            "name": "activate",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigFlexio.to_dict": {
            "name": "to_dict",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/FlexioClient.py": {
        "Range.to_content_range": {
            "name": "to_content_range",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.from_header_response": {
            "name": "from_header_response",
            "location": 24,
            "return": [
                "Set[str]",
                "List[Match]",
                "Dict[str, str]",
                "List[str]",
                "Iterable[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "content_range": [
                    "str"
                ]
            }
        },
        "FlexioClient.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "FlexioClient.__auth": {
            "name": "__auth",
            "location": 43,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Callable",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "lunch_buddies.types.CreatePoll",
                    "dict"
                ]
            }
        },
        "FlexioClient.__with_content_range": {
            "name": "__with_content_range",
            "location": 51,
            "return": [
                "dict",
                "int",
                "Dict[str, Union[str, int]]",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "int",
                    "Dict[str, str]",
                    "dict",
                    "str"
                ],
                "range": [
                    "int",
                    "Dict[str, str]",
                    "dict",
                    "str"
                ]
            }
        },
        "FlexioClient.post_record": {
            "name": "post_record",
            "location": 55,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "VersionControlProvider.Flexio.FlexioRessource.FlexioRessource",
                    "dict"
                ]
            }
        },
        "FlexioClient.get_records": {
            "name": "get_records",
            "location": 59,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "VersionControlProvider.Flexio.FlexioRessource.FlexioRessource",
                    "List[str]",
                    "str",
                    "int"
                ],
                "range": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "FlexioClient.get_total": {
            "name": "get_total",
            "location": 65,
            "return": [
                "mypy.types.Type",
                "Set[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "VersionControlProvider.Flexio.FlexioRessource.FlexioRessource"
                ]
            }
        },
        "FlexioClient.get_record": {
            "name": "get_record",
            "location": 81,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "VersionControlProvider.Flexio.FlexioRessource.FlexioRessource",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FlexioClient.__print_response_error": {
            "name": "__print_response_error",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response",
                    "flask.Response",
                    "Dict[str, Any]",
                    "submicontrollers.ui.util.Response"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/FlexioIssue.py": {
        "FlexioIssue.with_topic": {
            "name": "with_topic",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FlexioIssue.set_github_issue": {
            "name": "set_github_issue",
            "location": 28,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str"
                ]
            }
        },
        "FlexioIssue.get_ref": {
            "name": "get_ref",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioIssue.__dict__": {
            "name": "__dict__",
            "location": 39,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioIssue.build_from_api": {
            "name": "build_from_api",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Mapping[str, Any]"
                ],
                "json": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/FlexioRequestApiError.py": {
        "FlexioRequestApiError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Mapping[str, object]",
                    "requests.Response"
                ],
                "message": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Union[List, Dict]"
                ]
            }
        },
        "FlexioRequestApiError.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "int",
                "str",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/FlexioRessource.py": {
        "FlexioRessource.__dict__": {
            "name": "__dict__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioRessource.to_api_dict": {
            "name": "to_api_dict",
            "location": 15,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioRessource.with_id": {
            "name": "with_id",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "FlexioRessource.build_from_api": {
            "name": "build_from_api",
            "location": 26,
            "return": [
                "FlexioRessource"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Optional[bool]",
                    "T"
                ],
                "json": [
                    "dict",
                    "Type[T]",
                    "Optional[bool]",
                    "T"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/FlexioTopic.py": {
        "FlexioTopic.__body_to_value": {
            "name": "__body_to_value",
            "location": 15,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopic.url": {
            "name": "url",
            "location": 18,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopic.to_dict": {
            "name": "to_dict",
            "location": 25,
            "return": [
                "str",
                "Tuple[str, str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopic.__dict__": {
            "name": "__dict__",
            "location": 33,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopic.build_from_api": {
            "name": "build_from_api",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "json": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "FlexioTopic.get_ref": {
            "name": "get_ref",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/FlexioTopicer.py": {
        "FlexioTopicer.create": {
            "name": "create",
            "location": 18,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopicer.attach_or_create": {
            "name": "attach_or_create",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]",
                "dict",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopicer.attach_issue": {
            "name": "attach_issue",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "VersionControlProvider.Topic.Topic",
                    "VersionControlProvider.Issue.Issue",
                    "Optional[str]",
                    "Mapping"
                ],
                "issue": [
                    "VersionControlProvider.Topic.Topic",
                    "VersionControlProvider.Issue.Issue",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "FlexioTopicer.topic_builder": {
            "name": "topic_builder",
            "location": 29,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexioTopicer.from_default": {
            "name": "from_default",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "default_topic": [
                    "str",
                    "int",
                    "Union[int, str, bool]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "FlexioTopicer.read_topic_by_number": {
            "name": "read_topic_by_number",
            "location": 36,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/InputConfig.py": {
        "InputConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "InputConfig.__exec_for_stdout": {
            "name": "__exec_for_stdout",
            "location": 17,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "InputConfig.__input_flexio": {
            "name": "__input_flexio",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputConfig.__input_user_token": {
            "name": "__input_user_token",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputConfig.add_to_config_handler": {
            "name": "add_to_config_handler",
            "location": 45,
            "return": [
                "str",
                "int",
                "List[str]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/__init__.py": {},
    "flexio-flow-master/src/VersionControlProvider/Flexio/Topic/AttachOrCreate.py": {
        "AttachOrCreate.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "AttachOrCreate.__would_attach_topics": {
            "name": "__would_attach_topics",
            "location": 27,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__list_topics": {
            "name": "__list_topics",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "AttachOrCreate.__sanitize_list_input": {
            "name": "__sanitize_list_input",
            "location": 49,
            "return": [
                "List[Dict]",
                "list",
                "List[int]",
                "Union[List[float], List[int]]",
                "List[float]",
                "Tuple[int, int, int]",
                "str",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[str]",
                    "Tuple[List[Any], List[Any]]",
                    "List[List[Any]]",
                    "Set[str]",
                    "requests.cookies.RequestsCookieJar"
                ]
            }
        },
        "AttachOrCreate.__topics_number": {
            "name": "__topics_number",
            "location": 52,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__get_last_100_records": {
            "name": "__get_last_100_records",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__start_message": {
            "name": "__start_message",
            "location": 82,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__get_topic_with_number": {
            "name": "__get_topic_with_number",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Optional[int]",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "AttachOrCreate.__create": {
            "name": "__create",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__attach": {
            "name": "__attach",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.process": {
            "name": "process",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/Topic/CommonTopic.py": {
        "CommonTopic.print_resume_topic": {
            "name": "print_resume_topic",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "topic": [
                    "VersionControlProvider.Topic.Topic",
                    "str",
                    "int",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/Topic/Create.py": {
        "Create.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "Create.__get_topic_with_number": {
            "name": "__get_topic_with_number",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Optional[int]",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "Create.__start_message": {
            "name": "__start_message",
            "location": 24,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__start_message_topic": {
            "name": "__start_message_topic",
            "location": 32,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__input_topic": {
            "name": "__input_topic",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__post_topic": {
            "name": "__post_topic",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        },
        "Create.__resume_topic": {
            "name": "__resume_topic",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Create.process": {
            "name": "process",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Flexio/Topic/__init__.py": {},
    "flexio-flow-master/src/VersionControlProvider/Github/ConfigGithub.py": {
        "ConfigGithub.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "activate": [
                    "Optional[str]",
                    "Set[str]",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "FrozenSet"
                ],
                "user": [
                    "Optional[str]",
                    "str"
                ],
                "token": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ConfigGithub.user": {
            "name": "user",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGithub.token": {
            "name": "token",
            "location": 17,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGithub.activate": {
            "name": "activate",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigGithub.to_dict": {
            "name": "to_dict",
            "location": 24,
            "return": [
                "str",
                "Callable",
                "Optional[Tuple[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Github.py": {
        "Github.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "Github.with_repo": {
            "name": "with_repo",
            "location": 18,
            "return": [
                "Callable",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ]
            }
        },
        "Github.__auth": {
            "name": "__auth",
            "location": 22,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Callable",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Github.__repo_base_url": {
            "name": "__repo_base_url",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github.__orgs_base_url": {
            "name": "__orgs_base_url",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github.get_users": {
            "name": "get_users",
            "location": 40,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github.get_user": {
            "name": "get_user",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github.create_issue": {
            "name": "create_issue",
            "location": 50,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "VersionControlProvider.Github.Ressources.Milestone.Milestone",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Github.read_issue": {
            "name": "read_issue",
            "location": 54,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "Optional[str]",
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Github.create_milestone": {
            "name": "create_milestone",
            "location": 62,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "milestone": [
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "VersionControlProvider.Github.Ressources.Milestone.Milestone",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Github.get_labels": {
            "name": "get_labels",
            "location": 66,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github.get_open_milestones": {
            "name": "get_open_milestones",
            "location": 70,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github.create_comment": {
            "name": "create_comment",
            "location": 74,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub"
                ],
                "body": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/GithubIssuer.py": {
        "GithubIssuer.create": {
            "name": "create",
            "location": 20,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "default_issue": [
                    "Optional[VersionControlProvider.IssueDefaulIssueDefault]",
                    "str",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "GithubIssuer.attach_or_create": {
            "name": "attach_or_create",
            "location": 25,
            "return": [
                "bool",
                "Optional[str]",
                "dict",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": [],
                "default_issue": [
                    "Optional[VersionControlProvider.IssueDefaulIssueDefault]"
                ],
                "options": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GithubIssuer.message_builder": {
            "name": "message_builder",
            "location": 34,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[VersionControlProvider.Issue.Issue]",
                    "int",
                    "faustypes.Message",
                    "faustypes.tuples.Message"
                ],
                "issue": [
                    "str",
                    "Optional[VersionControlProvider.Issue.Issue]",
                    "int",
                    "faustypes.Message",
                    "faustypes.tuples.Message"
                ]
            }
        },
        "GithubIssuer.issue_builder": {
            "name": "issue_builder",
            "location": 37,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubIssuer.read_issue_by_number": {
            "name": "read_issue_by_number",
            "location": 40,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "GithubIssuer.comment": {
            "name": "comment",
            "location": 46,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "Optional[str]"
                ]
            }
        },
        "GithubIssuer.has_repo": {
            "name": "has_repo",
            "location": 54,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/GithubRequestApiError.py": {
        "GithubRequestApiError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Mapping[str, object]",
                    "requests.Response"
                ],
                "message": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Union[List, Dict]"
                ]
            }
        },
        "GithubRequestApiError.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "int",
                "str",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/InputConfig.py": {
        "InputConfig.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "Core.ConfigHandler.ConfigHandler"
                ]
            }
        },
        "InputConfig.__exec_for_stdout": {
            "name": "__exec_for_stdout",
            "location": 15,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "InputConfig.__input_github": {
            "name": "__input_github",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputConfig.__input_user": {
            "name": "__input_user",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputConfig.__input_token": {
            "name": "__input_token",
            "location": 37,
            "return": [
                "str",
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputConfig.__check_user": {
            "name": "__check_user",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InputConfig.add_to_config_handler": {
            "name": "add_to_config_handler",
            "location": 51,
            "return": [
                "str",
                "int",
                "List[str]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/KeyWordsDialect.py": {
        "KeyWordsDialect.ref": {
            "name": "ref",
            "location": 7,
            "return": [
                "Iterable[str]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "KeyWordsDialect.close": {
            "name": "close",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Message.py": {
        "Message.keywords_dialect": {
            "name": "keywords_dialect",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Repo.py": {
        "Repo.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "bool"
                ],
                "repo": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Repo.to_list": {
            "name": "to_list",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/__init__.py": {},
    "flexio-flow-master/src/VersionControlProvider/Github/Issue/AttachOrCreate.py": {
        "AttachOrCreate.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "repo": [
                    "str",
                    "float",
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "default_issue": [
                    "Optional[List]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "OrderedDict"
                ]
            }
        },
        "AttachOrCreate.__would_attach_issue": {
            "name": "__would_attach_issue",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__number_issue": {
            "name": "__number_issue",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__read_issue": {
            "name": "__read_issue",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AttachOrCreate.__attach": {
            "name": "__attach",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.__create": {
            "name": "__create",
            "location": 66,
            "return": [
                "bool",
                "Mapping[str, str]",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttachOrCreate.process": {
            "name": "process",
            "location": 74,
            "return": [
                "int",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Issue/CommonIssue.py": {
        "CommonIssue.issuer_message": {
            "name": "issuer_message",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CommonIssue.print_resume_issue": {
            "name": "print_resume_issue",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "issue": [
                    "VersionControlProvider.Topic.Topic",
                    "str",
                    "int",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Issue/Create.py": {
        "Create.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_handler": [
                    "FlexioFlow.StateHandler.StateHandler",
                    "Core.ConfigHandler.ConfigHandler"
                ],
                "repo": [
                    "str",
                    "float",
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "default_issue": [
                    "Optional[List]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "options": [
                    "FlexioFlow.Options.Options",
                    "OrderedDict"
                ]
            }
        },
        "Create.__start_message": {
            "name": "__start_message",
            "location": 28,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__start_message_issue": {
            "name": "__start_message_issue",
            "location": 33,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__sanitize_list_input": {
            "name": "__sanitize_list_input",
            "location": 41,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "tuple",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Counter[str]",
                    "Tuple[str]",
                    "ValueError"
                ]
            }
        },
        "Create.__input_assignees": {
            "name": "__input_assignees",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Create.__create_milestone": {
            "name": "__create_milestone",
            "location": 89,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__resume_milestone": {
            "name": "__resume_milestone",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "milestone": [
                    "Dict[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "Create.__input_milestone": {
            "name": "__input_milestone",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Create.__input_labels": {
            "name": "__input_labels",
            "location": 172,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "Callable[[str], bool]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "tuple",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Create.__input_issue": {
            "name": "__input_issue",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.__post_issue": {
            "name": "__post_issue",
            "location": 238,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[int]",
                "List[float]",
                "Dict[str, Dict[str, int]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int"
                ]
            }
        },
        "Create.__resume_issue": {
            "name": "__resume_issue",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Create.__resume_issue_created": {
            "name": "__resume_issue_created",
            "location": 246,
            "return": [
                "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "VersionControlProvider.Github.Ressources.IssueGithub.IssueGithub",
                    "List[List[str]]"
                ]
            }
        },
        "Create.process": {
            "name": "process",
            "location": 250,
            "return": [
                "int",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Issue/__init__.py": {},
    "flexio-flow-master/src/VersionControlProvider/Github/Ressources/IssueGithub.py": {
        "IssueGithub.get_ref": {
            "name": "get_ref",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueGithub.assign": {
            "name": "assign",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int"
                ]
            }
        },
        "IssueGithub.label": {
            "name": "label",
            "location": 19,
            "return": [
                "int",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Set[str]",
                    "Sequence[Any]"
                ]
            }
        },
        "IssueGithub.from_api_dict": {
            "name": "from_api_dict",
            "location": 25,
            "return": [
                "str",
                "int",
                "bool",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "IssueGithub.__dict__": {
            "name": "__dict__",
            "location": 35,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Ressources/Milestone.py": {
        "Milestone.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Milestone.with_number": {
            "name": "with_number",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Milestone.__dict__": {
            "name": "__dict__",
            "location": 24,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flexio-flow-master/src/VersionControlProvider/Github/Ressources/__init__.py": {}
}
{
    "forex-trader-master/config.py": {
        "ConfigSection.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Sequence[int]",
                    "bool",
                    "float"
                ]
            }
        },
        "ConfigSection.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "int"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "forex-trader-master/main.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App.run_server": {
            "name": "run_server",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App.run_django_command": {
            "name": "run_django_command",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forex-trader-master/oanda/api.py": {
        "OandaApi._catch_errors": {
            "name": "_catch_errors",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Type",
                    "Type[serious.utils.Dataclass]",
                    "complex"
                ]
            }
        }
    },
    "forex-trader-master/oanda/config.py": {},
    "forex-trader-master/oanda/models.py": {
        "Candle.from_json": {
            "name": "from_json",
            "location": 60,
            "return": [
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "Units.from_json": {
            "name": "from_json",
            "location": 78,
            "return": [
                "bytes",
                "dict",
                "str",
                "Sequence",
                "Dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "int",
                    "dict",
                    "str",
                    "Type['Declared']"
                ]
            }
        },
        "Position.from_json": {
            "name": "from_json",
            "location": 93,
            "return": [
                "dict",
                "Dict[str, str]",
                "bool",
                "Tuple[str, bytes]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Account.from_json": {
            "name": "from_json",
            "location": 108,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "bytes"
                ]
            }
        },
        "PriceBucket.from_json": {
            "name": "from_json",
            "location": 127,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Callable"
                ]
            }
        },
        "Price.from_json": {
            "name": "from_json",
            "location": 144,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes",
                "List[utils.models.Base]",
                "Callable[[bytes], bytes]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "str",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Price.spread": {
            "name": "spread",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionHeartbeat.from_json": {
            "name": "from_json",
            "location": 167,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "int",
                    "datetime.datetime",
                    "str",
                    "datetime.date",
                    "float"
                ]
            }
        },
        "Transaction.from_json": {
            "name": "from_json",
            "location": 181,
            "return": [
                "Optional[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "TransferFundsTransaction.from_json": {
            "name": "from_json",
            "location": 194,
            "return": [
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "OrderFillTransaction.from_json": {
            "name": "from_json",
            "location": 206,
            "return": [
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "DailyFinancingTransaction.from_json": {
            "name": "from_json",
            "location": 218,
            "return": [
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "forex-trader-master/oanda/prices.py": {},
    "forex-trader-master/oanda/__init__.py": {},
    "forex-trader-master/oanda/tests/factories.py": {
        "instrument_factory": {
            "name": "instrument_factory",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "forex-trader-master/oanda/tests/__init__.py": {},
    "forex-trader-master/rss/feed.py": {},
    "forex-trader-master/rss/models.py": {
        "skip_attrs_for_dataclass": {
            "name": "skip_attrs_for_dataclass",
            "location": 8,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, List[Callable]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "cls": [
                    "List[Tuple[str, str, str]]",
                    "Dict[str, Any]",
                    "str",
                    "Type"
                ]
            }
        },
        "Entry.from_data": {
            "name": "from_data",
            "location": 25,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "Mapping[str, Any]"
                ],
                "data": [
                    "dict",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "Feed.from_data": {
            "name": "from_data",
            "location": 42,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "Mapping[str, Any]"
                ],
                "data": [
                    "dict",
                    "int",
                    "Optional[Union[str, int]]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "forex-trader-master/rss/__init__.py": {},
    "forex-trader-master/server/views.py": {},
    "forex-trader-master/server/__init__.py": {},
    "forex-trader-master/trader/listeners.py": {
        "BalanceListener.__post_init__": {
            "name": "__post_init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceListener.balance_changed": {
            "name": "balance_changed",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_balance": [
                    "Callable[[str], bool]",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "forex-trader-master/trader/models.py": {
        "DefaultModel.save": {
            "name": "save",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forex-trader-master/trader/strategies.py": {
        "Strategy.feed": {
            "name": "feed",
            "location": 35,
            "return": [
                "StrategyDecision"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Strategy.profit": {
            "name": "profit",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MomentumStrategy.get_profits": {
            "name": "get_profits",
            "location": 55,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.float, datetime.datetime]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MomentumStrategy.get_momentum": {
            "name": "get_momentum",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MomentumStrategy.feed": {
            "name": "feed",
            "location": 74,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MomentumStrategy.ready": {
            "name": "ready",
            "location": 107,
            "return": [
                "float",
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forex-trader-master/trader/trader.py": {
        "Trader.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "list"
                ],
                "instrument": [
                    "bytes",
                    "flask_appbuilder.security.sqla.models.User",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Trader.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trader.listen": {
            "name": "listen",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "price": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "forex-trader-master/trader/__init__.py": {},
    "forex-trader-master/trader/migrations/0001_initial.py": {},
    "forex-trader-master/trader/migrations/__init__.py": {},
    "forex-trader-master/trader/tests/test_strategies.py": {
        "TestStrategy.test_health": {
            "name": "test_health",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMomentumStrategy.test_get_momentum": {
            "name": "test_get_momentum",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prices": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "momentum": [
                    "str"
                ]
            }
        }
    },
    "forex-trader-master/trader/tests/__init__.py": {},
    "forex-trader-master/utils/money.py": {
        "Money.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "bool",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "amount": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "Money.__eq__": {
            "name": "__eq__",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[decimal.Decimal, int]",
                    "Union[str, \"Date\"]"
                ]
            }
        },
        "Money.__ne__": {
            "name": "__ne__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Money.__gt__": {
            "name": "__gt__",
            "location": 19,
            "return": [
                "str",
                "bool",
                "float",
                "int",
                "type"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Money.__ge__": {
            "name": "__ge__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Money.__lt__": {
            "name": "__lt__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Money.__le__": {
            "name": "__le__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Money.__sub__": {
            "name": "__sub__",
            "location": 34,
            "return": [
                "Optional[int]",
                "int",
                "dict",
                "str",
                "Generator",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]",
                    "dict"
                ]
            }
        },
        "Money.__add__": {
            "name": "__add__",
            "location": 39,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Money.__neg__": {
            "name": "__neg__",
            "location": 42,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Money.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forex-trader-master/utils/singleton.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 7,
            "return": [],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        }
    },
    "forex-trader-master/utils/__init__.py": {}
}
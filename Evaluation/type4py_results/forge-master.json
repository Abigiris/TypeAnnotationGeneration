{
    "forge-master/setup.py": {},
    "forge-master/docs/conf.py": {},
    "forge-master/forge/_config.py": {
        "get_run_validators": {
            "name": "get_run_validators",
            "location": 4,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "int",
                "list",
                "str"
            ],
            "arguments": {}
        },
        "set_run_validators": {
            "name": "set_run_validators",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [
                    "bool",
                    "Tuple[str, bool]"
                ]
            }
        }
    },
    "forge-master/forge/_counter.py": {
        "Counter.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationOrderMeta.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Iterable[str]"
                ]
            }
        },
        "CreationOrderMeta.__new__": {
            "name": "__new__",
            "location": 27,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcs": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "forge-master/forge/_exceptions.py": {},
    "forge-master/forge/_immutable.py": {
        "asdict": {
            "name": "asdict",
            "location": 6,
            "return": [
                "dict",
                "Set[str]",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "Mapping[Any, Any]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "Set[str]"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 26,
            "return": [
                "Type[Any]",
                "List[Dict[str, Any]]",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "List[float]",
                    "str",
                    "Dict[str, float]",
                    "float"
                ]
            }
        },
        "Immutable.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Immutable.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]",
                    "AbstractSet",
                    "SupportsFloat",
                    "Union[Iterable[int], int]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "Immutable.__getattr__": {
            "name": "__getattr__",
            "location": 66,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "Immutable.__setattr__": {
            "name": "__setattr__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        }
    },
    "forge-master/forge/_marker.py": {
        "MarkerMeta.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "\"Track\"",
                    "bool",
                    "dict"
                ]
            }
        },
        "MarkerMeta.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "mcs": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "namespace": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "empty.ccoerce_native": {
            "name": "ccoerce_native",
            "location": 67,
            "return": [
                "int",
                "float",
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "empty.ccoerce_synthetic": {
            "name": "ccoerce_synthetic",
            "location": 79,
            "return": [
                "int",
                "float",
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "list",
                    "VT",
                    "type"
                ],
                "value": [
                    "Type[T]",
                    "list",
                    "VT",
                    "type"
                ]
            }
        }
    },
    "forge-master/forge/_revision.py": {
        "Mapper.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fsignature": [
                    "float",
                    "str"
                ],
                "callable": [
                    "str",
                    "int"
                ]
            }
        },
        "Mapper.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "bool",
                "List[float]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper.__repr__": {
            "name": "__repr__",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper.get_context": {
            "name": "get_context",
            "location": 150,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "dict",
                    "Pattern[str]",
                    "Dict[str, List[str]]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "Mapper.map_parameters": {
            "name": "map_parameters",
            "location": 163,
            "return": [
                "Type",
                "int",
                "bool",
                "type"
            ],
            "arguments": {
                "from_": [
                    "types.ModuleType"
                ],
                "to_": [
                    "int",
                    "Union[str, dict]",
                    "float",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Revision.__call__": {
            "name": "__call__",
            "location": 294,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "starlette.types.Receive",
                    "Callable",
                    "Union[concurrenfutures.Future, asyncio.futures.Future]",
                    "starlette.types.Send",
                    "int",
                    "float"
                ]
            }
        },
        "Revision.revise": {
            "name": "revise",
            "location": 335,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "compose.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "compose.revise": {
            "name": "revise",
            "location": 365,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "copy.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "copy.revise": {
            "name": "revise",
            "location": 414,
            "return": [
                "set",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "manage.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "manage.revise": {
            "name": "revise",
            "location": 471,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "returns.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "int"
                ]
            }
        },
        "returns.__call__": {
            "name": "__call__",
            "location": 512,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "Callable"
                ]
            }
        },
        "returns.revise": {
            "name": "revise",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "str",
                    "bool",
                    "dict",
                    "Generator",
                    "int"
                ]
            }
        },
        "synthesize.__init__": {
            "name": "__init__",
            "location": 610,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "synthesize.revise": {
            "name": "revise",
            "location": 624,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "str",
                    "int",
                    "Union[Callable, None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "sort._sortkey": {
            "name": "_sortkey",
            "location": 668,
            "return": [
                "str",
                "Optional[int]",
                "List[dict]"
            ],
            "arguments": {
                "param": [
                    "str",
                    "int",
                    "BaseException",
                    "bool"
                ]
            }
        },
        "sort.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sortkey": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "sort.revise": {
            "name": "revise",
            "location": 688,
            "return": [
                "tuple",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "bytes",
                    "list",
                    "forge._signature.FSignature",
                    "slice"
                ]
            }
        },
        "delete.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "multiple": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "raising": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "delete.revise": {
            "name": "revise",
            "location": 730,
            "return": [
                "tuple",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "str",
                    "int",
                    "forge._signature.FSignature"
                ]
            }
        },
        "insert.__init__": {
            "name": "__init__",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "insertion": [
                    "str",
                    "List[str]",
                    "Set[starfish.core.types.Axes]",
                    "asyncio.BaseEventLoop",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "insert.revise": {
            "name": "revise",
            "location": 815,
            "return": [
                "tuple",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "forge._signature.FSignature",
                    "str",
                    "Deque",
                    "Callable[..., bool]",
                    "int",
                    "bytes"
                ]
            }
        },
        "modify.__init__": {
            "name": "__init__",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "bool",
                    "int",
                    "str"
                ],
                "multiple": [
                    "bool",
                    "int",
                    "str"
                ],
                "raising": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "modify.revise": {
            "name": "revise",
            "location": 936,
            "return": [
                "tuple",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "replace.__init__": {
            "name": "__init__",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "bool",
                    "int",
                    "float"
                ],
                "parameter": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "replace.revise": {
            "name": "revise",
            "location": 997,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "ark.types.PrimalGameData",
                    "int"
                ]
            }
        },
        "translocate.__init__": {
            "name": "__init__",
            "location": 1052,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "translocate.revise": {
            "name": "revise",
            "location": 1071,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "bool",
                    "List['cirq.Qid']",
                    "int",
                    "List[float]"
                ]
            }
        },
        "Revision.__call__.inner": {
            "name": "inner",
            "location": 325,
            "return": [
                "mypy.types.Type",
                "types.Resolver"
            ],
            "arguments": {}
        }
    },
    "forge-master/forge/_signature.py": {
        "findparam": {
            "name": "findparam",
            "location": 933,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "parameters": [
                    "type",
                    "List[str]",
                    "dict"
                ],
                "selector": [
                    "T",
                    "List[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_context_parameter": {
            "name": "get_context_parameter",
            "location": 968,
            "return": [
                "str",
                "mode.utils.types.trees.NodeT",
                "Type[T]",
                "float"
            ],
            "arguments": {
                "parameters": [
                    "Tuple[int, int]",
                    "Type"
                ]
            }
        },
        "get_var_keyword_parameter": {
            "name": "get_var_keyword_parameter",
            "location": 983,
            "return": [
                "str",
                "mode.utils.types.trees.NodeT",
                "Exception"
            ],
            "arguments": {
                "parameters": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "get_var_positional_parameter": {
            "name": "get_var_positional_parameter",
            "location": 1000,
            "return": [
                "str",
                "mode.utils.types.trees.NodeT",
                "Exception"
            ],
            "arguments": {
                "parameters": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "Factory.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Factory.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Factory.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FParameter.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "mypy.types.Type",
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ],
                "interface_name": [
                    "Optional[str]",
                    "Union[Callable, Type]",
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Optional[int]"
                ],
                "default": [
                    "str",
                    "bool",
                    "int"
                ],
                "factory": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[Dict[str, str]]",
                    "Optional[List[Any]]",
                    "List[str]",
                    "bool",
                    "Optional[bytes]"
                ],
                "type": [
                    "mypy.types.Type",
                    "str"
                ],
                "converter": [
                    "mypy.types.Type",
                    "str"
                ],
                "validator": [
                    "mypy.types.Type",
                    "str"
                ],
                "bound": [],
                "contextual": [
                    "mypy.types.Type",
                    "str"
                ],
                "metadata": [
                    "mypy.types.Type",
                    "str"
                ]
            }
        },
        "FParameter.__str__": {
            "name": "__str__",
            "location": 216,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FParameter.__repr__": {
            "name": "__repr__",
            "location": 254,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FParameter.apply_default": {
            "name": "apply_default",
            "location": 257,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Union[int, Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Any]",
                    "dict",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Union[bytes, str]"
                ]
            }
        },
        "FParameter.apply_conversion": {
            "name": "apply_conversion",
            "location": 272,
            "return": [
                "str",
                "int",
                "Union[int, Tuple[int, ...]]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "value": []
            }
        },
        "FParameter.apply_validation": {
            "name": "apply_validation",
            "location": 296,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "value": []
            }
        },
        "FParameter.__call__": {
            "name": "__call__",
            "location": 318,
            "return": [
                "int",
                "starlette.types.Send"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "FParameter.native": {
            "name": "native",
            "location": 347,
            "return": [
                "float",
                "str",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FParameter.replace": {
            "name": "replace",
            "location": 362,
            "return": [
                "mypy.types.Type",
                "Optional[Union[str, Any]]",
                "Union[List[str], str]",
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "FParameter.from_native": {
            "name": "from_native",
            "location": 417,
            "return": [
                "List[str]",
                "Tuple[str, Any, Any]",
                "\"TransactionTypeModel\"",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "dict",
                    "str"
                ],
                "native": [
                    "Type[T]",
                    "dict",
                    "str"
                ]
            }
        },
        "FParameter.create_positional_only": {
            "name": "create_positional_only",
            "location": 439,
            "return": [
                "int",
                "Union[str, float]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[\"FieldContainer\"]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[\"FieldContainer\"]"
                ],
                "interface_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[\"FieldContainer\"]"
                ]
            }
        },
        "FParameter.create_positional_or_keyword": {
            "name": "create_positional_or_keyword",
            "location": 481,
            "return": [
                "List[str]",
                "bool",
                "int",
                "Union[str, float]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "interface_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FParameter.create_contextual": {
            "name": "create_contextual",
            "location": 523,
            "return": [
                "List[str]",
                "bool",
                "int",
                "Union[str, float]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Mapping[str, Any]",
                    "Type[T]"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Type[T]"
                ],
                "interface_name": [
                    "str",
                    "Mapping[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "FParameter.create_var_positional": {
            "name": "create_var_positional",
            "location": 553,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "FParameter.create_keyword_only": {
            "name": "create_keyword_only",
            "location": 583,
            "return": [
                "int",
                "Union[str, float]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[\"FieldContainer\"]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[\"FieldContainer\"]"
                ],
                "interface_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[\"FieldContainer\"]"
                ]
            }
        },
        "FParameter.create_var_keyword": {
            "name": "create_var_keyword",
            "location": 625,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "VarPositional.__init__": {
            "name": "__init__",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "VarPositional.fparameter": {
            "name": "fparameter",
            "location": 718,
            "return": [
                "str",
                "bool",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarPositional.__iter__": {
            "name": "__iter__",
            "location": 735,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VarPositional.__call__": {
            "name": "__call__",
            "location": 746,
            "return": [
                "mypy.types.Type",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "VarKeyword.__init__": {
            "name": "__init__",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "VarKeyword.fparameter": {
            "name": "fparameter",
            "location": 836,
            "return": [
                "str",
                "bool",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarKeyword.__getitem__": {
            "name": "__getitem__",
            "location": 852,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "VarKeyword.__iter__": {
            "name": "__iter__",
            "location": 868,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VarKeyword.__len__": {
            "name": "__len__",
            "location": 879,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VarKeyword.__call__": {
            "name": "__call__",
            "location": 887,
            "return": [
                "mypy.types.Type",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FSignature.__init__": {
            "name": "__init__",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "List[T]",
                    "Optional[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "FSignature.__len__": {
            "name": "__len__",
            "location": 1048,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSignature.__getitem__": {
            "name": "__getitem__",
            "location": 1065,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "mypy.types.Type"
                ]
            }
        },
        "FSignature.__str__": {
            "name": "__str__",
            "location": 1145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSignature.__repr__": {
            "name": "__repr__",
            "location": 1181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSignature.from_native": {
            "name": "from_native",
            "location": 1185,
            "return": [
                "dict",
                "List[str]",
                "bool",
                "tuple",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "signature": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "FSignature.from_callable": {
            "name": "from_callable",
            "location": 1210,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Sequence"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "callable": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ]
            }
        },
        "FSignature.native": {
            "name": "native",
            "location": 1225,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSignature.replace": {
            "name": "replace",
            "location": 1235,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[Dict[str, Any]]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSignature.parameters": {
            "name": "parameters",
            "location": 1265,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSignature.validate": {
            "name": "validate",
            "location": 1273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forge-master/forge/_utils.py": {
        "sort_arguments": {
            "name": "sort_arguments",
            "location": 75,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "Dict[Tuple[int, ...], float]"
            ],
            "arguments": {
                "to_": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "named": [
                    "str",
                    "Optional[Iterable]"
                ],
                "unnamed": [
                    "Optional[Iterable]",
                    "str",
                    "Pattern"
                ]
            }
        },
        "callwith": {
            "name": "callwith",
            "location": 149,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[int, Dict[int, Any]]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "to_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "named": [
                    "Optional[Dict]",
                    "bool",
                    "OrderedDict",
                    "dict",
                    "Optional[str]"
                ],
                "unnamed": [
                    "Optional[Dict]",
                    "bool",
                    "OrderedDict",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "repr_callable": {
            "name": "repr_callable",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "callable": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "CallArguments.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallArguments.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallArguments.from_bound_arguments": {
            "name": "from_bound_arguments",
            "location": 34,
            "return": [
                "str",
                "int",
                "type"
            ],
            "arguments": {
                "cls": [],
                "bound": []
            }
        },
        "CallArguments.to_bound_arguments": {
            "name": "to_bound_arguments",
            "location": 49,
            "return": [
                "int",
                "set",
                "bool"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "Callable",
                    "Optional[List[str]]"
                ],
                "partial": [
                    "Callable",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "forge-master/forge/__init__.py": {},
    "forge-master/tests/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "reset_run_validators": {
            "name": "reset_run_validators",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "forge-master/tests/test_config.py": {
        "TestRunValidators.test_get_run_validators": {
            "name": "test_get_run_validators",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunValidators.test_set_run_validators": {
            "name": "test_set_run_validators",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool"
                ]
            }
        },
        "TestRunValidators.test_set_run_validators_bad_param_raises": {
            "name": "test_set_run_validators_bad_param_raises",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forge-master/tests/test_counter.py": {
        "test_counter": {
            "name": "test_counter",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cretion_order_meta": {
            "name": "test_cretion_order_meta",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "forge-master/tests/test_immutable.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestAsDict.test__slots__": {
            "name": "test__slots__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsDict.test__dict__": {
            "name": "test__dict__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutable.test_type": {
            "name": "test_type",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutable.test__init__": {
            "name": "test__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutable.test__eq__": {
            "name": "test__eq__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val1": [
                    "str",
                    "float"
                ],
                "val2": [
                    "str",
                    "float"
                ],
                "eq": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImmutable.test__eq__type": {
            "name": "test__eq__type",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutable.test__getattr__": {
            "name": "test__getattr__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutable.test__setattr__": {
            "name": "test__setattr__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_replace.Klass.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestAsDict.test__slots__.Klass.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestAsDict.test__dict__.Klass.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestImmutable.test__init__.Klass.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImmutable.test__eq__.Klass.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ]
            }
        },
        "TestImmutable.test__eq__type.Klass1.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ]
            }
        },
        "TestImmutable.test__eq__type.Klass2.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "TestImmutable.test__getattr__.Parent.__getattribute__": {
            "name": "__getattribute__",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "float",
                    "bytes",
                    "SupportsInt",
                    "str"
                ]
            }
        }
    },
    "forge-master/tests/test_marker.py": {
        "TestMarkerMeta.make_marker": {
            "name": "make_marker",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkerMeta.test__repr__": {
            "name": "test__repr__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "make_marker": []
            }
        },
        "TestMarkerMeta.test_ins__repr__": {
            "name": "test_ins__repr__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "make_marker": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "TestEmpty.test_cls": {
            "name": "test_cls",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_ccoerce_native": {
            "name": "test_ccoerce_native",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_": [
                    "int"
                ],
                "out_": [
                    "int"
                ]
            }
        },
        "TestEmpty.test_ccoerce_synthetic": {
            "name": "test_ccoerce_synthetic",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_": [
                    "int"
                ],
                "out_": [
                    "int"
                ]
            }
        },
        "TestVoid.test_cls": {
            "name": "test_cls",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "forge-master/tests/test_revision.py": {
        "TestMapper.make_param": {
            "name": "make_param",
            "location": 44,
            "return": [
                "str",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ],
                "kind": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ],
                "default": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "TestMapper.test__repr__": {
            "name": "test__repr__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapper.test_get_context": {
            "name": "test_get_context",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "has_context": [
                    "Dict[str, object]"
                ]
            }
        },
        "TestMapper.test__call__params_mapped": {
            "name": "test__call__params_mapped",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "from_kind": [
                    "int",
                    "Dict[str, str]"
                ],
                "to_kind": [
                    "Type[T]",
                    "str",
                    "Dict[str, Any]"
                ],
                "vary_name": [
                    "str"
                ]
            }
        },
        "TestMapper.test__call__bound_injected": {
            "name": "test__call__bound_injected",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapper.test__call__vpo_param_mapped": {
            "name": "test__call__vpo_param_mapped",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vary_name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "TestMapper.test__call__vkw_param_mapped": {
            "name": "test__call__vkw_param_mapped",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vary_name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "TestMapper.test__call__defaults_applied": {
            "name": "test__call__defaults_applied",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "from_kind": [
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestMapper.test__call__binding_error_raises_named": {
            "name": "test__call__binding_error_raises_named",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapper.test_map_parameters_to_non_var_parameter": {
            "name": "test_map_parameters_to_non_var_parameter",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "from_name": [
                    "str",
                    "Tuple[type]",
                    "Optional[int]",
                    "bytes"
                ],
                "from_kind": [
                    "str",
                    "Tuple[type]",
                    "Optional[int]",
                    "bytes"
                ],
                "from_default": [
                    "str",
                    "Tuple[type]",
                    "Optional[int]",
                    "bytes"
                ],
                "to_name": [
                    "str",
                    "Union[int, List[int]]",
                    "Optional[str]",
                    "dict"
                ],
                "to_kind": [
                    "str",
                    "Union[int, List[int]]",
                    "Optional[str]",
                    "dict"
                ],
                "to_default": [
                    "str",
                    "Tuple[type]",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "TestMapper.test_map_parameters_to_var_positional": {
            "name": "test_map_parameters_to_var_positional",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "from_kind": []
            }
        },
        "TestMapper.test_map_parameters_to_var_keyword": {
            "name": "test_map_parameters_to_var_keyword",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "from_kind": []
            }
        },
        "TestMapper.test_map_parameters_to_empty": {
            "name": "test_map_parameters_to_empty",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "from_kind": [
                    "Callable"
                ]
            }
        },
        "TestMapper.test_map_parameters_from_hidden": {
            "name": "test_map_parameters_from_hidden",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "to_kind": [
                    "bytes",
                    "str",
                    "Hashable",
                    "int"
                ]
            }
        },
        "TestRevision.test__call__not_existing": {
            "name": "test__call__not_existing",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "bool",
                    "Collection[T]",
                    "Container[T]"
                ],
                "as_coroutine": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestRevision.test__call__existing": {
            "name": "test__call__existing",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRevision.test_revise": {
            "name": "test_revise",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRevision.test__call__validates": {
            "name": "test__call__validates",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_revise": {
            "name": "test_revise",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_revise_none": {
            "name": "test_revise_none",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_non_revision_raises": {
            "name": "test_non_revision_raises",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopy.test_revise": {
            "name": "test_revise",
            "location": 616,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "asyncio.Lock",
                    "str",
                    "bool"
                ],
                "exclude": [
                    "asyncio.Lock",
                    "str",
                    "bool"
                ],
                "expected": [
                    "Callable[[], None]"
                ]
            }
        },
        "TestManage.test_revise": {
            "name": "test_revise",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReturns.test_revise": {
            "name": "test_revise",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReturns.test__call__": {
            "name": "test__call__",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "str",
                    "int"
                ]
            }
        },
        "TestReturns.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 695,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthesize.test_sign": {
            "name": "test_sign",
            "location": 708,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthesize.test_revise_args_order_preserved": {
            "name": "test_revise_args_order_preserved",
            "location": 714,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthesize.test_revise_kwargs_reordered": {
            "name": "test_revise_kwargs_reordered",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthesize.test_revise_args_precede_kwargs": {
            "name": "test_revise_args_precede_kwargs",
            "location": 732,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthesize.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 741,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSort.test_revise": {
            "name": "test_revise",
            "location": 797,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_": [
                    "int",
                    "str",
                    "Union[str, List[str]]"
                ],
                "sortkey": [
                    "int",
                    "float"
                ],
                "expected": [
                    "bool",
                    "Callable",
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestDelete.test_revision": {
            "name": "test_revision",
            "location": 871,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str",
                    "bool"
                ],
                "multiple": [
                    "str",
                    "bool"
                ],
                "raising": [
                    "str",
                    "bool"
                ],
                "in_": [],
                "out_": [
                    "Sequence[str]",
                    "int",
                    "asyncio.AbstractEventLoop",
                    "Callable"
                ]
            }
        },
        "TestDelete.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 889,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInsert.test_revise": {
            "name": "test_revise",
            "location": 971,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "insertion": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "index": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "before": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "after": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "in_": [
                    "List[float]"
                ],
                "out_": [
                    "int",
                    "asyncio.AbstractEventLoop",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "TestInsert.test_combo_raises": {
            "name": "test_combo_raises",
            "location": 993,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "TestInsert.test_no_position_raises": {
            "name": "test_no_position_raises",
            "location": 1003,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInsert.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 1012,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModify.test_revise": {
            "name": "test_revise",
            "location": 1038,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str"
                ]
            }
        },
        "TestModify.test_revise_void_cls": {
            "name": "test_revise_void_cls",
            "location": 1050,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModify.test_revise_multiple": {
            "name": "test_revise_multiple",
            "location": 1062,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multiple": [
                    "asyncio.StreamWriter",
                    "str",
                    "asyncio.StreamReader",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestModify.test_revise_no_match": {
            "name": "test_revise_no_match",
            "location": 1078,
            "return": [],
            "arguments": {
                "self": [],
                "raising": []
            }
        },
        "TestModify.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 1094,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModify.test_accepted_params": {
            "name": "test_accepted_params",
            "location": 1106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplace.test_revise": {
            "name": "test_revise",
            "location": 1124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "asyncio.StreamReader",
                    "str"
                ]
            }
        },
        "TestReplace.test_no_match_raises": {
            "name": "test_no_match_raises",
            "location": 1137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplace.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 1147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslocate.test_move": {
            "name": "test_move",
            "location": 1161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslocate.test_revise": {
            "name": "test_revise",
            "location": 1216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "int"
                ],
                "index": [
                    "int"
                ],
                "before": [
                    "int"
                ],
                "after": [
                    "int"
                ],
                "in_": [
                    "List[str]",
                    "tuple",
                    "Optional[float]"
                ]
            }
        },
        "TestTranslocate.test_revise_selector_no_match_raises": {
            "name": "test_revise_selector_no_match_raises",
            "location": 1239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslocate.test_revise_before_no_match_raises": {
            "name": "test_revise_before_no_match_raises",
            "location": 1249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslocate.test_revise_after_no_match_raises": {
            "name": "test_revise_after_no_match_raises",
            "location": 1259,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslocate.test_combo_raises": {
            "name": "test_combo_raises",
            "location": 1274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "TestTranslocate.test_no_position_raises": {
            "name": "test_no_position_raises",
            "location": 1284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranslocate.test_revise_no_validation": {
            "name": "test_revise_no_validation",
            "location": 1293,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapper.test__call__binding_error_raises_named.func": {
            "name": "func",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "forge-master/tests/test_signature.py": {
        "test_findparam": {
            "name": "test_findparam",
            "location": 1337,
            "return": [
                ""
            ],
            "arguments": {
                "kls": [
                    "Callable[[KT, VT], bool]",
                    "Optional[str]",
                    "str"
                ],
                "selector": [
                    "str",
                    "bool",
                    "MutableMapping",
                    "Sequence[Sequence[str]]"
                ],
                "expected_name": [
                    "str"
                ]
            }
        },
        "test_get_context_parameter": {
            "name": "test_get_context_parameter",
            "location": 1361,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "Union[str, bytes]"
                ],
                "expected": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "test_get_var_positional_parameter": {
            "name": "test_get_var_positional_parameter",
            "location": 1393,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "Union[str, bytes]"
                ],
                "expected": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "test_get_var_keyword_parameter": {
            "name": "test_get_var_keyword_parameter",
            "location": 1407,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "Union[str, bytes]"
                ],
                "expected": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestFactory.test_cls": {
            "name": "test_cls",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactory.test__repr__": {
            "name": "test__repr__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactory.test__call__": {
            "name": "test__call__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test_cls_constants": {
            "name": "test_cls_constants",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test__init__default_or_factory": {
            "name": "test__init__default_or_factory",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "default": [
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ],
                "factory": [
                    "Optional[str]",
                    "str"
                ],
                "result": [
                    "bytes",
                    "bool",
                    "int",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestFParameter.test_name_validation": {
            "name": "test_name_validation",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Callable",
                    "Sequence[Any]",
                    "float",
                    "Callable[..., None]",
                    "list"
                ]
            }
        },
        "TestFParameter.test__init__bound_and_default": {
            "name": "test__init__bound_and_default",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "extras": [
                    "str"
                ],
                "raises": []
            }
        },
        "TestFParameter.test__str__and__repr__": {
            "name": "test__str__and__repr__",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kwargs": [],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "TestFParameter.test_apply_default": {
            "name": "test_apply_default",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_val": [
                    "str",
                    "List[str]",
                    "int",
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]"
                ],
                "out_val": [
                    "str",
                    "List[str]",
                    "int",
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]"
                ]
            }
        },
        "TestFParameter.test_apply_conversion": {
            "name": "test_apply_conversion",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Optional[str]"
                ],
                "ctx": [
                    "str",
                    "dict",
                    "mypy.types.CallableType",
                    "int",
                    "Union[int, str, None]",
                    "Dict[str, str]",
                    "List[Tuple[int, int]]"
                ],
                "name": [
                    "mypy.types.Type",
                    "IO",
                    "Optional[Callable]"
                ],
                "value": [
                    "str",
                    "dict",
                    "mypy.types.CallableType",
                    "int",
                    "Union[int, str, None]",
                    "Dict[str, str]",
                    "List[Tuple[int, int]]"
                ],
                "to_out": [
                    "str",
                    "dict",
                    "mypy.types.CallableType",
                    "int",
                    "Union[int, str, None]",
                    "Dict[str, str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "TestFParameter.test_apply_validation": {
            "name": "test_apply_validation",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "has_validation": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestFParameter.test_apply_validation_multiple": {
            "name": "test_apply_validation_multiple",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test__call__": {
            "name": "test__call__",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_factory": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestFParameter.test_replace": {
            "name": "test_replace",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rkey": [],
                "rval": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestFParameter.test_native": {
            "name": "test_native",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test_native_wo_names_raises": {
            "name": "test_native_wo_names_raises",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test_defaults": {
            "name": "test_defaults",
            "location": 473,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test_from_native": {
            "name": "test_from_native",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Optional[Dict[Hashable, Any]]"
                ],
                "default": [
                    "Mapping[Tuple[str, str], Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestFParameter.test_create_positional_only": {
            "name": "test_create_positional_only",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_in": [
                    "int",
                    "Iterable[Any]"
                ],
                "extra_out": []
            }
        },
        "TestFParameter.test_create_positional_or_keyword": {
            "name": "test_create_positional_or_keyword",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_in": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "extra_out": []
            }
        },
        "TestFParameter.test_create_contextual": {
            "name": "test_create_contextual",
            "location": 625,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_in": [
                    "int",
                    "Iterable[Any]"
                ],
                "extra_out": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestFParameter.test_create_var_positional": {
            "name": "test_create_var_positional",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFParameter.test_create_keyword_only": {
            "name": "test_create_keyword_only",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_in": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "extra_out": []
            }
        },
        "TestFParameter.test_create_var_keyword": {
            "name": "test_create_var_keyword",
            "location": 687,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarPositional.assert_iterable_and_get_fparam": {
            "name": "assert_iterable_and_get_fparam",
            "location": 709,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "varp": [
                    "Sequence[str]",
                    "str",
                    "int",
                    "set",
                    "bool"
                ]
            }
        },
        "TestVarPositional.test_defaults": {
            "name": "test_defaults",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarPositional.test_new": {
            "name": "test_new",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarPositional.test__call__": {
            "name": "test__call__",
            "location": 751,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarKeyword.assert_mapping_and_get_fparam": {
            "name": "assert_mapping_and_get_fparam",
            "location": 773,
            "return": [
                "int",
                "str",
                "bytes",
                "IO[Any]"
            ],
            "arguments": {
                "vark": [
                    "dict",
                    "Dict[str, \"Outcome\"]",
                    "Dict[str, Any]",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "TestVarKeyword.test_defaults": {
            "name": "test_defaults",
            "location": 782,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarKeyword.test_new": {
            "name": "test_new",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarKeyword.test__call__": {
            "name": "test__call__",
            "location": 816,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarKeyword.test_mapping": {
            "name": "test_mapping",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameterConvenience.test_constructors": {
            "name": "test_constructors",
            "location": 861,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestParameterConvenience.test_self": {
            "name": "test_self",
            "location": 867,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameterConvenience.test_cls": {
            "name": "test_cls",
            "location": 878,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameterConvenience.test_args": {
            "name": "test_args",
            "location": 889,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParameterConvenience.test_kwargs": {
            "name": "test_kwargs",
            "location": 899,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_fsignature": {
            "name": "test_fsignature",
            "location": 911,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test__getitem__": {
            "name": "test__getitem__",
            "location": 978,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "in_": [
                    "bool",
                    "List[str]"
                ],
                "key": [
                    "bool",
                    "List[str]"
                ],
                "out_": [
                    "Callable"
                ]
            }
        },
        "TestFSignature.test__getitem__slice": {
            "name": "test__getitem__slice",
            "location": 998,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float",
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "end": [
                    "float",
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "expected": [
                    "float",
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "TestFSignature.test__len__": {
            "name": "test__len__",
            "location": 1006,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test__str__and__repr__": {
            "name": "test__str__and__repr__",
            "location": 1047,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str"
                ],
                "return_annotation": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestFSignature.test_native": {
            "name": "test_native",
            "location": 1061,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bound": [
                    "Optional[str]",
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "TestFSignature.test_from_native": {
            "name": "test_from_native",
            "location": 1082,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "return_annotation": [
                    "bool",
                    "Optional[dict]",
                    "int"
                ]
            }
        },
        "TestFSignature.test_from_callable": {
            "name": "test_from_callable",
            "location": 1106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_replace": {
            "name": "test_replace",
            "location": 1145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_": [
                    "str",
                    "bool",
                    "int",
                    "Set[str]",
                    "Union[str, Iterable[str]]",
                    "Optional[Tuple[int, int]]"
                ],
                "kwargs": [],
                "out_": [
                    "str",
                    "bool",
                    "int",
                    "Set[str]",
                    "Union[str, Iterable[str]]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "TestFSignature.test_validate_non_fparameter_raises": {
            "name": "test_validate_non_fparameter_raises",
            "location": 1152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_unnamed_fparameter_raises": {
            "name": "test_validate_unnamed_fparameter_raises",
            "location": 1164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_contextual": {
            "name": "test_validate_contextual",
            "location": 1175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_late_contextual_fparam_raises": {
            "name": "test_validate_late_contextual_fparam_raises",
            "location": 1182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_multiple_interface_name_raises": {
            "name": "test_validate_multiple_interface_name_raises",
            "location": 1195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_multiple_name_raises": {
            "name": "test_validate_multiple_name_raises",
            "location": 1208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_multiple_var_positional_fparameters_raises": {
            "name": "test_validate_multiple_var_positional_fparameters_raises",
            "location": 1221,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_multiple_var_keyword_fparameters_raises": {
            "name": "test_validate_multiple_var_keyword_fparameters_raises",
            "location": 1239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_out_of_order_fparameters_raises": {
            "name": "test_validate_out_of_order_fparameters_raises",
            "location": 1257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFSignature.test_validate_non_default_follows_default_raises": {
            "name": "test_validate_non_default_follows_default_raises",
            "location": 1277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "constructor": []
            }
        },
        "TestFSignature.test_validate_default_kw_only_follows_non_default_kw_only": {
            "name": "test_validate_default_kw_only_follows_non_default_kw_only",
            "location": 1294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignatureConvenience.test_constructors": {
            "name": "test_constructors",
            "location": 1310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestFactory.test__repr__.func": {
            "name": "func",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestFParameter.test_apply_validation.validator": {
            "name": "validator",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "TestFParameter.test_apply_validation_multiple.validator": {
            "name": "validator",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestFSignature.test_from_callable.func": {
            "name": "func",
            "location": 1110,
            "return": [
                "float",
                "List[str]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "forge-master/tests/test_utils.py": {
        "test_repr_callable": {
            "name": "test_repr_callable",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "int"
                ]
            }
        },
        "test_callwith": {
            "name": "test_callwith",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestCallArguments.test_from_bound_arguments": {
            "name": "test_from_bound_arguments",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCallArguments.test_to_bound_arguments": {
            "name": "test_to_bound_arguments",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "call_args": [
                    "list"
                ],
                "partial": [
                    "list",
                    "dict",
                    "Tuple[Dict[str, str], List[str]]"
                ],
                "incomplete": [
                    "Dict[str, Any]",
                    "Callable",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestCallArguments.test__repr__": {
            "name": "test__repr__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": [],
                "expected": [
                    "Optional[\"Game\"]"
                ]
            }
        },
        "TestSortArguments.test_sorting": {
            "name": "test_sorting",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str",
                    "bytes",
                    "int"
                ],
                "named": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[str]"
                ],
                "unnamed": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestSortArguments.test_sorting_with_defaults": {
            "name": "test_sorting_with_defaults",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "TestSortArguments.test_no_argument_for_non_default_param_raises": {
            "name": "test_no_argument_for_non_default_param_raises",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestSortArguments.test_extra_to_sig_without_vko_raises": {
            "name": "test_extra_to_sig_without_vko_raises",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortArguments.test_unnamaed_to_sig_without_vpo_raises": {
            "name": "test_unnamaed_to_sig_without_vpo_raises",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortArguments.test_callable": {
            "name": "test_callable",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCallArguments.test_from_bound_arguments.func": {
            "name": "func",
            "location": 26,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestCallArguments.test_to_bound_arguments.func": {
            "name": "func",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_repr_callable.Dummy.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "test_repr_callable.Dummy.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "forge-master/tests/test__module__.py": {
        "test_namespace": {
            "name": "test_namespace",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "forge-master/tests/__init__.py": {}
}
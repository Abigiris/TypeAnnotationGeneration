{
    "foxi-master/setup.py": {},
    "foxi-master/foxi/ast.py": {
        "Expression.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.free_variables": {
            "name": "free_variables",
            "location": 43,
            "return": [
                "typing.Set[sympy_types.Symbol]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.eval": {
            "name": "eval",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "zeros": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[List[Callable]]"
                ],
                "nonzeros": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "Expression._eval": {
            "name": "_eval",
            "location": 64,
            "return": [
                "'Algebraic'"
            ],
            "arguments": {
                "self": [],
                "zeros": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "nonzeros": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Equation.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "bool",
                    "float"
                ],
                "rhs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Equation.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equation.free_variables": {
            "name": "free_variables",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Equation._eval": {
            "name": "_eval",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "zeros": [
                    "List['cirq.Qid']",
                    "Callable",
                    "int",
                    "str"
                ],
                "nonzeros": [
                    "List['cirq.Qid']",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "Algebraic.__eq__": {
            "name": "__eq__",
            "location": 144,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Algebraic.is_zero": {
            "name": "is_zero",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebraic.is_one": {
            "name": "is_one",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebraic.is_constant": {
            "name": "is_constant",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebraic.__neg__": {
            "name": "__neg__",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebraic.neg": {
            "name": "neg",
            "location": 163,
            "return": [
                "'Algebraic'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algebraic.__add__": {
            "name": "__add__",
            "location": 166,
            "return": [
                "Optional[str]",
                "str",
                "Optional[bytes]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Algebraic.add": {
            "name": "add",
            "location": 176,
            "return": [
                "'Algebraic'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "Algebraic.__sub__": {
            "name": "__sub__",
            "location": 179,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]"
                ]
            }
        },
        "Algebraic.__mul__": {
            "name": "__mul__",
            "location": 188,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Union[int, float]"
                ]
            }
        },
        "Algebraic.mul": {
            "name": "mul",
            "location": 201,
            "return": [
                "'Algebraic'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Algebraic.__truediv__": {
            "name": "__truediv__",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Union[int, float]"
                ]
            }
        },
        "Algebraic.div": {
            "name": "div",
            "location": 214,
            "return": [
                "'Algebraic'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Polynomial.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "int",
                    "Type"
                ]
            }
        },
        "Polynomial.__eq__": {
            "name": "__eq__",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Polynomial.__repr__": {
            "name": "__repr__",
            "location": 237,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.factors": {
            "name": "factors",
            "location": 244,
            "return": [
                "Union[cirq.value.Symbol, float]",
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.free_variables": {
            "name": "free_variables",
            "location": 255,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.is_zero": {
            "name": "is_zero",
            "location": 259,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.is_one": {
            "name": "is_one",
            "location": 263,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.is_constant": {
            "name": "is_constant",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.neg": {
            "name": "neg",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polynomial.add": {
            "name": "add",
            "location": 273,
            "return": [
                "str",
                "float",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Polynomial.mul": {
            "name": "mul",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Polynomial.div": {
            "name": "div",
            "location": 301,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Polynomial._eval": {
            "name": "_eval",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "zeros": [
                    "str",
                    "int",
                    "abc.AbstractStreamWriter",
                    "bool"
                ],
                "nonzeros": [
                    "Callable",
                    "Set[sympy_types.SympyExpr]",
                    "bool",
                    "str"
                ]
            }
        },
        "SMF0.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "bool",
                    "float"
                ],
                "rhs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SMF0.__eq__": {
            "name": "__eq__",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SMF0.__repr__": {
            "name": "__repr__",
            "location": 363,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMF0.free_variables": {
            "name": "free_variables",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SMF0.neg": {
            "name": "neg",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMF0.add": {
            "name": "add",
            "location": 373,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[float, float, float, float]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SMF0.mul": {
            "name": "mul",
            "location": 404,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SMF0.div": {
            "name": "div",
            "location": 421,
            "return": [
                "bool",
                "Optional[bool]",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "SMF0._eval": {
            "name": "_eval",
            "location": 443,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "zeros": [
                    "float",
                    "str"
                ],
                "nonzeros": [
                    "float",
                    "str"
                ]
            }
        },
        "SMFN.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "int",
                    "bool",
                    "float"
                ],
                "P": [
                    "int",
                    "bool",
                    "float"
                ],
                "Q": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SMFN.make": {
            "name": "make",
            "location": 474,
            "return": [
                "float",
                "T",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "cond": [
                    "Callable",
                    "bytes"
                ],
                "P": [
                    "Callable"
                ],
                "Q": [
                    "float",
                    "bytes"
                ]
            }
        },
        "SMFN.__eq__": {
            "name": "__eq__",
            "location": 521,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SMFN.__repr__": {
            "name": "__repr__",
            "location": 529,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMFN.free_variables": {
            "name": "free_variables",
            "location": 534,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SMFN.neg": {
            "name": "neg",
            "location": 541,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMFN.add": {
            "name": "add",
            "location": 544,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SMFN.mul": {
            "name": "mul",
            "location": 556,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "SMFN.div": {
            "name": "div",
            "location": 570,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "SMFN._eval": {
            "name": "_eval",
            "location": 583,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "zeros": [
                    "float",
                    "eth.abc.MessageAPI"
                ],
                "nonzeros": [
                    "float"
                ]
            }
        }
    },
    "foxi-master/foxi/debug.py": {
        "set_level": {
            "name": "set_level",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "bool",
                    "float"
                ]
            }
        },
        "printf": {
            "name": "printf",
            "location": 49,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "level": [
                    "List[str]",
                    "float",
                    "str"
                ],
                "fmt": [
                    "str"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "Union[str, List]",
                    "Dict[str, str]"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "Union[str, List]"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str"
                ]
            }
        },
        "indent.__enter__": {
            "name": "__enter__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "indent.__exit__": {
            "name": "__exit__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "foxi-master/foxi/parser.py": {
        "_skip_spaces": {
            "name": "_skip_spaces",
            "location": 84,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "expr": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "i": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_read_symbol": {
            "name": "_read_symbol",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "expr": [
                    "Type[object]",
                    "bool",
                    "str",
                    "List[str]",
                    "set"
                ],
                "i": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "_read_number": {
            "name": "_read_number",
            "location": 108,
            "return": [],
            "arguments": {
                "expr": [
                    "int",
                    "bool"
                ],
                "i": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_read_token": {
            "name": "_read_token",
            "location": 124,
            "return": [
                "int",
                "float",
                "Dict[int, int]",
                "Tuple[int]",
                "Optional[int]"
            ],
            "arguments": {
                "expr": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "i": [
                    "int",
                    "Optional[int]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 145,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Tuple[str]]"
                ]
            }
        },
        "_pop_operator": {
            "name": "_pop_operator",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "expr_stack": [
                    "int",
                    "Callable",
                    "Sequence[object]",
                    "Optional[str]",
                    "bool"
                ],
                "op_stack": [
                    "str",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "_pop_until_lower_precedence": {
            "name": "_pop_until_lower_precedence",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "expr_stack": [
                    "str",
                    "Optional[Type[BaseException]]"
                ],
                "op_stack": [],
                "operator": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_pop_until_left_paren": {
            "name": "_pop_until_left_paren",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "expr_stack": [
                    "str",
                    "Optional[Type[BaseException]]"
                ],
                "op_stack": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 195,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "ParenError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Operator.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Operator.__lt__": {
            "name": "__lt__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        }
    },
    "foxi-master/foxi/sympy_types.py": {
        "sympify": {
            "name": "sympify",
            "location": 73,
            "return": [
                "SympyExpr"
            ],
            "arguments": {
                "term": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SympyExpr.__neg__": {
            "name": "__neg__",
            "location": 21,
            "return": [
                "'SympyExpr'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SympyExpr.__add__": {
            "name": "__add__",
            "location": 24,
            "return": [
                "'SympyExpr'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "SympyExpr.__mul__": {
            "name": "__mul__",
            "location": 27,
            "return": [
                "'SympyExpr'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "SympyExpr.__truediv__": {
            "name": "__truediv__",
            "location": 30,
            "return": [
                "'SympyExpr'"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "SympyExpr.factor": {
            "name": "factor",
            "location": 33,
            "return": [
                "'SympyExpr'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SympyExpr.subs": {
            "name": "subs",
            "location": 36,
            "return": [
                "'SympyExpr'"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SympyExpr.as_terms": {
            "name": "as_terms",
            "location": 41,
            "return": [
                "typing.Tuple[typing.Any, typing.Sequence['SympyExpr']]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SympyExpr.free_symbols": {
            "name": "free_symbols",
            "location": 45,
            "return": [
                "typing.Set['Symbol']"
            ],
            "arguments": {
                "self": []
            }
        },
        "SympyExpr.is_number": {
            "name": "is_number",
            "location": 49,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SympyExpr.is_zero": {
            "name": "is_zero",
            "location": 53,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "Symbol.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "foxi-master/foxi/__init__.py": {},
    "foxi-master/foxi/__main__.py": {
        "_prove": {
            "name": "_prove",
            "location": 24,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[DefaultDict[str, Any]]",
                "Optional[int]",
                "Optional[Type]"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "_test_expr": {
            "name": "_test_expr",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "_loop_files": {
            "name": "_loop_files",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "files": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "IO[str]"
                ],
                "test": [
                    "bool",
                    "list",
                    "Optional[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "_loop_input": {
            "name": "_loop_input",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
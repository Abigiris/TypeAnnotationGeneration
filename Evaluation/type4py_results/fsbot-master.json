{
    "fsbot-master/bot_config.py.dist.py": {},
    "fsbot-master/main.py": {},
    "fsbot-master/setup.py": {},
    "fsbot-master/fsbot/__init__.py": {},
    "fsbot-master/fsbot/commands/birthday.py": {
        "Birthday.usage": {
            "name": "usage",
            "location": 9,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Birthday.can_handle": {
            "name": "can_handle",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        }
    },
    "fsbot-master/fsbot/commands/dms.py": {
        "Dms.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "Dms.usage": {
            "name": "usage",
            "location": 16,
            "return": [
                "str",
                "bool",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dms.can_handle": {
            "name": "can_handle",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        },
        "Dms._create_dmsclient_config_if_missing": {
            "name": "_create_dmsclient_config_if_missing",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]",
                    "tuple"
                ]
            }
        }
    },
    "fsbot-master/fsbot/commands/mensa.py": {
        "monkeypatch_kafka": {
            "name": "monkeypatch_kafka",
            "location": 166,
            "return": [],
            "arguments": {
                "poll": [],
                "trigger": []
            }
        },
        "send_kafka_message": {
            "name": "send_kafka_message",
            "location": 183,
            "return": [],
            "arguments": {
                "options": [],
                "botname": []
            }
        },
        "Food.usage": {
            "name": "usage",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Food.can_handle": {
            "name": "can_handle",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "Etm.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "pollmanager": []
            }
        },
        "Etm.usage": {
            "name": "usage",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Etm.can_handle": {
            "name": "can_handle",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "Etm._normalizeOption": {
            "name": "_normalizeOption",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": [],
                "option": []
            }
        }
    },
    "fsbot-master/fsbot/commands/__init__.py": {},
    "fsbot-master/fsbot/utils/meals.py": {},
    "fsbot-master/fsbot/utils/__init__.py": {},
    "fsbot-master/tests/utils.py": {
        "_import_mock": {
            "name": "_import_mock",
            "location": 11,
            "return": [
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "mock_modules": [
                    "Dict[str, Any]",
                    "bool",
                    "mock.Mock",
                    "dict"
                ]
            }
        },
        "patch_module": {
            "name": "patch_module",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "reloadmodule": [],
                "mock_modules": [
                    "Dict[str, Any]"
                ]
            }
        },
        "random_string": {
            "name": "random_string",
            "location": 34,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "len_": [
                    "int"
                ]
            }
        },
        "_import_mock._tmp": {
            "name": "_tmp",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "fsbot-master/tests/__init__.py": {},
    "fsbot-master/tests/integration/conftest.py": {
        "setup_admin": {
            "name": "setup_admin",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "event_loop": {
            "name": "event_loop",
            "location": 40,
            "return": [
                "typing.Iterable[asyncio.AbstractEventLoop]"
            ],
            "arguments": {}
        },
        "admin_user": {
            "name": "admin_user",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "fsbot-master/tests/integration/__init__.py": {},
    "fsbot-master/tests/integration/commands/test_birthday.py": {},
    "fsbot-master/tests/integration/commands/__init__.py": {},
    "fsbot-master/tests/unit/test_utils.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mock_get_meals": {
            "name": "mock_get_meals",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "list",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "mock_get_meals._mock": {
            "name": "_mock",
            "location": 24,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "fsbot-master/tests/unit/__init__.py": {},
    "fsbot-master/tests/unit/commands/test_mensa.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_pollmanger": {
            "name": "get_pollmanger",
            "location": 27,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "poll": [
                    "unittesmock.MagicMock",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_poll": {
            "name": "get_poll",
            "location": 34,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "days": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.BlockSpecification"
                ]
            }
        }
    }
}
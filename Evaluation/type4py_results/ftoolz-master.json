{
    "ftoolz-master/setup.py": {
        "BinaryDistribution.has_ext_modules": {
            "name": "has_ext_modules",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/ftoolz/dicttoolz.py": {
        "map_val": {
            "name": "map_val",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "List[Optional[str]]",
                "Dict[str, dict]",
                "Iterable[int]",
                "float",
                "str",
                "Tuple[Tuple[int, int], Tuple[int, int]]"
            ],
            "arguments": {
                "d": [
                    "ftoolz.Map[K, Any]",
                    "Callable",
                    "str"
                ],
                "key": [
                    "ftoolz.Map[K, Any]",
                    "Callable",
                    "str"
                ],
                "f": [
                    "ftoolz.Map[K, Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "swap": {
            "name": "swap",
            "location": 26,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "d": [
                    "str",
                    "dict",
                    "Sequence[str]"
                ],
                "key1": [
                    "str",
                    "dict",
                    "Sequence[str]"
                ],
                "key2": [
                    "str",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "swap_values": {
            "name": "swap_values",
            "location": 43,
            "return": [
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "key1": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "key2": [
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/itertoolz.py": {
        "associate": {
            "name": "associate",
            "location": 22,
            "return": [
                "bool",
                "int",
                "Tuple[str, str]",
                "Optional[int]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "values": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "associate_to": {
            "name": "associate_to",
            "location": 52,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "tuple",
                "Set[str]",
                "Dict[str, Any]",
                "List[Mapping[str, str]]",
                "Dict[Any, str]",
                "Dict[str, float]"
            ],
            "arguments": {
                "key": [
                    "Sequence[Any]",
                    "int",
                    "dict",
                    "Callable"
                ],
                "value": [
                    "Sequence[Any]",
                    "int",
                    "dict",
                    "Callable"
                ],
                "values": [
                    "Sequence[Any]",
                    "int",
                    "dict",
                    "Callable"
                ]
            }
        },
        "collect": {
            "name": "collect",
            "location": 87,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "items": [
                    "T",
                    "str",
                    "Pattern",
                    "Union[int, slice]",
                    "List[str]"
                ]
            }
        },
        "empty": {
            "name": "empty",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "it": [
                    "List[\"SqlFile\"]"
                ]
            }
        },
        "enumerate_with_final": {
            "name": "enumerate_with_final",
            "location": 134,
            "return": [
                "typing.Iterable[typing.Tuple[E, builtins.bool, builtins.int]]"
            ],
            "arguments": {
                "it": [
                    "bool",
                    "List[List[str]]",
                    "Sequence[T]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "filter_not_none": {
            "name": "filter_not_none",
            "location": 153,
            "return": [
                "typing.Iterable[E]"
            ],
            "arguments": {
                "it": [
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 172,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pred": [
                    "Callable",
                    "float"
                ],
                "it": [
                    "Callable",
                    "float"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 195,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "ftoolz.Seq[E]",
                    "list",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[int]",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "fold_right": {
            "name": "fold_right",
            "location": 206,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "op": [
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "xs": [
                    "Optional[Union[str, Any]]"
                ],
                "z": [
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "head_tail": {
            "name": "head_tail",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "head_tail_list": {
            "name": "head_tail_list",
            "location": 258,
            "return": [
                "str",
                "List[int]",
                "List[Dict]",
                "List[List[Any]]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "it": [
                    "Iterable[List[T]]",
                    "bool"
                ]
            }
        },
        "iter_with_final": {
            "name": "iter_with_final",
            "location": 277,
            "return": [],
            "arguments": {
                "it": [
                    "List[dict]"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 304,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "seq": [
                    "ftoolz.Seq[E]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "make_str": {
            "name": "make_str",
            "location": 315,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "it": [
                    "Sequence[str]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "str"
                ],
                "key": [
                    "Sequence[str]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "str"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "order_by": {
            "name": "order_by",
            "location": 345,
            "return": [
                "typing.Iterable[typing.Optional[E]]"
            ],
            "arguments": {
                "it": [
                    "str",
                    "Callable",
                    "bytes",
                    "Sequence[Dict[str, Any]]",
                    "MutableMapping[Any, Any]",
                    "Iterable[T_co]"
                ],
                "by": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Callable",
                    "bytes",
                    "Sequence[Dict[str, Any]]",
                    "MutableMapping[Any, Any]",
                    "Iterable[T_co]"
                ]
            }
        },
        "positions": {
            "name": "positions",
            "location": 388,
            "return": [
                "int",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "it": [
                    "int",
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "Iterable[T]"
                ]
            }
        },
        "split_by": {
            "name": "split_by",
            "location": 423,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "pred": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "it": [
                    "Tuple[int, int]"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 457,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float",
                    "bool"
                ],
                "it": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "take_first": {
            "name": "take_first",
            "location": 482,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "it": [
                    "bytes"
                ]
            }
        },
        "try_take_first": {
            "name": "try_take_first",
            "location": 499,
            "return": [],
            "arguments": {
                "it": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "try_take_last": {
            "name": "try_take_last",
            "location": 517,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "Type[T]",
                    "List[int]"
                ]
            }
        },
        "positions.item": {
            "name": "item",
            "location": 407,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "idx_item": [
                    "int",
                    "Iterable[Any]",
                    "tuple",
                    "Sequence[Any]",
                    "Set[str]"
                ]
            }
        },
        "positions.collect_idx": {
            "name": "collect_idx",
            "location": 411,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "acc": [
                    "Tuple[int]",
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[str]"
                ],
                "idx_item": [
                    "bool",
                    "int",
                    "bytes",
                    "list"
                ]
            }
        },
        "positions._empty": {
            "name": "_empty",
            "location": 417,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "ftoolz-master/ftoolz/predicates.py": {
        "some": {
            "name": "some",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "List[str]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "none": {
            "name": "none",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "List[str]"
                ]
            }
        },
        "even": {
            "name": "even",
            "location": 30,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "odd": {
            "name": "odd",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "vall": {
            "name": "vall",
            "location": 50,
            "return": [
                "str",
                "Iterator[Collection[T]]",
                "List[str]",
                "Set[int]",
                "int"
            ],
            "arguments": {}
        },
        "vany": {
            "name": "vany",
            "location": 68,
            "return": [
                "int",
                "bool",
                "Optional[dict]",
                "List[str]",
                "Tuple[int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "ftoolz-master/ftoolz/typing.py": {
        "assert_some": {
            "name": "assert_some",
            "location": 14,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "List[str]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "seq": {
            "name": "seq",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/__init__.py": {},
    "ftoolz-master/ftoolz/adt/mutiter.py": {
        "MutIter.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "float",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "MutIter.add": {
            "name": "add",
            "location": 52,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "it": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "T"
                ],
                "e": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "T"
                ]
            }
        },
        "MutIter.state": {
            "name": "state",
            "location": 64,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__iadd__": {
            "name": "__iadd__",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[int, \"BitVec\"]",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "MutIter.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__next__": {
            "name": "__next__",
            "location": 94,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__len__": {
            "name": "__len__",
            "location": 111,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__bool__": {
            "name": "__bool__",
            "location": 120,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutIter.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [
                "str",
                "Dict[str, str]",
                "Iterable[Sequence[str]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/ftoolz/adt/__init__.py": {},
    "ftoolz-master/ftoolz/functoolz/iter.py": {
        "apply": {
            "name": "apply",
            "location": 9,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "ff": [
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Iterable[bool]",
                    "Callable[[Any, Any], bool]"
                ],
                "fa": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ffa": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fmap2": {
            "name": "fmap2",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ],
                "fa": [
                    "TextIO",
                    "Optional[ftoolz.functoolz.A._in]",
                    "bool",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]"
                ],
                "fb": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ]
            }
        },
        "fproduct": {
            "name": "fproduct",
            "location": 131,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int"
                ],
                "fa": [
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 159,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 202,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 222,
            "return": [
                "ftoolz.Seq[ftoolz.functoolz.A]",
                "Iterable[ftoolz.functoolz.A]",
                "Optional[ftoolz.functoolz.A]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "fa": [
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "Optional[ftoolz.functoolz.A]",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "fb": [
                    "Sequence[int]",
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 264,
            "return": [
                "typing.Iterable[ftoolz.functoolz.A]"
            ],
            "arguments": {
                "a": [
                    "List[T]",
                    "int",
                    "List[int]",
                    "ftoolz.functoolz.A"
                ]
            }
        },
        "zip_map": {
            "name": "zip_map",
            "location": 274,
            "return": [
                "dict",
                "bytes",
                "int",
                "OrderedDict[str, Any]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "f": [
                    "Callable[..., ftoolz.functoolz.A._out]",
                    "Iterable[Any]",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]"
                ]
            }
        },
        "fmap2.ff": {
            "name": "ff",
            "location": 125,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "product.ff": {
            "name": "ff",
            "location": 258,
            "return": [
                "int",
                "float",
                "bytearray",
                "bytes",
                "bool"
            ],
            "arguments": {
                "a": [
                    "ftoolz.functoolz.A",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/opt.py": {
        "apply": {
            "name": "apply",
            "location": 7,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "ff": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Optional[Tuple[int, int]]",
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "fa": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Optional[Tuple[int, int]]",
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "apply2": {
            "name": "apply2",
            "location": 27,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "ff": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Optional[ftoolz.functoolz.B._in]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]"
                ],
                "fa": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Optional[ftoolz.functoolz.B._in]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]"
                ],
                "fb": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Optional[ftoolz.functoolz.B._in]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "applyN": {
            "name": "applyN",
            "location": 50,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "ff": [
                    "Optional[Any]",
                    "bool",
                    "Optional[float]",
                    "Optional[Mapping[int, complex]]"
                ]
            }
        },
        "flatmap": {
            "name": "flatmap",
            "location": 85,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "f": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Callable[..., T]",
                    "Optional[int]"
                ],
                "fa": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Callable[..., T]",
                    "Optional[int]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 107,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "ffa": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "fmap": {
            "name": "fmap",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., T]",
                    "bool",
                    "Optional[int]"
                ],
                "fa": [
                    "Optional[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int",
                    "Callable[..., T]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "fmap2": {
            "name": "fmap2",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ],
                "fa": [
                    "TextIO",
                    "Optional[ftoolz.functoolz.A._in]",
                    "bool",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]"
                ],
                "fb": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ]
            }
        },
        "fmap3": {
            "name": "fmap3",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ],
                "fa": [
                    "TextIO",
                    "Optional[ftoolz.functoolz.A._in]",
                    "bool",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]"
                ],
                "fb": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ],
                "fc": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ]
            }
        },
        "fmapN": {
            "name": "fmapN",
            "location": 189,
            "return": [
                "Optional[str]",
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[..., ftoolz.functoolz.A._out]",
                    "Optional[Any]",
                    "Optional[Mapping]",
                    "Callable[[A], B]",
                    "Iterable[str]"
                ]
            }
        },
        "fproduct": {
            "name": "fproduct",
            "location": 218,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int"
                ],
                "fa": [
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 236,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 254,
            "return": [
                "ftoolz.Seq[ftoolz.functoolz.A]",
                "Iterable[ftoolz.functoolz.A]",
                "Optional[ftoolz.functoolz.A]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "fa": [
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "Optional[ftoolz.functoolz.A]",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "fb": [
                    "Sequence[int]",
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "fmap2.ff": {
            "name": "ff",
            "location": 154,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "fmap3.ff": {
            "name": "ff",
            "location": 183,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "product.ff": {
            "name": "ff",
            "location": 267,
            "return": [
                "int",
                "float",
                "bytearray",
                "bytes",
                "bool"
            ],
            "arguments": {
                "a": [
                    "ftoolz.functoolz.A",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/seq.py": {
        "apply": {
            "name": "apply",
            "location": 10,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "ff": [
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Iterable[bool]",
                    "Callable[[Any, Any], bool]"
                ],
                "fa": [
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Iterable[bool]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "flatmap": {
            "name": "flatmap",
            "location": 39,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ],
                "fa": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ffa": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fmap": {
            "name": "fmap",
            "location": 68,
            "return": [
                "bool",
                "List[str]",
                "tuple",
                "Tuple[int, int]"
            ],
            "arguments": {
                "f": [
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]"
                ],
                "fa": [
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]"
                ]
            }
        },
        "fmap2": {
            "name": "fmap2",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ],
                "fa": [
                    "TextIO",
                    "Optional[ftoolz.functoolz.A._in]",
                    "bool",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]"
                ],
                "fb": [
                    "TextIO",
                    "Optional[ftoolz.functoolz.A._in]",
                    "bool",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]"
                ]
            }
        },
        "fproduct": {
            "name": "fproduct",
            "location": 115,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int"
                ],
                "fa": [
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "int"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 131,
            "return": [
                "List[str]",
                "FrozenSet[str]",
                "Optional[dict]",
                "Sequence[int]",
                "Counter",
                "Tuple[int]"
            ],
            "arguments": {
                "f": [
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Callable[[ftoolz.functoolz.A], ftoolz.functoolz.B._out]",
                    "Optional[ftoolz.functoolz.A]",
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]"
                ]
            }
        },
        "lift": {
            "name": "lift",
            "location": 174,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]",
                    "Callable[[B], C]",
                    "Callable[[A], B]",
                    "Callable"
                ]
            }
        },
        "product": {
            "name": "product",
            "location": 191,
            "return": [
                "ftoolz.Seq[ftoolz.functoolz.A]",
                "Iterable[ftoolz.functoolz.A]",
                "Optional[ftoolz.functoolz.A]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "fa": [
                    "ftoolz.Seq[ftoolz.functoolz.A]",
                    "Iterable[ftoolz.functoolz.A]",
                    "Optional[ftoolz.functoolz.A]",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "fb": [
                    "Sequence[int]",
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 218,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "List[T]",
                    "int",
                    "List[int]",
                    "ftoolz.functoolz.A"
                ]
            }
        },
        "zip_map": {
            "name": "zip_map",
            "location": 228,
            "return": [
                "str",
                "Union[str, Dict]",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable[..., ftoolz.functoolz.A._out]",
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Iterable[Any]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int"
                ]
            }
        },
        "fmap2.ff": {
            "name": "ff",
            "location": 109,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "product.ff": {
            "name": "ff",
            "location": 212,
            "return": [
                "int",
                "float",
                "bytearray",
                "bytes",
                "bool"
            ],
            "arguments": {
                "a": [
                    "ftoolz.functoolz.A",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/__init__.py": {
        "attempt": {
            "name": "attempt",
            "location": 27,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "e": [
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "Callable"
                ],
                "f": [
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "Callable"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "silenced": {
            "name": "silenced",
            "location": 92,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "_f": [
                    "Optional[str]",
                    "Optional[Exception]",
                    "Optional[int]"
                ]
            }
        },
        "try_apply": {
            "name": "try_apply",
            "location": 139,
            "return": [
                "Iterable[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Mapping[str, Any]",
                    "Sequence[Any]",
                    "Callable",
                    "Callable[..., T]",
                    "dict",
                    "callable"
                ]
            }
        },
        "try_except": {
            "name": "try_except",
            "location": 154,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "Type['DataclassT']",
                    "int",
                    "Iterable[T]",
                    "Callable[[None], \"Expr\"]"
                ],
                "f": [
                    "Callable[..., T]",
                    "Callable"
                ],
                "g": [
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        },
        "attempt.none": {
            "name": "none",
            "location": 57,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "silenced.decorator": {
            "name": "decorator",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "silenced.decorator.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [
                "Dict[str, float]",
                "Dict[str, Dict[str, int]]",
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "ftoolz-master/ftoolz/functoolz/traverse/opt.py": {
        "sequence_iter": {
            "name": "sequence_iter",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {
                "gfa": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "sequence_seq": {
            "name": "sequence_seq",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "gfa": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "traverse_iter": {
            "name": "traverse_iter",
            "location": 60,
            "return": [
                "tuple",
                "bool",
                "str"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "Callable",
                    "Iterable"
                ],
                "fa": [
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "traverse_seq": {
            "name": "traverse_seq",
            "location": 80,
            "return": [
                "T",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "f": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Dict[str, Any]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]"
                ],
                "fa": [
                    "Callable[[ftoolz.functoolz.A._in], ftoolz.functoolz.B._out]",
                    "Dict[str, Any]",
                    "ftoolz.Seq[ftoolz.functoolz.A._in]",
                    "int",
                    "Callable[..., None]"
                ]
            }
        },
        "traverse_iter.op": {
            "name": "op",
            "location": 73,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "a": [
                    "float",
                    "Callable[[None], bool]",
                    "int"
                ],
                "acc": [
                    "float",
                    "Callable[[None], bool]",
                    "int"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/functoolz/traverse/__init__.py": {},
    "ftoolz-master/ftoolz/unsafe/reflection.py": {
        "abstract": {
            "name": "abstract",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "clz": [
                    "Type",
                    "Type[T]",
                    "str",
                    "bool"
                ]
            }
        },
        "implementations": {
            "name": "implementations",
            "location": 38,
            "return": [
                "List[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "clz": [
                    "str",
                    "Type[T]",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "package": [
                    "str",
                    "Type[T]",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "import_all": {
            "name": "import_all",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "package": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "protected": {
            "name": "protected",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "clz": [
                    "Type",
                    "Type[T]",
                    "str",
                    "bool"
                ]
            }
        },
        "subclasses": {
            "name": "subclasses",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "clz": [
                    "str",
                    "Type[T]",
                    "Callable[[str], T]"
                ],
                "package": [
                    "str",
                    "Type[T]",
                    "Callable[[str], T]"
                ]
            }
        },
        "implementations.load": {
            "name": "load",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "c": [
                    "dict",
                    "str",
                    "list",
                    "List[List[Any]]"
                ]
            }
        },
        "subclasses.rec": {
            "name": "rec",
            "location": 140,
            "return": [
                "Dict[int, int]",
                "str",
                "List[Dict[str, str]]",
                "Tuple[int, int]",
                "Dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "\"Track\"",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ftoolz-master/ftoolz/unsafe/__init__.py": {},
    "ftoolz-master/tests/run.py": {},
    "ftoolz-master/tests/__init__.py": {},
    "ftoolz-master/tests/test_unsafe/classes.py": {
        "A.test": {
            "name": "test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.test2": {
            "name": "test2",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.test": {
            "name": "test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.test2": {
            "name": "test2",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "D.test2": {
            "name": "test2",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "E.test": {
            "name": "test",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "E.test2": {
            "name": "test2",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/tests/test_unsafe/test_reflection.py": {
        "ReflectionTest.test_implementations": {
            "name": "test_implementations",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ftoolz-master/tests/test_unsafe/__init__.py": {}
}
{
    "full-stack-fastapi-couchbase-master/hooks/post_gen_project.py": {},
    "full-stack-fastapi-couchbase-master/scripts/generate_cookiecutter_config.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/backend_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/celeryworker_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/main.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests_pre_start.py": {
        "init": {
            "name": "init",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/utils.py": {
        "send_email": {
            "name": "send_email",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "dict",
                    "Union[int, str, bool]",
                    "Type[object]",
                    "List[str]"
                ],
                "subject_template": [
                    "str",
                    "BinaryIO",
                    "tensorhive.core.ssh.Username"
                ],
                "html_template": [
                    "str",
                    "BinaryIO",
                    "tensorhive.core.ssh.Username"
                ],
                "environment": [
                    "str",
                    "dict",
                    "Union[int, str, bool]",
                    "Type[object]",
                    "List[str]"
                ]
            }
        },
        "send_test_email": {
            "name": "send_test_email",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str"
                ]
            }
        },
        "send_reset_password_email": {
            "name": "send_reset_password_email",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "Dict[str, str]"
                ],
                "username": [
                    "str"
                ],
                "token": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "send_new_account_email": {
            "name": "send_new_account_email",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "username": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "generate_password_reset_token": {
            "name": "generate_password_reset_token",
            "location": 92,
            "return": [
                "float",
                "logging.LogRecord",
                "bool",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "verify_password_reset_token": {
            "name": "verify_password_reset_token",
            "location": 110,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/worker.py": {
        "test_celery": {
            "name": "test_celery",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/api.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/items.py": {
        "read_items": {
            "name": "read_items",
            "location": 15,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "skip": [
                    "Optional[str]",
                    "app.models.user.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.User",
                    "dict"
                ],
                "limit": [
                    "Optional[str]",
                    "app.models.user.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.User",
                    "dict"
                ],
                "current_user": [
                    "zerver.models.UserProfile",
                    "str",
                    "Callable"
                ]
            }
        },
        "search_items": {
            "name": "search_items",
            "location": 38,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "q": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "MutableMapping",
                    "str"
                ],
                "skip": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "MutableMapping",
                    "str"
                ],
                "limit": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "MutableMapping",
                    "str"
                ],
                "current_user": [
                    "str",
                    "duniterpy.api.clienClient"
                ]
            }
        },
        "create_item": {
            "name": "create_item",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "update_item": {
            "name": "update_item",
            "location": 81,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "read_item": {
            "name": "read_item",
            "location": 105,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "id": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "current_user": [
                    "str",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ]
            }
        },
        "delete_item": {
            "name": "delete_item",
            "location": 121,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "id": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "current_user": [
                    "str",
                    "int",
                    "Optional[str]",
                    "raiden_contracts.utils.type_aliases.ChainID",
                    "Optional[float]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/login.py": {
        "login": {
            "name": "login",
            "location": 24,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "int"
            ],
            "arguments": {
                "form_data": [
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_token": {
            "name": "test_token",
            "location": 46,
            "return": [
                "Callable"
            ],
            "arguments": {
                "current_user": [
                    "app.db_models.user.User",
                    "ultron8.api.db_models.user.User",
                    "core.models.Recipe",
                    "User",
                    "str",
                    "arxiv.submission.User"
                ]
            }
        },
        "recover_password": {
            "name": "recover_password",
            "location": 54,
            "return": [
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "type"
            ],
            "arguments": {
                "username": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "zerver.models.Realm"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 74,
            "return": [
                "str",
                "List[zerver.models.Stream]",
                "dict",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Dict[str, str]"
                ],
                "new_password": [
                    "str",
                    "Awaitable",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/roles.py": {
        "read_roles": {
            "name": "read_roles",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "current_user": [
                    "zerver.models.UserProfile",
                    "List[int]",
                    "app.models.user.UserInDB",
                    "bool"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/users.py": {
        "read_users": {
            "name": "read_users",
            "location": 17,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "skip": [
                    "app.models.user.User",
                    "app.models.User",
                    "bool",
                    "Union[grouper.models.user.User, Group]",
                    "app.contexts.AuthContext",
                    "cmp_command_processor.src.file.user.UserObject"
                ],
                "limit": [
                    "app.models.user.User",
                    "app.models.User",
                    "bool",
                    "Union[grouper.models.user.User, Group]",
                    "app.contexts.AuthContext",
                    "cmp_command_processor.src.file.user.UserObject"
                ],
                "current_user": [
                    "app.models.user.User.InDB",
                    "bool",
                    "User",
                    "str",
                    "Optional[str]",
                    "boucanpy.core.security.TokenPayload"
                ]
            }
        },
        "search_users": {
            "name": "search_users",
            "location": 31,
            "return": [
                "core.models.UserPreferences",
                "int",
                "user_models.User",
                "django.db.models.QuerySet",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "q": [
                    "str",
                    "int"
                ],
                "skip": [
                    "str",
                    "int"
                ],
                "limit": [
                    "str",
                    "int"
                ],
                "current_user": [
                    "app.models.user.User.InDB",
                    "User",
                    "Optional[str]",
                    "List[Dict]",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 50,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "update_user_me": {
            "name": "update_user_me",
            "location": 74,
            "return": [
                "zam_repondeur.models.Lecture",
                "int",
                "set",
                "bool",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        },
        "read_user_me": {
            "name": "read_user_me",
            "location": 97,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "current_user": [
                    "User",
                    "app.models.user.User.InDB",
                    "list",
                    "zerver.models.UserProfile",
                    "tracim.models.User",
                    "str"
                ]
            }
        },
        "create_user_open": {
            "name": "create_user_open",
            "location": 105,
            "return": [
                "zam_repondeur.models.Lecture",
                "set",
                "bool",
                "user_models.User",
                "django.db.models.QuerySet",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent",
                "int"
            ],
            "arguments": {}
        },
        "read_user": {
            "name": "read_user",
            "location": 139,
            "return": [
                "zerver.models.Realm",
                "str",
                "zerver.models.UserProfile",
                "core.models.UserPreferences",
                "models.User"
            ],
            "arguments": {
                "username": [
                    "duniterpy.api.clienClient",
                    "str",
                    "int",
                    "dict"
                ],
                "current_user": [
                    "app.models.user.User.InDB",
                    "str",
                    "User",
                    "Optional[core.models.User]",
                    "user.User",
                    "zerver.models.UserProfile",
                    "server.models.User"
                ]
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 155,
            "return": [
                "zam_repondeur.models.Lecture",
                "int",
                "set",
                "bool",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/utils.py": {
        "test_celery": {
            "name": "test_celery",
            "location": 14,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "msg": [
                    "routemaster.app.App"
                ],
                "current_user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_email": {
            "name": "test_email",
            "location": 25,
            "return": [
                "Mapping[str, Any]",
                "core.models.Recipe"
            ],
            "arguments": {
                "email_to": [
                    "pydantic.EmailStr",
                    "str",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ],
                "current_user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB",
                    "str",
                    "pathfinding_service.api.PFSApi",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/utils/security.py": {
        "get_current_user": {
            "name": "get_current_user",
            "location": 17,
            "return": [
                "tracim.models.auth.User",
                "zam_repondeur.models.Lecture",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "metaswitch_tinder.database.models.User",
                "set"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "get_current_active_user": {
            "name": "get_current_active_user",
            "location": 32,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "current_user": [
                    "app.models.User",
                    "app.models.user.User",
                    "str",
                    "app.contexts.AuthContext",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_current_active_superuser": {
            "name": "get_current_active_superuser",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "current_user": [
                    "app.models.user.User",
                    "app.models.User",
                    "app.contexts.AuthContext",
                    "str"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/api/utils/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/core/celery_app.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/core/config.py": {
        "getenv_boolean": {
            "name": "getenv_boolean",
            "location": 4,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "var_name": [
                    "str",
                    "bool"
                ],
                "default_value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "List[Dict[str, str]]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/core/jwt.py": {
        "create_access_token": {
            "name": "create_access_token",
            "location": 11,
            "return": [
                "str",
                "bool",
                "dict",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/core/security.py": {
        "verify_password": {
            "name": "verify_password",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "plain_password": [
                    "str",
                    "Callable"
                ],
                "hashed_password": [
                    "str",
                    "Callable"
                ]
            }
        },
        "get_password_hash": {
            "name": "get_password_hash",
            "location": 10,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/core/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/crud/item.py": {
        "get_doc_id": {
            "name": "get_doc_id",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 18,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str"
                ]
            }
        },
        "upsert": {
            "name": "upsert",
            "location": 23,
            "return": [
                "IO[str]",
                "int"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "daylighdb.models.Profile",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 58,
            "return": [
                "IO[str]",
                "int"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str",
                    "Type",
                    "django.db.models.Model"
                ]
            }
        },
        "get_multi_by_owner": {
            "name": "get_multi_by_owner",
            "location": 75,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket",
                    "zerver.models.Realm",
                    "int"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 90,
            "return": [
                "int",
                "list",
                "str",
                "services.email.transfer.models.Message"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str"
                ]
            }
        },
        "search_with_owner": {
            "name": "search_with_owner",
            "location": 102,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str"
                ]
            }
        },
        "search_get_search_results_to_docs": {
            "name": "search_get_search_results_to_docs",
            "location": 119,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/crud/user.py": {
        "get_doc_id": {
            "name": "get_doc_id",
            "location": 18,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 22,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str"
                ]
            }
        },
        "get_by_email": {
            "name": "get_by_email",
            "location": 27,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[Dict]",
                "Optional[bool]"
            ],
            "arguments": {
                "bucket": [
                    "Callable",
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "T"
                ]
            }
        },
        "insert_sync_gateway": {
            "name": "insert_sync_gateway",
            "location": 43,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "models.User"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "models.User"
                ]
            }
        },
        "update_sync_gateway": {
            "name": "update_sync_gateway",
            "location": 51,
            "return": [
                "models.characters.character_base.Character",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "str",
                "Optional[Iterable[str]]",
                "zerver.models.Client"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, str]",
                    "auth.user.User"
                ]
            }
        },
        "upsert_in_db": {
            "name": "upsert_in_db",
            "location": 62,
            "return": [
                "bool",
                "set",
                "django.db.models.QuerySet",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "int",
                    "str",
                    "float",
                    "Dict[str, Union[str, Set]]"
                ]
            }
        },
        "update_in_db": {
            "name": "update_in_db",
            "location": 74,
            "return": [
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "upsert": {
            "name": "upsert",
            "location": 89,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Optional[str]",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[List[str]]",
                    "Optional[float]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 96,
            "return": [
                "core.models.User",
                "zam_repondeur.models.Lecture",
                "aiolambda.Maybe[auth.user.User]",
                "str",
                "lms.lmsdb.models.User"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "authenticate": {
            "name": "authenticate",
            "location": 109,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ]
            }
        },
        "is_active": {
            "name": "is_active",
            "location": 118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "user": [
                    "app.models.user.User",
                    "app.models.user.UserInDB",
                    "str",
                    "users.models.JustfixUser",
                    "models.User",
                    "Optional[str]"
                ]
            }
        },
        "is_superuser": {
            "name": "is_superuser",
            "location": 122,
            "return": [
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "user": [
                    "app.models.user.UserInDB",
                    "str",
                    "tildes.models.user.User",
                    "flask_appbuilder.security.sqla.models.User",
                    "dict",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 128,
            "return": [
                "zam_repondeur.models.Lecture",
                "set",
                "bool",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "Dict[str, Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]"
            ],
            "arguments": {
                "bucket": [
                    "couchbase.buckeBucket",
                    "str",
                    "django.db.models.Model",
                    "bool"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 139,
            "return": [
                "user.transfer.models.User",
                "Iterable[str]",
                "Dict[str, Any]",
                "List[zerver.models.UserProfile]",
                "contests.models.User",
                "app.models.external.UserDTO"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket"
                ]
            }
        },
        "search_get_search_results_to_docs": {
            "name": "search_get_search_results_to_docs",
            "location": 152,
            "return": [
                "abilian.core.models.subjects.User",
                "models.Course",
                "zam_repondeur.models.Dossier",
                "buza.models.User",
                "psef.models.user.User"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/crud/utils.py": {
        "generate_new_id": {
            "name": "generate_new_id",
            "location": 17,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "ensure_enums_to_strs": {
            "name": "ensure_enums_to_strs",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "get_doc_results_by_type": {
            "name": "get_doc_results_by_type",
            "location": 31,
            "return": [
                "List[str]",
                "Type",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "List[Dict[str, str]]",
                "list",
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "couchbase.buckeBucket"
                ]
            }
        },
        "get_docs_by_keys": {
            "name": "get_docs_by_keys",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "doc_result_to_model": {
            "name": "doc_result_to_model",
            "location": 56,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "couchbase_result": [
                    "str",
                    "Dict[int, dict]",
                    "src.config.user_config.UserConfig",
                    "sideeye.config.ASCParsingConfig",
                    "bool"
                ]
            }
        },
        "doc_results_to_model": {
            "name": "doc_results_to_model",
            "location": 64,
            "return": [
                "Dict[str, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "results_from_couchbase": [
                    "list",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "search_results_to_model": {
            "name": "search_results_to_model",
            "location": 75,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "results_from_couchbase": [
                    "list",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_docs": {
            "name": "get_docs",
            "location": 98,
            "return": [
                "str",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket"
                ]
            }
        },
        "get_doc": {
            "name": "get_doc",
            "location": 107,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "int",
                    "couchbase.buckeBucket",
                    "List[str]"
                ]
            }
        },
        "upsert": {
            "name": "upsert",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 130,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket",
                    "int",
                    "Dict[int, dict]"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 149,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket"
                ]
            }
        },
        "search_get_doc_ids": {
            "name": "search_get_doc_ids",
            "location": 168,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ]
            }
        },
        "search_get_search_results": {
            "name": "search_get_search_results",
            "location": 184,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bool"
                ]
            }
        },
        "search_by_type_get_search_results": {
            "name": "search_by_type_get_search_results",
            "location": 203,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterator"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ]
            }
        },
        "search_get_docs": {
            "name": "search_get_docs",
            "location": 225,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ]
            }
        },
        "search_get_search_results_to_docs": {
            "name": "search_get_search_results_to_docs",
            "location": 253,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "search_by_type_get_results_to_docs": {
            "name": "search_by_type_get_results_to_docs",
            "location": 272,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "couchbase.buckeBucket"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/crud/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/db/couchbase_utils.py": {
        "get_cluster_http_url": {
            "name": "get_cluster_http_url",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "Dict[str, Any]"
                ],
                "port": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_cluster_couchbase_url": {
            "name": "get_cluster_couchbase_url",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "port": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "fetch_mutation_tokens": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "operation_timeout": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "n1ql_timeout": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "get_allowed_username": {
            "name": "get_allowed_username",
            "location": 44,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "is_couchbase_ready": {
            "name": "is_couchbase_ready",
            "location": 52,
            "return": [
                "bool",
                "\"Namespace\""
            ],
            "arguments": {
                "cluster_url": [
                    "str"
                ]
            }
        },
        "setup_couchbase_services": {
            "name": "setup_couchbase_services",
            "location": 57,
            "return": [
                "bytes",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "setup_memory_quota": {
            "name": "setup_memory_quota",
            "location": 67,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "setup_index_storage": {
            "name": "setup_index_storage",
            "location": 90,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "setup_couchbase_username_password": {
            "name": "setup_couchbase_username_password",
            "location": 97,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "check_couchbase_username_password": {
            "name": "check_couchbase_username_password",
            "location": 108,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "ensure_couchbase_username_password": {
            "name": "ensure_couchbase_username_password",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "import_couchbase_default_data": {
            "name": "import_couchbase_default_data",
            "location": 125,
            "return": [
                "Optional[str]",
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "is_bucket_created": {
            "name": "is_bucket_created",
            "location": 135,
            "return": [
                "Tuple[int, int]",
                "\"Namespace\"",
                "str",
                "\"Series\"",
                "int"
            ],
            "arguments": {}
        },
        "create_bucket": {
            "name": "create_bucket",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ensure_create_bucket": {
            "name": "ensure_create_bucket",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_couchbase_user_created": {
            "name": "is_couchbase_user_created",
            "location": 184,
            "return": [
                "\"Namespace\"",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "create_couchbase_user": {
            "name": "create_couchbase_user",
            "location": 191,
            "return": [
                "int",
                "bool",
                "Dict[int, dict]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "ensure_create_couchbase_user": {
            "name": "ensure_create_couchbase_user",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "config_couchbase": {
            "name": "config_couchbase",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/db/database.py": {
        "get_default_bucket": {
            "name": "get_default_bucket",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_cluster": {
            "name": "get_cluster",
            "location": 27,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "get_bucket": {
            "name": "get_bucket",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "bool"
                ],
                "password": [
                    "str",
                    "int",
                    "bool"
                ],
                "bucket_name": [
                    "str",
                    "int"
                ],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "float"
                ],
                "n1ql_timeout": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ensure_create_primary_index": {
            "name": "ensure_create_primary_index",
            "location": 54,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "ensure_create_type_index": {
            "name": "ensure_create_type_index",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Callable",
                    "bytes",
                    "float",
                    "bool",
                    "T"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/db/full_text_search_utils.py": {
        "get_index": {
            "name": "get_index",
            "location": 15,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "index_name": [
                    "str",
                    "Dict[Tuple[Any, str], int]",
                    "Optional[str]"
                ]
            }
        },
        "create_index": {
            "name": "create_index",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "index_definition": [
                    "str",
                    "Optional[dict]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "ensure_create_full_text_indexes": {
            "name": "ensure_create_full_text_indexes",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "index_dir": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ],
                "username": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "password": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "host": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "port": [
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/db/init_db.py": {
        "init_db": {
            "name": "init_db",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/db/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/config.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/item.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/msg.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/role.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/token.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/user.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/models/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/conftest.py": {
        "server_api": {
            "name": "server_api",
            "location": 9,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {}
        },
        "superuser_token_headers": {
            "name": "superuser_token_headers",
            "location": 14,
            "return": [
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {}
        },
        "normal_user_token_headers": {
            "name": "normal_user_token_headers",
            "location": 19,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Dict[int, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_celery.py": {
        "test_celery_worker_test": {
            "name": "test_celery_worker_test",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "Dict[str, str]",
                    "str",
                    "List[List[int]]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_items.py": {
        "test_create_item": {
            "name": "test_create_item",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "bool"
                ]
            }
        },
        "test_read_item": {
            "name": "test_read_item",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_login.py": {
        "test_get_access_token": {
            "name": "test_get_access_token",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_access_token": {
            "name": "test_use_access_token",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "Dict[str, str]",
                    "tests.clienMDMClient",
                    "List[List[int]]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_users.py": {
        "test_get_users_superuser_me": {
            "name": "test_get_users_superuser_me",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_users_normal_user_me": {
            "name": "test_get_users_normal_user_me",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "normal_user_token_headers": [
                    "bool",
                    "List[List[int]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_create_user_new_email": {
            "name": "test_create_user_new_email",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "List[List[int]]"
                ]
            }
        },
        "test_get_existing_user": {
            "name": "test_get_existing_user",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "test_create_user_existing_username": {
            "name": "test_create_user_existing_username",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": []
            }
        },
        "test_create_user_by_normal_user": {
            "name": "test_create_user_by_normal_user",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "normal_user_token_headers": [
                    "List[List[int]]",
                    "int",
                    "salon.models.Stylist"
                ]
            }
        },
        "test_retrieve_users": {
            "name": "test_retrieve_users",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/test_get_ids.py": {
        "test_get_user_id": {
            "name": "test_get_user_id",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/test_item.py": {
        "test_create_item": {
            "name": "test_create_item",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_item": {
            "name": "test_update_item",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_delete_item": {
            "name": "test_delete_item",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/test_user.py": {
        "test_create_user": {
            "name": "test_create_user",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_authenticate_user": {
            "name": "test_authenticate_user",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_authenticate_user": {
            "name": "test_not_authenticate_user",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_active": {
            "name": "test_check_if_user_is_active",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_active_inactive": {
            "name": "test_check_if_user_is_active_inactive",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_superuser": {
            "name": "test_check_if_user_is_superuser",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_superuser_normal_user": {
            "name": "test_check_if_user_is_superuser_normal_user",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/item.py": {
        "create_random_item": {
            "name": "create_random_item",
            "location": 8,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "owner_username": [
                    "Type[\"SerializationDialect\"]",
                    "bool",
                    "Type[T]",
                    "Optional[int]"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/user.py": {
        "user_authentication_headers": {
            "name": "user_authentication_headers",
            "location": 10,
            "return": [
                "tests.mock_vws.utils.Endpoint",
                "dict"
            ],
            "arguments": {
                "server_api": [
                    "str",
                    "IO[bytes]"
                ],
                "email": [
                    "str",
                    "dict"
                ],
                "password": [
                    "str",
                    "dict"
                ]
            }
        },
        "create_random_user": {
            "name": "create_random_user",
            "location": 20,
            "return": [
                "zam_repondeur.models.Lecture",
                "app.models.user.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "core.models.UserPreferences"
            ],
            "arguments": {}
        },
        "authentication_token_from_email": {
            "name": "authentication_token_from_email",
            "location": 29,
            "return": [
                "bool",
                "dict",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/utils.py": {
        "random_lower_string": {
            "name": "random_lower_string",
            "location": 9,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {}
        },
        "get_server_api": {
            "name": "get_server_api",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_superuser_token_headers": {
            "name": "get_superuser_token_headers",
            "location": 18,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/__init__.py": {},
    "full-stack-fastapi-couchbase-master/{{cookiecutter.project_slug}}/sync-gateway/create_config.py": {
        "getenv_boolean": {
            "name": "getenv_boolean",
            "location": 9,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "var_name": [
                    "str",
                    "bool"
                ],
                "default_value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "List[Dict[str, str]]"
                ]
            }
        }
    }
}
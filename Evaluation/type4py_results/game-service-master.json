{
    "game-service-master/run.py": {},
    "game-service-master/app/controller.py": {
        "check_health": {
            "name": "check_health",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "add_game_member": {
            "name": "add_game_member",
            "location": 32,
            "return": [
                "dict",
                "int",
                "Dict[str, allennlp.service.predictors.DemoModel]",
                "List[Tuple[str, str, int]]",
                "Optional[List[str]]",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "transfer.models.MatchCommentID",
                    "int",
                    "dict"
                ]
            }
        },
        "set_game_member_as_ready": {
            "name": "set_game_member_as_ready",
            "location": 39,
            "return": [
                "dict",
                "int",
                "Dict[str, str]",
                "bool",
                "games.models.Game",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ],
                "member_id": [
                    "str"
                ]
            }
        },
        "add_question": {
            "name": "add_question",
            "location": 46,
            "return": [
                "int",
                "List[str]",
                "str",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_question": {
            "name": "get_question",
            "location": 56,
            "return": [
                "dict",
                "flask.Response",
                "\"User\"",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "question_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_game": {
            "name": "create_game",
            "location": 67,
            "return": [
                "str",
                "dict",
                "Dict[str, int]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "delete_game": {
            "name": "delete_game",
            "location": 76,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_game": {
            "name": "get_game",
            "location": 83,
            "return": [
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int",
                    "Set[int]",
                    "Union[str, bytes]"
                ]
            }
        },
        "get_game_by_shortcode": {
            "name": "get_game_by_shortcode",
            "location": 89,
            "return": [
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "short_code": [
                    "str",
                    "medtagger.database.models.User"
                ]
            }
        },
        "start_game": {
            "name": "start_game",
            "location": 95,
            "return": [
                "Dict[str, Any]",
                "int",
                "jumeaux.models.Res2ResAddOnPayload",
                "List[str]",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "leave_game": {
            "name": "leave_game",
            "location": 103,
            "return": [
                "dict",
                "int",
                "Optional[str]",
                "jumeaux.models.Res2ResAddOnPayload",
                "Callable"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ],
                "member_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_members_next_question": {
            "name": "get_members_next_question",
            "location": 110,
            "return": [
                "int",
                "List[str]",
                "bool",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "List[str]"
                ],
                "member_id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_position": {
            "name": "add_position",
            "location": 120,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "game_id": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "transfer.models.SnippetID"
                ],
                "member_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_coordinate_from_query": {
            "name": "_get_coordinate_from_query",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "game-service-master/app/error.py": {
        "GameEndedError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "GameEndedError.status": {
            "name": "status",
            "location": 15,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "game-service-master/app/routes.py": {
        "create_game": {
            "name": "create_game",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Type[Exception]",
                "float",
                "Union[str, List]"
            ],
            "arguments": {}
        },
        "add_game_member": {
            "name": "add_game_member",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ]
            }
        },
        "get_game_by_shortcode": {
            "name": "get_game_by_shortcode",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "short_code": [
                    "str"
                ]
            }
        },
        "get_game": {
            "name": "get_game",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ]
            }
        },
        "set_user_ready": {
            "name": "set_user_ready",
            "location": 41,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ],
                "member_id": [
                    "str"
                ]
            }
        },
        "delete_game": {
            "name": "delete_game",
            "location": 47,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ]
            }
        },
        "start_game": {
            "name": "start_game",
            "location": 53,
            "return": [
                "List[str]",
                "bool",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ]
            }
        },
        "leave_game": {
            "name": "leave_game",
            "location": 59,
            "return": [
                "bool",
                "str",
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "List[str]"
                ],
                "member_id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_current_question": {
            "name": "get_current_question",
            "location": 65,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ],
                "member_id": [
                    "str"
                ]
            }
        },
        "add_user_position": {
            "name": "add_user_position",
            "location": 71,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Optional[str]"
                ],
                "member_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_question": {
            "name": "get_question",
            "location": 77,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "question_id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "create_question": {
            "name": "create_question",
            "location": 83,
            "return": [
                "bool",
                "str",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {}
        },
        "check_health": {
            "name": "check_health",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "game-service-master/app/__init__.py": {
        "handle_request_error": {
            "name": "handle_request_error",
            "location": 38,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "werkzeug.exceptions.NotFound",
                    "str",
                    "werkzeug.exceptions.Forbidden",
                    "bool",
                    "werkzeug.exceptions.InternalServerError"
                ]
            }
        },
        "handle_not_found": {
            "name": "handle_not_found",
            "location": 53,
            "return": [
                "bool",
                "Dict[str, str]",
                "dict",
                "core.models.User",
                "str"
            ],
            "arguments": {
                "err": [
                    "list",
                    "bool",
                    "int",
                    "str",
                    "BaseException"
                ]
            }
        },
        "handle_method_not_allowed": {
            "name": "handle_method_not_allowed",
            "location": 63,
            "return": [
                "bool",
                "dict",
                "core.models.User",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "err": [
                    "bool",
                    "List[bytes]",
                    "str",
                    "dict",
                    "List[manager.models.language.Language]"
                ]
            }
        }
    },
    "game-service-master/app/config/logging.py": {},
    "game-service-master/app/config/util.py": {
        "get_dsn": {
            "name": "get_dsn",
            "location": 5,
            "return": [
                "str",
                "int",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "test_mode": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "game-service-master/app/config/__init__.py": {},
    "game-service-master/app/models/dto.py": {
        "_new_id": {
            "name": "_new_id",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "QuestionText.todict": {
            "name": "todict",
            "location": 21,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionDTO.fromdict": {
            "name": "fromdict",
            "location": 42,
            "return": [
                "\"Task\"",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict]",
                    "Union[int, str]",
                    "Callable"
                ],
                "raw": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "QuestionDTO.todict": {
            "name": "todict",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionDTO.only_question": {
            "name": "only_question",
            "location": 84,
            "return": [
                "str",
                "dict",
                "Callable",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateGameDTO.fromdict": {
            "name": "fromdict",
            "location": 97,
            "return": [
                "bool",
                "asyncworker.http.wrapper.RequestWrapper",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "raw": [
                    "Type",
                    "AsyncGenerator",
                    "str"
                ]
            }
        },
        "GameMemberDTO.todict": {
            "name": "todict",
            "location": 115,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDTO.status": {
            "name": "status",
            "location": 136,
            "return": [
                "int",
                "str",
                "List[int]",
                "tuple",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDTO.todict": {
            "name": "todict",
            "location": 143,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInfoDTO.todict": {
            "name": "todict",
            "location": 161,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionDTO.fromdict": {
            "name": "fromdict",
            "location": 174,
            "return": [
                "allennlp.models.model.Model",
                "str",
                "List[\"TaskNode\"]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "member_id": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "raw": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "PositionResultDTO.incorrect": {
            "name": "incorrect",
            "location": 194,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "PositionResultDTO.todict": {
            "name": "todict",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "game-service-master/app/models/external.py": {
        "UserDTO.fromdict": {
            "name": "fromdict",
            "location": 25,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "raw": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserDTO.todict": {
            "name": "todict",
            "location": 39,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "game-service-master/app/models/__init__.py": {
        "Position.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.coordinate": {
            "name": "coordinate",
            "location": 30,
            "return": [
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMemberQuestion.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMember.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.coordinate": {
            "name": "coordinate",
            "location": 114,
            "return": [
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameQuestion.__repr__": {
            "name": "__repr__",
            "location": 125,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Placement.__repr__": {
            "name": "__repr__",
            "location": 141,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "Callable",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "game-service-master/app/repository/game_repo.py": {
        "save": {
            "name": "save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "app.models.Game",
                    "core.entities.game.Game"
                ]
            }
        },
        "save_questions": {
            "name": "save_questions",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "questions": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "set_started": {
            "name": "set_started",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "app.models.Game",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 42,
            "return": [
                "str",
                "dict",
                "List[str]",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "find_by_shortcode": {
            "name": "find_by_shortcode",
            "location": 47,
            "return": [
                "str",
                "int",
                "List[int]",
                "Union[int, float]"
            ],
            "arguments": {
                "short_code": [
                    "str",
                    "Optional[str]",
                    "verification_token.models.Token"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "app.models.Game",
                    "str",
                    "dict",
                    "managers.models.Project",
                    "Optional[projects.models.projects.Project]"
                ]
            }
        },
        "end": {
            "name": "end",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "app.models.Game",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "game-service-master/app/repository/member_repo.py": {
        "add_member": {
            "name": "add_member",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "member": [
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "zerver.models.Recipient",
                    "app.models.Tweet",
                    "app.models.Position"
                ]
            }
        },
        "set_as_ready": {
            "name": "set_as_ready",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 37,
            "return": [
                "List[str]",
                "list",
                "Iterable[Union[Any, int]]",
                "Iterable[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "datetime.datetime"
                ]
            }
        },
        "delete_member": {
            "name": "delete_member",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "member": [
                    "app.models.GameMember",
                    "app.models.course.Course",
                    "bool",
                    "str"
                ]
            }
        },
        "set_member_status_as_resigned": {
            "name": "set_member_status_as_resigned",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "member": [
                    "app.models.GameMember",
                    "datetime.datetime",
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "game-service-master/app/repository/placement_repo.py": {
        "save": {
            "name": "save",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "placement": [
                    "app.models.Tweet",
                    "app.models.Position",
                    "sqlalchemy.orm.query.Query",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "str",
                    "zerver.models.Recipient"
                ]
            }
        },
        "find_game_placements": {
            "name": "find_game_placements",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "IO[bytes]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "game-service-master/app/repository/position_repo.py": {
        "save": {
            "name": "save",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "position": [
                    "app.models.Tweet",
                    "app.models.Position",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "str",
                    "zerver.models.Recipient"
                ]
            }
        },
        "find_member_positions": {
            "name": "find_member_positions",
            "location": 25,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "util.LetterSuffixStyle"
            ],
            "arguments": {
                "member_id": [
                    "str",
                    "int",
                    "transfer.models.TopicID",
                    "transfer.models.ShopID",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID"
                ]
            }
        }
    },
    "game-service-master/app/repository/question_repo.py": {
        "save": {
            "name": "save",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "question": [
                    "app.models.Tweet",
                    "app.models.Position",
                    "sqlalchemy.orm.query.Query",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "str",
                    "zerver.models.Recipient"
                ]
            }
        },
        "find_all": {
            "name": "find_all",
            "location": 35,
            "return": [
                "Dict[str, float]",
                "str",
                "Dict[str, Any]",
                "Dict[battleships.grid.Position, Set[battleships.ship.Ship]]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "except_ids": [
                    "str",
                    "int",
                    "transfer.models.Catalog.ID",
                    "transfer.models.OrderID",
                    "transfer.models.SiteID"
                ]
            }
        },
        "find_previous_question_ids": {
            "name": "find_previous_question_ids",
            "location": 42,
            "return": [
                "str",
                "Dict[str, str]",
                "List[annofabapi.models.Project]",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "game": [
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "find_members_possible_questions": {
            "name": "find_members_possible_questions",
            "location": 55,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Optional[str]",
                    "transfer.models.BadgeID",
                    "int"
                ],
                "member_id": [
                    "int",
                    "transfer.models.ItemID",
                    "shop.transfer.models.ShopID",
                    "str",
                    "transfer.models.SnippetID"
                ]
            }
        },
        "find_members_active_question": {
            "name": "find_members_active_question",
            "location": 75,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ],
                "member_id": [
                    "str",
                    "int",
                    "range",
                    "List[str]"
                ]
            }
        },
        "set_member_question_as_answered": {
            "name": "set_member_question_as_answered",
            "location": 88,
            "return": [
                "zerver.models.Realm",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "question_id": [
                    "int",
                    "IO[bytes]",
                    "str"
                ],
                "position": [
                    "int",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "count_answered_questions": {
            "name": "count_answered_questions",
            "location": 107,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Optional[int]",
                    "transfer.models.ItemID",
                    "int"
                ]
            }
        },
        "save_game_member_question": {
            "name": "save_game_member_question",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "question": [
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 131,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "game-service-master/app/repository/util.py": {
        "handle_error": {
            "name": "handle_error",
            "location": 16,
            "return": [
                "Callable"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "Optional[Callable]",
                    "int",
                    "Callable[[], None]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "integrity_error_class": [
                    "logging.Logger",
                    "Optional[Callable]",
                    "int",
                    "Callable[[], None]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_raise_database_error": {
            "name": "_raise_database_error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "str",
                    "Optional[str]"
                ],
                "e": [
                    "str",
                    "urllib.error.HTTPError",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "handle_error.handle_database_error": {
            "name": "handle_database_error",
            "location": 19,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "f": [
                    "Callable[[], None]",
                    "Iterable[T]",
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]"
                ]
            }
        },
        "handle_error.handle_database_error.decorated": {
            "name": "decorated",
            "location": 21,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "game-service-master/app/service/distance_util.py": {
        "is_within": {
            "name": "is_within",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "origin": [
                    "str",
                    "int"
                ],
                "destination": [
                    "str",
                    "int"
                ],
                "max_dist": [
                    "int"
                ],
                "min_dist": [
                    "int"
                ]
            }
        },
        "is_at_least": {
            "name": "is_at_least",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "origin": [
                    "str",
                    "int"
                ],
                "destination": [
                    "str",
                    "int"
                ],
                "min_dist": [
                    "str",
                    "int"
                ]
            }
        },
        "calculate": {
            "name": "calculate",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "origin": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "destination": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "game-service-master/app/service/game_service.py": {
        "create_game": {
            "name": "create_game",
            "location": 29,
            "return": [
                "str",
                "Dict[str, int]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "new_game": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "user_id": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "delete_game": {
            "name": "delete_game",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "get_game": {
            "name": "get_game",
            "location": 53,
            "return": [
                "str",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "id": [
                    "str",
                    "uuid.UUID",
                    "int"
                ]
            }
        },
        "get_game_by_shortcode": {
            "name": "get_game_by_shortcode",
            "location": 69,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "short_code": [
                    "str",
                    "dict"
                ]
            }
        },
        "start_game": {
            "name": "start_game",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "transfer.models.OrderID",
                    "Optional[int]"
                ],
                "user_id": [
                    "str",
                    "transfer.models.OrderID",
                    "Optional[int]"
                ],
                "coordinate": [
                    "str"
                ]
            }
        },
        "add_game_member": {
            "name": "add_game_member",
            "location": 87,
            "return": [
                "str",
                "dict",
                "int",
                "models.Profile",
                "List[str]"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Union[str, List[str]]",
                    "uuid.UUID"
                ]
            }
        },
        "set_game_member_as_ready": {
            "name": "set_game_member_as_ready",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "game_id": [
                    "str"
                ],
                "member_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "leave_game": {
            "name": "leave_game",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ],
                "member_id": [
                    "str",
                    "Optional[str]"
                ],
                "user_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "check_if_game_ended": {
            "name": "check_if_game_ended",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "game": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "_find_game_and_assert_can_be_started": {
            "name": "_find_game_and_assert_can_be_started",
            "location": 128,
            "return": [
                "str",
                "List[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_map_members_to_dtos": {
            "name": "_map_members_to_dtos",
            "location": 137,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "members": [
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "_member_to_dto": {
            "name": "_member_to_dto",
            "location": 141,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "member": [
                    "server.models.Reservation",
                    "lunch_buddies.models.polls.Poll",
                    "bool"
                ]
            }
        },
        "_map_questions_to_game": {
            "name": "_map_questions_to_game",
            "location": 152,
            "return": [
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ],
                "questions": [
                    "str",
                    "int"
                ]
            }
        },
        "_assert_valid_shortcode": {
            "name": "_assert_valid_shortcode",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "short_code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "game-service-master/app/service/game_state_util.py": {
        "assert_game_exists": {
            "name": "assert_game_exists",
            "location": 22,
            "return": [
                "str",
                "List[str]",
                "dict",
                "tracim.models.data.Content"
            ],
            "arguments": {
                "game_id": [
                    "int",
                    "str"
                ]
            }
        },
        "assert_active_game_exists": {
            "name": "assert_active_game_exists",
            "location": 30,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ]
            }
        },
        "assert_valid_game_member": {
            "name": "assert_valid_game_member",
            "location": 38,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Optional[str]"
                ],
                "member_id": [
                    "str",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "transfer.models.Image.ID"
                ],
                "user_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "assert_all_members_ready": {
            "name": "assert_all_members_ready",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "app.models.Question",
                    "app.models.Position",
                    "dep_check.models.Rules",
                    "app.models.Game",
                    "str"
                ]
            }
        },
        "assert_user_is_game_admin": {
            "name": "assert_user_is_game_admin",
            "location": 59,
            "return": [
                "List[django.db.models.Model]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "game": [
                    "str",
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "assert_game_not_started": {
            "name": "assert_game_not_started",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "str",
                    "Game",
                    "src.game.Game"
                ]
            }
        }
    },
    "game-service-master/app/service/health.py": {
        "check": {
            "name": "check",
            "location": 17,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "_db_connected": {
            "name": "_db_connected",
            "location": 26,
            "return": [
                "bool",
                "Optional[Callable]",
                "str"
            ],
            "arguments": {}
        }
    },
    "game-service-master/app/service/position_service.py": {
        "add_position": {
            "name": "add_position",
            "location": 23,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "app.models.dto.PositionDTO",
                    "dict"
                ],
                "user_id": [
                    "str",
                    "app.models.dto.PositionDTO",
                    "dict"
                ],
                "position_dto": [
                    "str",
                    "app.models.dto.PositionDTO",
                    "dict",
                    "int"
                ]
            }
        },
        "_position_is_answer_to": {
            "name": "_position_is_answer_to",
            "location": 38,
            "return": [
                "str",
                "int",
                "Callable[[None, None], bool]",
                "Dict[str, int]",
                "bytes"
            ],
            "arguments": {
                "game": [
                    "Dict[str, Any]",
                    "cmk.base.config.ConfigCache"
                ],
                "position": [
                    "cmk.base.config.ConfigCache",
                    "app.models.Game"
                ]
            }
        },
        "_answer_question": {
            "name": "_answer_question",
            "location": 52,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "game": [
                    "app.models.Game"
                ],
                "member": [
                    "app.models.Game",
                    "game_engine.Game"
                ],
                "question": [
                    "app.models.Question",
                    "app.models.Position",
                    "Callable[[Optional, Optional, str], None]",
                    "Container"
                ],
                "position": [
                    "app.models.Question",
                    "app.models.Position",
                    "Callable[[Optional, Optional, str], None]",
                    "Container"
                ]
            }
        },
        "_create_and_store_position": {
            "name": "_create_and_store_position",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "dto": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[int]",
                    "Optional[str]"
                ]
            }
        },
        "_create_success_result": {
            "name": "_create_success_result",
            "location": 74,
            "return": [
                "dict",
                "Callable",
                "float",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "question": [
                    "bool",
                    "app.models.Question",
                    "int",
                    "str",
                    "cmk.base.config.HostConfig",
                    "Callable[..., None]"
                ],
                "finished": [
                    "bool",
                    "app.models.Question",
                    "int",
                    "str",
                    "cmk.base.config.HostConfig",
                    "Callable[..., None]"
                ]
            }
        },
        "_member_is_done": {
            "name": "_member_is_done",
            "location": 80,
            "return": [
                "int",
                "float",
                "annofabapi.models.Inspection",
                "bytes",
                "trace.Trace"
            ],
            "arguments": {
                "game": [
                    "app.models.Game",
                    "List[str]",
                    "game_engine.Game",
                    "list",
                    "Optional[str]"
                ],
                "member": [
                    "game_engine.Game",
                    "app.models.Game",
                    "app.models.Position"
                ]
            }
        },
        "_assert_existing_game_and_member": {
            "name": "_assert_existing_game_and_member",
            "location": 85,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int",
                    "List[str]",
                    "uuid.UUID",
                    "List[Tuple[str, str, str, str, str]]"
                ],
                "user_id": [
                    "str"
                ],
                "member_id": [
                    "str"
                ]
            }
        }
    },
    "game-service-master/app/service/question_service.py": {
        "add_question": {
            "name": "add_question",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "new_q": [
                    "Dict[str, Any]",
                    "dict",
                    "List[str]",
                    "T",
                    "list"
                ]
            }
        },
        "get_question": {
            "name": "get_question",
            "location": 33,
            "return": [
                "str",
                "int",
                "bool",
                "Union[server.models.Bike, int]",
                "transfer.models.PaymentState"
            ],
            "arguments": {
                "question_id": [
                    "str",
                    "int"
                ]
            }
        },
        "find_questions_for_game": {
            "name": "find_questions_for_game",
            "location": 41,
            "return": [
                "str",
                "float",
                "int",
                "bool",
                "List[str]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "game": [
                    "app.models.Game",
                    "Dict[str, Any]",
                    "daylighdb.models.Photo",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "coordinate": [
                    "app.models.dto.CoordinateDTO",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "get_members_next_question": {
            "name": "get_members_next_question",
            "location": 48,
            "return": [
                "int",
                "bool",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int",
                    "app.models.dto.PositionDTO"
                ],
                "member_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "current_position": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_select_questions": {
            "name": "_select_questions",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "questions": [
                    "List[app.models.Question]",
                    "bool",
                    "bytes",
                    "str",
                    "float"
                ],
                "origin": [
                    "List[app.models.Question]",
                    "bool",
                    "bytes",
                    "str",
                    "float"
                ],
                "no_questions": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "_select_question": {
            "name": "_select_question",
            "location": 74,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "questions": [
                    "int",
                    "str",
                    "trace.Trace",
                    "List[str]",
                    "denite.util.Nvim"
                ],
                "origin": [
                    "int",
                    "str",
                    "trace.Trace",
                    "List[str]",
                    "denite.util.Nvim"
                ],
                "previous": [
                    "int",
                    "str",
                    "trace.Trace",
                    "List[str]",
                    "denite.util.Nvim"
                ]
            }
        },
        "_select_questions_within": {
            "name": "_select_questions_within",
            "location": 85,
            "return": [
                "str",
                "int",
                "list",
                "bool",
                "List[Tuple[str, str]]",
                "Sequence[int]",
                "Optional[dict]"
            ],
            "arguments": {
                "questions": [
                    "int",
                    "dict",
                    "List[int]",
                    "str"
                ],
                "origin": [
                    "int",
                    "dict",
                    "List[int]",
                    "str"
                ],
                "min_dist": [
                    "int",
                    "float"
                ],
                "max_dist": [
                    "int",
                    "dict",
                    "List[int]",
                    "str"
                ],
                "previous": [
                    "List[app.models.Question]",
                    "bool",
                    "str"
                ]
            }
        },
        "_previous_are_far_enough": {
            "name": "_previous_are_far_enough",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "question": [
                    "int",
                    "app.models.Question",
                    "str"
                ],
                "previous": [
                    "str",
                    "int",
                    "List[app.models.Question]",
                    "bool"
                ],
                "min_dist": [
                    "int",
                    "app.models.Question",
                    "str"
                ]
            }
        },
        "_select_closest_question": {
            "name": "_select_closest_question",
            "location": 111,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "questions": [
                    "str",
                    "List[str]",
                    "int",
                    "Sequence[T]",
                    "models.Route",
                    "Union[List[str], List[int]]"
                ],
                "coordinate": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_filter_to_close_questions": {
            "name": "_filter_to_close_questions",
            "location": 121,
            "return": [
                "str",
                "Tuple[int, int]",
                "List[str]",
                "Optional[Union[str, Any]]",
                "bool"
            ],
            "arguments": {
                "questions": [
                    "app.models.dto.CoordinateDTO",
                    "List[app.models.Question]",
                    "str",
                    "dict",
                    "defaultdict"
                ],
                "coordinate": [
                    "app.models.dto.CoordinateDTO",
                    "List[app.models.Question]",
                    "str",
                    "dict",
                    "defaultdict"
                ]
            }
        },
        "_find_closest_question": {
            "name": "_find_closest_question",
            "location": 132,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "questions": [
                    "List[app.models.Question]",
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "coordinate": [
                    "Optional[str]",
                    "str",
                    "Type",
                    "list"
                ]
            }
        },
        "_create_and_save_game_member_question": {
            "name": "_create_and_save_game_member_question",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "dict",
                    "grouper.models.group.Group",
                    "List[Dict[str, Any]]"
                ],
                "member_id": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand",
                    "Optional[str]"
                ],
                "question": [
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "dict",
                    "grouper.models.group.Group",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_assert_enough_questions": {
            "name": "_assert_enough_questions",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "questions": [
                    "int",
                    "List[app.models.Question]",
                    "str",
                    "dict",
                    "Callable"
                ],
                "expected": [
                    "int",
                    "List[app.models.Question]",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "_filter_questions": {
            "name": "_filter_questions",
            "location": 160,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]",
                "List[int]"
            ],
            "arguments": {
                "questions": [
                    "List[app.models.Question]",
                    "app.models.Question",
                    "models.Name",
                    "str"
                ],
                "exclude": [
                    "List[app.models.Question]",
                    "app.models.Question",
                    "models.Name",
                    "str"
                ]
            }
        },
        "to_dto": {
            "name": "to_dto",
            "location": 164,
            "return": [
                "dict",
                "bool",
                "allennlp.models.model.Model",
                "str"
            ],
            "arguments": {
                "question": [
                    "app.models.Question",
                    "bool",
                    "Optional[AbstractSet[str]]"
                ]
            }
        }
    },
    "game-service-master/app/service/user_service.py": {
        "fetch_user": {
            "name": "fetch_user",
            "location": 23,
            "return": [
                "str",
                "List[Tuple[str, int]]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_fetch_user_with_cache": {
            "name": "_fetch_user_with_cache",
            "location": 34,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "game-service-master/app/service/util.py": {
        "new_id": {
            "name": "new_id",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "game-service-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "game-service-master/migrations/versions/861215ba557e_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_add_member.py": {
        "test_add_game_member": {
            "name": "test_add_game_member",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_distance_util.py": {
        "test_calculate_distance": {
            "name": "test_calculate_distance",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_within": {
            "name": "test_is_within",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_at_least": {
            "name": "test_is_at_least",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_game_crud.py": {
        "test_create_game": {
            "name": "test_create_game",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_delete_game": {
            "name": "test_delete_game",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_get_game": {
            "name": "test_get_game",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_get_game_by_shortcode": {
            "name": "test_get_game_by_shortcode",
            "location": 315,
            "return": [],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_health.py": {
        "test_get_health": {
            "name": "test_get_health",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_health_fail": {
            "name": "test_get_health_fail",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_leave_game.py": {
        "test_leave_game": {
            "name": "test_leave_game",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_players_resign_game": {
            "name": "test_all_players_resign_game",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_position_crud.py": {
        "test_add_position": {
            "name": "test_add_position",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_question_crud.py": {
        "test_add_question": {
            "name": "test_add_question",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_add_question_403_401_and_400": {
            "name": "test_add_question_403_401_and_400",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_get_question": {
            "name": "test_get_question",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_get_members_next_question": {
            "name": "test_get_members_next_question",
            "location": 141,
            "return": [],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_set_member_as_ready.py": {
        "test_add_game_member": {
            "name": "test_add_game_member",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_start_game.py": {
        "test_start_game": {
            "name": "test_start_game",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_start_game_with_too_few_questions": {
            "name": "test_start_game_with_too_few_questions",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_start_game_bad_state": {
            "name": "test_start_game_bad_state",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_start_game_bad_request": {
            "name": "test_start_game_bad_request",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game-service-master/tests/__init__.py": {
        "new_id": {
            "name": "new_id",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "insert_items": {
            "name": "insert_items",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "List[app.db.Model]",
                    "List[str]",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        },
        "headers": {
            "name": "headers",
            "location": 28,
            "return": [
                "str",
                "Type[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "role": [
                    "str",
                    "int"
                ]
            }
        },
        "TestEnvironment.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "TestEnvironment.__enter__": {
            "name": "__enter__",
            "location": 42,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironment.__exit__": {
            "name": "__exit__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        }
    }
}
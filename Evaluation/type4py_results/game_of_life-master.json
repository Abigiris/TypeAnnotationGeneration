{
    "game_of_life-master/game_of_life/game.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "game_of_life-master/game_of_life/game_of_life.py": {
        "signal_handler": {
            "name": "signal_handler",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "_sig": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "World.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size_x": [
                    "int",
                    "bool"
                ],
                "size_y": [
                    "int",
                    "bool"
                ],
                "randomize": [
                    "int",
                    "bool"
                ]
            }
        },
        "World.randomize": {
            "name": "randomize",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int",
                    "Iterator[int]",
                    "Union[Tuple[int, int], int]"
                ],
                "size_x": [
                    "int"
                ],
                "size_y": [
                    "int"
                ]
            }
        },
        "World._find_corner": {
            "name": "_find_corner",
            "location": 43,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[T], Optional[T]]",
                    "Iterable[T]"
                ],
                "empty_pos": [
                    "Callable[[], Any]"
                ]
            }
        },
        "World.min_pos": {
            "name": "min_pos",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.max_pos": {
            "name": "max_pos",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World._new_cell": {
            "name": "_new_cell",
            "location": 62,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cell": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "neighbours": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "World.calculate_neighbours": {
            "name": "calculate_neighbours",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "World.neighbours": {
            "name": "neighbours",
            "location": 78,
            "return": [
                "typing.Iterable[Pos]"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "World.cell_alive": {
            "name": "cell_alive",
            "location": 92,
            "return": [
                "int",
                "Tuple[str]",
                "bool",
                "Union[int, slice]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "float"
                ]
            }
        },
        "World.update": {
            "name": "update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.set_cell": {
            "name": "set_cell",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "T",
                    "int",
                    "VT"
                ]
            }
        },
        "World.lines": {
            "name": "lines",
            "location": 113,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "int"
            ],
            "arguments": {
                "self": [],
                "top_left": [
                    "int",
                    "Optional[float]"
                ],
                "bottom_right": [
                    "int",
                    "Optional[int]",
                    "Union[int, List]",
                    "slice"
                ]
            }
        },
        "World.__str__": {
            "name": "__str__",
            "location": 135,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.__getitem__": {
            "name": "__getitem__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "World.__len__": {
            "name": "__len__",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size_x": [
                    "int",
                    "float",
                    "bool"
                ],
                "size_y": [
                    "int",
                    "float"
                ],
                "randomize": [
                    "int",
                    "Union[int, float]",
                    "Tuple[int, int, int]",
                    "Optional[int]"
                ]
            }
        },
        "Game.move_left": {
            "name": "move_left",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.move_right": {
            "name": "move_right",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.move_up": {
            "name": "move_up",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.move_down": {
            "name": "move_down",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.get_number_of_generations": {
            "name": "get_number_of_generations",
            "location": 176,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.handle_command": {
            "name": "handle_command",
            "location": 184,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, object]"
                ]
            }
        },
        "Game.animate": {
            "name": "animate",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int",
                    "Callable",
                    "str"
                ],
                "timestep": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Game.exit": {
            "name": "exit",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "float"
                ],
                "status": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Game.kill": {
            "name": "kill",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.ask_user": {
            "name": "ask_user",
            "location": 232,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "dict",
                    "str"
                ]
            }
        },
        "Game.print_world": {
            "name": "print_world",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CursesGame.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size_x": [
                    "int",
                    "bool"
                ],
                "size_y": [
                    "int",
                    "float",
                    "bool"
                ],
                "randomize": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "str",
                    "Union[int, float]"
                ],
                "max_size": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "CursesGame.init_curses": {
            "name": "init_curses",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_size": [
                    "bool",
                    "int"
                ]
            }
        },
        "CursesGame.print_world": {
            "name": "print_world",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CursesGame.get_command_from_user": {
            "name": "get_command_from_user",
            "location": 286,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CursesGame.ask_user": {
            "name": "ask_user",
            "location": 290,
            "return": [
                "str",
                "Optional[bool]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "CursesGame.kill": {
            "name": "kill",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenGame.print_world": {
            "name": "print_world",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenGame.get_command_from_user": {
            "name": "get_command_from_user",
            "location": 310,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenGame.kill": {
            "name": "kill",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "game_of_life-master/tests/context.py": {},
    "game_of_life-master/tests/test_basic.py": {
        "curses_game": {
            "name": "curses_game",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "game": {
            "name": "game",
            "location": 21,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "empty_screen_game": {
            "name": "empty_screen_game",
            "location": 26,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "TestGame.test_corners_moves_if_move_left": {
            "name": "test_corners_moves_if_move_left",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "TestGame.test_corners_moves_if_move_right": {
            "name": "test_corners_moves_if_move_right",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "TestGame.test_corners_moves_if_move_up": {
            "name": "test_corners_moves_if_move_up",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "TestGame.test_corners_moves_if_move_down": {
            "name": "test_corners_moves_if_move_down",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "TestGame.test_exit_raises_system_exit": {
            "name": "test_exit_raises_system_exit",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "TestGame.test_exit_with_msg_print_message": {
            "name": "test_exit_with_msg_print_message",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ],
                "capsys": []
            }
        },
        "TestGame.test_exit_exits_with_correct_code": {
            "name": "test_exit_exits_with_correct_code",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "TestGame.test_handle_command_w_calls_move_up": {
            "name": "test_handle_command_w_calls_move_up",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Container"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestGame.test_handle_command_s_calls_move_down": {
            "name": "test_handle_command_s_calls_move_down",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Container",
                    "dict"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestGame.test_handle_command_a_calls_move_left": {
            "name": "test_handle_command_a_calls_move_left",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestGame.test_handle_command_d_calls_move_right": {
            "name": "test_handle_command_d_calls_move_right",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Container"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestGame.test_handle_command_q_calls_exit": {
            "name": "test_handle_command_q_calls_exit",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Container"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestGame.test_handle_command_space_calls_update_world": {
            "name": "test_handle_command_space_calls_update_world",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestGame.test_handle_command_r_calls_get_number_of_generations": {
            "name": "test_handle_command_r_calls_get_number_of_generations",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestGame.test_get_number_of_generations_calls_ask_user": {
            "name": "test_get_number_of_generations_calls_ask_user",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestGame.test_get_number_of_generations_with_invalid_input_returns_None": {
            "name": "test_get_number_of_generations_with_invalid_input_returns_None",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Optional[List[Any]]",
                    "Optional[Iterable[Any]]",
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestScreenGame.test_print_empty_game": {
            "name": "test_print_empty_game",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_screen_game": [
                    "str"
                ],
                "capsys": [
                    "int"
                ]
            }
        },
        "TestScreenGame.test_animate_empty_game_prints_empty_worlds": {
            "name": "test_animate_empty_game_prints_empty_worlds",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_screen_game": [
                    "str"
                ],
                "capsys": [
                    "int"
                ]
            }
        }
    },
    "game_of_life-master/tests/test_world.py": {
        "world": {
            "name": "world",
            "location": 21,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "TestWorldPositions.test_min_pos_empty_world_is_0_0": {
            "name": "test_min_pos_empty_world_is_0_0",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": []
            }
        },
        "TestWorldPositions.test_max_pos_empty_world_is_0_0": {
            "name": "test_max_pos_empty_world_is_0_0",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "TestWorldPositions.test_one_cell_is_both_min_and_max": {
            "name": "test_one_cell_is_both_min_and_max",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pos": [],
                "world": []
            }
        },
        "TestWorldPositions.test_bounding_rectangle": {
            "name": "test_bounding_rectangle",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": [
                    "float",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "TestPrintWorld.test_print_empty_world": {
            "name": "test_print_empty_world",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ],
                "world": [
                    "str"
                ]
            }
        },
        "TestPrintWorld.test_print_one_cell_world": {
            "name": "test_print_one_cell_world",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ],
                "world": [
                    "float",
                    "int"
                ]
            }
        },
        "TestPrintWorld.test_print_screen_3x4_world": {
            "name": "test_print_screen_3x4_world",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ],
                "world": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestWorldInit.test_new_world_is_empty": {
            "name": "test_new_world_is_empty",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": []
            }
        },
        "TestWorldInit.test_random_init_contains_correct_number_of_alive_cells": {
            "name": "test_random_init_contains_correct_number_of_alive_cells",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "int"
                ],
                "world": [
                    "str",
                    "int"
                ]
            }
        },
        "TestWorldInit.test_random_init_with_too_many_cells_raises_exception": {
            "name": "test_random_init_with_too_many_cells_raises_exception",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": []
            }
        },
        "TestWorldNeighbours.test_has_correct_neighbours": {
            "name": "test_has_correct_neighbours",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": [
                    "str"
                ]
            }
        },
        "TestUpdateCells.test_step_empty_world_is_empty": {
            "name": "test_step_empty_world_is_empty",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "world": []
            }
        },
        "TestUpdateCells.test_dead_cell": {
            "name": "test_dead_cell",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alive_cells": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "alive": [
                    "str",
                    "float"
                ]
            }
        },
        "TestUpdateCells.test_live_cell": {
            "name": "test_live_cell",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alive_cells": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "alive": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "game_of_life-master/tests/__init__.py": {}
}
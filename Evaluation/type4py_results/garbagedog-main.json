{
    "garbagedog-main/setup.py": {},
    "garbagedog-main/garbagedog/constants.py": {
        "GCEventType.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "gc_text": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "is_stop_the_world": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "GCEventType.from_gc_line": {
            "name": "from_gc_line",
            "location": 49,
            "return": [
                "bool",
                "float",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float",
                    "list"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "garbagedog-main/garbagedog/event_processor.py": {
        "GCEventProcessor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dogstatsd_host": [
                    "str",
                    "int",
                    "Optional[\"Address\"]"
                ],
                "dogstatsd_port": [
                    "str",
                    "int",
                    "Optional[\"Address\"]"
                ],
                "extra_tags": [
                    "str",
                    "int",
                    "Optional[\"Address\"]"
                ],
                "verbose": [
                    "int",
                    "Optional[Callable[[Any], None]]",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "GCEventProcessor.process_log_directory": {
            "name": "process_log_directory",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_directory": [
                    "Union[int, str]",
                    "str",
                    "Exception",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "glob_pattern": [
                    "Union[int, str]",
                    "str",
                    "Exception",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "refresh_logfiles_seconds": [
                    "Union[int, str]",
                    "str",
                    "Exception",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "sleep_seconds": [
                    "Union[int, str]",
                    "str",
                    "Exception",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "GCEventProcessor.process_stdin": {
            "name": "process_stdin",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCEventProcessor._process_for_frequency_stats": {
            "name": "_process_for_frequency_stats",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stripped_line": [
                    "int",
                    "Type",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "GCEventProcessor._process_eventline": {
            "name": "_process_eventline",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stripped_line": [
                    "int",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "Optional[bool]"
                ]
            }
        },
        "GCEventProcessor._process_line": {
            "name": "_process_line",
            "location": 123,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "inline": [
                    "str",
                    "int",
                    "set"
                ],
                "previous_record": []
            }
        }
    },
    "garbagedog-main/garbagedog/utils.py": {
        "parse_line_for_times": {
            "name": "parse_line_for_times",
            "location": 106,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "parse_line_for_sizes": {
            "name": "parse_line_for_sizes",
            "location": 120,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, 'LabwareDefinition']"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ]
            }
        },
        "printv": {
            "name": "printv",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "verbose": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "GCLogHandler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_directory": [
                    "str",
                    "float",
                    "Optional[MutableMapping]",
                    "dict",
                    "bytes"
                ],
                "glob_pattern": [
                    "Iterable[str]",
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ],
                "refresh_logfiles_seconds": [
                    "Iterable[str]",
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ],
                "sleep_seconds": [
                    "Iterable[str]",
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ],
                "verbose": [
                    "Iterable[str]",
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "GCLogHandler.__enter__": {
            "name": "__enter__",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCLogHandler.__exit__": {
            "name": "__exit__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "Optional[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[Exception]"
                ],
                "exception_value": [
                    "Optional[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[Exception]"
                ],
                "traceback": [
                    "Optional[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Optional[Exception]"
                ]
            }
        },
        "GCLogHandler.__iter__": {
            "name": "__iter__",
            "location": 55,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCLogHandler.get_log_lines": {
            "name": "get_log_lines",
            "location": 58,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "GCLogHandler._load_newest_file": {
            "name": "_load_newest_file",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "garbagedog-main/garbagedog/__init__.py": {},
    "garbagedog-main/tests/test_constants.py": {
        "test_from_gc_line": {
            "name": "test_from_gc_line",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_from_gc_line_unknown": {
            "name": "test_from_gc_line_unknown",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "garbagedog-main/tests/test_event_processor.py": {
        "test_process_line": {
            "name": "test_process_line",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "garbagedog-main/tests/test_utils.py": {
        "test_parse_line_for_times": {
            "name": "test_parse_line_for_times",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_line_for_times_no_match": {
            "name": "test_parse_line_for_times_no_match",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_line_for_sizes": {
            "name": "test_parse_line_for_sizes",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_line_for_sizes_no_match": {
            "name": "test_parse_line_for_sizes_no_match",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gc_log_handler": {
            "name": "test_gc_log_handler",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_gc_log_handler_newest_log": {
            "name": "test_gc_log_handler_newest_log",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "garbagedog-main/tests/__init__.py": {}
}
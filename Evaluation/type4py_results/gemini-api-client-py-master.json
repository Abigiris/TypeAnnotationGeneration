{
    "gemini-api-client-py-master/buyETH.py": {},
    "gemini-api-client-py-master/buyETHSandbox.py": {},
    "gemini-api-client-py-master/data.py": {
        "save_price": {
            "name": "save_price",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "price": [
                    "symbols.Currency",
                    "str",
                    "IO"
                ]
            }
        },
        "save_order": {
            "name": "save_order",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "order": [
                    "symbols.Order",
                    "str",
                    "List[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "bytes"
                ]
            }
        },
        "load_active_orders": {
            "name": "load_active_orders",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "save_active_orders": {
            "name": "save_active_orders",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "orders": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "load_closed_orders": {
            "name": "load_closed_orders",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "save_closed_orders": {
            "name": "save_closed_orders",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "orders": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "gemini-api-client-py-master/first.py": {},
    "gemini-api-client-py-master/gemini_api.py": {
        "retry_if_exception": {
            "name": "retry_if_exception",
            "location": 42,
            "return": [
                "float",
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "func": [
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        },
        "get_nonce": {
            "name": "get_nonce",
            "location": 56,
            "return": [
                "str",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "min_nonce": [
                    "str",
                    "bool"
                ]
            }
        },
        "base_headers": {
            "name": "base_headers",
            "location": 76,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "bytes",
                    "int",
                    "bool"
                ],
                "request_json": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "request": {
            "name": "request",
            "location": 92,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[Dict]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "request_json": [
                    "str",
                    "Dict[str, str]"
                ],
                "method": [
                    "str",
                    "Dict[str, str]"
                ],
                "public": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "websocket_request": {
            "name": "websocket_request",
            "location": 120,
            "return": [
                "dict"
            ],
            "arguments": {
                "url": [
                    "Optional[dict]",
                    "str",
                    "requests.Response"
                ],
                "request_json": [
                    "dict",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "requests.Response"
                ]
            }
        },
        "heartbeat": {
            "name": "heartbeat",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ticker": {
            "name": "ticker",
            "location": 147,
            "return": [
                "int",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "new_order": {
            "name": "new_order",
            "location": 151,
            "return": [
                "str",
                "bool",
                "List[bytes]"
            ],
            "arguments": {
                "side": [
                    "str",
                    "symbols.Currency",
                    "int"
                ],
                "symbol": [
                    "str",
                    "symbols.Currency",
                    "int"
                ],
                "amt": [
                    "str",
                    "symbols.Currency",
                    "int"
                ],
                "price": [
                    "str",
                    "symbols.Currency",
                    "int"
                ]
            }
        },
        "order_status": {
            "name": "order_status",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "order_id": [
                    "str",
                    "int"
                ]
            }
        },
        "order_events": {
            "name": "order_events",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "order_id": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "retry_if_exception.wrapped": {
            "name": "wrapped",
            "location": 43,
            "return": [
                "Dict[str, int]",
                "int",
                "float",
                "Generator"
            ],
            "arguments": {}
        }
    },
    "gemini-api-client-py-master/secrets_default.py": {},
    "gemini-api-client-py-master/settings.py": {},
    "gemini-api-client-py-master/symbols.py": {
        "Currency.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "Currency.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Currency.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Currency.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__radd__": {
            "name": "__radd__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__sub__": {
            "name": "__sub__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__rsub__": {
            "name": "__rsub__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__mul__": {
            "name": "__mul__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__gt__": {
            "name": "__gt__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__ge__": {
            "name": "__ge__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__lt__": {
            "name": "__lt__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Currency.__le__": {
            "name": "__le__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Order.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "Order.__getattr__": {
            "name": "__getattr__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Order.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Order.is_filled": {
            "name": "is_filled",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Order.buy_amt": {
            "name": "buy_amt",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Order.price_amt": {
            "name": "price_amt",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Order.filled_amt": {
            "name": "filled_amt",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gemini-api-client-py-master/__init__.py": {}
}
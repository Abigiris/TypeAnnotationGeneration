{
    "gemini-master/setup.py": {},
    "gemini-master/gemini/logger.py": {
        "read_config": {
            "name": "read_config",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gemini-master/gemini/master.py": {
        "index": {
            "name": "index",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 33,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "join": {
            "name": "join",
            "location": 42,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "auth": {
            "name": "auth",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "Dict[int, dict]",
                "bool"
            ],
            "arguments": {}
        },
        "create_job": {
            "name": "create_job",
            "location": 80,
            "return": [
                "str",
                "Union[str, List[str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "get_jobs": {
            "name": "get_jobs",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ping": {
            "name": "ping",
            "location": 100,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "refresh": {
            "name": "refresh",
            "location": 107,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "random_node_id": {
            "name": "random_node_id",
            "location": 119,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "generate_node_id": {
            "name": "generate_node_id",
            "location": 126,
            "return": [
                "str",
                "Optional[int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "generate_node_token": {
            "name": "generate_node_token",
            "location": 130,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "generate_node_password": {
            "name": "generate_node_password",
            "location": 134,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "start_master": {
            "name": "start_master",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gemini-master/gemini/metadata.py": {
        "version": {
            "name": "version",
            "location": 3,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "gemini-master/gemini/node.py": {
        "read_node_file": {
            "name": "read_node_file",
            "location": 22,
            "return": [
                "str",
                "bytes",
                "Optional[\"permissions_doc\"]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "write_node_file": {
            "name": "write_node_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "node_data": [
                    "dict",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "node_file_exists": {
            "name": "node_file_exists",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "start_node": {
            "name": "start_node",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "join": {
            "name": "join",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "authenticate": {
            "name": "authenticate",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "node_id": [],
                "password": []
            }
        },
        "run_docker_container": {
            "name": "run_docker_container",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "image": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "command": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "get_jobs": {
            "name": "get_jobs",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "run_jobs": {
            "name": "run_jobs",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "jobs": [
                    "Set[int]"
                ]
            }
        },
        "check_and_run": {
            "name": "check_and_run",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "node_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_loops": {
            "name": "create_loops",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gemini-master/gemini/storage.py": {
        "determine_store": {
            "name": "determine_store",
            "location": 72,
            "return": [
                "Exception",
                "Dict[str, bool]",
                "str",
                "dict",
                "Union[Dict, str]"
            ],
            "arguments": {
                "store": [
                    "List[dict]",
                    "int"
                ]
            }
        },
        "NodeInfoRepository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeInfoRepository.put_node": {
            "name": "put_node",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "NodeInfoRepository.get_node": {
            "name": "get_node",
            "location": 24,
            "return": [
                "node"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "NodeInfoRepository.get_all_nodes": {
            "name": "get_all_nodes",
            "location": 28,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNodeInfoRepository.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNodeInfoRepository.put_node": {
            "name": "put_node",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "int",
                    "str",
                    "Optional['ModelOrDc']",
                    "Dict[str, Any]"
                ]
            }
        },
        "MemoryNodeInfoRepository.get_node": {
            "name": "get_node",
            "location": 39,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int",
                    "str"
                ]
            }
        },
        "MemoryNodeInfoRepository.get_all_nodes": {
            "name": "get_all_nodes",
            "location": 42,
            "return": [
                "bool",
                "dict",
                "bytes",
                "str",
                "Sequence",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulNodeInfoRepository.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsulNodeInfoRepository.put_node": {
            "name": "put_node",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "Tuple[bytes, int]",
                    "Dict[str, tuple]"
                ]
            }
        },
        "ConsulNodeInfoRepository.get_node": {
            "name": "get_node",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str"
                ]
            }
        },
        "ConsulNodeInfoRepository.get_all_nodes": {
            "name": "get_all_nodes",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gemini-master/gemini/__init__.py": {},
    "gemini-master/gemini/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "master": {
            "name": "master",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "node": {
            "name": "node",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "gemini-master/tests/test_init.py": {
        "TestGemini.test_dummy": {
            "name": "test_dummy",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
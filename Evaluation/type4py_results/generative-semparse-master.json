{
    "generative-semparse-master/gensem/__init__.py": {},
    "generative-semparse-master/gensem/models/wikitables_question_generator.py": {
        "WikiTablesQuestionGenerator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "source_embedder": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "encoder": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "max_decoding_steps": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "encode_trees": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "attention": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "attention_function": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "beam_size": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "target_namespace": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "target_embedding_dim": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "scheduled_sampling_ratio": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ],
                "use_bleu": [
                    "int",
                    "allennlp.modules.TextFieldEmbedder",
                    "float",
                    "bool",
                    "str",
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.data.Vocabulary",
                    "allennlp.modules.similarity_functions.SimilarityFunction"
                ]
            }
        },
        "WikiTablesQuestionGenerator.forward": {
            "name": "forward",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "action_sequences": [
                    "str"
                ],
                "actions": [
                    "str"
                ],
                "world": [
                    "str"
                ],
                "target_tokens": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WikiTablesQuestionGenerator._encode": {
            "name": "_encode",
            "location": 91,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[Union[Any, str]]",
                "OrderedDict",
                "model.Integration",
                "str"
            ],
            "arguments": {
                "self": [],
                "action_sequences": [
                    "zerver.models.Realm",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "lunch_buddies.models.polls.Poll",
                    "torch.Tensor"
                ],
                "actions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "world": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "WikiTablesQuestionGenerator._init_decoder_state": {
            "name": "_init_decoder_state",
            "location": 130,
            "return": [
                "bool",
                "str",
                "Callable",
                "app.models.Tweet"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str, torch.Tensor]",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "WikiTablesQuestionGenerator._merge_output_dicts": {
            "name": "_merge_output_dicts",
            "location": 146,
            "return": [
                "allennlp.common.util.JsonDict",
                "dict",
                "bytes",
                "Dict[str, torch.Tensor]"
            ],
            "arguments": {
                "self": [],
                "candidate_output_dicts": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "WikiTablesQuestionGenerator._get_final_encoder_states": {
            "name": "_get_final_encoder_states",
            "location": 197,
            "return": [
                "IO",
                "Mapping[str, Any]",
                "torch.Tensor",
                "str",
                "int"
            ],
            "arguments": {
                "encoder_outputs": [
                    "bytes",
                    "torch.Tensor",
                    "int",
                    "str"
                ],
                "mask": [
                    "torch.Tensor",
                    "str",
                    "allennlp.common.util.JsonDict",
                    "Type[T]"
                ],
                "bidirectional": [
                    "bool",
                    "dict",
                    "List[str]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "generative-semparse-master/gensem/models/__init__.py": {},
    "generative-semparse-master/gensem/modules/rnn_grammar_state.py": {
        "RnnGrammarState.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nonterminal_stack": [
                    "int",
                    "bool",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "is_nonterminal": [
                    "int",
                    "bool",
                    "Callable[[str], bool]",
                    "List[int]"
                ]
            }
        },
        "RnnGrammarState._get_nonterminals_from_rule": {
            "name": "_get_nonterminals_from_rule",
            "location": 19,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "production_rule": [
                    "str",
                    "Callable"
                ]
            }
        },
        "RnnGrammarState.update": {
            "name": "update",
            "location": 32,
            "return": [
                "str",
                "Optional[\"Cell\"]"
            ],
            "arguments": {
                "self": [],
                "production_rule": [
                    "str",
                    "List[str]",
                    "bytes",
                    "bytearray"
                ],
                "rnn_state": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RnnGrammarState.get_child_rnn_states": {
            "name": "get_child_rnn_states",
            "location": 59,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]"
            ],
            "arguments": {
                "self": [],
                "production_rule": [
                    "Dict[str, AsyncGenerator]",
                    "Tuple[float, float]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "generative-semparse-master/gensem/modules/tree_lstm.py": {
        "TreeLSTM.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "torch.Tensor",
                    "float",
                    "str",
                    "Callable"
                ],
                "output_dim": [
                    "int",
                    "str",
                    "torch.Tensor",
                    "float",
                    "Callable"
                ]
            }
        },
        "TreeLSTM.get_input_dim": {
            "name": "get_input_dim",
            "location": 27,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeLSTM.get_output_dim": {
            "name": "get_output_dim",
            "location": 31,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeLSTM.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeLSTM._aggregate_child_states": {
            "name": "_aggregate_child_states",
            "location": 38,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "child_rnn_states": [
                    "int",
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState"
                ]
            }
        },
        "TreeLSTM.forward": {
            "name": "forward",
            "location": 56,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.Tensor",
                    "float",
                    "torch.LongTensor",
                    "set"
                ],
                "mask": [
                    "torch.LongTensor",
                    "Callable[[str], float]",
                    "float",
                    "bool"
                ],
                "production_rules": [
                    "bool",
                    "int",
                    "float"
                ],
                "is_nonterminal": [
                    "Callable[[str], bool]",
                    "bool",
                    "int",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ]
            }
        }
    },
    "generative-semparse-master/gensem/modules/__init__.py": {},
    "generative-semparse-master/gensem/predictors/wikitables_reranker.py": {
        "WikiTablesReranker._json_to_instance": {
            "name": "_json_to_instance",
            "location": 10,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "WikiTablesReranker.predict_json": {
            "name": "predict_json",
            "location": 21,
            "return": [
                "dict",
                "str",
                "Iterable[Any]",
                "List[Optional[float]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "denite.util.UserContext",
                    "Pattern"
                ]
            }
        }
    },
    "generative-semparse-master/gensem/predictors/__init__.py": {},
    "generative-semparse-master/gensem/readers/dataset_reader.py": {
        "WikiTablesQuestionGeneratorReader.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool",
                    "Optional[allennlp.nn.RegularizerApplicator]",
                    "int",
                    "allennlp.data.Vocabulary"
                ],
                "tables_directory": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "offline_logical_forms_directory": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "str",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]"
                ],
                "max_num_logical_forms": [
                    "bool",
                    "Container[int]",
                    "str"
                ],
                "tokenizer": [
                    "Callable[[str, str], float]",
                    "Optional[int]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "question_token_indexers": [
                    "Iterable",
                    "Dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]",
                    "List[str]",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "str",
                    "int",
                    "bool"
                ],
                "rule_indexers": [
                    "bool",
                    "int",
                    "Dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]",
                    "str"
                ]
            }
        },
        "WikiTablesQuestionGeneratorReader._read": {
            "name": "_read",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "WikiTablesQuestionGeneratorReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 110,
            "return": [
                "Union[bool, str]",
                "Union[None, int, str]",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Set[str]]",
                "Optional[Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "logical_forms": [
                    "List[str]",
                    "str"
                ],
                "table_lines": [
                    "str",
                    "dict"
                ],
                "question": [
                    "str"
                ]
            }
        }
    },
    "generative-semparse-master/gensem/readers/utils.py": {
        "get_nonterminals_from_list": {
            "name": "get_nonterminals_from_list",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "right_side": [
                    "str"
                ]
            }
        },
        "make_bottom_up_action_sequence": {
            "name": "make_bottom_up_action_sequence",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "top_down_sequence": [
                    "List[str]",
                    "bool",
                    "Optional[float]"
                ],
                "is_nonterminal": [
                    "bool",
                    "int",
                    "Callable[[str], bool]",
                    "float",
                    "List[int]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "generative-semparse-master/gensem/readers/__init__.py": {},
    "generative-semparse-master/scripts/label_logical_forms.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "examples_file": [
                    "str",
                    "Optional[str]"
                ],
                "tables_directory": [
                    "str"
                ],
                "logical_forms_directory": [
                    "str",
                    "bool"
                ],
                "output_file": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "generative-semparse-master/tests/__init__.py": {},
    "generative-semparse-master/tests/models/wikitables_question_generator_test.py": {
        "TestWikiTablesQuestionGenerator.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesQuestionGenerator.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesQuestionGenerator.test_simple_seq2seq_can_train_save_and_load": {
            "name": "test_simple_seq2seq_can_train_save_and_load",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "generative-semparse-master/tests/models/__init__.py": {},
    "generative-semparse-master/tests/modules/rnn_grammar_state_test.py": {
        "is_nonterminal": {
            "name": "is_nonterminal",
            "location": 8,
            "return": [
                "str",
                "bool",
                "list",
                "Optional[List[str]]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "symbol": [
                    "Type[T]",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "TestRnnGrammarStatelet.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRnnGrammarStatelet.test_update_works": {
            "name": "test_update_works",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRnnGrammarStatelet.test_get_child_rnn_states": {
            "name": "test_get_child_rnn_states",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRnnGrammarStatelet.test_update_followed_by_get_states": {
            "name": "test_update_followed_by_get_states",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "generative-semparse-master/tests/modules/tree_lstm_test.py": {
        "TestTreeLSTM.test_forward": {
            "name": "test_forward",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTreeLSTM.test_forward_with_masked_input": {
            "name": "test_forward_with_masked_input",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "generative-semparse-master/tests/modules/__init__.py": {},
    "generative-semparse-master/tests/predictors/wikitables_reranker_test.py": {
        "TestWikiTablesReranker.test_ranked_logical_forms_present": {
            "name": "test_ranked_logical_forms_present",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "generative-semparse-master/tests/predictors/__init__.py": {},
    "generative-semparse-master/tests/readers/dataset_reader_test.py": {
        "TestWikiTablesBackTranslationDatasetReader.test_reader_reads_jsonl": {
            "name": "test_reader_reads_jsonl",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWikiTablesBackTranslationDatasetReader.test_reader_reads_examples": {
            "name": "test_reader_reads_examples",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "generative-semparse-master/tests/readers/utils_test.py": {
        "TestUtils.test_make_bottom_up_action_sequence": {
            "name": "test_make_bottom_up_action_sequence",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_make_bottom_up_action_sequence_on_wtq_sequence": {
            "name": "test_make_bottom_up_action_sequence_on_wtq_sequence",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "generative-semparse-master/tests/readers/__init__.py": {}
}
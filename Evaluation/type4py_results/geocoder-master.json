{
    "geocoder-master/__init__.py": {},
    "geocoder-master/app/app.py": {
        "geocode": {
            "name": "geocode",
            "location": 20,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "geocoder-master/app/__init__.py": {},
    "geocoder-master/app/api/utils.py": {
        "jsonify_success_data": {
            "name": "jsonify_success_data",
            "location": 22,
            "return": [
                "IO[bytes]",
                "Optional[Dict[str, Any]]",
                "str",
                "bytes",
                "Dict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Iterable[T]",
                    "T"
                ]
            }
        },
        "jsonify_error_data": {
            "name": "jsonify_error_data",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "errors": [
                    "str",
                    "List[str]",
                    "Match[str]",
                    "Optional[Callable]",
                    "Type[object]"
                ]
            }
        },
        "APIError.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "bool"
                ],
                "title": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "APIError.to_dict": {
            "name": "to_dict",
            "location": 57,
            "return": [
                "str",
                "int",
                "Exception",
                "dict",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/api/__init__.py": {},
    "geocoder-master/app/conf/settings.py": {},
    "geocoder-master/app/conf/__init__.py": {},
    "geocoder-master/app/conf/tests/test_settings.py": {
        "TestSettings.test_gmaps_api_key": {
            "name": "test_gmaps_api_key",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_here_app_id": {
            "name": "test_here_app_id",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSettings.test_here_app_code": {
            "name": "test_here_app_code",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/conf/tests/__init__.py": {},
    "geocoder-master/app/controllers/main.py": {
        "geocode": {
            "name": "geocode",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "address": [
                    "str",
                    "bool",
                    "Union[int, str]",
                    "int"
                ]
            }
        }
    },
    "geocoder-master/app/controllers/__init__.py": {},
    "geocoder-master/app/controllers/tests/test_main.py": {
        "TestMain.test_geocode": {
            "name": "test_geocode",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_geocode_errors": {
            "name": "test_geocode_errors",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/controllers/tests/utils.py": {},
    "geocoder-master/app/controllers/tests/__init__.py": {},
    "geocoder-master/app/controllers/third_party/google_maps.py": {
        "geocode": {
            "name": "geocode",
            "location": 23,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "_parse_geocode_response_dict_to_lat_lng": {
            "name": "_parse_geocode_response_dict_to_lat_lng",
            "location": 72,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "resp_dict": [
                    "dict",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "geocoder-master/app/controllers/third_party/here.py": {
        "geocode": {
            "name": "geocode",
            "location": 23,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, str]",
                    "BinaryIO"
                ]
            }
        },
        "_parse_geocode_response_dict_to_lat_lng": {
            "name": "_parse_geocode_response_dict_to_lat_lng",
            "location": 73,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "resp_dict": [
                    "str",
                    "Optional[bool]",
                    "List[Optional[Any]]",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[utils.CWLOutputType]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "geocoder-master/app/controllers/third_party/request.py": {
        "make_geocode_request": {
            "name": "make_geocode_request",
            "location": 16,
            "return": [
                "Callable[[Any], bool]",
                "bytes",
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "params_dict": [
                    "str"
                ]
            }
        }
    },
    "geocoder-master/app/controllers/third_party/__init__.py": {},
    "geocoder-master/app/controllers/third_party/tests/test_google_maps.py": {
        "TestGoogleMaps.test_geocode": {
            "name": "test_geocode",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/controllers/third_party/tests/test_here.py": {
        "TestHere.test_geocode": {
            "name": "test_geocode",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/controllers/third_party/tests/__init__.py": {},
    "geocoder-master/app/models/lat_lng.py": {
        "LatLng.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "bool",
                    "float"
                ],
                "lng": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LatLng.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "Dict[str, int]",
                "int",
                "trezor.utils.Writer",
                "dict",
                "str",
                "Dict[str, Any]",
                "utils.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatLng.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "Callable",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "LatLng.to_dict": {
            "name": "to_dict",
            "location": 49,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatLng.to_json": {
            "name": "to_json",
            "location": 72,
            "return": [
                "str",
                "int",
                "Tuple[str, str]",
                "Dict[int, Dict]",
                "Set[cmk.utils.type_defs.HostName]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/models/__init__.py": {},
    "geocoder-master/app/models/tests/test_lat_lng.py": {
        "TestLatLng.test_create": {
            "name": "test_create",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatLng.test_properties": {
            "name": "test_properties",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatLng.test_equality": {
            "name": "test_equality",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatLng.test_inequality": {
            "name": "test_inequality",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatLng.test_to_dict": {
            "name": "test_to_dict",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLatLng.test_to_json": {
            "name": "test_to_json",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/models/tests/__init__.py": {},
    "geocoder-master/app/tests/test_app.py": {
        "TestApp.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_flask_app_exists": {
            "name": "test_flask_app_exists",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_get_test_client": {
            "name": "test_get_test_client",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_route_root": {
            "name": "test_route_root",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/tests/__init__.py": {},
    "geocoder-master/app/utils/dictionary.py": {
        "get_nested_value": {
            "name": "get_nested_value",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dictionary": [
                    "dict",
                    "int",
                    "str",
                    "List[dict]"
                ],
                "keys": [
                    "list",
                    "Sequence[Union[str, int]]",
                    "str",
                    "List[str]",
                    "Optional[Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "default": [
                    "list",
                    "Sequence[Union[str, int]]",
                    "str",
                    "List[str]",
                    "Optional[Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "geocoder-master/app/utils/math.py": {
        "equalish": {
            "name": "equalish",
            "location": 12,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "precision_digits": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        }
    },
    "geocoder-master/app/utils/__init__.py": {},
    "geocoder-master/app/utils/tests/test_dictionary.py": {
        "TestUtilsDictionary.test_get_nested_value": {
            "name": "test_get_nested_value",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/utils/tests/test_math.py": {
        "TestMath.test_equalish": {
            "name": "test_equalish",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geocoder-master/app/utils/tests/__init__.py": {}
}
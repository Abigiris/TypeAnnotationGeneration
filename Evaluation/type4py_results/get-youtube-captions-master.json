{
    "get-youtube-captions-master/main.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "get-youtube-captions-master/movie_and_captions/caption_updater.py": {
        "CaptionUpdater.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "youtube_api": [
                    "int",
                    "bool"
                ],
                "dirty_youtube_api": [
                    "int",
                    "bool"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "CaptionUpdater._check_caption": {
            "name": "_check_caption",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "caption_info": [
                    "int",
                    "float",
                    "str"
                ],
                "last_updated": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "CaptionUpdater._get_valid_caption": {
            "name": "_get_valid_caption",
            "location": 46,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "self": [],
                "caption_infos": [
                    "bool",
                    "int",
                    "str"
                ],
                "last_updated": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "CaptionUpdater.do": {
            "name": "do",
            "location": 59,
            "return": [
                "Sequence[str]",
                "dict",
                "zerver.models.Realm",
                "list"
            ],
            "arguments": {
                "self": [],
                "target_channel_id": [
                    "str",
                    "int",
                    "Union[str, int, None]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[int]]",
                    "Optional[bytes]"
                ],
                "old_data": [
                    "bool",
                    "Optional[Exception]",
                    "int",
                    "str",
                    "List[List[int]]",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "get-youtube-captions-master/movie_and_captions/caption_with_mecab.py": {
        "CaptionWithMecab.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "CaptionWithMecab.augment_caption": {
            "name": "augment_caption",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "caption": []
            }
        },
        "CaptionWithMecab.do": {
            "name": "do",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "old_data": []
            }
        }
    },
    "get-youtube-captions-master/movie_and_captions/data.py": {},
    "get-youtube-captions-master/movie_and_captions/__init__.py": {},
    "get-youtube-captions-master/movie_and_captions/authentication/get_youtube.py": {
        "_read_api_key": {
            "name": "_read_api_key",
            "location": 6,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "build_youtube_service": {
            "name": "build_youtube_service",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "get-youtube-captions-master/movie_and_captions/authentication/__init__.py": {},
    "get-youtube-captions-master/movie_and_captions/models/augmented_caption.py": {},
    "get-youtube-captions-master/movie_and_captions/models/caption.py": {},
    "get-youtube-captions-master/movie_and_captions/models/caption_info.py": {},
    "get-youtube-captions-master/movie_and_captions/models/video_info.py": {},
    "get-youtube-captions-master/movie_and_captions/models/__init__.py": {},
    "get-youtube-captions-master/movie_and_captions/youtube_api/dirty_youtube_api.py": {
        "DirtyYoutubeAPI.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "DirtyYoutubeAPI.download_caption": {
            "name": "download_caption",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "target_video_info": [
                    "str",
                    "lunch_buddies.models.polls.Poll"
                ],
                "target_caption_info": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "get-youtube-captions-master/movie_and_captions/youtube_api/treat_webvtt.py": {
        "_webvtt_string_to_parsed_original_structure": {
            "name": "_webvtt_string_to_parsed_original_structure",
            "location": 11,
            "return": [],
            "arguments": {
                "webvtt_string": [
                    "str"
                ]
            }
        },
        "_timestamp_to_time": {
            "name": "_timestamp_to_time",
            "location": 19,
            "return": [
                "datetime.datetime",
                "str",
                "datetime.time",
                "datetime.timedelta"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "list",
                    "set"
                ]
            }
        },
        "_original_caption_to_my_caption": {
            "name": "_original_caption_to_my_caption",
            "location": 29,
            "return": [
                "str",
                "Tuple[str, str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "original_caption": [
                    "int",
                    "Tuple[float, float, float, float]",
                    "str"
                ]
            }
        },
        "webvtt_string_to_parsed": {
            "name": "webvtt_string_to_parsed",
            "location": 37,
            "return": [
                "str",
                "Union[str, List[str]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "webvtt_string": [
                    "str"
                ]
            }
        }
    },
    "get-youtube-captions-master/movie_and_captions/youtube_api/youtube_api.py": {
        "YoutubeAPI.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "bool"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "YoutubeAPI._execute_with_repeat": {
            "name": "_execute_with_repeat",
            "location": 20,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Optional[str]",
                    "str"
                ],
                "retry_num": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "YoutubeAPI._get_list_result_with_fields": {
            "name": "_get_list_result_with_fields",
            "location": 36,
            "return": [
                "str",
                "IO",
                "List[annofabapi.models.Task]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "apicliendiscovery.Resource",
                    "str",
                    "Optional[zerver.models.UserProfile]",
                    "int",
                    "dict"
                ],
                "filters": [
                    "Mapping[str, str]",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "field_selectors": [
                    "str",
                    "int"
                ]
            }
        },
        "YoutubeAPI.get_playlist_id_from_channel_id": {
            "name": "get_playlist_id_from_channel_id",
            "location": 56,
            "return": [
                "str",
                "models.User",
                "T",
                "Dict[str, Any]",
                "dict",
                "zerver.models.UserProfile",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "target_channel_id": [
                    "int",
                    "str",
                    "Set[int]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "YoutubeAPI.get_video_ids_from_playlist_id": {
            "name": "get_video_ids_from_playlist_id",
            "location": 66,
            "return": [
                "T",
                "str",
                "Dict[str, Any]",
                "dict",
                "models.User",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "target_playlist_id": [
                    "str",
                    "int",
                    "transfer.models.ShopID",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID"
                ]
            }
        },
        "YoutubeAPI.get_video_info_from_video_id": {
            "name": "get_video_info_from_video_id",
            "location": 77,
            "return": [
                "str",
                "zerver.models.Realm",
                "dict",
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": [],
                "target_video_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[int,str]"
                ]
            }
        },
        "YoutubeAPI.get_caption_infos_from_video_id": {
            "name": "get_caption_infos_from_video_id",
            "location": 93,
            "return": [
                "str",
                "zerver.models.Realm",
                "dict",
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": [],
                "target_video_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "YoutubeAPI._iso_8601_string_to_time": {
            "name": "_iso_8601_string_to_time",
            "location": 113,
            "return": [
                "Optional[str]",
                "datetime.date",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "Dict[str, Tuple[str, str, Any]]",
                    "BinaryIO"
                ]
            }
        }
    },
    "get-youtube-captions-master/movie_and_captions/youtube_api/__init__.py": {}
}
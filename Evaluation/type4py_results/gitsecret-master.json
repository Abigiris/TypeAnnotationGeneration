{
    "gitsecret-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 5,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {}
        }
    },
    "gitsecret-master/gitsecret/__init__.py": {
        "GitSecret.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "GitSecret._command_and_parse": {
            "name": "_command_and_parse",
            "location": 25,
            "return": [
                "str",
                "int",
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "regex": [
                    "str",
                    "Callable[[], None]",
                    "int"
                ]
            }
        },
        "GitSecret._command_and_split": {
            "name": "_command_and_split",
            "location": 52,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "GitSecret.create": {
            "name": "create",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSecret.tell": {
            "name": "tell",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "gpg_path": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "GitSecret.whoknows": {
            "name": "whoknows",
            "location": 103,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSecret.killperson": {
            "name": "killperson",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GitSecret.add": {
            "name": "add",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [],
                "autoadd": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "GitSecret.hide": {
            "name": "hide",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clean_encrypted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "clean_unencrypted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GitSecret.reveal": {
            "name": "reveal",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ],
                "gpg_path": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "overwrite": [
                    "bool",
                    "str"
                ]
            }
        },
        "GitSecret.remove": {
            "name": "remove",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "delete_existing": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "GitSecret.clean": {
            "name": "clean",
            "location": 221,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSecret.list": {
            "name": "list",
            "location": 231,
            "return": [
                "str",
                "Iterable[T]",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitSecret.changes": {
            "name": "changes",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ],
                "file_path": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "gpg_path": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "gitsecret-master/tests/__init__.py": {},
    "gitsecret-master/tests/e2e/test_e2e.py": {
        "gen_gitsecret": {
            "name": "gen_gitsecret",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gitsecret_invalid_repo": {
            "name": "test_gitsecret_invalid_repo",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": []
            }
        },
        "test_gitsecret_user_management": {
            "name": "test_gitsecret_user_management",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": []
            }
        },
        "test_gitsecret_files": {
            "name": "test_gitsecret_files",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "Callable"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_add.py": {
        "test_gitsecret_add_nogitignore": {
            "name": "test_gitsecret_add_nogitignore",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_add": {
            "name": "test_gitsecret_add",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_gitsecret_add_autoadd": {
            "name": "test_gitsecret_add_autoadd",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "Dict[str, Sequence[str]]",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_gitsecret_add_exception": {
            "name": "test_gitsecret_add_exception",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_changes.py": {
        "test_gitsecret_changes": {
            "name": "test_gitsecret_changes",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_changes_path": {
            "name": "test_gitsecret_changes_path",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_changes_gpgpath": {
            "name": "test_gitsecret_changes_gpgpath",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "dict",
                    "str"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_changes_all": {
            "name": "test_gitsecret_changes_all",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_changes_exception": {
            "name": "test_gitsecret_changes_exception",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_clean.py": {
        "test_gitsecret_clean": {
            "name": "test_gitsecret_clean",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_clean_noreturn": {
            "name": "test_gitsecret_clean_noreturn",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_hide.py": {
        "test_gitsecret_hide": {
            "name": "test_gitsecret_hide",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_hide_cleanencrypted": {
            "name": "test_gitsecret_hide_cleanencrypted",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_hide_cleanunencrypted": {
            "name": "test_gitsecret_hide_cleanunencrypted",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_hide_cleanboth": {
            "name": "test_gitsecret_hide_cleanboth",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_add_exception": {
            "name": "test_gitsecret_add_exception",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_init.py": {
        "test_gitsecret_create": {
            "name": "test_gitsecret_create",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_create_alreadycreated": {
            "name": "test_gitsecret_create_alreadycreated",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_killperson.py": {
        "test_gitsecret_killperson": {
            "name": "test_gitsecret_killperson",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_killperson_exception": {
            "name": "test_gitsecret_killperson_exception",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_list.py": {
        "test_gitsecret_list": {
            "name": "test_gitsecret_list",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "Tuple[int, int]"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_list_exception": {
            "name": "test_gitsecret_list_exception",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_remove.py": {
        "test_gitsecret_remove": {
            "name": "test_gitsecret_remove",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "str",
                    "bytes",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_reveal_overwrite": {
            "name": "test_gitsecret_reveal_overwrite",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_reveal_exception": {
            "name": "test_gitsecret_reveal_exception",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "bytes",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_reveal.py": {
        "test_gitsecret_reveal": {
            "name": "test_gitsecret_reveal",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_reveal_overwrite": {
            "name": "test_gitsecret_reveal_overwrite",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_reveal_gpg_path": {
            "name": "test_gitsecret_reveal_gpg_path",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_gitsecret_reveal_all": {
            "name": "test_gitsecret_reveal_all",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_reveal_exception": {
            "name": "test_gitsecret_reveal_exception",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_tell.py": {
        "test_gitsecret_tell": {
            "name": "test_gitsecret_tell",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_tell_noemail": {
            "name": "test_gitsecret_tell_noemail",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_tell_path": {
            "name": "test_gitsecret_tell_path",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_tell_exception": {
            "name": "test_gitsecret_tell_exception",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/test_gitsecret_whoknows.py": {
        "test_gitsecret_whoknows": {
            "name": "test_gitsecret_whoknows",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_whoknows_multi": {
            "name": "test_gitsecret_whoknows_multi",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_gitsecret_whoknows_exception": {
            "name": "test_gitsecret_whoknows_exception",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "gen_gitsecret": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock"
                ]
            }
        }
    },
    "gitsecret-master/tests/unit/__init__.py": {},
    "gitsecret-master/tests/utilities/factories.py": {
        "FakeCompletedProcess.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "returncode": [
                    "int",
                    "bool",
                    "float"
                ],
                "stderr": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "gitsecret-master/tests/utilities/fixtures.py": {
        "gen_gitsecret": {
            "name": "gen_gitsecret",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "gitsecret-master/tests/utilities/__init__.py": {}
}
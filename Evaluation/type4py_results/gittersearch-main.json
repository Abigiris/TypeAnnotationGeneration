{
    "gittersearch-main/hubhud/cli.py": {
        "cli": {
            "name": "cli",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "search": {
            "name": "search",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "query": {
            "name": "query",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "index": [
                    "Optional[int]",
                    "str",
                    "Tuple[int]",
                    "bool",
                    "float"
                ],
                "query": [
                    "Optional[int]",
                    "str",
                    "Tuple[int]",
                    "bool",
                    "float"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoped_session"
                ],
                "index": [
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "bool"
                ]
            }
        },
        "sync": {
            "name": "sync",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gitter": {
            "name": "gitter",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "str",
                    "int",
                    "Callable"
                ],
                "project": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "github": {
            "name": "github",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "str",
                    "int",
                    "Callable"
                ],
                "project": [
                    "str",
                    "int",
                    "type"
                ],
                "rename": [
                    "str"
                ]
            }
        }
    },
    "gittersearch-main/hubhud/github.py": {
        "get_events": {
            "name": "get_events",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "project": [
                    "int",
                    "datetime.datetime",
                    "Union[str, list]"
                ],
                "start": [
                    "int",
                    "datetime.datetime",
                    "Union[str, list]"
                ],
                "end": [
                    "int",
                    "datetime.datetime",
                    "Union[str, list]"
                ],
                "limit": [
                    "int",
                    "datetime.datetime",
                    "Union[str, list]"
                ],
                "direction": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "check_schema_diff": {
            "name": "check_schema_diff",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "bytes",
                    "str",
                    "Dict[str, Set[str]]",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "schema": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 234,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "sync": {
            "name": "sync",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "project": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "Optional[Dict]"
                ],
                "rename": [
                    "bool",
                    "str",
                    "dict",
                    "Iterable[str]",
                    "Set[str]",
                    "List[str]",
                    "schema_salad.avro.schema.Names"
                ]
            }
        }
    },
    "gittersearch-main/hubhud/gitter.py": {
        "get_messages": {
            "name": "get_messages",
            "location": 303,
            "return": [
                "collections.abc.Iterator[Message]"
            ],
            "arguments": {
                "client": [
                    "List[str]"
                ],
                "room": [
                    "List[str]"
                ],
                "since": []
            }
        },
        "update": {
            "name": "update",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "cur": [
                    "Tuple[float, float]",
                    "str",
                    "List[str]",
                    "int",
                    "list"
                ],
                "new": [
                    "Tuple[float, float]",
                    "str",
                    "List[str]",
                    "int",
                    "list"
                ]
            }
        },
        "sync": {
            "name": "sync",
            "location": 313,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "sqlalchemy.orm.Session"
                ],
                "project": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "Message.new": {
            "name": "new",
            "location": 136,
            "return": [
                "str",
                "sqlalchemy.MetaData",
                "Union[Dict, List]",
                "int",
                "List[int]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "bytes",
                    "Type[T]",
                    "int"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "Message.update": {
            "name": "update",
            "location": 147,
            "return": [
                "wtforms.fields.core.UnboundField",
                "Union[int, float, complex]",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "type",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "MessageIterator.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "int",
                    "Tuple[str, str, str]",
                    "str",
                    "Optional[str]"
                ],
                "room": [
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "int"
                ],
                "direction": [
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "IO",
                    "Optional[str]",
                    "Tuple[int]"
                ],
                "lastSeen": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MessageIterator.__iter__": {
            "name": "__iter__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageIterator.iter_thread": {
            "name": "iter_thread",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Any]"
                ]
            }
        },
        "MessageIterator._msort": {
            "name": "_msort",
            "location": 227,
            "return": [
                "bool",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GitterClient.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ],
                "endpoint": [
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        },
        "GitterClient.get_room": {
            "name": "get_room",
            "location": 244,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "int"
                ]
            }
        },
        "GitterClient.rooms": {
            "name": "rooms",
            "location": 254,
            "return": [
                "Dict[str, Set[str]]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitterClient.messages": {
            "name": "messages",
            "location": 260,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "roomId": [
                    "str",
                    "int"
                ],
                "afterId": [
                    "str",
                    "int"
                ],
                "beforeId": [
                    "str",
                    "int"
                ],
                "limit": [
                    "str",
                    "int"
                ]
            }
        },
        "GitterClient.message_thread": {
            "name": "message_thread",
            "location": 269,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "roomId": [
                    "str",
                    "int"
                ],
                "parentId": [
                    "str",
                    "int"
                ]
            }
        },
        "GitterClient._throttle_rate": {
            "name": "_throttle_rate",
            "location": 275,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "bytes",
                    "dict",
                    "int"
                ]
            }
        },
        "GitterClient._request": {
            "name": "_request",
            "location": 290,
            "return": [
                "Set[str]",
                "List[str]",
                "List[Match]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "gittersearch-main/hubhud/schema.py": {
        "Array": {
            "name": "Array",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ctype": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "F": {
            "name": "F",
            "location": 42,
            "return": [
                "List[str]",
                "Sequence[str]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "ctype": [
                    "str",
                    "int",
                    "Tuple[float, int]",
                    "List[int]"
                ],
                "default": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "get_db": {
            "name": "get_db",
            "location": 54,
            "return": [
                "str",
                "bool",
                "sqlalchemy.orm.Session",
                "bytes",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "db_uri": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "dict"
                ]
            }
        },
        "SQLiteArray.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coltype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SQLiteArray.process_bind_param": {
            "name": "process_bind_param",
            "location": 20,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ],
                "dialect": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "SQLiteArray.process_result_value": {
            "name": "process_result_value",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "dialect": [
                    "str",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]"
                ]
            }
        },
        "ISODate.process_bind_param": {
            "name": "process_bind_param",
            "location": 36,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "Mapping",
                    "float"
                ],
                "dialect": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "gittersearch-main/hubhud/search.py": {
        "get_schema": {
            "name": "get_schema",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "search": {
            "name": "search",
            "location": 17,
            "return": [
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "query_phrase": [
                    "bool",
                    "dict",
                    "Optional[bool]",
                    "int"
                ],
                "max_results": [
                    "bool",
                    "Pattern[str]",
                    "Optional[Callable[[Any, Any], None]]",
                    "list",
                    "str"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]"
                ],
                "path": []
            }
        }
    },
    "gittersearch-main/hubhud/__init__.py": {},
    "gittersearch-main/tests/test_github.py": {
        "test_get_custodian_events": {
            "name": "test_get_custodian_events",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gittersearch-main/tests/test_gitter.py": {
        "test_get_rooms": {
            "name": "test_get_rooms",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_messages": {
            "name": "test_get_messages",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_message_iterator": {
            "name": "test_message_iterator",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
{
    "go-site-master/graphstore/rule-runner/setup.py": {},
    "go-site-master/graphstore/rule-runner/rulerunner/main.py": {
        "cli": {
            "name": "cli",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "group": {
            "name": "group",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, str]"
                ],
                "rules_dir": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "schema": [
                    "bool",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "verbose": [
                    "float",
                    "List[str]",
                    "int",
                    "Tuple[int, int]"
                ],
                "out": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "bool",
                    "click.core.Context",
                    "Union[click.core.Option, click.core.Parameter]"
                ],
                "endpoint": [
                    "str",
                    "TextIO",
                    "int"
                ],
                "rule_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "schema": [
                    "bool"
                ],
                "out": [
                    "str"
                ]
            }
        },
        "local": {
            "name": "local",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "turtle": [],
                "sparql_file": [
                    "IO[str]",
                    "bool",
                    "Optional[int]",
                    "IO"
                ]
            }
        },
        "valid": {
            "name": "valid",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "rules_dir": [
                    "str",
                    "bool",
                    "Union[os.PathLike, str]"
                ],
                "schema": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "waterbutler.core.provider.BaseProvider"
                ]
            }
        },
        "rules_directory": {
            "name": "rules_directory",
            "location": 155,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "load_yamldown": {
            "name": "load_yamldown",
            "location": 161,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "yml_rule": [
                    "str",
                    "Dict[str, str]"
                ],
                "schema_path": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "RuleParameter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleParameter.convert": {
            "name": "convert",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Type",
                    "T",
                    "Optional[int]"
                ],
                "param": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "ctx": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "RuleParameter.build_rule_path": {
            "name": "build_rule_path",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "gorule": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "RuleParameter.is_gorule": {
            "name": "is_gorule",
            "location": 48,
            "return": [
                "Callable[..., None]",
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RuleParameter.is_int": {
            "name": "is_int",
            "location": 51,
            "return": [
                "str",
                "list",
                "Dict[str, Any]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ]
            }
        },
        "RuleParameter.is_just_id": {
            "name": "is_just_id",
            "location": 54,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "go-site-master/graphstore/rule-runner/rulerunner/rule.py": {
        "prefix_uri": {
            "name": "prefix_uri",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "bytes"
                ]
            }
        },
        "run_query": {
            "name": "run_query",
            "location": 89,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "Mapping[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "query": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "endpoint": [
                    "str",
                    "bytes",
                    "bool",
                    "Union[str, TextIO]"
                ]
            }
        },
        "test_rule": {
            "name": "test_rule",
            "location": 99,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "rule": [],
                "endpoint": [
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "generate_results_json": {
            "name": "generate_results_json",
            "location": 110,
            "return": [
                "str",
                "Optional[Mapping]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "rule_results_list": [
                    "bool",
                    "int",
                    "str",
                    "Tuple[int, int, int, int, int, int, int]",
                    "list"
                ]
            }
        },
        "sparql_from": {
            "name": "sparql_from",
            "location": 135,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "gorule": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "RuleResult.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "returned": [
                    "str",
                    "float",
                    "tuple"
                ],
                "rule": [
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "RuleResult.jsonify": {
            "name": "jsonify",
            "location": 49,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "List[int]",
                "Union[Dict, List]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleResult.verbose_readable": {
            "name": "verbose_readable",
            "location": 76,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleResult.short_summary": {
            "name": "short_summary",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleResult.__init__._passing": {
            "name": "_passing",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "returned": [
                    "str",
                    "List[str]"
                ],
                "rule": [
                    "str",
                    "Literal[True]",
                    "Literal[False]",
                    "bool"
                ]
            }
        }
    },
    "go-site-master/graphstore/rule-runner/rulerunner/__init__.py": {},
    "go-site-master/graphstore/rule-runner/tests/test_rules.py": {
        "query": {
            "name": "query",
            "location": 9,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "rule_number": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "check_rule_with_data": {
            "name": "check_rule_with_data",
            "location": 18,
            "return": [
                "List[str]",
                "Tuple[int, Dict[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "rule_path": [
                    "str"
                ],
                "data_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestRules.test_rule_6": {
            "name": "test_rule_6",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRules.test_rule_7": {
            "name": "test_rule_7",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRules.test_rule_14": {
            "name": "test_rule_14",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRules.test_rule_11": {
            "name": "test_rule_11",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "go-site-master/graphstore/rule-runner/tests/__init__.py": {},
    "go-site-master/pipeline/group-timing.py": {
        "groups_dir": {
            "name": "groups_dir",
            "location": 4,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "group_names": {
            "name": "group_names",
            "location": 7,
            "return": [
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {}
        },
        "group_files": {
            "name": "group_files",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "group": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "modification_time": {
            "name": "modification_time",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "group_files_times": {
            "name": "group_files_times",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "group": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "group_time_delta": {
            "name": "group_time_delta",
            "location": 19,
            "return": [
                "float",
                "int",
                "List[float]",
                "List[Tuple[Any, str, int]]",
                "str",
                "Dict[str, List[float]]"
            ],
            "arguments": {
                "group": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "all_groups_timing": {
            "name": "all_groups_timing",
            "location": 23,
            "return": [
                "int",
                "List[int]",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {}
        },
        "display": {
            "name": "display",
            "location": 26,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "timings": [
                    "str",
                    "bool"
                ]
            }
        },
        "optional_file_write": {
            "name": "optional_file_write",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "writable": [
                    "str",
                    "Union[None, bytes]",
                    "bytes"
                ],
                "text": [
                    "str",
                    "Union[None, bytes]",
                    "bytes"
                ]
            }
        },
        "timing": {
            "name": "timing",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "str",
                    "int"
                ],
                "record": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "go-site-master/pipeline/go-association-transit/setup.py": {},
    "go-site-master/pipeline/go-association-transit/goat/cached_ontology.py": {
        "from_file": {
            "name": "from_file",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "KeyDefaultDict.__missing__": {
            "name": "__missing__",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "go-site-master/pipeline/go-association-transit/goat/goat.py": {
        "cli": {
            "name": "cli",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pristine": {
            "name": "pristine",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "pathlib.Path",
                    "str"
                ],
                "ontology": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath"
                ],
                "inferences": [
                    "str",
                    "int"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "go-site-master/pipeline/go-association-transit/goat/parse_into_gpad.py": {
        "process_single_file": {
            "name": "process_single_file",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "source_file": [
                    "str"
                ],
                "gpis": [
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "pathlib.Path",
                    "List[str]"
                ],
                "ontology": [
                    "pathlib.Path",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "out_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "annotation_inferences": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "go-site-master/pipeline/go-association-transit/goat/sources.py": {
        "align_source": {
            "name": "align_source",
            "location": 17,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Optional[IO[bytes]]"
            ],
            "arguments": {
                "source_file": [
                    "pathlib.Path",
                    "IO[bytes]",
                    "os.PathLike"
                ]
            }
        },
        "align_sources": {
            "name": "align_sources",
            "location": 34,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "source_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "go-site-master/pipeline/go-association-transit/goat/__init__.py": {},
    "go-site-master/pipeline/util/model_organism.py": {
        "cli": {
            "name": "cli",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "taxons": {
            "name": "taxons",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "int",
                    "Type[object]"
                ],
                "out": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "read_taxa_for_path": {
            "name": "read_taxa_for_path",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Type[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dataset_path": [
                    "str",
                    "Tuple[int, int]",
                    "bool",
                    "BinaryIO"
                ]
            }
        }
    },
    "go-site-master/pipeline/util/paint_merge.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "merge": {
            "name": "merge",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "merger": [
                    "dict",
                    "int",
                    "Optional[float]",
                    "Sequence['cirq.Qid']"
                ],
                "merge_into": [
                    "dict",
                    "int",
                    "Optional[float]",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "dataset_id_to_path": {
            "name": "dataset_id_to_path",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset_id": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ],
                "groups_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "merges_into_path": {
            "name": "merges_into_path",
            "location": 23,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "merges_into": [
                    "bool",
                    "str"
                ],
                "groups_dir": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "append_zip_into_zip": {
            "name": "append_zip_into_zip",
            "location": 27,
            "return": [
                "Iterator[Dict[str, str]]",
                "Iterator[T]",
                "Iterator"
            ],
            "arguments": {
                "merger": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[dict]"
                ],
                "merge_into": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "header_and_annotations": {
            "name": "header_and_annotations",
            "location": 51,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "merge_into_zip": [
                    "gzip.GzipFile",
                    "str",
                    "list",
                    "bytes",
                    "bool"
                ]
            }
        },
        "paint_header": {
            "name": "paint_header",
            "location": 64,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "header": [
                    "str",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "go-site-master/scripts/aggregate-json-reports.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "wikidata_taxon_name": {
            "name": "wikidata_taxon_name",
            "location": 44,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "tid": [
                    "bool",
                    "str",
                    "dict",
                    "Union[int, bytes]",
                    "type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/aggregate-references.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "wtflist2str": {
            "name": "wtflist2str",
            "location": 33,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "wtflist": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/aggregate-stats.py": {
        "create_initial_set": {
            "name": "create_initial_set",
            "location": 9,
            "return": [
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "list_stats": {
            "name": "list_stats",
            "location": 17,
            "return": [
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "folder": [
                    "Set[str]",
                    "dict",
                    "list",
                    "List[str]"
                ]
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 25,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "write_json": {
            "name": "write_json",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "print_help": {
            "name": "print_help",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "int",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "go-site-master/scripts/bucket-indexer.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 33,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/combine-datasets-metadata.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/correct_paint_symbols.py": {},
    "go-site-master/scripts/create-bdbag-remote-file-manifest.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/datasets.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "paths": {
            "name": "paths",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "datasets_dir": [
                    "str",
                    "Optional[Callable[[Any], None]]"
                ],
                "groups": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Type",
                    "Optional[str]"
                ],
                "excludes": [
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "load_resource_metadata": {
            "name": "load_resource_metadata",
            "location": 45,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "datasets_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "transform_download_targets": {
            "name": "transform_download_targets",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource_metadata": [
                    "bool",
                    "str"
                ],
                "types": [
                    "float",
                    "Optional[int]",
                    "List[List[Callable]]",
                    "Union[str, os.PathLike, None]"
                ]
            }
        }
    },
    "go-site-master/scripts/directory_indexer.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "map_current_dir_to_url": {
            "name": "map_current_dir_to_url",
            "location": 148,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "current_dir": [
                    "str"
                ],
                "url_prefix": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "map_dir_to_url": {
            "name": "map_dir_to_url",
            "location": 152,
            "return": [
                "dict",
                "Optional[Dict]",
                "str",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "current_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "directory": [
                    "str"
                ],
                "url_prefix": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "map_file_to_url": {
            "name": "map_file_to_url",
            "location": 161,
            "return": [
                "Dict[str, str]",
                "dict",
                "int",
                "Dict[str, Any]",
                "Optional[dict]",
                "bool"
            ],
            "arguments": {
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "current_dir": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "a_file": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "url_prefix": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "parent_url": {
            "name": "parent_url",
            "location": 170,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ],
                "current_dir": [
                    "str"
                ],
                "url_prefix": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "go-site-master/scripts/download-annotation-sources.py": {
        "cli": {
            "name": "cli",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "all": {
            "name": "all",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "datasets": [
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Set[str]"
                ],
                "type": [
                    "str",
                    "Tuple[str, str]",
                    "Type",
                    "List[str]"
                ],
                "exclude": [
                    "List[str]",
                    "bool",
                    "List[Optional['Cell']]",
                    "Iterable[Any]"
                ],
                "only_group": [
                    "str",
                    "bool",
                    "dict",
                    "object"
                ],
                "parallel": [
                    "bool",
                    "str"
                ],
                "dry_run": [
                    "bool",
                    "str"
                ],
                "retries": [
                    "bool",
                    "str"
                ],
                "retry_time": [
                    "bool",
                    "str"
                ],
                "map_dataset_url": [
                    "str",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "List[str]"
                ],
                "replace": [
                    "bool",
                    "str"
                ],
                "zip_unzip": [
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "group": {
            "name": "group",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]",
                    "dict",
                    "Optional[bool]",
                    "list"
                ],
                "datasets": [
                    "str",
                    "bool",
                    "Union[Literal, str]",
                    "Union[Literal[False], str]"
                ],
                "target": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "dict",
                    "Optional[str]"
                ],
                "type": [
                    "str",
                    "bool",
                    "dict",
                    "Callable[[], None]"
                ],
                "exclude": [
                    "List[str]",
                    "bool",
                    "List[Tuple[float, ...]]",
                    "Tuple[float]",
                    "Iterable[T]"
                ],
                "dry_run": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "parallel": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "retries": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "retry_time": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "replace": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "zip_unzip": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "annotations": {
            "name": "annotations",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "datasets": [
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "List[str]",
                    "dict",
                    "Mapping"
                ],
                "exclude": [
                    "int",
                    "Optional[float]",
                    "Callable"
                ],
                "only_group": [
                    "int",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "parallel": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "dry_run": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "retries": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "retry_time": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "map_dataset_url": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "replace": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "zip_unzip": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "organize": {
            "name": "organize",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "datasets": [
                    "float",
                    "int"
                ],
                "target": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_resource_metadata": {
            "name": "load_resource_metadata",
            "location": 238,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "datasets_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "annotation_datasets_to_download": {
            "name": "annotation_datasets_to_download",
            "location": 258,
            "return": [
                "Dict[str, int]",
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "groups_metadata": [
                    "bool",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "multi_download": {
            "name": "multi_download",
            "location": 346,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "dataset_targets": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "target": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "parallel": [
                    "bool",
                    "str",
                    "int"
                ],
                "retries": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "retry_time": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "dryrun": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "replace": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "transform_download_targets": {
            "name": "transform_download_targets",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource_metadata": [
                    "bool",
                    "str"
                ],
                "types": [
                    "float",
                    "Optional[int]",
                    "List[List[Callable]]",
                    "Union[str, os.PathLike, None]"
                ]
            }
        },
        "robust_download": {
            "name": "robust_download",
            "location": 399,
            "return": [
                "bool"
            ],
            "arguments": {
                "dataset_target": [
                    "int",
                    "str",
                    "T",
                    "Optional[T]",
                    "Optional[List[Any]]",
                    "Optional[float]"
                ],
                "target": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "retries": [
                    "str",
                    "List[str]"
                ],
                "retry_time": [
                    "float",
                    "int"
                ],
                "dryrun": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str, str, str, str]",
                    "Optional[Tuple[int, int]]",
                    "Optional[int]"
                ],
                "replace": [
                    "str",
                    "Union[float, str]"
                ]
            }
        },
        "download_the_file": {
            "name": "download_the_file",
            "location": 424,
            "return": [
                "str",
                "dict",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ],
                "out_path": [
                    "str"
                ],
                "dryrun": [
                    "str",
                    "Iterable[Optional[Any]]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "construct_download_path": {
            "name": "construct_download_path",
            "location": 451,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset_target": [
                    "str",
                    "int",
                    "type"
                ],
                "target": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str, str]",
                    "Dict[str, Any]",
                    "Union[dict, list]"
                ]
            }
        },
        "construct_grouped_path": {
            "name": "construct_grouped_path",
            "location": 465,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "bool",
                    "int"
                ],
                "filename": [
                    "str",
                    "bool",
                    "int"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "extension_map": {
            "name": "extension_map",
            "location": 474,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "compression": [
                    "str",
                    "dict"
                ]
            }
        },
        "zipup": {
            "name": "zipup",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "unzip": {
            "name": "unzip",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "target": [
                    "Set[str]",
                    "Iterable[Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "multi_download._simple_callback": {
            "name": "_simple_callback",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "download_result_tuple": [
                    "Union[float, int]",
                    "Tuple[int, int]",
                    "dict",
                    "str",
                    "int",
                    "Mapping",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "unzip.chunk_gen": {
            "name": "chunk_gen",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/downloads-page-gen.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/download_source_gafs.py": {
        "cli": {
            "name": "cli",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "all": {
            "name": "all",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "datasets": [
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Set[str]"
                ],
                "type": [
                    "str",
                    "Tuple[str, str]",
                    "Type",
                    "List[str]"
                ],
                "exclude": [
                    "List[str]",
                    "bool",
                    "List[Optional['Cell']]",
                    "Iterable[Any]"
                ],
                "only_group": [
                    "str",
                    "bool",
                    "dict",
                    "object"
                ],
                "parallel": [
                    "bool",
                    "str"
                ],
                "dry_run": [
                    "bool",
                    "str"
                ],
                "retries": [
                    "bool",
                    "str"
                ],
                "retry_time": [
                    "bool",
                    "str"
                ],
                "map_dataset_url": [
                    "str",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "List[str]"
                ],
                "replace": [
                    "bool",
                    "str"
                ],
                "zip_unzip": [
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "group": {
            "name": "group",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]",
                    "dict",
                    "Optional[bool]",
                    "list"
                ],
                "datasets": [
                    "str",
                    "bool",
                    "Union[Literal, str]",
                    "Union[Literal[False], str]"
                ],
                "target": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "dict",
                    "Optional[str]"
                ],
                "type": [
                    "str",
                    "bool",
                    "dict",
                    "Callable[[], None]"
                ],
                "exclude": [
                    "List[str]",
                    "bool",
                    "List[Tuple[float, ...]]",
                    "Tuple[float]",
                    "Iterable[T]"
                ],
                "dry_run": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "parallel": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "retries": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "retry_time": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "replace": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "zip_unzip": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "annotations": {
            "name": "annotations",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "datasets": [
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "List[str]",
                    "dict",
                    "Mapping"
                ],
                "exclude": [
                    "int",
                    "Optional[float]",
                    "Callable"
                ],
                "only_group": [
                    "int",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "parallel": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "dry_run": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "retries": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "retry_time": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "map_dataset_url": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "replace": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "zip_unzip": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "organize": {
            "name": "organize",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "datasets": [
                    "float",
                    "int"
                ],
                "target": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_resource_metadata": {
            "name": "load_resource_metadata",
            "location": 237,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "datasets_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "annotation_datasets_to_download": {
            "name": "annotation_datasets_to_download",
            "location": 257,
            "return": [
                "Dict[str, int]",
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "groups_metadata": [
                    "bool",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "multi_download": {
            "name": "multi_download",
            "location": 349,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "dataset_targets": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "target": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "parallel": [
                    "bool",
                    "str",
                    "int"
                ],
                "retries": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "retry_time": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "dryrun": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ],
                "replace": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "transform_download_targets": {
            "name": "transform_download_targets",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource_metadata": [
                    "bool",
                    "str"
                ],
                "types": [
                    "float",
                    "Optional[int]",
                    "List[List[Callable]]",
                    "Union[str, os.PathLike, None]"
                ]
            }
        },
        "robust_download": {
            "name": "robust_download",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "dataset_target": [
                    "int",
                    "str",
                    "T",
                    "Optional[T]",
                    "Optional[List[Any]]",
                    "Optional[float]"
                ],
                "target": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "retries": [
                    "str",
                    "List[str]"
                ],
                "retry_time": [
                    "float",
                    "int"
                ],
                "dryrun": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str, str, str, str]",
                    "Optional[Tuple[int, int]]",
                    "Optional[int]"
                ],
                "replace": [
                    "str",
                    "Union[float, str]"
                ]
            }
        },
        "download_the_file": {
            "name": "download_the_file",
            "location": 427,
            "return": [
                "str",
                "dict",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ],
                "out_path": [
                    "str"
                ],
                "dryrun": [
                    "str",
                    "Iterable[Optional[Any]]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "construct_download_path": {
            "name": "construct_download_path",
            "location": 454,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset_target": [
                    "str",
                    "type"
                ],
                "target": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str, str]",
                    "Dict[str, Any]",
                    "Union[dict, list]"
                ]
            }
        },
        "construct_grouped_path": {
            "name": "construct_grouped_path",
            "location": 468,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "bool",
                    "int"
                ],
                "filename": [
                    "str",
                    "bool",
                    "int"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "extension_map": {
            "name": "extension_map",
            "location": 477,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "compression": [
                    "str",
                    "dict"
                ]
            }
        },
        "zipup": {
            "name": "zipup",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "unzip": {
            "name": "unzip",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "target": [
                    "Set[str]",
                    "Iterable[Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "multi_download._simple_callback": {
            "name": "_simple_callback",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "download_result_tuple": [
                    "Union[float, int]",
                    "Tuple[int, int]",
                    "dict",
                    "str",
                    "int",
                    "Mapping",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "unzip.chunk_gen": {
            "name": "chunk_gen",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/gaferencer-by-metadata.py": {
        "cli": {
            "name": "cli",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "group": {
            "name": "group",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "datasets": [
                    "str",
                    "Optional[str]",
                    "OrderedDict",
                    "Optional[Union[Any, str]]",
                    "Dict[str, Any]",
                    "Iterable[Sequence[str]]"
                ],
                "target": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "contexts": [
                    "List[str]",
                    "os.DirEntry"
                ],
                "ontology": [
                    "List[str]",
                    "os.DirEntry"
                ],
                "gafs": [
                    "str"
                ],
                "gaferencer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "excludes": [
                    "str"
                ],
                "dryrun": [
                    "List[str]",
                    "os.DirEntry"
                ]
            }
        },
        "unzip": {
            "name": "unzip",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "target": [
                    "Set[str]",
                    "Iterable[Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "construct_gaf_paths": {
            "name": "construct_gaf_paths",
            "location": 88,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "gaf_dir": [
                    "str",
                    "bool"
                ],
                "group_dataset": [
                    "str",
                    "Iterable[int]",
                    "int"
                ],
                "excludes": [
                    "str",
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "construct_context_options": {
            "name": "construct_context_options",
            "location": 97,
            "return": [
                "bool",
                "Optional[Any]",
                "float"
            ],
            "arguments": {
                "contexts": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "load_resource_metadata": {
            "name": "load_resource_metadata",
            "location": 102,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "datasets_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_gaferencer": {
            "name": "run_gaferencer",
            "location": 122,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "contexts": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "ontology_path": [
                    "str"
                ],
                "gaf_path": [
                    "str"
                ],
                "out_path": [
                    "str"
                ],
                "dryrun": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "unzip.chunk_gen": {
            "name": "chunk_gen",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/GitHubIssueCreatorExp01.lambda.py": {
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 20,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, bool]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "go-site-master/scripts/github_issue_summary.py": {
        "make_html_safe": {
            "name": "make_html_safe",
            "location": 14,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "float",
                    "int",
                    "str",
                    "Type[object]",
                    "Dict[str, str]"
                ]
            }
        },
        "print_single_issue": {
            "name": "print_single_issue",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "issue": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "print_issues": {
            "name": "print_issues",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "issues": [
                    "str",
                    "int"
                ],
                "event_type": [
                    "str"
                ],
                "printed_ids": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Iterator[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_issues": {
            "name": "get_issues",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "int"
                ],
                "event_type": [
                    "str",
                    "int"
                ],
                "start_date": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "go-site-master/scripts/go_annotation_changes.py": {
        "compute_changes": {
            "name": "compute_changes",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "current_stats": [
                    "str",
                    "dict",
                    "List[dict]",
                    "Optional[str]"
                ],
                "previous_stats": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "dict"
                ]
            }
        },
        "nested_changes": {
            "name": "nested_changes",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "current_json": [
                    "Dict[str, Any]",
                    "int",
                    "Optional[Tuple[str, ...]]",
                    "List[Tuple[Any, ...]]",
                    "dict"
                ],
                "previous_json": [
                    "dict",
                    "Dict[str, float]",
                    "Optional[str]"
                ]
            }
        },
        "missing_fields": {
            "name": "missing_fields",
            "location": 52,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "current_json": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "previous_json": [
                    "Dict[str, Any]",
                    "utils.CWLObjectType",
                    "List[str]"
                ]
            }
        },
        "alter_annotation_changes": {
            "name": "alter_annotation_changes",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "current_stats": [
                    "bool",
                    "str",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "previous_stats": [
                    "bool",
                    "str",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "current_references": [
                    "Optional[str]",
                    "bool",
                    "Optional[dict]",
                    "str",
                    "Optional[int]"
                ],
                "previous_references": [
                    "int",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ],
                "json_annot_changes": [
                    "bool",
                    "list"
                ]
            }
        },
        "create_text_report": {
            "name": "create_text_report",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "json_changes": [
                    "int",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "print_help": {
            "name": "print_help",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Union[List, Tuple]",
                    "list",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "go-site-master/scripts/go_bootstrap.py": {
        "print_help": {
            "name": "print_help",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "list",
                    "int",
                    "Set[Tuple[str, str]]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "go-site-master/scripts/go_ontology_changes.py": {
        "compute_changes": {
            "name": "compute_changes",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "current_obo_url": [
                    "str",
                    "Dict[str, str]"
                ],
                "previous_obo_url": [
                    "str"
                ]
            }
        },
        "flattern": {
            "name": "flattern",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "A": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "create_text_report": {
            "name": "create_text_report",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "json_changes": [
                    "str",
                    "Callable[[None], bool]",
                    "utils.mssql_counters.Section"
                ]
            }
        },
        "format": {
            "name": "format",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "list",
                    "List[int]",
                    "List[dict]",
                    "List[str]"
                ]
            }
        },
        "count": {
            "name": "count",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "map": [
                    "str",
                    "list",
                    "List[T]"
                ]
            }
        },
        "print_help": {
            "name": "print_help",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Union[List, Tuple]",
                    "list",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "go-site-master/scripts/go_refine_stats.py": {
        "print_help": {
            "name": "print_help",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Union[List, Tuple]",
                    "list",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "go-site-master/scripts/go_reports.py": {
        "print_help": {
            "name": "print_help",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "list",
                    "int",
                    "Set[Tuple[str, str]]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "go-site-master/scripts/go_stats.py": {
        "compute_stats": {
            "name": "compute_stats",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "golr_url": [
                    "str",
                    "bool",
                    "Union[str, bytes]"
                ],
                "release_date": [
                    "Optional[str]",
                    "str"
                ],
                "exclude_pb_only": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "load_taxon_map": {
            "name": "load_taxon_map",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "prepare_globals": {
            "name": "prepare_globals",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "all_annotations": [
                    "int",
                    "str",
                    "List[int]",
                    "Type['DataclassT']"
                ]
            }
        },
        "golr_fetch_bioentities_taxon": {
            "name": "golr_fetch_bioentities_taxon",
            "location": 211,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "taxon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "golr_fetch_references_taxon": {
            "name": "golr_fetch_references_taxon",
            "location": 229,
            "return": [
                "bytes",
                "str",
                "Sequence",
                "List[str]",
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "taxon": [
                    "str",
                    "Sequence"
                ]
            }
        },
        "golr_fetch_references_group": {
            "name": "golr_fetch_references_group",
            "location": 234,
            "return": [
                "bytes",
                "str",
                "Sequence",
                "List[str]",
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "group": [
                    "str",
                    "Sequence"
                ]
            }
        },
        "golr_fetch_annotation_by_evidence_by_species": {
            "name": "golr_fetch_annotation_by_evidence_by_species",
            "location": 239,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "taxon": [
                    "Callable[[], Awaitable[Mapping]]",
                    "bool"
                ],
                "exclude_pb_only": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "taxon_label": {
            "name": "taxon_label",
            "location": 260,
            "return": [
                "bool",
                "str",
                "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                "Optional[str]"
            ],
            "arguments": {
                "taxon": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "add_taxon_label": {
            "name": "add_taxon_label",
            "location": 267,
            "return": [
                "Sequence[str]",
                "int",
                "Union[Sequence, 'SweepFixedValues']",
                "Iterable[str]"
            ],
            "arguments": {
                "map": [
                    "dict",
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "create_stats": {
            "name": "create_stats",
            "location": 285,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "all_terms": [
                    "bool",
                    "str",
                    "int"
                ],
                "all_annotations": [
                    "bool",
                    "str",
                    "tuple",
                    "Union[str, List[str]]",
                    "Callable[[], None]",
                    "List[List[str]]",
                    "Dict[str, List[str]]"
                ],
                "all_entities": [
                    "Dict[str, Set]",
                    "Dict[str, Set[Any]]",
                    "int"
                ],
                "release_date": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "qualifiers": [
                    "bool",
                    "str",
                    "tuple",
                    "Union[str, List[str]]",
                    "Callable[[], None]",
                    "List[List[str]]",
                    "Dict[str, List[str]]"
                ],
                "exclude_pb_only": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "create_text_report": {
            "name": "create_text_report",
            "location": 462,
            "return": [
                "str"
            ],
            "arguments": {
                "stats_json": [
                    "int"
                ]
            }
        },
        "create_meta": {
            "name": "create_meta",
            "location": 575,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "json_stats": [
                    "bool",
                    "float"
                ]
            }
        },
        "print_help": {
            "name": "print_help",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 606,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Union[List, Tuple]",
                    "list",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_references": {
            "name": "get_references",
            "location": 706,
            "return": [
                "str",
                "List[str]",
                "List[Dict[str, str]]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/go_stats_utils.py": {
        "is_experimental": {
            "name": "is_experimental",
            "location": 50,
            "return": [
                "bool",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "evidence_type": [
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "is_computational": {
            "name": "is_computational",
            "location": 53,
            "return": [
                "bool",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "evidence_type": [
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "get_evidence_min_group": {
            "name": "get_evidence_min_group",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "evidence_type": [
                    "str",
                    "Type"
                ]
            }
        },
        "aspect_from_source": {
            "name": "aspect_from_source",
            "location": 62,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Literal"
                ]
            }
        },
        "requests_retry": {
            "name": "requests_retry",
            "location": 74,
            "return": [
                "dict",
                "Exception",
                "int",
                "str",
                "Optional[Dict[str, str]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "retries": [
                    "str",
                    "int",
                    "bool"
                ],
                "backoff": [
                    "str",
                    "int",
                    "bool"
                ],
                "session": []
            }
        },
        "fetch": {
            "name": "fetch",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Iterable[Any]]",
                "List[str]",
                "T",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]",
                    "requests.Session"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 107,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ],
                "params": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Dict]",
                    "bool",
                    "int"
                ]
            }
        },
        "golr_fetch": {
            "name": "golr_fetch",
            "location": 118,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "golr_base_url": [
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "select_query": [
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "golr_fetch_by_taxon": {
            "name": "golr_fetch_by_taxon",
            "location": 129,
            "return": [
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "golr_base_url": [
                    "str",
                    "int",
                    "IO",
                    "Callable[[str], str]",
                    "Iterator"
                ],
                "select_query": [
                    "str",
                    "int",
                    "IO",
                    "Callable[[str], str]",
                    "Iterator"
                ],
                "taxon": [
                    "str",
                    "int",
                    "IO",
                    "Callable[[str], str]",
                    "Iterator"
                ]
            }
        },
        "golr_fetch_by_taxa": {
            "name": "golr_fetch_by_taxa",
            "location": 132,
            "return": [
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "golr_base_url": [
                    "int",
                    "list"
                ],
                "select_query": [
                    "int",
                    "list"
                ],
                "taxa": [
                    "str",
                    "List[str]",
                    "static_frame.core.util.DtypeSpecifier",
                    "dict"
                ]
            }
        },
        "build_list": {
            "name": "build_list",
            "location": 142,
            "return": [
                "MutableMapping[str, Any]",
                "List[Mapping[str, Any]]",
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "items_list": [
                    "List[str]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Sequence[Any]",
                    "Iterable[str]",
                    "list"
                ],
                "min_size": [
                    "Optional[List[str]]",
                    "list",
                    "Optional[int]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "build_map": {
            "name": "build_map",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "items_list": [
                    "int",
                    "List[str]",
                    "Sequence[Any]",
                    "Dict[str, Dict[str, Any]]",
                    "list"
                ],
                "min_size": [
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "build_reverse_map": {
            "name": "build_reverse_map",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "map": [
                    "Dict[str, List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "cluster_map": {
            "name": "cluster_map",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_map": [
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ],
                "synonyms": [
                    "int",
                    "str",
                    "Dict[str, Set[str]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "cluster_complex_map": {
            "name": "cluster_complex_map",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_map": [
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ],
                "synonyms": [
                    "int",
                    "str",
                    "Dict[str, Set[str]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ordered_map": {
            "name": "ordered_map",
            "location": 198,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "map": [
                    "str",
                    "Union[str, Dict]",
                    "dict"
                ]
            }
        },
        "extract_map": {
            "name": "extract_map",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "map": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "Dict[str, Dict[str, str]]"
                ],
                "key_str": [
                    "str",
                    "int"
                ]
            }
        },
        "merge_dict": {
            "name": "merge_dict",
            "location": 212,
            "return": [
                "bool",
                "Callable",
                "Sequence",
                "denite.util.UserContext"
            ],
            "arguments": {
                "dict_total": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Dict[str, Dict[str, str]]"
                ],
                "dict_diff": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "minus_dict": {
            "name": "minus_dict",
            "location": 231,
            "return": [
                "bool",
                "Callable",
                "Sequence",
                "denite.util.UserContext"
            ],
            "arguments": {
                "dict1": [
                    "dict",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Dict[int, Dict[str, Any]]"
                ],
                "dict2": [
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        },
        "has_taxon": {
            "name": "has_taxon",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "stats": [
                    "bool",
                    "MutableSet[str]",
                    "List[str]",
                    "str"
                ],
                "taxon_id": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "added_removed_species": {
            "name": "added_removed_species",
            "location": 252,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "current_stats": [
                    "deoplete.util.UserContext",
                    "int"
                ],
                "previous_stats": [
                    "str",
                    "List[List[str]]",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "bioentity_type": {
            "name": "bioentity_type",
            "location": 271,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "str_type": [
                    "Type"
                ]
            }
        },
        "sum_map_values": {
            "name": "sum_map_values",
            "location": 279,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "map": [
                    "Dict[str, float]",
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "Dict[str, int]"
                ]
            }
        },
        "write_json": {
            "name": "write_json",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "write_text": {
            "name": "write_text",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "go-site-master/scripts/json-concat-lists.py": {},
    "go-site-master/scripts/log-rat.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/merge-all-reports.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/obo_parser.py": {
        "value": {
            "name": "value",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "var": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Tuple[int, int, int, str]",
                    "Callable",
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "relationValue": {
            "name": "relationValue",
            "location": 18,
            "return": [
                "str",
                "Tuple[str]",
                "Optional[str]",
                "Dict[str, Callable]",
                "List[int]"
            ],
            "arguments": {
                "array": [
                    "T",
                    "Optional[int]",
                    "List[str]",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "NamedEntity.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.count_metas": {
            "name": "count_metas",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "includeXRefs": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Term.count_xrefs": {
            "name": "count_xrefs",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.count_structurals": {
            "name": "count_structurals",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.is_merged": {
            "name": "is_merged",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.has_alt_id": {
            "name": "has_alt_id",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Term.add_intersection_of": {
            "name": "add_intersection_of",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "relationship": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "target_id": [
                    "str",
                    "int"
                ],
                "target_label": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Term.add_relationship": {
            "name": "add_relationship",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "relationship": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "dict",
                    "int"
                ],
                "target_id": [
                    "str",
                    "int"
                ],
                "target_label": [
                    "str",
                    "bytes",
                    "IO[bytes]"
                ]
            }
        },
        "Term.add_is_a": {
            "name": "add_is_a",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_a": [
                    "Optional[List[str]]",
                    "Optional[float]",
                    "list"
                ]
            }
        },
        "Term.add_alternate_id": {
            "name": "add_alternate_id",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alt_id": [
                    "int",
                    "list",
                    "Set[int]",
                    "bool",
                    "set",
                    "Set[str]",
                    "bytes",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Term.add_synonym": {
            "name": "add_synonym",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "synonym": [
                    "float",
                    "int"
                ]
            }
        },
        "Term.add_subset": {
            "name": "add_subset",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "float",
                    "int"
                ]
            }
        },
        "Term.add_xref": {
            "name": "add_xref",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xref": [
                    "float",
                    "int"
                ]
            }
        },
        "Term.equals": {
            "name": "equals",
            "location": 177,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, float]",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Hashable",
                    "Iterable[Any]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Term.structural_equals": {
            "name": "structural_equals",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Term.meta_equals": {
            "name": "meta_equals",
            "location": 183,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, float]",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "includeXRefs": [
                    "bool"
                ]
            }
        },
        "Term.xrefs_equals": {
            "name": "xrefs_equals",
            "location": 188,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Term.explain_structural_differences": {
            "name": "explain_structural_differences",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Term.explain_xrefs_differences": {
            "name": "explain_xrefs_differences",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Term.count_xrefs_differences": {
            "name": "count_xrefs_differences",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "AbstractSet[Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Term.explain_meta_differences": {
            "name": "explain_meta_differences",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Sequence[int]",
                    "bool",
                    "float"
                ],
                "includeXRefs": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "Term.explain_differences": {
            "name": "explain_differences",
            "location": 260,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bool"
                ]
            }
        },
        "Term.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [
                "str",
                "Callable",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Relation.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Relation.__str__": {
            "name": "__str__",
            "location": 302,
            "return": [
                "str",
                "Callable",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationTarget.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OBO_Parser.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "dict",
                    "bytes",
                    "List[Callable]"
                ]
            }
        },
        "OBO_Parser._parseHeader": {
            "name": "_parseHeader",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OBO_Parser._parseTerms": {
            "name": "_parseTerms",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OBO_Parser._parseRelations": {
            "name": "_parseRelations",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OBO_Parser.get_nodes": {
            "name": "get_nodes",
            "location": 425,
            "return": [
                "str",
                "Tuple[float, float]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OBO_Parser.get_terms": {
            "name": "get_terms",
            "location": 429,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "term_state": [
                    "DefaultDict[int, List[int]]",
                    "List[float]"
                ]
            }
        },
        "OBO_Parser.get_terms_in": {
            "name": "get_terms_in",
            "location": 437,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "List[List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "aspect": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "term_state": [
                    "tuple"
                ]
            }
        },
        "OBO_Parser.get_merged_terms": {
            "name": "get_merged_terms",
            "location": 445,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "term_state": [
                    "DefaultDict[int, List[int]]",
                    "List[float]"
                ]
            }
        },
        "OBO_Parser.has_term": {
            "name": "has_term",
            "location": 455,
            "return": [
                "networkx.MultiDiGraph",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "dict",
                    "Match[str]",
                    "str",
                    "List[Set[str]]"
                ]
            }
        },
        "OBO_Parser.get_term": {
            "name": "get_term",
            "location": 459,
            "return": [
                "Optional[str]",
                "Optional[Dict]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "str"
                ]
            }
        },
        "OBO_Parser.term_used_as_alternate": {
            "name": "term_used_as_alternate",
            "location": 465,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "List[dict]",
                    "AsyncIterator[T]",
                    "Optional[Exception]"
                ]
            }
        },
        "OBO_Parser.get_alternate_terms": {
            "name": "get_alternate_terms",
            "location": 471,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "AsyncIterator[T]",
                    "Dict[str, Dict[str, str]]",
                    "int"
                ]
            }
        },
        "OBO_Parser.count_all_metas": {
            "name": "count_all_metas",
            "location": 478,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "term_state": [
                    "float",
                    "Optional[int]",
                    "Sequence[T]"
                ],
                "includeXRefs": [
                    "Sequence[str]",
                    "IO",
                    "str",
                    "bool"
                ]
            }
        },
        "OBO_Parser.count_all_xrefs": {
            "name": "count_all_xrefs",
            "location": 485,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "term_state": [
                    "list",
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "OBO_Parser.count_all_structurals": {
            "name": "count_all_structurals",
            "location": 492,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "term_state": [
                    "list",
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "OBO_Parser.get_children": {
            "name": "get_children",
            "location": 499,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Optional[List[str]]",
                    "List[bytes]",
                    "bool",
                    "dict",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "go-site-master/scripts/prepare-panther-arbre-directory.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/reports-page-gen.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "report": [
                    "str",
                    "Optional[str]"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "suppress_rule_tag": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "go-site-master/scripts/s3-uploader.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 70,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "multipart_upload": {
            "name": "multipart_upload",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "source_file_path": [
                    "str",
                    "List[str]"
                ],
                "s3_bucket": [
                    "str",
                    "List[str]"
                ],
                "s3_path": [
                    "str",
                    "List[str]"
                ],
                "content_type": [
                    "str"
                ],
                "metadata": [
                    "str",
                    "int"
                ],
                "policy": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "go-site-master/scripts/sanity-check-ann-report.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "severe_line_reduction_test": {
            "name": "severe_line_reduction_test",
            "location": 286,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "aid": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Optional[dict]"
                ],
                "thresholds": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Optional[dict]"
                ],
                "prod": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "src": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "small_file_size": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "go-site-master/scripts/sanity-check-users-and-groups.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "go-site-master/scripts/shex-reports-page-gen.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "report": [
                    "str",
                    "Optional[str]"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "suppress_rule_tag": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "go-site-master/scripts/zenodo-ops.py": {
        "die_screaming": {
            "name": "die_screaming",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main.get_deposition": {
            "name": "get_deposition",
            "location": 93,
            "return": [
                "int",
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "main.safe_json_report": {
            "name": "safe_json_report",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "str",
                    "dict",
                    "requests.Response",
                    "requests.models.Response",
                    "requests.models.PreparedRequest",
                    "Dict[str, Any]",
                    "bool"
                ],
                "report_list": [
                    "str",
                    "bool",
                    "bytes",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "int",
                    "list"
                ]
            }
        },
        "main.check_args": {
            "name": "check_args",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "arg_list": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "go-site-master/scripts/zenodo-version-update.py": {
        "die": {
            "name": "die",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "yes_or_die": {
            "name": "yes_or_die",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "question": [
                    "str",
                    "int"
                ],
                "default": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "successful_response_code": {
            "name": "successful_response_code",
            "location": 82,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "respc": [
                    "int",
                    "str"
                ],
                "expected": [
                    "bytes",
                    "int",
                    "logging.Logger",
                    "List[int]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main.die_screaming": {
            "name": "die_screaming",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "str",
                    "int",
                    "logging.Logger",
                    "bytes"
                ],
                "response": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "requests.models.PreparedRequest"
                ],
                "deposition_id": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "go-site-master/scripts/goref_parser/goref.py": {
        "GoRef.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "goref_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GoRef.goref_path": {
            "name": "goref_path",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "goref_path": [
                    "str"
                ]
            }
        },
        "GoRef.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "portion": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "go-site-master/scripts/goref_parser/parser.py": {},
    "go-site-master/scripts/goref_parser/utils.py": {
        "get_html_string": {
            "name": "get_html_string",
            "location": 4,
            "return": [
                "str",
                "bytes",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "html": [
                    "str",
                    "int"
                ]
            }
        },
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {}
        }
    },
    "go-site-master/tests/panther-hammer.py": {},
    "go-site-master/tests/behave/steps/basic.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "Optional[int]",
                    "Sequence[Any]"
                ],
                "jsonpath": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "value": [
                    "float",
                    "Union[int, float]",
                    "int",
                    "str"
                ]
            }
        }
    }
}
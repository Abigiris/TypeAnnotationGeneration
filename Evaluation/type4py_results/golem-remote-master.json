{
    "golem-remote-master/setup.py": {},
    "golem-remote-master/examples/iteration1_golemclientmock.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration2_golemclientcmdmock.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration3_redismock.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration4_realredis.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration5_realgolem.py": {
        "func": {
            "name": "func",
            "location": 37,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration6_golem_remote_package.py": {
        "func": {
            "name": "func",
            "location": 25,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration7_task_files.py": {
        "func": {
            "name": "func",
            "location": 35,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "kwarg1": [],
                "kwarg2": []
            }
        }
    },
    "golem-remote-master/examples/target.py": {},
    "golem-remote-master/examples/hyperopt/iteration8_hyperopt_distributed.py": {
        "fn": {
            "name": "fn",
            "location": 34,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fn.f": {
            "name": "f",
            "location": 40,
            "return": [
                "List[str]",
                "List[float]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "golem-remote-master/examples/hyperopt/iteration8_hyperopt_locally.py": {
        "fn": {
            "name": "fn",
            "location": 26,
            "return": [
                "str",
                "int",
                "List[str]",
                "List[float]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "golem-remote-master/experiments/hyperopt1/iteration8_hyperopt_distributed.py": {
        "fn": {
            "name": "fn",
            "location": 31,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fn.f": {
            "name": "f",
            "location": 37,
            "return": [
                "List[str]",
                "List[float]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "golem-remote-master/experiments/hyperopt1/iteration8_hyperopt_locally.py": {
        "fn": {
            "name": "fn",
            "location": 26,
            "return": [
                "str",
                "int",
                "List[str]",
                "List[float]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "golem-remote-master/golem_remote/config.py": {},
    "golem-remote-master/golem_remote/consts.py": {},
    "golem-remote-master/golem_remote/encoding.py": {
        "encode_obj_to_str": {
            "name": "encode_obj_to_str",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Callable[[Any], bool]",
                    "BaseException",
                    "str",
                    "dict"
                ]
            }
        },
        "decode_str_to_obj": {
            "name": "decode_str_to_obj",
            "location": 18,
            "return": [
                "Match",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "golem-remote-master/golem_remote/golem_client.py": {
        "fill_task_definition": {
            "name": "fill_task_definition",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "template_path": [
                    "str"
                ],
                "queue_host": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]",
                    "List[str]",
                    "List[Dict]"
                ],
                "queue_port": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]",
                    "List[str]",
                    "List[Dict]"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "Callable[[float], None]"
                ],
                "number_of_subtasks": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]",
                    "List[str]",
                    "List[Dict]"
                ],
                "task_files_dir": [
                    "Optional[str]",
                    "Dict[pathlib.Path, PackageSummary]",
                    "str",
                    "pathlib.Path",
                    "dict",
                    "int"
                ]
            }
        },
        "initialize_task_files": {
            "name": "initialize_task_files",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "pathlib.Path",
                    "IO[bytes]"
                ],
                "task_files": [
                    "pathlib.PurePosixPath",
                    "uuid.UUID",
                    "List[pathlib.Path]"
                ]
            }
        },
        "_run_cmd": {
            "name": "_run_cmd",
            "location": 98,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "cmd": [
                    "Sequence[str]",
                    "list",
                    "TextIO",
                    "Union[str, List[str]]",
                    "int",
                    "str",
                    "List[List[str]]",
                    "List[str]"
                ]
            }
        },
        "GolemClientInterface.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientInterface.run_function": {
            "name": "run_function",
            "location": 35,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "GolemClientInterface.initialize_task": {
            "name": "initialize_task",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientInterface._run": {
            "name": "_run",
            "location": 48,
            "return": [
                "runf_helpers.SubtaskID"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "List[Tuple]",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "GolemClientInterface.get": {
            "name": "get",
            "location": 52,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "blocking": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "GolemClient.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "golem_host": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "golem_port": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "golem_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool"
                ],
                "golemcli": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "queue_host": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "queue_port": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "blocking": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "number_of_subtasks": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "clear_db": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "task_id": [
                    "str",
                    "int",
                    "Mapping",
                    "bool"
                ],
                "task_files": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "GolemClient._build_start_task_cmd": {
            "name": "_build_start_task_cmd",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "task_definition_path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "GolemClient._run": {
            "name": "_run",
            "location": 160,
            "return": [
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[Mapping, str]",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Any]",
                    "bytes"
                ]
            }
        },
        "GolemClient._create_golem_task": {
            "name": "_create_golem_task",
            "location": 173,
            "return": [
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient._create_queue": {
            "name": "_create_queue",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient.initialize_task": {
            "name": "initialize_task",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient.__getstate__": {
            "name": "__getstate__",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient.__setstate__": {
            "name": "__setstate__",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GolemClient.get": {
            "name": "get",
            "location": 221,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str"
                ],
                "blocking": [
                    "str",
                    "Set[str]",
                    "Union[str, int]",
                    "Optional[Dict[str, Any]]"
                ],
                "timeout": [
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Optional[Dict]",
                    "Optional[float]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "golem-remote-master/golem_remote/golem_remote.py": {
        "golem_running": {
            "name": "golem_running",
            "location": 35,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "Callable[[], None]",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "remote": {
            "name": "remote",
            "location": 47,
            "return": [
                "bool",
                "Callable[..., None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "Callable[..., None]",
                    "Callable"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 62,
            "return": [
                "str",
                "Callable[[], str]",
                "dict"
            ],
            "arguments": {
                "item": [
                    "list",
                    "Sequence[str]",
                    "T"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 78,
            "return": [
                "str",
                "int",
                "bool",
                "Union[str, int]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "golem_dir": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "golemcli": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "class_": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "blocking": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "number_of_subtasks": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "clear_db": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "task_id": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "task_files": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "RemoteFunction.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "client": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "RemoteFunction.remote": {
            "name": "remote",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "golem_running.checked": {
            "name": "checked",
            "location": 37,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "golem-remote-master/golem_remote/open_file.py": {
        "open_file": {
            "name": "open_file",
            "location": 11,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Hashable"
            ],
            "arguments": {
                "original_dir": [
                    "str",
                    "pathlib.Path",
                    "Union[Dict[str, Any], List[Any]]",
                    "Dict[str, str]"
                ],
                "task_files_dir": [
                    "str",
                    "pathlib.Path",
                    "Union[Dict[str, Any], List[Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "list_dir_recursive": {
            "name": "list_dir_recursive",
            "location": 39,
            "return": [
                "typing.Iterator[pathlib.Path]"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path",
                    "Iterable[str]",
                    "str",
                    "path.Path"
                ]
            }
        },
        "open_file._open": {
            "name": "_open",
            "location": 23,
            "return": [
                "bool",
                "str",
                "List[str]",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "IO"
                ]
            }
        }
    },
    "golem-remote-master/golem_remote/queue_helpers.py": {
        "get_result_key": {
            "name": "get_result_key",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "subtask_id": [
                    "golem_remote.runf_helpers.SubtaskID",
                    "str"
                ]
            }
        },
        "_RedisQueue.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[int, float]"
                ],
                "host": [
                    "int",
                    "str",
                    "float"
                ],
                "port": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_RedisQueue._queue_size": {
            "name": "_queue_size",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue.is_empty": {
            "name": "is_empty",
            "location": 29,
            "return": [
                "int",
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue.clear_queue": {
            "name": "clear_queue",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue.clear_db": {
            "name": "clear_db",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue._pop": {
            "name": "_pop",
            "location": 41,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "float",
                    "Exception",
                    "list"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "Mapping",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "_RedisQueue.push": {
            "name": "push",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "_RedisQueue.set": {
            "name": "set",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "val": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_RedisQueue.get": {
            "name": "get",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 82,
            "return": [
                "str",
                "list",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Optional[List[Type]]"
                ],
                "timeout": [
                    "Optional[List[Type]]"
                ]
            }
        },
        "Queue.pop_nowait": {
            "name": "pop_nowait",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "golem-remote-master/golem_remote/runf_helpers.py": {},
    "golem-remote-master/golem_remote/__init__.py": {},
    "golem-remote-master/tests/helpers.py": {
        "start_redis": {
            "name": "start_redis",
            "location": 10,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "port": [
                    "str",
                    "golem_remote.runf_helpers.Port",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "_TestWithRedis.setUpClass": {
            "name": "setUpClass",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T",
                    "Optional[str]",
                    "Dict[str, object]"
                ]
            }
        },
        "_TestWithRedis.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestWithRedis.tearDownClass": {
            "name": "tearDownClass",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Type['Model']"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_encoding.py": {
        "TestEncodingDecoding.test_encode_decode": {
            "name": "test_encode_decode",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingDecoding.test_encode_decode.A.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_golem_client.py": {
        "MockQueue.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockQueue.pop": {
            "name": "pop",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "float",
                    "Exception",
                    "list"
                ],
                "timeout": [
                    "bool",
                    "float",
                    "Exception",
                    "list"
                ]
            }
        },
        "MockQueue.pop_nowait": {
            "name": "pop_nowait",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockQueue.push": {
            "name": "push",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "Match",
                    "Optional[int]",
                    "Optional[Union[int, Any]]",
                    "list",
                    "T",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "MockQueue.set": {
            "name": "set",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "MockQueue.get": {
            "name": "get",
            "location": 35,
            "return": [
                "dict",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Literal",
                "Mapping",
                "Union[str, bytes]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MockQueue2.set": {
            "name": "set",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "set",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "type",
                    "set"
                ]
            }
        },
        "GolemClientQueueMock.initialize_task": {
            "name": "initialize_task",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientQueue2Mock.initialize_task": {
            "name": "initialize_task",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGolemClient.test_workflow": {
            "name": "test_workflow",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGolemClient.test_workflow.run_test": {
            "name": "run_test",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "class_": [
                    "str",
                    "Dict[str, str]",
                    "list",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestGolemClient.test_workflow.run_test.func": {
            "name": "func",
            "location": 82,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_golem_remote.py": {
        "GolemClientAllMock.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientAllMock.initialize_task": {
            "name": "initialize_task",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientAllMock._run": {
            "name": "_run",
            "location": 23,
            "return": [
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "GolemClientAllMock.get": {
            "name": "get",
            "location": 28,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "blocking": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "GolemClientMockPickle.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientMockPickle.initialize_task": {
            "name": "initialize_task",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientMockPickle.__run_pickled": {
            "name": "__run_pickled",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "GolemClientMockPickle._run": {
            "name": "_run",
            "location": 46,
            "return": [
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "GolemClientMockPickle.get": {
            "name": "get",
            "location": 52,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "blocking": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "TestGolemRemote.test_workflow": {
            "name": "test_workflow",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGolemRemote.test_workflow.run_test": {
            "name": "run_test",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "class_": [
                    "str",
                    "Dict[str, str]",
                    "list",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestGolemRemote.test_workflow.run_test.func": {
            "name": "func",
            "location": 64,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg1": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ],
                "kwarg2": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_open_file.py": {
        "TestOpenFile_1.test_open_file": {
            "name": "test_open_file",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenFile_1.test_open_file.read_file": {
            "name": "read_file",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Sequence[T]",
                    "List[str]"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_queue_helpers.py": {
        "TestRedisQueue.test_init": {
            "name": "test_init",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_empty": {
            "name": "test_empty",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_push_pop_noblock": {
            "name": "test_push_pop_noblock",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_push_pop_block": {
            "name": "test_push_pop_block",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_get_set": {
            "name": "test_get_set",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_pop_noblock": {
            "name": "test_pop_noblock",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.pop_nowait": {
            "name": "pop_nowait",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "golem-remote-master/tests/__init__.py": {}
}
{
    "goodyearwelt-reviews-master/src/utils.py": {
        "create_views": {
            "name": "create_views",
            "location": 8,
            "return": [
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "bytes",
                    "List[List[T]]"
                ]
            }
        }
    },
    "goodyearwelt-reviews-master/src/__init__.py": {},
    "goodyearwelt-reviews-master/src/scrape/common.py": {
        "from_json": {
            "name": "from_json",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Dict[str, Any]",
                    "Type[T]",
                    "dict"
                ]
            }
        },
        "insert_or_ignore": {
            "name": "insert_or_ignore",
            "location": 20,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Cursor",
                    "str",
                    "dict"
                ],
                "table": [
                    "str",
                    "Type",
                    "List[str]",
                    "dict"
                ],
                "instance": []
            }
        },
        "is_media_url": {
            "name": "is_media_url",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "T",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "base_parser": {
            "name": "base_parser",
            "location": 48,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "goodyearwelt-reviews-master/src/scrape/extract_links.py": {
        "get_submission_contents": {
            "name": "get_submission_contents",
            "location": 15,
            "return": [
                "sqlite3.Cursor",
                "str",
                "List[str]",
                "tuple",
                "int"
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Cursor",
                    "str",
                    "List[str]",
                    "tuple",
                    "int"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "stiff.models.Tagging",
                    "Union[server.models.Bike, int]"
                ],
                "selftext_html": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "goodyearwelt-reviews-master/src/scrape/images.py": {
        "sniff_imgur_resource": {
            "name": "sniff_imgur_resource",
            "location": 127,
            "return": [
                "type"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "get_id": {
            "name": "get_id",
            "location": 147,
            "return": [
                "str",
                "pathlib.Path",
                "Union[pathlib.Path, str]",
                "path.Path"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float"
                ]
            }
        },
        "make_imgur_url": {
            "name": "make_imgur_url",
            "location": 155,
            "return": [
                "str",
                "bool",
                "zerver.models.Realm",
                "pathlib.Path"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Callable[[Any, Any], None]]"
                ],
                "hash_": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "strip_imgur_subdomain": {
            "name": "strip_imgur_subdomain",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "is_imgur": {
            "name": "is_imgur",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "list"
                ]
            }
        },
        "is_album": {
            "name": "is_album",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "get_links": {
            "name": "get_links",
            "location": 180,
            "return": [
                "sqlite3.Cursor",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Cursor",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ingest_albums": {
            "name": "ingest_albums",
            "location": 189,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Cursor",
                    "bool",
                    "float"
                ],
                "client": [
                    "str",
                    "int",
                    "Tuple[str, str]"
                ],
                "medias": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "Callable"
                ]
            }
        },
        "ingest_standalones": {
            "name": "ingest_standalones",
            "location": 210,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Cursor",
                    "bool",
                    "float"
                ],
                "client": [
                    "str"
                ],
                "imgur_client": [
                    "str"
                ],
                "medias": [
                    "List[Tuple[int, str]]",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 236,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "Client.headers": {
            "name": "headers",
            "location": 26,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.on_failure": {
            "name": "on_failure",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response",
                    "dict"
                ]
            }
        },
        "Client.get_image": {
            "name": "get_image",
            "location": 40,
            "return": [
                "str",
                "List[\"libkol.Item\"]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImgurClient.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ImgurClient.headers": {
            "name": "headers",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "server.models.Bike"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImgurClient.near_rate_limit": {
            "name": "near_rate_limit",
            "location": 72,
            "return": [
                "str",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping[str, str]",
                    "str"
                ]
            }
        },
        "ImgurClient.on_failure": {
            "name": "on_failure",
            "location": 81,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response",
                    "List[Dict]",
                    "OrderedDict",
                    "dict"
                ]
            }
        },
        "ImgurClient.get_image": {
            "name": "get_image",
            "location": 88,
            "return": [
                "Set[str]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ImgurClient.get_json": {
            "name": "get_json",
            "location": 98,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int",
                "Optional[Dict[str, Any]]",
                "deeplearning.ml4pl.models.logger.Logger"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImgurClient.get_album": {
            "name": "get_album",
            "location": 112,
            "return": [
                "Optional[dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ],
                "media_id": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ImgurClient.near_rate_limit.hit_threshold": {
            "name": "hit_threshold",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "who": [
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "goodyearwelt-reviews-master/src/scrape/models.py": {
        "Submission.__post_init__": {
            "name": "__post_init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_comments": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Album.__post_init__": {
            "name": "__post_init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime": [
                    "str",
                    "int",
                    "bytes"
                ],
                "link": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Image.__post_init__": {
            "name": "__post_init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime": [
                    "str",
                    "float"
                ],
                "type": [
                    "str",
                    "float"
                ],
                "link": [
                    "str",
                    "float"
                ]
            }
        },
        "ProductSearchResult.__post_init__": {
            "name": "__post_init__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "brandName": [
                    "str",
                    "Dict[str, Any]"
                ],
                "productId": [
                    "int",
                    "str"
                ],
                "productName": [
                    "str"
                ],
                "categoryFacet": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Product.__post_init__": {
            "name": "__post_init__",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "brandName": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "productName": [
                    "str"
                ],
                "defaultProductUrl": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "goodyearwelt-reviews-master/src/scrape/subreddit.py": {
        "search": {
            "name": "search",
            "location": 30,
            "return": [
                "int",
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "subreddit": [
                    "Optional[int]",
                    "str",
                    "Sized",
                    "Optional[bool]"
                ],
                "query": [
                    "int",
                    "str",
                    "Optional[Dict]",
                    "List[str]"
                ],
                "after": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "paginated_search": {
            "name": "paginated_search",
            "location": 53,
            "return": [
                "Union[tuple, list]",
                "app.models.move.Coordinate",
                "Set[str]"
            ],
            "arguments": {
                "subreddit": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "query": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "after": [
                    "str",
                    "dict",
                    "IO[bytes]"
                ]
            }
        },
        "extract_submissions": {
            "name": "extract_submissions",
            "location": 72,
            "return": [
                "str",
                "src.autoks.callbacks.CallbackList",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "listing": [
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "OrderedDict[str, Any]"
                ],
                "subreddit": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "query": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 90,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Cursor",
                    "str",
                    "list",
                    "callable",
                    "int"
                ],
                "query": [
                    "int",
                    "Sequence",
                    "str",
                    "Match[str]"
                ],
                "subreddit": [
                    "int",
                    "Sequence",
                    "str",
                    "Match[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "goodyearwelt-reviews-master/src/scrape/zappos.py": {
        "reset_time": {
            "name": "reset_time",
            "location": 29,
            "return": [
                "float",
                "int",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "headers": [
                    "MutableMapping[str, str]",
                    "int",
                    "Dict[str, List[str]]",
                    "MutableMapping",
                    "str",
                    "Optional[\"Response\"]"
                ]
            }
        },
        "strip_legal_signs": {
            "name": "strip_legal_signs",
            "location": 48,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Union[bytes, str]"
                ]
            }
        },
        "extract_description": {
            "name": "extract_description",
            "location": 58,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "description_html": [
                    "dict",
                    "int",
                    "users.models.JustfixUser",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ],
                "brand": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "paginated_search": {
            "name": "paginated_search",
            "location": 151,
            "return": [
                "dict",
                "str",
                "set",
                "models.Match",
                "List[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "bool"
                ],
                "term": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "get_products": {
            "name": "get_products",
            "location": 170,
            "return": [
                "typing.Iterable[src.scrape.models.Product]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "zerver.models.Client",
                    "zerver.models.UserProfile"
                ],
                "records": [
                    "List[src.scrape.models.ProductSearchResult]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 183,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "reset_time.le_threshold": {
            "name": "le_threshold",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ZapposClient.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "ZapposClient.with_key": {
            "name": "with_key",
            "location": 89,
            "return": [
                "str",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "ZapposClient.dispatch": {
            "name": "dispatch",
            "location": 92,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "requests.models.Response",
                    "Dict[str, str]"
                ],
                "url": [
                    "str",
                    "requests.models.Response",
                    "Dict[str, str]"
                ]
            }
        },
        "ZapposClient.search": {
            "name": "search",
            "location": 115,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "int",
                    "str",
                    "Union[str, List[Any]]"
                ],
                "page": [
                    "int",
                    "str",
                    "Union[str, List[Any]]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "ZapposClient.product_description": {
            "name": "product_description",
            "location": 126,
            "return": [
                "bytes",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "product_id": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "goodyearwelt-reviews-master/src/scrape/__init__.py": {},
    "goodyearwelt-reviews-master/tests/conftest.py": {
        "cursor": {
            "name": "cursor",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "goodyearwelt-reviews-master/tests/test_utils.py": {
        "TestCreateViews.test_view_is_created": {
            "name": "test_view_is_created",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str",
                    "int",
                    "dict"
                ],
                "view_name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "goodyearwelt-reviews-master/tests/scrape/test_common.py": {
        "cursor": {
            "name": "cursor",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Post.__post_init__": {
            "name": "__post_init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "TestFromJson.test_initializes_dataclass": {
            "name": "test_initializes_dataclass",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromJson.test_only_selects_init_fields": {
            "name": "test_only_selects_init_fields",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromJson.test_allows_missing_fields": {
            "name": "test_allows_missing_fields",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInsertOrIgnore.test_inserts": {
            "name": "test_inserts",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": []
            }
        },
        "TestInsertOrIgnore.test_ignores": {
            "name": "test_ignores",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": []
            }
        },
        "TestIsMediaURL.test_is_media": {
            "name": "test_is_media",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "TestIsMediaURL.test_reddit": {
            "name": "test_reddit",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsMediaURL.test_unknown": {
            "name": "test_unknown",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "goodyearwelt-reviews-master/tests/scrape/test_extract_links.py": {
        "TestExtract.test_extracts_media_links": {
            "name": "test_extracts_media_links",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtract.test_propagates_submission_id": {
            "name": "test_propagates_submission_id",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtract.test_never_direct": {
            "name": "test_never_direct",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "goodyearwelt-reviews-master/tests/scrape/test_images.py": {
        "imgur_album": {
            "name": "imgur_album",
            "location": 23,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "add_image": {
            "name": "add_image",
            "location": 28,
            "return": [
                "int",
                "bytearray",
                "str"
            ],
            "arguments": {
                "url": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[bool]"
                ],
                "body": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "add_album_response": {
            "name": "add_album_response",
            "location": 34,
            "return": [
                "str",
                "int",
                "Mapping[str, str]"
            ],
            "arguments": {
                "raw_album": [
                    "str",
                    "dict"
                ],
                "img_body": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "insert_submission": {
            "name": "insert_submission",
            "location": 61,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "List[int]"
                ],
                "s_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "insert_media": {
            "name": "insert_media",
            "location": 71,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cursor": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "T"
                ],
                "m_id": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "T"
                ],
                "s_id": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "T"
                ],
                "url": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "T"
                ]
            }
        },
        "TestSniffImgurResource.test_gets_resource": {
            "name": "test_gets_resource",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestSniffImgurResource.test_handles_trailing_slash": {
            "name": "test_handles_trailing_slash",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSniffImgurResource.test_ignores_extra_path_components": {
            "name": "test_ignores_extra_path_components",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSniffImgurResource.test_returns_none_for_unknown_resource": {
            "name": "test_returns_none_for_unknown_resource",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSniffImgurResource.test_strips_album_anchor_link": {
            "name": "test_strips_album_anchor_link",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetID.test_gets_id": {
            "name": "test_gets_id",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union['KspNativeControl', int]",
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMakeImgurURL.test_imgur_api_url": {
            "name": "test_imgur_api_url",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripImgurSubdomain.test_strips": {
            "name": "test_strips",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestStripImgurSubdomain.test_passes": {
            "name": "test_passes",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestIsImgur.test_is_imgur": {
            "name": "test_is_imgur",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "bool",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "TestIsImgur.test_not_imgur": {
            "name": "test_not_imgur",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bytes",
                    "Sequence",
                    "float",
                    "str"
                ]
            }
        },
        "TestIsAlbum.test_is_album": {
            "name": "test_is_album",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "bool",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "TestIsAlbum.test_not_album": {
            "name": "test_not_album",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bytes",
                    "Sequence",
                    "float",
                    "str"
                ]
            }
        },
        "TestGetLinks.test_unprocessed_links": {
            "name": "test_unprocessed_links",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": []
            }
        },
        "TestClient.test_gets_image": {
            "name": "test_gets_image",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_metadata_is_propagated": {
            "name": "test_metadata_is_propagated",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_returns_metadata_if_request_fails": {
            "name": "test_returns_metadata_if_request_fails",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClient.test_raises_error_on_auth_failure": {
            "name": "test_raises_error_on_auth_failure",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestImgurClient.test_get_image_has_auth_header": {
            "name": "test_get_image_has_auth_header",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImgurClient.test_get_album_has_auth_header": {
            "name": "test_get_album_has_auth_header",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImgurClient.test_raises_error_on_rate_limited": {
            "name": "test_raises_error_on_rate_limited",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImgurClient.test_gets_album": {
            "name": "test_gets_album",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "imgur_album": []
            }
        },
        "TestIngestStandalones.test_reddit_standalone": {
            "name": "test_reddit_standalone",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": []
            }
        },
        "TestIngestStandalones.test_imgur_standalone": {
            "name": "test_imgur_standalone",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": []
            }
        },
        "TestIngestAlbums.test_imgur_album": {
            "name": "test_imgur_album",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [],
                "imgur_album": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestImgurClient.test_get_image_has_auth_header.cb": {
            "name": "cb",
            "location": 285,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "TestImgurClient.test_get_album_has_auth_header.cb": {
            "name": "cb",
            "location": 307,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "request": [
                    "jj.requests.Request"
                ]
            }
        }
    },
    "goodyearwelt-reviews-master/tests/scrape/test_subreddit.py": {
        "listing": {
            "name": "listing",
            "location": 9,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "TestExtractSubmissions.test_extracts_all_submissions": {
            "name": "test_extracts_all_submissions",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": [
                    "dict"
                ]
            }
        },
        "TestExtractSubmissions.test_saves_additional_metadata": {
            "name": "test_saves_additional_metadata",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestExtractSubmissions.test_propagates_empty": {
            "name": "test_propagates_empty",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractSubmissions.test_medias_are_associated": {
            "name": "test_medias_are_associated",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": []
            }
        },
        "TestExtractSubmissions.test_medias_are_direct": {
            "name": "test_medias_are_direct",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": []
            }
        },
        "TestExtractSubmissions.test_medias_dont_have_text": {
            "name": "test_medias_dont_have_text",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": [
                    "tracki.src.domain.entities.Shift"
                ]
            }
        },
        "MockSearchResults.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MockSearchResults.max_responses": {
            "name": "max_responses",
            "location": 70,
            "return": [
                "str",
                "Callable[[bytes], None]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSearchResults.listing": {
            "name": "listing",
            "location": 76,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "submissions": [
                    "dict",
                    "Dict[str, Any]",
                    "float"
                ],
                "after": [
                    "dict",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "MockSearchResults.get": {
            "name": "get",
            "location": 86,
            "return": [
                "Optional[str]",
                "int",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ]
            }
        },
        "TestPaginatedSearch.test_mock": {
            "name": "test_mock",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "listing": []
            }
        },
        "TestIngest.test_mock_without_resume": {
            "name": "test_mock_without_resume",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str"
                ],
                "listing": []
            }
        }
    },
    "goodyearwelt-reviews-master/tests/scrape/test_zappos.py": {
        "product_response": {
            "name": "product_response",
            "location": 22,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "List[str]",
                "bytes",
                "Dict[str, Any]",
                "int",
                "List[search_service.models.table.Table]"
            ],
            "arguments": {}
        },
        "headers": {
            "name": "headers",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestResetTime.test_when_reset_is_unnecessary": {
            "name": "test_when_reset_is_unnecessary",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetTime.test_when_short_limit_is_low": {
            "name": "test_when_short_limit_is_low",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetTime.test_when_long_limit_is_low": {
            "name": "test_when_long_limit_is_low",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResetTime.test_long_reset_when_limits_are_both_low": {
            "name": "test_long_reset_when_limits_are_both_low",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripLegalSigns.test_strips": {
            "name": "test_strips",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestExtractDescription.test_ignores_link": {
            "name": "test_ignores_link",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractDescription.test_returns_null_if_no_match": {
            "name": "test_returns_null_if_no_match",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractDescription.test_gets_text_within_markup": {
            "name": "test_gets_text_within_markup",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractDescription.test_gets_first_occurrence": {
            "name": "test_gets_first_occurrence",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractDescription.test_is_stripped": {
            "name": "test_is_stripped",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_with_key": {
            "name": "test_with_key",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_dispatch_adds_key": {
            "name": "test_dispatch_adds_key",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_dispatch_retries_when_throttled": {
            "name": "test_dispatch_retries_when_throttled",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_dispatch_raises_unknown_error": {
            "name": "test_dispatch_raises_unknown_error",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_dispatch_pre_empts_rate_limiting": {
            "name": "test_dispatch_pre_empts_rate_limiting",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_gets_product": {
            "name": "test_gets_product",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "product_response": [
                    "bytes",
                    "List[bytes]",
                    "List[int]",
                    "Callable",
                    "Optional[Any]",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestZapposClient.test_search_has_params": {
            "name": "test_search_has_params",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProducts.test_skips_skippable_errors": {
            "name": "test_skips_skippable_errors",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "requests.models.Response"
                ]
            }
        },
        "TestGetProducts.test_gets_multiple_products": {
            "name": "test_gets_multiple_products",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "product_response": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "TestPaginatedSearch.test_paginated_search": {
            "name": "test_paginated_search",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZapposClient.test_dispatch_adds_key.has_key": {
            "name": "has_key",
            "location": 158,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "TestZapposClient.test_dispatch_pre_empts_rate_limiting.cb": {
            "name": "cb",
            "location": 191,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "TestZapposClient.test_gets_product.has_includes": {
            "name": "has_includes",
            "location": 212,
            "return": [
                "str",
                "bool",
                "Dict[int, Dict]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "TestZapposClient.test_search_has_params.has_params": {
            "name": "has_params",
            "location": 248,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "request": []
            }
        },
        "TestPaginatedSearch.test_paginated_search.cb": {
            "name": "cb",
            "location": 302,
            "return": [
                "int",
                "List[Dict[str, str]]",
                "Dict[str, Any]",
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    }
}
{
    "gordo-master/setup.py": {
        "requirements": {
            "name": "requirements",
            "location": 9,
            "return": [
                "List[str]",
                "str",
                "List[float]",
                "Optional[List[str]]",
                "List[int]"
            ],
            "arguments": {
                "fp": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/benchmarks/test_ml_server.py": {
        "single_post_to_ml_server": {
            "name": "single_post_to_ml_server",
            "location": 15,
            "return": [
                "str",
                "dict",
                "Exception",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "client": [
                    "str",
                    "int"
                ],
                "path": [
                    "str",
                    "int"
                ],
                "X": [
                    "str",
                    "int"
                ]
            }
        },
        "test_bench_ml_server_anomaly_post": {
            "name": "test_bench_ml_server_anomaly_post",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [],
                "gordo_ml_server_client": [],
                "sensors": [
                    "numpy.ndarray"
                ]
            }
        },
        "test_bench_ml_server_base_post": {
            "name": "test_bench_ml_server_base_post",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [],
                "gordo_ml_server_client": [],
                "sensors": [
                    "numpy.ndarray",
                    "Callable"
                ]
            }
        }
    },
    "gordo-master/benchmarks/load_test/load_test.py": {
        "fetch_metadata": {
            "name": "fetch_metadata",
            "location": 18,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "project_name": [
                    "str"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str"
                ],
                "ambassador": [
                    "str"
                ],
                "watchman_port": [
                    "str",
                    "Type[Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "generate_random_data": {
            "name": "generate_random_data",
            "location": 42,
            "return": [
                "str",
                "trezor.utils.Writer",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "len_x": [
                    "int",
                    "List[numpy.ndarray]",
                    "float",
                    "Optional[int]"
                ],
                "len_y": [
                    "List[numpy.ndarray]",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "samples": [
                    "int",
                    "List[numpy.ndarray]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "make_tasks": {
            "name": "make_tasks",
            "location": 51,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "set"
                ],
                "endpoint": [
                    "str",
                    "List[str]",
                    "dict",
                    "numpy.ndarray"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "project_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "str"
                ],
                "ambassador": [
                    "str",
                    "Dict[int, str]"
                ],
                "watchman_port": [
                    "str",
                    "Dict[int, str]"
                ]
            }
        }
    },
    "gordo-master/docs/conf.py": {},
    "gordo-master/gordo/utils.py": {
        "normalize_sensor_tags": {
            "name": "normalize_sensor_tags",
            "location": 15,
            "return": [
                "str",
                "Tuple[str]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "build_dataset_metadata": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "tag_list": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "walledomain.Tag"
                ]
            }
        }
    },
    "gordo-master/gordo/__init__.py": {
        "parse_version": {
            "name": "parse_version",
            "location": 15,
            "return": [
                "bool",
                "List[Tuple[str, str]]",
                "int",
                "str"
            ],
            "arguments": {
                "input_version": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/builder/build_model.py": {
        "ModelBuilder.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ModelBuilder.cached_model_path": {
            "name": "cached_model_path",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "ModelBuilder.gordo_version": {
            "name": "gordo_version",
            "location": 89,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelBuilder.build": {
            "name": "build",
            "location": 92,
            "return": [
                "denite.util.UserContext",
                "Pattern",
                "int",
                "str",
                "shapely.geometry.base.BaseGeometry"
            ],
            "arguments": {
                "self": [],
                "output_dir": [
                    "IO",
                    "str",
                    "Path",
                    "pathlib.Path",
                    "Dict[str, str]"
                ],
                "model_register_dir": [
                    "str",
                    "Iterable[str]",
                    "pathlib.Path",
                    "path.Path",
                    "cerulean.Path",
                    "IO[Any]",
                    "Union[str, pathlib.Path]",
                    "Sequence[str]"
                ],
                "replace_cache": [
                    "bool",
                    "List[pathlib.Path]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "ModelBuilder._build": {
            "name": "_build",
            "location": 177,
            "return": [
                "denite.util.UserContext",
                "int",
                "utils.CWLObjectType",
                "shapely.geometry.base.BaseGeometry",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelBuilder.set_seed": {
            "name": "set_seed",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "pandas.DataFrame",
                    "str"
                ]
            }
        },
        "ModelBuilder.build_split_dict": {
            "name": "build_split_dict",
            "location": 329,
            "return": [
                "List[int]",
                "str",
                "dict",
                "pathlib.Path",
                "Optional[int]"
            ],
            "arguments": {
                "X": [
                    "pandas.DataFrame",
                    "int",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "Union[int, List[int]]",
                    "Union[int, float]"
                ],
                "split_obj": [
                    "str",
                    "Callable"
                ]
            }
        },
        "ModelBuilder.build_metrics_dict": {
            "name": "build_metrics_dict",
            "location": 360,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "metrics_list": [
                    "list",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ],
                "y": [
                    "pandas.DataFrame",
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "Tuple[int, int, int]",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "scaler": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ModelBuilder._determine_offset": {
            "name": "_determine_offset",
            "location": 431,
            "return": [
                "int",
                "Optional[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "str"
            ],
            "arguments": {
                "model": [
                    "numpy.ndarray",
                    "Union[tensorflow.Tensor, numpy.ndarray]",
                    "str"
                ],
                "X": [
                    "numpy.ndarray",
                    "List[gluonts.model.common.Tensor]"
                ]
            }
        },
        "ModelBuilder._extract_metadata": {
            "name": "_extract_metadata",
            "location": 457,
            "return": [
                "bytes",
                "dict",
                "str",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "machine": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ModelBuilder._save_model": {
            "name": "_save_model",
            "location": 464,
            "return": [
                "str",
                "BinaryIO"
            ],
            "arguments": {
                "model": [
                    "pathlib.Path",
                    "str",
                    "sklearn.base.BaseEstimator",
                    "Optional[pathlib.Path]"
                ],
                "machine": [
                    "pathlib.Path",
                    "str",
                    "sklearn.base.BaseEstimator",
                    "Optional[pathlib.Path]"
                ],
                "output_dir": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "cerulean.Path",
                    "Optional[str]"
                ],
                "checksum": [
                    "str",
                    "pandas.io.formats.formaDataFrameFormatter",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ModelBuilder._extract_metadata_from_model": {
            "name": "_extract_metadata_from_model",
            "location": 500,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "model": [
                    "model.batcher.QABatch",
                    "allennlp.models.model.Model",
                    "sklearn.base.BaseEstimator",
                    "str"
                ],
                "metadata": [
                    "dict",
                    "Dict[str, Any]",
                    "logging.Logger",
                    "List[str]"
                ]
            }
        },
        "ModelBuilder.cache_key": {
            "name": "cache_key",
            "location": 553,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelBuilder.calculate_cache_key": {
            "name": "calculate_cache_key",
            "location": 556,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "Dict[str, Any]",
                    "Type[T]",
                    "str",
                    "dict"
                ]
            }
        },
        "ModelBuilder.check_cache": {
            "name": "check_cache",
            "location": 616,
            "return": [
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "model_register_dir": [
                    "str",
                    "bool",
                    "dict",
                    "os.PathLike",
                    "pathlib.Path"
                ],
                "cache_key": [
                    "str",
                    "bool",
                    "dict",
                    "os.PathLike",
                    "pathlib.Path"
                ]
            }
        },
        "ModelBuilder.metrics_from_list": {
            "name": "metrics_from_list",
            "location": 654,
            "return": [
                "numpy.ndarray",
                "int",
                "pandas.DataFrame",
                "str",
                "Union[int, float]",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "metric_list": [
                    "Optional[List[str]]",
                    "Optional[int]",
                    "list",
                    "float",
                    "dict"
                ]
            }
        },
        "ModelBuilder.build_metrics_dict._score_factory": {
            "name": "_score_factory",
            "location": 395,
            "return": [
                "str",
                "denite.util.UserContext",
                "Set[str]"
            ],
            "arguments": {
                "metric_func": [
                    "str",
                    "bool"
                ],
                "col_index": [
                    "str",
                    "bool"
                ]
            }
        },
        "ModelBuilder.build_metrics_dict._score_factory._score_per_tag": {
            "name": "_score_per_tag",
            "location": 396,
            "return": [
                "bool",
                "Mapping",
                "Callable[[KT], VT]",
                "Sequence"
            ],
            "arguments": {
                "y_true": [
                    "bool",
                    "Callable",
                    "str",
                    "Dict[str, Any]"
                ],
                "y_pred": [
                    "dict",
                    "Dict[str, tensorflow.Tensor]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.Item",
                    "list",
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/builder/local_build.py": {
        "local_build": {
            "name": "local_build",
            "location": 14,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Union[sklearn.base.BaseEstimator, None], gordo.machine.Machine]]"
            ],
            "arguments": {
                "config_str": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/gordo/builder/utils.py": {
        "create_model_builder": {
            "name": "create_model_builder",
            "location": 8,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "model_builder_class": [
                    "Iterable[str]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "Optional[Tuple[Any, str]]"
                ]
            }
        }
    },
    "gordo-master/gordo/builder/__init__.py": {},
    "gordo-master/gordo/cli/cli.py": {
        "gordo": {
            "name": "gordo",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_ctx": [
                    "click.Context",
                    "str",
                    "click.core.Context",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "machine_config": [
                    "dict",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "output_dir": [
                    "str",
                    "Optional[str]"
                ],
                "model_register_dir": [
                    "str",
                    "Optional[str]"
                ],
                "model_builder_class": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[int]",
                    "int"
                ],
                "print_cv_scores": [
                    "bool",
                    "int",
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "model_parameter": [
                    "str",
                    "Dict[str, str]",
                    "frozenset[str]"
                ],
                "exceptions_reporter_file": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[cmk.utils.type_defs.SectionName]",
                    "bool",
                    "Tuple[Type]",
                    "dict"
                ],
                "exceptions_report_level": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[cmk.utils.type_defs.SectionName]",
                    "bool",
                    "Tuple[Type]",
                    "dict"
                ]
            }
        },
        "expand_model": {
            "name": "expand_model",
            "location": 215,
            "return": [
                "Callable[[dict], None]",
                "cmk.utils.type_defs.HostAddress",
                "cmk.utils.type_defs.HostName",
                "Exception"
            ],
            "arguments": {
                "model_config": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "model_parameters": [
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_all_score_strings": {
            "name": "get_all_score_strings",
            "location": 249,
            "return": [
                "str",
                "List[str]",
                "List[cmk.gui.plugins.views.utils.JoinCell]"
            ],
            "arguments": {
                "machine": [
                    "str"
                ]
            }
        },
        "run_server_cli": {
            "name": "run_server_cli",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "float",
                    "int",
                    "str"
                ],
                "port": [
                    "float",
                    "int",
                    "str"
                ],
                "workers": [
                    "float",
                    "int",
                    "str"
                ],
                "worker_connections": [
                    "float",
                    "int",
                    "str"
                ],
                "threads": [
                    "float",
                    "int",
                    "str"
                ],
                "worker_class": [
                    "float",
                    "int",
                    "str"
                ],
                "log_level": [
                    "float",
                    "int",
                    "str"
                ],
                "server_app": [
                    "float",
                    "int",
                    "str"
                ],
                "with_prometheus_config": [
                    "bool"
                ]
            }
        }
    },
    "gordo-master/gordo/cli/custom_types.py": {
        "key_value_par": {
            "name": "key_value_par",
            "location": 23,
            "return": [
                "str",
                "bytes",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "val": [
                    "str"
                ]
            }
        },
        "HostIP.convert": {
            "name": "convert",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/cli/exceptions_reporter.py": {
        "ReportLevel.get_by_name": {
            "name": "get_by_name",
            "location": 19,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "default": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ReportLevel.get_names": {
            "name": "get_names",
            "location": 28,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "Generator[str, None, None]",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "ExceptionsReporter.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exceptions": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "default_exit_code": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "traceback_limit": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "float"
                ]
            }
        },
        "ExceptionsReporter.sort_exceptions": {
            "name": "sort_exceptions",
            "location": 63,
            "return": [
                "str",
                "dict",
                "Callable",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "exceptions": [
                    "Exception",
                    "int",
                    "Callable[[], Awaitable[Mapping]]",
                    "Callable[[Mapping], Awaitable]"
                ]
            }
        },
        "ExceptionsReporter.trim_message": {
            "name": "trim_message",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ],
                "max_length": [
                    "int",
                    "str"
                ]
            }
        },
        "ExceptionsReporter.trim_formatted_traceback": {
            "name": "trim_formatted_traceback",
            "location": 87,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "formatted_traceback": [
                    "str",
                    "int"
                ],
                "max_length": [
                    "str",
                    "int"
                ]
            }
        },
        "ExceptionsReporter.found_exception_item": {
            "name": "found_exception_item",
            "location": 103,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "List[str]",
                "Optional[float]",
                "Optional[int]",
                "Callable[[Type, str], bool]",
                "Optional['Entity']"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[type]"
                ]
            }
        },
        "ExceptionsReporter.exception_exit_code": {
            "name": "exception_exit_code",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, dict]]",
                    "Optional[Collection[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "ExceptionsReporter.report": {
            "name": "report",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "dict",
                    "Dict[str, str]"
                ],
                "exc_type": [
                    "Optional[str]",
                    "Union[None, str]",
                    "Optional[Any]",
                    "List[\"Issue\"]",
                    "Optional[int]"
                ],
                "exc_value": [
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[bool]"
                ],
                "exc_traceback": [
                    "Optional[Union[int, float]]",
                    "Optional[Any]",
                    "Optional[Type]",
                    "Optional[str]",
                    "Optional[mypy.types.Type]"
                ],
                "report_file": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Callable[[str], bool]"
                ],
                "max_message_len": [
                    "Optional[int]",
                    "int",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "Optional[str]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "ExceptionsReporter.safe_report": {
            "name": "safe_report",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "bool",
                    "static_frame.core.util.DtypesSpecifier",
                    "Optional[Union[int, str]]",
                    "str"
                ],
                "exc_type": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "bool",
                    "static_frame.core.util.DtypesSpecifier",
                    "Optional[Union[int, str]]",
                    "str"
                ],
                "exc_value": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "bool",
                    "static_frame.core.util.DtypesSpecifier",
                    "Optional[Union[int, str]]",
                    "str"
                ],
                "exc_traceback": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "bool",
                    "static_frame.core.util.DtypesSpecifier",
                    "Optional[Union[int, str]]",
                    "str"
                ],
                "report_file_path": [
                    "bool",
                    "str"
                ],
                "max_message_len": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "bool",
                    "static_frame.core.util.DtypesSpecifier",
                    "Optional[Union[int, str]]",
                    "str"
                ]
            }
        },
        "ExceptionsReporter.sort_exceptions.key": {
            "name": "key",
            "location": 73,
            "return": [
                "Callable",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "Union[int, float, str]"
                ]
            }
        }
    },
    "gordo-master/gordo/cli/workflow_generator.py": {
        "get_builder_exceptions_report_level": {
            "name": "get_builder_exceptions_report_level",
            "location": 39,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "validate_generate_context": {
            "name": "validate_generate_context",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "prepare_keda_prometheus_query": {
            "name": "prepare_keda_prometheus_query",
            "location": 132,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "prepare_resources_labels": {
            "name": "prepare_resources_labels",
            "location": 140,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "T",
                    "int",
                    "list"
                ]
            }
        },
        "workflow_cli": {
            "name": "workflow_cli",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "workflow_generator_cli": {
            "name": "workflow_generator_cli",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_ctx": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "JSONParam.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONParam.convert": {
            "name": "convert",
            "location": 68,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/cli/__init__.py": {},
    "gordo-master/gordo/machine/machine.py": {
        "Machine.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "model": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Sequence",
                    "str"
                ],
                "dataset": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "project_name": [
                    "str",
                    "Optional[str]"
                ],
                "evaluation": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "metadata": [
                    "Optional[str]",
                    "str"
                ],
                "runtime": [
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[List[Any]]",
                    "Callable",
                    "str",
                    "bool",
                    "Optional[Union[str, Any]]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "Machine.from_config": {
            "name": "from_config",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]"
                ],
                "config": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "project_name": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]"
                ],
                "config_globals": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Machine.normalize_sensor_tags": {
            "name": "normalize_sensor_tags",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tag_list": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Dict[str, int]",
                    "Tuple[int, str]"
                ]
            }
        },
        "Machine.__str__": {
            "name": "__str__",
            "location": 150,
            "return": [
                "str",
                "Dict[int, Dict]",
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Machine.__eq__": {
            "name": "__eq__",
            "location": 153,
            "return": [
                "int",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Machine.from_dict": {
            "name": "from_dict",
            "location": 157,
            "return": [
                "Dict[str, Any]",
                "str",
                "Sequence",
                "List[dict]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Tuple[int, int, str]",
                    "Set[str]",
                    "Tuple[int, int]",
                    "str"
                ],
                "d": [
                    "dict",
                    "Tuple[int, int, str]",
                    "Set[str]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "Machine.to_dict": {
            "name": "to_dict",
            "location": 164,
            "return": [
                "str",
                "dict",
                "Dict[int, Dict[int, Any]]",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Machine.report": {
            "name": "report",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MachineEncoder.default": {
            "name": "default",
            "location": 215,
            "return": [
                "numpy.ndarray",
                "str",
                "trezor.utils.Writer",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "datetime.timedelta",
                    "Dict[str, str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/validators.py": {
        "fix_runtime": {
            "name": "fix_runtime",
            "location": 157,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "runtime_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "fix_resource_limits": {
            "name": "fix_resource_limits",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resources": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "BaseDescriptor.__get__": {
            "name": "__get__",
            "location": 26,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "BaseDescriptor.__set_name__": {
            "name": "__set_name__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "Type['Signature']",
                    "str"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "BaseDescriptor.__set__": {
            "name": "__set__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ]
            }
        },
        "ValidDataset.__set__": {
            "name": "__set__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "float",
                    "datetime.date"
                ]
            }
        },
        "ValidDatasetKwargs._verify_resolution": {
            "name": "_verify_resolution",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resolution": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ValidDatasetKwargs.__set__": {
            "name": "__set__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict"
                ]
            }
        },
        "ValidModel.__set__": {
            "name": "__set__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "int",
                    "str"
                ],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "pandas.DataFrame",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "ValidMetadata.__set__": {
            "name": "__set__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "Hashable",
                    "str",
                    "Optional[Any]",
                    "Union[int, None]",
                    "float",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ValidDataProvider.__set__": {
            "name": "__set__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "float",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "datetime.date"
                ]
            }
        },
        "ValidMachineRuntime.__set__": {
            "name": "__set__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "Optional['Value']",
                    "T",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "ValidMachineRuntime._verify_reporters": {
            "name": "_verify_reporters",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "ValidDatetime.__set__": {
            "name": "__set__",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "value": [
                    "datetime.datetime",
                    "str",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "ValidTagList.__set__": {
            "name": "__set__",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "ValidUrlString.__set__": {
            "name": "__set__",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "dbadapters.base.relation.BaseRelation",
                    "bool"
                ]
            }
        },
        "ValidUrlString.valid_url_string": {
            "name": "valid_url_string",
            "location": 302,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/__init__.py": {},
    "gordo-master/gordo/machine/metadata/metadata.py": {},
    "gordo-master/gordo/machine/metadata/__init__.py": {},
    "gordo-master/gordo/machine/model/base.py": {
        "GordoBase.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoBase.get_params": {
            "name": "get_params",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "GordoBase.score": {
            "name": "score",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sample_weight": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "GordoBase.get_metadata": {
            "name": "get_metadata",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/gordo/machine/model/models.py": {
        "create_keras_timeseriesgenerator": {
            "name": "create_keras_timeseriesgenerator",
            "location": 717,
            "return": [
                "str",
                "Dict[str, int]",
                "Tuple[List[str], Optional[str]]",
                "float"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "int",
                    "list",
                    "core.models.PolicyData",
                    "List[int]",
                    "OrderedDict"
                ],
                "y": [
                    "Optional[numpy.ndarray]",
                    "numpy.array",
                    "dict",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "lookback_window": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "lookahead": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "list",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "KerasBaseEstimator.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "KerasBaseEstimator.parse_module_path": {
            "name": "parse_module_path",
            "location": 89,
            "return": [
                "Optional[str]",
                "str",
                "Callable[[numpy.ndarray], numpy.ndarray]"
            ],
            "arguments": {
                "module_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "KerasBaseEstimator.load_kind": {
            "name": "load_kind",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Hashable",
                    "Dict[str, object]"
                ]
            }
        },
        "KerasBaseEstimator.extract_supported_fit_args": {
            "name": "extract_supported_fit_args",
            "location": 123,
            "return": [
                "zerver.models.Realm",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "KerasBaseEstimator.from_definition": {
            "name": "from_definition",
            "location": 142,
            "return": [
                "SendCh[trio.abc.Stream]",
                "str",
                "baseplate.lib.metrics.Batch"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "definition": [
                    "dict",
                    "List[str]",
                    "list",
                    "bool",
                    "mtg_ssm.scryfall.models.ScryCard",
                    "asyncpg_migrate.model.Migrations"
                ]
            }
        },
        "KerasBaseEstimator.into_definition": {
            "name": "into_definition",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasBaseEstimator.sk_params": {
            "name": "sk_params",
            "location": 172,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasBaseEstimator.__getstate__": {
            "name": "__getstate__",
            "location": 183,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "ajapaik.ajapaik.models.Album",
                "int",
                "allennlp.common.util.JsonDict",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasBaseEstimator.__setstate__": {
            "name": "__setstate__",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str, Any]",
                    "rflx.model.Message",
                    "bytes"
                ]
            }
        },
        "KerasBaseEstimator.get_n_features_out": {
            "name": "get_n_features_out",
            "location": 211,
            "return": [
                "str",
                "int",
                "list",
                "Callable"
            ],
            "arguments": {
                "y": [
                    "int",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "str",
                    "Iterator",
                    "Callable"
                ]
            }
        },
        "KerasBaseEstimator.get_n_features": {
            "name": "get_n_features",
            "location": 225,
            "return": [
                "bool",
                "float",
                "int",
                "model.BoundingBox",
                "set",
                "str"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "pandas.DataFrame",
                    "Union[int, str]",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        },
        "KerasBaseEstimator.fit": {
            "name": "fit",
            "location": 241,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "Optional[\"GraphLogger\"]",
                    "float",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "y": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "int"
                ]
            }
        },
        "KerasBaseEstimator.predict": {
            "name": "predict",
            "location": 289,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "KerasBaseEstimator.get_params": {
            "name": "get_params",
            "location": 307,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasBaseEstimator.__call__": {
            "name": "__call__",
            "location": 327,
            "return": [
                "str",
                "bool",
                "models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasBaseEstimator.get_metadata": {
            "name": "get_metadata",
            "location": 342,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasAutoEncoder.score": {
            "name": "score",
            "location": 369,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "Callable"
                ],
                "y": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray",
                    "int"
                ],
                "sample_weight": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "KerasRawModelRegressor.load_kind": {
            "name": "load_kind",
            "location": 438,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "bool",
                    "str",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "KerasRawModelRegressor.__repr__": {
            "name": "__repr__",
            "location": 441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasRawModelRegressor.__call__": {
            "name": "__call__",
            "location": 444,
            "return": [
                "Optional[str]",
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasLSTMBaseEstimator.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "bool",
                    "Union[Callable, str]",
                    "numpy.array"
                ],
                "lookback_window": [
                    "bool",
                    "str",
                    "List[Tuple[int, int]]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "KerasLSTMBaseEstimator.lookahead": {
            "name": "lookahead",
            "location": 529,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasLSTMBaseEstimator.get_metadata": {
            "name": "get_metadata",
            "location": 533,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasLSTMBaseEstimator._validate_and_fix_size_of_X": {
            "name": "_validate_and_fix_size_of_X",
            "location": 546,
            "return": [
                "Union[int, float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "magic.models.Card",
                    "bytes",
                    "Type[object]"
                ]
            }
        },
        "KerasLSTMBaseEstimator.fit": {
            "name": "fit",
            "location": 559,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "list",
                    "List[float]",
                    "pandas.DataFrame"
                ],
                "y": [
                    "numpy.ndarray",
                    "T",
                    "Optional[Tuple]",
                    "pandas.DataFrame",
                    "Optional[str]"
                ]
            }
        },
        "KerasLSTMBaseEstimator.predict": {
            "name": "predict",
            "location": 622,
            "return": [
                "numpy.ndarray",
                "str",
                "src.autoks.callbacks.CallbackList",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "list",
                    "List[float]",
                    "pandas.DataFrame"
                ]
            }
        },
        "KerasLSTMBaseEstimator.score": {
            "name": "score",
            "location": 669,
            "return": [
                "numpy.ndarray",
                "str",
                "Dict[str, Any]",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "Union[numpy.ndarray, List[numpy.ndarray]]",
                    "Iterable[Iterable[float]]",
                    "numpy.ndarray"
                ],
                "y": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "sample_weight": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "KerasLSTMForecast.lookahead": {
            "name": "lookahead",
            "location": 707,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasLSTMAutoEncoder.lookahead": {
            "name": "lookahead",
            "location": 713,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/gordo/machine/model/register.py": {
        "register_model_builder.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "int"
                ]
            }
        },
        "register_model_builder.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "build_fn": [
                    "dict"
                ]
            }
        },
        "register_model_builder._register": {
            "name": "_register",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, bytes]",
                    "tuple",
                    "str",
                    "List[str]"
                ],
                "type": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "build_fn": [
                    "str"
                ]
            }
        },
        "register_model_builder._validate_func": {
            "name": "_validate_func",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "dict",
                    "str",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/utils.py": {
        "metric_wrapper": {
            "name": "metric_wrapper",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "metric": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "scaler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_base_dataframe": {
            "name": "make_base_dataframe",
            "location": 49,
            "return": [
                "str",
                "Callable",
                "List[Dict[str, Any]]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "int"
                ],
                "model_input": [
                    "str",
                    "bool",
                    "int"
                ],
                "model_output": [
                    "int",
                    "bool",
                    "BinaryIO",
                    "Optional[bytes]",
                    "tuple",
                    "bytes"
                ],
                "target_tag_list": [
                    "str",
                    "int"
                ],
                "index": [
                    "bool",
                    "List[int]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[int, str]",
                    "str",
                    "Optional[List[str]]",
                    "List[Dict]"
                ],
                "frequency": [
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "metric_wrapper._wrapper": {
            "name": "_wrapper",
            "location": 36,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "y_true": [
                    "Iterable[Any]",
                    "Callable[..., str]",
                    "Sequence[str]",
                    "dict"
                ],
                "y_pred": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Callable[[str], None]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/__init__.py": {},
    "gordo-master/gordo/machine/model/anomaly/base.py": {
        "AnomalyDetectorBase.anomaly": {
            "name": "anomaly",
            "location": 13,
            "return": [
                "typing.Union[pandas.DataFrame, xarray.Dataset]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "frequency": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/anomaly/diff.py": {
        "DiffBasedAnomalyDetector.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_estimator": [
                    "str",
                    "Pattern",
                    "bool",
                    "Sequence[str]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "scaler": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "require_thresholds": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "shuffle": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "window": [
                    "str",
                    "Optional[List[str]]",
                    "dict",
                    "Optional[str]",
                    "bytes"
                ],
                "smoothing_method": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "DiffBasedAnomalyDetector.__getattr__": {
            "name": "__getattr__",
            "location": 78,
            "return": [
                "int",
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "raiden.utils.Any",
                    "List[T]",
                    "Iterable[T]",
                    "Union[int, slice]",
                    "bool",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "DiffBasedAnomalyDetector.get_metadata": {
            "name": "get_metadata",
            "location": 88,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffBasedAnomalyDetector.score": {
            "name": "score",
            "location": 148,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.array",
                    "pandas.DataFrame",
                    "str"
                ],
                "y": [
                    "numpy.array",
                    "pandas.DataFrame",
                    "str"
                ],
                "sample_weight": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "DiffBasedAnomalyDetector.get_params": {
            "name": "get_params",
            "location": 156,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "DiffBasedAnomalyDetector.fit": {
            "name": "fit",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "DiffBasedAnomalyDetector.cross_validate": {
            "name": "cross_validate",
            "location": 184,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffBasedAnomalyDetector._scaled_mse_per_timestep": {
            "name": "_scaled_mse_per_timestep",
            "location": 281,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "model": [
                    "zerver.models.UserProfile",
                    "zerver.models.UserGroup",
                    "app.model.User"
                ],
                "y_true": [
                    "models.Station",
                    "raiden.utils.FeeAmount"
                ],
                "y_pred": [
                    "int",
                    "str",
                    "models.Trip"
                ]
            }
        },
        "DiffBasedAnomalyDetector._absolute_error": {
            "name": "_absolute_error",
            "location": 308,
            "return": [
                "Optional[numpy.ndarray]",
                "Tuple[bytes, int]",
                "IO[bytes]",
                "Optional[float]",
                "Dict[str, pandas.DataFrame]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "y_true": [
                    "numpy.ndarray",
                    "Sequence",
                    "Dict[str, Any]",
                    "dict",
                    "Type",
                    "str"
                ],
                "y_pred": [
                    "numpy.ndarray",
                    "Sequence",
                    "Dict[str, Any]",
                    "dict",
                    "Type",
                    "str"
                ]
            }
        },
        "DiffBasedAnomalyDetector._smoothing": {
            "name": "_smoothing",
            "location": 314,
            "return": [
                "list",
                "Optional[numpy.dtype]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "DiffBasedAnomalyDetector.anomaly": {
            "name": "anomaly",
            "location": 322,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "gluonts.model.common.Tensor",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "pandas.DataFrame"
                ],
                "frequency": [
                    "gluonts.model.common.Tensor",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "pandas.DataFrame"
                ]
            }
        },
        "DiffBasedKFCVAnomalyDetector.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_estimator": [
                    "str",
                    "Pattern",
                    "bool",
                    "Sequence[str]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "scaler": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "require_thresholds": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "shuffle": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "window": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "smoothing_method": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "threshold_percentile": [
                    "bool",
                    "pandas.DataFrame",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "DiffBasedKFCVAnomalyDetector.get_params": {
            "name": "get_params",
            "location": 534,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "DiffBasedKFCVAnomalyDetector.get_metadata": {
            "name": "get_metadata",
            "location": 552,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffBasedKFCVAnomalyDetector.cross_validate": {
            "name": "cross_validate",
            "location": 581,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffBasedKFCVAnomalyDetector._calculate_feature_thresholds": {
            "name": "_calculate_feature_thresholds",
            "location": 644,
            "return": [
                "str",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "y_true": [
                    "str",
                    "bytes",
                    "int"
                ],
                "y_pred": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "DiffBasedKFCVAnomalyDetector._calculate_threshold": {
            "name": "_calculate_threshold",
            "location": 650,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "validation_metric": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/anomaly/__init__.py": {},
    "gordo-master/gordo/machine/model/factories/feedforward_autoencoder.py": {
        "feedforward_model": {
            "name": "feedforward_model",
            "location": 16,
            "return": [
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "n_features": [
                    "bool",
                    "int"
                ],
                "n_features_out": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[list]",
                    "List[int]",
                    "cirq.google.optimizers.two_qubit_gates.gate_compilation.GateTabulation"
                ],
                "encoding_dim": [
                    "bool",
                    "int"
                ],
                "encoding_func": [
                    "bool",
                    "int"
                ],
                "decoding_dim": [
                    "float",
                    "str",
                    "utils.reporting.DefaultStat",
                    "bytes",
                    "cmk.utils.type_defs.ServiceCheckResult",
                    "zerver.models.Realm",
                    "Type"
                ],
                "decoding_func": [
                    "float",
                    "str",
                    "utils.reporting.DefaultStat",
                    "bytes",
                    "cmk.utils.type_defs.ServiceCheckResult",
                    "zerver.models.Realm",
                    "Type"
                ],
                "out_func": [
                    "float",
                    "Tuple[int]",
                    "int"
                ],
                "optimizer": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "optimizer_kwargs": [
                    "bool",
                    "int"
                ],
                "compile_kwargs": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "feedforward_symmetric": {
            "name": "feedforward_symmetric",
            "location": 108,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n_features": [
                    "str",
                    "int",
                    "bool"
                ],
                "n_features_out": [
                    "str",
                    "int",
                    "bool"
                ],
                "dims": [
                    "int",
                    "bool",
                    "dict",
                    "str"
                ],
                "funcs": [
                    "str",
                    "int",
                    "bool"
                ],
                "optimizer": [
                    "str",
                    "int",
                    "bool"
                ],
                "optimizer_kwargs": [
                    "str",
                    "int",
                    "bool"
                ],
                "compile_kwargs": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "feedforward_hourglass": {
            "name": "feedforward_hourglass",
            "location": 166,
            "return": [
                "int",
                "str",
                "Tuple[int]",
                "float"
            ],
            "arguments": {
                "n_features": [
                    "float",
                    "str"
                ],
                "n_features_out": [
                    "Union[int, float]",
                    "gluonts.model.common.Tensor",
                    "int",
                    "float"
                ],
                "encoding_layers": [
                    "Optional[float]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "compression_factor": [
                    "Optional[float]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "func": [
                    "Union[int, float]",
                    "gluonts.model.common.Tensor",
                    "int",
                    "float"
                ],
                "optimizer": [
                    "Union[int, float]",
                    "gluonts.model.common.Tensor",
                    "int",
                    "float"
                ],
                "optimizer_kwargs": [
                    "Union[int, float]",
                    "gluonts.model.common.Tensor",
                    "int",
                    "float"
                ],
                "compile_kwargs": [
                    "Union[int, float]",
                    "gluonts.model.common.Tensor",
                    "int",
                    "float"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/factories/lstm_autoencoder.py": {
        "lstm_model": {
            "name": "lstm_model",
            "location": 17,
            "return": [
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "n_features": [
                    "float",
                    "int",
                    "Callable[[tensorflow.Tensor], tensorflow.Tensor]",
                    "bool"
                ],
                "n_features_out": [
                    "int",
                    "List[str]",
                    "Tuple[int, int]",
                    "bool",
                    "Callable",
                    "Optional[List[int]]"
                ],
                "lookback_window": [
                    "bool",
                    "int"
                ],
                "encoding_dim": [
                    "bool",
                    "int",
                    "float",
                    "bytes"
                ],
                "encoding_func": [
                    "bool",
                    "int",
                    "float",
                    "bytes"
                ],
                "decoding_dim": [
                    "int",
                    "float",
                    "bool",
                    "list"
                ],
                "decoding_func": [
                    "bool",
                    "str",
                    "zerver.models.Realm"
                ],
                "out_func": [
                    "Tuple[int]",
                    "float",
                    "str"
                ],
                "optimizer": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ],
                "optimizer_kwargs": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "compile_kwargs": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "lstm_symmetric": {
            "name": "lstm_symmetric",
            "location": 108,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n_features": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "n_features_out": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "lookback_window": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "dims": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "funcs": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "out_func": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "optimizer": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "optimizer_kwargs": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "compile_kwargs": [
                    "bool",
                    "int",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ]
            }
        },
        "lstm_hourglass": {
            "name": "lstm_hourglass",
            "location": 180,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "n_features": [
                    "str",
                    "int",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "n_features_out": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ],
                "lookback_window": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ],
                "encoding_layers": [
                    "str",
                    "int",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "compression_factor": [
                    "str",
                    "int",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "func": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ],
                "out_func": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ],
                "optimizer": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ],
                "optimizer_kwargs": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ],
                "compile_kwargs": [
                    "int",
                    "list",
                    "qcodes.utils.validators.Ints",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/factories/utils.py": {
        "hourglass_calc_dims": {
            "name": "hourglass_calc_dims",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "compression_factor": [
                    "int",
                    "Tuple[float, float]",
                    "list"
                ],
                "encoding_layers": [
                    "int",
                    "bool",
                    "Collection[\"Issue\"]"
                ],
                "n_features": [
                    "int",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "check_dim_func_len": {
            "name": "check_dim_func_len",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "List[str]"
                ],
                "dim": [
                    "Tuple[str]",
                    "Tuple[int]",
                    "str",
                    "Callable[[None], bool]",
                    "Dict[str, Any]",
                    "int"
                ],
                "func": [
                    "Tuple[str]",
                    "Tuple[int]",
                    "str",
                    "Callable[[None], bool]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/factories/__init__.py": {},
    "gordo-master/gordo/machine/model/transformers/imputer.py": {
        "InfImputer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inf_fill_value": [
                    "str",
                    "float",
                    "bool"
                ],
                "neg_inf_fill_value": [
                    "float",
                    "bool",
                    "Optional[list]",
                    "bytes"
                ],
                "strategy": [
                    "bool",
                    "Tuple[int, int, int]",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "Exception"
                ],
                "delta": [
                    "bool",
                    "Tuple[int, int, int]",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "Exception"
                ]
            }
        },
        "InfImputer.get_params": {
            "name": "get_params",
            "location": 49,
            "return": [
                "int",
                "bool",
                "Union[int, Tuple[int, ...]]",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "InfImputer.fit": {
            "name": "fit",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "float",
                    "numpy.ndarray",
                    "int",
                    "dict",
                    "Tuple[str]",
                    "bool"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "InfImputer.transform": {
            "name": "transform",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "list",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "List[float]"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "InfImputer._fill_extremes": {
            "name": "_fill_extremes",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "float",
                    "numpy.array"
                ]
            }
        },
        "InfImputer._fill_minmax": {
            "name": "_fill_minmax",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/transformers/__init__.py": {},
    "gordo-master/gordo/machine/model/transformer_funcs/general.py": {
        "multiply_by": {
            "name": "multiply_by",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "X": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "factor": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "gordo-master/gordo/machine/model/transformer_funcs/__init__.py": {},
    "gordo-master/gordo/reporters/base.py": {
        "BaseReporter.report": {
            "name": "report",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseReporter.get_params": {
            "name": "get_params",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "BaseReporter.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [
                "List[object]",
                "Tuple[int, Dict[str, Any]]",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReporter.from_dict": {
            "name": "from_dict",
            "location": 29,
            "return": [
                "SendCh[trio.abc.Stream]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "list",
                    "bool"
                ],
                "config": [
                    "Dict[str, Any]",
                    "float"
                ]
            }
        }
    },
    "gordo-master/gordo/reporters/exceptions.py": {},
    "gordo-master/gordo/reporters/mlflow.py": {
        "_validate_dict": {
            "name": "_validate_dict",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "d": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "required_keys": [
                    "List[str]",
                    "str",
                    "bytes",
                    "dict",
                    "boto3.resources.base.ServiceResource"
                ]
            }
        },
        "get_mlflow_client": {
            "name": "get_mlflow_client",
            "location": 54,
            "return": [
                "float"
            ],
            "arguments": {
                "workspace_kwargs": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "service_principal_kwargs": [
                    "dict",
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_run_id": {
            "name": "get_run_id",
            "location": 121,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "experiment_name": [
                    "str"
                ],
                "model_key": [
                    "str"
                ]
            }
        },
        "_datetime_to_ms_since_epoch": {
            "name": "_datetime_to_ms_since_epoch",
            "location": 153,
            "return": [
                "float",
                "raiden.utils.TokenAmount",
                "int",
                "bool",
                "raiden.utils.Locksroot",
                "raiden.utils.Nonce"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "epoch_now": {
            "name": "epoch_now",
            "location": 178,
            "return": [
                "int",
                "str",
                "float",
                "Union[str, int]"
            ],
            "arguments": {}
        },
        "get_machine_log_items": {
            "name": "get_machine_log_items",
            "location": 190,
            "return": [
                "str",
                "float",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "machine": [
                    "str",
                    "core_lib.core.models.Event",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "batch_log_items": {
            "name": "batch_log_items",
            "location": 280,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "cmk.utils.type_defs.EventRule",
                "bool"
            ],
            "arguments": {
                "metrics": [
                    "int",
                    "Sequence[T]",
                    "Sequence[Mapping[str, Any]]",
                    "List[int]"
                ],
                "params": [
                    "int",
                    "Sequence[T]",
                    "Sequence[Mapping[str, Any]]",
                    "List[int]"
                ],
                "n_max_metrics": [
                    "int",
                    "Sequence[T]",
                    "Sequence[Mapping[str, Any]]",
                    "List[int]"
                ],
                "n_max_params": [
                    "int",
                    "Sequence[T]",
                    "Sequence[Mapping[str, Any]]",
                    "List[int]"
                ]
            }
        },
        "get_kwargs_from_secret": {
            "name": "get_kwargs_from_secret",
            "location": 342,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.utils.type_defs.CheckVariables",
                "str",
                "List[src.core.offer.Offer]",
                "denite.util.UserContext",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "keys": [
                    "List[str]",
                    "str",
                    "Container[str]",
                    "int",
                    "bool",
                    "Set[Tuple[str, str]]"
                ]
            }
        },
        "get_workspace_kwargs": {
            "name": "get_workspace_kwargs",
            "location": 375,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Dict[str, Dict[str, str]]",
                "int"
            ],
            "arguments": {}
        },
        "get_spauth_kwargs": {
            "name": "get_spauth_kwargs",
            "location": 393,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "raiden.utils.Dict"
            ],
            "arguments": {}
        },
        "mlflow_context": {
            "name": "mlflow_context",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ],
                "model_key": [
                    "str",
                    "Dict[str, str]",
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ],
                "workspace_kwargs": [
                    "dict",
                    "str"
                ],
                "service_principal_kwargs": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "log_machine": {
            "name": "log_machine",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "mlflow_client": [
                    "str",
                    "mlflow.tracking.MlflowClient"
                ],
                "run_id": [
                    "str",
                    "mlflow.tracking.MlflowClient"
                ],
                "machine": [
                    "gordo.machine.Machine",
                    "dict",
                    "bool",
                    "list"
                ]
            }
        },
        "batch_log_items._calc_n_batches": {
            "name": "_calc_n_batches",
            "location": 315,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ],
                "n_max": [
                    "int",
                    "float"
                ]
            }
        },
        "MlFlowReporter.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MlFlowReporter.report": {
            "name": "report",
            "location": 497,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "List[int]",
                    "cmk.utils.type_defs.ServiceName",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/reporters/postgres.py": {
        "PostgresReporter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "user": [
                    "str",
                    "int"
                ],
                "password": [
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "List[List[int]]",
                    "cmk.utils.type_defs.ServiceName",
                    "Dict[Any, float]"
                ],
                "database": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PostgresReporter.report": {
            "name": "report",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "dict",
                    "Exception",
                    "Dict[str, str]"
                ]
            }
        },
        "Machine.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "str",
                "pywirelessmbus.utils.WMbusMessage"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/gordo/reporters/__init__.py": {},
    "gordo-master/gordo/serializer/from_definition.py": {
        "from_definition": {
            "name": "from_definition",
            "location": 18,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "int",
                "dict",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "pipe_definition": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_build_branch": {
            "name": "_build_branch",
            "location": 65,
            "return": [
                "str",
                "int",
                "Optional[Iterable[int]]"
            ],
            "arguments": {
                "definition": [
                    "bool",
                    "Optional['Region']"
                ],
                "constructor_class": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "_build_scikit_branch": {
            "name": "_build_scikit_branch",
            "location": 78,
            "return": [
                "str",
                "int",
                "Optional[Iterable[int]]"
            ],
            "arguments": {
                "definition": [
                    "bool"
                ],
                "constructor_class": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "_build_step": {
            "name": "_build_step",
            "location": 90,
            "return": [
                "Union[server.models.Bike, int]",
                "Type"
            ],
            "arguments": {
                "step": [
                    "int",
                    "Dict[str, Any]",
                    "BaseException",
                    "str",
                    "dict",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "_build_callbacks": {
            "name": "_build_callbacks",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "definitions": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "_load_param_classes": {
            "name": "_load_param_classes",
            "location": 227,
            "return": [
                "int",
                "bool",
                "Callable[..., T]",
                "str"
            ],
            "arguments": {
                "params": [
                    "Optional[Any]",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "load_params_from_definition": {
            "name": "load_params_from_definition",
            "location": 312,
            "return": [
                "str",
                "salon.models.ServiceTemplateSet",
                "Callable"
            ],
            "arguments": {
                "definition": [
                    "str",
                    "Dict[str, Any]",
                    "asgard.models.spec.container.ContainerVolumeSpec",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "gordo-master/gordo/serializer/into_definition.py": {
        "into_definition": {
            "name": "into_definition",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pipeline": [
                    "int",
                    "float",
                    "Hashable"
                ],
                "prune_default_params": [
                    "int",
                    "float",
                    "Hashable"
                ]
            }
        },
        "_decompose_node": {
            "name": "_decompose_node",
            "location": 62,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "step": [],
                "prune_default_params": [
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "_prune_default_parameters": {
            "name": "_prune_default_parameters",
            "location": 99,
            "return": [
                "dict",
                "Set[str]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "current_params": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "load_definition_from_params": {
            "name": "load_definition_from_params",
            "location": 129,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, float]",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "gordo-master/gordo/serializer/serializer.py": {
        "dumps": {
            "name": "dumps",
            "location": 22,
            "return": [
                "str",
                "float",
                "bytearray"
            ],
            "arguments": {
                "model": [
                    "dict",
                    "str",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 52,
            "return": [
                "bool",
                "Dict[int, str]",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "bytes_object": [
                    "bytes",
                    "str"
                ]
            }
        },
        "metadata_path": {
            "name": "metadata_path",
            "location": 69,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "source_dir": [
                    "str"
                ]
            }
        },
        "_json_file_path": {
            "name": "_json_file_path",
            "location": 79,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, str]",
                "str",
                "Dict[str, tuple]"
            ],
            "arguments": {
                "source_dir": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "_load_json_file": {
            "name": "_load_json_file",
            "location": 89,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "Callable",
                "Mapping"
            ],
            "arguments": {
                "source_dir": [
                    "str",
                    "List[str]"
                ],
                "file_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "load_metadata": {
            "name": "load_metadata",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "source_dir": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool"
                ]
            }
        },
        "load_info": {
            "name": "load_info",
            "location": 122,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "source_dir": [
                    "str",
                    "Union[os.PathLike, str]",
                    "bool"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 127,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "source_dir": [
                    "Union[os.PathLike, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "dest_dir": [
                    "str"
                ],
                "metadata": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "info": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[IO[bytes]]",
                    "dict",
                    "Optional[Type[Exception]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "gordo-master/gordo/serializer/__init__.py": {},
    "gordo-master/gordo/server/model_io.py": {
        "get_model_output": {
            "name": "get_model_output",
            "location": 16,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "model": [
                    "sklearn.pipeline.Pipeline",
                    "numpy.ndarray",
                    "List[dict]",
                    "int"
                ],
                "X": [
                    "sklearn.pipeline.Pipeline",
                    "numpy.ndarray",
                    "List[dict]",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/server/rest_api.py": {
        "Api.specs_url": {
            "name": "specs_url",
            "location": 13,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/gordo/server/server.py": {
        "enable_prometheus": {
            "name": "enable_prometheus",
            "location": 32,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "adapt_proxy_deployment": {
            "name": "adapt_proxy_deployment",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wsgi_app": [
                    "Callable",
                    "Optional[\"Game\"]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "create_prometheus_metrics": {
            "name": "create_prometheus_metrics",
            "location": 122,
            "return": [
                "str",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "project": [
                    "Optional[str]",
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ],
                "registry": [
                    "str",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "build_app": {
            "name": "build_app",
            "location": 139,
            "return": [
                "flask.Flask",
                "\"App\""
            ],
            "arguments": {
                "config": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "prometheus_registry": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "run_server": {
            "name": "run_server",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "port": [
                    "str",
                    "bool",
                    "int"
                ],
                "workers": [
                    "str",
                    "bool",
                    "int"
                ],
                "log_level": [
                    "str",
                    "bool",
                    "int"
                ],
                "config_module": [
                    "Optional[str]",
                    "Sequence",
                    "str",
                    "Optional[List[str]]",
                    "Callable[[], str]"
                ],
                "worker_connections": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "threads": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "worker_class": [
                    "str",
                    "bool",
                    "int"
                ],
                "server_app": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "adapt_proxy_deployment.wrapper": {
            "name": "wrapper",
            "location": 91,
            "return": [
                "qutebrowser.utils.usertypes.Backend",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "environ": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "start_response": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "build_app._start_timer": {
            "name": "_start_timer",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "build_app._set_revision_and_collection_dir": {
            "name": "_set_revision_and_collection_dir",
            "location": 170,
            "return": [
                "bool",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "dict",
                "cmk.utils.type_defs.HostName",
                "Dict[str, Dict[str, str]]",
                "int"
            ],
            "arguments": {}
        },
        "build_app._revision_used": {
            "name": "_revision_used",
            "location": 194,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "flask.Response"
                ]
            }
        },
        "build_app._log_time_taken": {
            "name": "_log_time_taken",
            "location": 204,
            "return": [
                "dict",
                "Optional[str]",
                "int",
                "List[str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "response": [
                    "Mapping[str, object]",
                    "flask.Response",
                    "str",
                    "MutableMapping"
                ]
            }
        },
        "build_app.base_healthcheck": {
            "name": "base_healthcheck",
            "location": 211,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "build_app.server_version": {
            "name": "server_version",
            "location": 215,
            "return": [
                "str",
                "Optional[str]",
                "Callable",
                "bool",
                "dict"
            ],
            "arguments": {}
        }
    },
    "gordo-master/gordo/server/utils.py": {
        "validate_revision": {
            "name": "validate_revision",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "revision": [
                    "str",
                    "List[str]",
                    "list",
                    "set"
                ]
            }
        },
        "dataframe_into_parquet_bytes": {
            "name": "dataframe_into_parquet_bytes",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "df": [
                    "str",
                    "bool",
                    "tuple",
                    "Tuple[str, str, str]",
                    "int"
                ],
                "compression": [
                    "int",
                    "T",
                    "str",
                    "bool"
                ]
            }
        },
        "dataframe_from_parquet_bytes": {
            "name": "dataframe_from_parquet_bytes",
            "location": 69,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "buf": [
                    "bytes",
                    "str",
                    "int",
                    "IO"
                ]
            }
        },
        "dataframe_to_dict": {
            "name": "dataframe_to_dict",
            "location": 87,
            "return": [
                "\"Flow\"",
                "str",
                "bytes",
                "os.stat_result"
            ],
            "arguments": {
                "df": [
                    "dict",
                    "Dict[int, Dict[int, Any]]",
                    "cmk.base.check_utils.TPersistedSections",
                    "Mapping[str, Any]",
                    "Dict[str, float]",
                    "Dict[str, int]"
                ]
            }
        },
        "dataframe_from_dict": {
            "name": "dataframe_from_dict",
            "location": 145,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "List[int]",
                    "Union[None, int, str]",
                    "Callable[[Any], str]"
                ]
            }
        },
        "parse_iso_datetime": {
            "name": "parse_iso_datetime",
            "location": 199,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "Union[datetime.datetime, str]",
                "Union[str, int]"
            ],
            "arguments": {
                "datetime_str": [
                    "str",
                    "AnyStr",
                    "Optional[str]"
                ]
            }
        },
        "_verify_dataframe": {
            "name": "_verify_dataframe",
            "location": 209,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, dict]",
                "Dict[str, Any]",
                "pd.DataFrame",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Optional[datetime.datetime]"
                ],
                "expected_columns": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "List['Photo']"
                ]
            }
        },
        "extract_X_y": {
            "name": "extract_X_y",
            "location": 258,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "method": [
                    "bytes",
                    "bool",
                    "Callable"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 333,
            "return": [
                "base.Model"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "check_metadata_file": {
            "name": "check_metadata_file",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "load_metadata": {
            "name": "load_metadata",
            "location": 365,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "_load_compressed_metadata": {
            "name": "_load_compressed_metadata",
            "location": 389,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "delete_revision": {
            "name": "delete_revision",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "validate_gordo_name": {
            "name": "validate_gordo_name",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_name": [
                    "str",
                    "int"
                ]
            }
        },
        "load_info": {
            "name": "load_info",
            "location": 434,
            "return": [
                "dict"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "metadata_required": {
            "name": "metadata_required",
            "location": 439,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "model_required": {
            "name": "model_required",
            "location": 464,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "bool",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "find_path_in_dict": {
            "name": "find_path_in_dict",
            "location": 488,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "List[List[str]]",
                    "int",
                    "str",
                    "Mapping"
                ]
            }
        },
        "extract_X_y.wrapper_method": {
            "name": "wrapper_method",
            "location": 281,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str",
                "pd.DataFrame",
                "bytes"
            ],
            "arguments": {
                "self": [
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "int"
                ]
            }
        },
        "metadata_required.wrapper": {
            "name": "wrapper",
            "location": 446,
            "return": [],
            "arguments": {}
        },
        "model_required.wrapper": {
            "name": "wrapper",
            "location": 472,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "gordo-master/gordo/server/__init__.py": {},
    "gordo-master/gordo/server/prometheus/gunicorn_config.py": {
        "child_exit": {
            "name": "child_exit",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "worker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/server/prometheus/metrics.py": {
        "create_registry": {
            "name": "create_registry",
            "location": 12,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "to_status_code": {
            "name": "to_status_code",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "response_status": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "url_rule_to_str": {
            "name": "url_rule_to_str",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "url_rule": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "current_time": {
            "name": "current_time",
            "location": 29,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "GordoServerPrometheusMetrics.main_label_values": {
            "name": "main_label_values",
            "location": 52,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "req": [
                    "flask.Request",
                    "flask.Response",
                    "int",
                    "bool"
                ],
                "resp": [
                    "flask.Request",
                    "flask.Response",
                    "int",
                    "bool"
                ]
            }
        },
        "GordoServerPrometheusMetrics.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args_labels": [
                    "List[str]",
                    "bool"
                ],
                "info": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "ignore_paths": [
                    "Optional[Iterable[str]]",
                    "Optional[str]",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[Union[Any, Any]]",
                    "Sequence[str]",
                    "bool",
                    "Optional[int]"
                ],
                "registry": [
                    "Optional[str]",
                    "str",
                    "Optional[MutableMapping[str, Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "GordoServerPrometheusMetrics.init_labels": {
            "name": "init_labels",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoServerPrometheusMetrics.request_label_values": {
            "name": "request_label_values",
            "location": 115,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Any]"
                ],
                "resp": [
                    "flask.Response",
                    "Dict[str, List[Any]]",
                    "int"
                ]
            }
        },
        "GordoServerPrometheusMetrics.prepare_app": {
            "name": "prepare_app",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "bool",
                    "flask.app.Flask"
                ]
            }
        },
        "GordoServerPrometheusMetrics.prepare_app._start_prometheus": {
            "name": "_start_prometheus",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "GordoServerPrometheusMetrics.prepare_app._end_prometheus": {
            "name": "_end_prometheus",
            "location": 131,
            "return": [
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "aiohttp.web.Response",
                    "django.http.HttpRequest",
                    "bytes"
                ]
            }
        }
    },
    "gordo-master/gordo/server/prometheus/server.py": {
        "build_app": {
            "name": "build_app",
            "location": 7,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        },
        "build_app.health_check": {
            "name": "health_check",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "gordo-master/gordo/server/prometheus/__init__.py": {},
    "gordo-master/gordo/server/views/anomaly.py": {
        "AnomalyView.post": {
            "name": "post",
            "location": 105,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Optional[\"permissions_doc\"]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnomalyView._create_anomaly_response": {
            "name": "_create_anomaly_response",
            "location": 109,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "start_time": [
                    "float",
                    "int",
                    "Tuple[str, str]",
                    "Optional[Callable]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "gordo-master/gordo/server/views/base.py": {
        "BaseModelView.frequency": {
            "name": "frequency",
            "location": 70,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelView.load_build_dataset_metadata": {
            "name": "load_build_dataset_metadata",
            "location": 77,
            "return": [
                "str",
                "Dict[str, Any]",
                "bob_emploi.frontend.server.scoring.ScoringProject",
                "dict",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "BaseModelView.get_normalize_additional_fields": {
            "name": "get_normalize_additional_fields",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dataset": [
                    "dict",
                    "Mapping",
                    "Mapping[str, Any]",
                    "List[dict]",
                    "Type[T]",
                    "bytes"
                ]
            }
        },
        "BaseModelView.tags": {
            "name": "tags",
            "location": 97,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelView.target_tags": {
            "name": "target_tags",
            "location": 114,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelView.post": {
            "name": "post",
            "location": 142,
            "return": [
                "List[Dict[str, Any]]",
                "dict",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteModelRevisionView.delete": {
            "name": "delete",
            "location": 230,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "gordo_name": [
                    "str",
                    "Optional[str]"
                ],
                "revision": [
                    "str"
                ]
            }
        },
        "MetaDataView.get": {
            "name": "get",
            "location": 253,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadModel.get": {
            "name": "get",
            "location": 282,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelListView.get": {
            "name": "get",
            "location": 302,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "gordo_project": [
                    "str",
                    "bob_emploi.frontend.server.scoring.ScoringProject",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ]
            }
        },
        "RevisionListView.get": {
            "name": "get",
            "location": 317,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "gordo_project": [
                    "str",
                    "bob_emploi.frontend.server.scoring.ScoringProject",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ]
            }
        },
        "ExpectedModels.get": {
            "name": "get",
            "location": 332,
            "return": [
                "List[Dict[str, Any]]",
                "Mapping[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "gordo_project": [
                    "str",
                    "bob_emploi.frontend.server.scoring.ScoringProject",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ]
            }
        }
    },
    "gordo-master/gordo/server/views/__init__.py": {},
    "gordo-master/gordo/util/disk_registry.py": {
        "write_key": {
            "name": "write_key",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "registry_dir": [
                    "str",
                    "cerulean.Path",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "key": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "os.PathLike"
                ],
                "val": [
                    "str",
                    "int",
                    "IO[bytes]"
                ]
            }
        },
        "get_value": {
            "name": "get_value",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Awaitable"
            ],
            "arguments": {
                "registry_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "Optional[Union[str, pathlib.Path]]",
                    "Union[str, List[str]]",
                    "Optional[TextIO]"
                ],
                "key": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "delete_value": {
            "name": "delete_value",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "registry_dir": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "key": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/gordo/util/text.py": {
        "replace_all_non_ascii_chars": {
            "name": "replace_all_non_ascii_chars",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "replace_with": [
                    "str"
                ]
            }
        }
    },
    "gordo-master/gordo/util/utils.py": {
        "capture_args": {
            "name": "capture_args",
            "location": 6,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Type[T]",
                    "Callable",
                    "Dict[str, str]",
                    "Type[tuple]"
                ]
            }
        },
        "capture_args.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [
                "str",
                "dict",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/util/version.py": {
        "parse_version": {
            "name": "parse_version",
            "location": 89,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "gordo_version": [
                    "str",
                    "int",
                    "List[str]",
                    "Union[bytes, str]"
                ]
            }
        },
        "Version.get_version": {
            "name": "get_version",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Special.find": {
            "name": "find",
            "location": 20,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, object]",
                    "List[object]",
                    "Type[Exception]"
                ],
                "version": [
                    "int",
                    "Union[int, float, str]",
                    "str",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "GordoSpecial.get_version": {
            "name": "get_version",
            "location": 31,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoRelease.without_patch": {
            "name": "without_patch",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoRelease.only_major_minor": {
            "name": "only_major_minor",
            "location": 48,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoRelease.only_major": {
            "name": "only_major",
            "location": 53,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoRelease.get_version": {
            "name": "get_version",
            "location": 56,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoPR.get_version": {
            "name": "get_version",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GordoSHA.get_version": {
            "name": "get_version",
            "location": 85,
            "return": [
                "str",
                "float",
                "Optional[int]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/gordo/util/__init__.py": {},
    "gordo-master/gordo/workflow/__init__.py": {},
    "gordo-master/gordo/workflow/config_elements/normalized_config.py": {
        "_calculate_influx_resources": {
            "name": "_calculate_influx_resources",
            "location": 16,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "nr_of_machines": [
                    "int",
                    "str",
                    "Union[str, List[str]]",
                    "List[float]"
                ]
            }
        },
        "NormalizedConfig.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Tuple[int, int, int, int, int, int, int]"
                ],
                "project_name": [
                    "Dict[str, str]",
                    "List[str]",
                    "Callable"
                ],
                "gordo_version": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "model_builder_env": [
                    "Optional[bool]",
                    "Optional[Callable[[Any], bool]]",
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "NormalizedConfig.prepare_runtime": {
            "name": "prepare_runtime",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "runtime": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "NormalizedConfig.prepare_patched_globals": {
            "name": "prepare_patched_globals",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ],
                "patched_globals": [
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "Type",
                    "str"
                ]
            }
        },
        "NormalizedConfig.get_default_globals": {
            "name": "get_default_globals",
            "location": 169,
            "return": [
                "Dict[str, bool]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "Callable"
                ],
                "gordo_version": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NormalizedConfig.prepare_runtime.prepare_pod_runtime": {
            "name": "prepare_pod_runtime",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[Type]"
                ],
                "schema": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/gordo/workflow/config_elements/schemas.py": {},
    "gordo-master/gordo/workflow/config_elements/__init__.py": {},
    "gordo-master/gordo/workflow/workflow_generator/helpers.py": {
        "patch_dict": {
            "name": "patch_dict",
            "location": 4,
            "return": [
                "int",
                "str",
                "bytes",
                "Sequence[str]"
            ],
            "arguments": {
                "original_dict": [
                    "dict",
                    "OrderedDict",
                    "Dict[str, Any]"
                ],
                "patch_dictionary": [
                    "dict",
                    "Dict[str, str]",
                    "List[\"libkol.types.ItemQuantity\"]"
                ]
            }
        }
    },
    "gordo-master/gordo/workflow/workflow_generator/workflow_generator.py": {
        "_docker_friendly_version": {
            "name": "_docker_friendly_version",
            "location": 15,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_valid_owner_ref": {
            "name": "_valid_owner_ref",
            "location": 23,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[List[str]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "owner_reference_str": [
                    "bool",
                    "Optional[bytes]",
                    "str",
                    "List['PydanticModelField']",
                    "Type[Any]",
                    "Optional[str]",
                    "Type['BaseModel']"
                ]
            }
        },
        "_timestamp_constructor": {
            "name": "_timestamp_constructor",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_loader": [
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "node": [
                    "int",
                    "Optional[Union[int, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "get_dict_from_yaml": {
            "name": "get_dict_from_yaml",
            "location": 73,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "yaml_filter": {
            "name": "yaml_filter",
            "location": 100,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Exception",
                    "dict",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "load_workflow_template": {
            "name": "load_workflow_template",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "workflow_template": [
                    "str",
                    "TextIO",
                    "Union[str, Pattern]",
                    "dict"
                ]
            }
        },
        "default_image_pull_policy": {
            "name": "default_image_pull_policy",
            "location": 128,
            "return": [
                "int",
                "Dict[str, Any]",
                "list",
                "Iterator",
                "Exception"
            ],
            "arguments": {
                "gordo_version": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gordo-master/gordo/workflow/workflow_generator/__init__.py": {},
    "gordo-master/gordo/workflow/workflow_generator/resources/__init__.py": {},
    "gordo-master/tests/conftest.py": {
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "check_event_loop": {
            "name": "check_event_loop",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gordo_host": {
            "name": "gordo_host",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gordo_project": {
            "name": "gordo_project",
            "location": 56,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "gordo_name": {
            "name": "gordo_name",
            "location": 61,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "second_gordo_name": {
            "name": "second_gordo_name",
            "location": 66,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {}
        },
        "gordo_single_target": {
            "name": "gordo_single_target",
            "location": 71,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "gordo_name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "gordo_targets": {
            "name": "gordo_targets",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gordo_single_target": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "sensors": {
            "name": "sensors",
            "location": 81,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Set[str]]"
            ],
            "arguments": {}
        },
        "sensors_str": {
            "name": "sensors_str",
            "location": 86,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sensors": [
                    "List[str]"
                ]
            }
        },
        "influxdb_name": {
            "name": "influxdb_name",
            "location": 91,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "influxdb_user": {
            "name": "influxdb_user",
            "location": 96,
            "return": [
                "bob_emploi.frontend.server.scoring_base.ScoringProject",
                "dict"
            ],
            "arguments": {}
        },
        "influxdb_password": {
            "name": "influxdb_password",
            "location": 101,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "influxdb_measurement": {
            "name": "influxdb_measurement",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "influxdb_fixture_args": {
            "name": "influxdb_fixture_args",
            "location": 111,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "sensors_str": [
                    "str"
                ],
                "influxdb_name": [
                    "str"
                ],
                "influxdb_user": [
                    "str"
                ],
                "influxdb_password": [
                    "str"
                ]
            }
        },
        "influxdb_uri": {
            "name": "influxdb_uri",
            "location": 116,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "influxdb_user": [
                    "str",
                    "Optional[str]"
                ],
                "influxdb_password": [
                    "str",
                    "Optional[str]"
                ],
                "influxdb_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "gordo_revision": {
            "name": "gordo_revision",
            "location": 121,
            "return": [
                "Callable[[Mapping], T]",
                "list",
                "List[List[str]]",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {}
        },
        "api_version": {
            "name": "api_version",
            "location": 126,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "base_route": {
            "name": "base_route",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "api_version": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "gordo_project": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "gordo_name": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "second_base_route": {
            "name": "second_base_route",
            "location": 136,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "api_version": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "gordo_project": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "second_gordo_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "model_collection_directory": {
            "name": "model_collection_directory",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_revision": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "config_str": {
            "name": "config_str",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "gordo_name": [
                    "str",
                    "List[gordo.machine.datasesensor_tag.SensorTag]"
                ],
                "second_gordo_name": [
                    "str",
                    "List[gordo.machine.datasesensor_tag.SensorTag]"
                ],
                "sensors": [
                    "str",
                    "List[gordo.machine.datasesensor_tag.SensorTag]"
                ]
            }
        },
        "trained_model_directories": {
            "name": "trained_model_directories",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "model_collection_directory": [
                    "str"
                ],
                "config_str": [
                    "str"
                ]
            }
        },
        "trained_model_directory": {
            "name": "trained_model_directory",
            "location": 236,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "trained_model_directories": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "gordo_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "metadata": {
            "name": "metadata",
            "location": 241,
            "return": [
                "bool",
                "Dict[str, Any]",
                "list",
                "int"
            ],
            "arguments": {
                "trained_model_directories": [
                    "str",
                    "bool",
                    "list",
                    "flask.Blueprint"
                ],
                "trained_model_directory": [
                    "str",
                    "IO[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "gordo_ml_server_client": {
            "name": "gordo_ml_server_client",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "dict"
                ],
                "model_collection_directory": [
                    "str",
                    "docker.DockerClient"
                ],
                "trained_model_directory": [
                    "dict"
                ]
            }
        },
        "postgresdb": {
            "name": "postgresdb",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "base_influxdb": {
            "name": "base_influxdb",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "sensors": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Callable[[float], bool]"
                ],
                "influxdb_name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Callable[[str], str]]"
                ],
                "influxdb_user": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Callable[[str], str]]"
                ],
                "influxdb_password": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Callable[[str], str]]"
                ],
                "influxdb_measurement": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Callable[[float], bool]"
                ]
            }
        },
        "influxdb": {
            "name": "influxdb",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "base_influxdb": [
                    "float",
                    "str",
                    "MutableSequence[str]",
                    "Tuple[int, str]"
                ]
            }
        },
        "argo_version": {
            "name": "argo_version",
            "location": 334,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "ml_server": {
            "name": "ml_server",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "model_collection_directory": [
                    "bool",
                    "IO",
                    "str"
                ],
                "trained_model_directory": [
                    "bool",
                    "IO",
                    "str"
                ],
                "gordo_host": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ],
                "gordo_project": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "repo_dir": {
            "name": "repo_dir",
            "location": 432,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ml_server.gordo_ml_server_callback": {
            "name": "gordo_ml_server_callback",
            "location": 372,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "requests.Request"
                ]
            }
        }
    },
    "gordo-master/tests/mocs.py": {},
    "gordo-master/tests/test_examples.py": {
        "test_notebooks": {
            "name": "test_notebooks",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "gordo-master/tests/test_formatting.py": {
        "test_formatting_black": {
            "name": "test_formatting_black",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/utils.py": {
        "wait_for_influx": {
            "name": "wait_for_influx",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "max_wait": [
                    "int",
                    "numpy.ndarray"
                ],
                "influx_host": [
                    "int",
                    "float"
                ]
            }
        },
        "temp_env_vars": {
            "name": "temp_env_vars",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_model": {
            "name": "get_model",
            "location": 137,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "core_lib.core.models.Event",
                    "Dict[str, str]",
                    "Callable",
                    "taskiapplication.models.task.Task"
                ]
            }
        },
        "InfluxDB.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sensors": [
                    "str",
                    "int",
                    "Optional[str]",
                    "airflow.models.TaskInstance"
                ],
                "db_name": [
                    "str"
                ],
                "user": [
                    "str",
                    "int",
                    "Optional[str]",
                    "airflow.models.TaskInstance"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "airflow.models.TaskInstance"
                ],
                "measurement": [
                    "str",
                    "int",
                    "Optional[str]",
                    "airflow.models.TaskInstance"
                ]
            }
        },
        "InfluxDB.reset": {
            "name": "reset",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/tests/__init__.py": {},
    "gordo-master/tests/gordo/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_version_parser": {
            "name": "test_version_parser",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_version_with_error": {
            "name": "test_version_with_error",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/__init__.py": {},
    "gordo-master/tests/gordo/builder/test_builder.py": {
        "get_random_data": {
            "name": "get_random_data",
            "location": 26,
            "return": [
                "dict",
                "str",
                "Callable",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "machine_check": {
            "name": "machine_check",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "machine": [
                    "Exception"
                ],
                "check_history": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_get_metrics_dict_scaler": {
            "name": "test_get_metrics_dict_scaler",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "scaler": [
                    "int",
                    "pandas._ArrayLike"
                ]
            }
        },
        "test_determine_offset": {
            "name": "test_determine_offset",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "Optional[bool]",
                    "Optional[int]",
                    "List[int]",
                    "str"
                ],
                "expected_offset": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_output_dir": {
            "name": "test_output_dir",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_builder_metadata": {
            "name": "test_builder_metadata",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "raw_model_config": [
                    "Optional[List[Any]]",
                    "str"
                ]
            }
        },
        "test_get_metadata_helper": {
            "name": "test_get_metadata_helper",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "int",
                    "bool",
                    "list",
                    "bytes",
                    "float",
                    "Dict[str, Any]",
                    "List[int]"
                ],
                "expect_empty_dict": [
                    "bool",
                    "List[str]",
                    "grouper.models.base.session.Session",
                    "str",
                    "int"
                ]
            }
        },
        "test_scores_metadata": {
            "name": "test_scores_metadata",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "raw_model_config": [
                    "bool"
                ]
            }
        },
        "test_output_scores_metadata": {
            "name": "test_output_scores_metadata",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_provide_saved_model_simple_happy_path": {
            "name": "test_provide_saved_model_simple_happy_path",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_provide_saved_model_caching_handle_existing_same_dir": {
            "name": "test_provide_saved_model_caching_handle_existing_same_dir",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_provide_saved_model_caching_handle_existing_different_register": {
            "name": "test_provide_saved_model_caching_handle_existing_different_register",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_provide_saved_model_caching": {
            "name": "test_provide_saved_model_caching",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "should_be_equal": [
                    "bool",
                    "str",
                    "int"
                ],
                "metadata": [
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "accounts.models.KippoOrganization",
                    "Optional[str]"
                ],
                "tag_list": [
                    "Optional[str]",
                    "bool",
                    "Tuple[int, int]",
                    "Iterable[Sequence[str]]"
                ],
                "replace_cache": [
                    "Optional[\"Frame\"]",
                    "Type",
                    "Dict[str, Any]",
                    "int"
                ],
                "tmpdir": [
                    "str",
                    "bool",
                    "lunch_buddies.models.polls.Choice"
                ]
            }
        },
        "test_model_builder_metrics_list": {
            "name": "test_model_builder_metrics_list",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "metrics_": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_metrics_from_list": {
            "name": "test_metrics_from_list",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_setting_seed": {
            "name": "test_setting_seed",
            "location": 621,
            "return": [
                ""
            ],
            "arguments": {
                "seed": [],
                "model_config": [
                    "gordo.machine.Machine",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_n_splits_from_config": {
            "name": "test_n_splits_from_config",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_pipeline_from_definition": [
                    "unittesmock.MagicMock"
                ],
                "cv": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_builder_calls_machine_report": {
            "name": "test_builder_calls_machine_report",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_report_method": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "metadata": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/builder/test_local_build.py": {
        "test_local_builder_valid_configs": {
            "name": "test_local_builder_valid_configs",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "list",
                    "bytes",
                    "bool",
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_local_builder_invalid_configs": {
            "name": "test_local_builder_invalid_configs",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str",
                    "list"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/builder/test_utils.py": {
        "test_create_model_builder_success": {
            "name": "test_create_model_builder_success",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_model_builder_failed": {
            "name": "test_create_model_builder_failed",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/builder/__init__.py": {},
    "gordo-master/tests/gordo/cli/test_cli.py": {
        "machine": {
            "name": "machine",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "runner": {
            "name": "runner",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_build_env_args": {
            "name": "test_build_env_args",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "click.testing.CliRunner"
                ],
                "tmpdir": [
                    "bool",
                    "str"
                ],
                "machine": [
                    "str"
                ]
            }
        },
        "test_build_use_registry": {
            "name": "test_build_use_registry",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "int",
                    "dict",
                    "cmk.utils.type_defs.UserId"
                ],
                "machine": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_build_use_registry_bust_cache": {
            "name": "test_build_use_registry_bust_cache",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "int",
                    "dict",
                    "cmk.utils.type_defs.UserId"
                ],
                "machine": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_build_model_with_parameters": {
            "name": "test_build_model_with_parameters",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "tmpdir": [
                    "bool"
                ],
                "machine": []
            }
        },
        "test_expand_model_default_works": {
            "name": "test_expand_model_default_works",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expand_model_expand_works": {
            "name": "test_expand_model_expand_works",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expand_model_complains_on_missing_vars": {
            "name": "test_expand_model_complains_on_missing_vars",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_exit_code": {
            "name": "test_build_exit_code",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "exception": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "flask.testing.FlaskClient"
                ],
                "exit_code": [
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "runner": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "dict"
                ],
                "machine": [
                    "str"
                ]
            }
        },
        "test_build_cv_mode": {
            "name": "test_build_cv_mode",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Union[tuple, list]",
                    "bool",
                    "int"
                ],
                "runner": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "raiden.utils.Address"
                ],
                "should_save_model": [
                    "bool",
                    "str"
                ],
                "cv_mode": [
                    "str",
                    "int",
                    "tests.conftesWorker",
                    "click.testing.CliRunner",
                    "bytes",
                    "Union[str, float]"
                ],
                "machine": [
                    "gordo.machine.Machine",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_build_cv_mode_cross_val_cache": {
            "name": "test_build_cv_mode_cross_val_cache",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [],
                "should_save_model": [
                    "List[str]",
                    "int",
                    "List[Tuple[str, str]]",
                    "bool"
                ],
                "cv_mode_1": [
                    "str",
                    "click.testing.CliRunner",
                    "Union[str, float]",
                    "int"
                ],
                "cv_mode_2": [
                    "str",
                    "click.testing.CliRunner",
                    "Union[str, float]",
                    "int"
                ],
                "runner": [
                    "gordo.machine.Machine",
                    "List[str]",
                    "str",
                    "tests.unicmk.special_agents.test_utils_datacache.KeksDose",
                    "int"
                ],
                "machine": [
                    "dict",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "test_build_cv_mode_build_only": {
            "name": "test_build_cv_mode_build_only",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "runner": [
                    "click.testing.CliRunner"
                ],
                "machine": [
                    "gordo.machine.Machine",
                    "cmk.utils.type_defs.HostAddress",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "test_mlflow_reporter_set_cli_build": {
            "name": "test_mlflow_reporter_set_cli_build",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "MockClient": [],
                "mock_get_workspace_kwargs": [],
                "mock_get_spauth_kwargs": [],
                "monkeypatch": [
                    "mock.MagicMock",
                    "int"
                ],
                "runner": [],
                "tmpdir": [
                    "tests.e2e.Helper"
                ],
                "machine": []
            }
        },
        "test_gunicorn_execution_hosts": {
            "name": "test_gunicorn_execution_hosts",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "arg": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "Optional[int]",
                    "Callable",
                    "Optional[\"Game\"]",
                    "Callable[[int], Tuple]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "exception_expected": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_log_level_cli": {
            "name": "test_log_level_cli",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/cli/test_exception_reporter.py": {
        "test_report_level": {
            "name": "test_report_level",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "reporter1": {
            "name": "reporter1",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_sort_exceptions": {
            "name": "test_sort_exceptions",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_trim_formatted_traceback": {
            "name": "test_trim_formatted_traceback",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_reporter1": {
            "name": "test_reporter1",
            "location": 74,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "test_reporting_out_of_exception_scope": {
            "name": "test_reporting_out_of_exception_scope",
            "location": 81,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "report": {
            "name": "report",
            "location": 87,
            "return": [],
            "arguments": {
                "e": [],
                "reporter": [],
                "report_level": [],
                "report_file": []
            }
        },
        "report_to_string": {
            "name": "report_to_string",
            "location": 97,
            "return": [],
            "arguments": {
                "e": [],
                "reporter": [],
                "report_level": []
            }
        },
        "test_with_message_report_level": {
            "name": "test_with_message_report_level",
            "location": 104,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "test_with_traceback_report_level": {
            "name": "test_with_traceback_report_level",
            "location": 111,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "test_with_type_report_level": {
            "name": "test_with_type_report_level",
            "location": 120,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "test_with_exit_code_report_level": {
            "name": "test_with_exit_code_report_level",
            "location": 127,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "test_with_unicode_chars": {
            "name": "test_with_unicode_chars",
            "location": 134,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        },
        "test_with_max_message_len": {
            "name": "test_with_max_message_len",
            "location": 141,
            "return": [],
            "arguments": {
                "reporter1": []
            }
        }
    },
    "gordo-master/tests/gordo/cli/__init__.py": {},
    "gordo-master/tests/gordo/client/test_client.py": {
        "test_client_get_metadata": {
            "name": "test_client_get_metadata",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "str"
                ],
                "ml_server": [
                    "str"
                ]
            }
        },
        "test_client_predict_specific_targets": {
            "name": "test_client_predict_specific_targets",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "str",
                    "Callable"
                ],
                "gordo_single_target": [
                    "int",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Optional[float]",
                    "raiden.utils.FeeAmount"
                ],
                "ml_server": []
            }
        },
        "test_client_download_model": {
            "name": "test_client_download_model",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "str"
                ],
                "gordo_single_target": [],
                "ml_server": [
                    "bool"
                ]
            }
        },
        "test_client_predictions_diff_batch_sizes": {
            "name": "test_client_predictions_diff_batch_sizes",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ],
                "gordo_single_target": [],
                "influxdb": [],
                "influxdb_uri": [
                    "tsrc.teshelpers.cli.CLI"
                ],
                "influxdb_measurement": [
                    "bytes"
                ],
                "ml_server": [],
                "batch_size": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ],
                "use_parquet": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ]
            }
        },
        "test_client_metadata_revision": {
            "name": "test_client_metadata_revision",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ],
                "gordo_single_target": [],
                "ml_server": []
            }
        },
        "test_client_cli_basic": {
            "name": "test_client_cli_basic",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "test_client_cli_metadata": {
            "name": "test_client_cli_metadata",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "Container",
                    "utils.parser.BinaryParser"
                ],
                "gordo_single_target": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "bool",
                    "int"
                ],
                "ml_server": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_client_cli_download_model": {
            "name": "test_client_cli_download_model",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_project": [
                    "str",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ],
                "gordo_single_target": [
                    "cmk.utils.type_defs.UserId"
                ],
                "ml_server": [],
                "tmpdir": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "bool",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "bob_emploi.frontend.server.scoring_base.ExplainedScore"
                ]
            }
        },
        "test_client_cli_predict": {
            "name": "test_client_cli_predict",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "influxdb": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "influxdb_uri": [
                    "str"
                ],
                "gordo_project": [
                    "str"
                ],
                "gordo_single_target": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "ml_server": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "tmpdir": [
                    "str"
                ],
                "use_forwarder": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "trained_model_directory": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "use_parquet": [
                    "Callable",
                    "str"
                ],
                "session_config": [
                    "str",
                    "neuromation.cli.rooRoot",
                    "list"
                ]
            }
        },
        "test_client_cli_predict_non_zero_exit": {
            "name": "test_client_cli_predict_non_zero_exit",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "should_fail": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[], str]"
                ],
                "start_date": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "end_date": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "caplog": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[str, int]"
                ],
                "gordo_project": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "influxdb": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[], str]"
                ],
                "influxdb_uri": [
                    "str",
                    "bool",
                    "list",
                    "int"
                ],
                "influxdb_measurement": [
                    "str",
                    "bool",
                    "list",
                    "int"
                ],
                "ml_server": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[], str]"
                ]
            }
        },
        "test_ml_server_dataframe_to_dict_and_back": {
            "name": "test_ml_server_dataframe_to_dict_and_back",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "sensors_str": [
                    "OrderedDict",
                    "Set[frozenset[int]]",
                    "str",
                    "Set[str]"
                ],
                "use_test_project_tags": [
                    "str"
                ]
            }
        },
        "_machine": {
            "name": "_machine",
            "location": 427,
            "return": [
                "dict",
                "Dict[str, Any]",
                "logging.Logger",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_exponential_sleep_time": {
            "name": "test_exponential_sleep_time",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "Iterable[int]",
                    "logging.Logger"
                ],
                "gordo_project": [
                    "str",
                    "neuromation.api.Client"
                ],
                "ml_server": [
                    "str",
                    "int"
                ]
            }
        },
        "test__handle_response_errors": {
            "name": "test__handle_response_errors",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_client_set_revision_error": {
            "name": "test_client_set_revision_error",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "ml_server": [
                    "Dict[str, Sequence[str]]"
                ],
                "gordo_project": [
                    "str"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/client/__init__.py": {},
    "gordo-master/tests/gordo/machine/test_descriptors.py": {
        "test_valid_model": {
            "name": "test_valid_model",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_metadata": {
            "name": "test_valid_metadata",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_datetime": {
            "name": "test_valid_datetime",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_tag_list": {
            "name": "test_valid_tag_list",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_url_string": {
            "name": "test_valid_url_string",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_runtime": {
            "name": "test_valid_runtime",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fix_resource_limits": {
            "name": "test_fix_resource_limits",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fix_resource_limits_checks_ints": {
            "name": "test_fix_resource_limits_checks_ints",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/machine/test_machine.py": {
        "test_builder_with_reporter": {
            "name": "test_builder_with_reporter",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "postgresdb": [
                    "str"
                ],
                "metadata": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/machine/__init__.py": {},
    "gordo-master/tests/gordo/machine/metadata/test_metadata.py": {
        "test_metadata_dataclass": {
            "name": "test_metadata_dataclass",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/machine/metadata/__init__.py": {},
    "gordo-master/tests/gordo/machine/model/test_factories_utils.py": {
        "test_hourglass_calc_dims_check_dims": {
            "name": "test_hourglass_calc_dims_check_dims",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "test_input": [
                    "List[str]",
                    "str",
                    "system.machines.machine.Machine"
                ],
                "test_expected": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_check_dim_func_len": {
            "name": "test_check_dim_func_len",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/machine/model/test_feedforward_autoencoder.py": {
        "feedforward_model_mocker": {
            "name": "feedforward_model_mocker",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n_features": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "n_features_out": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "encoding_dim": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "decoding_dim": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "encoding_func": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "decoding_func": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "optimizer": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "optimizer_kwargs": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ],
                "compile_kwargs": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "FeedForwardAutoEncoderTestCase.test_feedforward_symmetric_basic": {
            "name": "test_feedforward_symmetric_basic",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "FeedForwardAutoEncoderTestCase.test_feedforward_symmetric_checks_dims": {
            "name": "test_feedforward_symmetric_checks_dims",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FeedForwardAutoEncoderTestCase.test_feedforward_hourglass_basic": {
            "name": "test_feedforward_hourglass_basic",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "FeedForwardAutoEncoderTestCase.test_feedforward_hourglass_compression_factors": {
            "name": "test_feedforward_hourglass_compression_factors",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "FeedForwardAutoEncoderTestCase.test_feedforward_hourglass_checks_enc_layers": {
            "name": "test_feedforward_hourglass_checks_enc_layers",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FeedForwardAutoEncoderTestCase.test_feedforward_hourglass_checks_compression_factor": {
            "name": "test_feedforward_hourglass_checks_compression_factor",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/tests/gordo/machine/model/test_lstm_autoencoder.py": {
        "test_lstm_symmetric_basic": {
            "name": "test_lstm_symmetric_basic",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "n_features": [
                    "int"
                ],
                "n_features_out": [
                    "float",
                    "str"
                ]
            }
        },
        "LSTMAutoEncoderTestCase.test_lstm_defaults": {
            "name": "test_lstm_defaults",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LSTMAutoEncoderTestCase.test_lstm_symmetric_checks_dims": {
            "name": "test_lstm_symmetric_checks_dims",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LSTMAutoEncoderTestCase.test_lstm_hourglass_basic": {
            "name": "test_lstm_hourglass_basic",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LSTMAutoEncoderTestCase.test_lstm_hourglass_checks_enc_layers": {
            "name": "test_lstm_hourglass_checks_enc_layers",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LSTMAutoEncoderTestCase.test_lstm_hourglass_checks_compression_factor": {
            "name": "test_lstm_hourglass_checks_compression_factor",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/tests/gordo/machine/model/test_model.py": {
        "test_base_class_models": {
            "name": "test_base_class_models",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "BaseModel": [
                    "str",
                    "List[str]",
                    "List[Dict]",
                    "zerver.models.Realm"
                ]
            }
        },
        "test_keras_autoencoder_scoring": {
            "name": "test_keras_autoencoder_scoring",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "int",
                    "Union[int, str]",
                    "float",
                    "audiopyle.lib.models.resulAnalysisStats"
                ],
                "kind": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_features_out": [
                    "int"
                ]
            }
        },
        "test_keras_autoencoder_crossval": {
            "name": "test_keras_autoencoder_crossval",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "List[src.main.core.models.display.Display]",
                    "int",
                    "Tuple[int, int]"
                ],
                "kind": [
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_keras_type_config": {
            "name": "test_keras_type_config",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "model": [],
                "kind": [
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_save_load": {
            "name": "test_save_load",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "tests.setup.SetupTest",
                    "bool"
                ],
                "kind": [
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_lookback_window_ae_valueerror_during_fit": {
            "name": "test_lookback_window_ae_valueerror_during_fit",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keras_ae_reshapes_array": {
            "name": "test_keras_ae_reshapes_array",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keras_forecast_reshapes_array": {
            "name": "test_keras_forecast_reshapes_array",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookback_window_ae_valueerror_during_predict": {
            "name": "test_lookback_window_ae_valueerror_during_predict",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookback_window_forecast_valueerror_during_fit": {
            "name": "test_lookback_window_forecast_valueerror_during_fit",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "lookback_window": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_lookback_window_forecast_valueerror_during_predict": {
            "name": "test_lookback_window_forecast_valueerror_during_predict",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "lookback_window": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_create_keras_timeseriesgenerator_lb3_loah0_bs2": {
            "name": "test_create_keras_timeseriesgenerator_lb3_loah0_bs2",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_keras_timeseriesgenerator_lb2_loah1_bs2": {
            "name": "test_create_keras_timeseriesgenerator_lb2_loah1_bs2",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_keras_timeseriesgenerator_lb3_loah2_bs2": {
            "name": "test_create_keras_timeseriesgenerator_lb3_loah2_bs2",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_keras_timeseriesgenerator_raise_error_on_neg_lookahead": {
            "name": "test_create_keras_timeseriesgenerator_raise_error_on_neg_lookahead",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lstmae_predict_output": {
            "name": "test_lstmae_predict_output",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keras_autoencoder_fits_callbacks": {
            "name": "test_keras_autoencoder_fits_callbacks",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_module_path": {
            "name": "test_parse_module_path",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrong_kind": {
            "name": "test_wrong_kind",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_n_features_out": {
            "name": "test_get_n_features_out",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_n_features": {
            "name": "test_get_n_features",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_import_kind": {
            "name": "test_import_kind",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_for_wrong_kind_import": {
            "name": "test_for_wrong_kind_import",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/machine/model/test_raw_keras.py": {
        "test_raw_keras_basic": {
            "name": "test_raw_keras_basic",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "spec_str": [
                    "str"
                ]
            }
        },
        "test_raw_keras_part_of_pipeline": {
            "name": "test_raw_keras_part_of_pipeline",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/machine/model/test_register.py": {
        "RegisterTestCase.test_fail_no_required_params": {
            "name": "test_fail_no_required_params",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterTestCase.test_hold_multiple_funcs": {
            "name": "test_hold_multiple_funcs",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterTestCase.test_fail_no_required_params.build_fn": {
            "name": "build_fn",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "RegisterTestCase.test_hold_multiple_funcs.func1": {
            "name": "func1",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "n_features": [
                    "int",
                    "bool"
                ]
            }
        },
        "RegisterTestCase.test_hold_multiple_funcs.func2": {
            "name": "func2",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "n_features": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/machine/model/test_transformers.py": {
        "test_infimputer_basic": {
            "name": "test_infimputer_basic",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "float"
                ]
            }
        },
        "test_infimputer_fill_values": {
            "name": "test_infimputer_fill_values",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_imputer_from_definition": {
            "name": "test_imputer_from_definition",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "config_str": [
                    "dict",
                    "str"
                ]
            }
        },
        "GordoFunctionTransformerFuncsTestCase._validate_transformer": {
            "name": "_validate_transformer",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transformer": [
                    "Set[str]",
                    "src.core.model.profile.Profile",
                    "src.core.model.scripScript",
                    "src.core.model.library.Library"
                ]
            }
        },
        "GordoFunctionTransformerFuncsTestCase.test_multiply_by_function_transformer": {
            "name": "test_multiply_by_function_transformer",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/tests/gordo/machine/model/test_utils.py": {
        "test_metrics_wrapper": {
            "name": "test_metrics_wrapper",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base_dataframe_creation": {
            "name": "test_base_dataframe_creation",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "dates": [
                    "list",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Iterable[str]]",
                    "dict",
                    "Optional[List[str]]",
                    "Optional[List[Any]]"
                ],
                "tags": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "target_tag_list": [
                    "int",
                    "str",
                    "List[numpy.ndarray]",
                    "Optional[str]",
                    "list",
                    "Dict[int, int]"
                ],
                "output_offset": [
                    "bool",
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/machine/model/__init__.py": {},
    "gordo-master/tests/gordo/machine/model/anomaly/test_anomaly_detectors.py": {
        "test_diff_detector": {
            "name": "test_diff_detector",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "scaler": [
                    "bool",
                    "str"
                ],
                "index": [],
                "with_thresholds": [],
                "shuffle": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_diff_detector_with_window": {
            "name": "test_diff_detector_with_window",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "scaler": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "len_x_y": [
                    "int",
                    "bool",
                    "str",
                    "Union[str, int]"
                ],
                "time_index": [
                    "bool",
                    "str",
                    "raiden.utils.Callable",
                    "int",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ],
                "with_thresholds": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "shuffle": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "window": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "smoothing_method": [
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "test_diff_kfcv_detector": {
            "name": "test_diff_kfcv_detector",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "scaler": [
                    "list",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "index": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "with_thresholds": [
                    "list",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "shuffle": [
                    "list",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "window": [
                    "list",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "smoothing_method": [
                    "list",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "threshold_percentile": [
                    "list",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "List[float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_diff_detector_serializability": {
            "name": "test_diff_detector_serializability",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "src.core.model.configuration_models.SettingsDialogConfiguration",
                    "asyncpg_migrate.model.Config",
                    "src.core.model.configuration_models.MainWindowConfiguration",
                    "cmk.base.config.HostConfig",
                    "cmk.utils.structured_data.StructuredDataTree"
                ]
            }
        },
        "test_diff_detector_threshold": {
            "name": "test_diff_detector_threshold",
            "location": 557,
            "return": [
                ""
            ],
            "arguments": {
                "mode": [
                    "int"
                ],
                "n_features_x": [
                    "int",
                    "Optional[int]"
                ],
                "n_features_y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_diff_detector_threshold_with_window": {
            "name": "test_diff_detector_threshold_with_window",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {
                "n_features_y": [
                    "int"
                ],
                "n_features_x": [
                    "int",
                    "float",
                    "Optional[Tuple[int, ...]]"
                ],
                "len_x_y": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_diff_detector_get_metadata": {
            "name": "test_diff_detector_get_metadata",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "str",
                    "List[dict]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_diff_detector_cross_validate": {
            "name": "test_diff_detector_cross_validate",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "mode": [
                    "int"
                ],
                "n_features_y": [
                    "int",
                    "bool"
                ],
                "return_estimator": [
                    "int",
                    "List[int]",
                    "Callable",
                    "OrderedDict",
                    "List[str]"
                ]
            }
        },
        "test_diff_detector_require_thresholds": {
            "name": "test_diff_detector_require_thresholds",
            "location": 769,
            "return": [
                ""
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "str"
                ],
                "require_threshold": [
                    "Callable",
                    "bool",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/machine/model/anomaly/__init__.py": {},
    "gordo-master/tests/gordo/reporters/test_mlflow_reporter.py": {
        "test_validate_dict": {
            "name": "test_validate_dict",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_mlflow_client": {
            "name": "test_get_mlflow_client",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "workspace_kwargs": [
                    "int",
                    "bool"
                ],
                "service_principal_kwargs": [
                    "int",
                    "bool"
                ],
                "n_interactive": [
                    "int",
                    "Optional[int]"
                ],
                "n_spauth": [
                    "int",
                    "Optional[int]"
                ],
                "n_get_uri": [
                    "int",
                    "str",
                    "List[int]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "test_get_mlflow_client_config": {
            "name": "test_get_mlflow_client_config",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "MockClient": [
                    "mock.Mock"
                ],
                "MockWorkspace": [
                    "mock.Mock"
                ],
                "MockInteractiveLogin": [
                    "mock.Mock"
                ]
            }
        },
        "test_get_run_id_external_calls": {
            "name": "test_get_run_id_external_calls",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "mock_create_run": [],
                "mock_create_experiment": [],
                "mock_get_experiment": [
                    "mock.Mock"
                ],
                "tmpdir": [
                    "DefaultDict[int, Dict[str, float]]"
                ]
            }
        },
        "test_datetime_to_ms_since_epoch": {
            "name": "test_datetime_to_ms_since_epoch",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[str]"
                ],
                "expected": [
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "test_batch_log_items": {
            "name": "test_batch_log_items",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "n_metrics": [
                    "int"
                ],
                "n_max_metrics": [
                    "str",
                    "BinaryIO",
                    "int",
                    "memoryview"
                ],
                "n_params": [
                    "int"
                ],
                "n_max_params": [
                    "str",
                    "BinaryIO",
                    "int",
                    "memoryview"
                ],
                "expected_n_batches": [
                    "int"
                ]
            }
        },
        "test_get_machine_log_items": {
            "name": "test_get_machine_log_items",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": []
            }
        },
        "test_get_kwargs_from_secret": {
            "name": "test_get_kwargs_from_secret",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict",
                    "Set[str]",
                    "Dict[str, str]",
                    "Tuple[str]",
                    "List[str]"
                ],
                "secret_str": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Set[str]"
                ],
                "keys": [
                    "str"
                ],
                "keys_valid": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_workspace_spauth_kwargs": {
            "name": "test_workspace_spauth_kwargs",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_MachineEncoder": {
            "name": "test_MachineEncoder",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_mlflow_context_log_metadata": {
            "name": "test_mlflow_context_log_metadata",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "MockClient": [],
                "tmpdir": [
                    "DefaultDict[int, Dict[str, float]]",
                    "float"
                ],
                "metadata": []
            }
        },
        "test_mlflow_context_log_error": {
            "name": "test_mlflow_context_log_error",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "MockClient": [
                    "mock.MagicMock"
                ],
                "metadata": []
            }
        },
        "test_get_run_id_external_calls._test_calls": {
            "name": "_test_calls",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "test_run_id": [
                    "str"
                ],
                "n_create_exp": [
                    "int",
                    "str"
                ],
                "n_create_run": [
                    "int",
                    "str"
                ]
            }
        },
        "test_get_run_id_external_calls.MockRunInfo.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "run_id": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_run_id_external_calls.MockRun.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "run_id": [
                    "str"
                ]
            }
        },
        "test_get_run_id_external_calls.MockExperiment.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/reporters/test_postgres_reporter.py": {
        "test_postgres_reporter": {
            "name": "test_postgres_reporter",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "postgresdb": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "metadata": [
                    "str",
                    "float"
                ]
            }
        },
        "test_postgres_exceptions": {
            "name": "test_postgres_exceptions",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str"
                ],
                "postgresdb": [
                    "str"
                ]
            }
        },
        "test_overwrite_report": {
            "name": "test_overwrite_report",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "postgresdb": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "metadata": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/reporters/__init__.py": {},
    "gordo-master/tests/gordo/serializer/definition_test_model.py": {
        "DefinitionTestModel.from_definition": {
            "name": "from_definition",
            "location": 3,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "Dict[str, Union[str, int]]"
                ],
                "definition": [
                    "dict",
                    "str",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "DefinitionTestModel.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DefinitionTestModel.into_definition": {
            "name": "into_definition",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/tests/gordo/serializer/test_serializer_from_definition.py": {
        "test_load_from_definition": {
            "name": "test_load_from_definition",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "definition": []
            }
        },
        "test_from_definition_test_model": {
            "name": "test_from_definition_test_model",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ConfigToScikitLearnPipeTestCase.setup_gen": {
            "name": "setup_gen",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigToScikitLearnPipeTestCase.test_pydoc_locate_class": {
            "name": "test_pydoc_locate_class",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigToScikitLearnPipeTestCase.test_from_definition": {
            "name": "test_from_definition",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigToScikitLearnPipeTestCase._verify_pipe": {
            "name": "_verify_pipe",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pipe": [
                    "str",
                    "list",
                    "List[str]",
                    "List[T]",
                    "List[int]"
                ],
                "model": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "model_kind": [
                    "str",
                    "bool",
                    "float",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/serializer/test_serializer_into_definition.py": {
        "variations_of_same_pipeline": {
            "name": "variations_of_same_pipeline",
            "location": 24,
            "return": [
                "str",
                "fonduer.parser.models.Document",
                "float",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_into_definition": {
            "name": "test_into_definition",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "variations_of_same_pipeline": []
            }
        },
        "test_into_from": {
            "name": "test_into_from",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_from_into": {
            "name": "test_from_into",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_captures_kwarg_to_init": {
            "name": "test_captures_kwarg_to_init",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_from_definition_test_model": {
            "name": "test_from_definition_test_model",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/serializer/test_serializer_load_dump.py": {
        "test_dump_load_models": {
            "name": "test_dump_load_models",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "test_load_metadata": {
            "name": "test_load_metadata",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "models.Category"
                ],
                "location": [
                    "str",
                    "models.Category"
                ]
            }
        },
        "PipelineSerializationTestCase.test_pipeline_serialization": {
            "name": "test_pipeline_serialization",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gordo-master/tests/gordo/serializer/__init__.py": {},
    "gordo-master/tests/gordo/server/test_anomaly_view.py": {
        "test_anomaly_prediction_endpoint": {
            "name": "test_anomaly_prediction_endpoint",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "base_route": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "Tuple[int, int]",
                    "int"
                ],
                "sensors_str": [
                    "int",
                    "str",
                    "float",
                    "list"
                ],
                "influxdb": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "gordo_ml_server_client": [
                    "bool",
                    "int"
                ],
                "data_size": [
                    "int",
                    "str",
                    "float",
                    "list"
                ],
                "sensors": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "resp_format": [
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_second_anomaly_prediction_endpoint": {
            "name": "test_second_anomaly_prediction_endpoint",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "second_base_route": [
                    "List[str]",
                    "bool"
                ],
                "sensors_str": [
                    "int"
                ],
                "influxdb": [],
                "gordo_ml_server_client": [
                    "float",
                    "raiden.utils.BlockTimeout"
                ],
                "sensors": [],
                "resp_format": [
                    "bool",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ]
            }
        },
        "test_second_anomaly_prediction_endpoint_all_columns": {
            "name": "test_second_anomaly_prediction_endpoint_all_columns",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "second_base_route": [
                    "str",
                    "List[str]"
                ],
                "sensors_str": [
                    "int"
                ],
                "influxdb": [],
                "gordo_ml_server_client": [],
                "sensors": [],
                "resp_format": [
                    "bool",
                    "List[Tuple[bool, Any]]",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "dict"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/server/test_base_view.py": {
        "test_empty_target_tag_list": {
            "name": "test_empty_target_tag_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_prediction_endpoint_post_ok": {
            "name": "test_prediction_endpoint_post_ok",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "base_route": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "sensors": [
                    "int",
                    "List[int]",
                    "str",
                    "float"
                ],
                "sensors_str": [
                    "bool",
                    "pandas.DataFrame",
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ],
                "gordo_ml_server_client": [
                    "str",
                    "bool"
                ],
                "data_size": [
                    "int",
                    "List[int]",
                    "str",
                    "float"
                ],
                "to_dict_arg": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "List[logging.Handler]"
                ],
                "resp_format": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "send_as_parquet": [
                    "str",
                    "List[Dict[str, str]]",
                    "Type[Any]",
                    "list",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_prediction_endpoint_post_fail": {
            "name": "test_prediction_endpoint_post_fail",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "float",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "Optional[Tuple[int, int]]",
                    "cmk.utils.type_defs.ServiceDetails"
                ],
                "base_route": [
                    "str",
                    "int",
                    "raiden.utils.Iterator[raiden.utils.Port]"
                ],
                "sensors": [
                    "List[str]",
                    "Callable",
                    "Dict[int, str]",
                    "numpy.ndarray",
                    "str",
                    "bytes",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]"
                ],
                "gordo_ml_server_client": [
                    "str",
                    "int",
                    "raiden.utils.Iterator[raiden.utils.Port]"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/server/test_gordo_server.py": {
        "test_healthcheck_endpoint": {
            "name": "test_healthcheck_endpoint",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "base_route": [
                    "str"
                ],
                "gordo_ml_server_client": [
                    "bool"
                ]
            }
        },
        "test_response_header_timing": {
            "name": "test_response_header_timing",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "base_route": [
                    "str"
                ],
                "gordo_ml_server_client": [
                    "str"
                ]
            }
        },
        "test_metadata_endpoint": {
            "name": "test_metadata_endpoint",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "base_route": [
                    "str",
                    "bool"
                ],
                "gordo_single_target": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "gordo_ml_server_client": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_download_model": {
            "name": "test_download_model",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "api_version": [
                    "str",
                    "int",
                    "bool"
                ],
                "gordo_project": [
                    "str",
                    "int",
                    "bool"
                ],
                "gordo_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "gordo_ml_server_client": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_run_cmd": {
            "name": "test_run_cmd",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_run_server_gthread": {
            "name": "test_run_server_gthread",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_run_server_gevent": {
            "name": "test_run_server_gevent",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_valid_revision": {
            "name": "test_not_valid_revision",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_list_revisions": {
            "name": "test_list_revisions",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "revisions": [
                    "str"
                ]
            }
        },
        "test_list_revisions_listdir_fail": {
            "name": "test_list_revisions_listdir_fail",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "logging.LogRecord"
                ]
            }
        },
        "test_model_list_view_non_existant_proj": {
            "name": "test_model_list_view_non_existant_proj",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_models_by_revision_list_view": {
            "name": "test_models_by_revision_list_view",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ],
                "revision_to_models": [
                    "int",
                    "str"
                ]
            }
        },
        "test_request_specific_revision": {
            "name": "test_request_specific_revision",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "trained_model_directory": [],
                "tmpdir": [
                    "str",
                    "int"
                ],
                "revisions": [
                    "str"
                ]
            }
        },
        "copy_tmp_model": {
            "name": "copy_tmp_model",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "trained_model_directory": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "tmpdir": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "revision": [
                    "str",
                    "Optional[str]",
                    "MutableSequence[str]"
                ],
                "model_name": [
                    "str",
                    "Optional[str]",
                    "MutableSequence[str]"
                ]
            }
        },
        "test_delete_revision": {
            "name": "test_delete_revision",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "trained_model_directory": [],
                "tmpdir": [
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "test_not_gordo_name": {
            "name": "test_not_gordo_name",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "trained_model_directory": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_server_version_route": {
            "name": "test_server_version_route",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "model_collection_directory": [],
                "gordo_revision": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_non_existant_model_metadata": {
            "name": "test_non_existant_model_metadata",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Callable"
                ],
                "gordo_project": [
                    "logging.Logger",
                    "str",
                    "int"
                ],
                "api_version": [
                    "logging.Logger",
                    "str",
                    "int"
                ]
            }
        },
        "test_expected_models_route": {
            "name": "test_expected_models_route",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_with_prometheus": {
            "name": "test_with_prometheus",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_revisions_listdir_fail.listdir_fail": {
            "name": "listdir_fail",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/server/test_model_io.py": {
        "test_model_mixin_get_model_output": {
            "name": "test_model_mixin_get_model_output",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/server/test_prometheus.py": {
        "registry": {
            "name": "registry",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "prometheus_metrics": {
            "name": "prometheus_metrics",
            "location": 15,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "gordo_server": {
            "name": "gordo_server",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "prometheus_metrics": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_server": [],
                "registry": [
                    "int"
                ]
            }
        },
        "test_failed": {
            "name": "test_failed",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_server": [],
                "registry": [
                    "Iterable[Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "test_ignore": {
            "name": "test_ignore",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_server": [],
                "registry": []
            }
        },
        "gordo_server.healthcheck": {
            "name": "healthcheck",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gordo_server.success": {
            "name": "success",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gordo_project": [
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "bool"
                ],
                "gordo_name": [
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "gordo_server.failed": {
            "name": "failed",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gordo_project": [
                    "str",
                    "Optional[\"Game\"]",
                    "Callable",
                    "int",
                    "flask.Flask",
                    "bool"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/server/test_utils.py": {
        "test_dataframe_parquet_serializers": {
            "name": "test_dataframe_parquet_serializers",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "test_dataframe_from_to_dict": {
            "name": "test_dataframe_from_to_dict",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "test_dataframe_to_from_dict": {
            "name": "test_dataframe_to_from_dict",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "expect_multi_lvl": [
                    "bool"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_dataframe_from_dict_ordering": {
            "name": "test_dataframe_from_dict_ordering",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "test_find_path_in_dict_success": {
            "name": "test_find_path_in_dict_success",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/server/__init__.py": {},
    "gordo-master/tests/gordo/util/test_disk_registry.py": {
        "test_simple_happy_path": {
            "name": "test_simple_happy_path",
            "location": 8,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_new_registry": {
            "name": "test_new_registry",
            "location": 14,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_complicated_happy_path": {
            "name": "test_complicated_happy_path",
            "location": 24,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_overwrites_existing": {
            "name": "test_overwrites_existing",
            "location": 34,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 45,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_double_delete": {
            "name": "test_double_delete",
            "location": 58,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_get_value_without_registry_dir": {
            "name": "test_get_value_without_registry_dir",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/util/test_sensor_tag.py": {},
    "gordo-master/tests/gordo/util/test_version.py": {
        "test_release": {
            "name": "test_release",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_versions": {
            "name": "test_versions",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_version": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Callable[[str], bool]]"
                ],
                "expected": [
                    "str",
                    "Callable[..., Awaitable]",
                    "Union[int, slice]"
                ]
            }
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/util/__init__.py": {},
    "gordo-master/tests/gordo/workflow/test_config_elements.py": {
        "test_dataset_from_dict": {
            "name": "test_dataset_from_dict",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dataset_from_config_checks_dates": {
            "name": "test_dataset_from_config_checks_dates",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "default_globals": {
            "name": "default_globals",
            "location": 69,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_machine_from_config": {
            "name": "test_machine_from_config",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "default_globals": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_invalid_model": {
            "name": "test_invalid_model",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "default_globals": [
                    "dict",
                    "Callable",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "gordo-master/tests/gordo/workflow/test_normalized_config.py": {
        "test_splited_docker_images": {
            "name": "test_splited_docker_images",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unified_docker_images": {
            "name": "test_unified_docker_images",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_docker_images": {
            "name": "test_custom_docker_images",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "gordo-master/tests/gordo/workflow/test_workflow_generator/test_workflow_generator.py": {
        "path_to_config_files": {
            "name": "path_to_config_files",
            "location": 29,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_generate_test_workflow_yaml": {
            "name": "_generate_test_workflow_yaml",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ],
                "config_filename": [
                    "str"
                ],
                "project_name": [
                    "str"
                ],
                "args": []
            }
        },
        "_generate_test_workflow_str": {
            "name": "_generate_test_workflow_str",
            "location": 51,
            "return": [
                "Iterable[Any]",
                "Callable",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ],
                "config_filename": [
                    "str"
                ],
                "project_name": [
                    "str",
                    "BinaryIO"
                ],
                "args": []
            }
        },
        "_get_env_for_machine_build_serve_task": {
            "name": "_get_env_for_machine_build_serve_task",
            "location": 78,
            "return": [],
            "arguments": {
                "machine": [
                    "int",
                    "str",
                    "dict"
                ],
                "expanded_template": [
                    "Dict[str, Any]",
                    "str",
                    "Iterator",
                    "Container[str]",
                    "int"
                ]
            }
        },
        "test_argo_lint": {
            "name": "test_argo_lint",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "Iterable[str]"
                ],
                "tmpdir": [
                    "str",
                    "Tuple[str, str, str]",
                    "int"
                ],
                "argo_version": [
                    "str"
                ]
            }
        },
        "test_basic_generation": {
            "name": "test_basic_generation",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_generation_to_file": {
            "name": "test_generation_to_file",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "path_to_config_files": [
                    "str"
                ]
            }
        },
        "test_quotes_work": {
            "name": "test_quotes_work",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "test_overrides_builder_datasource": {
            "name": "test_overrides_builder_datasource",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "tuple",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "test_builder_labels": {
            "name": "test_builder_labels",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "tuple"
                ]
            }
        },
        "filter_keys": {
            "name": "filter_keys",
            "location": 279,
            "return": [
                "str",
                "List[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "input_list": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[str]"
                ],
                "key": [
                    "str"
                ],
                "values": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "test_model_builder_spec": {
            "name": "test_model_builder_spec",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Optional[str]"
                ],
                "template_name": [
                    "str",
                    "docker.DockerClient"
                ],
                "spec_key": [
                    "str"
                ]
            }
        },
        "test_runtime_image_override": {
            "name": "test_runtime_image_override",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "test_runtime_overrides_builder": {
            "name": "test_runtime_overrides_builder",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "test_runtime_overrides_client_para": {
            "name": "test_runtime_overrides_client_para",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_runtime_overrides_client": {
            "name": "test_runtime_overrides_client",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_runtime_overrides_influx": {
            "name": "test_runtime_overrides_influx",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "test_disable_influx": {
            "name": "test_disable_influx",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "test_selective_influx": {
            "name": "test_selective_influx",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "test_valid_dateformats": {
            "name": "test_valid_dateformats",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ]
            }
        },
        "test_model_names_embedded": {
            "name": "test_model_names_embedded",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ]
            }
        },
        "test_missing_timezone": {
            "name": "test_missing_timezone",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_validates_resource_format": {
            "name": "test_validates_resource_format",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "int"
                ]
            }
        },
        "test_valid_owner_ref": {
            "name": "test_valid_owner_ref",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {
                "owner_ref_str": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "valid": [
                    "bool",
                    "int",
                    "List[acres.util.acronym.Acronym]",
                    "Optional[int]",
                    "Callable",
                    "list"
                ]
            }
        },
        "test_log_level_key": {
            "name": "test_log_level_key",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "log_level": [
                    "str",
                    "bool",
                    "int"
                ],
                "path_to_config_files": [
                    "str"
                ]
            }
        },
        "test_expected_models_in_workflow": {
            "name": "test_expected_models_in_workflow",
            "location": 580,
            "return": [
                ""
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_default_image_pull_policy": {
            "name": "test_default_image_pull_policy",
            "location": 614,
            "return": [
                ""
            ],
            "arguments": {
                "gordo_version": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "dict"
                ],
                "expected": [
                    "str",
                    "Callable[..., Awaitable]",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "_get_names_recursively": {
            "name": "_get_names_recursively",
            "location": 619,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "steps": [
                    "dict",
                    "int",
                    "Iterable[dict]"
                ]
            }
        },
        "test_hpa_types": {
            "name": "test_hpa_types",
            "location": 656,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ],
                "args": [],
                "expected_steps": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "recurse_dict": {
            "name": "recurse_dict",
            "location": 675,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "test_recurse_dict": {
            "name": "test_recurse_dict",
            "location": 687,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pod_security_context": {
            "name": "test_pod_security_context",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ]
            }
        },
        "test_security_context": {
            "name": "test_security_context",
            "location": 712,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ]
            }
        },
        "test_security_context_failed": {
            "name": "test_security_context_failed",
            "location": 729,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_with_resources_labels": {
            "name": "test_with_resources_labels",
            "location": 740,
            "return": [
                ""
            ],
            "arguments": {
                "path_to_config_files": [
                    "str"
                ]
            }
        }
    }
}
{
    "graphbook-master/docs/conf.py": {},
    "graphbook-master/graphbook/__init__.py": {},
    "graphbook-master/graphbook/graph/cell.py": {
        "_decode": {
            "name": "_decode",
            "location": 77,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Union[str, bytes]"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "register_cell_type": {
            "name": "register_cell_type",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "cell_type": [
                    "str",
                    "int"
                ],
                "cls": [
                    "str",
                    "bool",
                    "dict",
                    "ForwardRef"
                ],
                "replace": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_cell": {
            "name": "load_cell",
            "location": 157,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Cell.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "dict",
                    "bytes",
                    "List[Callable]"
                ]
            }
        },
        "Cell.render": {
            "name": "render",
            "location": 31,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "decoder": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Cell.is_executable": {
            "name": "is_executable",
            "location": 35,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.execute": {
            "name": "execute",
            "location": 39,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.to_obj": {
            "name": "to_obj",
            "location": 43,
            "return": [
                "typing.Dict[builtins.str, builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.dup": {
            "name": "dup",
            "location": 47,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.from_obj": {
            "name": "from_obj",
            "location": 54,
            "return": [
                "Cell"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "obj": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Cell.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TextCell.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "str",
                    "eth.vm.message.Message"
                ]
            }
        },
        "TextCell.render": {
            "name": "render",
            "location": 90,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "decoder": [
                    "float",
                    "bool"
                ]
            }
        },
        "TextCell.is_executable": {
            "name": "is_executable",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCell.execute": {
            "name": "execute",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCell.to_obj": {
            "name": "to_obj",
            "location": 99,
            "return": [
                "int",
                "type",
                "Optional[Any]",
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCell.from_obj": {
            "name": "from_obj",
            "location": 103,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "obj": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "MicroSchemeCell.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "str",
                    "eth.vm.message.Message"
                ]
            }
        },
        "MicroSchemeCell.is_executable": {
            "name": "is_executable",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroSchemeCell.execute": {
            "name": "execute",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graphbook-master/graphbook/graph/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Node.add": {
            "name": "add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "float",
                    "int"
                ]
            }
        },
        "Node.remove": {
            "name": "remove",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Node.insert": {
            "name": "insert",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "Node.to_obj": {
            "name": "to_obj",
            "location": 45,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.link": {
            "name": "link",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "Node.from_obj": {
            "name": "from_obj",
            "location": 60,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "obj": []
            }
        },
        "Node.tag": {
            "name": "tag",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Node.untag": {
            "name": "untag",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "Node.render": {
            "name": "render",
            "location": 89,
            "return": [
                "str",
                "List[str]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__getitem__": {
            "name": "__getitem__",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "Node.__setitem__": {
            "name": "__setitem__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "T",
                    "bool"
                ],
                "c": [
                    "int",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Hashable"
                ]
            }
        }
    },
    "graphbook-master/graphbook/graph/notebook.py": {
        "NodeEntry.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "title": [
                    "Callable",
                    "bool",
                    "int",
                    "Optional[Callable[[], bool]]",
                    "Optional[str]"
                ],
                "tags": [
                    "Optional[str]",
                    "Iterable[T]",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "links": [
                    "int",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "NodeEntry.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "NodeEntry.__lt__": {
            "name": "__lt__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "type"
                ]
            }
        },
        "NodeEntry.to_obj": {
            "name": "to_obj",
            "location": 55,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeEntry.from_obj": {
            "name": "from_obj",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "obj": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Notebook.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Notebook._is_maybe_node": {
            "name": "_is_maybe_node",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Notebook.scan": {
            "name": "scan",
            "location": 106,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notebook.noder": {
            "name": "noder",
            "location": 123,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str"
                ]
            }
        },
        "Notebook._noder": {
            "name": "_noder",
            "location": 131,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "node_path": [
                    "str"
                ]
            }
        },
        "Notebook.nodew": {
            "name": "nodew",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "dcos_e2e.node.Node",
                    "Set[node.Node]"
                ]
            }
        },
        "Notebook._update_node": {
            "name": "_update_node",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[str]"
                ]
            }
        },
        "Notebook.select": {
            "name": "select",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[str]"
                ],
                "cased": [
                    "bool",
                    "Sequence[str]",
                    "Tuple[Tuple[str, str]]",
                    "str",
                    "Set[str]"
                ],
                "and_tags": [
                    "Optional[List[str]]",
                    "Set[str]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/graph/serial.py": {
        "to_yaml": {
            "name": "to_yaml",
            "location": 10,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "Iterable",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "from_yaml": {
            "name": "from_yaml",
            "location": 15,
            "return": [
                "int",
                "dict",
                "bool",
                "Dict[str, Any]",
                "Optional[Exception]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/graph/__init__.py": {},
    "graphbook-master/graphbook/ui/curses.py": {
        "render_cell": {
            "name": "render_cell",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ],
                "scr": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "stdscr": [
                    "str"
                ],
                "args": []
            }
        },
        "KeyMap.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMap.register": {
            "name": "register",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[Hashable]",
                    "MutableMapping[Any, Any]"
                ],
                "func": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]"
                ]
            }
        },
        "KeyMap.press": {
            "name": "press",
            "location": 32,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "abc.graph.GraphKeyType",
                    "int"
                ],
                "scr": [
                    "str",
                    "KT",
                    "bool"
                ]
            }
        },
        "main.fine_python": {
            "name": "fine_python",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "scr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "graphbook-master/graphbook/ui/server.py": {
        "to_json": {
            "name": "to_json",
            "location": 11,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "str",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "dict"
                ],
                "status": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "dict"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 25,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "tuple",
                "int"
            ],
            "arguments": {}
        },
        "node_route": {
            "name": "node_route",
            "location": 31,
            "return": [
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "node_id": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/ui/tk.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "master": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/ui/urwid.py": {
        "build_node_display": {
            "name": "build_node_display",
            "location": 16,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "node_id": [
                    "int",
                    "str"
                ]
            }
        },
        "jump_nodes": {
            "name": "jump_nodes",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "button": [
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ],
                "nodeinfo": [
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ]
            }
        },
        "display_node": {
            "name": "display_node",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "button": [
                    "List[str]",
                    "bool",
                    "str"
                ],
                "node": [
                    "dict"
                ]
            }
        },
        "menu": {
            "name": "menu",
            "location": 52,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "list",
                "List[float]",
                "Tuple[int, int, int]",
                "List[List[Any]]",
                "Sequence[str]",
                "List[Callable]"
            ],
            "arguments": {}
        },
        "exit_program": {
            "name": "exit_program",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "button": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "keypress_exit": {
            "name": "keypress_exit",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "setup_notebook": {
            "name": "setup_notebook",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "display": {
            "name": "display",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "graphbook-master/graphbook/ui/__init__.py": {},
    "graphbook-master/graphbook/vm/uscheme.py": {
        "tokenise": {
            "name": "tokenise",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "atom": {
            "name": "atom",
            "location": 35,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[str]",
                    "Match[str]",
                    "bytes"
                ]
            }
        },
        "expression_from_tokens": {
            "name": "expression_from_tokens",
            "location": 45,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[str, Set[str]]",
                "List[str]",
                "Optional[List[Any]]",
                "str"
            ],
            "arguments": {
                "tokens": [
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "standard_env": {
            "name": "standard_env",
            "location": 62,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "str",
                "Mapping[str, str]",
                "\"jinja2.Environment\""
            ],
            "arguments": {}
        },
        "eval": {
            "name": "eval",
            "location": 116,
            "return": [
                "dict",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "exp": [
                    "obj.Environment"
                ],
                "env": [
                    "NamedTuple",
                    "dict",
                    "Callable",
                    "bool"
                ]
            }
        },
        "standalone": {
            "name": "standalone",
            "location": 196,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "bool"
                ]
            }
        },
        "Procedure.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "List[Dict]",
                    "int",
                    "bool"
                ],
                "body": [
                    "str",
                    "List[Dict]",
                    "int",
                    "bool"
                ],
                "env": [
                    "str",
                    "List[Dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "Procedure.__call__": {
            "name": "__call__",
            "location": 147,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Iterable[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Interpreter.reset": {
            "name": "reset",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.eval": {
            "name": "eval",
            "location": 179,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Interpreter.load_file": {
            "name": "load_file",
            "location": 190,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "graphbook-master/graphbook/vm/__init__.py": {},
    "graphbook-master/tests/context.py": {},
    "graphbook-master/tests/test_cell.py": {
        "test_cell": {
            "name": "test_cell",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cell_yaml": {
            "name": "test_cell_yaml",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_cell": {
            "name": "test_load_cell",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "graphbook-master/tests/test_node.py": {
        "test_node": {
            "name": "test_node",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_node_yaml": {
            "name": "test_node_yaml",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove": {
            "name": "test_remove",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_insert": {
            "name": "test_insert",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_render": {
            "name": "test_render",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_link": {
            "name": "test_link",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "graphbook-master/tests/test_notebook.py": {
        "test_demobook": {
            "name": "test_demobook",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_maybe_path": {
            "name": "test_is_maybe_path",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_newnotebook": {
            "name": "test_newnotebook",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nodeentry": {
            "name": "test_nodeentry",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "graphbook-master/tests/test_vm_uscheme.py": {
        "test_uscheme_cell": {
            "name": "test_uscheme_cell",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_uscheme_load_file": {
            "name": "test_uscheme_load_file",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
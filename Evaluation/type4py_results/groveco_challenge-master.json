{
    "groveco_challenge-master/setup.py": {},
    "groveco_challenge-master/docs/source/conf.py": {},
    "groveco_challenge-master/src/groveco_challenge/cli.py": {
        "cli": {
            "name": "cli",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "zipcode": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "str"
                ],
                "address": [
                    "Optional[str]",
                    "Set[int]",
                    "int",
                    "str"
                ],
                "units": [
                    "int",
                    "float",
                    "str"
                ],
                "output": [
                    "str",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "results": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "Iterable[float]"
                ],
                "max_workers": [
                    "int",
                    "bool",
                    "float"
                ],
                "actual": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "Iterable[float]"
                ]
            }
        }
    },
    "groveco_challenge-master/src/groveco_challenge/constants.py": {},
    "groveco_challenge-master/src/groveco_challenge/finder.py": {
        "StoreFinder.stores": {
            "name": "stores",
            "location": 31,
            "return": [
                "typing.Generator[models.Store, None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreFinder._vincenty_distance": {
            "name": "_vincenty_distance",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "metric": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StoreFinder._haversine_distance": {
            "name": "_haversine_distance",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "float",
                    "List['cirq.Qid']",
                    "Callable"
                ],
                "target": [
                    "int",
                    "float",
                    "str"
                ],
                "metric": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StoreFinder.get_distance": {
            "name": "get_distance",
            "location": 125,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "IO",
                    "int",
                    "bytes"
                ],
                "target": [
                    "str",
                    "IO",
                    "int",
                    "bytes"
                ],
                "metric": [
                    "str",
                    "IO",
                    "int",
                    "bytes"
                ],
                "actual": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "StoreFinder.find_stores": {
            "name": "find_stores",
            "location": 147,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str",
                    "Sequence"
                ],
                "metric": [
                    "Optional[int]",
                    "site.transfer.models.SiteID",
                    "transfer.models.User",
                    "bytes",
                    "contests.models.User"
                ],
                "actual": [
                    "str",
                    "int",
                    "bytes"
                ],
                "results": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str",
                    "Sequence"
                ]
            }
        }
    },
    "groveco_challenge-master/src/groveco_challenge/models.py": {
        "StoreResult.to_text": {
            "name": "to_text",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groveco_challenge-master/src/groveco_challenge/__init__.py": {},
    "groveco_challenge-master/src/groveco_challenge/__version__.py": {},
    "groveco_challenge-master/stubs/groveco_challenge/cli.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [],
            "arguments": {
                "zipcode": [],
                "address": [],
                "units": [],
                "output": [],
                "results": [],
                "max_workers": [],
                "actual": []
            }
        }
    },
    "groveco_challenge-master/stubs/groveco_challenge/constants.py": {},
    "groveco_challenge-master/stubs/groveco_challenge/finder.py": {
        "StoreFinder.stores": {
            "name": "stores",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StoreFinder._vincenty_distance": {
            "name": "_vincenty_distance",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [],
                "target": [],
                "metric": []
            }
        },
        "StoreFinder._haversine_distance": {
            "name": "_haversine_distance",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [],
                "target": [],
                "metric": []
            }
        },
        "StoreFinder.get_distance": {
            "name": "get_distance",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [],
                "target": [],
                "metric": [],
                "actual": []
            }
        },
        "StoreFinder.find_stores": {
            "name": "find_stores",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "metric": [],
                "actual": [],
                "results": []
            }
        },
        "StoreFinder.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [],
                "max_workers": []
            }
        },
        "StoreFinder.__ne__": {
            "name": "__ne__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StoreFinder.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StoreFinder.__lt__": {
            "name": "__lt__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StoreFinder.__le__": {
            "name": "__le__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StoreFinder.__gt__": {
            "name": "__gt__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StoreFinder.__ge__": {
            "name": "__ge__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "groveco_challenge-master/stubs/groveco_challenge/models.py": {
        "StoreResult.to_text": {
            "name": "to_text",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "groveco_challenge-master/stubs/groveco_challenge/__init__.py": {},
    "groveco_challenge-master/stubs/groveco_challenge/__version__.py": {},
    "groveco_challenge-master/tasks/docs.py": {
        "clean": {
            "name": "clean",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build_news": {
            "name": "build_news",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [],
                "draft": [],
                "yes": []
            }
        },
        "build": {
            "name": "build",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [],
                "output": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "view": {
            "name": "view",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "groveco_challenge-master/tasks/package.py": {
        "clean": {
            "name": "clean",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "format": {
            "name": "format",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build": {
            "name": "build",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "licenses": {
            "name": "licenses",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ],
                "summary": [
                    "bool",
                    "str"
                ],
                "from_classifier": [
                    "bool",
                    "str"
                ],
                "with_system": [
                    "bool",
                    "str"
                ],
                "with_authors": [
                    "bool",
                    "str"
                ],
                "with_urls": [
                    "bool",
                    "str"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "Dict[str, Any]"
                ],
                "version": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "stub": {
            "name": "stub",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "groveco_challenge-master/tasks/utils.py": {
        "get_previous_version": {
            "name": "get_previous_version",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "get_tag_content": {
            "name": "get_tag_content",
            "location": 82,
            "return": [
                "Mapping[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "get_artifact_paths": {
            "name": "get_artifact_paths",
            "location": 103,
            "return": [
                "str",
                "Type[T]",
                "Type"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "get_username_password": {
            "name": "get_username_password",
            "location": 107,
            "return": [
                "str",
                "bool",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "ctx": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "username_label": [
                    "str",
                    "List[str]"
                ],
                "password_label": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "report._get_text": {
            "name": "_get_text",
            "location": 35,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "ctx": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "level": [
                    "str",
                    "bool"
                ],
                "task_name": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "report.info": {
            "name": "info",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]"
                ],
                "ctx": [
                    "str",
                    "Union[int, str]"
                ],
                "task_name": [
                    "str",
                    "Union[int, str]"
                ],
                "text": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "report.debug": {
            "name": "debug",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]"
                ],
                "ctx": [
                    "str",
                    "Union[int, str]"
                ],
                "task_name": [
                    "str",
                    "Union[int, str]"
                ],
                "text": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "report.warning": {
            "name": "warning",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]"
                ],
                "ctx": [
                    "str",
                    "Union[int, str]"
                ],
                "task_name": [
                    "str",
                    "Union[int, str]"
                ],
                "text": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "report.warn": {
            "name": "warn",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "ctx": [
                    "str",
                    "dict"
                ],
                "task_name": [
                    "str",
                    "dict"
                ],
                "text": [
                    "str",
                    "dict"
                ]
            }
        },
        "report.error": {
            "name": "error",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]"
                ],
                "ctx": [
                    "str",
                    "Union[int, str]"
                ],
                "task_name": [
                    "str",
                    "Union[int, str]"
                ],
                "text": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "report.success": {
            "name": "success",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]"
                ],
                "ctx": [
                    "str",
                    "Union[int, str]"
                ],
                "task_name": [
                    "str",
                    "Union[int, str]"
                ],
                "text": [
                    "str",
                    "Union[int, str]"
                ]
            }
        }
    },
    "groveco_challenge-master/tasks/__init__.py": {
        "profile": {
            "name": "profile",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [],
                "filepath": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "calltree": []
            }
        },
        "build": {
            "name": "build",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "publish": {
            "name": "publish",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ],
                "test": [
                    "list",
                    "bool",
                    "str"
                ],
                "force": [
                    "bool",
                    "int",
                    "Callable"
                ],
                "draft": [
                    "list",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "groveco_challenge-master/tests/conftest.py": {
        "store_finder": {
            "name": "store_finder",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cli_runner": {
            "name": "cli_runner",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "api_mocker": {
            "name": "api_mocker",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "groveco_challenge-master/tests/strategies.py": {
        "geo_location": {
            "name": "geo_location",
            "location": 29,
            "return": [
                "dict",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "bytes",
                    "str",
                    "float"
                ]
            }
        },
        "store": {
            "name": "store",
            "location": 37,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "Callable[[str], None]",
                    "int",
                    "Optional[BaseException]"
                ]
            }
        },
        "store_result": {
            "name": "store_result",
            "location": 51,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "draw": [
                    "float",
                    "int",
                    "Callable[..., float]"
                ]
            }
        }
    },
    "groveco_challenge-master/tests/test_cli.py": {
        "test_nothing_provided": {
            "name": "test_nothing_provided",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ],
                "api_mocker": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "api_mocker": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_zip_and_address": {
            "name": "test_zip_and_address",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "api_mocker": [
                    "str",
                    "Callable"
                ],
                "address": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "zipcode": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "test_result_count": {
            "name": "test_result_count",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ],
                "api_mocker": [],
                "address": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ],
                "results": [
                    "str",
                    "click.testing.CliRunner",
                    "int"
                ]
            }
        },
        "test_address_input": {
            "name": "test_address_input",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "api_mocker": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "address": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_zipcode_input": {
            "name": "test_zipcode_input",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "api_mocker": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "zipcode": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_json_output": {
            "name": "test_json_output",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "api_mocker": [
                    "Dict[str, Sequence[str]]"
                ],
                "address": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        }
    },
    "groveco_challenge-master/tests/test_finder.py": {
        "test_stores": {
            "name": "test_stores",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "store_finder": [
                    "groveco_challenge.finder.StoreFinder",
                    "lms.lmsdb.models.Comment",
                    "aiodine.Store"
                ]
            }
        },
        "test_get_distance": {
            "name": "test_get_distance",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "store_finder": [],
                "origin": [],
                "target": [],
                "metric": [],
                "actual": []
            }
        },
        "test_find_stores": {
            "name": "test_find_stores",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "store_finder": [
                    "bool",
                    "groveco_challenge.finder.StoreFinder",
                    "str",
                    "int"
                ],
                "api_mocker": [
                    "bool",
                    "int"
                ],
                "query": [
                    "bool",
                    "groveco_challenge.finder.StoreFinder",
                    "str",
                    "int"
                ],
                "metric": [
                    "bool",
                    "groveco_challenge.finder.StoreFinder",
                    "str",
                    "int"
                ],
                "actual": [
                    "bool",
                    "groveco_challenge.finder.StoreFinder",
                    "str",
                    "int"
                ],
                "results": [
                    "bool",
                    "groveco_challenge.finder.StoreFinder",
                    "str",
                    "int"
                ]
            }
        }
    },
    "groveco_challenge-master/tests/test_models.py": {
        "test_dumps_json": {
            "name": "test_dumps_json",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "store_result": [
                    "str",
                    "Callable[[Any, Any], Any]"
                ]
            }
        },
        "test_to_text": {
            "name": "test_to_text",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "store_result": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "groveco_challenge-master/tests/__init__.py": {}
}
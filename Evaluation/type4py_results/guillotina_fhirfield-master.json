{
    "guillotina_fhirfield-master/setup.py": {},
    "guillotina_fhirfield-master/docs/conf.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/cli.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/exc.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/fhirpath.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/field.py": {
        "fhir_field_deserializer": {
            "name": "fhir_field_deserializer",
            "location": 461,
            "return": [
                "Optional[str]",
                "str",
                "Optional[bytes]",
                "Optional[int]",
                "Optional[Dict[str, Any]]",
                "Optional[Any]"
            ],
            "arguments": {
                "fhirfield": [
                    "dict",
                    "Dict[str, Any]",
                    "list"
                ],
                "value": [
                    "Optional[str]",
                    "Union[List, Tuple]",
                    "Optional[bytes]",
                    "T",
                    "Optional[Type]",
                    "str",
                    "Union[None, float, int, str]"
                ],
                "context": [
                    "str",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "fhir_field_value_serializer": {
            "name": "fhir_field_value_serializer",
            "location": 479,
            "return": [
                "str",
                "list",
                "dict"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict"
                ]
            }
        },
        "fhir_field_from_schema": {
            "name": "fhir_field_from_schema",
            "location": 499,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "resource_type": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "fhir_field_from_resource_type": {
            "name": "fhir_field_from_resource_type",
            "location": 530,
            "return": [
                "int",
                "Union[dict, None]",
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "Type",
                    "bool",
                    "dict"
                ],
                "cache": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "FhirFieldValue.foreground_origin": {
            "name": "foreground_origin",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FhirFieldValue.patch": {
            "name": "patch",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "patch_data": [
                    "dict",
                    "Dict[str, \"Outcome\"]",
                    "List[List[Any]]",
                    "Iterable",
                    "Dict[AbstractSet[str], Set[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FhirFieldValue.stringify": {
            "name": "stringify",
            "location": 90,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "prettify": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FhirFieldValue._validate_object": {
            "name": "_validate_object",
            "location": 103,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[guillotina.db.interfaces.ITransaction]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FhirFieldValue.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "FhirFieldValue.__getattr__": {
            "name": "__getattr__",
            "location": 141,
            "return": [
                "bool",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FhirFieldValue.__getstate__": {
            "name": "__getstate__",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FhirFieldValue.__setattr__": {
            "name": "__setattr__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "val": [
                    "str",
                    "dict"
                ]
            }
        },
        "FhirFieldValue.__setstate__": {
            "name": "__setstate__",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "odict": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "FhirFieldValue.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "FhirFieldValue.__repr__": {
            "name": "__repr__",
            "location": 166,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FhirFieldValue.__eq__": {
            "name": "__eq__",
            "location": 183,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "type"
                ]
            }
        },
        "FhirFieldValue.__ne__": {
            "name": "__ne__",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "FhirFieldValue.__bool__": {
            "name": "__bool__",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FhirField.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource_class": [
                    "list",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "Optional[str]",
                    "bool",
                    "IO",
                    "str",
                    "dict"
                ],
                "resource_interface": [
                    "list",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "Optional[str]",
                    "bool",
                    "IO",
                    "str",
                    "dict"
                ],
                "resource_type": [
                    "list",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "Optional[str]",
                    "bool",
                    "IO",
                    "str",
                    "dict"
                ]
            }
        },
        "FhirField.from_unicode": {
            "name": "from_unicode",
            "location": 243,
            "return": [
                "dict",
                "Optional[Dict[str, Any]]",
                "int",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "str_val": [
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "FhirField.from_dict": {
            "name": "from_dict",
            "location": 249,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "dict_value": [
                    "dict",
                    "app.server.helpers.api.ApiResponse",
                    "Optional[bytes]",
                    "Optional[object]"
                ]
            }
        },
        "FhirField._init": {
            "name": "_init",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource_class": [
                    "Optional[dict]",
                    "Optional[str]",
                    "type"
                ],
                "resource_interface": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Callable[[], Any]]",
                    "int"
                ],
                "resource_type": [
                    "str"
                ]
            }
        },
        "FhirField._pre_value_validate": {
            "name": "_pre_value_validate",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fhir_json": [
                    "str",
                    "dict",
                    "int",
                    "Pattern",
                    "list"
                ]
            }
        },
        "FhirField._from_dict": {
            "name": "_from_dict",
            "location": 387,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "dict_value": [
                    "dict",
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "FhirField._validate": {
            "name": "_validate",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "DefaultFhirFieldSchemaSerializer.field_type": {
            "name": "field_type",
            "location": 495,
            "return": [
                "List[str]",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/helpers.py": {
        "search_fhir_resource_cls": {
            "name": "search_fhir_resource_cls",
            "location": 40,
            "return": [
                "str",
                "int",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "Callable[[str], str]",
                    "IO[Any]",
                    "int"
                ],
                "cache": [
                    "bool",
                    "str",
                    "float",
                    "Optional[bool]",
                    "List[str]",
                    "Set[str]"
                ],
                "fhir_release": [
                    "str",
                    "Set[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "resource_type_to_resource_cls": {
            "name": "resource_type_to_resource_cls",
            "location": 92,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "int"
                ],
                "fhir_release": [
                    "str",
                    "Callable"
                ]
            }
        },
        "import_string": {
            "name": "import_string",
            "location": 101,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "dotted_path": [
                    "str"
                ]
            }
        },
        "parse_json_str": {
            "name": "parse_json_str",
            "location": 130,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "str_val": [
                    "str",
                    "Union[bytes, str]",
                    "Optional[str]",
                    "config.Tag"
                ],
                "encoding": [
                    "str",
                    "Dict[int, str]"
                ]
            }
        },
        "fhir_search_path_meta_info": {
            "name": "fhir_search_path_meta_info",
            "location": 151,
            "return": [
                "bool",
                "str",
                "Dict[str, Set[str]]",
                "Dict[str, Tuple[int, int]]",
                "dict",
                "Tuple[Dict[str, object], Dict[str, str]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, 'Path']"
                ]
            }
        },
        "filter_logic_in_path": {
            "name": "filter_logic_in_path",
            "location": 178,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "raw_path": [
                    "str",
                    "list",
                    "Iterator[Any]"
                ]
            }
        },
        "_translate_param_name_to_real_path_key": {
            "name": "_translate_param_name_to_real_path_key",
            "location": 213,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "translate_param_name_to_real_path": {
            "name": "translate_param_name_to_real_path",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "param_name": [
                    "str"
                ],
                "resource_type": [
                    "str"
                ]
            }
        },
        "parse_query_string": {
            "name": "parse_query_string",
            "location": 244,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, int]",
                "Dict[str, Dict[str, str]]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable[..., Awaitable[dict]]"
                ],
                "allow_none": [
                    "bool",
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "Callable"
                ]
            }
        },
        "fhir_resource_mapping": {
            "name": "fhir_resource_mapping",
            "location": 286,
            "return": [
                "bool",
                "int",
                "Mapping"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "Union[object, type]",
                    "Callable[[str], str]",
                    "IO[Any]"
                ],
                "cache": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "validate_resource_type": {
            "name": "validate_resource_type",
            "location": 324,
            "return": [
                "NoneType"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/interfaces.py": {
        "IFhirResource.as_json": {
            "name": "as_json",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "IFhirField.from_dict": {
            "name": "from_dict",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "dict_value": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "IFhirFieldValue.stringify": {
            "name": "stringify",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "prettify": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IFhirFieldValue.patch": {
            "name": "patch",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "patch_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "IFhirFieldValue.foreground_origin": {
            "name": "foreground_origin",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/mapping_types.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/patch.py": {
        "patch_fhir_base_model": {
            "name": "patch_fhir_base_model",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/query.py": {
        "has_escape_comma": {
            "name": "has_escape_comma",
            "location": 33,
            "return": [
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "build_elasticsearch_query": {
            "name": "build_elasticsearch_query",
            "location": 1352,
            "return": [
                "str",
                "AbstractSet[str]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, Any]"
                ],
                "resource_type": [
                    "str",
                    "Dict[str, Any]"
                ],
                "type_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "resource_type": [
                    "str",
                    "Type"
                ],
                "type_name": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ElasticSearchQueryBuilder._predict_field_name": {
            "name": "_predict_field_name",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchQueryBuilder._make_address_query": {
            "name": "_make_address_query",
            "location": 91,
            "return": [
                "Callable[[KT], VT]",
                "List[List[str]]",
                "float",
                "List[Exception]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "value": [
                    "List[str]",
                    "str"
                ],
                "logic_in_path": [
                    "bool",
                    "str"
                ],
                "nested": [
                    "bool",
                    "str"
                ],
                "modifier": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "float",
                    "int"
                ]
            }
        },
        "ElasticSearchQueryBuilder.make_codeableconcept_query": {
            "name": "make_codeableconcept_query",
            "location": 131,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Set[str]"
                ],
                "value": [
                    "str"
                ],
                "nested": [
                    "bool",
                    "Callable",
                    "Set[str]",
                    "Optional[str]",
                    "str"
                ],
                "modifier": [
                    "bool",
                    "Callable",
                    "Set[str]",
                    "Optional[str]",
                    "str"
                ],
                "logic_in_path": [
                    "bool",
                    "Callable",
                    "Set[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_codeableconcept_query": {
            "name": "_make_codeableconcept_query",
            "location": 195,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Callable[[str], str]"
                ],
                "value": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "List[str]"
                ],
                "nested": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "modifier": [
                    "bool",
                    "str"
                ],
                "logic_in_path": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.make_coding_query": {
            "name": "make_coding_query",
            "location": 217,
            "return": [
                "Optional[Iterable[int]]",
                "Optional[str]",
                "Optional[Sequence[Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Set[str]"
                ],
                "value": [
                    "str"
                ],
                "nested": [
                    "bool",
                    "Callable",
                    "Set[str]",
                    "Optional[str]",
                    "str"
                ],
                "modifier": [
                    "bool",
                    "Callable",
                    "Set[str]",
                    "Optional[str]",
                    "str"
                ],
                "logic_in_path": [
                    "bool",
                    "Callable",
                    "Set[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_coding_query": {
            "name": "_make_coding_query",
            "location": 266,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "str"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Callable"
                ],
                "nested": [
                    "bool",
                    "str"
                ],
                "modifier": [
                    "bool",
                    "str"
                ],
                "logic_in_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_contactpoint_query": {
            "name": "_make_contactpoint_query",
            "location": 313,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "bool",
                    "list",
                    "dict",
                    "str"
                ],
                "value": [
                    "List[str]"
                ],
                "logic_in_path": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "nested": [
                    "bool",
                    "str"
                ],
                "modifier": [
                    "bool",
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder.make_date_query": {
            "name": "make_date_query",
            "location": 343,
            "return": [
                "dict",
                "str",
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "modifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_date_query": {
            "name": "_make_date_query",
            "location": 373,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "Union[str, bytes, int]",
                    "bool"
                ],
                "modifier": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_exists_query": {
            "name": "_make_exists_query",
            "location": 414,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Union[str, bytes]"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "nested": [
                    "bool",
                    "str",
                    "int"
                ],
                "modifier": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_humanname_query": {
            "name": "_make_humanname_query",
            "location": 432,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "Optional[str]",
                    "bool"
                ],
                "nested": [
                    "bool",
                    "str",
                    "int"
                ],
                "modifier": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_identifier_query": {
            "name": "_make_identifier_query",
            "location": 459,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "Set[str]",
                    "str"
                ],
                "value": [
                    "int",
                    "str",
                    "List[str]",
                    "Callable[[float], bool]"
                ],
                "nested": [
                    "bool",
                    "str",
                    "int"
                ],
                "modifier": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_match_query": {
            "name": "_make_match_query",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "modifier": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder.make_number_query": {
            "name": "make_number_query",
            "location": 512,
            "return": [
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "modifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_number_query": {
            "name": "_make_number_query",
            "location": 538,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "mapped_definition": [
                    "bool",
                    "Tuple[int, int]",
                    "int"
                ],
                "modifier": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ElasticSearchQueryBuilder.make_quantity_query": {
            "name": "make_quantity_query",
            "location": 574,
            "return": [
                "Optional[Iterable[int]]",
                "Optional[str]",
                "Optional[Sequence[Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "value": [
                    "str"
                ],
                "modifier": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_quantity_query": {
            "name": "_make_quantity_query",
            "location": 598,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "modifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "ElasticSearchQueryBuilder.make_reference_query": {
            "name": "make_reference_query",
            "location": 644,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[float]",
                    "Dict[str, List[str]]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "nested": [
                    "str",
                    "bool"
                ],
                "modifier": [
                    "list",
                    "str",
                    "bool",
                    "int",
                    "List[List[str]]",
                    "float"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_reference_query": {
            "name": "_make_reference_query",
            "location": 689,
            "return": [
                "str",
                "bool",
                "Dict[str, Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[int]",
                    "bool",
                    "str"
                ],
                "value": [
                    "str",
                    "set"
                ],
                "nested": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_term_query": {
            "name": "_make_term_query",
            "location": 700,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "Match",
                    "Mapping[str, str]"
                ],
                "array_": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ElasticSearchQueryBuilder._make_token_query": {
            "name": "_make_token_query",
            "location": 716,
            "return": [
                "bool",
                "float",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "value": [
                    "str"
                ],
                "array_": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "modifier": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.build": {
            "name": "build",
            "location": 748,
            "return": [
                "bytes",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchQueryBuilder._build_query": {
            "name": "_build_query",
            "location": 793,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": [
                    "str",
                    "bool",
                    "Dict[Any, list]",
                    "List[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[int, str]]",
                    "Optional[Iterable[str]]"
                ],
                "modifier": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[int, str]]",
                    "Optional[Iterable[str]]"
                ],
                "query_meta": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ElasticSearchQueryBuilder.build_composite_query": {
            "name": "build_composite_query",
            "location": 865,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param_name": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder.build_token_query": {
            "name": "build_token_query",
            "location": 901,
            "return": [
                "str",
                "bool",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "raw_path": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]",
                    "int"
                ],
                "logic_in_path": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[bytes]",
                    "Optional[Dict[str, Any]]"
                ],
                "map_cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Callable",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "modifier": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "ElasticSearchQueryBuilder.build_string_query": {
            "name": "build_string_query",
            "location": 986,
            "return": [
                "dict",
                "list",
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "raw_path": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "logic_in_path": [
                    "str",
                    "TextIO",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "map_cls": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Tuple['cirq.Qid']",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "modifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.clean_params": {
            "name": "clean_params",
            "location": 1029,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchQueryBuilder.validate": {
            "name": "validate",
            "location": 1079,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticSearchQueryBuilder.validate_date": {
            "name": "validate_date",
            "location": 1130,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Optional[str]",
                    "Sequence[MutableMapping]",
                    "Collection[str]"
                ],
                "modifier": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "value": [
                    "str"
                ],
                "container": [
                    "str",
                    "Optional[str]",
                    "Sequence[MutableMapping]",
                    "Collection[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder._validate_date": {
            "name": "_validate_date",
            "location": 1147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[[float], bool]"
                ],
                "value": [
                    "str",
                    "List[bytes]",
                    "Hashable",
                    "Optional[str]",
                    "Callable[[], T]"
                ],
                "container": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[[float], bool]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.validate_token": {
            "name": "validate_token",
            "location": 1160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "modifier": [
                    "str"
                ],
                "value": [
                    "str",
                    "Callable"
                ],
                "container": [
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder._validate_token": {
            "name": "_validate_token",
            "location": 1172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str, Any]",
                    "tuple",
                    "Dict[str, str]",
                    "Optional[Callable]"
                ],
                "modifier": [
                    "str",
                    "T",
                    "bytes",
                    "float",
                    "Iterable[str]"
                ],
                "value": [
                    "list",
                    "int",
                    "List[List[object]]",
                    "List[Union[int, float]]",
                    "List[str]",
                    "bool",
                    "List[int]"
                ],
                "container": [
                    "Dict[str, Any]",
                    "tuple",
                    "Dict[str, str]",
                    "Optional[Callable]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.process_error_message": {
            "name": "process_error_message",
            "location": 1190,
            "return": [
                "str",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Exception",
                    "tuple",
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder.find_path": {
            "name": "find_path",
            "location": 1206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "param_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.resolve_query_meta": {
            "name": "resolve_query_meta",
            "location": 1219,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "param_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.get_mapped_definition": {
            "name": "get_mapped_definition",
            "location": 1296,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.is_nested_mapping": {
            "name": "is_nested_mapping",
            "location": 1305,
            "return": [
                "Type",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mapped_definition": [
                    "str"
                ]
            }
        },
        "ElasticSearchQueryBuilder.parse_prefix": {
            "name": "parse_prefix",
            "location": 1315,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "dict"
                ],
                "default": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ElasticSearchQueryBuilder.merge_query": {
            "name": "merge_query",
            "location": 1325,
            "return": [
                "str",
                "OrderedDict",
                "Dict[str, str]",
                "Union[int, float, complex]",
                "Mapping[str, Any]",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/variables.py": {
        "NO_VALUE.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/__init__.py": {
        "includeme": {
            "name": "includeme",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "dict",
                    "int",
                    "guillotina.interfaces.IContainer"
                ]
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/conftest.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/fhir_contents.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/fixtures.py": {
        "base_settings_configurator": {
            "name": "base_settings_configurator",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "bytes",
                    "bytearray"
                ]
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/helpers.py": {
        "IWrongInterface.meta": {
            "name": "meta",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/test_field.py": {
        "test_fhir_field_value.TestBrokenInterfaceObject.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/test_guillotina_fhirfield.py": {
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/test_helpers.py": {},
    "guillotina_fhirfield-master/src/guillotina_fhirfield/tests/__init__.py": {}
}
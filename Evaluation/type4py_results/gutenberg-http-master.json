{
    "gutenberg-http-master/gutenberg_http/config.py": {},
    "gutenberg-http-master/gutenberg_http/errors.py": {
        "InvalidUsage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "str"
                ],
                "status_code": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "UnknownFields.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unknown": [
                    "str",
                    "Sequence",
                    "MutableMapping[str, Any]"
                ],
                "known": [
                    "str",
                    "Sequence",
                    "bytes"
                ]
            }
        },
        "NoQuery.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoQueryValue.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MisformedQuery.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "UnknownQueryOperator.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unknown": [
                    "str",
                    "Iterable[str]",
                    "Union[str, bytes]",
                    "Optional[Union[str, Any]]",
                    "int"
                ],
                "known": [
                    "str",
                    "Iterable[str]",
                    "Union[str, bytes]",
                    "Optional[Union[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "gutenberg-http-master/gutenberg_http/logic.py": {
        "get_metadata": {
            "name": "get_metadata",
            "location": 16,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[List[int]]",
                "str"
            ],
            "arguments": {}
        },
        "db_freshness": {
            "name": "db_freshness",
            "location": 21,
            "return": [
                "float",
                "datetime.datetime",
                "bool",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "metadata": {
            "name": "metadata",
            "location": 33,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "text_id": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "include": [
                    "str",
                    "bool"
                ]
            }
        },
        "body": {
            "name": "body",
            "location": 41,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "text_id": [
                    "int",
                    "str"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "type"
                ],
                "include": [
                    "str"
                ]
            }
        }
    },
    "gutenberg-http-master/gutenberg_http/parameters.py": {
        "parse_include": {
            "name": "parse_include",
            "location": 21,
            "return": [
                "list",
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "query": [
                    "dict"
                ]
            }
        },
        "parse_search": {
            "name": "parse_search",
            "location": 35,
            "return": [
                "bool",
                "int",
                "List[str]",
                "Dict[str, Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict",
                    "set"
                ]
            }
        },
        "_parse_search_term": {
            "name": "_parse_search_term",
            "location": 45,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "query": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "gutenberg-http-master/gutenberg_http/views.py": {
        "index": {
            "name": "index",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "metadata": {
            "name": "metadata",
            "location": 23,
            "return": [
                "str",
                "bool",
                "\"PerceptionGraphPattern\""
            ],
            "arguments": {
                "text_id": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "body": {
            "name": "body",
            "location": 30,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "text_id": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 36,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict"
                ]
            }
        },
        "bad_request": {
            "name": "bad_request",
            "location": 42,
            "return": [
                "flask.Response",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "exception": [
                    "flask.Request",
                    "Dict[str, Any]",
                    "bool",
                    "Union[object, type]"
                ]
            }
        },
        "on_exception": {
            "name": "on_exception",
            "location": 48,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "healthcheck": {
            "name": "healthcheck",
            "location": 54,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "gutenberg-http-master/gutenberg_http/__init__.py": {},
    "gutenberg-http-master/gutenberg_http/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "initdb": {
            "name": "initdb",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "runserver": {
            "name": "runserver",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "port": [
                    "bool",
                    "List[str]",
                    "list",
                    "Optional[bytes]",
                    "List[Dict[str, str]]",
                    "List[Sequence[int]]",
                    "Sequence"
                ],
                "host": [
                    "bool",
                    "List[str]",
                    "list",
                    "Optional[bytes]",
                    "List[Dict[str, str]]",
                    "List[Sequence[int]]",
                    "Sequence"
                ],
                "log_level": [
                    "bool",
                    "List[str]",
                    "list",
                    "Optional[bytes]",
                    "List[Dict[str, str]]",
                    "List[Sequence[int]]",
                    "Sequence"
                ],
                "workers": [
                    "bool",
                    "List[str]",
                    "list",
                    "Optional[bytes]",
                    "List[Dict[str, str]]",
                    "List[Sequence[int]]",
                    "Sequence"
                ],
                "gunicorn": [
                    "str",
                    "List[str]"
                ],
                "config_root": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        }
    },
    "gutenberg-http-master/tests/test_logic.py": {
        "_setup_mock_query": {
            "name": "_setup_mock_query",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "mock": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "dict"
                ]
            }
        },
        "_setup_mock_query.side_effect": {
            "name": "side_effect",
            "location": 8,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "int",
                "Optional[dict]",
                "list",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "set"
                ],
                "value": [
                    "str",
                    "set"
                ]
            }
        },
        "MetadataTests.test_loads_all_metadata": {
            "name": "test_loads_all_metadata",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_metadata": []
            }
        },
        "MetadataTests.test_loads_specific_metadata": {
            "name": "test_loads_specific_metadata",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_metadata": []
            }
        },
        "BodyTests.test_body": {
            "name": "test_body",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_load_etext": []
            }
        },
        "SearchTests.test_conjunctive_query": {
            "name": "test_conjunctive_query",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_etexts": []
            }
        },
        "SearchTests.test_query_expands_fields": {
            "name": "test_query_expands_fields",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_metadata": [],
                "mock_get_etexts": []
            }
        }
    },
    "gutenberg-http-master/tests/test_parameters.py": {
        "ParseIncludeTests.test_empty_uses_default": {
            "name": "test_empty_uses_default",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseIncludeTests.test_parses_valid_includes": {
            "name": "test_parses_valid_includes",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseIncludeTests.test_bad_include_is_invalid": {
            "name": "test_bad_include_is_invalid",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_empty_is_invalid": {
            "name": "test_empty_is_invalid",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_bad_operator_is_invalid": {
            "name": "test_bad_operator_is_invalid",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_bad_field_is_invalid": {
            "name": "test_bad_field_is_invalid",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_no_value_is_invalid": {
            "name": "test_no_value_is_invalid",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_parses_correct_url_encoded_query": {
            "name": "test_parses_correct_url_encoded_query",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_parses_correct_percent_encoded_query": {
            "name": "test_parses_correct_percent_encoded_query",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_parses_correct_quoted_query": {
            "name": "test_parses_correct_quoted_query",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseSearchTests.test_parses_correct_conjunctive_query": {
            "name": "test_parses_correct_conjunctive_query",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gutenberg-http-master/tests/__init__.py": {}
}
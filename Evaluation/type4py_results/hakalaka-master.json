{
    "hakalaka-master/generate_profiles.py": {
        "generate_profiles": {
            "name": "generate_profiles",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hakalaka-master/plotstyuff.py": {},
    "hakalaka-master/run.py": {},
    "hakalaka-master/run_framework.py": {},
    "hakalaka-master/run_solution.py": {},
    "hakalaka-master/testFileWrite.py": {},
    "hakalaka-master/visualize_profile.py": {},
    "hakalaka-master/visualize_results.py": {},
    "hakalaka-master/hackathon/energy/energy_math.py": {
        "buying_price": {
            "name": "buying_price",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "selling_price": {
            "name": "selling_price",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "current_load": {
            "name": "current_load",
            "location": 32,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "str"
                ],
                "load_scaling": [
                    "int",
                    "str",
                    "Union[int, List[int]]",
                    "Union[int, float]"
                ],
                "load_scaling_prev": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "solar_produciton": {
            "name": "solar_produciton",
            "location": 43,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "int"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int"
                ],
                "solar_scaling": [
                    "int",
                    "Callable[[int], None]",
                    "Sequence[T]"
                ]
            }
        },
        "samples_to_time": {
            "name": "samples_to_time",
            "location": 52,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "List[int]"
            ],
            "arguments": {
                "sampleRate": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "List[int]"
                ],
                "sample": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "List[int]"
                ]
            }
        },
        "gen_profile": {
            "name": "gen_profile",
            "location": 57,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "sampleRate": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "float"
                ],
                "load_scaling": [
                    "IO",
                    "int",
                    "list",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "load_scaling_prev": [
                    "IO",
                    "int",
                    "list",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "solar_scaling": [
                    "IO",
                    "int",
                    "list",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "blackouts": [
                    "bool",
                    "int",
                    "float",
                    "Set[Tuple[int, int]]"
                ]
            }
        }
    },
    "hakalaka-master/hackathon/energy/rating.py": {
        "real_load": {
            "name": "real_load",
            "location": 24,
            "return": [
                "str",
                "int",
                "IO",
                "Callable[[], str]"
            ],
            "arguments": {
                "load_one": [
                    "int",
                    "float",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ],
                "load_two": [
                    "int",
                    "float",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ],
                "load_three": [
                    "int",
                    "float",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ],
                "current_load": [
                    "int",
                    "float",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ]
            }
        },
        "main_grid": {
            "name": "main_grid",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "on": [
                    "bool",
                    "str",
                    "Union[None, float, str]",
                    "Type[BaseException]"
                ],
                "real_load": [
                    "float",
                    "int",
                    "bool",
                    "bytes"
                ],
                "power_reference": [
                    "float",
                    "int",
                    "bool",
                    "bytes"
                ],
                "solar_production": [
                    "str",
                    "bool"
                ],
                "pv_mode": [
                    "str",
                    "bool"
                ]
            }
        },
        "energy_mark": {
            "name": "energy_mark",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "consumption": [
                    "float",
                    "bool",
                    "int"
                ],
                "bess_sell": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "get_physics_metrics": {
            "name": "get_physics_metrics",
            "location": 48,
            "return": [
                "int",
                "str",
                "trezor.utils.Writer",
                "dict",
                "bytes"
            ],
            "arguments": {
                "d": [
                    "hackathon.utils.utils.DataMessage",
                    "int",
                    "bool",
                    "list"
                ],
                "r": [
                    "hackathon.utils.utils.ResultsMessage",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "float",
                    "List[List[str]]"
                ],
                "spent_time": [
                    "int",
                    "Optional[float]"
                ],
                "match": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "hakalaka-master/hackathon/energy/__init__.py": {},
    "hakalaka-master/hackathon/framework/framework.py": {
        "rater": {
            "name": "rater",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "socket": [
                    "dict"
                ],
                "poller": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "data_msg": [
                    "Optional[List[Dict]]",
                    "bool",
                    "dict",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "hakalaka-master/hackathon/framework/http_server.py": {
        "prepare_dot_dir": {
            "name": "prepare_dot_dir",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResultsRequestHandler.do_GET": {
            "name": "do_GET",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hakalaka-master/hackathon/framework/__init__.py": {},
    "hakalaka-master/hackathon/solution/solution.py": {
        "countNoPower": {
            "name": "countNoPower",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "hackathon.utils.utils.DataMessage",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "IO"
                ]
            }
        },
        "calcPerc": {
            "name": "calcPerc",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "load1": [
                    "bool",
                    "str",
                    "int"
                ],
                "load2": [
                    "bool",
                    "str",
                    "int"
                ],
                "load3": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 40,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "msg": [
                    "hackathon.utils.utils.DataMessage",
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "hakalaka-master/hackathon/solution/states.py": {
        "calc_solar_state": {
            "name": "calc_solar_state",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "int",
                    "Iterator[T]",
                    "T"
                ]
            }
        }
    },
    "hakalaka-master/hackathon/solution/test.py": {},
    "hakalaka-master/hackathon/solution/unitTest.py": {
        "TestSolver.setUp": {
            "name": "setUp",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hakalaka-master/hackathon/solution/__init__.py": {},
    "hakalaka-master/hackathon/utils/control.py": {
        "Control.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_port": [
                    "Optional[float]",
                    "str"
                ],
                "in_addr": [
                    "Optional[float]",
                    "str"
                ],
                "out_port": [
                    "Optional[float]",
                    "str"
                ],
                "out_addr": [
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "Control.get_data": {
            "name": "get_data",
            "location": 30,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[T]",
                "Generator[dict, None, None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Control.push_results": {
            "name": "push_results",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Type",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hakalaka-master/hackathon/utils/utils.py": {
        "bind_sub_socket": {
            "name": "bind_sub_socket",
            "location": 113,
            "return": [],
            "arguments": {
                "address": [],
                "port": []
            }
        },
        "bind_pub_socket": {
            "name": "bind_pub_socket",
            "location": 133,
            "return": [],
            "arguments": {
                "address": [],
                "port": []
            }
        },
        "safe_int": {
            "name": "safe_int",
            "location": 148,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "safe_bool": {
            "name": "safe_bool",
            "location": 155,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "safe_path": {
            "name": "safe_path",
            "location": 159,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "write_a_result": {
            "name": "write_a_result",
            "location": 246,
            "return": [],
            "arguments": {
                "energy_mark": [],
                "performance_mark": [],
                "mg": [],
                "penal": [],
                "r_load": [],
                "pv_power": [],
                "soc_bess": [],
                "overload": [],
                "current_power": [],
                "data_msg": []
            }
        },
        "read_results": {
            "name": "read_results",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "get_latest_result": {
            "name": "get_latest_result",
            "location": 299,
            "return": [],
            "arguments": {}
        },
        "config_outs": {
            "name": "config_outs",
            "location": 305,
            "return": [],
            "arguments": {
                "args": [],
                "log_name": []
            }
        },
        "DataMessage.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "grid_status": [],
                "buying_price": [],
                "selling_price": [],
                "current_max_load": [],
                "solar_production": [],
                "bessSOC": [],
                "bessOverload": [],
                "mainGridPower": [],
                "bessPower": []
            }
        },
        "DataMessage.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultsMessage.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "data_msg": [],
                "load_one": [],
                "load_two": [],
                "load_three": [],
                "power_reference": [],
                "pv_mode": []
            }
        },
        "ResultsMessage.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultsMessage.validate": {
            "name": "validate",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.get_conf": {
            "name": "get_conf",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "Config.get_from": {
            "name": "get_from",
            "location": 230,
            "return": [],
            "arguments": {
                "cp": [],
                "section": [],
                "key": []
            }
        },
        "Config.get_dump_name": {
            "name": "get_dump_name",
            "location": 238,
            "return": [],
            "arguments": {
                "results": []
            }
        }
    },
    "hakalaka-master/hackathon/utils/__init__.py": {}
}
{
    "hardening-master/hardnet1/part-handler.py": {
        "list_types": {
            "name": "list_types",
            "location": 6,
            "return": [
                "List[Tuple[str, str]]",
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "handle_part": {
            "name": "handle_part",
            "location": 12,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "ctype": [
                    "Dict[str, Any]",
                    "List[str]",
                    "bool",
                    "Union[Callable, str]",
                    "tuple"
                ],
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "IO[Any]"
                ],
                "payload": [
                    "Dict[str, Any]",
                    "List[str]",
                    "bool",
                    "Union[Callable, str]",
                    "tuple"
                ]
            }
        }
    },
    "hardening-master/orchestrator/orchestrator/main.py": {
        "get_google_cloud_hostname": {
            "name": "get_google_cloud_hostname",
            "location": 51,
            "return": [
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "get_instance_names": {
            "name": "get_instance_names",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "render_command": {
            "name": "render_command",
            "location": 64,
            "return": [
                "str",
                "tuple",
                "int",
                "Union[List[str], str]",
                "List[str]",
                "asyncio.Task[None]"
            ],
            "arguments": {
                "fields": [
                    "List[str]",
                    "Optional[bytes]",
                    "Callable[..., AsyncIterator[T]]",
                    "Iterable[Any]",
                    "Iterable"
                ]
            }
        },
        "make_rnode_command": {
            "name": "make_rnode_command",
            "location": 68,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "advertised_hostname": [
                    "str",
                    "int"
                ]
            }
        },
        "make_rnode_bootstrap_command": {
            "name": "make_rnode_bootstrap_command",
            "location": 104,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "bootstrap_hostname": [
                    "str"
                ]
            }
        },
        "make_rnode_peer_command": {
            "name": "make_rnode_peer_command",
            "location": 110,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "bootstrap_uri": [
                    "str",
                    "int"
                ],
                "peer_hostname": [
                    "str"
                ]
            }
        },
        "get_rnode_status": {
            "name": "get_rnode_status",
            "location": 125,
            "return": [
                "Dict[str, str]",
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "hostname": [
                    "str"
                ]
            }
        },
        "Hostname.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ]
            }
        },
        "Hostname.get_instance_name": {
            "name": "get_instance_name",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hostname.get_domain": {
            "name": "get_domain",
            "location": 41,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hostname.with_instance_name": {
            "name": "with_instance_name",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "network_prefix": [
                    "str",
                    "Optional[str]"
                ],
                "new_instance_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Hostname.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hardening-master/orchestrator/orchestrator/test.py": {
        "test_hostname": {
            "name": "test_hostname",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hardening-master/orchestrator/orchestrator/__init__.py": {}
}
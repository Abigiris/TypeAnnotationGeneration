{
    "hashkernel-master/scent.py": {
        "py_files": {
            "name": "py_files",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "os_system_in_env": {
            "name": "os_system_in_env",
            "location": 20,
            "return": [
                "int",
                "str",
                "Generator"
            ],
            "arguments": {
                "e": [
                    "Type[T]",
                    "Tuple[()]",
                    "bool",
                    "Optional[Dict]",
                    "Iterable[Any]",
                    "tuple",
                    "Callable"
                ],
                "cmd": [
                    "float",
                    "List[List[str]]"
                ]
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 26,
            "return": [
                "dict",
                "int",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "include_slow": [
                    "int",
                    "Union",
                    "str",
                    "Sequence[str]",
                    "tuple",
                    "List[str]",
                    "Set[str]"
                ],
                "envs": [],
                "html": [
                    "bool",
                    "int"
                ]
            }
        },
        "execute_some_tests": {
            "name": "execute_some_tests",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "hashkernel-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/ake.py": {
        "ake": {
            "name": "ake",
            "location": 369,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "float"
                ]
            }
        },
        "LinkTimeout.__new_scale_helper__": {
            "name": "__new_scale_helper__",
            "location": 35,
            "return": [
                "int",
                "List[dict]",
                "str",
                "bytes",
                "bytearray",
                "float"
            ],
            "arguments": {}
        },
        "LinkHistorySize.__new_scale_helper__": {
            "name": "__new_scale_helper__",
            "location": 56,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "LinkIdx.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "List[str]"
                ],
                "size": [
                    "Optional[int]",
                    "Union[int, None]",
                    "int",
                    "tuple",
                    "Optional[str]",
                    "Union[int, List[\"Outcome\"]]"
                ],
                "timeout": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "LinkIdx.__int__": {
            "name": "__int__",
            "location": 93,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "Dict[str, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkIdx.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RakeLinks.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RakeLinks.add_links": {
            "name": "add_links",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Rake.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Union[str, bytes]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Rake.build_new": {
            "name": "build_new",
            "location": 236,
            "return": [
                "str",
                "Union[str, bytes]",
                "Callable[[str], None]",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "obj_type": [
                    "str",
                    "dict"
                ]
            }
        },
        "Rake.null": {
            "name": "null",
            "location": 240,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "obj_type": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Rake._build": {
            "name": "_build",
            "location": 244,
            "return": [
                "bool",
                "int",
                "Type[Any]",
                "str",
                "bytes",
                "type"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "int"
                ],
                "obj_type": [
                    "str",
                    "Type[Any]",
                    "int",
                    "type"
                ],
                "s": [
                    "bytes",
                    "str",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "Rake.obj_type": {
            "name": "obj_type",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rake.__bytes__": {
            "name": "__bytes__",
            "location": 254,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rake.__str__": {
            "name": "__str__",
            "location": 257,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rake.__hash__": {
            "name": "__hash__",
            "location": 260,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RakeSchema.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "links": [
                    "int",
                    "str",
                    "float",
                    "Sequence[int]"
                ],
                "doc": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "RakeSchema.extends": {
            "name": "extends",
            "location": 274,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Cake.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "List[Union[\"PipeChain\", str]]",
                    "bytes"
                ]
            }
        },
        "Cake.__str__": {
            "name": "__str__",
            "location": 322,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cake.__bytes__": {
            "name": "__bytes__",
            "location": 325,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cake.__hash__": {
            "name": "__hash__",
            "location": 328,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cake.from_stream": {
            "name": "from_stream",
            "location": 334,
            "return": [
                "int",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "fd": [
                    "IO[bytes]",
                    "Dict[str, List[int]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[float]",
                    "bytes"
                ]
            }
        },
        "Cake.from_bytes": {
            "name": "from_bytes",
            "location": 338,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Cake.from_file": {
            "name": "from_file",
            "location": 342,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "Dict[str, str]"
            ],
            "arguments": {
                "file": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "IO",
                    "IO[str]",
                    "IO[bytes]"
                ]
            }
        },
        "HasCake.cake": {
            "name": "cake",
            "location": 348,
            "return": [
                "Cake"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasCakeFromBytes.cake": {
            "name": "cake",
            "location": 353,
            "return": [
                "bytes",
                "int",
                "Dict[str, str]",
                "str",
                "List[str]",
                "hashkernel.caskade.CheckPointType",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RakeSchema.extends.decorate": {
            "name": "decorate",
            "location": 275,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decorated_enum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/auto_wire.py": {
        "wire_names": {
            "name": "wire_names",
            "location": 66,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "path": [
                    "Tuple[str, Tuple[int, int]]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "AutoWireRoot.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "dct": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "AutoWire.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_parent_": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "_name_": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "AutoWire._maintain_link": {
            "name": "_maintain_link",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoWire._attach_to_root": {
            "name": "_attach_to_root",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "root": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "AutoWire._wiring_factory": {
            "name": "_wiring_factory",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AutoWire._root": {
            "name": "_root",
            "location": 38,
            "return": [
                "Optional[int]",
                "Dict[str, Any]",
                "dict",
                "str",
                "List[str]",
                "Iterable[T]",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoWire._path": {
            "name": "_path",
            "location": 46,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoWire.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/base_x.py": {
        "base_x": {
            "name": "base_x",
            "location": 134,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "alphabet_id": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseX.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alphabet": [
                    "int"
                ]
            }
        },
        "BaseX.encode_int": {
            "name": "encode_int",
            "location": 50,
            "return": [
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseX._encode_int": {
            "name": "_encode_int",
            "location": 56,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Tuple[int, int]",
                    "tuple"
                ]
            }
        },
        "BaseX.encode": {
            "name": "encode",
            "location": 64,
            "return": [
                "List[str]",
                "int",
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bytes",
                    "str",
                    "Match[bytes]",
                    "T",
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "BaseX.decode_int": {
            "name": "decode_int",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseX.decode": {
            "name": "decode",
            "location": 92,
            "return": [
                "Union[bytes, bytearray]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "tuple",
                    "Sequence[T]",
                    "float"
                ]
            }
        },
        "BaseX.encode_check": {
            "name": "encode_check",
            "location": 112,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict",
                    "T"
                ]
            }
        },
        "BaseX.decode_check": {
            "name": "decode_check",
            "location": 118,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Union[str, int]]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/cli.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/crypto.py": {
        "_pss_padding": {
            "name": "_pss_padding",
            "location": 86,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "_oaep_padding": {
            "name": "_oaep_padding",
            "location": 95,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "PublicKey.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "PublicKey.__bytes__": {
            "name": "__bytes__",
            "location": 26,
            "return": [
                "str",
                "dict",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.verify": {
            "name": "verify",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "int",
                    "tuple",
                    "bool"
                ],
                "signature": [
                    "bytes",
                    "int",
                    "tuple",
                    "bool"
                ]
            }
        },
        "EncryptionKey.encrypt": {
            "name": "encrypt",
            "location": 36,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PrivateKey.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "str",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "PrivateKey.private_bytes": {
            "name": "private_bytes",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]",
                    "set",
                    "Optional[bytes]"
                ]
            }
        },
        "PrivateKey.public_key": {
            "name": "public_key",
            "location": 61,
            "return": [
                "PublicKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateKey.sign": {
            "name": "sign",
            "location": 64,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DecryptionKey.decrypt": {
            "name": "decrypt",
            "location": 69,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "ciphertext": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Algorithm.load_private_key": {
            "name": "load_private_key",
            "location": 74,
            "return": [
                "PrivateKey"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ],
                "password": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "Algorithm.load_public_key": {
            "name": "load_public_key",
            "location": 79,
            "return": [
                "PublicKey"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "str",
                    "bool",
                    "List[Tuple]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Algorithm.generate_private_key": {
            "name": "generate_private_key",
            "location": 82,
            "return": [
                "PrivateKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "RsaPublicKey.verify": {
            "name": "verify",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "dict",
                    "str"
                ],
                "signature": [
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "RsaPublicKey.encrypt": {
            "name": "encrypt",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "RsaPrivateKey.public_key": {
            "name": "public_key",
            "location": 112,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RsaPrivateKey.sign": {
            "name": "sign",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "RsaPrivateKey.decrypt": {
            "name": "decrypt",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ciphertext": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "RSA2048.load_private_key": {
            "name": "load_private_key",
            "location": 132,
            "return": [
                "str",
                "Callable",
                "Mapping[int, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ],
                "password": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "RSA2048.load_public_key": {
            "name": "load_public_key",
            "location": 135,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RSA2048.generate_private_key": {
            "name": "generate_private_key",
            "location": 138,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DsaPublicKey.verify": {
            "name": "verify",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "str",
                    "int"
                ],
                "signature": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "str",
                    "int"
                ]
            }
        },
        "DsaPrivateKey.public_key": {
            "name": "public_key",
            "location": 155,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DsaPrivateKey.sign": {
            "name": "sign",
            "location": 158,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "DSA2048.load_private_key": {
            "name": "load_private_key",
            "location": 170,
            "return": [
                "str",
                "Callable",
                "Mapping[int, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ],
                "password": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "DSA2048.load_public_key": {
            "name": "load_public_key",
            "location": 173,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DSA2048.generate_private_key": {
            "name": "generate_private_key",
            "location": 176,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/docs.py": {
        "valid_variable_name": {
            "name": "valid_variable_name",
            "location": 9,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "Content.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "List[str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Content.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.insert": {
            "name": "insert",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Optional[str]",
                    "AbstractSet[Any]",
                    "AbstractSet[T]",
                    "str",
                    "Optional[AnyStr]",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "Content.end_of_sentence": {
            "name": "end_of_sentence",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.append": {
            "name": "append",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[int]",
                    "Optional[bytes]",
                    "Optional[AnyStr]",
                    "Optional[Any]"
                ]
            }
        },
        "Content.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.format_paragraph": {
            "name": "format_paragraph",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int",
                    "float",
                    "str"
                ],
                "cutoff_width": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "Sized"
                ],
                "first_prefix": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "AbstractDocEntry.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "indent": [
                    "int",
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "content": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "AbstractDocEntry.empty": {
            "name": "empty",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "name": [
                    "str",
                    "Type"
                ]
            }
        },
        "AbstractDocEntry.detect_entry": {
            "name": "detect_entry",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[int, Dict[str, str]]",
                    "Optional[str]",
                    "Set[int]"
                ],
                "indent": [
                    "str",
                    "dict",
                    "Dict[int, Dict[str, str]]",
                    "Optional[str]",
                    "Set[int]"
                ],
                "striped": [
                    "str",
                    "Optional[str]"
                ],
                "allowed_keys": [
                    "bool",
                    "str"
                ]
            }
        },
        "AbstractDocEntry.init_parse": {
            "name": "init_parse",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocEntry.collect_content": {
            "name": "collect_content",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "curr_indent": [
                    "str",
                    "Tuple[float, float, float]"
                ],
                "striped": [
                    "List[str]",
                    "int",
                    "list",
                    "Tuple[int]",
                    "List[int]",
                    "str",
                    "List[List[Any]]"
                ]
            }
        },
        "AbstractDocEntry.ensure_parse": {
            "name": "ensure_parse",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "doc_entry": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "VariableDocEntry._init_parse": {
            "name": "_init_parse",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDocEntry.format": {
            "name": "format",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "Placeholder.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ],
                "key": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "T",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Placeholder.format": {
            "name": "format",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var_groups": [
                    "Match[bytes]",
                    "Dict[str, int]",
                    "int",
                    "range",
                    "\"Range[T]\""
                ]
            }
        },
        "GroupOfVariables.placeholder": {
            "name": "placeholder",
            "location": 169,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupOfVariables._init_parse": {
            "name": "_init_parse",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupOfVariables.keys": {
            "name": "keys",
            "location": 196,
            "return": [
                "List[str]",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupOfVariables.format": {
            "name": "format",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "Type[T]",
                    "str"
                ]
            }
        },
        "GroupOfVariables.__getitem__": {
            "name": "__getitem__",
            "location": 207,
            "return": [
                "tuple",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "DocStringTemplate.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Optional[List[str]]"
                ],
                "keys_expected": [
                    "bool",
                    "str",
                    "Optional[tuple]",
                    "List[str]"
                ]
            }
        },
        "DocStringTemplate.format": {
            "name": "format",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DocStringTemplate.doc": {
            "name": "doc",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocEntry.detect_entry.check_if_key_allowed": {
            "name": "check_if_key_allowed",
            "location": 117,
            "return": [
                "List[str]",
                "bool",
                "tuple",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/executible.py": {
        "ExecutibleFactory.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "dct": [
                    "str",
                    "Sequence[str]",
                    "Sequence[List[Any]]",
                    "Type[T]"
                ]
            }
        },
        "ExecutibleFactory.exec_factory": {
            "name": "exec_factory",
            "location": 41,
            "return": [
                "bool",
                "Mapping"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "bool",
                    "Callable",
                    "\"TransactionModel\""
                ]
            }
        },
        "Executible.___factory__": {
            "name": "___factory__",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Executible.run": {
            "name": "run",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Executible.invoke": {
            "name": "invoke",
            "location": 73,
            "return": [
                "typing.Generator[typing.Any, None, None]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "Function.__factory__": {
            "name": "__factory__",
            "location": 99,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Function.parse": {
            "name": "parse",
            "location": 103,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type"
                ],
                "fn": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "Function.__call__": {
            "name": "__call__",
            "location": 112,
            "return": [
                "Optional[int]",
                "Optional[Iterable[Any]]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.run": {
            "name": "run",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Executible.___factory__.build_it": {
            "name": "build_it",
            "location": 56,
            "return": [],
            "arguments": {
                "o": [
                    "Exception",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/hashing.py": {
        "shard_name_int": {
            "name": "shard_name_int",
            "location": 89,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "num": [
                    "int",
                    "list",
                    "Union[int, str]",
                    "Union[int, float]",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "decode_shard": {
            "name": "decode_shard",
            "location": 101,
            "return": [
                "Union[bytes, bytearray]",
                "bool",
                "bytearray",
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_it_shard": {
            "name": "is_it_shard",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "shard_name": [
                    "List[str]",
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "list",
                    "Tuple[str]",
                    "int"
                ],
                "max_num": [
                    "int",
                    "Callable[[], float]"
                ]
            }
        },
        "shard_based_on_two_bites": {
            "name": "shard_based_on_two_bites",
            "location": 144,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "digest": [
                    "int",
                    "bytes",
                    "float",
                    "Container[int]",
                    "tuple"
                ],
                "base": [
                    "int",
                    "bytes",
                    "float",
                    "Container[int]",
                    "tuple"
                ]
            }
        },
        "B36_Mixin.from_b36": {
            "name": "from_b36",
            "location": 32,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "B36_Mixin.to_b36": {
            "name": "to_b36",
            "location": 35,
            "return": [
                "bool",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesOrderingMixin.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "bytearray",
                    "str"
                ]
            }
        },
        "BytesOrderingMixin.__lt__": {
            "name": "__lt__",
            "location": 47,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Hasher.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_update": [
                    "int",
                    "slice"
                ]
            }
        },
        "Hasher.update": {
            "name": "update",
            "location": 70,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "bytes",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "Hasher.update_from_stream": {
            "name": "update_from_stream",
            "location": 76,
            "return": [
                "bool",
                "str",
                "List[Dict]",
                "Mapping[str, Any]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "fd": [
                    "int",
                    "bytes"
                ],
                "chunk_size": [
                    "int",
                    "str"
                ]
            }
        },
        "Hasher.digest": {
            "name": "digest",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaltedSha.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_digest": [
                    "str",
                    "Optional[int]",
                    "Union[int, float]"
                ],
                "_salt": [
                    "str",
                    "Optional[int]",
                    "Union[int, float]"
                ]
            }
        },
        "SaltedSha.from_secret": {
            "name": "from_secret",
            "location": 193,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "secret": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SaltedSha.check_secret": {
            "name": "check_secret",
            "location": 200,
            "return": [
                "List[str]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "bytes",
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "SaltedSha.__str__": {
            "name": "__str__",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InetAddress.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "InetAddress.__str__": {
            "name": "__str__",
            "location": 220,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.signature_size": {
            "name": "signature_size",
            "location": 225,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.sign": {
            "name": "sign",
            "location": 228,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Signer.validate": {
            "name": "validate",
            "location": 231,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes",
                    "int",
                    "tuple",
                    "bool"
                ],
                "signature": [
                    "bytes",
                    "int",
                    "tuple",
                    "bool"
                ]
            }
        },
        "HasherSigner.signature_size": {
            "name": "signature_size",
            "location": 277,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasherSigner.init": {
            "name": "init",
            "location": 280,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "HasherSigner.sign": {
            "name": "sign",
            "location": 284,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "dict",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "hashkernel.caskade.CheckPointType",
                    "str"
                ]
            }
        },
        "HasherSigner.validate": {
            "name": "validate",
            "location": 289,
            "return": [
                "list",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "str",
                    "bytes",
                    "Optional[dict]",
                    "int",
                    "bool"
                ],
                "signature": [
                    "str",
                    "bytes",
                    "Optional[dict]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/kernel.py": {
        "start_reactor": {
            "name": "start_reactor",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "logic": [
                    "Mapping[str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "EndPoint.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "end_point": [
                    "Optional[Callable]",
                    "str"
                ],
                "host": [
                    "int",
                    "dict",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "Kernel.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logic": [
                    "str",
                    "List[str]",
                    "Tuple[Any, Any]"
                ],
                "session_id": [
                    "str",
                    "Set[int]",
                    "Optional[int]",
                    "int"
                ],
                "end_point": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/logic.py": {
        "MoldVar._initialize": {
            "name": "_initialize",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoldVar.set_input": {
            "name": "set_input",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "link": [
                    "Tuple[str, dict]",
                    "Optional[List[str]]",
                    "Iterable[Tuple[str, dict]]",
                    "int"
                ]
            }
        },
        "MoldVar.add_backlink": {
            "name": "add_backlink",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "back_link": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TaskVar._initialize": {
            "name": "_initialize",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EdgeMold.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_parent_": [
                    "str"
                ],
                "_name_": [
                    "str"
                ]
            }
        },
        "EdgeMold._wiring_factory": {
            "name": "_wiring_factory",
            "location": 40,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "name": [
                    "str",
                    "Union[str, 'Path']"
                ]
            }
        },
        "EdgeMold._validate": {
            "name": "_validate",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Retry.decrement_retry": {
            "name": "decrement_retry",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_fn_": [
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Task._wiring_factory": {
            "name": "_wiring_factory",
            "location": 74,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Union[str, 'Path']"
                ]
            }
        },
        "Task.set_retry": {
            "name": "set_retry",
            "location": 83,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool",
                    "float"
                ]
            }
        },
        "Task._validate": {
            "name": "_validate",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lb": [
                    "BaseException",
                    "int"
                ]
            }
        },
        "DagMeta.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[List[str]]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "dct": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "HashLogic.from_module": {
            "name": "from_module",
            "location": 144,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Type",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "List[Tuple[str, str]]",
                    "type",
                    "Exception"
                ],
                "module": [
                    "str",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/log_box.py": {
        "LogBox.add": {
            "name": "add",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "list",
                    "str"
                ],
                "msg": [
                    "list",
                    "str"
                ]
            }
        },
        "LogBox.info": {
            "name": "info",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "LogBox.warn": {
            "name": "warn",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "LogBox.error": {
            "name": "error",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LogBox.has_errors": {
            "name": "has_errors",
            "location": 54,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogBox.has_level": {
            "name": "has_level",
            "location": 57,
            "return": [
                "List[str]",
                "list",
                "float",
                "List[Tuple[str, int]]",
                "Set[int]",
                "str",
                "Sequence[object]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "List['world.PerceivedNoise']",
                    "Callable",
                    "float",
                    "Union[int, float]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/mold.py": {
        "typing_factory": {
            "name": "typing_factory",
            "location": 347,
            "return": [],
            "arguments": {
                "o": [
                    "str",
                    "Optional[str]",
                    "BaseException"
                ]
            }
        },
        "Conversion.needs_flator": {
            "name": "needs_flator",
            "location": 60,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.produces_object": {
            "name": "produces_object",
            "location": 63,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flator.is_applied": {
            "name": "is_applied",
            "location": 74,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable",
                    "T",
                    "Type[Any]"
                ]
            }
        },
        "Flator.inflate": {
            "name": "inflate",
            "location": 78,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Optional[Exception]",
                    "List[T]"
                ],
                "cls": [
                    "str",
                    "Optional[Exception]",
                    "List[T]"
                ]
            }
        },
        "Flator.deflate": {
            "name": "deflate",
            "location": 82,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "ClassRef.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls_or_str": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "ClassRef.matches": {
            "name": "matches",
            "location": 137,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "ClassRef.convert": {
            "name": "convert",
            "location": 140,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "dict",
                    "Iterable[str]"
                ],
                "direction": [
                    "str",
                    "T",
                    "List[int]",
                    "Callable[[dict], None]",
                    "List[str]"
                ],
                "flator": [
                    "str",
                    "Callable[[dict], None]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ClassRef.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Typing.__factory__": {
            "name": "__factory__",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Typing.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val_cref": [
                    "int",
                    "bool",
                    "float"
                ],
                "collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Typing.convert": {
            "name": "convert",
            "location": 192,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Union[str, bool]"
                ],
                "direction": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Union[str, bool]"
                ],
                "flator": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Union[str, bool]"
                ]
            }
        },
        "Typing.name": {
            "name": "name",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "type",
                    "Type"
                ]
            }
        },
        "Typing.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionalTyping.validate": {
            "name": "validate",
            "location": 206,
            "return": [
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "OptionalTyping.default": {
            "name": "default",
            "location": 209,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiredTyping.validate": {
            "name": "validate",
            "location": 214,
            "return": [
                "float",
                "int",
                "str",
                "Callable",
                "Dict[str, str]",
                "Awaitable[Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Match",
                    "int",
                    "str",
                    "Match[str]"
                ]
            }
        },
        "RequiredTyping.default": {
            "name": "default",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DictTyping.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val_cref": [
                    "str",
                    "bool",
                    "int"
                ],
                "key_cref": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DictTyping.convert": {
            "name": "convert",
            "location": 226,
            "return": [
                "dict",
                "int",
                "List[int]",
                "Mapping[int, str]",
                "Union[Dict, List]"
            ],
            "arguments": {
                "self": [],
                "in_v": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "Union[str, bytes]"
                ],
                "direction": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "Union[str, bytes]"
                ],
                "flator": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "Union[str, bytes]"
                ]
            }
        },
        "DictTyping.validate": {
            "name": "validate",
            "location": 236,
            "return": [
                "List[str]",
                "str",
                "float",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "DictTyping.__str__": {
            "name": "__str__",
            "location": 239,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictTyping.default": {
            "name": "default",
            "location": 242,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListTyping.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val_cref": [
                    "float",
                    "int",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "ListTyping.convert": {
            "name": "convert",
            "location": 250,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "in_v": [
                    "int",
                    "list",
                    "bytes",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ],
                "direction": [
                    "int",
                    "list",
                    "bytes",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ],
                "flator": [
                    "int",
                    "list",
                    "bytes",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ]
            }
        },
        "ListTyping.validate": {
            "name": "validate",
            "location": 255,
            "return": [
                "list",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "ListTyping.default": {
            "name": "default",
            "location": 258,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrEntry.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "typing": [
                    "str",
                    "Optional[Dict[Hashable, Any]]"
                ],
                "default": [
                    "bool",
                    "Iterable[Any]",
                    "Optional[bool]",
                    "type"
                ]
            }
        },
        "AttrEntry.required": {
            "name": "required",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrEntry.convert": {
            "name": "convert",
            "location": 313,
            "return": [
                "bool",
                "Optional[List[float]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "int",
                    "T",
                    "Optional",
                    "Callable"
                ],
                "direction": [
                    "Union[str, List]",
                    "T",
                    "str"
                ],
                "flator": [
                    "str",
                    "List[Mapping]",
                    "List[int]",
                    "T",
                    "list",
                    "int"
                ]
            }
        },
        "AttrEntry.validate": {
            "name": "validate",
            "location": 333,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "AttrEntry.__str__": {
            "name": "__str__",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrEntry.is_optional": {
            "name": "is_optional",
            "location": 343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mold.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "o": [
                    "dict"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Mold.syncup_dst_and_attrs": {
            "name": "syncup_dst_and_attrs",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "str",
                    "bool"
                ],
                "section_name": [
                    "str"
                ]
            }
        },
        "Mold.__factory__": {
            "name": "__factory__",
            "location": 453,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Mold.add_hints": {
            "name": "add_hints",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hints": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "Mold.set_defaults": {
            "name": "set_defaults",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "str",
                    "List[str]",
                    "T",
                    "Sequence[str]",
                    "Callable"
                ]
            }
        },
        "Mold.get_defaults_from_cls": {
            "name": "get_defaults_from_cls",
            "location": 467,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "Mold.get_defaults_from_fn": {
            "name": "get_defaults_from_fn",
            "location": 474,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Mold.add_entry": {
            "name": "add_entry",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "bytes"
                ]
            }
        },
        "Mold.__to_json__": {
            "name": "__to_json__",
            "location": 488,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mold.check_overlaps": {
            "name": "check_overlaps",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "int",
                    "Union[str, bytes]",
                    "Optional[List]",
                    "str",
                    "dict",
                    "Optional[int]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Mold.find_overlaps": {
            "name": "find_overlaps",
            "location": 498,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[Tuple[float, Any]]"
                ]
            }
        },
        "Mold.build_val_dict": {
            "name": "build_val_dict",
            "location": 505,
            "return": [
                "dict",
                "int",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "json_values": [
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "Optional[datetime.datetime]",
                    "Dict[str, float]",
                    "Tuple[str, str]"
                ]
            }
        },
        "Mold.mold_dict": {
            "name": "mold_dict",
            "location": 509,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]"
                ],
                "direction": [
                    "Dict[str, Any]",
                    "MutableMapping",
                    "bytes"
                ],
                "flator": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Mold.dict_to_row": {
            "name": "dict_to_row",
            "location": 533,
            "return": [
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "dict",
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "Optional[dict]",
                    "Dict[str, str]"
                ]
            }
        },
        "Mold.mold_row": {
            "name": "mold_row",
            "location": 536,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "dict",
                    "List[List[Any]]",
                    "Dict[AbstractSet[str], Set[Any]]"
                ],
                "direction": [
                    "Union[bytes, bytearray]",
                    "dict",
                    "int",
                    "bytes",
                    "Tuple[int, int, bytearray]"
                ],
                "flator": [
                    "Union[bytes, bytearray]",
                    "dict",
                    "int",
                    "bytes",
                    "Tuple[int, int, bytearray]"
                ]
            }
        },
        "Mold.assert_row": {
            "name": "assert_row",
            "location": 548,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "Mold.set_attrs": {
            "name": "set_attrs",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bool",
                    "T",
                    "Iterable",
                    "Optional[str]"
                ],
                "target": [
                    "int",
                    "Callable",
                    "Union[str, Sequence[str]]",
                    "bytes",
                    "Tuple[str, str]",
                    "List[int]",
                    "Tuple[str, str, str, str]"
                ]
            }
        },
        "Mold.pull_attrs": {
            "name": "pull_attrs",
            "location": 556,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "from_obj": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "Mold.deflate": {
            "name": "deflate",
            "location": 562,
            "return": [
                "Mapping",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "List[str]",
                    "Sequence[Any]",
                    "Iterable[T_co]",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "flator": [
                    "bool",
                    "List[str]",
                    "Sequence[Any]",
                    "Iterable[T_co]",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "Mold.inflate": {
            "name": "inflate",
            "location": 565,
            "return": [
                "Mapping",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "List[str]",
                    "Sequence[Any]",
                    "Iterable[T_co]",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "flator": [
                    "bool",
                    "List[str]",
                    "Sequence[Any]",
                    "Iterable[T_co]",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "Mold.wrap_result": {
            "name": "wrap_result",
            "location": 568,
            "return": [
                "str",
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Type['DataclassT']",
                    "Dict[str, Any]",
                    "dict",
                    "Sequence[Tuple[float, Any]]",
                    "str",
                    "type"
                ]
            }
        },
        "Mold.is_single_return": {
            "name": "is_single_return",
            "location": 576,
            "return": [
                "bool",
                "int",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Iterable[Any]]",
                "dict",
                "Optional[Match]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mold.is_empty": {
            "name": "is_empty",
            "location": 579,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionMold.__init__": {
            "name": "__init__",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "aioredis.parser.PyReader",
                    "Mapping[str, Any]",
                    "core_lib.core.parser.ParsingContext"
                ]
            }
        },
        "FunctionMold.__call__": {
            "name": "__call__",
            "location": 659,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        }
    },
    "hashkernel-master/hashkernel/otable.py": {
        "get_row_id": {
            "name": "get_row_id",
            "location": 41,
            "return": [
                "str",
                "tuple",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "row_id": [
                    "int"
                ]
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[bool]",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "dct": [
                    "str",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "Template.__getitem__": {
            "name": "__getitem__",
            "location": 21,
            "return": [
                "float",
                "Type[BaseException]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, str]"
                ],
                "item": [
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]"
                ]
            }
        },
        "ORow._row_id": {
            "name": "_row_id",
            "location": 37,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OTable.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Optional[int]",
                    "Optional",
                    "Optional[str]"
                ],
                "mold": [
                    "str",
                    "Dict[str, List[str]]",
                    "Set[str]"
                ]
            }
        },
        "OTable.add_row": {
            "name": "add_row",
            "location": 139,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "List[List[str]]",
                    "list",
                    "bool",
                    "Optional[Iterable[str]]",
                    "int"
                ]
            }
        },
        "OTable.__len__": {
            "name": "__len__",
            "location": 149,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OTable.__getitem__": {
            "name": "__getitem__",
            "location": 152,
            "return": [
                "int",
                "bool",
                "float",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "row_id": [
                    "int",
                    "str"
                ]
            }
        },
        "OTable.find_invalid_keys": {
            "name": "find_invalid_keys",
            "location": 180,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "bytes",
                "Sequence[Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "row_id": [
                    "int",
                    "str"
                ]
            }
        },
        "OTable.find_invalid_rows": {
            "name": "find_invalid_rows",
            "location": 188,
            "return": [
                "Iterator[Collection[T]]",
                "list",
                "Set[int]",
                "Iterable[int]",
                "List[Tuple[str, int]]",
                "str",
                "\"ImmutableSet[T]\"",
                "Sequence[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OTable.new_row": {
            "name": "new_row",
            "location": 195,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OTable.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OTable.__str__.gen": {
            "name": "gen",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "OTable.__getitem__._MoldedRow._row_id": {
            "name": "_row_id",
            "location": 157,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OTable.__getitem__._MoldedRow.__getattr__": {
            "name": "__getattr__",
            "location": 160,
            "return": [
                "Sequence[Sequence[str]]",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable[[None], Any]",
                    "int",
                    "Hashable",
                    "Optional[str]"
                ]
            }
        },
        "OTable.__getitem__._MoldedRow.__setattr__": {
            "name": "__setattr__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "OTable.__getitem__._MoldedRow.__getitem__": {
            "name": "__getitem__",
            "location": 166,
            "return": [
                "str",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "OTable.__getitem__._MoldedRow.__setitem__": {
            "name": "__setitem__",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/packer.py": {
        "build_code_enum_packer": {
            "name": "build_code_enum_packer",
            "location": 337,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "code_enum_cls": [
                    "int",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "unpack_constraining_greed": {
            "name": "unpack_constraining_greed",
            "location": 341,
            "return": [
                "str",
                "Optional[int]",
                "datetime.datetime"
            ],
            "arguments": {
                "buffer": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "greedy_packer": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "named_tuple_packer": {
            "name": "named_tuple_packer",
            "location": 365,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {}
        },
        "ensure_packer": {
            "name": "ensure_packer",
            "location": 445,
            "return": [
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "o": [
                    "Iterable[Any]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[int]"
                ],
                "packerlib": []
            }
        },
        "NeedMoreBytes.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "how_much": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NeedMoreBytes.check_buffer": {
            "name": "check_buffer",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "buff_len": [
                    "Optional[int]",
                    "bool",
                    "Type",
                    "str"
                ],
                "fragment_end": [
                    "Optional[int]",
                    "bool",
                    "Type",
                    "str"
                ]
            }
        },
        "Packer.fixed_size": {
            "name": "fixed_size",
            "location": 30,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packer.pack": {
            "name": "pack",
            "location": 34,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "Packer.unpack": {
            "name": "unpack",
            "location": 38,
            "return": [
                "typing.Tuple[typing.Any, builtins.int]"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "offset": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Packer.unpack_whole_buffer": {
            "name": "unpack_whole_buffer",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "bool"
                ]
            }
        },
        "AdjustableSizePacker.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "AdjustableSizePacker.pack": {
            "name": "pack",
            "location": 103,
            "return": [
                "str",
                "int",
                "bytearray",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float"
                ]
            }
        },
        "AdjustableSizePacker.unpack": {
            "name": "unpack",
            "location": 116,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "list",
                    "Sequence[T]",
                    "List[str]",
                    "List[int]"
                ],
                "offset": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "List[List[int]]"
                ]
            }
        },
        "SizedPacker.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size_packer": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "SizedPacker.pack": {
            "name": "pack",
            "location": 142,
            "return": [
                "Tuple[float, float]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "list",
                    "bytes",
                    "List[bytes]",
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "Sequence[int]",
                    "Sequence[T]"
                ]
            }
        },
        "SizedPacker.unpack": {
            "name": "unpack",
            "location": 145,
            "return": [
                "dict",
                "List[List[int]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Dict[str, Any]",
                    "bool",
                    "buffer.Buffer",
                    "bytearray"
                ],
                "offset": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "GreedyBytesPacker.pack": {
            "name": "pack",
            "location": 164,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "GreedyBytesPacker.unpack": {
            "name": "unpack",
            "location": 167,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "list",
                    "str",
                    "BinaryIO",
                    "List[bool]"
                ],
                "offset": [
                    "int",
                    "bool",
                    "Callable[..., bool]",
                    "str",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "FixedSizePacker.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "FixedSizePacker.pack": {
            "name": "pack",
            "location": 183,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "list",
                    "Union[int, float]",
                    "bytes"
                ]
            }
        },
        "FixedSizePacker.unpack": {
            "name": "unpack",
            "location": 187,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "List[int]"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "TypePacker.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Set[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Union[int, float]"
                ],
                "fmt": [
                    "bytes",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "TypePacker.pack": {
            "name": "pack",
            "location": 204,
            "return": [
                "Iterable[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Tuple[int]",
                    "Callable"
                ]
            }
        },
        "TypePacker.unpack": {
            "name": "unpack",
            "location": 207,
            "return": [
                "int",
                "tuple",
                "float",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "bytes",
                    "List[int]",
                    "str"
                ],
                "offset": [
                    "float",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ProxyPacker.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[int]",
                    "bool",
                    "Type",
                    "Type[T]",
                    "str"
                ],
                "packer": [
                    "int",
                    "bool",
                    "List[int]",
                    "float"
                ],
                "to_proxy": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "to_cls": [
                    "bool",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "datetime.timedelta",
                    "Callable",
                    "Optional[bool]",
                    "Union[None, int]"
                ]
            }
        },
        "ProxyPacker.pack": {
            "name": "pack",
            "location": 235,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "ProxyPacker.unpack": {
            "name": "unpack",
            "location": 238,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Optional[int]",
                    "int"
                ],
                "offset": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "GreedyListPacker.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_cls": [
                    "List[float]",
                    "Dict[str, Any]"
                ],
                "item_packer": [
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "str",
                    "Type[T]",
                    "Optional[Union[str, Any]]"
                ],
                "packer_lib": [
                    "dict",
                    "str"
                ]
            }
        },
        "GreedyListPacker.pack": {
            "name": "pack",
            "location": 263,
            "return": [
                "int",
                "bool",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float"
                ]
            }
        },
        "GreedyListPacker.unpack": {
            "name": "unpack",
            "location": 266,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "List[float]",
                    "List[int]",
                    "list",
                    "bool",
                    "str",
                    "int"
                ],
                "offset": [
                    "List[int]",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "TuplePacker.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TuplePacker.pack": {
            "name": "pack",
            "location": 288,
            "return": [
                "int",
                "BinaryIO",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "bytes"
                ]
            }
        },
        "TuplePacker.unpack": {
            "name": "unpack",
            "location": 295,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "offset": [
                    "bytearray"
                ]
            }
        },
        "named_tuple_packer.factory": {
            "name": "factory",
            "location": 366,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "float",
                "str"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Collection[str]",
                    "bytes",
                    "T",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "PackerLibrary.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next_lib": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PackerLibrary.__contains__": {
            "name": "__contains__",
            "location": 382,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Optional[T]",
                    "Dict[str, Dict[str, str]]",
                    "Iterable[str]",
                    "int",
                    "bool",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "PackerLibrary.__getitem__": {
            "name": "__getitem__",
            "location": 385,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "dict",
                    "Union[Type, Tuple[Type, ...]]"
                ]
            }
        },
        "PackerLibrary.get_packer_by_type": {
            "name": "get_packer_by_type",
            "location": 388,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[type]",
                    "Type[T]",
                    "dict",
                    "str"
                ]
            }
        },
        "PackerLibrary.resolve": {
            "name": "resolve",
            "location": 403,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key_cls": [
                    "Optional[bool]",
                    "int",
                    "str"
                ]
            }
        },
        "PackerLibrary.register": {
            "name": "register",
            "location": 414,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "packer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PackerLibrary.register_packer": {
            "name": "register_packer",
            "location": 428,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "type",
                    "List[str]",
                    "Union[int, slice]",
                    "KT"
                ],
                "packer": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "PackerLibrary.register_all": {
            "name": "register_all",
            "location": 439,
            "return": [
                "int",
                "datetime.timedelta",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackerDefinitions.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PackerDefinitions.build_lib": {
            "name": "build_lib",
            "location": 478,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "next_lib": [
                    "bool"
                ]
            }
        },
        "PackerDefinitions.__iter__": {
            "name": "__iter__",
            "location": 481,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackerLibrary.register.decorate": {
            "name": "decorate",
            "location": 422,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "key_cls": [
                    "str",
                    "Optional[bytes]",
                    "datetime.datetime",
                    "Sequence[Any]",
                    "bytes"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/plugins.py": {
        "query_plugins": {
            "name": "query_plugins",
            "location": 4,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Dict[str, Any]"
                ],
                "ep_name": [
                    "str",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "load_plugins": {
            "name": "load_plugins",
            "location": 8,
            "return": [
                "Optional[dict]",
                "list",
                "List[Dict[str, str]]",
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "ep_name": [
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/smattr.py": {
        "build_named_tuple_packer": {
            "name": "build_named_tuple_packer",
            "location": 237,
            "return": [
                "str",
                "Iterable[str]",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "Tuple[Type]"
                ],
                "mapper": [
                    "bool",
                    "type"
                ]
            }
        },
        "_AnnotationsProcessor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "dct": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ]
            }
        },
        "SmAttr.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_vals_": [
                    "int",
                    "bool"
                ]
            }
        },
        "SmAttr.__to_json__": {
            "name": "__to_json__",
            "location": 184,
            "return": [
                "Hashable",
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmAttr.__to_dict__": {
            "name": "__to_dict__",
            "location": 187,
            "return": [
                "dict",
                "float",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmAttr.__to_tuple__": {
            "name": "__to_tuple__",
            "location": 190,
            "return": [
                "int",
                "Iterable",
                "Optional[dict]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonWrap.unwrap": {
            "name": "unwrap",
            "location": 198,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonWrap.wrap": {
            "name": "wrap",
            "location": 202,
            "return": [
                "Type"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Tuple[int, int, int]"
                ],
                "o": [
                    "KT",
                    "int",
                    "str"
                ]
            }
        },
        "BytesWrap.unwrap": {
            "name": "unwrap",
            "location": 218,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesWrap.wrap": {
            "name": "wrap",
            "location": 222,
            "return": [
                "Type"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int"
                ],
                "o": [
                    "bytes",
                    "int"
                ]
            }
        },
        "BytesWrap.__bytes__": {
            "name": "__bytes__",
            "location": 225,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesWrap.___factory__": {
            "name": "___factory__",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "BytesWrap.___factory__.factory": {
            "name": "factory",
            "location": 229,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "input": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/time.py": {
        "nanotime2datetime": {
            "name": "nanotime2datetime",
            "location": 22,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "nt": [
                    "nanotime.nanotime",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "nanotime_now": {
            "name": "nanotime_now",
            "location": 30,
            "return": [
                "int",
                "datetime.timedelta",
                "datetime.datetime",
                "float",
                "datetime.timezone"
            ],
            "arguments": {}
        },
        "delta2str": {
            "name": "delta2str",
            "location": 41,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "td": [
                    "datetime.timedelta",
                    "str",
                    "float"
                ]
            }
        },
        "delta2str.build_s": {
            "name": "build_s",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "Timeout.__new_scale_helper__": {
            "name": "__new_scale_helper__",
            "location": 168,
            "return": [
                "int",
                "List[dict]",
                "str",
                "bytes",
                "bytearray",
                "float"
            ],
            "arguments": {}
        },
        "Timeout.resolve": {
            "name": "resolve",
            "location": 178,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Collection[str]",
                    "T",
                    "str",
                    "hashkernel.packer.Packer",
                    "Dict[str, Any]"
                ],
                "ttl": [
                    "Callable",
                    "float"
                ]
            }
        },
        "Timeout.timedelta": {
            "name": "timedelta",
            "location": 186,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.nanoseconds": {
            "name": "nanoseconds",
            "location": 189,
            "return": [
                "str",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.expires": {
            "name": "expires",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "datetime.datetime",
                    "float",
                    "int",
                    "type",
                    "str"
                ]
            }
        },
        "Timeout.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTL.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ttl": [
                    "Optional[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Optional[int]"
                ]
            }
        },
        "TTL.__eq__": {
            "name": "__eq__",
            "location": 288,
            "return": [
                "str",
                "type",
                "bytes",
                "List[dict]",
                "dict",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "TTL.__lt__": {
            "name": "__lt__",
            "location": 291,
            "return": [
                "str",
                "type",
                "bytes",
                "List[dict]",
                "dict",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "TTL.__int__": {
            "name": "__int__",
            "location": 294,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTL.get_extra_bit": {
            "name": "get_extra_bit",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bit": [
                    "str",
                    "bool"
                ]
            }
        },
        "TTL.set_extra_bit": {
            "name": "set_extra_bit",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bit": [
                    "float",
                    "int"
                ],
                "v": [
                    "float",
                    "int"
                ]
            }
        },
        "TTL.expires": {
            "name": "expires",
            "location": 303,
            "return": [
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int",
                    "Collection[int]",
                    "list"
                ]
            }
        },
        "TTL.__str__": {
            "name": "__str__",
            "location": 306,
            "return": [
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTL.__repr__": {
            "name": "__repr__",
            "location": 309,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTL.all": {
            "name": "all",
            "location": 313,
            "return": [
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list",
                    "Callable[[Any], T]",
                    "T"
                ]
            }
        },
        "nano_ttl.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t": [
                    "bytes",
                    "ByteString",
                    "int",
                    "dict"
                ],
                "ttl": [
                    "Optional[int]",
                    "T",
                    "Optional[List[Any]]",
                    "Optional[dict]",
                    "Optional[T]",
                    "Hashable",
                    "list"
                ]
            }
        },
        "nano_ttl.time_expires": {
            "name": "time_expires",
            "location": 377,
            "return": [
                "int",
                "bool",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "nano_ttl.__bytes__": {
            "name": "__bytes__",
            "location": 380,
            "return": [
                "Dict[str, int]",
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "nano_ttl.__eq__": {
            "name": "__eq__",
            "location": 383,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.timedelta",
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "nano_ttl.__lt__": {
            "name": "__lt__",
            "location": 389,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.timedelta",
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "CronExp.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "List[str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "CronExp.croniter": {
            "name": "croniter",
            "location": 412,
            "return": [
                "int",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "str",
                    "int"
                ]
            }
        },
        "CronExp.__str__": {
            "name": "__str__",
            "location": 415,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeZone.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "TimeZone.tz": {
            "name": "tz",
            "location": 436,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeZone.__str__": {
            "name": "__str__",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/typings.py": {
        "get_args": {
            "name": "get_args",
            "location": 4,
            "return": [
                "str",
                "Optional[Any]",
                "bool",
                "Union[int, float, complex]",
                "Iterable[Any]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type"
                ],
                "default": [
                    "str",
                    "list",
                    "List[list]",
                    "int",
                    "bool"
                ]
            }
        },
        "is_typing": {
            "name": "is_typing",
            "location": 10,
            "return": [
                "bytes",
                "float",
                "Type[BaseException]",
                "bool"
            ],
            "arguments": {
                "tt": [
                    "Callable",
                    "bool"
                ],
                "t": [
                    "Type",
                    "bool"
                ],
                "args": []
            }
        },
        "is_tuple": {
            "name": "is_tuple",
            "location": 19,
            "return": [
                "str",
                "Type",
                "bool",
                "int"
            ],
            "arguments": {
                "t": [
                    "bool"
                ],
                "args": []
            }
        },
        "is_optional": {
            "name": "is_optional",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "is_list": {
            "name": "is_list",
            "location": 58,
            "return": [
                "str",
                "Dict[str, type]",
                "bool"
            ],
            "arguments": {
                "t": [],
                "args": []
            }
        },
        "is_dict": {
            "name": "is_dict",
            "location": 74,
            "return": [
                "bool",
                "Type",
                "Dict[str, type]",
                "str"
            ],
            "arguments": {
                "t": [
                    "Mapping[str, Any]",
                    "dict"
                ],
                "args": []
            }
        },
        "is_from_typing_module": {
            "name": "is_from_typing_module",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "is_classvar": {
            "name": "is_classvar",
            "location": 107,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "t": [
                    "Type",
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        },
        "get_attr_hints": {
            "name": "get_attr_hints",
            "location": 119,
            "return": [
                "Dict[str, str]",
                "str",
                "List[str]",
                "Dict[str, type]"
            ],
            "arguments": {
                "o": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "is_NamedTuple": {
            "name": "is_NamedTuple",
            "location": 133,
            "return": [
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "cls": [
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "is_subclass": {
            "name": "is_subclass",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "o": [
                    "Optional[List[Type]]"
                ],
                "super_cls": []
            }
        },
        "is_callable": {
            "name": "is_callable",
            "location": 236,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int"
                ]
            }
        },
        "OnlyAnnotatedProperties.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/__init__.py": {
        "is_primitive": {
            "name": "is_primitive",
            "location": 117,
            "return": [
                "mypy.types.Type",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "not_zero_len": {
            "name": "not_zero_len",
            "location": 131,
            "return": [
                "list",
                "types.Resolver",
                "int"
            ],
            "arguments": {
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "quict": {
            "name": "quict",
            "location": 135,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 147,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "from_camel_case_to_underscores": {
            "name": "from_camel_case_to_underscores",
            "location": 157,
            "return": [
                "int",
                "dict",
                "float",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "lazy_factory": {
            "name": "lazy_factory",
            "location": 165,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, Any]",
                    "\"Track\"",
                    "Type[types.C]",
                    "Mapping[str, Any]"
                ],
                "factory": [
                    "bool",
                    "Dict[str, Any]",
                    "\"Track\"",
                    "Type[types.C]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "exception_message": {
            "name": "exception_message",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "Optional[float]",
                    "Optional[dict]",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "reraise_with_msg": {
            "name": "reraise_with_msg",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str"
                ],
                "exception": [
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "ensure_bytes": {
            "name": "ensure_bytes",
            "location": 188,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "AnyStr"
                ]
            }
        },
        "utf8_encode": {
            "name": "utf8_encode",
            "location": 204,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "ensure_string": {
            "name": "ensure_string",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "AnyStr"
                ]
            }
        },
        "utf8_decode": {
            "name": "utf8_decode",
            "location": 224,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "dict",
                    "hashkernel.caskade.CaskType"
                ]
            }
        },
        "mix_in": {
            "name": "mix_in",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "source": [
                    "type",
                    "str",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "BinaryIO",
                    "Pattern",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "should_copy": [
                    "Optional[List[str]]",
                    "Optional[int]",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 428,
            "return": [
                "\"Task\"",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bool",
                    "Match"
                ]
            }
        },
        "load_jsonable": {
            "name": "load_jsonable",
            "location": 448,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "dict"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "path.Path",
                    "bool"
                ],
                "cls": [
                    "type",
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "dump_jsonable": {
            "name": "dump_jsonable",
            "location": 453,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "path.Path"
                ],
                "v": [
                    "type",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "read_jsonable": {
            "name": "read_jsonable",
            "location": 458,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "fp": [
                    "int",
                    "IO[bytes]",
                    "type",
                    "str"
                ],
                "cls": [
                    "int",
                    "IO[bytes]",
                    "type",
                    "str"
                ],
                "n": [
                    "int",
                    "IO[bytes]",
                    "type",
                    "str"
                ]
            }
        },
        "write_jsonable": {
            "name": "write_jsonable",
            "location": 462,
            "return": [
                "str",
                "dict",
                "Dict[str, int]"
            ],
            "arguments": {
                "fp": [
                    "IO[bytes]",
                    "str",
                    "bool"
                ],
                "v": [
                    "IO[bytes]",
                    "str",
                    "bool"
                ]
            }
        },
        "to_tuple": {
            "name": "to_tuple",
            "location": 466,
            "return": [
                "bool",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "Type[T]",
                    "Set[str]",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "to_dict": {
            "name": "to_dict",
            "location": 472,
            "return": [
                "int",
                "Dict[str, Tuple[Any, Any]]",
                "bool",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "bool",
                    "Match"
                ]
            }
        },
        "load_json_file": {
            "name": "load_json_file",
            "location": 497,
            "return": [
                "bytes",
                "bool",
                "pathlib.Path",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "json_decode": {
            "name": "json_decode",
            "location": 501,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "ensure_module": {
            "name": "ensure_module",
            "location": 591,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "o": [
                    "bool",
                    "types.signals.SignalHandlerT",
                    "abc.AbstractStreamWriter"
                ]
            }
        },
        "delegate_factory": {
            "name": "delegate_factory",
            "location": 742,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ],
                "delegate_attrs": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "BitMask.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[float]",
                    "Callable",
                    "Tuple[int, int]"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "BitMask.extract": {
            "name": "extract",
            "location": 93,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "BitMask.clear": {
            "name": "clear",
            "location": 96,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "BitMask.set": {
            "name": "set",
            "location": 99,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "BitMask.update": {
            "name": "update",
            "location": 102,
            "return": [
                "str",
                "dict",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "v": [
                    "int",
                    "list"
                ]
            }
        },
        "BitMask.update_all": {
            "name": "update_all",
            "location": 108,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "i": [
                    "dict",
                    "types.BoundsInput",
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "BitMask.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnsureIt.__factory__": {
            "name": "__factory__",
            "location": 267,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "EnsureIt.ensure_it": {
            "name": "ensure_it",
            "location": 271,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "\"WriteBack\"",
                    "Optional[Type]",
                    "Tuple[str, int]",
                    "int"
                ],
                "o": [
                    "\"WriteBack\"",
                    "Optional[Type]",
                    "Tuple[str, int]",
                    "int"
                ]
            }
        },
        "EnsureIt.ensure_it_or_none": {
            "name": "ensure_it_or_none",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "int",
                    "Iterable[List[mypy.types.Type]]"
                ],
                "o": [
                    "Optional[int]",
                    "Callable[..., T]",
                    "Optional[str]",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "Str2Bytes.__bytes__": {
            "name": "__bytes__",
            "location": 284,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stringable.__repr__": {
            "name": "__repr__",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrigableFactory.__str__": {
            "name": "__str__",
            "location": 310,
            "return": [
                "bytes",
                "int",
                "type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrigableFactory.register": {
            "name": "register",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "datetime.timedelta"
                ],
                "name_or_cls": [
                    "bool",
                    "Optional[str]"
                ],
                "subcls": [
                    "str",
                    "Callable",
                    "Optional[int]",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "StrigableFactory.__factory__": {
            "name": "__factory__",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Callable[[T], bool]",
                    "Type",
                    "Callable",
                    "Mapping[str, Any]",
                    "Union[AsyncIterable[Any], Iterable[Any]]"
                ]
            }
        },
        "Integerable.__repr__": {
            "name": "__repr__",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integerable.__int__": {
            "name": "__int__",
            "location": 345,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrKeyMixin.__cached_str": {
            "name": "__cached_str",
            "location": 383,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrKeyMixin.__hash__": {
            "name": "__hash__",
            "location": 388,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrKeyMixin.__eq__": {
            "name": "__eq__",
            "location": 393,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "bool",
                    "List['cirq.Qid']"
                ]
            }
        },
        "StrKeyMixin.__ne__": {
            "name": "__ne__",
            "location": 398,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Jsonable.__to_json__": {
            "name": "__to_json__",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Jsonable.__bytes__": {
            "name": "__bytes__",
            "location": 412,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jsonable.__str__": {
            "name": "__str__",
            "location": 415,
            "return": [
                "str",
                "int",
                "datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jsonable.__hash__": {
            "name": "__hash__",
            "location": 418,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jsonable.__eq__": {
            "name": "__eq__",
            "location": 421,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Tuple[float, float, float]",
                    "int",
                    "T"
                ]
            }
        },
        "Jsonable.__ne__": {
            "name": "__ne__",
            "location": 424,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "_StringableEncoder.__init__": {
            "name": "__init__",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_StringableEncoder.default": {
            "name": "default",
            "location": 482,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "datetime.time.delta",
                    "datetime.date",
                    "list"
                ]
            }
        },
        "GlobalRef.__init__": {
            "name": "__init__",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[Dict]"
                ],
                "item": [
                    "Dict[str, Any]"
                ]
            }
        },
        "GlobalRef.__str__": {
            "name": "__str__",
            "location": 571,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalRef.get_module": {
            "name": "get_module",
            "location": 575,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalRef.module_only": {
            "name": "module_only",
            "location": 578,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalRef.get_instance": {
            "name": "get_instance",
            "location": 581,
            "return": [
                "str",
                "dict",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEnum.__init__": {
            "name": "__init__",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str"
                ],
                "doc": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "CodeEnum._missing_": {
            "name": "_missing_",
            "location": 649,
            "return": [
                "Dict[str, str]",
                "Mapping",
                "Set[str]",
                "Dict[str, Set[str]]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "tuple",
                    "Dict[str, str]",
                    "range",
                    "T",
                    "Dict[str, Dict[str, int]]"
                ],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "CodeEnum.find_by_code": {
            "name": "find_by_code",
            "location": 656,
            "return": [
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Optional[Iterable]"
                ],
                "code": [
                    "int",
                    "str",
                    "Optional[Iterable]"
                ]
            }
        },
        "CodeEnum.assert_equals": {
            "name": "assert_equals",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "mypy.types.Type",
                    "bytes",
                    "list"
                ]
            }
        },
        "CodeEnum.__int__": {
            "name": "__int__",
            "location": 663,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEnum.__index__": {
            "name": "__index__",
            "location": 666,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEnum.__str__": {
            "name": "__str__",
            "location": 669,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEnum.__repr__": {
            "name": "__repr__",
            "location": 672,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaCodeEnumExtended.__prepare__": {
            "name": "__prepare__",
            "location": 682,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "metacls": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]",
                    "Iterable[str]",
                    "Type"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "dict"
                ],
                "bases": [
                    "str",
                    "Callable[[KT, VT], bool]",
                    "Sequence[str]",
                    "dict"
                ],
                "enums": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Tuple[type]",
                    "Optional[Iterable[str]]",
                    "str"
                ]
            }
        },
        "MetaCodeEnumExtended.__new__": {
            "name": "__new__",
            "location": 699,
            "return": [
                "str",
                "bool",
                "type",
                "Callable"
            ],
            "arguments": {
                "metacls": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ]
            }
        },
        "MetaCodeEnumExtended.__init__": {
            "name": "__init__",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, List]"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "Optional['InstrumentBase']"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "Optional['InstrumentBase']"
                ],
                "namespace": [
                    "str",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "Optional['InstrumentBase']"
                ]
            }
        },
        "LogicRegistry.__init__": {
            "name": "__init__",
            "location": 715,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LogicRegistry.add_all": {
            "name": "add_all",
            "location": 718,
            "return": [
                "Tuple[bytes]",
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "LogicRegistry.add": {
            "name": "add",
            "location": 724,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "bool",
                    "Callable",
                    "type",
                    "Iterable[bytes]"
                ]
            }
        },
        "LogicRegistry.get": {
            "name": "get",
            "location": 732,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "bytes",
                    "List['Product']"
                ]
            }
        },
        "LogicRegistry.code": {
            "name": "code",
            "location": 735,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "List[str]",
                    "int",
                    "Type[object]",
                    "datetime.datetime",
                    "type"
                ]
            }
        },
        "LogicRegistry.has": {
            "name": "has",
            "location": 738,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Union[int, float]",
                    "T"
                ]
            }
        },
        "delegate_factory.cls_factory": {
            "name": "cls_factory",
            "location": 770,
            "return": [
                "str",
                "Dict[str, str]",
                "Callable",
                "List[Dict[str, Any]]",
                "List[str]",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "o": [
                    "str",
                    "bool",
                    "callable"
                ]
            }
        },
        "DictLike.__init__": {
            "name": "__init__",
            "location": 798,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "DictLike.__contains__": {
            "name": "__contains__",
            "location": 802,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "Mapping[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "DictLike.__getitem__": {
            "name": "__getitem__",
            "location": 805,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "Mapping[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "DictLike.__iter__": {
            "name": "__iter__",
            "location": 808,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictLike.__len__": {
            "name": "__len__",
            "location": 811,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleHelper.__init__": {
            "name": "__init__",
            "location": 822,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scale_fn": [
                    "int",
                    "Union[float, List[float]]",
                    "Dict[str, str]",
                    "float",
                    "Optional[int]"
                ],
                "bit_size": [
                    "int",
                    "str"
                ]
            }
        },
        "ScaleHelper.build_cls": {
            "name": "build_cls",
            "location": 830,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "int"
                ],
                "idx": [
                    "Dict[str, Any]",
                    "Optional['models.LTI1p3Provider']",
                    "dict"
                ]
            }
        },
        "Scaling.__new_scale_helper__": {
            "name": "__new_scale_helper__",
            "location": 885,
            "return": [
                "float",
                "int",
                "List[dict]",
                "str",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "Scaling.__new__": {
            "name": "__new__",
            "location": 895,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[Any]]",
                    "T"
                ],
                "idx": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[Any]]",
                    "T"
                ]
            }
        },
        "Scaling.helper": {
            "name": "helper",
            "location": 899,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Optional[Callable[..., Any]]",
                    "Type[T]",
                    "IO[bytes]"
                ]
            }
        },
        "Scaling.search": {
            "name": "search",
            "location": 906,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "Union[int, bool]",
                    "datetime.datetime"
                ]
            }
        },
        "Scaling.value": {
            "name": "value",
            "location": 916,
            "return": [
                "int",
                "dict",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scaling.__eq__": {
            "name": "__eq__",
            "location": 919,
            "return": [
                "bool",
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "Scaling.__lt__": {
            "name": "__lt__",
            "location": 922,
            "return": [
                "bool",
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "Scaling.__int__": {
            "name": "__int__",
            "location": 925,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scaling.all": {
            "name": "all",
            "location": 929,
            "return": [
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Type[object]",
                    "bytes",
                    "snorkel.types.DataPoint",
                    "T",
                    "int"
                ]
            }
        },
        "Scaling.size": {
            "name": "size",
            "location": 936,
            "return": [
                "int",
                "Callable[[KT], VT]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "LogicRegistry.add.decorate": {
            "name": "decorate",
            "location": 725,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/bakery/aio_client.py": {},
    "hashkernel-master/hashkernel/bakery/aio_server.py": {},
    "hashkernel-master/hashkernel/bakery/kernel.py": {},
    "hashkernel-master/hashkernel/bakery/msg_server.py": {},
    "hashkernel-master/hashkernel/bakery/path.py": {
        "cake_or_path": {
            "name": "cake_or_path",
            "location": 119,
            "return": [],
            "arguments": {
                "s": [],
                "relative_to_root": []
            }
        },
        "ensure_cakepath": {
            "name": "ensure_cakepath",
            "location": 130,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "check_bookmark_name": {
            "name": "check_bookmark_name",
            "location": 283,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "CakePath.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "_root": [],
                "_path": []
            }
        },
        "CakePath.child": {
            "name": "child",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CakePath.parent": {
            "name": "parent",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CakePath.next_in_relative_path": {
            "name": "next_in_relative_path",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CakePath.relative": {
            "name": "relative",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CakePath.is_root": {
            "name": "is_root",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CakePath.make_absolute": {
            "name": "make_absolute",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "current_cake_path": []
            }
        },
        "CakePath.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CakePath.path_join": {
            "name": "path_join",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CakePath.filename": {
            "name": "filename",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.has_data": {
            "name": "has_data",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.get_data": {
            "name": "get_data",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.stream": {
            "name": "stream",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.has_file": {
            "name": "has_file",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.open_fd": {
            "name": "open_fd",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.from_file": {
            "name": "from_file",
            "location": 236,
            "return": [],
            "arguments": {
                "cls": [],
                "file": []
            }
        },
        "Content.from_data_and_file_type": {
            "name": "from_data_and_file_type",
            "location": 243,
            "return": [],
            "arguments": {
                "cls": [],
                "file_type": [],
                "data": [],
                "file": []
            }
        }
    },
    "hashkernel-master/hashkernel/bakery/rack.py": {
        "HashRack.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "HashRack._clear_cached": {
            "name": "_clear_cached",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.inverse": {
            "name": "inverse",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.cake": {
            "name": "cake",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.content": {
            "name": "content",
            "location": 58,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.__bytes__": {
            "name": "__bytes__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.size": {
            "name": "size",
            "location": 68,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.is_defined": {
            "name": "is_defined",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.parse": {
            "name": "parse",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Mapping[str, object]",
                    "bytes",
                    "hashkernel.bakery.CakeRole",
                    "IO[str]"
                ]
            }
        },
        "HashRack.__iter__": {
            "name": "__iter__",
            "location": 91,
            "return": [
                "List[int]",
                "bytearray",
                "Iterator[str]",
                "Iterable",
                "Iterator[T]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.__setitem__": {
            "name": "__setitem__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "Callable",
                    "dict",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Optional[Tuple[str, Any]]"
                ],
                "v": [
                    "Callable",
                    "dict",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Optional[Tuple[str, Any]]"
                ]
            }
        },
        "HashRack.__delitem__": {
            "name": "__delitem__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "T",
                    "dict",
                    "str",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "HashRack.__getitem__": {
            "name": "__getitem__",
            "location": 102,
            "return": [
                "Optional[str]",
                "bool",
                "Type[T]",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "T",
                    "dict",
                    "str",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "HashRack.__len__": {
            "name": "__len__",
            "location": 105,
            "return": [
                "str",
                "List[int]",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.__contains__": {
            "name": "__contains__",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "HashRack.get_name_by_cake": {
            "name": "get_name_by_cake",
            "location": 111,
            "return": [
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "HashRack.keys": {
            "name": "keys",
            "location": 114,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashRack.get_cakes": {
            "name": "get_cakes",
            "location": 119,
            "return": [
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "HashRack.__to_json__": {
            "name": "__to_json__",
            "location": 124,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Exception",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/bakery/signal.py": {
        "Cakeable.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "packer": [
                    "Optional[Dict]",
                    "int"
                ],
                "cake": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "Optional[hashkernel.ake.Rake]",
                    "float"
                ],
                "data": [
                    "Optional[str]",
                    "Optional[bytes]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "List[bytes]",
                    "str"
                ]
            }
        },
        "Cakeable.from_data": {
            "name": "from_data",
            "location": 38,
            "return": [
                "bool",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "hashkernel.packer.Packer",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "packer": [
                    "hashkernel.packer.Packer",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "data": [
                    "hashkernel.packer.Packer",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Cakeable.from_cake": {
            "name": "from_cake",
            "location": 42,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "hashkernel.ake.Rake",
                    "hashkernel.packer.Packer",
                    "type",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "packer": [
                    "hashkernel.ake.Rake",
                    "hashkernel.packer.Packer",
                    "type",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "cake": [
                    "hashkernel.ake.Rake",
                    "hashkernel.packer.Packer",
                    "type",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Cakeable.__to_json__": {
            "name": "__to_json__",
            "location": 45,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cakeable.load": {
            "name": "load",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "str",
                    "bool"
                ]
            }
        },
        "Cakeable.need_to_be_loaded": {
            "name": "need_to_be_loaded",
            "location": 54,
            "return": [
                "bool",
                "Set[str]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cakeable.store": {
            "name": "store",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "store_fn": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Cakeable.need_to_be_stored": {
            "name": "need_to_be_stored",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "Dict[str, List[Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mold": [
                    "hashkernel.mold.Mold",
                    "bytes",
                    "int"
                ],
                "s": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Optional[Any]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool",
                    "bytes"
                ],
                "pack_lib": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/bakery/__init__.py": {
        "ResponseMsg.is_error": {
            "name": "is_error",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStream.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "list",
                    "str",
                    "dict",
                    "int",
                    "float",
                    "bytes"
                ],
                "blocks": [
                    "Optional[float]"
                ]
            }
        },
        "BlockStream.__bytes__": {
            "name": "__bytes__",
            "location": 71,
            "return": [
                "bool",
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashSession.close": {
            "name": "close",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HashContext.get": {
            "name": "get",
            "location": 90,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {}
        },
        "HashContext.set": {
            "name": "set",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "HashContext.context": {
            "name": "context",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "factory": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/bakery/tests/bakery_tests.py": {
        "test_cake_roundtrip": {
            "name": "test_cake_roundtrip",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "bytes"
                ],
                "cake_s": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_guid": {
            "name": "test_guid",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrong_size_of_digest": {
            "name": "test_wrong_size_of_digest",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/bakery/tests/rack_tests.py": {
        "test_Bundle": {
            "name": "test_Bundle",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/bakery/tests/__init__.py": {},
    "hashkernel-master/hashkernel/caskade/cask.py": {
        "size_of_entry": {
            "name": "size_of_entry",
            "location": 521,
            "return": [
                "float",
                "int",
                "list"
            ],
            "arguments": {
                "et": [
                    "hashkernel.caskade.JotType",
                    "int",
                    "Sequence[int]",
                    "List[str]",
                    "Tuple[int, int]"
                ],
                "payload_size": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "size_of_check_point": {
            "name": "size_of_check_point",
            "location": 531,
            "return": [
                "str",
                "Type",
                "bytes",
                "int"
            ],
            "arguments": {
                "cascade": [
                    "int",
                    "bool",
                    "str",
                    "List[dict]"
                ],
                "sig_size": [
                    "int",
                    "dict",
                    "Sequence[str]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "CaskFile.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caskade": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "List[str]"
                ],
                "cask_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "pathlib.Path"
                ],
                "cask_type": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "CaskFile.by_file": {
            "name": "by_file",
            "location": 85,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "caskade": [
                    "str",
                    "bool"
                ],
                "fpath": [
                    "str"
                ]
            }
        },
        "CaskFile.create_file": {
            "name": "create_file",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tstamp": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "Optional[float]",
                    "Optional[List]"
                ],
                "checkpoint_id": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "CaskFile.append_buffer": {
            "name": "append_buffer",
            "location": 112,
            "return": [
                "bool",
                "OrderedDict",
                "List[int]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "str",
                    "dict",
                    "int"
                ],
                "mode": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ],
                "content_size": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "CaskFile.read_file": {
            "name": "read_file",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "curr_pos": [
                    "str",
                    "bytes",
                    "bytearray",
                    "int"
                ],
                "check_point_collector": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "str",
                    "int",
                    "bool"
                ],
                "read_opts": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "CaskFile.write_checkpoint": {
            "name": "write_checkpoint",
            "location": 151,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "cpt": [
                    "str"
                ]
            }
        },
        "CaskFile._deactivate": {
            "name": "_deactivate",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CaskFile.write_bytes": {
            "name": "write_bytes",
            "location": 168,
            "return": [
                "str",
                "List[str]",
                "Callable[[None, None], bool]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "hashkernel.ake.Cake",
                    "IO[str]",
                    "str"
                ],
                "hkey": [
                    "bytes",
                    "hashkernel.ake.Cake",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "CaskFile.write_entry": {
            "name": "write_entry",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "et": [
                    "str",
                    "bool"
                ],
                "header": [
                    "int",
                    "Optional[bytes]",
                    "List[Dict[str, Any]]"
                ],
                "payload": [
                    "int",
                    "Optional[bytes]",
                    "List[Dict[str, Any]]"
                ],
                "tstamp": [
                    "str",
                    "bool"
                ],
                "content_size": [
                    "memoryview",
                    "bytes",
                    "Deque[int]"
                ]
            }
        },
        "CaskFile._do_end_cask_sequence": {
            "name": "_do_end_cask_sequence",
            "location": 199,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "cp_type": [
                    "hashkernel.caskade.CheckPointType",
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "new_file": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Coroutine"
                ]
            }
        },
        "CaskFile.pack_entry": {
            "name": "pack_entry",
            "location": 214,
            "return": [
                "str",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rec": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "header": [
                    "int",
                    "Dict[str, Any]"
                ],
                "payload": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "CaskFile.pack_entry_sized": {
            "name": "pack_entry_sized",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rec": [
                    "Dict[str, Any]"
                ],
                "header": [
                    "str",
                    "bool"
                ],
                "payload": [
                    "str",
                    "bool"
                ]
            }
        },
        "CaskFile.__len__": {
            "name": "__len__",
            "location": 222,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaskFile.fragment": {
            "name": "fragment",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str",
                    "bool"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "EntryHelper.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cask": [
                    "int",
                    "str"
                ],
                "fbytes": [
                    "bool",
                    "str",
                    "Dict[str, AsyncGenerator]"
                ],
                "curr_pos": [
                    "int",
                    "str",
                    "List[List[T]]"
                ],
                "read_opts": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "EntryHelper.has_logic": {
            "name": "has_logic",
            "location": 258,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryHelper.load_entry": {
            "name": "load_entry",
            "location": 261,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryHelper.payload": {
            "name": "payload",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryHelper.load_DATA": {
            "name": "load_DATA",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryHelper.load_CASH_HEADER": {
            "name": "load_CASH_HEADER",
            "location": 279,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryHelper.load_LINK": {
            "name": "load_LINK",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryHelper.load_CHECK_POINT": {
            "name": "load_CHECK_POINT",
            "location": 305,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "Tuple[int, int]"
                ],
                "jot_types": [
                    "str",
                    "bool"
                ],
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[hashkernel.caskade.CaskadeConfig]"
                ]
            }
        },
        "Caskade._config_file": {
            "name": "_config_file",
            "location": 391,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade._rsa_pem": {
            "name": "_rsa_pem",
            "location": 394,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade._etc_dir": {
            "name": "_etc_dir",
            "location": 397,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade._set_active": {
            "name": "_set_active",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bytes",
                    "bool",
                    "List[TextIO]",
                    "IO[str]",
                    "Iterable[TextIO]",
                    "Dict[str, Any]",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "Caskade.latest_file": {
            "name": "latest_file",
            "location": 406,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.new_entry_helper": {
            "name": "new_entry_helper",
            "location": 409,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.is_file_belong": {
            "name": "is_file_belong",
            "location": 412,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "Set[str]",
                    "Pattern",
                    "pathlib.Path"
                ]
            }
        },
        "Caskade.checkpoint": {
            "name": "checkpoint",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.__getitem__": {
            "name": "__getitem__",
            "location": 419,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Dict[bytes, bytes]",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "Caskade.read_bytes": {
            "name": "read_bytes",
            "location": 422,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[int]",
                    "int",
                    "Iterable[int]",
                    "str",
                    "Dict[str, T]"
                ]
            }
        },
        "Caskade.__contains__": {
            "name": "__contains__",
            "location": 427,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Caskade.assert_write": {
            "name": "assert_write",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.write_bytes": {
            "name": "write_bytes",
            "location": 434,
            "return": [
                "int",
                "Iterable[Any]",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[bytes]",
                    "List[bytes]",
                    "dict",
                    "eth_keys.datatypes.PrivateKey",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "force": [
                    "str",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "Caskade.set_link": {
            "name": "set_link",
            "location": 442,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str"
                ],
                "link_type": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "Caskade.pause": {
            "name": "pause",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.resume": {
            "name": "resume",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade.recover": {
            "name": "recover",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "quiet_time": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Union[bool, int]]"
                ]
            }
        },
        "Caskade.close": {
            "name": "close",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Caskade._add_data_location": {
            "name": "_add_data_location",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "dp": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "written_data": [
                    "Optional[bytes]",
                    "bool",
                    "str",
                    "List[Sequence[int]]",
                    "Sequence"
                ]
            }
        },
        "BaseCaskade.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "bool",
                    "Mapping",
                    "str"
                ],
                "config": [
                    "bool",
                    "Mapping",
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/caskade/optional.py": {
        "OptionalEntryHelper.load_TAG": {
            "name": "load_TAG",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionalEntryHelper.load_DERIVED": {
            "name": "load_DERIVED",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionalCaskade.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[hashkernel.caskade.CaskadeConfig]",
                    "Union[pathlib.Path, str]"
                ],
                "config": [
                    "str",
                    "Optional[hashkernel.caskade.CaskadeConfig]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "OptionalCaskade.tag": {
            "name": "tag",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "Set[str]"
                ],
                "tag": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "OptionalCaskade.save_derived": {
            "name": "save_derived",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src": [
                    "hashkernel.ake.Cake",
                    "str",
                    "hashkernel.ake.Rake",
                    "Optional[str]"
                ],
                "filter": [
                    "hashkernel.ake.Cake",
                    "str",
                    "hashkernel.ake.Rake",
                    "Optional[str]"
                ],
                "derived": [
                    "hashkernel.ake.Cake",
                    "str",
                    "hashkernel.ake.Rake",
                    "Optional[str]"
                ]
            }
        },
        "OptionalCaskade.new_entry_helper": {
            "name": "new_entry_helper",
            "location": 91,
            "return": [
                "int",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/caskade/tree.py": {
        "TreeCaskade.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TreeCaskade._hash_tree": {
            "name": "_hash_tree",
            "location": 15,
            "return": [
                "str",
                "List[pathlib.Path]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/caskade/__init__.py": {
        "named_tuple_resolver": {
            "name": "named_tuple_resolver",
            "location": 137,
            "return": [
                "str",
                "dict",
                "type",
                "Mapping[Tuple[str, str], Any]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "CatalogItem.enum_item": {
            "name": "enum_item",
            "location": 164,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JotType.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "header": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "payload": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "doc": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "JotType.build_catalog_item": {
            "name": "build_catalog_item",
            "location": 240,
            "return": [
                "dict",
                "Dict[str, type]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JotType.catalog": {
            "name": "catalog",
            "location": 246,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[str, str, int]",
                    "Tuple[str]",
                    "Callable",
                    "type"
                ]
            }
        },
        "JotType.force_in": {
            "name": "force_in",
            "location": 250,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "set",
                    "Callable",
                    "Optional[Any]"
                ],
                "other_catalog": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ],
                "expand": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "JotType.combine": {
            "name": "combine",
            "location": 280,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {}
        },
        "JotType.extends": {
            "name": "extends",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "JotType.pack_entry": {
            "name": "pack_entry",
            "location": 293,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "rec": [
                    "str",
                    "bool",
                    "Union[None, str]"
                ],
                "header": [
                    "str",
                    "bool",
                    "Union[None, str]"
                ],
                "payload": [
                    "str",
                    "bool",
                    "Union[None, str]"
                ]
            }
        },
        "JotType.pack_entry_sized": {
            "name": "pack_entry_sized",
            "location": 296,
            "return": [
                "int",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "rec": [],
                "header": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "payload": [
                    "Optional[int]",
                    "dict",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "List[int]"
                ]
            }
        },
        "JotTypeCatalog.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "jot_types": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "list"
                ],
                "other_catalog": [
                    "Tuple[Type]",
                    "list",
                    "Optional[List[str]]",
                    "Optional[bytes]",
                    "Optional[Tuple]",
                    "Callable"
                ],
                "expand": [
                    "Type[Any]",
                    "Type",
                    "str"
                ]
            }
        },
        "JotTypeCatalog.__len__": {
            "name": "__len__",
            "location": 338,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaskId.__bytes__": {
            "name": "__bytes__",
            "location": 363,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaskId.from_str": {
            "name": "from_str",
            "location": 367,
            "return": [
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CaskId.path": {
            "name": "path",
            "location": 371,
            "return": [
                "str",
                "List[str]",
                "Path",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "dict",
                    "pathlib.Path",
                    "bytes",
                    "BinaryIO",
                    "List[str]",
                    "str",
                    "Tuple[int, int]"
                ],
                "ct": [
                    "dict",
                    "pathlib.Path",
                    "bytes",
                    "BinaryIO",
                    "List[str]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "CaskId.next_id": {
            "name": "next_id",
            "location": 374,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "add": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "DataLocation.load": {
            "name": "load",
            "location": 432,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fbytes": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "DataLocation.end_offset": {
            "name": "end_offset",
            "location": 435,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentTracker.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_offset": [
                    "str"
                ]
            }
        },
        "SegmentTracker.update": {
            "name": "update",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[Dict]",
                    "dict",
                    "str"
                ]
            }
        },
        "SegmentTracker.will_it_spill": {
            "name": "will_it_spill",
            "location": 460,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Optional[bytes]",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ],
                "time": [
                    "nanotime.nanotime",
                    "int",
                    "List[str]",
                    "Optional[Any]",
                    "Sequence[Sequence[Any]]"
                ],
                "size_to_be_written": [
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "SegmentTracker.checkpoint": {
            "name": "checkpoint",
            "location": 488,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "cpt": [
                    "raiden.utils.signer.Signer"
                ]
            }
        },
        "SegmentTracker.next_tracker": {
            "name": "next_tracker",
            "location": 496,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaskadeConfig.validate_config": {
            "name": "validate_config",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JotType.extends.decorate": {
            "name": "decorate",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "decorated_enum": [
                    "Optional[Any]",
                    "bool"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/caskade/tests/cask_tests.py": {
        "test_packers": {
            "name": "test_packers",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_catalog": {
            "name": "test_catalog",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "entries": [
                    "Callable"
                ],
                "conform_to": [
                    "str",
                    "int"
                ]
            }
        },
        "test_config": {
            "name": "test_config",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "jot_types": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "config": [
                    "dict",
                    "Optional[hashkernel.caskade.CaskadeConfig]",
                    "str"
                ]
            }
        },
        "test_recover_no_checkpoints": {
            "name": "test_recover_no_checkpoints",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_3steps": {
            "name": "test_3steps",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "caskade_cls": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[\"Frame\"]"
                ],
                "config": [
                    "str",
                    "Type['BaseConfig']",
                    "Optional[str]"
                ]
            }
        },
        "SizePredictor.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caskade": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SizePredictor.add": {
            "name": "add",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "tuple",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "SizePredictor.add_data": {
            "name": "add_data",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_size": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "SizePredictor.add_check_point": {
            "name": "add_check_point",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SizePredictor.add_end_sequence": {
            "name": "add_end_sequence",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/caskade/tests/__init__.py": {},
    "hashkernel-master/hashkernel/files/buffer.py": {
        "FileBytes.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "pathlib.PurePath",
                    "apistar.http.Path"
                ],
                "max_cache": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "pathlib.PurePath",
                    "apistar.http.Path"
                ]
            }
        },
        "FileBytes.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileBytes.seg_split": {
            "name": "seg_split",
            "location": 33,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "FileBytes.__getitem__": {
            "name": "__getitem__",
            "location": 49,
            "return": [
                "int",
                "bool",
                "float",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        },
        "FileBytes.__init__.load_segment": {
            "name": "load_segment",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "seg": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileBytes.__getitem__.load": {
            "name": "load",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/files/directory.py": {
        "read_dir": {
            "name": "read_dir",
            "location": 67,
            "return": [
                "str",
                "Tuple[str, str]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Sequence[str]",
                    "str"
                ],
                "ignore_rules": [
                    "str",
                    "List[str]",
                    "Union[str, Pattern]",
                    "Optional[str]"
                ]
            }
        },
        "File.from_path": {
            "name": "from_path",
            "location": 25,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "ft": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "FileExtra.name": {
            "name": "name",
            "location": 37,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileExtra.__to_json__": {
            "name": "__to_json__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileExtra.from_json": {
            "name": "from_json",
            "location": 50,
            "return": [
                "str",
                "Optional[\"Path\"]",
                "Tuple[str]",
                "Dict[str, Any]",
                "IO",
                "Tuple[str, str]"
            ],
            "arguments": {
                "json": [
                    "str"
                ],
                "parent": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ],
                "file_extra": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "IO[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "DirContent.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ],
                "extras": [
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "DirContent.size": {
            "name": "size",
            "location": 94,
            "return": [
                "int",
                "Dict[str, Tuple[str, str]]",
                "Hashable",
                "MutableMapping[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirContent.mod": {
            "name": "mod",
            "location": 97,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirContent.__len__": {
            "name": "__len__",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirContent.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "DirContent.tree_extra": {
            "name": "tree_extra",
            "location": 112,
            "return": [
                "str",
                "Set[str]",
                "Pattern",
                "Optional[pathlib.Path]",
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirContent.__to_json__": {
            "name": "__to_json__",
            "location": 117,
            "return": [
                "list",
                "Sequence[object]",
                "List[Tuple[str, int]]",
                "List[str]",
                "Iterable[int]",
                "Set[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/hashkernel/files/ignore_file.py": {
        "PathMatch.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cur_dir": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, str]",
                    "List[Tuple[str, int]]",
                    "bytes"
                ],
                "pattern": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "dict"
                ]
            }
        },
        "PathMatch.match": {
            "name": "match",
            "location": 46,
            "return": [
                "str",
                "list",
                "Iterable[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[pathlib.Path]"
                ]
            }
        },
        "PathMatch.__key__": {
            "name": "__key__",
            "location": 53,
            "return": [
                "str",
                "Mapping[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathMatch.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str",
                "Optional[Callable]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathMatch.__lt__": {
            "name": "__lt__",
            "location": 59,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathMatch.__eq__": {
            "name": "__eq__",
            "location": 62,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathMatch.__hash__": {
            "name": "__hash__",
            "location": 65,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathMatch.is_included": {
            "name": "is_included",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "PathMatchSet.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathMatchSet.add": {
            "name": "add",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path_match": [
                    "str",
                    "List[List[float]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "PathMatchSet.match": {
            "name": "match",
            "location": 111,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Dict[str, str]]",
                "str",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "IgnoreRuleSet.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "IgnoreRuleSet.update_ignore_files": {
            "name": "update_ignore_files",
            "location": 127,
            "return": [
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IgnoreRuleSet.update_spec_to_parse": {
            "name": "update_spec_to_parse",
            "location": 139,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IgnoreRuleSet.parse_specs": {
            "name": "parse_specs",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "listdir": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IgnoreRuleSet.parse_spec": {
            "name": "parse_spec",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Tuple[str]",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "IgnoreRuleSet.path_filter": {
            "name": "path_filter",
            "location": 162,
            "return": [
                "Optional[int]",
                "Mapping[str, Any]",
                "str",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "IgnoreFilePolicy.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ignore_files": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "spec_to_parse": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "IgnoreFilePolicy.apply": {
            "name": "apply",
            "location": 171,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/files/mime_info.py": {
        "read_mime_infos": {
            "name": "read_mime_infos",
            "location": 14,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "Union[slice, List[slice], List[int]]",
                    "Optional[str]"
                ]
            }
        },
        "guess_name": {
            "name": "guess_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "guess_type": {
            "name": "guess_type",
            "location": 61,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str",
                "int",
                "bool",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Callable[..., Any]]",
                    "Type[memoryview]"
                ]
            }
        },
        "extract_extension": {
            "name": "extract_extension",
            "location": 91,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/files/__init__.py": {
        "ensure_path": {
            "name": "ensure_path",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "List[pathlib.Path]"
                ]
            }
        },
        "read_text": {
            "name": "read_text",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ],
                "process": [
                    "pathlib.Path"
                ]
            }
        },
        "any_path": {
            "name": "any_path",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Callable",
                    "Set[pathlib.Path]"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/files/tests/directory_tests.py": {
        "print_dc": {
            "name": "print_dc",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "dc": [
                    "str",
                    "dict",
                    "Sequence[str]",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/files/tests/files_tests.py": {
        "test_file_bytes": {
            "name": "test_file_bytes",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_file_bytes_with_type_packer": {
            "name": "test_file_bytes_with_type_packer",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/files/tests/ignore_file_tests.py": {},
    "hashkernel-master/hashkernel/files/tests/mime_info_tests.py": {
        "test_dict": {
            "name": "test_dict",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/files/tests/__init__.py": {
        "seed_file": {
            "name": "seed_file",
            "location": 10,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "pathlib.Path",
                    "List[int]",
                    "list",
                    "Union[List, str]",
                    "pathlib.PurePath"
                ],
                "seed": [
                    "str",
                    "bytes"
                ],
                "sz": [
                    "str",
                    "Optional[Callable[[pathlib.Path], int]]",
                    "Callable[[List], List[str]]",
                    "bytes",
                    "Callable",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "dump_file": {
            "name": "dump_file",
            "location": 21,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "content": [
                    "str",
                    "pathlib.Path",
                    "pathman.path.Path"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/auto_wire_tests.py": {
        "test_wiring": {
            "name": "test_wiring",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiring.Dependencies.add": {
            "name": "add",
            "location": 13,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "depend_on": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/base_x_tests.py": {
        "random_bytes": {
            "name": "random_bytes",
            "location": 6,
            "return": [
                "bool",
                "List[str]",
                "float",
                "Dict[str, Callable[[], Any]]",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "sz": [
                    "int",
                    "float",
                    "slice"
                ]
            }
        },
        "test_nulls": {
            "name": "test_nulls",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_randomized": {
            "name": "test_randomized",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/tests/base_x_timeit.py": {
        "encode": {
            "name": "encode",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "decode": {
            "name": "decode",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "do_timing": {
            "name": "do_timing",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "fn": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/crypto_tests.py": {
        "test_symetric": {
            "name": "test_symetric",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sign": {
            "name": "test_sign",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "do_sign": {
            "name": "do_sign",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "algo": [
                    "bool",
                    "str"
                ]
            }
        },
        "do_verify": {
            "name": "do_verify",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "bool",
                    "dict",
                    "str",
                    "int"
                ],
                "pubkey": [
                    "bool",
                    "dict",
                    "str",
                    "int"
                ],
                "right_signature": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "wrong_signature": [
                    "str",
                    "int"
                ]
            }
        },
        "test_crypt": {
            "name": "test_crypt",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "do_crypt": {
            "name": "do_crypt",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "algo": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_private_key_serialization": {
            "name": "test_private_key_serialization",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "do_private_key_serialization": {
            "name": "do_private_key_serialization",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "algo": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, List[Any]]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/kernel_tests.py": {
        "test_reraise": {
            "name": "test_reraise",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ables": {
            "name": "test_ables",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_encode_decode": {
            "name": "test_json_encode_decode",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mix_in": {
            "name": "test_mix_in",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "hello": {
            "name": "hello",
            "location": 251,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "s": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_doc_str_template": {
            "name": "test_doc_str_template",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CodeEnum": {
            "name": "test_CodeEnum",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inherit_CodeEnum": {
            "name": "test_inherit_CodeEnum",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "StringableIterable.__iter__": {
            "name": "__iter__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonableExample.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "dict",
                    "bytes",
                    "bool",
                    "Optional[Any]",
                    "str",
                    "float"
                ],
                "i": [
                    "int",
                    "dict",
                    "bytes",
                    "bool",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "JsonableExample.__to_json__": {
            "name": "__to_json__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonableExample.__to_tuple__": {
            "name": "__to_tuple__",
            "location": 70,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonableExample.__to_dict__": {
            "name": "__to_dict__",
            "location": 73,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mix_in.retest": {
            "name": "retest",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "B": [
                    "Match",
                    "str",
                    "Pattern[str]",
                    "bool"
                ],
                "match": [
                    "Match",
                    "str",
                    "Pattern[str]",
                    "bool"
                ]
            }
        },
        "test_reraise._Ex.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "b": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_mix_in.StrKeyAbcMixin.__str__": {
            "name": "__str__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mix_in.B1.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "test_mix_in.B1.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mix_in.B2.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "test_mix_in.B2.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mix_in.B3.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "test_mix_in.B3.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mix_in.B4.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "test_mix_in.B4.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mix_in.B6.__eq__": {
            "name": "__eq__",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "test_mix_in.B7.__eq__": {
            "name": "__eq__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "test_inherit_CodeEnum.Root.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "description": [
                    "str",
                    "int",
                    "bool",
                    "List[int]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "docs": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/logic_tests.py": {
        "test_json": {
            "name": "test_json",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/tests/logic_test_module.py": {
        "fn": {
            "name": "fn",
            "location": 7,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "hashkernel.ake.Cake",
                    "int",
                    "Callable[[int], bool]",
                    "str",
                    "float",
                    "bool"
                ],
                "i": [
                    "hashkernel.ake.Cake",
                    "int",
                    "Callable[[int], bool]",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "fn2": {
            "name": "fn2",
            "location": 18,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "fn3": {
            "name": "fn3",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "hashkernel.ake.Cake",
                    "int",
                    "Callable[[int], bool]",
                    "str",
                    "float",
                    "bool"
                ],
                "i": [
                    "hashkernel.ake.Cake",
                    "int",
                    "Callable[[int], bool]",
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/mold_tests.py": {
        "test_docstring": {
            "name": "test_docstring",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pack_wolves": {
            "name": "pack_wolves",
            "location": 56,
            "return": [
                "Set[str]",
                "List[str]",
                "set",
                "str"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "s": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "pack_wolves2": {
            "name": "pack_wolves2",
            "location": 75,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int"
                ],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "test_extract_molds_from_function": {
            "name": "test_extract_molds_from_function",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_flator": {
            "name": "test_flator",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "JsonableMemoryFlator.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonableMemoryFlator.is_applied": {
            "name": "is_applied",
            "location": 114,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type",
                    "Type[T]",
                    "Type",
                    "bool",
                    "str"
                ]
            }
        },
        "JsonableMemoryFlator.inflate": {
            "name": "inflate",
            "location": 117,
            "return": [
                "int",
                "bytes",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "cls": [
                    "int"
                ]
            }
        },
        "JsonableMemoryFlator.deflate": {
            "name": "deflate",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[str]",
                    "List[Tuple[str, ...]]"
                ]
            }
        },
        "JsonableMemoryFlator.__len__": {
            "name": "__len__",
            "location": 125,
            "return": [
                "str",
                "List[int]",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_flator.fn": {
            "name": "fn",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "z": [
                    "bool",
                    "int",
                    "str",
                    "Optional[type]",
                    "Iterable"
                ],
                "t": [
                    "bool",
                    "int",
                    "str",
                    "Optional[type]",
                    "Iterable"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/otable_tests.py": {
        "test_gref_with_molded_table": {
            "name": "test_gref_with_molded_table",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_typing_with_template": {
            "name": "test_typing_with_template",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hashkernel-master/hashkernel/tests/packer_tests.py": {
        "test_1": {
            "name": "test_1",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_adjsize_packers": {
            "name": "test_adjsize_packers",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "packer": [
                    "int"
                ],
                "max_capacity": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_adjsize_packers.set_mask_bit": {
            "name": "set_mask_bit",
            "location": 72,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "buff": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/smattr_tests.py": {
        "test_docstring": {
            "name": "test_docstring",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_combo": {
            "name": "test_combo",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrap": {
            "name": "test_wrap",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrap.do_check": {
            "name": "do_check",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "w": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/time_tests.py": {
        "test_with_cref": {
            "name": "test_with_cref",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "ttl": [
                    "Sequence[Union[int, float]]"
                ]
            }
        },
        "test_Timeout": {
            "name": "test_Timeout",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "i": [
                    "str",
                    "dict",
                    "Callable",
                    "MutableSequence[str]"
                ],
                "to": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/ttl_timeit.py": {
        "ttl": {
            "name": "ttl",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "Collection[int]",
                    "str"
                ]
            }
        },
        "do_timing": {
            "name": "do_timing",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hashkernel-master/hashkernel/tests/__init__.py": {
        "rand_bytes": {
            "name": "rand_bytes",
            "location": 22,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "seed": [
                    "bytes",
                    "str",
                    "int",
                    "Tuple[int, int, bytearray]"
                ],
                "size": [
                    "bytes",
                    "str",
                    "int",
                    "Tuple[int, int, bytearray]"
                ]
            }
        },
        "BytesGen.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "BytesGen.randint_repeat": {
            "name": "randint_repeat",
            "location": 15,
            "return": [
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Tuple[int, int]"
                ],
                "end": [
                    "int",
                    "Tuple[int, int]"
                ],
                "repeat": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "BytesGen.get_bytes": {
            "name": "get_bytes",
            "location": 18,
            "return": [
                "bytes",
                "str",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "str",
                    "int"
                ]
            }
        },
        "StringableExample.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "T"
                ]
            }
        },
        "StringableExample.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashkernel-master/my_kernel/setup.py": {},
    "hashkernel-master/my_kernel/my_kernel/__init__.py": {
        "solve": {
            "name": "solve",
            "location": 6,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "float",
                "List[List[Any]]",
                "list",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "a": [
                    "List[List[float]]",
                    "List[float]",
                    "numpy.ndarray",
                    "Sequence[int]"
                ],
                "b": [
                    "List[List[float]]",
                    "List[float]",
                    "numpy.ndarray",
                    "Sequence[int]"
                ]
            }
        }
    }
}
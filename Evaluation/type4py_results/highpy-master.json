{
    "highpy-master/concurrency/lock_passing.py": {
        "TicketOffice.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "remaining": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TicketOffice.add": {
            "name": "add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "TicketOffice.buy": {
            "name": "buy",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        }
    },
    "highpy-master/concurrency/multithreading.py": {
        "count_to_ten": {
            "name": "count_to_ten",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "first_five_letters": {
            "name": "first_five_letters",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "highpy-master/concurrency/thread_creation_1.py": {
        "even_numbers": {
            "name": "even_numbers",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "odd_numbers": {
            "name": "odd_numbers",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "highpy-master/concurrency/thread_creation_2.py": {
        "MyThread.run": {
            "name": "run",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/concurrency/thread_creation_3.py": {
        "MyThread.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MyThread.even_numbers": {
            "name": "even_numbers",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/concurrency/__init__.py": {},
    "highpy-master/decorators/class_decorators.py": {
        "factorial": {
            "name": "factorial",
            "location": 16,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "Memoize.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "Memoize.__call__": {
            "name": "__call__",
            "location": 6,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/decorators/function_decorators.py": {
        "logger": {
            "name": "logger",
            "location": 1,
            "return": [
                "int",
                "str",
                "bytearray"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "memoize": {
            "name": "memoize",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "add_three": {
            "name": "add_three",
            "location": 31,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "fib": {
            "name": "fib",
            "location": 36,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "logger.wrapper": {
            "name": "wrapper",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "memoize.wrapper": {
            "name": "wrapper",
            "location": 19,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "highpy-master/decorators/property_decorators.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "firstname": [
                    "int",
                    "bool",
                    "float"
                ],
                "lastname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Person.age": {
            "name": "age",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.fullname": {
            "name": "fullname",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.email": {
            "name": "email",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.webpage": {
            "name": "webpage",
            "location": 39,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/decorators/special_class_methods.py": {
        "Programmer.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "firstname": [
                    "int",
                    "bool",
                    "float"
                ],
                "lastname": [
                    "int",
                    "bool",
                    "float"
                ],
                "salary": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Programmer.fullname": {
            "name": "fullname",
            "location": 9,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Programmer.raise_salary": {
            "name": "raise_salary",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Programmer.set_raise_rate": {
            "name": "set_raise_rate",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float"
                ],
                "rate": [
                    "str",
                    "float"
                ]
            }
        },
        "Programmer.convert_to_usd": {
            "name": "convert_to_usd",
            "location": 20,
            "return": [
                "float",
                "T",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "euro_amount": [
                    "float",
                    "bool",
                    "Callable[[Any], int]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "highpy-master/decorators/__init__.py": {},
    "highpy-master/decorators/tests/test_property_decorators.py": {
        "TestPerson.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_fullname_getter": {
            "name": "test_fullname_getter",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_fullname_setter": {
            "name": "test_fullname_setter",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_fullname_deleter": {
            "name": "test_fullname_deleter",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_age_getter_normal": {
            "name": "test_age_getter_normal",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_age_setter_error": {
            "name": "test_age_setter_error",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_age_deleter": {
            "name": "test_age_deleter",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/decorators/tests/test_special_class_methods.py": {
        "TestProgrammer.setup_method": {
            "name": "setup_method",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgrammer.test_programmer": {
            "name": "test_programmer",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgrammer.test_classmethod": {
            "name": "test_classmethod",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgrammer.test_staticmethod": {
            "name": "test_staticmethod",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/decorators/tests/__init__.py": {},
    "highpy-master/doubly_linked_list/main.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "prev": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "next": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "DoublyLinkedList.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "head": [
                    "int",
                    "bool",
                    "float"
                ],
                "tail": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DoublyLinkedList.clear": {
            "name": "clear",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.size": {
            "name": "size",
            "location": 17,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.get_tail_index": {
            "name": "get_tail_index",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.get_at": {
            "name": "get_at",
            "location": 31,
            "return": [
                "Optional[List[Any]]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[bool]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "DoublyLinkedList.get_first": {
            "name": "get_first",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.get_last": {
            "name": "get_last",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.insert_first": {
            "name": "insert_first",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bytes]",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, Any]]",
                    "bytes"
                ]
            }
        },
        "DoublyLinkedList.insert_at": {
            "name": "insert_at",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "data": [
                    "str",
                    "int"
                ]
            }
        },
        "DoublyLinkedList.insert_last": {
            "name": "insert_last",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[int, str]",
                    "dict",
                    "bool",
                    "List[List[str]]",
                    "Mapping[str, object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DoublyLinkedList.remove_first": {
            "name": "remove_first",
            "location": 78,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.remove_at": {
            "name": "remove_at",
            "location": 87,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ]
            }
        },
        "DoublyLinkedList.remove_last": {
            "name": "remove_last",
            "location": 103,
            "return": [
                "Dict[str, Any]",
                "Optional[bool]",
                "Set[VT]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.every": {
            "name": "every",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "DoublyLinkedList.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.__len__": {
            "name": "__len__",
            "location": 127,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.__iter__": {
            "name": "__iter__",
            "location": 130,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoublyLinkedList.__next__": {
            "name": "__next__",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/doubly_linked_list/__init__.py": {},
    "highpy-master/doubly_linked_list/tests/test_doubly_linked_list.py": {
        "TestDoublyLinkedList.setup_method": {
            "name": "setup_method",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_node_class": {
            "name": "test_node_class",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_doubly_linked_list_class": {
            "name": "test_doubly_linked_list_class",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_size": {
            "name": "test_size",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_clear": {
            "name": "test_clear",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_get_at": {
            "name": "test_get_at",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_get_first": {
            "name": "test_get_first",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_get_last": {
            "name": "test_get_last",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_insert_at": {
            "name": "test_insert_at",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_insert_first": {
            "name": "test_insert_first",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_insert_last": {
            "name": "test_insert_last",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_remove_at": {
            "name": "test_remove_at",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_remove_first": {
            "name": "test_remove_first",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_remove_last": {
            "name": "test_remove_last",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_every": {
            "name": "test_every",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_iteration": {
            "name": "test_iteration",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoublyLinkedList.test_every.f": {
            "name": "f",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "List[str]",
                    "tuple"
                ]
            }
        }
    },
    "highpy-master/doubly_linked_list/tests/__init__.py": {},
    "highpy-master/generators/class_generator_a.py": {
        "Fibonacci.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fibonacci.__iter__": {
            "name": "__iter__",
            "location": 8,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fibonacci.__next__": {
            "name": "__next__",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/generators/class_generator_b.py": {
        "Fibonacci.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fibonacci.send": {
            "name": "send",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Fibonacci.throw": {
            "name": "throw",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ],
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "highpy-master/generators/powers_of_2.py": {
        "powers_of_two": {
            "name": "powers_of_two",
            "location": 4,
            "return": [
                "typing.Iterator[builtins.int]"
            ],
            "arguments": {}
        }
    },
    "highpy-master/generators/read_lines.py": {
        "first_line": {
            "name": "first_line",
            "location": 5,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Callable"
                ]
            }
        },
        "next_line": {
            "name": "next_line",
            "location": 16,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "highpy-master/generators/__init__.py": {},
    "highpy-master/magic_methods/binary_operators.py": {
        "NumberTuple.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberTuple.output": {
            "name": "output",
            "location": 8,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberTuple.__add__": {
            "name": "__add__",
            "location": 11,
            "return": [
                "dict",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "NumberTuple.__sub__": {
            "name": "__sub__",
            "location": 16,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "NumberTuple.__mul__": {
            "name": "__mul__",
            "location": 20,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "NumberTuple.__truediv__": {
            "name": "__truediv__",
            "location": 24,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "NumberTuple.__floordiv__": {
            "name": "__floordiv__",
            "location": 28,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.output": {
            "name": "output",
            "location": 37,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__mod__": {
            "name": "__mod__",
            "location": 40,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Number.__pow__": {
            "name": "__pow__",
            "location": 43,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Number.__lshift__": {
            "name": "__lshift__",
            "location": 46,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Number.__rshift__": {
            "name": "__rshift__",
            "location": 49,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Number.__and__": {
            "name": "__and__",
            "location": 52,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Number.__xor__": {
            "name": "__xor__",
            "location": 55,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Number.__or__": {
            "name": "__or__",
            "location": 58,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        }
    },
    "highpy-master/magic_methods/comparison_operators.py": {
        "Number.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Number.__lt__": {
            "name": "__lt__",
            "location": 5,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Number.__gt__": {
            "name": "__gt__",
            "location": 8,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Number.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Number.__ne__": {
            "name": "__ne__",
            "location": 14,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Number.__le__": {
            "name": "__le__",
            "location": 17,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Number.__ge__": {
            "name": "__ge__",
            "location": 20,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "highpy-master/magic_methods/inplace_operators.py": {
        "Number.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Number.__iadd__": {
            "name": "__iadd__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__isub__": {
            "name": "__isub__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__imul__": {
            "name": "__imul__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__itruediv__": {
            "name": "__itruediv__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__imod__": {
            "name": "__imod__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__ipow__": {
            "name": "__ipow__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__iand__": {
            "name": "__iand__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__ior__": {
            "name": "__ior__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__ixor__": {
            "name": "__ixor__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__ilshift__": {
            "name": "__ilshift__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Number.__irshift__": {
            "name": "__irshift__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "highpy-master/magic_methods/unary_operators.py": {
        "Number.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Number.__neg__": {
            "name": "__neg__",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__pos__": {
            "name": "__pos__",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__abs__": {
            "name": "__abs__",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__invert__": {
            "name": "__invert__",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__complex__": {
            "name": "__complex__",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__int__": {
            "name": "__int__",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__float__": {
            "name": "__float__",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/magic_methods/__init__.py": {},
    "highpy-master/magic_methods/tests/test_binary_operators.py": {
        "test_addition": {
            "name": "test_addition",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_subtraction": {
            "name": "test_subtraction",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_division": {
            "name": "test_division",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_floor_division": {
            "name": "test_floor_division",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_modulo": {
            "name": "test_modulo",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_power": {
            "name": "test_power",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_left_shift": {
            "name": "test_left_shift",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_right_shift": {
            "name": "test_right_shift",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitwise_and": {
            "name": "test_bitwise_and",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitwise_xor": {
            "name": "test_bitwise_xor",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitwise_or": {
            "name": "test_bitwise_or",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "highpy-master/magic_methods/tests/test_comparison_operators.py": {
        "test_lt": {
            "name": "test_lt",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_gt": {
            "name": "test_gt",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_ne": {
            "name": "test_ne",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_le": {
            "name": "test_le",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_ge": {
            "name": "test_ge",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "highpy-master/magic_methods/tests/test_inplace_operators.py": {
        "test_number_class": {
            "name": "test_number_class",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_iadd": {
            "name": "test_iadd",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_isub": {
            "name": "test_isub",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_imul": {
            "name": "test_imul",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_itruediv": {
            "name": "test_itruediv",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ifloordiv": {
            "name": "test_ifloordiv",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_imod": {
            "name": "test_imod",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ipow": {
            "name": "test_ipow",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_iand": {
            "name": "test_iand",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ior": {
            "name": "test_ior",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ixor": {
            "name": "test_ixor",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ilshift": {
            "name": "test_ilshift",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_irshift": {
            "name": "test_irshift",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "highpy-master/magic_methods/tests/test_unary_operators.py": {
        "test_negative": {
            "name": "test_negative",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_positive": {
            "name": "test_positive",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_absolute": {
            "name": "test_absolute",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitwise_invert": {
            "name": "test_bitwise_invert",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_complex": {
            "name": "test_complex",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_int": {
            "name": "test_int",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_float": {
            "name": "test_float",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "highpy-master/magic_methods/tests/__init__.py": {},
    "highpy-master/parallelism/multi_processing.py": {
        "slumber": {
            "name": "slumber",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "secs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "highpy-master/parallelism/process_pool.py": {
        "slumber": {
            "name": "slumber",
            "location": 5,
            "return": [
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "secs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "highpy-master/parallelism/using_joblib.py": {
        "slumber": {
            "name": "slumber",
            "location": 10,
            "return": [
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "secs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "highpy-master/parallelism/__init__.py": {},
    "highpy-master/singly_linked_list/circular.py": {
        "is_circular": {
            "name": "is_circular",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "llst": [
                    "type",
                    "Optional[int]",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "highpy-master/singly_linked_list/from_last.py": {
        "get_nth_node_from_last": {
            "name": "get_nth_node_from_last",
            "location": 1,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "llst": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "n": [
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "highpy-master/singly_linked_list/main.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "next": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "head": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LinkedList.clear": {
            "name": "clear",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.size": {
            "name": "size",
            "location": 17,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_at": {
            "name": "get_at",
            "location": 25,
            "return": [
                "Optional[List[Any]]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[bool]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "LinkedList.get_first": {
            "name": "get_first",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_last": {
            "name": "get_last",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "Union[None, List[str]]",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insert_at": {
            "name": "insert_at",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[bool]"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "bool",
                    "Dict[str, List]"
                ]
            }
        },
        "LinkedList.insert_first": {
            "name": "insert_first",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "LinkedList.insert_last": {
            "name": "insert_last",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "T",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "LinkedList.remove_at": {
            "name": "remove_at",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "LinkedList.remove_first": {
            "name": "remove_first",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.remove_last": {
            "name": "remove_last",
            "location": 103,
            "return": [
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.every": {
            "name": "every",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "LinkedList.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 128,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 131,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__next__": {
            "name": "__next__",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/singly_linked_list/midpoint.py": {
        "midpoint": {
            "name": "midpoint",
            "location": 1,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "llst": [
                    "Optional[int]"
                ]
            }
        }
    },
    "highpy-master/singly_linked_list/__init__.py": {},
    "highpy-master/singly_linked_list/tests/test_circular.py": {
        "IsCircularTestCast.test_circular": {
            "name": "test_circular",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IsCircularTestCast.test_non_circular": {
            "name": "test_non_circular",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/singly_linked_list/tests/test_from_last.py": {
        "FromLastTestCast.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FromLastTestCast.test_empty": {
            "name": "test_empty",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FromLastTestCast.test_zeroth": {
            "name": "test_zeroth",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FromLastTestCast.test_normal": {
            "name": "test_normal",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/singly_linked_list/tests/test_linkedlist.py": {
        "LinkedListTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_node_class": {
            "name": "test_node_class",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_linkedlist_class": {
            "name": "test_linkedlist_class",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_size": {
            "name": "test_size",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_clear": {
            "name": "test_clear",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_get_at": {
            "name": "test_get_at",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_get_first": {
            "name": "test_get_first",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_get_last": {
            "name": "test_get_last",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_insert_at": {
            "name": "test_insert_at",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_insert_first": {
            "name": "test_insert_first",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_insert_last": {
            "name": "test_insert_last",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_remove_at": {
            "name": "test_remove_at",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_remove_first": {
            "name": "test_remove_first",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_remove_last": {
            "name": "test_remove_last",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_every": {
            "name": "test_every",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_iteration": {
            "name": "test_iteration",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListTestCase.test_every.f": {
            "name": "f",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "List[str]",
                    "tuple"
                ]
            }
        }
    },
    "highpy-master/singly_linked_list/tests/test_midpoint.py": {
        "MidpointTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MidpointTestCase.test_empty": {
            "name": "test_empty",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MidpointTestCase.test_odd": {
            "name": "test_odd",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MidpointTestCase.test_even": {
            "name": "test_even",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "highpy-master/singly_linked_list/tests/__init__.py": {},
    "highpy-master/socket_module/client.py": {},
    "highpy-master/socket_module/sever.py": {},
    "highpy-master/socket_module/__init__.py": {}
}
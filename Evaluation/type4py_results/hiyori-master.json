{
    "hiyori-master/hiyori/bodies.py": {
        "BytesRequestBody.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "io.StringIO",
                    "str",
                    "bytes"
                ]
            }
        },
        "UrlEncodedRequestBody.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__map": [
                    "Mapping[str, str]",
                    "str",
                    "Union[str, dict]",
                    "int"
                ]
            }
        },
        "JsonRequestBody.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "set",
                    "Optional[List[dict]]",
                    "IO[bytes]",
                    "dict"
                ]
            }
        },
        "ResponseBody.to_json": {
            "name": "to_json",
            "location": 129,
            "return": [
                "str",
                "Optional[int]",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseBody.to_str": {
            "name": "to_str",
            "location": 134,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "hiyori-master/hiyori/connection.py": {
        "HttpConnectionId.port": {
            "name": "port",
            "location": 33,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpConnectionId.hostname": {
            "name": "hostname",
            "location": 45,
            "return": [
                "List[int]",
                "List[List[int]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpConnection.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__conn_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "HttpConnection._set_idle_timeout": {
            "name": "_set_idle_timeout",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpConnection._cancel_idle_timeout": {
            "name": "_cancel_idle_timeout",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpConnection.close": {
            "name": "close",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpConnection.closing": {
            "name": "closing",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpConnection.get_ready.create_conn": {
            "name": "create_conn",
            "location": 102,
            "return": [
                "Iterable[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "hiyori-master/hiyori/constants.py": {},
    "hiyori-master/hiyori/exceptions.py": {
        "HttpError.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__response": [
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HttpError.response": {
            "name": "response",
            "location": 84,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpError.status_code": {
            "name": "status_code",
            "location": 88,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpError.status_description": {
            "name": "status_description",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManyRedirects.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_request": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TooManyRedirects.last_request": {
            "name": "last_request",
            "location": 115,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/http_client.py": {
        "_ReadLock.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_lock": [
                    "str",
                    "float"
                ]
            }
        },
        "_CloseLock.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_lock": [
                    "str",
                    "float"
                ]
            }
        },
        "_ClientLock.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpClient.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpClient.resolver": {
            "name": "resolver",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/messages.py": {
        "PendingRequest.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__method": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Iterable[str]"
                ]
            }
        },
        "PendingRequest.method": {
            "name": "method",
            "location": 81,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.version": {
            "name": "version",
            "location": 85,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.uri": {
            "name": "uri",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.authority": {
            "name": "authority",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.scheme": {
            "name": "scheme",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.headers": {
            "name": "headers",
            "location": 109,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.body": {
            "name": "body",
            "location": 113,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.conn_id": {
            "name": "conn_id",
            "location": 117,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingRequest.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Request.method": {
            "name": "method",
            "location": 145,
            "return": [
                "str",
                "int",
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.version": {
            "name": "version",
            "location": 149,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.uri": {
            "name": "uri",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.authority": {
            "name": "authority",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.scheme": {
            "name": "scheme",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 165,
            "return": [
                "str",
                "int",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__str__": {
            "name": "__str__",
            "location": 185,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List['cirq.Circuit']"
                ],
                "reader": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List['cirq.Circuit']"
                ],
                "conn": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List['cirq.Circuit']"
                ],
                "body": [
                    "str",
                    "int",
                    "Optional[bytes]",
                    "Optional[str]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response.request": {
            "name": "request",
            "location": 207,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.status_code": {
            "name": "status_code",
            "location": 211,
            "return": [
                "str",
                "Dict[int, Dict]",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.version": {
            "name": "version",
            "location": 215,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 219,
            "return": [
                "str",
                "int",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.reader": {
            "name": "reader",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.body": {
            "name": "body",
            "location": 227,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__str__": {
            "name": "__str__",
            "location": 240,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__del__": {
            "name": "__del__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/multipart.py": {
        "_StrField.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "prefix": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "_FileField.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__fp": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "List[str]",
                    "bool"
                ],
                "headers": [
                    "bytes",
                    "Dict[str, str]"
                ],
                "prefix": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, int]",
                    "\"Snap\"",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "_FileField._prefix": {
            "name": "_prefix",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__fp": [
                    "io.BytesIO",
                    "BinaryIO",
                    "bytes"
                ],
                "filename": [
                    "str"
                ],
                "content_type": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "kedro.io.core.AbstractDataSet",
                    "BinaryIO",
                    "dict"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "File._to_file_field": {
            "name": "_to_file_field",
            "location": 121,
            "return": [
                "tuple",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "MultipartRequestBody.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form_dict": [
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, int]",
                    "dict"
                ]
            }
        },
        "MultipartRequestBody.boundary": {
            "name": "boundary",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartRequestBody.content_type": {
            "name": "content_type",
            "location": 189,
            "return": [
                "bytes",
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/_version.py": {},
    "hiyori-master/hiyori/__init__.py": {},
    "hiyori-master/hiyori/resolvers/async_.py": {
        "AsyncResolver.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/resolvers/base.py": {
        "ResolvedResult.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolvedResult.expired": {
            "name": "expired",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResolver.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResolver.override": {
            "name": "override",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "port": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "resolve_to": [
                    "int",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "BaseResolver.remove_override": {
            "name": "remove_override",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[ssl.SSLContext]"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[ssl.SSLContext]"
                ]
            }
        },
        "ResolvedResult.connect_fastest.read_result": {
            "name": "read_result",
            "location": 129,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[List[int]]"
            ],
            "arguments": {}
        }
    },
    "hiyori-master/hiyori/resolvers/hosts.py": {
        "HostsResolver.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/resolvers/https.py": {
        "HttpsResolver.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/hiyori/resolvers/system.py": {},
    "hiyori-master/hiyori/resolvers/__init__.py": {},
    "hiyori-master/tests/conftest.py": {
        "update_resolver": {
            "name": "update_resolver",
            "location": 29,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {}
        },
        "event_loop": {
            "name": "event_loop",
            "location": 49,
            "return": [
                "typing.Generator[asyncio.AbstractEventLoop, None, None]"
            ],
            "arguments": {}
        },
        "mocked_server": {
            "name": "mocked_server",
            "location": 61,
            "return": [
                "typing.Generator[helpers.MockedServer, None, None]"
            ],
            "arguments": {
                "event_loop": [
                    "str",
                    "dict",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "mocked_unix_server": {
            "name": "mocked_unix_server",
            "location": 79,
            "return": [
                "typing.Generator[helpers.MockedUnixServer, None, None]"
            ],
            "arguments": {
                "event_loop": [
                    "asyncio.AbstractEventLoop",
                    "Dict[str, Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "hiyori-master/tests/helpers.py": {
        "get_version_str": {
            "name": "get_version_str",
            "location": 31,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_version_bytes": {
            "name": "get_version_bytes",
            "location": 35,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_SkeletonProtocol.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srv": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_SkeletonProtocol.connection_made": {
            "name": "connection_made",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_SkeletonProtocol.data_received": {
            "name": "data_received",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Tuple[int, int, bytearray]",
                    "bytes",
                    "dict",
                    "Hashable",
                    "int",
                    "OrderedDict"
                ]
            }
        },
        "_SkeletonProtocol.eof_received": {
            "name": "eof_received",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SkeletonProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "BaseMockProtocol.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMockProtocol.connection_made": {
            "name": "connection_made",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "asyncio.BaseTransport",
                    "int",
                    "bool"
                ]
            }
        },
        "BaseMockProtocol.data_received": {
            "name": "data_received",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "float",
                    "Mapping[str, Any]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BaseMockProtocol.eof_received": {
            "name": "eof_received",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMockProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseMockProtocol.assert_initial": {
            "name": "assert_initial",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_line": [
                    "str",
                    "list",
                    "bool",
                    "callable",
                    "List[Dict]",
                    "Callable"
                ]
            }
        },
        "MockedServer.avail_tcp_port": {
            "name": "avail_tcp_port",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "MockedServer.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedServer.select_proto": {
            "name": "select_proto",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedUnixServer.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedUnixServer.select_proto": {
            "name": "select_proto",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiyori-master/tests/test_async_resolver.py": {},
    "hiyori-master/tests/test_delete.py": {
        "DeleteEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_get.py": {
        "GetEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        },
        "JsonResponseProtocol.connection_made": {
            "name": "connection_made",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        },
        "AlwaysRedirectProtocol.data_received": {
            "name": "data_received",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "Redirect10TimesProtocol.connection_made": {
            "name": "connection_made",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RelativeRedirectProtocol.connection_made": {
            "name": "connection_made",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Http404Protocol.connection_made": {
            "name": "connection_made",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        },
        "ConnectionClosedProtocol.connection_made": {
            "name": "connection_made",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "UrandomProtocol.connection_made": {
            "name": "connection_made",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "MalformedProtocol.connection_made": {
            "name": "connection_made",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_head.py": {
        "HeadEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_hosts_resolver.py": {},
    "hiyori-master/tests/test_https_resolver.py": {},
    "hiyori-master/tests/test_multipart.py": {
        "MultipartEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_options.py": {
        "DeleteEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_patch.py": {
        "PatchEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_post.py": {
        "PostEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_put.py": {
        "PutEchoProtocol.connection_made": {
            "name": "connection_made",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.Transport",
                    "bool"
                ]
            }
        }
    },
    "hiyori-master/tests/test_system_resolver.py": {}
}
{
    "hmt-basemodels-master/setup.py": {},
    "hmt-basemodels-master/basemodels/via.py": {},
    "hmt-basemodels-master/basemodels/__init__.py": {},
    "hmt-basemodels-master/basemodels/manifest/manifest.py": {
        "validate_request_type": {
            "name": "validate_request_type",
            "location": 31,
            "return": [
                "str",
                "list",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool",
                    "list",
                    "Optional[Dict]",
                    "Iterable"
                ],
                "data": [
                    "str",
                    "type",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "list",
                    "Optional[Dict]",
                    "Iterable"
                ]
            }
        },
        "traverse_json_entries": {
            "name": "traverse_json_entries",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, Any]"
                ],
                "callback": [
                    "Callable",
                    "dict",
                    "bytes",
                    "str",
                    "Union[Dict, List]",
                    "Dict[str, str]"
                ]
            }
        },
        "validate_manifest_uris": {
            "name": "validate_manifest_uris",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "manifest": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "NestedManifest.validate_requester_restricted_answer_set": {
            "name": "validate_requester_restricted_answer_set",
            "location": 109,
            "return": [
                "str",
                "dict",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "zerver.lib.types.ProfileFieldData"
                ],
                "value": [
                    "list",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Tuple[bytes, bytes]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "NestedManifest.validate_requester_question_example": {
            "name": "validate_requester_question_example",
            "location": 129,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, utils.types.A]",
                    "Dict[str, Any]",
                    "Dict[Any, int]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "List[List[Any]]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "NestedManifest.validate_groundtruth": {
            "name": "validate_groundtruth",
            "location": 153,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "zerver.lib.types.ProfileFieldData",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "value": [
                    "bool",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "Manifest.validate_requester_restricted_answer_set": {
            "name": "validate_requester_restricted_answer_set",
            "location": 175,
            "return": [
                "str",
                "dict",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "zerver.lib.types.ProfileFieldData"
                ],
                "value": [
                    "list",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Tuple[bytes, bytes]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Manifest.validate_requester_question_example": {
            "name": "validate_requester_question_example",
            "location": 194,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, utils.types.A]",
                    "Dict[str, Any]",
                    "Dict[Any, int]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "List[List[Any]]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "Manifest.validate_groundtruth": {
            "name": "validate_groundtruth",
            "location": 246,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "zerver.lib.types.ProfileFieldData",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "value": [
                    "bool",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "Manifest.validate_taskdata_uri": {
            "name": "validate_taskdata_uri",
            "location": 259,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "bytes",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "value": [
                    "bool",
                    "dict",
                    "Mapping"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/manifest/restricted_audience.py": {
        "ScoreType.validate_score": {
            "name": "validate_score",
            "location": 8,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[T]",
                    "Iterable",
                    "list",
                    "float"
                ]
            }
        },
        "RestrictedAudience.keys_iterator": {
            "name": "keys_iterator",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "SupportsBytes",
                    "Sequence[str]",
                    "faustypes.models.T"
                ]
            }
        },
        "RestrictedAudience.keys_single_check": {
            "name": "keys_single_check",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "List[T]",
                    "T",
                    "Union[str, list]",
                    "dict"
                ]
            }
        },
        "RestrictedAudience.keys_lowercase_check": {
            "name": "keys_lowercase_check",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "List[T]",
                    "T",
                    "Union[str, list]",
                    "dict"
                ]
            }
        },
        "RestrictedAudience.keys_uuid_check": {
            "name": "keys_uuid_check",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "List[T]",
                    "T",
                    "Union[str, list]",
                    "dict"
                ]
            }
        },
        "RestrictedAudience.keys_choices_check": {
            "name": "keys_choices_check",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "List[T]",
                    "T",
                    "Union[str, list]",
                    "dict"
                ],
                "choices": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "RestrictedAudience.validate_lang": {
            "name": "validate_lang",
            "location": 77,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[float]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RestrictedAudience.validate_country": {
            "name": "validate_country",
            "location": 81,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[float]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RestrictedAudience.validate_browser": {
            "name": "validate_browser",
            "location": 85,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "T",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple]"
                ]
            }
        },
        "RestrictedAudience.validate_sitekey": {
            "name": "validate_sitekey",
            "location": 89,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[float]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RestrictedAudience.validate_serverdomain": {
            "name": "validate_serverdomain",
            "location": 93,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[float]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RestrictedAudience.validate_confidence": {
            "name": "validate_confidence",
            "location": 97,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "T",
                    "str",
                    "list",
                    "bytes",
                    "List[Tuple]"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/manifest/__init__.py": {},
    "hmt-basemodels-master/basemodels/manifest/data/groundtruth.py": {
        "create_wrapper_model": {
            "name": "create_wrapper_model",
            "location": 6,
            "return": [
                "str",
                "django.db.models.QuerySet",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "type": [
                    "str",
                    "dict",
                    "Tuple[int, str]"
                ]
            }
        },
        "validate_wrapper_model": {
            "name": "validate_wrapper_model",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "Model": [
                    "str",
                    "T",
                    "zerver.models.Realm",
                    "dict"
                ],
                "data": [
                    "str",
                    "T",
                    "zerver.models.Realm",
                    "dict"
                ]
            }
        },
        "validate_groundtruth_entry": {
            "name": "validate_groundtruth_entry",
            "location": 80,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "value": [
                    "Union[dict, list]",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "dict",
                    "app.models.SpamResult",
                    "bytes"
                ],
                "request_type": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/manifest/data/preprocess.py": {
        "Preprocess.to_dict": {
            "name": "to_dict",
            "location": 8,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-basemodels-master/basemodels/manifest/data/taskdata.py": {
        "validate_taskdata_entry": {
            "name": "validate_taskdata_entry",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "travelfootprininsta.types.FeedItem"
                ]
            }
        },
        "TaskDataEntry.validate_metadata": {
            "name": "validate_metadata",
            "location": 33,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict",
                    "Mapping"
                ],
                "value": [
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/manifest/data/__init__.py": {},
    "hmt-basemodels-master/basemodels/pydantic/via.py": {},
    "hmt-basemodels-master/basemodels/pydantic/__init__.py": {},
    "hmt-basemodels-master/basemodels/pydantic/manifest/manifest.py": {
        "validator_taskdata_uri": {
            "name": "validator_taskdata_uri",
            "location": 16,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "T"
                ],
                "value": [
                    "T"
                ],
                "values": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "validate_uuid": {
            "name": "validate_uuid",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "validate_groundtruth_uri": {
            "name": "validate_groundtruth_uri",
            "location": 334,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "manifest": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "validate_taskdata_uri": {
            "name": "validate_taskdata_uri",
            "location": 365,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "manifest": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "validate_manifest_uris": {
            "name": "validate_manifest_uris",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "manifest": [
                    "dict",
                    "List[str]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "RequestTypeValidator.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multi_challenge": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "RequestTypeValidator.validate": {
            "name": "validate",
            "location": 47,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "T"
                ],
                "value": [
                    "str",
                    "Callable",
                    "cincoconfig.fields.InstanceMethodField"
                ],
                "values": [
                    "str",
                    "bool",
                    "Dict[str, tuple]",
                    "dict",
                    "int",
                    "Dict[str, Callable]"
                ]
            }
        },
        "Model.to_primitive": {
            "name": "to_primitive",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.check": {
            "name": "check",
            "location": 74,
            "return": [
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "return_new": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "NestedManifest.validate_requester_restricted_answer_set": {
            "name": "validate_requester_restricted_answer_set",
            "location": 145,
            "return": [
                "str",
                "dict",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "str",
                    "dict"
                ],
                "value": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "list"
                ],
                "values": [
                    "Callable",
                    "list",
                    "List[str]",
                    "type"
                ]
            }
        },
        "NestedManifest.validate_requester_question_example": {
            "name": "validate_requester_question_example",
            "location": 164,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "T"
                ],
                "value": [
                    "Iterable",
                    "Mapping[str, Any]",
                    "dict",
                    "T",
                    "Sequence[Any]"
                ],
                "values": [
                    "Iterable",
                    "Mapping[str, Any]",
                    "dict",
                    "T",
                    "Sequence[Any]"
                ]
            }
        },
        "NestedManifest.validate_groundtruth": {
            "name": "validate_groundtruth",
            "location": 188,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[[], None]",
                    "KT",
                    "str",
                    "T",
                    "list",
                    "float"
                ],
                "v": [
                    "bool",
                    "Callable[[], None]",
                    "KT",
                    "str",
                    "T",
                    "list",
                    "float"
                ],
                "values": [
                    "enum.Enum",
                    "float",
                    "str",
                    "Callable[[None], bool]",
                    "int"
                ]
            }
        },
        "Manifest.validate_min_repeats": {
            "name": "validate_min_repeats",
            "location": 273,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[[], None]",
                    "KT",
                    "str",
                    "T",
                    "list",
                    "float"
                ],
                "v": [
                    "int",
                    "bool",
                    "str"
                ],
                "values": [
                    "bool",
                    "Callable[[], None]",
                    "KT",
                    "str",
                    "T",
                    "list",
                    "float"
                ]
            }
        },
        "Manifest.validate_groundtruth": {
            "name": "validate_groundtruth",
            "location": 280,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "T"
                ],
                "value": [
                    "T"
                ],
                "values": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Manifest.validate_requester_restricted_answer_set": {
            "name": "validate_requester_restricted_answer_set",
            "location": 288,
            "return": [
                "str",
                "dict",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "str",
                    "dict"
                ],
                "value": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "list"
                ],
                "values": [
                    "Callable",
                    "list",
                    "List[str]",
                    "type"
                ]
            }
        },
        "Manifest.validate_requester_question_example": {
            "name": "validate_requester_question_example",
            "location": 301,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "T"
                ],
                "value": [
                    "Iterable",
                    "Mapping[str, Any]",
                    "dict",
                    "T",
                    "Sequence[Any]"
                ],
                "values": [
                    "Iterable",
                    "Mapping[str, Any]",
                    "dict",
                    "T",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/pydantic/manifest/restricted_audience.py": {
        "RestrictedAudience.dict": {
            "name": "dict",
            "location": 36,
            "return": [
                "dict",
                "int",
                "Dict[int, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictedAudience.json": {
            "name": "json",
            "location": 40,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictedAudience.validate_score_fields": {
            "name": "validate_score_fields",
            "location": 45,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Iterable[str]"
                ],
                "values": [
                    "dict",
                    "Mapping[str, Dict[str, Any]]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "RestrictedAudience.validate_sitekey": {
            "name": "validate_sitekey",
            "location": 61,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[T]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/pydantic/manifest/__init__.py": {},
    "hmt-basemodels-master/basemodels/pydantic/manifest/data/groundtruth.py": {
        "create_wrapper_model": {
            "name": "create_wrapper_model",
            "location": 7,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "type": [
                    "Optional[str]",
                    "Tuple[Type]"
                ]
            }
        },
        "validate_wrapper_model": {
            "name": "validate_wrapper_model",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "Model": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "Type[Any]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "Type[Any]"
                ]
            }
        },
        "validate_groundtruth_entry": {
            "name": "validate_groundtruth_entry",
            "location": 81,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "value": [
                    "Union[dict, list]",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "dict",
                    "bytes"
                ],
                "request_type": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/pydantic/manifest/data/preprocess.py": {
        "Preprocess.to_dict": {
            "name": "to_dict",
            "location": 14,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-basemodels-master/basemodels/pydantic/manifest/data/taskdata.py": {
        "validate_taskdata_entry": {
            "name": "validate_taskdata_entry",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TaskDataEntry.validate_datapoint_uri": {
            "name": "validate_datapoint_uri",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "bytes",
                    "float",
                    "Callable[[object], Any]",
                    "type"
                ]
            }
        },
        "TaskDataEntry.validate_metadata": {
            "name": "validate_metadata",
            "location": 35,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]",
                    "Callable",
                    "str",
                    "Optional[T]"
                ]
            }
        }
    },
    "hmt-basemodels-master/basemodels/pydantic/manifest/data/__init__.py": {},
    "hmt-basemodels-master/tests/both_models.py": {
        "create_manifest": {
            "name": "create_manifest",
            "location": 49,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "create_nested_manifest": {
            "name": "create_nested_manifest",
            "location": 56,
            "return": [
                "int",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_webhook": {
            "name": "create_webhook",
            "location": 63,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "str",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "model": [
                    "Type[T]",
                    "str"
                ]
            }
        },
        "validate_func": {
            "name": "validate_func",
            "location": 79,
            "return": [],
            "arguments": {
                "model": [
                    "Type[T]",
                    "int"
                ]
            }
        },
        "a_manifest": {
            "name": "a_manifest",
            "location": 90,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "number_of_tasks": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "bid_amount": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "oracle_stake": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "expiration_date": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "minimum_trust": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "request_type": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "request_config": [
                    "dict",
                    "str",
                    "List[Tuple[str, str, int]]",
                    "Optional[List[str]]"
                ],
                "job_mode": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "multi_challenge_manifests": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "a_nested_manifest": {
            "name": "a_nested_manifest",
            "location": 139,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request_type": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "minimum_trust": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "request_config": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "ManifestTest.test_basic_construction": {
            "name": "test_basic_construction",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_serialize": {
            "name": "test_can_serialize",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_fail_toconstruct": {
            "name": "test_can_fail_toconstruct",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_fail_toconstruct2": {
            "name": "test_can_fail_toconstruct2",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_make_request_config_job": {
            "name": "test_can_make_request_config_job",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_make_nested_request_config_job_single_nest": {
            "name": "test_can_make_nested_request_config_job_single_nest",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_make_nested_request_config_job_multiple_nest": {
            "name": "test_can_make_nested_request_config_job_multiple_nest",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_can_bad_request_config": {
            "name": "test_can_bad_request_config",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_gets_default_restrictedanswerset": {
            "name": "test_gets_default_restrictedanswerset",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_confcalc_configuration_id": {
            "name": "test_confcalc_configuration_id",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_url_or_list_for_example": {
            "name": "test_url_or_list_for_example",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_restricted_audience": {
            "name": "test_restricted_audience",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_parse_restricted_audience": {
            "name": "test_parse_restricted_audience",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_restricted_audience_only": {
            "name": "test_restricted_audience_only",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_realistic_multi_challenge_example": {
            "name": "test_realistic_multi_challenge_example",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_webhook": {
            "name": "test_webhook",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_invalid_example_images": {
            "name": "test_invalid_example_images",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_default_only_sign_results": {
            "name": "test_default_only_sign_results",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ViaTest.test_via_legacy_case": {
            "name": "test_via_legacy_case",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ViaTest.test_via_v1_case": {
            "name": "test_via_v1_case",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.register_http_response": {
            "name": "register_http_response",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "Dict[str, str]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "manifest": [
                    "str",
                    "VT",
                    "int",
                    "bool"
                ],
                "body": [
                    "Dict[str, str]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestValidateManifestUris.validate_groundtruth_response": {
            "name": "validate_groundtruth_response",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_type": [
                    "str",
                    "Optional[str]"
                ],
                "body": [
                    "str",
                    "Union[str, \"DatabaseURL\"]",
                    "Optional[Any]",
                    "Union[str, Iterable[str]]",
                    "Optional[str]"
                ]
            }
        },
        "TestValidateManifestUris.test_no_uris": {
            "name": "test_no_uris",
            "location": 687,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilb_valid": {
            "name": "test_groundtruth_uri_ilb_valid",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilb_invalid": {
            "name": "test_groundtruth_uri_ilb_invalid",
            "location": 700,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilb_invalid_format": {
            "name": "test_groundtruth_uri_ilb_invalid_format",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilmc_valid": {
            "name": "test_groundtruth_uri_ilmc_valid",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilmc_invalid_key": {
            "name": "test_groundtruth_uri_ilmc_invalid_key",
            "location": 721,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilmc_invalid_value": {
            "name": "test_groundtruth_uri_ilmc_invalid_value",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilas_valid": {
            "name": "test_groundtruth_uri_ilas_valid",
            "location": 735,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilas_invalid_key": {
            "name": "test_groundtruth_uri_ilas_invalid_key",
            "location": 750,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_uri_ilas_invalid_value": {
            "name": "test_groundtruth_uri_ilas_invalid_value",
            "location": 766,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_taskdata_empty": {
            "name": "test_taskdata_empty",
            "location": 772,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_taskdata_invalid_format": {
            "name": "test_taskdata_invalid_format",
            "location": 783,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_taskdata_uri_valid": {
            "name": "test_taskdata_uri_valid",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_taskdata_uri_invalid": {
            "name": "test_taskdata_uri_invalid",
            "location": 814,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_groundtruth_and_taskdata_valid": {
            "name": "test_groundtruth_and_taskdata_valid",
            "location": 824,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateManifestUris.test_mitl_in_internal_config": {
            "name": "test_mitl_in_internal_config",
            "location": 856,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskEntryTest.test_valid_entry_is_true": {
            "name": "test_valid_entry_is_true",
            "location": 882,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManifestTest.test_restricted_audience_only.assert_raises": {
            "name": "assert_raises",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hmt-basemodels-master/tests/test_preprocess.py": {
        "PipelineTest.test_preprocess": {
            "name": "test_preprocess",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineTest.test_preprocess_raise": {
            "name": "test_preprocess_raise",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineTest.test_preprocess_to_dict": {
            "name": "test_preprocess_to_dict",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-basemodels-master/tests/test_pydantic.py": {
        "PydanticTest.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticTest.test_example_err": {
            "name": "test_example_err",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticTest.test_working": {
            "name": "test_working",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticTest.test_unique_id": {
            "name": "test_unique_id",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticTest.test_taskdata": {
            "name": "test_taskdata",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticTest.test_default_only_sign_results": {
            "name": "test_default_only_sign_results",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-basemodels-master/tests/test_pydantic_preprocess.py": {
        "PipelineTest.test_preprocess": {
            "name": "test_preprocess",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineTest.test_preprocess_raise": {
            "name": "test_preprocess_raise",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PipelineTest.test_preprocess_to_dict": {
            "name": "test_preprocess_to_dict",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "hologram-master/setup.py": {
        "read": {
            "name": "read",
            "location": 12,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "memoryview",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hologram-master/hologram/helpers.py": {
        "StrLiteral": {
            "name": "StrLiteral",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "register_pattern": {
            "name": "register_pattern",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "base_type": [
                    "Type",
                    "str",
                    "Dict[str, Any]"
                ],
                "pattern": [
                    "str",
                    "int",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "StrEnum.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrEnum._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "start": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "count": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "last_values": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "HyphenatedJsonSchemaMixin.field_mapping": {
            "name": "field_mapping",
            "location": 38,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "AbstractSet[str]",
                    "str",
                    "\"Project\"",
                    "Container[str]"
                ]
            }
        },
        "register_pattern.PatternEncoder.json_schema": {
            "name": "json_schema",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hologram-master/hologram/__init__.py": {
        "is_enum": {
            "name": "is_enum",
            "location": 78,
            "return": [],
            "arguments": {
                "field_type": [
                    "Type",
                    "str",
                    "bool"
                ]
            }
        },
        "issubclass_safe": {
            "name": "issubclass_safe",
            "location": 82,
            "return": [
                "bool",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "klass": [
                    "Type",
                    "int",
                    "Type[enum.Enum]",
                    "float",
                    "BinaryIO",
                    "str",
                    "Type[T]"
                ],
                "base": [
                    "Type",
                    "int",
                    "Type[enum.Enum]",
                    "float",
                    "BinaryIO",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "is_optional": {
            "name": "is_optional",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "_to_camel_case": {
            "name": "_to_camel_case",
            "location": 163,
            "return": [
                "bool",
                "Optional[Exception]",
                "Optional[bool]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "datetime.timedelta",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes"
                ]
            }
        },
        "_validate_schema": {
            "name": "_validate_schema",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "h_schema_cls": [
                    "float"
                ]
            }
        },
        "_get_restrictions": {
            "name": "_get_restrictions",
            "location": 203,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "variant_type": [
                    "Type",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_union_fields": {
            "name": "get_union_fields",
            "location": 219,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "field_type": [
                    "str",
                    "type"
                ]
            }
        },
        "_encode_restrictions_met": {
            "name": "_encode_restrictions_met",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "restrict_fields": [
                    "Optional[List[Any]]",
                    "Optional[int]",
                    "bool",
                    "Hashable",
                    "Optional[List[str]]"
                ]
            }
        },
        "_decode_restrictions_met": {
            "name": "_decode_restrictions_met",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "list"
                ],
                "restrict_fields": [
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Optional[T]",
                    "T",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "FutureValidationError.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "int",
                    "type",
                    "Iterable[Field]"
                ],
                "errors": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "FutureValidationError.late_initialize": {
            "name": "late_initialize",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureValidationError.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldEncoder.to_wire": {
            "name": "to_wire",
            "location": 106,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "FieldEncoder.to_python": {
            "name": "to_python",
            "location": 109,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "FieldEncoder.json_schema": {
            "name": "json_schema",
            "location": 113,
            "return": [
                "JsonDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeFieldEncoder.to_wire": {
            "name": "to_wire",
            "location": 120,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "Hashable",
                    "int",
                    "T"
                ]
            }
        },
        "DateTimeFieldEncoder.to_python": {
            "name": "to_python",
            "location": 128,
            "return": [
                "datetime.datetime",
                "int",
                "Union[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "DateTimeFieldEncoder.json_schema": {
            "name": "json_schema",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UuidField.to_wire": {
            "name": "to_wire",
            "location": 139,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "uuid.UUID",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "UuidField.to_python": {
            "name": "to_python",
            "location": 142,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "uuid.UUID",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "UuidField.json_schema": {
            "name": "json_schema",
            "location": 146,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMeta.as_dict": {
            "name": "as_dict",
            "location": 179,
            "return": [
                "bytes",
                "bool",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Type[Any]]",
                "Dict[int, str]",
                "List[\"ElementHandle\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaMixin.field_mapping": {
            "name": "field_mapping",
            "location": 304,
            "return": [
                "float",
                "datetime.datetime",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type",
                    "str",
                    "Type[T]",
                    "Callable[[Any], T]",
                    "List[str]"
                ]
            }
        },
        "JsonSchemaMixin.register_field_encoders": {
            "name": "register_field_encoders",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "type"
                ],
                "field_encoders": [
                    "Dict[str, Any]"
                ]
            }
        },
        "JsonSchemaMixin._local_to_dict": {
            "name": "_local_to_dict",
            "location": 322,
            "return": [
                "bytes",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaMixin._encode_field": {
            "name": "_encode_field",
            "location": 326,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.date]",
                "Union[str, int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "field_type": [
                    "bool",
                    "type"
                ],
                "value": [
                    "bool"
                ],
                "omit_none": [
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin._get_fields": {
            "name": "_get_fields",
            "location": 443,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[Any]",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JsonSchemaMixin._get_field_names": {
            "name": "_get_field_names",
            "location": 465,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "JsonSchemaMixin.to_dict": {
            "name": "to_dict",
            "location": 472,
            "return": [
                "bytes",
                "dict",
                "Sequence",
                "Union[Dict, Tuple]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "omit_none": [
                    "Callable"
                ],
                "validate": [
                    "Optional[Callable[[dict], None]]",
                    "Dict[str, str]",
                    "Iterable['Notification']"
                ]
            }
        },
        "JsonSchemaMixin._decode_field": {
            "name": "_decode_field",
            "location": 492,
            "return": [
                "int",
                "Optional[List[str]]",
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "schema.Field",
                    "Type[Any]",
                    "List[str]"
                ],
                "field": [
                    "str"
                ],
                "field_type": [
                    "Sequence[Dict[str, Any]]"
                ],
                "value": [
                    "str"
                ],
                "validate": [
                    "bool",
                    "int"
                ]
            }
        },
        "JsonSchemaMixin._find_matching_validator": {
            "name": "_find_matching_validator",
            "location": 616,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Optional[int]",
                    "bool",
                    "complex",
                    "bytes"
                ],
                "data": [
                    "Type[T]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Type",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "JsonSchemaMixin.from_dict": {
            "name": "from_dict",
            "location": 636,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "Dict[str, Dict]",
                "Union[int, float]",
                "dict",
                "Dict[str, dict]",
                "List[dict]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Dict[str, Union[str, int]]"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "type"
                ],
                "validate": [
                    "dict",
                    "Optional[List[Any]]",
                    "Dict[str, str]",
                    "Type[T]"
                ]
            }
        },
        "JsonSchemaMixin._is_json_schema_subclass": {
            "name": "_is_json_schema_subclass",
            "location": 667,
            "return": [],
            "arguments": {
                "field_type": [
                    "Type",
                    "str",
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin._has_definition": {
            "name": "_has_definition",
            "location": 671,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "field_type": [
                    "Type",
                    "list"
                ]
            }
        },
        "JsonSchemaMixin._get_field_meta": {
            "name": "_get_field_meta",
            "location": 678,
            "return": [
                "List[str]",
                "bool",
                "MutableMapping[str, int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable[[T], bool]",
                    "str"
                ],
                "field": [
                    "dict",
                    "dataclasses.Field",
                    "str",
                    "Optional[tortoise.fields.Field]",
                    "django.db.models.fields.Field",
                    "Union[django.db.models.fields.Field, django.db.models.fields.reverse_related.ForeignObjectRel]",
                    "Dict[str, List[int]]"
                ]
            }
        },
        "JsonSchemaMixin._encode_restrictions": {
            "name": "_encode_restrictions",
            "location": 705,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "Collection[str]",
                    "str",
                    "dict"
                ],
                "restrictions": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "JsonSchemaMixin._get_schema_for_type": {
            "name": "_get_schema_for_type",
            "location": 737,
            "return": [
                "List[str]",
                "enum.Enum"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "target": [
                    "str",
                    "Type"
                ],
                "required": [
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "restrictions": [
                    "Optional[List[Any]]",
                    "dict",
                    "dataclasses.Field",
                    "int",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JsonSchemaMixin._get_field_schema": {
            "name": "_get_field_schema",
            "location": 814,
            "return": [
                "List[str]",
                "bool",
                "MutableMapping[str, int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "pydantic.fields.ModelField",
                    "rflx.model.Field"
                ],
                "field": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "JsonSchemaMixin._get_field_definitions": {
            "name": "_get_field_definitions",
            "location": 845,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "field_type": [
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "bool",
                    "type",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "definitions": [
                    "type",
                    "str",
                    "Exception"
                ]
            }
        },
        "JsonSchemaMixin.all_json_schemas": {
            "name": "all_json_schemas",
            "location": 872,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "JsonSchemaMixin._collect_json_schema": {
            "name": "_collect_json_schema",
            "location": 883,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "definitions": [
                    "str",
                    "type"
                ]
            }
        },
        "JsonSchemaMixin._schema_defs_from_cache": {
            "name": "_schema_defs_from_cache",
            "location": 908,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[\"SerializationDialect\"]",
                    "List[Dict]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "definitions": [
                    "Type",
                    "Type[T]",
                    "int",
                    "bool",
                    "type"
                ]
            }
        },
        "JsonSchemaMixin._json_schema_recursive": {
            "name": "_json_schema_recursive",
            "location": 937,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]"
                ],
                "embeddable": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "definitions": [
                    "Dict[str, Any]"
                ]
            }
        },
        "JsonSchemaMixin.json_schema": {
            "name": "json_schema",
            "location": 954,
            "return": [
                "Iterable[str]",
                "float",
                "int"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]"
                ],
                "embeddable": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "JsonSchemaMixin._get_field_type_name": {
            "name": "_get_field_type_name",
            "location": 974,
            "return": [
                "str"
            ],
            "arguments": {
                "field_type": [
                    "str",
                    "Callable"
                ]
            }
        },
        "JsonSchemaMixin.validate": {
            "name": "validate",
            "location": 983,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Iterable",
                    "Callable",
                    "int"
                ],
                "data": [
                    "bytes",
                    "int",
                    "Exception",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "JsonSchemaMixin._encode_field.encoder": {
            "name": "encoder",
            "location": 436,
            "return": [],
            "arguments": {
                "_": [],
                "v": [],
                "__": []
            }
        },
        "JsonSchemaMixin._decode_field.decoder": {
            "name": "decoder",
            "location": 604,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "val": []
            }
        }
    },
    "hologram-master/tests/conftest.py": {
        "PostcodeField.json_schema": {
            "name": "json_schema",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.field_mapping": {
            "name": "field_mapping",
            "location": 39,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type",
                    "str",
                    "Type[T]",
                    "Callable[[Any], T]",
                    "List[str]"
                ]
            }
        },
        "ShoppingCart.cost": {
            "name": "cost",
            "location": 101,
            "return": [
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "Counter",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hologram-master/tests/test_all.py": {
        "test_field_with_default_factory": {
            "name": "test_field_with_default_factory",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_field_with_default_dataclass": {
            "name": "test_field_with_default_dataclass",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_schema": {
            "name": "test_json_schema",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialise_deserialise": {
            "name": "test_serialise_deserialise",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_data": {
            "name": "test_invalid_data",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_newtype_field_validation": {
            "name": "test_newtype_field_validation",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_recursive_data": {
            "name": "test_recursive_data",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_recursive_validation": {
            "name": "test_recursive_validation",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_string_keys": {
            "name": "test_non_string_keys",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_union_schema": {
            "name": "test_type_union_schema",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_union_serialise": {
            "name": "test_type_union_serialise",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_union_deserialise": {
            "name": "test_type_union_deserialise",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_values": {
            "name": "test_default_values",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_factory": {
            "name": "test_default_factory",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional_field_no_default": {
            "name": "test_optional_field_no_default",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_required_union_field_no_default": {
            "name": "test_required_union_field_no_default",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/test_custom.py": {
        "test_registered": {
            "name": "test_registered",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ListOrTupleEncoder.to_wire": {
            "name": "to_wire",
            "location": 13,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ListOrTupleEncoder.to_python": {
            "name": "to_python",
            "location": 16,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "ListOrTupleEncoder.json_schema": {
            "name": "json_schema",
            "location": 20,
            "return": [
                "int",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOrTupleOrAloneEncoder.to_wire": {
            "name": "to_wire",
            "location": 25,
            "return": [
                "str",
                "Pattern",
                "List[str]",
                "bool",
                "Optional[str]",
                "int",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "list"
                ]
            }
        },
        "ListOrTupleOrAloneEncoder.to_python": {
            "name": "to_python",
            "location": 31,
            "return": [
                "str",
                "Pattern",
                "List[str]",
                "bool",
                "Optional[str]",
                "int",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "list"
                ]
            }
        },
        "ListOrTupleOrAloneEncoder.json_schema": {
            "name": "json_schema",
            "location": 38,
            "return": [
                "str",
                "T",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hologram-master/tests/test_dict_fields.py": {
        "test_schema": {
            "name": "test_schema",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/test_enums.py": {
        "test_symmetry": {
            "name": "test_symmetry",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation": {
            "name": "test_validation",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema": {
            "name": "test_schema",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symmetry.assert_symmetry": {
            "name": "assert_symmetry",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "hologram-master/tests/test_extended.py": {
        "extensible_dict": {
            "name": "extensible_dict",
            "location": 27,
            "return": [
                "bytes",
                "str",
                "List[dict]",
                "bytearray",
                "List[int]"
            ],
            "arguments": {}
        },
        "extra_data": {
            "name": "extra_data",
            "location": 32,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "extensible_dict": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "extensible": {
            "name": "extensible",
            "location": 39,
            "return": [
                "bytearray",
                "bytes",
                "str",
                "List[dict]",
                "float"
            ],
            "arguments": {}
        },
        "inextensible": {
            "name": "inextensible",
            "location": 44,
            "return": [
                "bytearray",
                "bytes",
                "str",
                "List[dict]",
                "float"
            ],
            "arguments": {}
        },
        "contains_extra_data": {
            "name": "contains_extra_data",
            "location": 49,
            "return": [
                "str",
                "bool",
                "Tuple[str, str]",
                "IO[str]",
                "Callable",
                "IO",
                "Optional[str]"
            ],
            "arguments": {
                "extra_data": [
                    "dict",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "contains": {
            "name": "contains",
            "location": 54,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "contains_dict": {
            "name": "contains_dict",
            "location": 59,
            "return": [
                "List[str]",
                "Callable",
                "int"
            ],
            "arguments": {
                "extensible_dict": [
                    "str",
                    "bool",
                    "float",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_extensible": {
            "name": "test_extensible",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "extra_data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "extensible_dict": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "extensible": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_inextensible": {
            "name": "test_inextensible",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "extra_data": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "extensible_dict": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ],
                "inextensible": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "test_contains": {
            "name": "test_contains",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "contains_extra_data": [
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "int",
                    "dict"
                ],
                "contains_dict": [
                    "dict",
                    "Dict[Any, Union[int, str]]",
                    "Dict[str, Any]"
                ],
                "contains": [
                    "bytes",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        }
    },
    "hologram-master/tests/test_inheritance.py": {
        "test_symmetry_StageOneFoo": {
            "name": "test_symmetry_StageOneFoo",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symmetry_StageTwoFoo": {
            "name": "test_symmetry_StageTwoFoo",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrong_class": {
            "name": "test_wrong_class",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inferred_class": {
            "name": "test_inferred_class",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tricky_unions": {
            "name": "test_tricky_unions",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_ok": {
            "name": "test_nested_ok",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bad_nested": {
            "name": "test_bad_nested",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symmetry_StageOneFoo.assert_symmetry_StageOne": {
            "name": "assert_symmetry_StageOne",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_symmetry_StageTwoFoo.assert_symmetry_StageTwo": {
            "name": "assert_symmetry_StageTwo",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hologram-master/tests/test_json.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_complex": {
            "name": "test_complex",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/test_multi_optional_definitions.py": {
        "test_encode": {
            "name": "test_encode",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decode": {
            "name": "test_decode",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_evil_union": {
            "name": "test_evil_union",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/test_polymorphism.py": {
        "test_symmetry": {
            "name": "test_symmetry",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_subclasses": {
            "name": "test_subclasses",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symmetry.assert_symmetry": {
            "name": "assert_symmetry",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "hologram-master/tests/test_regex.py": {
        "loud": {
            "name": "loud",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "loud_dict": {
            "name": "loud_dict",
            "location": 26,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "too_quiet": {
            "name": "too_quiet",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_loud": {
            "name": "test_loud",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "loud": [
                    "dict",
                    "Optional[Dict]"
                ],
                "loud_dict": [
                    "dict",
                    "Optional[Dict]"
                ],
                "too_quiet": [
                    "dict"
                ]
            }
        }
    },
    "hologram-master/tests/test_restrict.py": {
        "test_encode": {
            "name": "test_encode",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decode": {
            "name": "test_decode",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_symmetric": {
            "name": "test_multi_symmetric",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_schema_ok": {
            "name": "test_json_schema_ok",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bad_restrictions": {
            "name": "test_bad_restrictions",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_overlapping_restricted": {
            "name": "test_multi_overlapping_restricted",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/test_tuple.py": {
        "test_ellipsis_tuples": {
            "name": "test_ellipsis_tuples",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_member_first_tuple": {
            "name": "test_member_first_tuple",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_member_second_tuple": {
            "name": "test_member_second_tuple",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/test_underscore_hyphens.py": {
        "underscore": {
            "name": "underscore",
            "location": 20,
            "return": [
                "str",
                "int",
                "Generator"
            ],
            "arguments": {}
        },
        "underscore_dict": {
            "name": "underscore_dict",
            "location": 25,
            "return": [
                "T",
                "List[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "contains": {
            "name": "contains",
            "location": 30,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "underscore": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "contains_dict": {
            "name": "contains_dict",
            "location": 35,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "underscore_dict": [
                    "dict",
                    "int",
                    "str",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "bad_dict": {
            "name": "bad_dict",
            "location": 40,
            "return": [
                "T",
                "List[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_base": {
            "name": "test_base",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "underscore": [
                    "Dict[str, str]",
                    "set",
                    "dict"
                ],
                "underscore_dict": [
                    "Dict[str, str]",
                    "set",
                    "dict"
                ],
                "bad_dict": [
                    "dict",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_nested": {
            "name": "test_nested",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "contains": [
                    "Dict[str, str]",
                    "set",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "contains_dict": [
                    "Dict[str, str]",
                    "set",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "bad_dict": [
                    "Optional[Dict]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "hologram-master/tests/test_union.py": {
        "test_union_decoding": {
            "name": "test_union_decoding",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_decoding_ordering": {
            "name": "test_union_decoding_ordering",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_decode_error": {
            "name": "test_union_decode_error",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_long_union_decoding": {
            "name": "test_long_union_decoding",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_definition": {
            "name": "test_union_definition",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hologram-master/tests/__init__.py": {},
    "hologram-master/third-party-stubs/dateutil/__init__.py": {},
    "hologram-master/third-party-stubs/jsonschema/exceptions.py": {
        "best_match": {
            "name": "best_match",
            "location": 23,
            "return": [],
            "arguments": {
                "errors": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "validator": [],
                "path": [],
                "cause": [],
                "context": [],
                "validator_value": [],
                "instance": [],
                "schema": [],
                "schema_path": [],
                "parent": []
            }
        },
        "ValidationError.create_from": {
            "name": "create_from",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "ValidationError": []
            }
        }
    },
    "hologram-master/third-party-stubs/jsonschema/__init__.py": {
        "Draft7Validator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Draft7Validator.check_schema": {
            "name": "check_schema",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [],
                "schema": []
            }
        },
        "Draft7Validator.iter_errors": {
            "name": "iter_errors",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "_schema": []
            }
        }
    }
}
{
    "hpac-research-master/knuth-bendix/pavement.py": {
        "print_passed": {
            "name": "print_passed",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "print_failed": {
            "name": "print_failed",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_doc_make": {
            "name": "_doc_make",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sdist": {
            "name": "sdist",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "typecheck": {
            "name": "typecheck",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "commit": {
            "name": "commit",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "doc_watch": {
            "name": "doc_watch",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "doc_open": {
            "name": "doc_open",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_tasks": {
            "name": "get_tasks",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "doc_html": {
            "name": "doc_html",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "doc_clean": {
            "name": "doc_clean",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cwd.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "newcwd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "cwd.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "cwd.__exit__": {
            "name": "__exit__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "doc_watch.RebuildDocsEventHandler.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_paths": [
                    "str"
                ]
            }
        },
        "doc_watch.RebuildDocsEventHandler.dispatch": {
            "name": "dispatch",
            "location": 183,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "leabra7.events.Event",
                    "dict",
                    "str"
                ]
            }
        },
        "doc_watch.RebuildDocsEventHandler.on_modified": {
            "name": "on_modified",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/setup.py": {
        "get_project_files": {
            "name": "get_project_files",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "is_git_project": {
            "name": "is_git_project",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "has_git": {
            "name": "has_git",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_git_project_files": {
            "name": "get_git_project_files",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "git_ls_files": {
            "name": "git_ls_files",
            "location": 96,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Type[str]"
            ],
            "arguments": {}
        },
        "print_success_message": {
            "name": "print_success_message",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "print_failure_message": {
            "name": "print_failure_message",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 135,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_lint": {
            "name": "_lint",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_test": {
            "name": "_test",
            "location": 164,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "_typecheck": {
            "name": "_typecheck",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_test_all": {
            "name": "_test_all",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestAllCommand.finalize_options": {
            "name": "finalize_options",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllCommand.run_tests": {
            "name": "run_tests",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/docs/source/conf.py": {},
    "hpac-research-master/knuth-bendix/knuth_bendix/knuth_bendix_ordering.py": {
        "KnuthBendixOrdering.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "weights": [],
                "var_weight": [],
                "op_gt": []
            }
        },
        "KnuthBendixOrdering.weight": {
            "name": "weight",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "term": []
            }
        },
        "KnuthBendixOrdering.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "t": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/lex_path_ordering.py": {
        "LexPathOrdering.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op_gt": [
                    "Callable",
                    "str",
                    "bool",
                    "Sequence",
                    "Callable[[str], bool]"
                ]
            }
        },
        "LexPathOrdering._lex_gt": {
            "name": "_lex_gt",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s_ops": [
                    "int",
                    "list",
                    "bool",
                    "List['Node']"
                ],
                "t_ops": [
                    "int",
                    "list",
                    "bool",
                    "List['Node']"
                ]
            }
        },
        "LexPathOrdering.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "matchpy.Expression",
                    "Iterable[T]",
                    "GtOrder[matchpy.Expression]",
                    "str"
                ],
                "t": [
                    "matchpy.Expression",
                    "GtOrder[matchpy.Expression]"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/main.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "argparse._ArgumentGroup",
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "List[str]"
                ]
            }
        },
        "entry_point": {
            "name": "entry_point",
            "location": 90,
            "return": [
                "mypy_extensions.NoReturn"
            ],
            "arguments": {}
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/metadata.py": {},
    "hpac-research-master/knuth-bendix/knuth_bendix/rewrite_rule.py": {
        "RewriteRule.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "TextIO",
                    "str",
                    "Optional[str]",
                    "bytearray",
                    "int"
                ],
                "right": [
                    "str",
                    "TextIO",
                    "int"
                ]
            }
        },
        "RewriteRule.apply_match": {
            "name": "apply_match",
            "location": 51,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "subst": [
                    "cmk.utils.type_defs.EventRule",
                    "Callable[[T], bool]",
                    "Iterable[T]"
                ]
            }
        },
        "RewriteRule.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRule.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList._rebuild": {
            "name": "_rebuild",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.append": {
            "name": "append",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "int",
                    "list",
                    "str",
                    "bytes"
                ]
            }
        },
        "RewriteRuleList.extend": {
            "name": "extend",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RewriteRuleList.replace": {
            "name": "replace",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "dict",
                    "set",
                    "IO[str]"
                ],
                "rule": [
                    "int",
                    "str",
                    "dict",
                    "set",
                    "IO[str]"
                ]
            }
        },
        "RewriteRuleList.delete": {
            "name": "delete",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "RewriteRuleList.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.__len__": {
            "name": "__len__",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteRuleList.__getitem__": {
            "name": "__getitem__",
            "location": 110,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "T",
                    "List[str]",
                    "int"
                ]
            }
        },
        "RewriteRuleList.apply_all": {
            "name": "apply_all",
            "location": 113,
            "return": [
                "bool",
                "Hashable",
                "str"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "list"
                ],
                "max_count": [
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "RewriteRuleList.apply_each_once": {
            "name": "apply_each_once",
            "location": 140,
            "return": [
                "typing.Iterable[typing.Tuple[RewriteRule, matchpy.Expression]]"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ],
                "only": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "Optional[int]"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/rewrite_system.py": {
        "subexpression_count": {
            "name": "subexpression_count",
            "location": 62,
            "return": [
                "raiden.utils.signer.Signer",
                "bool",
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "expr": [
                    "matchpy.Expression",
                    "str",
                    "dict"
                ]
            }
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Heap.push": {
            "name": "push",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "utils.mssql_counters.Section"
                ]
            }
        },
        "Heap.popmin": {
            "name": "popmin",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.__bool__": {
            "name": "__bool__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteSystem.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RewriteSystem.normalize": {
            "name": "normalize",
            "location": 90,
            "return": [
                "Tuple[int, int]",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "RewriteSystem.orient": {
            "name": "orient",
            "location": 98,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "Iterable[T]",
                    "int"
                ],
                "t": [
                    "Iterable[T]",
                    "int"
                ],
                "order": [
                    "List[str]",
                    "str",
                    "bool",
                    "int",
                    "Sequence[int]",
                    "List[int]"
                ]
            }
        },
        "RewriteSystem.from_equations": {
            "name": "from_equations",
            "location": 116,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Mapping[str, int]",
                    "Callable[..., None]",
                    "int",
                    "dict",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "order": [
                    "GtOrder[matchpy.Expression]"
                ],
                "equations": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "RewriteSystem.extend_rule": {
            "name": "extend_rule",
            "location": 128,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "cmk.utils.type_defs.UserId",
                    "str"
                ]
            }
        },
        "RewriteSystem.append_rule": {
            "name": "append_rule",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "Sequence[int]",
                    "float"
                ]
            }
        },
        "RewriteSystem.replace_rule": {
            "name": "replace_rule",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Tuple[int, int]",
                    "Dict[str, str]",
                    "List[Callable]",
                    "int",
                    "str"
                ],
                "new_rule": [
                    "int",
                    "list"
                ]
            }
        },
        "RewriteSystem.delete_rule": {
            "name": "delete_rule",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int"
                ]
            }
        },
        "RewriteSystem.remove_extension": {
            "name": "remove_extension",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "AbstractSet[str]",
                    "FrozenSet[str]",
                    "Iterable[str]",
                    "str",
                    "Mapping[str, str]",
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "RewriteSystem.trim_redundant_rules": {
            "name": "trim_redundant_rules",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteSystem._canonicalize_system_step": {
            "name": "_canonicalize_system_step",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "GtOrder[matchpy.Expression]",
                    "Dict[str, Any]",
                    "int",
                    "utils.types.Box3D"
                ]
            }
        },
        "RewriteSystem._add_critical_pairs_with": {
            "name": "_add_critical_pairs_with",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "list",
                    "Dict[str, float]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "RewriteSystem.complete": {
            "name": "complete",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/unification.py": {
        "unique_variables_map": {
            "name": "unique_variables_map",
            "location": 34,
            "return": [],
            "arguments": {
                "expr": [],
                "to_avoid": []
            }
        },
        "uniqify_variables": {
            "name": "uniqify_variables",
            "location": 51,
            "return": [],
            "arguments": {
                "expr": [],
                "to_avoid": []
            }
        },
        "maybe_add_substitution": {
            "name": "maybe_add_substitution",
            "location": 62,
            "return": [],
            "arguments": {
                "sub": [],
                "var": [],
                "replacement": []
            }
        },
        "to_bitfield": {
            "name": "to_bitfield",
            "location": 88,
            "return": [],
            "arguments": {
                "x": [],
                "n_bits": []
            }
        },
        "from_bitfield": {
            "name": "from_bitfield",
            "location": 96,
            "return": [],
            "arguments": {
                "lst": []
            }
        },
        "all_boolean_matrices": {
            "name": "all_boolean_matrices",
            "location": 106,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "to_ac_operands": {
            "name": "to_ac_operands",
            "location": 125,
            "return": [],
            "arguments": {
                "ops": []
            }
        },
        "some_pairs_sorted": {
            "name": "some_pairs_sorted",
            "location": 142,
            "return": [],
            "arguments": {
                "lst": [],
                "idxs": []
            }
        },
        "ints_walking_range": {
            "name": "ints_walking_range",
            "location": 152,
            "return": [],
            "arguments": {
                "min": [],
                "max": [],
                "n": []
            }
        },
        "safe_index": {
            "name": "safe_index",
            "location": 161,
            "return": [],
            "arguments": {
                "lst": [],
                "item": []
            }
        },
        "compare_equal_variable_vectors": {
            "name": "compare_equal_variable_vectors",
            "location": 169,
            "return": [],
            "arguments": {
                "idx": [],
                "my_vec": [],
                "their_vec": [],
                "idxs_from_constants": [],
                "idxs_from_terms": []
            }
        },
        "ac_operand_lists": {
            "name": "ac_operand_lists",
            "location": 202,
            "return": [],
            "arguments": {
                "t1": [],
                "t2": []
            }
        },
        "unify_expressions": {
            "name": "unify_expressions",
            "location": 369,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "find_overlaps": {
            "name": "find_overlaps",
            "location": 456,
            "return": [],
            "arguments": {
                "term": [],
                "within": []
            }
        },
        "equal_mod_renaming": {
            "name": "equal_mod_renaming",
            "location": 481,
            "return": [],
            "arguments": {
                "t1": [],
                "t2": []
            }
        },
        "proper_contains": {
            "name": "proper_contains",
            "location": 493,
            "return": [],
            "arguments": {
                "term": [],
                "within": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/utils.py": {
        "transitive_closure": {
            "name": "transitive_closure",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "order": [
                    "List[list]",
                    "float"
                ]
            }
        },
        "substitute": {
            "name": "substitute",
            "location": 25,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "term": [
                    "str",
                    "int",
                    "Union[int, List[int]]"
                ],
                "substitution": [
                    "str",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        },
        "to_operator": {
            "name": "to_operator",
            "location": 38,
            "return": [
                "tuple"
            ],
            "arguments": {
                "term": [
                    "matchpy.Expression"
                ]
            }
        },
        "operands": {
            "name": "operands",
            "location": 49,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "term": [
                    "matchpy.Expression",
                    "List[str]",
                    "Union[cirq.value.symbol.Symbol, float]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/knuth_bendix/__init__.py": {},
    "hpac-research-master/knuth-bendix/mypy_stubs/multiset.py": {
        "BaseMultiset.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "BaseMultiset.__new__": {
            "name": "__new__",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "BaseMultiset.__contains__": {
            "name": "__contains__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "BaseMultiset.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "BaseMultiset.__len__": {
            "name": "__len__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.__bool__": {
            "name": "__bool__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.isdisjoint": {
            "name": "isdisjoint",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.difference": {
            "name": "difference",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.__sub__": {
            "name": "__sub__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.union": {
            "name": "union",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.__or__": {
            "name": "__or__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.combine": {
            "name": "combine",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.__add__": {
            "name": "__add__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.intersection": {
            "name": "intersection",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.__and__": {
            "name": "__and__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__xor__": {
            "name": "__xor__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.times": {
            "name": "times",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "factor": []
            }
        },
        "BaseMultiset.__mul__": {
            "name": "__mul__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "factor": []
            }
        },
        "BaseMultiset.issubset": {
            "name": "issubset",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__le__": {
            "name": "__le__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__lt__": {
            "name": "__lt__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.issuperset": {
            "name": "issuperset",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__ge__": {
            "name": "__ge__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__gt__": {
            "name": "__gt__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.__ne__": {
            "name": "__ne__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseMultiset.get": {
            "name": "get",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "default": []
            }
        },
        "BaseMultiset.from_elements": {
            "name": "from_elements",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "elements": [],
                "multiplicity": []
            }
        },
        "BaseMultiset.copy": {
            "name": "copy",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.items": {
            "name": "items",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.distinct_elements": {
            "name": "distinct_elements",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiset.multiplicities": {
            "name": "multiplicities",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Multiset.__setitem__": {
            "name": "__setitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "multiplicity": []
            }
        },
        "Multiset.__delitem__": {
            "name": "__delitem__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "Multiset.update": {
            "name": "update",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Multiset.union_update": {
            "name": "union_update",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Multiset.__ior__": {
            "name": "__ior__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Multiset.intersection_update": {
            "name": "intersection_update",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Multiset.__iand__": {
            "name": "__iand__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Multiset.difference_update": {
            "name": "difference_update",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Multiset.__isub__": {
            "name": "__isub__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Multiset.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Multiset.__ixor__": {
            "name": "__ixor__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Multiset.times_update": {
            "name": "times_update",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "factor": []
            }
        },
        "Multiset.__imul__": {
            "name": "__imul__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "factor": []
            }
        },
        "Multiset.add": {
            "name": "add",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "multiplicity": []
            }
        },
        "Multiset.remove": {
            "name": "remove",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "multiplicity": []
            }
        },
        "Multiset.discard": {
            "name": "discard",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "multiplicity": []
            }
        },
        "Multiset.pop": {
            "name": "pop",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "default": []
            }
        },
        "Multiset.setdefault": {
            "name": "setdefault",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "default": []
            }
        },
        "Multiset.clear": {
            "name": "clear",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenMultiset.__hash__": {
            "name": "__hash__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/graphviz/__init__.py": {
        "Dot.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "comment": [],
                "filename": [],
                "directory": [],
                "format": [],
                "engine": [],
                "encoding": [],
                "graph_attr": [],
                "node_attr": [],
                "edge_attr": [],
                "body": [],
                "strict": []
            }
        },
        "Dot.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "subgraph": []
            }
        },
        "Dot.node": {
            "name": "node",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "label": [],
                "_attributes": []
            }
        },
        "Dot.edge": {
            "name": "edge",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "tail_name": [],
                "head_name": [],
                "label": [],
                "_attributes": []
            }
        },
        "Dot.edges": {
            "name": "edges",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "tail_head_iter": []
            }
        },
        "Dot.attr": {
            "name": "attr",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "kw": [],
                "_attributes": []
            }
        },
        "Dot.subgraph": {
            "name": "subgraph",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/functions.py": {
        "substitute": {
            "name": "substitute",
            "location": 11,
            "return": [],
            "arguments": {
                "expression": [],
                "substitution": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 12,
            "return": [],
            "arguments": {
                "expression": [],
                "position": [],
                "replacement": []
            }
        },
        "replace_many": {
            "name": "replace_many",
            "location": 13,
            "return": [],
            "arguments": {
                "expression": [],
                "replacements": []
            }
        },
        "replace_all": {
            "name": "replace_all",
            "location": 17,
            "return": [],
            "arguments": {
                "expression": [],
                "rules": [],
                "max_count": []
            }
        },
        "replace_all_post_order": {
            "name": "replace_all_post_order",
            "location": 18,
            "return": [],
            "arguments": {
                "expression": [],
                "rules": []
            }
        },
        "is_match": {
            "name": "is_match",
            "location": 19,
            "return": [],
            "arguments": {
                "subject": [],
                "pattern": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/utils.py": {
        "fixed_integer_vector_iter": {
            "name": "fixed_integer_vector_iter",
            "location": 20,
            "return": [],
            "arguments": {
                "max_vector": [],
                "vector_sum": []
            }
        },
        "weak_composition_iter": {
            "name": "weak_composition_iter",
            "location": 21,
            "return": [],
            "arguments": {
                "n": [],
                "num_parts": []
            }
        },
        "commutative_sequence_variable_partition_iter": {
            "name": "commutative_sequence_variable_partition_iter",
            "location": 22,
            "return": [],
            "arguments": {
                "values": [],
                "variables": []
            }
        },
        "get_short_lambda_source": {
            "name": "get_short_lambda_source",
            "location": 33,
            "return": [],
            "arguments": {
                "lambda_func": []
            }
        },
        "extended_euclid": {
            "name": "extended_euclid",
            "location": 34,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "base_solution_linear": {
            "name": "base_solution_linear",
            "location": 35,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "solve_linear_diop": {
            "name": "solve_linear_diop",
            "location": 36,
            "return": [],
            "arguments": {
                "total": []
            }
        },
        "generator_chain": {
            "name": "generator_chain",
            "location": 38,
            "return": [],
            "arguments": {
                "initial_data": []
            }
        },
        "slot_cached_property": {
            "name": "slot_cached_property",
            "location": 44,
            "return": [],
            "arguments": {
                "slot": []
            }
        },
        "LambdaNodeVisitor.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "LambdaNodeVisitor.visit": {
            "name": "visit",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LambdaNodeVisitor.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LambdaNodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "cached_property.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "getter": [],
                "slot": []
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/__init__.py": {},
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/expressions/constraints.py": {
        "Constraint.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Constraint.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Constraint.__hash__": {
            "name": "__hash__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.variables": {
            "name": "variables",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "EqualVariablesConstraint.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EqualVariablesConstraint.variables": {
            "name": "variables",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EqualVariablesConstraint.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "EqualVariablesConstraint.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EqualVariablesConstraint.__hash__": {
            "name": "__hash__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EqualVariablesConstraint.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "CustomConstraint.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "CustomConstraint.variables": {
            "name": "variables",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomConstraint.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "CustomConstraint.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CustomConstraint.__hash__": {
            "name": "__hash__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomConstraint.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/expressions/expressions.py": {
        "make_dot_variable": {
            "name": "make_dot_variable",
            "location": 144,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "make_symbol_variable": {
            "name": "make_symbol_variable",
            "location": 145,
            "return": [],
            "arguments": {
                "name": [],
                "symbol_type": []
            }
        },
        "make_star_variable": {
            "name": "make_star_variable",
            "location": 146,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "make_plus_variable": {
            "name": "make_plus_variable",
            "location": 147,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Expression.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": []
            }
        },
        "Expression.collect_variables": {
            "name": "collect_variables",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "variables": []
            }
        },
        "Expression.collect_symbols": {
            "name": "collect_symbols",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        },
        "Expression.is_constant": {
            "name": "is_constant",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expression.is_syntactic": {
            "name": "is_syntactic",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expression.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "Expression.preorder_iter": {
            "name": "preorder_iter",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "Expression.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "Expression.__contains__": {
            "name": "__contains__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "Expression.__hash__": {
            "name": "__hash__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OperationMeta.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "_OperationMeta.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Operation.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.new": {
            "name": "new",
            "location": 63,
            "return": [],
            "arguments": {
                "name": [],
                "arity": [],
                "class_name": []
            }
        },
        "Operation.__lt__": {
            "name": "__lt__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operation.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operation.__iter__": {
            "name": "__iter__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.__len__": {
            "name": "__len__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Operation.__contains__": {
            "name": "__contains__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "Operation.collect_variables": {
            "name": "collect_variables",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "variables": []
            }
        },
        "Operation.collect_symbols": {
            "name": "collect_symbols",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        },
        "Operation.__hash__": {
            "name": "__hash__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "Operation.__copy__": {
            "name": "__copy__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssociativeOperation.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        },
        "CommutativeOperation.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        },
        "OneIdentityOperation.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        },
        "Symbol.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "variable_name": []
            }
        },
        "Symbol.collect_symbols": {
            "name": "collect_symbols",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        },
        "Symbol.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "Symbol.__copy__": {
            "name": "__copy__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__lt__": {
            "name": "__lt__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Symbol.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Symbol.__hash__": {
            "name": "__hash__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wildcard.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "min_count": [],
                "fixed_size": [],
                "variable_name": [],
                "optional": []
            }
        },
        "Wildcard.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "Wildcard.dot": {
            "name": "dot",
            "location": 110,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Wildcard.optional": {
            "name": "optional",
            "location": 112,
            "return": [],
            "arguments": {
                "name": [],
                "default": []
            }
        },
        "Wildcard.symbol": {
            "name": "symbol",
            "location": 114,
            "return": [],
            "arguments": {
                "name": [],
                "symbol_type": []
            }
        },
        "Wildcard.star": {
            "name": "star",
            "location": 116,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Wildcard.plus": {
            "name": "plus",
            "location": 118,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Wildcard.__lt__": {
            "name": "__lt__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Wildcard.__eq__": {
            "name": "__eq__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Wildcard.__hash__": {
            "name": "__hash__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wildcard.__copy__": {
            "name": "__copy__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolWildcard.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "symbol_type": [],
                "variable_name": []
            }
        },
        "SymbolWildcard.with_renamed_vars": {
            "name": "with_renamed_vars",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "SymbolWildcard.__eq__": {
            "name": "__eq__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolWildcard.__hash__": {
            "name": "__hash__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolWildcard.__copy__": {
            "name": "__copy__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "Pattern.__eq__": {
            "name": "__eq__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pattern.is_syntactic": {
            "name": "is_syntactic",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern.local_constraints": {
            "name": "local_constraints",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern.global_constraints": {
            "name": "global_constraints",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/expressions/functions.py": {
        "is_constant": {
            "name": "is_constant",
            "location": 8,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "is_syntactic": {
            "name": "is_syntactic",
            "location": 9,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "get_head": {
            "name": "get_head",
            "location": 10,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "match_head": {
            "name": "match_head",
            "location": 11,
            "return": [],
            "arguments": {
                "subject": [],
                "pattern": []
            }
        },
        "preorder_iter": {
            "name": "preorder_iter",
            "location": 12,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "preorder_iter_with_position": {
            "name": "preorder_iter_with_position",
            "location": 13,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "is_anonymous": {
            "name": "is_anonymous",
            "location": 14,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "contains_variables_from_set": {
            "name": "contains_variables_from_set",
            "location": 15,
            "return": [],
            "arguments": {
                "expression": [],
                "variables": []
            }
        },
        "get_variables": {
            "name": "get_variables",
            "location": 16,
            "return": [],
            "arguments": {
                "expression": [],
                "variables": []
            }
        },
        "rename_variables": {
            "name": "rename_variables",
            "location": 17,
            "return": [],
            "arguments": {
                "expression": [],
                "renaming": []
            }
        },
        "register_operation_factory": {
            "name": "register_operation_factory",
            "location": 18,
            "return": [],
            "arguments": {
                "operation": [],
                "factory": []
            }
        },
        "register_operation_iterator": {
            "name": "register_operation_iterator",
            "location": 19,
            "return": [],
            "arguments": {
                "operation": [],
                "iterator": [],
                "length": []
            }
        },
        "create_operation_expression": {
            "name": "create_operation_expression",
            "location": 20,
            "return": [],
            "arguments": {
                "old_operation": [],
                "new_operands": [],
                "variable_name": []
            }
        },
        "op_iter": {
            "name": "op_iter",
            "location": 21,
            "return": [],
            "arguments": {
                "operation": []
            }
        },
        "op_len": {
            "name": "op_len",
            "location": 22,
            "return": [],
            "arguments": {
                "operation": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/expressions/substitution.py": {
        "Substitution.try_add_variable": {
            "name": "try_add_variable",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "replacement": []
            }
        },
        "Substitution.union_with_variable": {
            "name": "union_with_variable",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "replacement": []
            }
        },
        "Substitution.extract_substitution": {
            "name": "extract_substitution",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "pattern": []
            }
        },
        "Substitution.union": {
            "name": "union",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Substitution.rename": {
            "name": "rename",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "renaming": []
            }
        },
        "Substitution.__copy__": {
            "name": "__copy__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/expressions/__init__.py": {},
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/bipartite.py": {
        "enum_maximum_matchings_iter": {
            "name": "enum_maximum_matchings_iter",
            "location": 39,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "BipartiteGraph.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.__setitem__": {
            "name": "__setitem__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "BipartiteGraph.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BipartiteGraph.__delitem__": {
            "name": "__delitem__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BipartiteGraph.edges_with_labels": {
            "name": "edges_with_labels",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.edges": {
            "name": "edges",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.clear": {
            "name": "clear",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.__copy__": {
            "name": "__copy__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BipartiteGraph.as_graph": {
            "name": "as_graph",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.find_matching": {
            "name": "find_matching",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BipartiteGraph.without_nodes": {
            "name": "without_nodes",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "edge": []
            }
        },
        "BipartiteGraph.without_edge": {
            "name": "without_edge",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "edge": []
            }
        },
        "BipartiteGraph.limited_to": {
            "name": "limited_to",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/code_generation.py": {
        "CodeGenerator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "matcher": []
            }
        },
        "CodeGenerator.indent": {
            "name": "indent",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.dedent": {
            "name": "dedent",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.add_line": {
            "name": "add_line",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "CodeGenerator.get_var_name": {
            "name": "get_var_name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "CodeGenerator.generate_code": {
            "name": "generate_code",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "func_name": [],
                "add_imports": []
            }
        },
        "CodeGenerator.final_label": {
            "name": "final_label",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "subst_name": []
            }
        },
        "CodeGenerator.generate_state_code": {
            "name": "generate_state_code",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "CodeGenerator.commutative_var_entry": {
            "name": "commutative_var_entry",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "CodeGenerator.commutative_patterns": {
            "name": "commutative_patterns",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "patterns": []
            }
        },
        "CodeGenerator.generate_transition_code": {
            "name": "generate_transition_code",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "transition": []
            }
        },
        "CodeGenerator.get_args": {
            "name": "get_args",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [],
                "operation_type": []
            }
        },
        "CodeGenerator.push_subjects": {
            "name": "push_subjects",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "operation": []
            }
        },
        "CodeGenerator.push_subst": {
            "name": "push_subst",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.enter_eps": {
            "name": "enter_eps",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "CodeGenerator.exit_eps": {
            "name": "exit_eps",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "CodeGenerator.enter_operation": {
            "name": "enter_operation",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "operation": []
            }
        },
        "CodeGenerator.operation_symbol": {
            "name": "operation_symbol",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "operation": []
            }
        },
        "CodeGenerator.exit_operation": {
            "name": "exit_operation",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.enter_symbol_wildcard": {
            "name": "enter_symbol_wildcard",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "wildcard": []
            }
        },
        "CodeGenerator.symbol_type": {
            "name": "symbol_type",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "CodeGenerator.exit_symbol_wildcard": {
            "name": "exit_symbol_wildcard",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.enter_fixed_wildcard": {
            "name": "enter_fixed_wildcard",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "wildcard": []
            }
        },
        "CodeGenerator.exit_fixed_wildcard": {
            "name": "exit_fixed_wildcard",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.enter_variable_assignment": {
            "name": "enter_variable_assignment",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "variable_name": [],
                "value": []
            }
        },
        "CodeGenerator.enter_subst": {
            "name": "enter_subst",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "subst": []
            }
        },
        "CodeGenerator.expr": {
            "name": "expr",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "CodeGenerator.exit_subst": {
            "name": "exit_subst",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "subst": []
            }
        },
        "CodeGenerator.exit_variable_assignment": {
            "name": "exit_variable_assignment",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.enter_optional_wildcard": {
            "name": "enter_optional_wildcard",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "wildcard": [],
                "variable_name": []
            }
        },
        "CodeGenerator.optional_expr": {
            "name": "optional_expr",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "CodeGenerator.exit_optional_wildcard": {
            "name": "exit_optional_wildcard",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.enter_symbol": {
            "name": "enter_symbol",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "CodeGenerator.symbol_repr": {
            "name": "symbol_repr",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "CodeGenerator.exit_symbol": {
            "name": "exit_symbol",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.enter_operation_end": {
            "name": "enter_operation_end",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "CodeGenerator.exit_operation_end": {
            "name": "exit_operation_end",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.enter_sequence_wildcard": {
            "name": "enter_sequence_wildcard",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "wildcard": []
            }
        },
        "CodeGenerator.create_operation": {
            "name": "create_operation",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [],
                "operation_type": [],
                "args": []
            }
        },
        "CodeGenerator.exit_sequence_wildcard": {
            "name": "exit_sequence_wildcard",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CodeGenerator.yield_final_substitution": {
            "name": "yield_final_substitution",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "pattern_index": []
            }
        },
        "CodeGenerator.generate_constraints": {
            "name": "generate_constraints",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "constraints": [],
                "transitions": []
            }
        },
        "CodeGenerator.enter_global_constraint": {
            "name": "enter_global_constraint",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "CodeGenerator.constraint_repr": {
            "name": "constraint_repr",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "CodeGenerator.exit_global_constraint": {
            "name": "exit_global_constraint",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "constraint_index": []
            }
        },
        "CodeGenerator.clean_code": {
            "name": "clean_code",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/many_to_one.py": {
        "ManyToOneMatcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneMatcher.add": {
            "name": "add",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "label": []
            }
        },
        "ManyToOneMatcher.match": {
            "name": "match",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "ManyToOneMatcher.is_match": {
            "name": "is_match",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "ManyToOneMatcher._collect_variable_renaming": {
            "name": "_collect_variable_renaming",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "expression": [],
                "position": [],
                "variables": []
            }
        },
        "ManyToOneMatcher.as_graph": {
            "name": "as_graph",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneReplacer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneReplacer.add": {
            "name": "add",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "rule": []
            }
        },
        "ManyToOneReplacer.replace": {
            "name": "replace",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "max_count": []
            }
        },
        "ManyToOneReplacer.replace_post_order": {
            "name": "replace_post_order",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/one_to_one.py": {
        "match": {
            "name": "match",
            "location": 9,
            "return": [],
            "arguments": {
                "subject": [],
                "pattern": []
            }
        },
        "match_anywhere": {
            "name": "match_anywhere",
            "location": 10,
            "return": [],
            "arguments": {
                "subject": [],
                "pattern": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/syntactic.py": {
        "is_operation": {
            "name": "is_operation",
            "location": 17,
            "return": [],
            "arguments": {
                "term": []
            }
        },
        "is_symbol_wildcard": {
            "name": "is_symbol_wildcard",
            "location": 18,
            "return": [],
            "arguments": {
                "term": []
            }
        },
        "FlatTerm.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "FlatTerm.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "FlatTerm.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlatTerm.__contains__": {
            "name": "__contains__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "term": []
            }
        },
        "FlatTerm.__iter__": {
            "name": "__iter__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlatTerm.__add__": {
            "name": "__add__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FlatTerm.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FlatTerm.is_syntactic": {
            "name": "is_syntactic",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlatTerm.empty": {
            "name": "empty",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FlatTerm.merged": {
            "name": "merged",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DiscriminationNet.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscriminationNet.add": {
            "name": "add",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "final_label": []
            }
        },
        "DiscriminationNet.match": {
            "name": "match",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "DiscriminationNet.is_match": {
            "name": "is_match",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "DiscriminationNet.as_graph": {
            "name": "as_graph",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceMatcher.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceMatcher.add": {
            "name": "add",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "SequenceMatcher.can_match": {
            "name": "can_match",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "pattern": []
            }
        },
        "SequenceMatcher.match": {
            "name": "match",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "SequenceMatcher.as_graph": {
            "name": "as_graph",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/_common.py": {
        "CommutativePatternsParts.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "operation": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/mypy_stubs/matchpy/matching/__init__.py": {},
    "hpac-research-master/knuth-bendix/tests/test_knuth_bendix_ordering.py": {
        "test_knuth_bendix_order": {
            "name": "test_knuth_bendix_order",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str",
                    "float"
                ],
                "right": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_lex_path_ordering.py": {
        "test_knuth_bendix_order": {
            "name": "test_knuth_bendix_order",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str",
                    "float"
                ],
                "right": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_main.py": {
        "TestMain.test_help": {
            "name": "test_help",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "helparg": [
                    "str",
                    "float"
                ],
                "capsys": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestMain.test_version": {
            "name": "test_version",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versionarg": [
                    "str",
                    "bool"
                ],
                "capsys": [
                    "int",
                    "BaseException",
                    "str"
                ]
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_rewrite_rule.py": {
        "inv_pattern": {
            "name": "inv_pattern",
            "location": 23,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_subst": {
            "name": "test_subst",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "inv_pattern": []
            }
        },
        "test_print": {
            "name": "test_print",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "inv_pattern": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "float"
                ]
            }
        },
        "test_apply_once": {
            "name": "test_apply_once",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "inv_pattern": [
                    "str"
                ]
            }
        },
        "test_apply_all": {
            "name": "test_apply_all",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "inv_pattern": [
                    "str"
                ]
            }
        },
        "test_apply_all_many_rules": {
            "name": "test_apply_all_many_rules",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "inv_pattern": [
                    "dict"
                ]
            }
        },
        "test_new_variable_failure": {
            "name": "test_new_variable_failure",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_rewrite_system.py": {
        "test_group_theory_completion": {
            "name": "test_group_theory_completion",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "order": []
            }
        }
    },
    "hpac-research-master/knuth-bendix/tests/test_unification.py": {
        "test_uniqify_variables": {
            "name": "test_uniqify_variables",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "right": [
                    "bool"
                ],
                "is_changed": [
                    "bool",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_maybe_add_substitution": {
            "name": "test_maybe_add_substitution",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "subs": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]"
                ],
                "var": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]"
                ],
                "rule": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]"
                ],
                "expected": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]"
                ]
            }
        },
        "test_unify_expressions": {
            "name": "test_unify_expressions",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "left": [],
                "right": [],
                "expected": [
                    "Callable"
                ]
            }
        },
        "test_find_overlaps": {
            "name": "test_find_overlaps",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "term": [
                    "str",
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Callable"
                ],
                "within": [
                    "str",
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Callable"
                ],
                "expected": [
                    "str",
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Callable"
                ]
            }
        },
        "test_equal_mod_renaming": {
            "name": "test_equal_mod_renaming",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "t1": [
                    "float"
                ],
                "t2": [
                    "float"
                ],
                "expected": [
                    "float"
                ]
            }
        },
        "test_proper_contains": {
            "name": "test_proper_contains",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "term": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "within": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ]
            }
        }
    }
}
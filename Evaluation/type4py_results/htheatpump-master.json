{
    "htheatpump-master/setup.py": {
        "read": {
            "name": "read",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 20,
            "return": [
                "str",
                "bytes",
                "Optional[Dict[str, Any]]",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "pip": {
            "name": "pip",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "htheatpump-master/docs/conf.py": {},
    "htheatpump-master/htheatpump/aiohtheatpump.py": {
        "AioHtHeatpump.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "device": [],
                "baudrate": [],
                "bytesize": [],
                "parity": [],
                "stopbits": [],
                "timeout": [],
                "xonxoff": [],
                "rtscts": [],
                "write_timeout": [],
                "dsrdtr": [],
                "inter_byte_timeout": [],
                "exclusive": [],
                "verify_param_action": [],
                "verify_param_error": [],
                "loop": [],
                "cancel_read_timeout": [],
                "cancel_write_timeout": []
            }
        },
        "AioHtHeatpump.open_connection": {
            "name": "open_connection",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "htheatpump-master/htheatpump/htheatpump.py": {
        "VerifyAction.NONE": {
            "name": "NONE",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "VerifyAction.ALL": {
            "name": "ALL",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "VerificationException.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "HtHeatpump.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "device": [],
                "baudrate": [],
                "bytesize": [],
                "parity": [],
                "stopbits": [],
                "timeout": [],
                "xonxoff": [],
                "rtscts": [],
                "write_timeout": [],
                "dsrdtr": [],
                "inter_byte_timeout": [],
                "exclusive": [],
                "verify_param_action": [],
                "verify_param_error": []
            }
        },
        "HtHeatpump.__del__": {
            "name": "__del__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.__enter__": {
            "name": "__enter__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.__exit__": {
            "name": "__exit__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "HtHeatpump.open_connection": {
            "name": "open_connection",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.reconnect": {
            "name": "reconnect",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.close_connection": {
            "name": "close_connection",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.is_open": {
            "name": "is_open",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.verify_param_action": {
            "name": "verify_param_action",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "HtHeatpump.verify_param_error": {
            "name": "verify_param_error",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "HtHeatpump.send_request": {
            "name": "send_request",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "HtHeatpump.read_response": {
            "name": "read_response",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.login": {
            "name": "login",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "update_param_limits": [],
                "max_retries": []
            }
        },
        "HtHeatpump.logout": {
            "name": "logout",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_serial_number": {
            "name": "get_serial_number",
            "location": 526,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_version": {
            "name": "get_version",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_date_time": {
            "name": "get_date_time",
            "location": 591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.set_date_time": {
            "name": "set_date_time",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "HtHeatpump.get_last_fault": {
            "name": "get_last_fault",
            "location": 684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_fault_list_size": {
            "name": "get_fault_list_size",
            "location": 727,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_fault_list": {
            "name": "get_fault_list",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump._extract_param_data": {
            "name": "_extract_param_data",
            "location": 842,
            "return": [],
            "arguments": {
                "name": [],
                "resp": []
            }
        },
        "HtHeatpump._get_param": {
            "name": "_get_param",
            "location": 904,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "HtHeatpump._verify_param_resp": {
            "name": "_verify_param_resp",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "resp_name": [],
                "resp_min": [],
                "resp_max": [],
                "resp_val": []
            }
        },
        "HtHeatpump.update_param_limits": {
            "name": "update_param_limits",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_param": {
            "name": "get_param",
            "location": 1052,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "HtHeatpump.set_param": {
            "name": "set_param",
            "location": 1093,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "val": [],
                "ignore_limits": []
            }
        },
        "HtHeatpump.in_error": {
            "name": "in_error",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.query": {
            "name": "query",
            "location": 1172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.fast_query": {
            "name": "fast_query",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump.get_time_progs": {
            "name": "get_time_progs",
            "location": 1318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtHeatpump._get_time_prog": {
            "name": "_get_time_prog",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "HtHeatpump._get_time_prog_with_entries": {
            "name": "_get_time_prog_with_entries",
            "location": 1408,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "HtHeatpump.get_time_prog": {
            "name": "get_time_prog",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "with_entries": []
            }
        },
        "HtHeatpump.get_time_prog_entry": {
            "name": "get_time_prog_entry",
            "location": 1497,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "day": [],
                "num": []
            }
        },
        "HtHeatpump.set_time_prog_entry": {
            "name": "set_time_prog_entry",
            "location": 1543,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "day": [],
                "num": [],
                "entry": []
            }
        },
        "HtHeatpump.set_time_prog": {
            "name": "set_time_prog",
            "location": 1598,
            "return": [],
            "arguments": {
                "self": [],
                "time_prog": []
            }
        }
    },
    "htheatpump-master/htheatpump/htparams.py": {
        "_load_params_from_csv": {
            "name": "_load_params_from_csv",
            "location": 399,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "HtDataTypes.from_str": {
            "name": "from_str",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "HtParam.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dp_type": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "dp_number": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "utils.ResolveType"
                ],
                "acl": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "utils.ResolveType"
                ],
                "data_type": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "min_val": [
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[Type]",
                    "bool",
                    "Optional[str]"
                ],
                "max_val": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "HtParam.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtParam.cmd": {
            "name": "cmd",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtParam.set_limits": {
            "name": "set_limits",
            "location": 144,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "min_val": [
                    "str",
                    "Optional[complex]",
                    "Optional[int]"
                ],
                "max_val": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "HtParam.in_limits": {
            "name": "in_limits",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "HtParam._from_str": {
            "name": "_from_str",
            "location": 191,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "data_type": [
                    "str",
                    "int"
                ],
                "strict": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "HtParam.from_str": {
            "name": "from_str",
            "location": 246,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str"
                ],
                "strict": [
                    "str"
                ]
            }
        },
        "HtParam._check_value_type": {
            "name": "_check_value_type",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "bytes"
                ],
                "data_type": [
                    "str",
                    "type"
                ]
            }
        },
        "HtParam.check_value_type": {
            "name": "check_value_type",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "type"
                ]
            }
        },
        "HtParam._to_str": {
            "name": "_to_str",
            "location": 339,
            "return": [
                "str",
                "(str, str)",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "data_type": [
                    "str",
                    "type"
                ]
            }
        },
        "HtParam.to_str": {
            "name": "to_str",
            "location": 366,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "int"
                ]
            }
        },
        "HtParamsMeta.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "HtParamsMeta.__contains__": {
            "name": "__contains__",
            "location": 471,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "item": [
                    "Type",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "HtParamsMeta.__getitem__": {
            "name": "__getitem__",
            "location": 474,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HtParamsMeta.__len__": {
            "name": "__len__",
            "location": 477,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        },
        "HtParamsMeta.definition_file": {
            "name": "definition_file",
            "location": 481,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "set",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ]
            }
        },
        "HtParams.keys": {
            "name": "keys",
            "location": 501,
            "return": [
                "bytes",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HtParams.items": {
            "name": "items",
            "location": 505,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Callable[[], None]",
                    "Type"
                ]
            }
        },
        "HtParams.values": {
            "name": "values",
            "location": 509,
            "return": [
                "float",
                "Callable",
                "Iterable['cirq.Qid']",
                "raiden.utils.BlockHash",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "HtParams.get": {
            "name": "get",
            "location": 513,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Union[str, bytes]"
                ],
                "key": [
                    "str",
                    "dict"
                ],
                "default": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "HtParams.of_type": {
            "name": "of_type",
            "location": 521,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Type",
                    "Union[str, 'Type']",
                    "bool",
                    "set",
                    "Mapping"
                ],
                "dp_type": [
                    "str",
                    "Type",
                    "tuple"
                ]
            }
        },
        "HtParams.dump": {
            "name": "dump",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Collection[str]",
                    "type"
                ]
            }
        }
    },
    "htheatpump-master/htheatpump/httimeprog.py": {
        "TimeProgPeriod.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TimeProgPeriod._is_time_valid": {
            "name": "_is_time_valid",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, T]",
                    "T",
                    "float",
                    "Union[str, int, float]"
                ],
                "hour": [
                    "int",
                    "Dict[str, T]",
                    "T",
                    "float",
                    "Union[str, int, float]"
                ],
                "minute": [
                    "int",
                    "Dict[str, T]",
                    "T",
                    "float",
                    "Union[str, int, float]"
                ]
            }
        },
        "TimeProgPeriod._verify": {
            "name": "_verify",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]"
                ],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TimeProgPeriod.from_str": {
            "name": "from_str",
            "location": 98,
            "return": [
                "Optional[str]",
                "List[str]",
                "List['Block']",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "start_str": [
                    "str"
                ],
                "end_str": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TimeProgPeriod.from_json": {
            "name": "from_json",
            "location": 131,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "bool",
                "Dict[str, Any]",
                "Callable[[], None]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Awaitable",
                    "dict",
                    "List[Dict[str, str]]"
                ],
                "json_dict": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Awaitable",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "TimeProgPeriod.set": {
            "name": "set",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TimeProgPeriod.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.__eq__": {
            "name": "__eq__",
            "location": 176,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[Dict[str, str]]",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "TimeProgPeriod.as_dict": {
            "name": "as_dict",
            "location": 195,
            "return": [
                "str",
                "float",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.as_json": {
            "name": "as_json",
            "location": 206,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.start_str": {
            "name": "start_str",
            "location": 218,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.end_str": {
            "name": "end_str",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.start_hour": {
            "name": "start_hour",
            "location": 244,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.start_minute": {
            "name": "start_minute",
            "location": 253,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.end_hour": {
            "name": "end_hour",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.end_minute": {
            "name": "end_minute",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.start": {
            "name": "start",
            "location": 280,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgPeriod.end": {
            "name": "end",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgEntry.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "period": [
                    "bytes"
                ]
            }
        },
        "TimeProgEntry.from_str": {
            "name": "from_str",
            "location": 329,
            "return": [
                "str",
                "List[str]",
                "Optional[Mapping[str, Any]]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "state": [
                    "str"
                ],
                "start_str": [
                    "str"
                ],
                "end_str": [
                    "str"
                ]
            }
        },
        "TimeProgEntry.from_json": {
            "name": "from_json",
            "location": 346,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "dict",
                    "Sequence"
                ],
                "json_dict": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "dict",
                    "Sequence"
                ]
            }
        },
        "TimeProgEntry.set": {
            "name": "set",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ],
                "period": [
                    "Tuple[int]",
                    "List[int]"
                ]
            }
        },
        "TimeProgEntry.__str__": {
            "name": "__str__",
            "location": 373,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgEntry.__eq__": {
            "name": "__eq__",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "TimeProgEntry.as_dict": {
            "name": "as_dict",
            "location": 395,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgEntry.as_json": {
            "name": "as_json",
            "location": 405,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Dict[str, Callable[[], Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgEntry.state": {
            "name": "state",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "Dict[str, str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "TimeProgEntry.period": {
            "name": "period",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TimeProgram.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[bytes, int]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "ead": [
                    "int",
                    "Optional[str]",
                    "Tuple[float, float]",
                    "Optional[List[str]]",
                    "Callable",
                    "str"
                ],
                "nos": [
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "float"
                ],
                "ste": [
                    "int",
                    "float",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "nod": [
                    "int",
                    "Optional[str]",
                    "Tuple[float, float]",
                    "Optional[List[str]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "TimeProgram._verify_entry": {
            "name": "_verify_entry",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "float",
                    "str",
                    "int",
                    "slice"
                ]
            }
        },
        "TimeProgram.from_json": {
            "name": "from_json",
            "location": 504,
            "return": [
                "str",
                "int",
                "float",
                "List[float]",
                "List[Tuple[Any, str, int]]",
                "Dict[str, List[float]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ],
                "json_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TimeProgram.__str__": {
            "name": "__str__",
            "location": 532,
            "return": [
                "str",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.as_dict": {
            "name": "as_dict",
            "location": 554,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "with_entries": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "TimeProgram.as_json": {
            "name": "as_json",
            "location": 575,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Dict[str, Callable[[], Any]]"
            ],
            "arguments": {
                "self": [],
                "with_entries": [
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "TimeProgram.index": {
            "name": "index",
            "location": 607,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.name": {
            "name": "name",
            "location": 616,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.entries_a_day": {
            "name": "entries_a_day",
            "location": 625,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.number_of_states": {
            "name": "number_of_states",
            "location": 634,
            "return": [
                "bool",
                "Iterable[str]",
                "Callable",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.step_size": {
            "name": "step_size",
            "location": 643,
            "return": [
                "str",
                "List[float]",
                "bool",
                "Set[str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.number_of_days": {
            "name": "number_of_days",
            "location": 652,
            "return": [
                "tuple",
                "List[str]",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProgram.entry": {
            "name": "entry",
            "location": 660,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "num": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "TimeProgram.entries_of_day": {
            "name": "entries_of_day",
            "location": 672,
            "return": [
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "str",
                    "Counter"
                ]
            }
        },
        "TimeProgram.set_entry": {
            "name": "set_entry",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "float",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "num": [
                    "int",
                    "float",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "entry": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "htheatpump-master/htheatpump/protocol.py": {
        "calc_checksum": {
            "name": "calc_checksum",
            "location": 161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "verify_checksum": {
            "name": "verify_checksum",
            "location": 179,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "add_checksum": {
            "name": "add_checksum",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str"
                ]
            }
        },
        "create_request": {
            "name": "create_request",
            "location": 217,
            "return": [
                "bool",
                "Dict[str, str]",
                "Optional[Dict]",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "htheatpump-master/htheatpump/utils.py": {
        "Singleton.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "BaseException",
                    "Optional[Callable]"
                ]
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.elapsed": {
            "name": "elapsed",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "htheatpump-master/htheatpump/__init__.py": {},
    "htheatpump-master/htheatpump/__main__.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/__version__.py": {},
    "htheatpump-master/htheatpump/scripts/daemon.py": {
        "main": {
            "name": "main",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Daemon.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pidfile": [
                    "int",
                    "bool",
                    "float"
                ],
                "stdin": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "AsyncGenerator",
                    "List[str]"
                ],
                "stdout": [
                    "str",
                    "bool",
                    "int"
                ],
                "stderr": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "Daemon.daemonize": {
            "name": "daemonize",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon._delpid": {
            "name": "_delpid",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.start": {
            "name": "start",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.status": {
            "name": "status",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.stop": {
            "name": "stop",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.restart": {
            "name": "restart",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.run": {
            "name": "run",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MySampleDaemon.run": {
            "name": "run",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "htheatpump-master/htheatpump/scripts/htbackup.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htbackup_async.py": {
        "main": {
            "name": "main",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htcomplparams.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htcomplparams_async.py": {
        "main": {
            "name": "main",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htdatetime.py": {
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htdatetime_async.py": {
        "main": {
            "name": "main",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htfastquery.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htfastquery_async.py": {
        "main": {
            "name": "main",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htfaultlist.py": {
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htfaultlist_async.py": {
        "main": {
            "name": "main",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/hthttp.py": {
        "main": {
            "name": "main",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "HttpGetException.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response_code": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "message": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "HttpGetException.response_code": {
            "name": "response_code",
            "location": 90,
            "return": [
                "str",
                "bool",
                "dict",
                "Tuple[bytes, bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpGetHandler.do_GET": {
            "name": "do_GET",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HtHttpDaemon.run": {
            "name": "run",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "htheatpump-master/htheatpump/scripts/htquery.py": {
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htquery_async.py": {
        "main": {
            "name": "main",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htset.py": {
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ParamNameAction.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "namespace": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse.Namespace",
                    "tuple"
                ],
                "values": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse.Namespace",
                    "tuple"
                ],
                "option_string": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "htheatpump-master/htheatpump/scripts/htset_async.py": {
        "main": {
            "name": "main",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ParamNameAction.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "namespace": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse.Namespace",
                    "tuple"
                ],
                "values": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse.Namespace",
                    "tuple"
                ],
                "option_string": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "htheatpump-master/htheatpump/scripts/htshell.py": {
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/htshell_async.py": {
        "main": {
            "name": "main",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/httimeprog.py": {
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/httimeprog_async.py": {
        "main": {
            "name": "main",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/htheatpump/scripts/__init__.py": {},
    "htheatpump-master/samples/comp_checksum.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/samples/htfastquery_test.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "htheatpump-master/samples/htfastquery_test_async.py": {},
    "htheatpump-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[type]",
                    "dict"
                ]
            }
        },
        "cmdopt_device": {
            "name": "cmdopt_device",
            "location": 48,
            "return": [
                "Dict[str, str]",
                "dict",
                "bool",
                "Sequence"
            ],
            "arguments": {
                "request": []
            }
        },
        "cmdopt_baudrate": {
            "name": "cmdopt_baudrate",
            "location": 53,
            "return": [
                "Dict[str, str]",
                "dict",
                "bool",
                "Sequence"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "htheatpump-master/tests/test_aiohtheatpump.py": {
        "test_calc_checksum": {
            "name": "test_calc_checksum",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ],
                "checksum": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "test_verify_checksum_raises_ValueError": {
            "name": "test_verify_checksum_raises_ValueError",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "test_verify_checksum": {
            "name": "test_verify_checksum",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "bool",
                    "Callable",
                    "int",
                    "str"
                ],
                "result": [
                    "bytes",
                    "bool",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "test_add_checksum_raises_ValueError": {
            "name": "test_add_checksum_raises_ValueError",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_add_checksum": {
            "name": "test_add_checksum",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "bool",
                    "int",
                    "Callable"
                ],
                "result": [
                    "bytes",
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_create_request_raises_ValueError": {
            "name": "test_create_request_raises_ValueError",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "test_create_request": {
            "name": "test_create_request",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "result": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_AioHtHeatpump_init_del": {
            "name": "test_AioHtHeatpump_init_del",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "cmdopt_device": [
                    "Type",
                    "str"
                ],
                "cmdopt_baudrate": [
                    "Type",
                    "str"
                ]
            }
        },
        "test_AioHtHeatpump_enter_exit": {
            "name": "test_AioHtHeatpump_enter_exit",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "cmdopt_device": [
                    "str",
                    "float"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "float"
                ]
            }
        },
        "hthp": {
            "name": "hthp",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "cmdopt_device": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cmdopt_baudrate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestAioHtHeatpump.test_open_connection": {
            "name": "test_open_connection",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestAioHtHeatpump.test_verify_param_action": {
            "name": "test_verify_param_action",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "float"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "float"
                ],
                "action": [
                    "set",
                    "str"
                ]
            }
        },
        "TestAioHtHeatpump.test_verify_param_error": {
            "name": "test_verify_param_error",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "htheatpump-master/tests/test_htheatpump.py": {
        "test_calc_checksum": {
            "name": "test_calc_checksum",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ],
                "checksum": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "test_verify_checksum_raises_ValueError": {
            "name": "test_verify_checksum_raises_ValueError",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "test_verify_checksum": {
            "name": "test_verify_checksum",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "bool",
                    "Callable",
                    "int",
                    "str"
                ],
                "result": [
                    "bytes",
                    "bool",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "test_add_checksum_raises_ValueError": {
            "name": "test_add_checksum_raises_ValueError",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_add_checksum": {
            "name": "test_add_checksum",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "bool",
                    "int",
                    "Callable"
                ],
                "result": [
                    "bytes",
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_create_request_raises_ValueError": {
            "name": "test_create_request_raises_ValueError",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "test_create_request": {
            "name": "test_create_request",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "result": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_HtHeatpump_init_del": {
            "name": "test_HtHeatpump_init_del",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "cmdopt_device": [
                    "str",
                    "int"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int"
                ]
            }
        },
        "test_HtHeatpump_enter_exit": {
            "name": "test_HtHeatpump_enter_exit",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "cmdopt_device": [
                    "str",
                    "float"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "float"
                ]
            }
        },
        "hthp": {
            "name": "hthp",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "cmdopt_device": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cmdopt_baudrate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "reconnect": {
            "name": "reconnect",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "hthp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_open_connection": {
            "name": "test_open_connection",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestHtHeatpump.test_verify_param_action": {
            "name": "test_verify_param_action",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "float"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "float"
                ],
                "action": [
                    "set",
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_verify_param_error": {
            "name": "test_verify_param_error",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int"
                ]
            }
        },
        "TestHtHeatpump.test_send_request": {
            "name": "test_send_request",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "int",
                    "str"
                ],
                "cmdopt_baudrate": [
                    "int",
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_read_response": {
            "name": "test_read_response",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int"
                ]
            }
        },
        "TestHtHeatpump.test_get_serial_number": {
            "name": "test_get_serial_number",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_get_version": {
            "name": "test_get_version",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_get_date_time": {
            "name": "test_get_date_time",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "bool"
                ]
            }
        },
        "TestHtHeatpump.test_set_date_time": {
            "name": "test_set_date_time",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_set_date_time_raises_TypeError": {
            "name": "test_set_date_time_raises_TypeError",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, float]"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, float]"
                ]
            }
        },
        "TestHtHeatpump.test_get_last_fault": {
            "name": "test_get_last_fault",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": []
            }
        },
        "TestHtHeatpump.test_get_fault_list_size": {
            "name": "test_get_fault_list_size",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": []
            }
        },
        "TestHtHeatpump.test_get_fault_list": {
            "name": "test_get_fault_list",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "float"
                ]
            }
        },
        "TestHtHeatpump.test_get_fault_list_in_several_pieces": {
            "name": "test_get_fault_list_in_several_pieces",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "float"
                ]
            }
        },
        "TestHtHeatpump.test_get_fault_list_with_index": {
            "name": "test_get_fault_list_with_index",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "float"
                ]
            }
        },
        "TestHtHeatpump.test_get_fault_list_with_index_raises_IOError": {
            "name": "test_get_fault_list_with_index_raises_IOError",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "str"
                ]
            }
        },
        "TestHtHeatpump.test_get_fault_list_with_indices": {
            "name": "test_get_fault_list_with_indices",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "float",
                    "int",
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestHtHeatpump.test_get_param": {
            "name": "test_get_param",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "name": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "param": [
                    "htheatpump.HtParam",
                    "str",
                    "Optional[float]",
                    "List[Optional[str]]",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestHtHeatpump.test_get_param_raises_KeyError": {
            "name": "test_get_param_raises_KeyError",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int",
                    "bool"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestHtHeatpump.test_set_param": {
            "name": "test_set_param",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "str",
                    "htheatpump.HtHeatpump",
                    "htheatpump.HtParam"
                ],
                "name": [
                    "str",
                    "htheatpump.HtHeatpump",
                    "htheatpump.HtParam"
                ],
                "param": [
                    "str",
                    "htheatpump.HtHeatpump",
                    "htheatpump.HtParam"
                ]
            }
        },
        "TestHtHeatpump.test_set_param_raises_KeyError": {
            "name": "test_set_param_raises_KeyError",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "int",
                    "str",
                    "bool"
                ],
                "cmdopt_baudrate": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestHtHeatpump.test_set_param_raises_ValueError": {
            "name": "test_set_param_raises_ValueError",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int",
                    "htheatpump.HtParam"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int",
                    "htheatpump.HtParam"
                ],
                "name": [
                    "str",
                    "int",
                    "htheatpump.HtParam"
                ],
                "param": [
                    "str",
                    "int",
                    "htheatpump.HtParam"
                ]
            }
        },
        "TestHtHeatpump.test_in_error": {
            "name": "test_in_error",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestHtHeatpump.test_query": {
            "name": "test_query",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestHtHeatpump.test_query_with_names": {
            "name": "test_query_with_names",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ],
                "names": [
                    "List[str]",
                    "str",
                    "List[bytes]"
                ]
            }
        },
        "TestHtHeatpump.test_fast_query": {
            "name": "test_fast_query",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestHtHeatpump.test_fast_query_with_names": {
            "name": "test_fast_query_with_names",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "str",
                    "Dict[str, Any]"
                ],
                "names": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestHtHeatpump.test_fast_query_with_names_raises_KeyError": {
            "name": "test_fast_query_with_names_raises_KeyError",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int"
                ]
            }
        },
        "TestHtHeatpump.test_fast_query_with_names_raises_ValueError": {
            "name": "test_fast_query_with_names_raises_ValueError",
            "location": 586,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmdopt_device": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "cmdopt_baudrate": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "names": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestHtHeatpump.test_fast_query_in_several_pieces": {
            "name": "test_fast_query_in_several_pieces",
            "location": 597,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": []
            }
        },
        "TestHtHeatpump.test_get_time_progs": {
            "name": "test_get_time_progs",
            "location": 619,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "int",
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestHtHeatpump.test_get_time_prog": {
            "name": "test_get_time_prog",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "int",
                    "htheatpump.HtHeatpump"
                ],
                "index": [
                    "int",
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestHtHeatpump.test_get_time_prog_raises_IOError": {
            "name": "test_get_time_prog_raises_IOError",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump",
                    "int"
                ],
                "index": [
                    "htheatpump.HtHeatpump",
                    "int"
                ]
            }
        },
        "TestHtHeatpump.test_get_time_prog_entry": {
            "name": "test_get_time_prog_entry",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "int",
                    "htheatpump.HtHeatpump",
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ],
                "index": [
                    "int",
                    "htheatpump.HtHeatpump",
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ],
                "day": [
                    "int",
                    "htheatpump.HtHeatpump",
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ],
                "num": [
                    "int",
                    "htheatpump.HtHeatpump",
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TestHtHeatpump.test_get_time_prog_entry_raises_IOError": {
            "name": "test_get_time_prog_entry_raises_IOError",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "int",
                    "htheatpump.HtHeatpump"
                ],
                "index": [
                    "int",
                    "htheatpump.HtHeatpump"
                ],
                "day": [
                    "int",
                    "htheatpump.HtHeatpump"
                ],
                "num": [
                    "int",
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestHtHeatpump.test_set_time_prog_entry": {
            "name": "test_set_time_prog_entry",
            "location": 689,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump"
                ]
            }
        },
        "TestHtHeatpump.test_set_time_prog": {
            "name": "test_set_time_prog",
            "location": 695,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hthp": [
                    "htheatpump.HtHeatpump"
                ]
            }
        }
    },
    "htheatpump-master/tests/test_htparams.py": {
        "hthp": {
            "name": "hthp",
            "location": 324,
            "return": [],
            "arguments": {
                "cmdopt_device": [],
                "cmdopt_baudrate": []
            }
        },
        "reconnect": {
            "name": "reconnect",
            "location": 334,
            "return": [],
            "arguments": {
                "hthp": []
            }
        },
        "TestHtDataTypes.test_from_str_raises_ValueError": {
            "name": "test_from_str_raises_ValueError",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "TestHtDataTypes.test_from_str": {
            "name": "test_from_str",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHtParam.test_from_str_static": {
            "name": "test_from_str_static",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "data_type": [],
                "exp_value": [],
                "strict": []
            }
        },
        "TestHtParam.test_from_str_static_assert": {
            "name": "test_from_str_static_assert",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": []
            }
        },
        "TestHtParam.test_from_str_member": {
            "name": "test_from_str_member",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "TestHtParam.test_to_str_static": {
            "name": "test_to_str_static",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "data_type": [],
                "exp_str": []
            }
        },
        "TestHtParam.test_to_str_member": {
            "name": "test_to_str_member",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "TestHtParam.test_repr": {
            "name": "test_repr",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParam.test_cmd": {
            "name": "test_cmd",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cmd": []
            }
        },
        "TestHtParam.test_set_limits": {
            "name": "test_set_limits",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParam.test_set_limits_raises_TypeError": {
            "name": "test_set_limits_raises_TypeError",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": [],
                "min_val": [],
                "max_val": []
            }
        },
        "TestHtParam.test_in_limits": {
            "name": "test_in_limits",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParam.test_in_limits_None": {
            "name": "test_in_limits_None",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "TestHtParam.test_check_value_type": {
            "name": "test_check_value_type",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "data_type": []
            }
        },
        "TestHtParam.test_check_value_type_raises_TypeError": {
            "name": "test_check_value_type_raises_TypeError",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "data_type": []
            }
        },
        "TestHtParams.test_acl": {
            "name": "test_acl",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "acl": []
            }
        },
        "TestHtParams.test_limits": {
            "name": "test_limits",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "min_val": [],
                "max_val": []
            }
        },
        "TestHtParams.test_get": {
            "name": "test_get",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParams.test_dump": {
            "name": "test_dump",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHtParams.test_definition_file": {
            "name": "test_definition_file",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHtParams.test_validate_param": {
            "name": "test_validate_param",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "hthp": [],
                "name": [],
                "param": []
            }
        }
    },
    "htheatpump-master/tests/test_htparams_async.py": {
        "hthp": {
            "name": "hthp",
            "location": 324,
            "return": [],
            "arguments": {
                "cmdopt_device": [],
                "cmdopt_baudrate": []
            }
        },
        "TestHtDataTypes.test_from_str_raises_ValueError": {
            "name": "test_from_str_raises_ValueError",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "TestHtDataTypes.test_from_str": {
            "name": "test_from_str",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHtParam.test_from_str_static": {
            "name": "test_from_str_static",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "data_type": [],
                "exp_value": [],
                "strict": []
            }
        },
        "TestHtParam.test_from_str_static_assert": {
            "name": "test_from_str_static_assert",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": []
            }
        },
        "TestHtParam.test_from_str_member": {
            "name": "test_from_str_member",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "TestHtParam.test_to_str_static": {
            "name": "test_to_str_static",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "data_type": [],
                "exp_str": []
            }
        },
        "TestHtParam.test_to_str_member": {
            "name": "test_to_str_member",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "TestHtParam.test_repr": {
            "name": "test_repr",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParam.test_cmd": {
            "name": "test_cmd",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cmd": []
            }
        },
        "TestHtParam.test_set_limits": {
            "name": "test_set_limits",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParam.test_set_limits_raises_TypeError": {
            "name": "test_set_limits_raises_TypeError",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": [],
                "min_val": [],
                "max_val": []
            }
        },
        "TestHtParam.test_in_limits": {
            "name": "test_in_limits",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParam.test_in_limits_None": {
            "name": "test_in_limits_None",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "TestHtParam.test_check_value_type": {
            "name": "test_check_value_type",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "data_type": []
            }
        },
        "TestHtParam.test_check_value_type_raises_TypeError": {
            "name": "test_check_value_type_raises_TypeError",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "data_type": []
            }
        },
        "TestHtParams.test_acl": {
            "name": "test_acl",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "acl": []
            }
        },
        "TestHtParams.test_limits": {
            "name": "test_limits",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "min_val": [],
                "max_val": []
            }
        },
        "TestHtParams.test_get": {
            "name": "test_get",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "param": []
            }
        },
        "TestHtParams.test_dump": {
            "name": "test_dump",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHtParams.test_definition_file": {
            "name": "test_definition_file",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "htheatpump-master/tests/test_httimeprog.py": {
        "TestTimeProgPeriod.test_init_raises_ValueError": {
            "name": "test_init_raises_ValueError",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_init": {
            "name": "test_init",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_from_str_raises_ValueError": {
            "name": "test_from_str_raises_ValueError",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_str": [
                    "str"
                ],
                "end_str": [
                    "str"
                ]
            }
        },
        "TestTimeProgPeriod.test_from_str": {
            "name": "test_from_str",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_str": [
                    "str"
                ],
                "end_str": [
                    "str"
                ]
            }
        },
        "TestTimeProgPeriod.test_from_json": {
            "name": "test_from_json",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "Dict[str, str]"
                ]
            }
        },
        "TestTimeProgPeriod.test_set_raises_ValueError": {
            "name": "test_set_raises_ValueError",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_set": {
            "name": "test_set",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_str": {
            "name": "test_str",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_eq": {
            "name": "test_eq",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgPeriod.test_as_dict": {
            "name": "test_as_dict",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_as_json": {
            "name": "test_as_json",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgPeriod.test_properties": {
            "name": "test_properties",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgEntry.test_init": {
            "name": "test_init",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgEntry.test_from_str_raises_ValueError": {
            "name": "test_from_str_raises_ValueError",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int"
                ]
            }
        },
        "TestTimeProgEntry.test_from_str": {
            "name": "test_from_str",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "str",
                    "tuple"
                ]
            }
        },
        "TestTimeProgEntry.test_from_json": {
            "name": "test_from_json",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTimeProgEntry.test_set": {
            "name": "test_set",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgEntry.test_str": {
            "name": "test_str",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestTimeProgEntry.test_eq": {
            "name": "test_eq",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgEntry.test_as_dict": {
            "name": "test_as_dict",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgEntry.test_as_json": {
            "name": "test_as_json",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgEntry.test_properties": {
            "name": "test_properties",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_init": {
            "name": "test_init",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_from_json": {
            "name": "test_from_json",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_str": {
            "name": "test_str",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_as_dict": {
            "name": "test_as_dict",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_as_json": {
            "name": "test_as_json",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_properties": {
            "name": "test_properties",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_entry": {
            "name": "test_entry",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "Callable"
                ],
                "num": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "Callable"
                ]
            }
        },
        "TestTimeProgram.test_entry_raises_IndexError": {
            "name": "test_entry_raises_IndexError",
            "location": 578,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeProgram.test_entries_of_day": {
            "name": "test_entries_of_day",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "TestTimeProgram.test_set_entry_raises_ValueError": {
            "name": "test_set_entry_raises_ValueError",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "str",
                    "float"
                ],
                "start_hour": [
                    "int"
                ],
                "start_minute": [
                    "int"
                ],
                "end_hour": [
                    "int"
                ],
                "end_minute": [
                    "int"
                ]
            }
        },
        "TestTimeProgram.test_set_entry_raises_IndexError": {
            "name": "test_set_entry_raises_IndexError",
            "location": 621,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "htheatpump-master/tests/test_utils.py": {
        "test_SingletonClass": {
            "name": "test_SingletonClass",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Timer": {
            "name": "test_Timer",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MySingleton.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ]
            }
        }
    },
    "htheatpump-master/tests/__init__.py": {}
}
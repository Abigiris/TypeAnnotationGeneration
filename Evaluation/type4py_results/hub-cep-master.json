{
    "hub-cep-master/setup.py": {
        "long_description": {
            "name": "long_description",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-cep-master/__version__.py": {},
    "hub-cep-master/examples/aws/handler.py": {
        "get_address": {
            "name": "get_address",
            "location": 4,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Callable",
                    "int"
                ],
                "context": [
                    "dict"
                ]
            }
        }
    },
    "hub-cep-master/hub_cep/consts.py": {},
    "hub-cep-master/hub_cep/exceptions.py": {
        "TokenError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "int"
                ],
                "errors": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "ZipcodeError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "hub-cep-master/hub_cep/messages.py": {},
    "hub-cep-master/hub_cep/providers.py": {
        "AbstractProvider.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zipcode": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "AbstractProvider.zipcode": {
            "name": "zipcode",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zipcode": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractProvider.call": {
            "name": "call",
            "location": 39,
            "return": [
                "type",
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bytes",
                    "requests.Response",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "bytes",
                    "requests.Response",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbstractProvider.search": {
            "name": "search",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "AbstractProvider.translate": {
            "name": "translate",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Postmon.get_url": {
            "name": "get_url",
            "location": 85,
            "return": [
                "str",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Postmon.search": {
            "name": "search",
            "location": 88,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Postmon.translate": {
            "name": "translate",
            "location": 120,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "Viacep.get_url": {
            "name": "get_url",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viacep.search": {
            "name": "search",
            "location": 141,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viacep.translate": {
            "name": "translate",
            "location": 170,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "Cepaberto.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zipcode": [
                    "bool",
                    "int",
                    "str"
                ],
                "token": [
                    "Union[str, Callable[[], str]]",
                    "dict",
                    "Optional[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Cepaberto.token": {
            "name": "token",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "Cepaberto.get_url": {
            "name": "get_url",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cepaberto.get_headers": {
            "name": "get_headers",
            "location": 207,
            "return": [
                "eth.abc.VirtualMachineAPI",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cepaberto.search": {
            "name": "search",
            "location": 210,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cepaberto.translate": {
            "name": "translate",
            "location": 239,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "hub-cep-master/hub_cep/zipcode.py": {
        "AbstractZipCode.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zipcode": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "AbstractZipCode.zipcode": {
            "name": "zipcode",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zipcode": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractZipCode.search": {
            "name": "search",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ZipCode.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zipcode": [
                    "str",
                    "Optional[str]",
                    "Optional[abc.MutableMapping]"
                ]
            }
        },
        "ZipCode.search": {
            "name": "search",
            "location": 45,
            "return": [
                "Dict[str, str]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-cep-master/hub_cep/__init__.py": {},
    "hub-cep-master/tests/test_messages.py": {
        "test_network_error": {
            "name": "test_network_error",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_not_implemented": {
            "name": "test_not_implemented",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_strange_error": {
            "name": "test_strange_error",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_success": {
            "name": "test_success",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_token_invalid": {
            "name": "test_token_invalid",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_zipcode_invalid": {
            "name": "test_zipcode_invalid",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_zipcode_not_found": {
            "name": "test_zipcode_not_found",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "hub-cep-master/tests/test_providers.py": {
        "TestAbstractProvider.data": {
            "name": "data",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractProvider.test_raises_not_implemented_error_when_call_search_method": {
            "name": "test_raises_not_implemented_error_when_call_search_method",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestAbstractProvider.test_raises_not_implemented_error_when_call_translate_method": {
            "name": "test_raises_not_implemented_error_when_call_translate_method",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestViacep.viacep_success": {
            "name": "viacep_success",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestViacep.test_base_url": {
            "name": "test_base_url",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestViacep.test_get_url": {
            "name": "test_get_url",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestViacep.test_zipcode_getter": {
            "name": "test_zipcode_getter",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestViacep.test_zipcode_setter": {
            "name": "test_zipcode_setter",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestViacep.test_estado": {
            "name": "test_estado",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "viacep_success": []
            }
        },
        "TestViacep.test_localidade": {
            "name": "test_localidade",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "viacep_success": []
            }
        },
        "TestViacep.test_bairro": {
            "name": "test_bairro",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "viacep_success": []
            }
        },
        "TestViacep.test_endereco": {
            "name": "test_endereco",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "viacep_success": []
            }
        },
        "TestViacep.test_data_invalid": {
            "name": "test_data_invalid",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestViacep.test_raises_zipcode_error": {
            "name": "test_raises_zipcode_error",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestViacep.test_raises_connection_timeout_on_request": {
            "name": "test_raises_connection_timeout_on_request",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestViacep.test_raises_http_error_on_request": {
            "name": "test_raises_http_error_on_request",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestViacep.test_raises_connection_error_on_request": {
            "name": "test_raises_connection_error_on_request",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestViacep.test_raises_exception_on_request": {
            "name": "test_raises_exception_on_request",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestViacep.test_returns_error_info_when_search_with_raises_any_exception": {
            "name": "test_returns_error_info_when_search_with_raises_any_exception",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestViacep.test_returns_error_info_when_requests_responses_any_status_codes": {
            "name": "test_returns_error_info_when_requests_responses_any_status_codes",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestPostmon.postmon_success": {
            "name": "postmon_success",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestPostmon.test_base_url": {
            "name": "test_base_url",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPostmon.test_get_url": {
            "name": "test_get_url",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPostmon.test_estado": {
            "name": "test_estado",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "postmon_success": []
            }
        },
        "TestPostmon.test_localidade": {
            "name": "test_localidade",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "postmon_success": []
            }
        },
        "TestPostmon.test_bairro": {
            "name": "test_bairro",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "postmon_success": []
            }
        },
        "TestPostmon.test_endereco": {
            "name": "test_endereco",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "postmon_success": []
            }
        },
        "TestPostmon.test_invalid_zipcode": {
            "name": "test_invalid_zipcode",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPostmon.test_returns_error_info_when_search_with_raises_any_exception": {
            "name": "test_returns_error_info_when_search_with_raises_any_exception",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestPostmon.test_returns_error_info_when_requests_responses_any_status_codes": {
            "name": "test_returns_error_info_when_requests_responses_any_status_codes",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestCepaberto.cepaberto_success": {
            "name": "cepaberto_success",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestCepaberto.test_token_getter": {
            "name": "test_token_getter",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCepaberto.test_token_setter": {
            "name": "test_token_setter",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCepaberto.test_base_url": {
            "name": "test_base_url",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCepaberto.test_get_url": {
            "name": "test_get_url",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCepaberto.test_estado": {
            "name": "test_estado",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "cepaberto_success": []
            }
        },
        "TestCepaberto.test_localidade": {
            "name": "test_localidade",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "cepaberto_success": []
            }
        },
        "TestCepaberto.test_bairro": {
            "name": "test_bairro",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "cepaberto_success": []
            }
        },
        "TestCepaberto.test_endereco": {
            "name": "test_endereco",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "cepaberto_success": []
            }
        },
        "TestCepaberto.test_invalid_zipcode": {
            "name": "test_invalid_zipcode",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCepaberto.test_raises_zipcode_error": {
            "name": "test_raises_zipcode_error",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCepaberto.test_returns_error_info_when_search_with_raises_any_exception": {
            "name": "test_returns_error_info_when_search_with_raises_any_exception",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestCepaberto.test_returns_error_info_when_requests_responses_any_status_codes": {
            "name": "test_returns_error_info_when_requests_responses_any_status_codes",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        }
    },
    "hub-cep-master/tests/test_zipcode.py": {
        "TestAbstractZipcode.data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractZipcode.test_raises_not_implemented_error_when_call_search_method": {
            "name": "test_raises_not_implemented_error_when_call_search_method",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestZipcode.test_zipcode_getter": {
            "name": "test_zipcode_getter",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZipcode.test_zipcode_setter": {
            "name": "test_zipcode_setter",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZipcode.test_raises_zipcode_error_when_is_empty_string": {
            "name": "test_raises_zipcode_error_when_is_empty_string",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZipcode.test_raises_zipcode_error_when_is_none": {
            "name": "test_raises_zipcode_error_when_is_none",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZipcode.test_fetch_success": {
            "name": "test_fetch_success",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZipcode.test_fetch_with_error": {
            "name": "test_fetch_with_error",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestZipcode.test_fetch_success_from_postmon_provider": {
            "name": "test_fetch_success_from_postmon_provider",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestZipcode.test_fetch_success_from_cepaberto_provider": {
            "name": "test_fetch_success_from_cepaberto_provider",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        }
    },
    "hub-cep-master/tests/__init__.py": {}
}
{
    "hydrus-develop/cli.py": {
        "startserver": {
            "name": "startserver",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "serve": {
            "name": "serve",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "adduser": [
                    "tuple",
                    "bool",
                    "float",
                    "Union[bool, None]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "api": [
                    "bool",
                    "int",
                    "str",
                    "Set[str]"
                ],
                "auth": [
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "dburl": [
                    "str",
                    "bool"
                ],
                "pagination": [
                    "bool",
                    "str"
                ],
                "hydradoc": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "port": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ],
                "pagesize": [
                    "bool",
                    "str"
                ],
                "serverurl": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[int]]",
                    "float"
                ],
                "token": [
                    "bool",
                    "str"
                ],
                "use_db": [
                    "bool"
                ],
                "stale_records_removal_interval": [
                    "int",
                    "bool",
                    "bytes",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginNameStr",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "hydrus-develop/setup.py": {},
    "hydrus-develop/examples/drones/doc.py": {},
    "hydrus-develop/examples/drones/doc_gen.py": {
        "doc_gen": {
            "name": "doc_gen",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "API": [
                    "str",
                    "bool"
                ],
                "BASE_URL": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hydrus-develop/examples/hydrus-demo-server/demo.py": {},
    "hydrus-develop/examples/hydrus-demo-server/doc.py": {},
    "hydrus-develop/examples/subsystem/spacecraft_parsed_classes.py": {},
    "hydrus-develop/examples/subsystem/spacecraft_vocab_jsonld.py": {},
    "hydrus-develop/examples/subsystem/subsystem_parsed_classes.py": {},
    "hydrus-develop/examples/subsystem/subsystem_vocab_jsonld.py": {},
    "hydrus-develop/examples/subsystem/__init__.py": {},
    "hydrus-develop/hydrus/app.py": {},
    "hydrus-develop/hydrus/app_factory.py": {
        "app_factory": {
            "name": "app_factory",
            "location": 4,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "api_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "vocab_route": [
                    "str",
                    "list"
                ]
            }
        },
        "app_factory.root_url": {
            "name": "root_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/hydrus/auth.py": {
        "token_response": {
            "name": "token_response",
            "location": 17,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "token": [
                    "int",
                    "trezor.utils.Writer"
                ]
            }
        },
        "failed_authentication": {
            "name": "failed_authentication",
            "location": 28,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "incorrect": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "verify_user": {
            "name": "verify_user",
            "location": 47,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "check_authentication_response": {
            "name": "check_authentication_response",
            "location": 64,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "authenticate": {
            "name": "authenticate",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "authenticate.wrapper": {
            "name": "wrapper",
            "location": 92,
            "return": [
                "Iterator[Tuple[Any, Any]]",
                "ItemsView",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/hydrus/conf.py": {
        "get_apidoc_path": {
            "name": "get_apidoc_path",
            "location": 40,
            "return": [
                "pathlib.Path",
                "str",
                "paradigm.catalog.Path"
            ],
            "arguments": {}
        },
        "load_apidoc": {
            "name": "load_apidoc",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "cerulean.path.Path",
                    "str"
                ]
            }
        },
        "get_host_domain": {
            "name": "get_host_domain",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/hydrus/resources.py": {
        "Index.get": {
            "name": "get",
            "location": 59,
            "return": [
                "Dict[str, Dict[str, str]]",
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocab.get": {
            "name": "get",
            "location": 67,
            "return": [
                "Dict[str, Dict[str, str]]",
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entrypoint.get": {
            "name": "get",
            "location": 79,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.get": {
            "name": "get",
            "location": 90,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Item.post": {
            "name": "post",
            "location": 123,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[\"permissions_doc\"]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Item.put": {
            "name": "put",
            "location": 148,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Item.delete": {
            "name": "delete",
            "location": 168,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ItemCollection.get": {
            "name": "get",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ItemCollection.put": {
            "name": "put",
            "location": 212,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "FrozenSet[str]"
                ]
            }
        },
        "ItemCollection.delete": {
            "name": "delete",
            "location": 231,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Contexts.get": {
            "name": "get",
            "location": 247,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/utils.py": {
        "set_authentication": {
            "name": "set_authentication",
            "location": 40,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "bool",
                    "bytes",
                    "str",
                    "Exception"
                ],
                "authentication": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_authentication": {
            "name": "get_authentication",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "set_api_name": {
            "name": "set_api_name",
            "location": 80,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "str",
                    "dict",
                    "List[str]",
                    "Callable"
                ],
                "api_name": [
                    "str",
                    "List[str]",
                    "List[Tuple[Any, str]]",
                    "bool"
                ]
            }
        },
        "get_api_name": {
            "name": "get_api_name",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "set_page_size": {
            "name": "set_page_size",
            "location": 118,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ],
                "page_size": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_page_size": {
            "name": "get_page_size",
            "location": 140,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]"
            ],
            "arguments": {}
        },
        "set_pagination": {
            "name": "set_pagination",
            "location": 155,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "bool",
                    "bytes",
                    "str",
                    "Exception"
                ],
                "paginate": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_pagination": {
            "name": "get_pagination",
            "location": 177,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "set_doc": {
            "name": "set_doc",
            "location": 192,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "bool",
                    "bytes",
                    "str",
                    "Exception"
                ],
                "APIDOC": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "set_token": {
            "name": "set_token",
            "location": 217,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "str",
                    "bool",
                    "tuple",
                    "falcon.Response"
                ],
                "token": [
                    "str",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "get_doc": {
            "name": "get_doc",
            "location": 234,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_token": {
            "name": "get_token",
            "location": 248,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "set_hydrus_server_url": {
            "name": "set_hydrus_server_url",
            "location": 259,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "Optional[bool]"
                ],
                "server_url": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "get_hydrus_server_url": {
            "name": "get_hydrus_server_url",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "set_session": {
            "name": "set_session",
            "location": 297,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "application": [
                    "Dict[str, Any]",
                    "bytes",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "DB_SESSION": [
                    "bool",
                    "id3c.db.session.DatabaseSession"
                ]
            }
        },
        "get_session": {
            "name": "get_session",
            "location": 324,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "set_response_headers": {
            "name": "set_response_headers",
            "location": 339,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, str]]",
                "Type[T]"
            ],
            "arguments": {
                "resp": [
                    "flask.Response",
                    "int",
                    "dict",
                    "requests.Response",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "ct": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "headers": [
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, Optional[str]]"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "error_response": {
            "name": "error_response",
            "location": 366,
            "return": [
                "Tuple[flask.wrappers.Response, int]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "error": [
                    "hydra_python_core.doc_writer.HydraError",
                    "str",
                    "Optional[\"Response\"]",
                    "List[str]",
                    "MutableMapping",
                    "bytes"
                ]
            }
        },
        "set_authentication.handler": {
            "name": "handler",
            "location": 57,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_api_name.handler": {
            "name": "handler",
            "location": 95,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_page_size.handler": {
            "name": "handler",
            "location": 133,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_pagination.handler": {
            "name": "handler",
            "location": 170,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_doc.handler": {
            "name": "handler",
            "location": 209,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_token.handler": {
            "name": "handler",
            "location": 227,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_hydrus_server_url.handler": {
            "name": "handler",
            "location": 274,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "set_session.handler": {
            "name": "handler",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/__init__.py": {},
    "hydrus-develop/hydrus/data/crud.py": {
        "get": {
            "name": "get",
            "location": 69,
            "return": [],
            "arguments": {
                "id_": [],
                "type_": [],
                "api_name": [],
                "session": [],
                "path": [],
                "collection": []
            }
        },
        "insert": {
            "name": "insert",
            "location": 100,
            "return": [],
            "arguments": {
                "doc_": [],
                "object_": [],
                "session": [],
                "id_": [],
                "collection": []
            }
        },
        "insert_multiple": {
            "name": "insert_multiple",
            "location": 134,
            "return": [],
            "arguments": {
                "doc": [],
                "objects_": [],
                "session": [],
                "id_": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 183,
            "return": [],
            "arguments": {
                "id_": [],
                "type_": [],
                "session": [],
                "collection": []
            }
        },
        "delete_multiple": {
            "name": "delete_multiple",
            "location": 200,
            "return": [],
            "arguments": {
                "id_": [],
                "type_": [],
                "session": []
            }
        },
        "update": {
            "name": "update",
            "location": 218,
            "return": [],
            "arguments": {
                "doc_": [],
                "id_": [],
                "type_": [],
                "object_": [],
                "session": [],
                "api_name": [],
                "path": [],
                "collection": []
            }
        },
        "get_collection": {
            "name": "get_collection",
            "location": 244,
            "return": [],
            "arguments": {
                "API_NAME": [],
                "type_": [],
                "session": [],
                "paginate": [],
                "page_size": [],
                "search_params": [],
                "path": [],
                "collection": []
            }
        },
        "get_single": {
            "name": "get_single",
            "location": 286,
            "return": [],
            "arguments": {
                "type_": [],
                "api_name": [],
                "session": [],
                "path": []
            }
        },
        "insert_single": {
            "name": "insert_single",
            "location": 310,
            "return": [],
            "arguments": {
                "object_": [],
                "session": []
            }
        },
        "update_single": {
            "name": "update_single",
            "location": 332,
            "return": [],
            "arguments": {
                "object_": [],
                "session": [],
                "api_name": [],
                "path": []
            }
        },
        "delete_single": {
            "name": "delete_single",
            "location": 360,
            "return": [],
            "arguments": {
                "type_": [],
                "session": []
            }
        },
        "get_member": {
            "name": "get_member",
            "location": 376,
            "return": [],
            "arguments": {
                "collection_id": [],
                "member_id": [],
                "type_": [],
                "api_name": [],
                "session": [],
                "path": []
            }
        },
        "delete_member": {
            "name": "delete_member",
            "location": 411,
            "return": [],
            "arguments": {
                "collection_id": [],
                "member_id": [],
                "type_": [],
                "session": []
            }
        },
        "delete_multiple_members": {
            "name": "delete_multiple_members",
            "location": 433,
            "return": [],
            "arguments": {
                "collection_id_": [],
                "id_": [],
                "type_": [],
                "session": []
            }
        },
        "insert_modification_record": {
            "name": "insert_modification_record",
            "location": 456,
            "return": [],
            "arguments": {
                "method": [],
                "resource_url": [],
                "session": []
            }
        },
        "get_last_modification_job_id": {
            "name": "get_last_modification_job_id",
            "location": 472,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "get_modification_table_diff": {
            "name": "get_modification_table_diff",
            "location": 488,
            "return": [],
            "arguments": {
                "session": [],
                "agent_job_id": []
            }
        },
        "pagination": {
            "name": "pagination",
            "location": 532,
            "return": [],
            "arguments": {
                "filtered_instances": [],
                "path": [],
                "type_": [],
                "API_NAME": [],
                "search_params": [],
                "paginate": [],
                "page_size": []
            }
        },
        "item_exists": {
            "name": "item_exists",
            "location": 604,
            "return": [],
            "arguments": {
                "item_type": [],
                "item_id": [],
                "session": []
            }
        }
    },
    "hydrus-develop/hydrus/data/crud_helpers.py": {
        "recreate_iri": {
            "name": "recreate_iri",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "API_NAME": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "search_params": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "parse_search_params": {
            "name": "parse_search_params",
            "location": 29,
            "return": [
                "str",
                "List[str]",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "search_params": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "calculate_page_limit_and_offset": {
            "name": "calculate_page_limit_and_offset",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "paginate": [
                    "bool"
                ],
                "page_size": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "str",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "page": [
                    "int",
                    "Optional[List[Any]]",
                    "List[int]"
                ],
                "result_length": [
                    "int",
                    "Optional[List[Any]]",
                    "List[int]"
                ],
                "offset": [
                    "int",
                    "Optional[int]",
                    "Union[float, int]",
                    "tuple",
                    "str"
                ],
                "limit": [
                    "int",
                    "Union[float, int]",
                    "Optional[int]",
                    "tuple",
                    "float"
                ]
            }
        },
        "pre_process_pagination_parameters": {
            "name": "pre_process_pagination_parameters",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "search_params": [
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "paginate": [
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ],
                "page_size": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "bool",
                    "Optional[int]"
                ],
                "result_length": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "attach_hydra_view": {
            "name": "attach_hydra_view",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "collection_template": [
                    "str",
                    "int"
                ],
                "paginate_param": [
                    "str",
                    "int"
                ],
                "result_length": [
                    "str",
                    "int"
                ],
                "page_size": [
                    "str",
                    "int"
                ],
                "iri": [
                    "str",
                    "int"
                ],
                "offset": [
                    "str",
                    "int"
                ],
                "page": [
                    "str",
                    "int"
                ],
                "last": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/db_models.py": {
        "_set_sqlite_pragma": {
            "name": "_set_sqlite_pragma",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "dbapi_connection": [
                    "int",
                    "dict",
                    "str",
                    "Union[str, int]"
                ],
                "connection_record": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "create_database_tables": {
            "name": "create_database_tables",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "classes": [
                    "str",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Resource.name": {
            "name": "name",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.resource": {
            "name": "resource",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.supported_properties": {
            "name": "supported_properties",
            "location": 67,
            "return": [
                "int",
                "Dict[str, Any]",
                "Callable[..., Awaitable]",
                "bytes",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.get_attr_dict": {
            "name": "get_attr_dict",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.foreign_key_column": {
            "name": "foreign_key_column",
            "location": 139,
            "return": [
                "int",
                "str",
                "bytes",
                "OrderedDict"
            ],
            "arguments": {
                "foreign_table_name": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Resource.make_db_table": {
            "name": "make_db_table",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.is_valid": {
            "name": "is_valid",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hydrus-develop/hydrus/data/doc_parse.py": {
        "get_classes": {
            "name": "get_classes",
            "location": 7,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "apidoc": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_all_properties": {
            "name": "get_all_properties",
            "location": 20,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "classes": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Callable",
                    "bool",
                    "ClassVar"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/exceptions.py": {
        "ClassNotFound.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "ClassNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 13,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceNotFound.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "int",
                    "str",
                    "float"
                ],
                "id_": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "InstanceNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 27,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberInstanceNotFound.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[bool]",
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "collection_id_": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "member_id_": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MemberInstanceNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 53,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyNotFound.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "PropertyNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 74,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceExists.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "int",
                    "str",
                    "float"
                ],
                "id_": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "InstanceExists.get_HTTP": {
            "name": "get_HTTP",
            "location": 88,
            "return": [
                "str",
                "dict",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExists.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "UserExists.get_HTTP": {
            "name": "get_HTTP",
            "location": 111,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserNotFound.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "UserNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 124,
            "return": [
                "str",
                "Dict[str, bool]",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageNotFound.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "PageNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 137,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidSearchParameter.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "InvalidSearchParameter.get_HTTP": {
            "name": "get_HTTP",
            "location": 150,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncompatibleParameters.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IncompatibleParameters.get_HTTP": {
            "name": "get_HTTP",
            "location": 163,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OffsetOutOfRange.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OffsetOutOfRange.get_HTTP": {
            "name": "get_HTTP",
            "location": 181,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyNotGiven.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "PropertyNotGiven.get_HTTP": {
            "name": "get_HTTP",
            "location": 194,
            "return": [
                "str",
                "int",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidDateTimeFormat.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_": [
                    "int",
                    "List[int]",
                    "dict",
                    "str",
                    "frozenset",
                    "AbstractSet[str]"
                ]
            }
        },
        "InvalidDateTimeFormat.get_HTTP": {
            "name": "get_HTTP",
            "location": 207,
            "return": [
                "dict",
                "str",
                "Dict[str, type]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hydrus-develop/hydrus/data/resource_based_classes.py": {
        "get_type": {
            "name": "get_type",
            "location": 27,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_modified_object": {
            "name": "get_modified_object",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "dict",
                    "sqlalchemy.Column",
                    "Dict[str, Any]",
                    "int"
                ],
                "doc": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_database_class": {
            "name": "get_database_class",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "type_": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "insert_object": {
            "name": "insert_object",
            "location": 87,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "doc_": [
                    "sqlalchemy.orm.query.Query"
                ],
                "object_": [
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "Callable",
                    "Exception"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "Type[T]",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "dict"
                ],
                "collection": [
                    "bool",
                    "List[int]"
                ]
            }
        },
        "get_object": {
            "name": "get_object",
            "location": 165,
            "return": [
                "str",
                "IO[bytes]"
            ],
            "arguments": {
                "query_info": [
                    "Optional[str]",
                    "bool"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "Optional[int]"
                ],
                "collection": [
                    "bool",
                    "str",
                    "Dict[str, object]",
                    "List[str]"
                ]
            }
        },
        "delete_object": {
            "name": "delete_object",
            "location": 205,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "query_info": [
                    "str",
                    "Optional[int]",
                    "sqlalchemy.sql.schema.Table"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str"
                ],
                "collection": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "update_object": {
            "name": "update_object",
            "location": 243,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "doc_": [
                    "Sequence[str]",
                    "bool"
                ],
                "object_": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "query_info": [
                    "str"
                ],
                "session": [
                    "str"
                ],
                "collection": [
                    "str"
                ]
            }
        },
        "get_collection_member": {
            "name": "get_collection_member",
            "location": 275,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "query_info": [
                    "str",
                    "bool",
                    "Optional[dict]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete_collection_member": {
            "name": "delete_collection_member",
            "location": 306,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "query_info": [
                    "str",
                    "Dict[str, Any]"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "get_all_filtered_instances": {
            "name": "get_all_filtered_instances",
            "location": 337,
            "return": [
                "bool",
                "Optional[Any]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "str"
                ],
                "search_params": [
                    "str"
                ],
                "type_": [
                    "bool",
                    "set",
                    "Dict[str, Set[str]]",
                    "T",
                    "Optional[Callable]",
                    "float",
                    "int"
                ],
                "collection": [
                    "str",
                    "bool",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "get_single_response": {
            "name": "get_single_response",
            "location": 385,
            "return": [
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "uuid.UUID"
                ],
                "type_": [
                    "str",
                    "Callable[..., Awaitable[Any]]",
                    "sqlalchemy.engine.reflection.Inspector",
                    "sqlalchemy.sql.schema.Table"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/user.py": {
        "add_user": {
            "name": "add_user",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "jgikbase.idmapping.core.tokens.Token",
                    "Optional[List[str]]"
                ],
                "paraphrase": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str"
                ]
            }
        },
        "check_nonce": {
            "name": "check_nonce",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "werkzeug.local.LocalProxy",
                    "Optional[requests.Session]",
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "serverwamp.session.WAMPSession",
                    "int"
                ]
            }
        },
        "create_nonce": {
            "name": "create_nonce",
            "location": 51,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "nox.sessions.Session",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "add_token": {
            "name": "add_token",
            "location": 64,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "werkzeug.local.LocalProxy",
                    "int",
                    "fastapi.exceptions.RequestValidationError"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "serverwamp.session.WAMPSession",
                    "solo.vendor.old_session.old_session.Session",
                    "int"
                ]
            }
        },
        "check_token": {
            "name": "check_token",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "werkzeug.local.LocalProxy",
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ]
            }
        },
        "generate_basic_digest": {
            "name": "generate_basic_digest",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "id_": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ],
                "paraphrase": [
                    "str"
                ]
            }
        },
        "authenticate_user": {
            "name": "authenticate_user",
            "location": 111,
            "return": [
                "Dict[str, Any]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "id_": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ],
                "paraphrase": [
                    "str",
                    "int"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "verification_token.models.Token",
                    "str"
                ]
            }
        },
        "check_authorization": {
            "name": "check_authorization",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "werkzeug.local.LocalProxy"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "werkzeug.local.LocalProxy",
                    "serverwamp.session.WAMPSession",
                    "solo.vendor.old_session.old_session.Session"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/__init__.py": {},
    "hydrus-develop/hydrus/data/helpers/itemhelpers.py": {
        "items_get_check_support": {
            "name": "items_get_check_support",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "id_": [
                    "str"
                ],
                "class_type": [
                    "str"
                ],
                "class_path": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "is_collection": [
                    "str"
                ]
            }
        },
        "items_post_check_support": {
            "name": "items_post_check_support",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "qutebrowser.utils.usertypes.Backend"
                ],
                "object_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "class_path": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ],
                "path": [
                    "str"
                ],
                "is_collection": [
                    "str",
                    "qutebrowser.utils.usertypes.Backend"
                ]
            }
        },
        "items_put_check_support": {
            "name": "items_put_check_support",
            "location": 114,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "tracim.models.data.Workspace",
                    "Optional[str]"
                ],
                "class_path": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "AnyStr"
                ],
                "path": [
                    "str"
                ],
                "is_collection": [
                    "str",
                    "tracim.models.data.Workspace",
                    "Optional[str]"
                ]
            }
        },
        "items_delete_check_support": {
            "name": "items_delete_check_support",
            "location": 162,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[int]",
                "bool",
                "Optional[bytes]"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "Union[str, Sequence]",
                    "Type"
                ],
                "class_type": [
                    "Optional[str]",
                    "str",
                    "Union[str, int]",
                    "Type",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "path": [
                    "str",
                    "dict"
                ],
                "is_collection": [
                    "Optional[str]",
                    "str",
                    "Union[str, int]",
                    "Type",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "member_get_check_support": {
            "name": "member_get_check_support",
            "location": 193,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "collection_id": [
                    "str"
                ],
                "member_id": [
                    "str"
                ],
                "class_type": [
                    "str"
                ],
                "class_path": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "member_delete_check_support": {
            "name": "member_delete_check_support",
            "location": 214,
            "return": [
                "str",
                "Optional[Dict[str, bytes]]",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "collection_id": [
                    "str",
                    "int",
                    "tracim.models.data.Workspace",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "member_id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "tracim.models.data.Workspace"
                ],
                "class_type": [
                    "tracim.models.data.Workspace",
                    "int",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "path": [
                    "str",
                    "dict",
                    "Union[str, dict]",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/helpers/items_helpers.py": {
        "items_put_response": {
            "name": "items_put_response",
            "location": 35,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "int_list": [
                    "str",
                    "Callable[[str, str], None]",
                    "bytes"
                ]
            }
        },
        "items_delete_response": {
            "name": "items_delete_response",
            "location": 115,
            "return": [
                "Dict[str, Any]",
                "purplship.core.utils.Element",
                "str",
                "requests.Response"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "int_list": [
                    "bool",
                    "str"
                ]
            }
        },
        "items_delete_members_response": {
            "name": "items_delete_members_response",
            "location": 165,
            "return": [
                "Dict[str, Any]",
                "requests.Response",
                "pyramid.response.Response",
                "Dict[str, str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "collection_id_": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]",
                    "Optional[Set[int]]",
                    "list"
                ],
                "int_list": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/helpers/item_collection_helpers.py": {
        "item_collection_get_response": {
            "name": "item_collection_get_response",
            "location": 42,
            "return": [
                "flask.Response",
                "_models.Response",
                "faaspact_verifier.definitions.Response",
                "dict",
                "purplship.core.utils.serializable.Deserializable[str]",
                "purplship.core.utils.Element"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "item_collection_put_response": {
            "name": "item_collection_put_response",
            "location": 94,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/data/helpers/__init__.py": {
        "validObject": {
            "name": "validObject",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "validObjectList": {
            "name": "validObjectList",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "objects_": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Iterable[str]",
                    "Sequence[int]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "get_iri_from_int_list": {
            "name": "get_iri_from_int_list",
            "location": 56,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "path_url": [
                    "List[str]",
                    "str"
                ],
                "int_list": [
                    "bool",
                    "list",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "type_match": {
            "name": "type_match",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "Optional[List]"
                ],
                "obj_type": [
                    "str"
                ]
            }
        },
        "hydrafy": {
            "name": "hydrafy",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "checkEndpoint": {
            "name": "checkEndpoint",
            "location": 100,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "getType": {
            "name": "getType",
            "location": 124,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "class_path": [
                    "str"
                ],
                "method": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "checkClassOp": {
            "name": "checkClassOp",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "check_required_props": {
            "name": "check_required_props",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "obj": [
                    "Dict[str, Any]",
                    "bool",
                    "Set[str]",
                    "str",
                    "int"
                ]
            }
        },
        "check_writeable_props": {
            "name": "check_writeable_props",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "obj": [
                    "Dict[str, Any]",
                    "bool",
                    "Set[str]",
                    "str",
                    "int"
                ]
            }
        },
        "get_nested_class_path": {
            "name": "get_nested_class_path",
            "location": 207,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "class_type": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "finalize_response": {
            "name": "finalize_response",
            "location": 230,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "obj": [
                    "Dict[str, Any]",
                    "list",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "add_iri_template": {
            "name": "add_iri_template",
            "location": 284,
            "return": [
                "Optional[str]",
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "API_NAME": [
                    "str",
                    "List[str]"
                ],
                "collection_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "generate_iri_mappings": {
            "name": "generate_iri_mappings",
            "location": 305,
            "return": [
                "str",
                "bytes",
                "dict",
                "List[List[int]]",
                "bool",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "template": [
                    "str",
                    "bool"
                ],
                "skip_nested": [
                    "bool",
                    "str"
                ],
                "template_mapping": [
                    "str",
                    "bool"
                ],
                "parent_prop_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "add_pagination_iri_mappings": {
            "name": "add_pagination_iri_mappings",
            "location": 355,
            "return": [
                "str",
                "dict",
                "List[List[int]]",
                "bool",
                "bytes",
                "List[Dict]"
            ],
            "arguments": {
                "template": [
                    "str",
                    "int"
                ],
                "template_mapping": [
                    "Dict[str, Any]",
                    "list",
                    "List[dict]"
                ]
            }
        },
        "send_sync_update": {
            "name": "send_sync_update",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "socketio": [
                    "str",
                    "int",
                    "cmk.gui.utils.html.HTML",
                    "Optional[Dict]"
                ],
                "new_job_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "last_job_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "method": [
                    "str",
                    "bool",
                    "int"
                ],
                "resource_url": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "get_link_props": {
            "name": "get_link_props",
            "location": 398,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "object_": [
                    "str",
                    "Union[str, bytes]",
                    "Sequence[str]"
                ]
            }
        },
        "get_link_props_for_multiple_objects": {
            "name": "get_link_props_for_multiple_objects",
            "location": 448,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "object_list": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "str",
                    "List[dict]",
                    "bool"
                ]
            }
        },
        "validate_object": {
            "name": "validate_object",
            "location": 467,
            "return": [
                "str",
                "bool",
                "bytes",
                "type",
                "Type"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "obj_type": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "class_path": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "get_context": {
            "name": "get_context",
            "location": 484,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "category": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Dict]",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "get_path_from_type": {
            "name": "get_path_from_type",
            "location": 510,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "list",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "parse_collection_members": {
            "name": "parse_collection_members",
            "location": 519,
            "return": [
                "str",
                "Dict[str, Any]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_fragments": {
            "name": "get_fragments",
            "location": 551,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "Set[str]",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ]
            }
        },
        "get_collections_and_parsed_classes": {
            "name": "get_collections_and_parsed_classes",
            "location": 583,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/hydrus/data/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/hydrus/extensions/socketio_factory.py": {
        "create_socket": {
            "name": "create_socket",
            "location": 10,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/extensions/stale_records_cleanup.py": {
        "remove_stale_modification_records": {
            "name": "remove_stale_modification_records",
            "location": 6,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]"
                ],
                "stale_records_removal_interval": []
            }
        }
    },
    "hydrus-develop/hydrus/extensions/sync_namespace.py": {
        "SyncNamespace.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ],
                "db_session": []
            }
        },
        "SyncNamespace.on_connect": {
            "name": "on_connect",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncNamespace.on_disconnect": {
            "name": "on_disconnect",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncNamespace.on_reconnect": {
            "name": "on_reconnect",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncNamespace.on_get_modification_table_diff": {
            "name": "on_get_modification_table_diff",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "Mapping[str, Any]",
                    "Union[Dict, List]",
                    "Union[List, Dict]"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/extensions/utils.py": {
        "send_update": {
            "name": "send_update",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "method": [
                    "str",
                    "Optional[object]",
                    "type",
                    "dict"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "hydrus-develop/hydrus/extensions/__init__.py": {},
    "hydrus-develop/hydrus/samples/doc_writer_sample.py": {},
    "hydrus-develop/hydrus/samples/doc_writer_sample_output.py": {},
    "hydrus-develop/hydrus/samples/hydra_doc_sample.py": {},
    "hydrus-develop/hydrus/samples/__init__.py": {},
    "hydrus-develop/tests/conftest.py": {
        "get_doc_classes_and_properties": {
            "name": "get_doc_classes_and_properties",
            "location": 24,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "gen_dummy_object": {
            "name": "gen_dummy_object",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "class_title": [
                    "uuid.UUID",
                    "list",
                    "datetime.datetime"
                ],
                "doc": [
                    "list",
                    "datetime.datetime",
                    "uuid.UUID",
                    "Type[BaseException]"
                ]
            }
        },
        "get_ids_list": {
            "name": "get_ids_list",
            "location": 109,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dummy_object": [
                    "List[Dict[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "constants": {
            "name": "constants",
            "location": 124,
            "return": [
                "str",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "test_doc": {
            "name": "test_doc",
            "location": 136,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "float"
            ],
            "arguments": {
                "constants": []
            }
        },
        "session": {
            "name": "session",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "engine": [
                    "dict",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "engine": {
            "name": "engine",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "init_db_for_auth_tests": {
            "name": "init_db_for_auth_tests",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "doc": [
                    "src.domain.entity.user.User"
                ],
                "session": [
                    "str"
                ],
                "engine": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "headers_with_wrong_id": {
            "name": "headers_with_wrong_id",
            "location": 180,
            "return": [
                "Dict[str, Union[str, int]]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "headers_with_wrong_pass": {
            "name": "headers_with_wrong_pass",
            "location": 191,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {}
        },
        "headers_with_correct_pass_and_id": {
            "name": "headers_with_correct_pass_and_id",
            "location": 202,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "collection_names": {
            "name": "collection_names",
            "location": 213,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "doc": [
                    "bool",
                    "type",
                    "str"
                ]
            }
        },
        "put_allowed_class_names": {
            "name": "put_allowed_class_names",
            "location": 222,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_client_for_auth_tests": {
            "name": "test_client_for_auth_tests",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "constants": [
                    "str",
                    "int",
                    "Set[str]",
                    "List[str]"
                ],
                "session": [
                    "str",
                    "float",
                    "bool"
                ],
                "doc": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[type]"
                ],
                "init_db_for_auth_tests": [
                    "bool",
                    "str",
                    "raiden.utils.List[raiden.utils.Address]",
                    "dict"
                ],
                "app": [
                    "List[Tuple[str, str]]",
                    "purplship.core.utils.xml.Element",
                    "dict"
                ]
            }
        },
        "drone_doc": {
            "name": "drone_doc",
            "location": 255,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "constants": [
                    "bool",
                    "sqlalchemy.engine.Engine",
                    "str",
                    "Callable[[str], T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "drone_doc_parsed_classes": {
            "name": "drone_doc_parsed_classes",
            "location": 263,
            "return": [],
            "arguments": {
                "drone_doc": [
                    "str",
                    "Type",
                    "IO",
                    "bool"
                ]
            }
        },
        "init_db_for_crud_tests": {
            "name": "init_db_for_crud_tests",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc": [
                    "src.domain.entity.user.User"
                ],
                "session": [
                    "schema_salad.utils.CacheType",
                    "dict",
                    "Iterable[T]",
                    "str"
                ],
                "engine": [
                    "str",
                    "bool",
                    "int",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 279,
            "return": [],
            "arguments": {
                "constants": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_client_for_app_tests": {
            "name": "test_client_for_app_tests",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "session": [],
                "constants": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "dict"
                ],
                "doc": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "init_db_for_app_tests": {
            "name": "init_db_for_app_tests",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "doc": [
                    "str",
                    "bool",
                    "Container",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "constants": [
                    "bool",
                    "Optional[Any]",
                    "Iterable[object]",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ],
                "session": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "add_doc_classes_and_properties_to_db": [
                    "bool",
                    "Optional[Any]",
                    "Iterable[object]",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "init_db_for_socket_tests": {
            "name": "init_db_for_socket_tests",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "doc": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "float"
                ],
                "add_doc_classes_and_properties_to_db": [
                    "str",
                    "Optional[List[str]]",
                    "type",
                    "Dict[str, Any]",
                    "bool",
                    "Iterable[object]",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "socketio": {
            "name": "socketio",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": [],
                "session": []
            }
        },
        "socketio_client": {
            "name": "socketio_client",
            "location": 346,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "app": [
                    "str",
                    "raiden.utils.Address",
                    "Dict[str, Any]"
                ],
                "session": [
                    "str"
                ],
                "constants": [
                    "int"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "socketio": [
                    "str"
                ]
            }
        },
        "add_doc_classes_and_properties_to_db": {
            "name": "add_doc_classes_and_properties_to_db",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "doc": [
                    "dict",
                    "src.domain.entity.user.User"
                ],
                "session": [
                    "Dict[str, bool]",
                    "list",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]"
                ],
                "engine": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "hydrus-develop/tests/test_cli.py": {
        "test_startserver": {
            "name": "test_startserver",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/tests/test_pep8.py": {
        "test_pep8": {
            "name": "test_pep8",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hydrus-develop/tests/__init__.py": {},
    "hydrus-develop/tests/functional/test_app.py": {
        "TestApp.test_Index": {
            "name": "test_Index",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestApp.test_EntryPoint_context": {
            "name": "test_EntryPoint_context",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ]
            }
        },
        "TestApp.test_Vocab": {
            "name": "test_Vocab",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "bool"
                ],
                "constants": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestApp.test_fragments": {
            "name": "test_fragments",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestApp.test_Collections_GET": {
            "name": "test_Collections_GET",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "Dict[str, Any]",
                    "str"
                ],
                "constants": [
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "Iterable[int]",
                    "bool",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ],
                "doc": [],
                "init_db_for_app_tests": [
                    "bool"
                ]
            }
        },
        "TestApp.test_pagination": {
            "name": "test_pagination",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": []
            }
        },
        "TestApp.test_Collections_PUT": {
            "name": "test_Collections_PUT",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_Collections_constraint_PUT": {
            "name": "test_Collections_constraint_PUT",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests._TestServerFactory",
                    "str"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_collection_object_GET": {
            "name": "test_collection_object_GET",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[int]"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_collection_object_PUT": {
            "name": "test_collection_object_PUT",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests._TestServerFactory",
                    "str"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_collection_object_POST": {
            "name": "test_collection_object_POST",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "Optional[str]",
                    "Optional[int]",
                    "tests._TestServerFactory"
                ],
                "doc": [
                    "str",
                    "tests.e2e.Helper"
                ],
                "socketio": []
            }
        },
        "TestApp.test_collection_object_DELETE": {
            "name": "test_collection_object_DELETE",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests._TestServerFactory",
                    "str",
                    "tests.async_mock.MagicMock"
                ],
                "doc": []
            }
        },
        "TestApp.test_Collection_Class_foreign_key": {
            "name": "test_Collection_Class_foreign_key",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "Optional[int]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_object_PUT_at_id": {
            "name": "test_object_PUT_at_id",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "Optional[int]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "doc": []
            }
        },
        "TestApp.test_object_PUT_at_ids": {
            "name": "test_object_PUT_at_ids",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "Optional[int]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "TestApp.test_multiple_object_PUT_without_ids": {
            "name": "test_multiple_object_PUT_without_ids",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[int]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestApp.test_multiple_object_DELETE": {
            "name": "test_multiple_object_DELETE",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests._TestServerFactory",
                    "str",
                    "tests.async_mock.MagicMock"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestApp.test_endpointClass_PUT": {
            "name": "test_endpointClass_PUT",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "tests._TestServerFactory"
                ],
                "doc": []
            }
        },
        "TestApp.test_endpointClass_POST": {
            "name": "test_endpointClass_POST",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "Optional[str]",
                    "Optional[int]",
                    "tests._TestServerFactory"
                ],
                "doc": []
            }
        },
        "TestApp.test_endpointClass_DELETE": {
            "name": "test_endpointClass_DELETE",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "constants": [
                    "Optional[int]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "doc": []
            }
        },
        "TestApp.test_endpointClass_GET": {
            "name": "test_endpointClass_GET",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "Optional[int]"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_Collections_member_GET": {
            "name": "test_Collections_member_GET",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[int]"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_Collections_member_DELETE": {
            "name": "test_Collections_member_DELETE",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests._TestServerFactory",
                    "str",
                    "tests.async_mock.MagicMock"
                ],
                "doc": []
            }
        },
        "TestApp.test_Collections_member_DELETE_multiple": {
            "name": "test_Collections_member_DELETE_multiple",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "Callable[[], int]",
                    "bool"
                ],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "str",
                    "Optional[float]"
                ],
                "doc": []
            }
        },
        "TestApp.test_IriTemplate": {
            "name": "test_IriTemplate",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "Optional[int]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_client_controlled_pagination": {
            "name": "test_client_controlled_pagination",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_GET_for_nested_class": {
            "name": "test_GET_for_nested_class",
            "location": 624,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "tests._TestServerFactory",
                    "str",
                    "int"
                ],
                "doc": []
            }
        },
        "TestApp.test_required_props": {
            "name": "test_required_props",
            "location": 652,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": []
            }
        },
        "TestApp.test_writeable_props": {
            "name": "test_writeable_props",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": []
            }
        },
        "TestApp.test_readable_props": {
            "name": "test_readable_props",
            "location": 711,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "TestApp.test_bad_objects": {
            "name": "test_bad_objects",
            "location": 737,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestApp.test_bad_requests": {
            "name": "test_bad_requests",
            "location": 757,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [
                    "str"
                ],
                "constants": [
                    "tests._TestServerFactory",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "doc": []
            }
        },
        "TestApp.test_Endpoints_Contexts": {
            "name": "test_Endpoints_Contexts",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_app_client": [],
                "constants": [
                    "str",
                    "tests._TestServerFactory"
                ],
                "doc": []
            }
        }
    },
    "hydrus-develop/tests/functional/test_auth.py": {
        "test_wrong_id_get": {
            "name": "test_wrong_id_get",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "constants": [
                    "str",
                    "int"
                ],
                "headers_with_wrong_id": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "collection_names": [
                    "str"
                ]
            }
        },
        "test_wrong_id_put": {
            "name": "test_wrong_id_put",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "List[str]"
                ],
                "constants": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "int"
                ],
                "put_allowed_class_names": [
                    "str"
                ],
                "headers_with_wrong_id": [
                    "str"
                ]
            }
        },
        "test_wrong_pass_get": {
            "name": "test_wrong_pass_get",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "dict"
                ],
                "constants": [
                    "str",
                    "Optional[float]"
                ],
                "collection_names": [
                    "Dict[str, Any]",
                    "str"
                ],
                "headers_with_wrong_pass": [
                    "dict"
                ]
            }
        },
        "test_wrong_pass_put": {
            "name": "test_wrong_pass_put",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "List[str]"
                ],
                "constants": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "put_allowed_class_names": [
                    "str",
                    "Set[str]"
                ],
                "headers_with_wrong_pass": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_wrong_nonce_get": {
            "name": "test_wrong_nonce_get",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "Dict[str, str]"
                ],
                "constants": [
                    "str",
                    "Optional[float]"
                ],
                "collection_names": [
                    "Dict[str, Any]",
                    "str"
                ],
                "headers_with_correct_pass_and_id": [
                    "dict"
                ]
            }
        },
        "test_wrong_nonce_put": {
            "name": "test_wrong_nonce_put",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "List[str]"
                ],
                "constants": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "put_allowed_class_names": [
                    "str",
                    "Set[str]"
                ],
                "headers_with_correct_pass_and_id": []
            }
        },
        "test_correct_auth_get": {
            "name": "test_correct_auth_get",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "operation": [],
                "test_client": [
                    "dict"
                ],
                "constants": [
                    "str",
                    "Iterable"
                ],
                "collection_names": [
                    "str"
                ],
                "headers_with_correct_pass_and_id": []
            }
        },
        "test_correct_auth_post": {
            "name": "test_correct_auth_post",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "operation": [
                    "str"
                ],
                "test_client": [
                    "str"
                ],
                "constants": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "int"
                ],
                "put_allowed_class_names": [
                    "str"
                ],
                "headers_with_correct_pass_and_id": [
                    "Optional[str]"
                ]
            }
        }
    },
    "hydrus-develop/tests/functional/test_socket.py": {
        "TestSocket.test_connect": {
            "name": "test_connect",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socketio": [],
                "app": [],
                "session": [
                    "Callable"
                ]
            }
        },
        "TestSocket.test_reconnect": {
            "name": "test_reconnect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socketio": [],
                "app": [],
                "session": [
                    "Callable"
                ]
            }
        },
        "TestSocket.test_modification_table_diff": {
            "name": "test_modification_table_diff",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socketio_client": [],
                "session": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "TestSocket.test_socketio_POST_updates": {
            "name": "test_socketio_POST_updates",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socketio_client": [],
                "test_app_client": [
                    "str",
                    "bool"
                ],
                "constants": [
                    "Optional[int]",
                    "tests.conftesStandaloneRedisServer",
                    "Optional[str]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSocket.test_socketio_DELETE_updates": {
            "name": "test_socketio_DELETE_updates",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socketio_client": [],
                "test_app_client": [
                    "str",
                    "bool"
                ],
                "constants": [
                    "str",
                    "Optional[int]",
                    "tests._TestServerFactory"
                ],
                "doc": [
                    "bool"
                ]
            }
        }
    },
    "hydrus-develop/tests/unit/test_crud.py": {
        "test_crud_insert_response_is_str": {
            "name": "test_crud_insert_response_is_str",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Callable",
                    "Dict[str, Any]",
                    "tuple",
                    "List[str]"
                ],
                "drone_doc": [
                    "Optional[int]",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable",
                    "Iterable[object]",
                    "Callable[..., None]"
                ],
                "session": [
                    "uuid.UUID",
                    "bool",
                    "Callable",
                    "str"
                ],
                "init_db_for_crud_tests": [
                    "Callable",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_crud_get_returns_correct_object": {
            "name": "test_crud_get_returns_correct_object",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable[[List, bool], None]"
                ],
                "drone_doc": [
                    "Callable[[List, bool], None]",
                    "Callable"
                ],
                "session": [
                    "Set[int]"
                ]
            }
        },
        "test_get_for_nested_obj": {
            "name": "test_get_for_nested_obj",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Iterable[str]",
                    "bool",
                    "str",
                    "Exception",
                    "Callable[[], None]",
                    "Callable[..., None]"
                ],
                "drone_doc": [
                    "List[str]",
                    "Optional[str]"
                ],
                "session": [],
                "constants": [
                    "Iterable[str]",
                    "bool",
                    "str",
                    "Exception",
                    "Callable[[], None]",
                    "Callable[..., None]"
                ]
            }
        },
        "test_searching_over_collection_elements": {
            "name": "test_searching_over_collection_elements",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [],
                "drone_doc": [
                    "Callable[[List, bool], None]"
                ],
                "session": [
                    "bool"
                ]
            }
        },
        "test_update_on_object": {
            "name": "test_update_on_object",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "int"
                ],
                "drone_doc": [
                    "Callable[[List, bool], None]"
                ],
                "session": []
            }
        },
        "test_delete_on_object": {
            "name": "test_delete_on_object",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Dict[str, Any]",
                    "tuple"
                ],
                "drone_doc": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "session": [
                    "Type[T]"
                ]
            }
        },
        "test_get_on_wrong_id": {
            "name": "test_get_on_wrong_id",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "int"
                ],
                "drone_doc": [],
                "session": [
                    "Callable",
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[Dict]",
                    "List[str]",
                    "Optional[Union[bool, Any]]"
                ]
            }
        },
        "test_delete_on_wrong_id": {
            "name": "test_delete_on_wrong_id",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable[[List, bool], None]"
                ],
                "drone_doc": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[int]",
                    "str"
                ],
                "session": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_insert_used_id": {
            "name": "test_insert_used_id",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Callable[[List, bool], None]",
                    "Dict[str, Any]",
                    "tuple",
                    "Callable"
                ],
                "drone_doc": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[int]",
                    "str",
                    "Iterable[object]"
                ],
                "session": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_get_on_wrong_type": {
            "name": "test_get_on_wrong_type",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_delete_on_wrong_type": {
            "name": "test_delete_on_wrong_type",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable[[List, bool], None]"
                ],
                "drone_doc": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Iterable[object]"
                ],
                "session": []
            }
        },
        "test_insert_on_wrong_type": {
            "name": "test_insert_on_wrong_type",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable[[List, bool], None]"
                ],
                "drone_doc": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[int]",
                    "str"
                ],
                "session": [
                    "Callable"
                ]
            }
        },
        "test_insert_multiple_id": {
            "name": "test_insert_multiple_id",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable[[List, bool], None]"
                ],
                "drone_doc": [
                    "Callable[[list], None]",
                    "Optional[List[Any]]",
                    "Callable",
                    "Optional[Union[bool, Any]]"
                ],
                "session": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_delete_multiple_id": {
            "name": "test_delete_multiple_id",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [
                    "int"
                ],
                "drone_doc": [
                    "Callable[[List, bool], None]"
                ],
                "session": []
            }
        },
        "test_insert_when_property_not_given": {
            "name": "test_insert_when_property_not_given",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "drone_doc_parsed_classes": [],
                "drone_doc": [
                    "str"
                ],
                "session": [],
                "constants": []
            }
        }
    }
}
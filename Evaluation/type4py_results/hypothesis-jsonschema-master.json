{
    "hypothesis-jsonschema-master/setup.py": {
        "local_file": {
            "name": "local_file",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/src/hypothesis_jsonschema/_canonicalise.py": {
        "next_down": {
            "name": "next_down",
            "location": 63,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "_get_validator_class": {
            "name": "_get_validator_class",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "make_validator": {
            "name": "make_validator",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 93,
            "return": [
                "str",
                "Type",
                "Set[str]",
                "Mapping"
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "upper_bound_instances": {
            "name": "upper_bound_instances",
            "location": 111,
            "return": [
                "Tuple[int, int]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "schema": [
                    "list"
                ]
            }
        },
        "_get_numeric_bounds": {
            "name": "_get_numeric_bounds",
            "location": 142,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int",
                    "Dict[str, bool]"
                ]
            }
        },
        "get_number_bounds": {
            "name": "get_number_bounds",
            "location": 171,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "int"
                ]
            }
        },
        "get_integer_bounds": {
            "name": "get_integer_bounds",
            "location": 191,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "int"
                ]
            }
        },
        "canonicalish": {
            "name": "canonicalish",
            "location": 208,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "tuple",
                    "float"
                ]
            }
        },
        "merged": {
            "name": "merged",
            "location": 588,
            "return": [
                "str",
                "int",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "schemas": []
            }
        },
        "has_divisibles": {
            "name": "has_divisibles",
            "location": 827,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int",
                    "str",
                    "bool"
                ],
                "divisor": [
                    "str",
                    "float"
                ],
                "exmin": [
                    "bool",
                    "int",
                    "Union[str, list]"
                ],
                "exmax": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/src/hypothesis_jsonschema/_encode.py": {
        "_floatstr": {
            "name": "_floatstr",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "o": [
                    "float",
                    "int"
                ]
            }
        },
        "encode_canonical_json": {
            "name": "encode_canonical_json",
            "location": 53,
            "return": [
                "str",
                "Iterable[int]",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "value": [
                    "Iterable[Any]",
                    "T",
                    "Sequence[str]",
                    "set"
                ]
            }
        },
        "sort_key": {
            "name": "sort_key",
            "location": 58,
            "return": [
                "str",
                "int",
                "dict",
                "Callable",
                "float"
            ],
            "arguments": {
                "value": [
                    "Union[T, Sequence[T]]",
                    "Union[type, Tuple[type, ...]]",
                    "Optional[dict]",
                    "Optional[Union[str, Any]]",
                    "str"
                ]
            }
        },
        "CanonicalisingJsonEncoder._JSONEncoder__floatstr": {
            "name": "_JSONEncoder__floatstr",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "CanonicalisingJsonEncoder.iterencode": {
            "name": "iterencode",
            "location": 37,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Callable[[T], T]",
                    "T",
                    "int",
                    "Callable",
                    "str",
                    "type"
                ],
                "_one_shot": [
                    "Callable[[T], T]",
                    "T",
                    "int",
                    "Callable",
                    "str",
                    "type"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/src/hypothesis_jsonschema/_from_schema.py": {
        "merged_as_strategies": {
            "name": "merged_as_strategies",
            "location": 58,
            "return": [
                "int",
                "str",
                "dict",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "schemas": [
                    "str",
                    "bool",
                    "int"
                ],
                "custom_formats": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "from_schema": {
            "name": "from_schema",
            "location": 85,
            "return": [
                "str",
                "int",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, hypothesis.strategies.SearchStrategy[str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_format_filter": {
            "name": "_get_format_filter",
            "location": 109,
            "return": [
                "str",
                "bool",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "format_name": [
                    "str",
                    "Iterable[str]"
                ],
                "checker": [
                    "str",
                    "Iterable[str]"
                ],
                "strategy": [
                    "hypothesis.strategies.SearchStrategy[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "__from_schema": {
            "name": "__from_schema",
            "location": 129,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "Dict[str, float]",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str"
                ]
            }
        },
        "_numeric_with_multiplier": {
            "name": "_numeric_with_multiplier",
            "location": 229,
            "return": [
                "Iterable[str]",
                "Optional[Any]",
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "min_value": [
                    "Union[int, None]",
                    "float",
                    "Hashable",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "max_value": [
                    "Optional[int]",
                    "int",
                    "Optional[Iterable['cirq.Qid']]",
                    "Optional[float]",
                    "Optional[Union[bool, int]]"
                ],
                "schema": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "integer_schema": {
            "name": "integer_schema",
            "location": 252,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "str"
                ]
            }
        },
        "number_schema": {
            "name": "number_schema",
            "location": 260,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "rfc3339": {
            "name": "rfc3339",
            "location": 276,
            "return": [
                "Type",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "regex_patterns": {
            "name": "regex_patterns",
            "location": 316,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "json_pointers": {
            "name": "json_pointers",
            "location": 337,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "relative_json_pointers": {
            "name": "relative_json_pointers",
            "location": 346,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "_warn_invalid_regex": {
            "name": "_warn_invalid_regex",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "err": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "kw": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "string_schema": {
            "name": "string_schema",
            "location": 422,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "custom_formats": [
                    "str",
                    "Dict[str, hypothesis.strategies.SearchStrategy[str]]",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "dict"
                ],
                "schema": [
                    "str",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ]
            }
        },
        "array_schema": {
            "name": "array_schema",
            "location": 460,
            "return": [
                "str",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "custom_formats": [
                    "str",
                    "Dict[str, hypothesis.strategies.SearchStrategy[str]]",
                    "bool",
                    "dict"
                ],
                "schema": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Set[str]",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "object_schema": {
            "name": "object_schema",
            "location": 556,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "custom_formats": [
                    "str",
                    "Dict[str, hypothesis.strategies.SearchStrategy[str]]",
                    "bool",
                    "dict"
                ],
                "schema": [
                    "str",
                    "Dict[str, hypothesis.strategies.SearchStrategy[str]]",
                    "bool",
                    "dict"
                ]
            }
        },
        "from_js_regex": {
            "name": "from_js_regex",
            "location": 52,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "pattern": [
                    "Optional[Exception]",
                    "Optional[bool]"
                ]
            }
        },
        "_get_format_filter.check_valid": {
            "name": "check_valid",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "rfc3339.zfill": {
            "name": "zfill",
            "location": 285,
            "return": [
                "bool",
                "cmk.utils.rulesets.ruleset_matcher.RulesetMatchObject",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "width": [
                    "int",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "object_schema.from_object_schema": {
            "name": "from_object_schema",
            "location": 606,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "draw": [
                    "bytes",
                    "int",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "from_schema.error_raiser": {
            "name": "error_raiser",
            "location": 103,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {}
        },
        "array_schema.compose_lists_with_filter": {
            "name": "compose_lists_with_filter",
            "location": 500,
            "return": [
                "int",
                "List[int]",
                "List[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "draw": [
                    "list",
                    "Set[cmk.utils.type_defs.HostName]",
                    "List[List[Any]]",
                    "Optional[str]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "array_schema.compose_lists_with_filter.not_seen": {
            "name": "not_seen",
            "location": 504,
            "return": [
                "int",
                "bool",
                "str",
                "dict",
                "float",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "elem": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/src/hypothesis_jsonschema/_resolve.py": {
        "resolve_all_refs": {
            "name": "resolve_all_refs",
            "location": 38,
            "return": [
                "str",
                "Sequence",
                "Tuple[int]"
            ],
            "arguments": {
                "schema": []
            }
        },
        "LocalResolver.resolve_remote": {
            "name": "resolve_remote",
            "location": 32,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/src/hypothesis_jsonschema/__init__.py": {},
    "hypothesis-jsonschema-master/tests/fetch.py": {
        "get_json": {
            "name": "get_json",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "int",
                "dict",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/tests/format_json.py": {},
    "hypothesis-jsonschema-master/tests/gen_schemas.py": {
        "json_schemata": {
            "name": "json_schemata",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_json_schemata": {
            "name": "_json_schemata",
            "location": 29,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "recur": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "gen_enum": {
            "name": "gen_enum",
            "location": 58,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "gen_if_then_else": {
            "name": "gen_if_then_else",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "draw": [
                    "Dict[str, float]",
                    "Type"
                ]
            }
        },
        "gen_number": {
            "name": "gen_number",
            "location": 78,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "draw": [
                    "Optional[int]",
                    "int"
                ],
                "kind": [
                    "int"
                ]
            }
        },
        "gen_string": {
            "name": "gen_string",
            "location": 109,
            "return": [
                "str",
                "Set[str]",
                "Sequence[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "float",
                    "Optional[str]",
                    "Union[int, List]",
                    "Optional[int]"
                ]
            }
        },
        "gen_array": {
            "name": "gen_array",
            "location": 130,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "gen_object": {
            "name": "gen_object",
            "location": 167,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "draw": [
                    "float",
                    "Optional[bytes]",
                    "Callable[..., bool]"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/tests/test_canonicalise.py": {
        "is_valid": {
            "name": "is_valid",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Callable[..., None]",
                "List[str]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "float"
                ],
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_canonicalises_to_equivalent_fixpoint": {
            "name": "test_canonicalises_to_equivalent_fixpoint",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "schema_strategy": [
                    "str",
                    "Mapping[str, Any]",
                    "type"
                ],
                "data": [
                    "str",
                    "int"
                ]
            }
        },
        "test_canonicalises_to_equivalent_fixpoint_examples": {
            "name": "test_canonicalises_to_equivalent_fixpoint_examples",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "str"
                ],
                "examples": []
            }
        },
        "test_dependencies_canonicalises_to_fixpoint": {
            "name": "test_dependencies_canonicalises_to_fixpoint",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canonicalises_to_empty": {
            "name": "test_canonicalises_to_empty",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_canonicalises_to_expected": {
            "name": "test_canonicalises_to_expected",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_merged": {
            "name": "test_merged",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "str",
                    "int"
                ],
                "result": [
                    "str",
                    "int"
                ]
            }
        },
        "test_self_merge_eq_canonicalish": {
            "name": "test_self_merge_eq_canonicalish",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "_merge_semantics_helper": {
            "name": "_merge_semantics_helper",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]"
                ],
                "s1": [],
                "s2": [],
                "combined": []
            }
        },
        "test_merge_semantics": {
            "name": "test_merge_semantics",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bool",
                    "list",
                    "List[int]"
                ],
                "s1": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "dict"
                ],
                "s2": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "dict"
                ]
            }
        },
        "test_can_almost_always_merge_numeric_schemas": {
            "name": "test_can_almost_always_merge_numeric_schemas",
            "location": 570,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bool",
                    "list",
                    "List[int]"
                ],
                "s1": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "dict"
                ],
                "s2": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "dict"
                ]
            }
        },
        "test_resolution_checks_resolver_is_valid": {
            "name": "test_resolution_checks_resolver_is_valid",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_canonicalises_to_equivalent_fixpoint": {
            "name": "_canonicalises_to_equivalent_fixpoint",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Union[Mapping, str]",
                    "bytes",
                    "List[str]",
                    "Optional[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_canonicalise_is_only_valid_for_schemas": {
            "name": "test_canonicalise_is_only_valid_for_schemas",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validators_use_proper_draft": {
            "name": "test_validators_use_proper_draft",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reference_resolver_issue_65_regression": {
            "name": "test_reference_resolver_issue_65_regression",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "hypothesis-jsonschema-master/tests/test_encode.py": {
        "test_canonical_json_encoding": {
            "name": "test_canonical_json_encoding",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "float"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/tests/test_from_schema.py": {
        "test_generated_data_matches_schema": {
            "name": "test_generated_data_matches_schema",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "schema_strategy": [
                    "str",
                    "List[str]"
                ],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_boolean_true_is_valid_schema_and_resolvable": {
            "name": "test_boolean_true_is_valid_schema_and_resolvable",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "str"
                ]
            }
        },
        "test_invalid_schemas_raise": {
            "name": "test_invalid_schemas_raise",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_invalid_regex_emit_warning": {
            "name": "test_invalid_regex_emit_warning",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_can_generate_with_explicit_schema_version": {
            "name": "test_can_generate_with_explicit_schema_version",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "str"
                ]
            }
        },
        "to_name_params": {
            "name": "to_name_params",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "corpus": [
                    "Mapping",
                    "bool"
                ]
            }
        },
        "test_invalid_schemas_are_invalid": {
            "name": "test_invalid_schemas_are_invalid",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_invalid_ref_schemas_are_invalid": {
            "name": "test_invalid_ref_schemas_are_invalid",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "xfail_on_reference_resolve_error": {
            "name": "xfail_on_reference_resolve_error",
            "location": 300,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_can_generate_for_real_large_schema": {
            "name": "test_can_generate_for_real_large_schema",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "dict"
                ],
                "name": [
                    "str",
                    "Type['Declared']",
                    "type"
                ]
            }
        },
        "test_can_generate_for_test_suite_schema": {
            "name": "test_can_generate_for_test_suite_schema",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "dict"
                ],
                "name": [
                    "str",
                    "type",
                    "Dict[str, str]"
                ]
            }
        },
        "test_cannot_generate_for_empty_test_suite_schema": {
            "name": "test_cannot_generate_for_empty_test_suite_schema",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_handles_overlapping_patternproperties": {
            "name": "test_handles_overlapping_patternproperties",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "set"
                ]
            }
        },
        "test_single_property_can_generate_nonempty": {
            "name": "test_single_property_can_generate_nonempty",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "test_generated_rfc3339_datetime_strings_are_valid": {
            "name": "test_generated_rfc3339_datetime_strings_are_valid",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "datetime_string": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "test_numeric_uniqueness": {
            "name": "test_numeric_uniqueness",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "set"
                ]
            }
        },
        "test_draft03_not_supported": {
            "name": "test_draft03_not_supported",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_impossible_multiplier": {
            "name": "test_impossible_multiplier",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "test_unsatisfiable_array_returns_nothing": {
            "name": "test_unsatisfiable_array_returns_nothing",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_contains_behind_allof": {
            "name": "test_multiple_contains_behind_allof",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "set"
                ]
            }
        },
        "validate_card_format": {
            "name": "validate_card_format",
            "location": 463,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "test_custom_formats_validation": {
            "name": "test_custom_formats_validation",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "dict",
                    "memoryview",
                    "T",
                    "bytes",
                    "BinaryIO"
                ],
                "kw": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_allowed_custom_format": {
            "name": "test_allowed_custom_format",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "List[int]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_allowed_unknown_custom_format": {
            "name": "test_allowed_unknown_custom_format",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_overriding_standard_format": {
            "name": "test_overriding_standard_format",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "test_does_not_generate_trailing_newline_from_dollar_pattern": {
            "name": "test_does_not_generate_trailing_newline_from_dollar_pattern",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "bool"
                ]
            }
        },
        "xfail_on_reference_resolve_error.inner": {
            "name": "inner",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_draft03_not_supported.f": {
            "name": "f",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_can_generate_empty_list_with_max_size_and_no_allowed_items": {
            "name": "test_can_generate_empty_list_with_max_size_and_no_allowed_items",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "val": [
                    "str"
                ]
            }
        },
        "test_can_generate_list_with_max_size_and_no_allowed_additional_items": {
            "name": "test_can_generate_list_with_max_size_and_no_allowed_additional_items",
            "location": 536,
            "return": [
                ""
            ],
            "arguments": {
                "val": [
                    "str"
                ]
            }
        }
    },
    "hypothesis-jsonschema-master/tests/test_version.py": {
        "get_releases": {
            "name": "get_releases",
            "location": 23,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "test_last_release_against_changelog": {
            "name": "test_last_release_against_changelog",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_changelog_is_ordered": {
            "name": "test_changelog_is_ordered",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_version_increments_are_correct": {
            "name": "test_version_increments_are_correct",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Version.from_string": {
            "name": "from_string",
            "location": 18,
            "return": [
                "str",
                "MutableSequence[str]",
                "int",
                "Optional[str]",
                "Union[dict, list]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "string": [
                    "str"
                ]
            }
        }
    }
}
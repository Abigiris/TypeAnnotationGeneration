{
    "iati-post-master/iati_post/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "iati-post-master/iati_post/docs/source/conf.py": {},
    "iati-post-master/iati_post/iati_fetch/admin.py": {},
    "iati-post-master/iati_post/iati_fetch/apps.py": {},
    "iati-post-master/iati_post/iati_fetch/consumers.py": {},
    "iati-post-master/iati_post/iati_fetch/make_hashable.py": {
        "make_hashable": {
            "name": "make_hashable",
            "location": 8,
            "return": [
                "str",
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "o": [
                    "list",
                    "str",
                    "List[List[int]]",
                    "tuple",
                    "Tuple[int]",
                    "List['world.PerceivedNoise']"
                ]
            }
        },
        "request_hash": {
            "name": "request_hash",
            "location": 21,
            "return": [
                "Dict[int, Dict[str, Any]]",
                "dict",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Type]",
                    "str"
                ],
                "url": [
                    "str"
                ],
                "method": [
                    "str"
                ]
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/models.py": {
        "OrganisationAbbreviation.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organisation.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organisation.from_xml": {
            "name": "from_xml",
            "location": 33,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict",
                    "Generator"
                ],
                "organisation_element": [
                    "dict",
                    "bool",
                    "str",
                    "models.Form700Filing",
                    "List[int]"
                ],
                "abbr": [
                    "str",
                    "models.User",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ],
                "update": [
                    "bool",
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "tracim.models.auth.User"
                ],
                "attempt": [
                    "int",
                    "Dict[str, Any]",
                    "utils.MinMaxStats",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "cmk.utils.type_defs.CheckVariables"
                ]
            }
        },
        "ActivityLinkedModel.from_xml": {
            "name": "from_xml",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "activity_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "element_list": [
                    "List[Tuple[str, int]]",
                    "int",
                    "models.order_action.Parameters",
                    "article.transfer.models.ArticleNumber",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Transaction.from_xml": {
            "name": "from_xml",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float"
                ],
                "activity_id": [
                    "str",
                    "int",
                    "float"
                ],
                "transactions": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "list",
                    "Optional[int]"
                ]
            }
        },
        "Activity.save_narratives": {
            "name": "save_narratives",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "narratives": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[str, int]",
                    "Dict[str, Optional[Any]]"
                ],
                "activity_element": [
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Activity._validate_activity_xml": {
            "name": "_validate_activity_xml",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "activity_element": [
                    "str",
                    "nativecards.lib.dicts.models.DictionaryEntry",
                    "salon.models.Stylist",
                    "Exception"
                ]
            }
        },
        "Activity._iid": {
            "name": "_iid",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "activity_element": [
                    "str"
                ]
            }
        },
        "Activity.from_xml": {
            "name": "from_xml",
            "location": 221,
            "return": [
                "int",
                "salon.models.ServiceTemplateSet",
                "set",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "activity_element": [
                    "dict",
                    "str",
                    "Optional[str]"
                ],
                "update": [
                    "str",
                    "Dict[str, Any]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "int",
                    "raiden.utils.Address"
                ]
            }
        },
        "CodelistManager.names": {
            "name": "names",
            "location": 303,
            "return": [
                "Type",
                "Optional[BaseException]",
                "Optional[str]",
                "Type[Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodelistManager.get_by_name": {
            "name": "get_by_name",
            "location": 306,
            "return": [
                "str",
                "topicdb.core.models.language.Language",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Codelist.from_dict": {
            "name": "from_dict",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "type"
                ],
                "element": [
                    "str",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "CodelistItemManager.by_name": {
            "name": "by_name",
            "location": 346,
            "return": [
                "Optional[BaseException]",
                "Type[Any]",
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CodelistItemManager.withdrawn": {
            "name": "withdrawn",
            "location": 349,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodelistItem.name": {
            "name": "name",
            "location": 366,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestCacheRecord.save": {
            "name": "save",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.from_xml.find_narratives": {
            "name": "find_narratives",
            "location": 224,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "element": [
                    "dict",
                    "List[str]",
                    "str"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "narratives": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/requesters.py": {
        "BaseRequest.__post_init__": {
            "name": "__post_init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRequest.from_event": {
            "name": "from_event",
            "location": 109,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Optional[asyncio.AbstractEventLoop]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "Callable[[Dict], None]",
                    "str"
                ],
                "event": [
                    "int",
                    "Dict[str, Any]",
                    "Callable[[Dict], None]",
                    "str"
                ]
            }
        },
        "BaseRequest.drop_sync": {
            "name": "drop_sync",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganisationRequestList.to_models": {
            "name": "to_models",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganisationRequestDetail.__post_init__": {
            "name": "__post_init__",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/tasks.py": {},
    "iati-post-master/iati_post/iati_fetch/urls.py": {},
    "iati-post-master/iati_post/iati_fetch/views.py": {
        "Organisations.get_context_data": {
            "name": "get_context_data",
            "location": 14,
            "return": [
                "View",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganisationDetail.get_context_data": {
            "name": "get_context_data",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "organisation_id": [
                    "int"
                ]
            }
        },
        "OrganisationFetchXml.get": {
            "name": "get",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "organisation_id": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "OrganisationFetchJson.get": {
            "name": "get",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "organisation_id": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "OrganisationRefresh.get": {
            "name": "get",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "OrganisationDelete.get": {
            "name": "get",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/__init__.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0001_initial.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0002_auto_20190601_1424.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0003_auto_20190601_1424.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0004_auto_20190603_1505.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0005_auto_20190605_1928.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0006_auto_20190605_1931.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0007_codelist_codelistitem.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0008_codelistitem_codelist.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0009_request_requestcacherecord.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0010_organisationabbreviation.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0011_auto_20190702_0413.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0012_organisationabbreviation.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0013_delete_organisationabbreviation.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0014_organisationabbreviation.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0015_organisation_abbreviation.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0016_organisationabbreviation_withdrawn.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0017_requestcacherecord_exception.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0018_transaction.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0019_auto_20190703_1439.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0020_auto_20190703_1441.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0021_auto_20190703_1511.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0022_activity_narrative.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0023_auto_20190703_1524.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0024_auto_20190703_1554.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0025_auto_20190703_1602.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0026_auto_20190703_1627.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/0027_budget_documentlink_result.py": {},
    "iati-post-master/iati_post/iati_fetch/migrations/__init__.py": {},
    "iati-post-master/iati_post/iati_fetch/tests/test_async_consumers.py": {},
    "iati-post-master/iati_post/iati_fetch/tests/test_requests.py": {
        "RequestsTestCase.test_organisation_list": {
            "name": "test_organisation_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsTestCase.test_fetch_organisation": {
            "name": "test_fetch_organisation",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsTestCase.test_fetch_organisation_xml": {
            "name": "test_fetch_organisation_xml",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsTestCase.test_activities_xml": {
            "name": "test_activities_xml",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsTestCase.test_save_one_activity": {
            "name": "test_save_one_activity",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/tests/test_request_hash.py": {
        "HashRequestsCase.test_default_request_hash": {
            "name": "test_default_request_hash",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/tests/test_urls.py": {
        "ImportActivity.test_animals_can_speak": {
            "name": "test_animals_can_speak",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iati-post-master/iati_post/iati_fetch/tests/__init__.py": {},
    "iati-post-master/iati_post/iati_post/routing.py": {},
    "iati-post-master/iati_post/iati_post/settings.py": {},
    "iati-post-master/iati_post/iati_post/urls.py": {},
    "iati-post-master/iati_post/iati_post/wsgi.py": {},
    "iati-post-master/iati_post/iati_post/__init__.py": {}
}
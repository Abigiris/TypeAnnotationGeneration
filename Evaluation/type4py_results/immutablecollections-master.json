{
    "immutablecollections-master/setup.py": {},
    "immutablecollections-master/benchmarks/test_benchmark_immutableset.py": {
        "function_call_overhead_no_arg": {
            "name": "function_call_overhead_no_arg",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "function_call_overhead_arg": {
            "name": "function_call_overhead_arg",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_create_empty": {
            "name": "test_create_empty",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "constructor": [
                    "str"
                ],
                "benchmark": []
            }
        },
        "test_perf": {
            "name": "test_perf",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "constructor": [
                    "str",
                    "bool"
                ],
                "source": [
                    "str"
                ],
                "benchmark": [
                    "str"
                ]
            }
        }
    },
    "immutablecollections-master/benchmarks/test_benchmark_serialization.py": {
        "serialize": {
            "name": "serialize",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]"
                ],
                "benchmark": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "immutablecollections-master/immutablecollections/converter_utils.py": {
        "_to_tuple": {
            "name": "_to_tuple",
            "location": 15,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "val": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "_to_immutableset": {
            "name": "_to_immutableset",
            "location": 22,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "val": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "_to_immutabledict": {
            "name": "_to_immutabledict",
            "location": 29,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "val": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "_to_immutablesetmultidict": {
            "name": "_to_immutablesetmultidict",
            "location": 40,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "val": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "_to_immutablelistmultidict": {
            "name": "_to_immutablelistmultidict",
            "location": 53,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "val": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "immutablecollections-master/immutablecollections/immutablecollection.py": {
        "ImmutableCollection.__iter__": {
            "name": "__iter__",
            "location": 11,
            "return": [
                "typing.Iterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableCollection.__reduce__": {
            "name": "__reduce__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableCollection.of": {
            "name": "of",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "seq": [
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "ImmutableCollection.empty": {
            "name": "empty",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ImmutableCollection.builder": {
            "name": "builder",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "immutablecollections-master/immutablecollections/version.py": {},
    "immutablecollections-master/immutablecollections/_immutabledict.py": {
        "immutabledict": {
            "name": "immutabledict",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "iterable": [
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        },
        "immutabledict_from_unique_keys": {
            "name": "immutabledict_from_unique_keys",
            "location": 107,
            "return": [
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "ImmutableDict.of": {
            "name": "of",
            "location": 130,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[str, float]",
                "int"
            ],
            "arguments": {
                "dict_": [
                    "dict",
                    "Dict[str, float]",
                    "float"
                ]
            }
        },
        "ImmutableDict.empty": {
            "name": "empty",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ImmutableDict.builder": {
            "name": "builder",
            "location": 147,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "ImmutableDict.index": {
            "name": "index",
            "location": 155,
            "return": [
                "bool",
                "dict",
                "int",
                "str",
                "Dict[str, Set[str]]",
                "Dict[str, str]",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "items": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Sequence[str]",
                    "Iterable[object]",
                    "Tuple[()]",
                    "Dict[str, Any]"
                ],
                "key_function": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Sequence[str]",
                    "Iterable[object]",
                    "Tuple[()]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImmutableDict.inverse": {
            "name": "inverse",
            "location": 166,
            "return": [
                "str",
                "List[str]",
                "List[\"TaskNode\"]",
                "Tuple[float, float]",
                "Dict[str, Any]",
                "List[Match]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.modified_copy_builder": {
            "name": "modified_copy_builder",
            "location": 178,
            "return": [
                "Optional[BaseException]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.filter_keys": {
            "name": "filter_keys",
            "location": 181,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Dict[str, Any]",
                    "Dict[str, Type]",
                    "Iterable",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        },
        "ImmutableDict.__repr__": {
            "name": "__repr__",
            "location": 198,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.__reduce__": {
            "name": "__reduce__",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RegularDictBackedImmutableDict.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_dict": [
                    "Dict[str, Set[str]]",
                    "dict",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "_RegularDictBackedImmutableDict.__getitem__": {
            "name": "__getitem__",
            "location": 275,
            "return": [
                "Mapping",
                "str",
                "Dict[str, float]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "_RegularDictBackedImmutableDict.__len__": {
            "name": "__len__",
            "location": 278,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RegularDictBackedImmutableDict.__iter__": {
            "name": "__iter__",
            "location": 281,
            "return": [
                "str",
                "IO",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RegularDictBackedImmutableDict.__contains__": {
            "name": "__contains__",
            "location": 285,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Dict[str, str]]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_RegularDictBackedImmutableDict.__hash__": {
            "name": "__hash__",
            "location": 288,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.Builder.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ImmutableDict.Builder.put": {
            "name": "put",
            "location": 217,
            "return": [
                "int",
                "Dict[str, bool]",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ],
                "val": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ImmutableDict.Builder.put_all": {
            "name": "put_all",
            "location": 235,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "MutableMapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImmutableDict.Builder.__setitem__": {
            "name": "__setitem__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "ImmutableDict.Builder.build": {
            "name": "build",
            "location": 255,
            "return": [
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "immutablecollections-master/immutablecollections/_immutablemultidict.py": {
        "immutablesetmultidict": {
            "name": "immutablesetmultidict",
            "location": 36,
            "return": [
                "str",
                "IO[str]"
            ],
            "arguments": {
                "iterable": [
                    "Optional[int]",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "immutablelistmultidict": {
            "name": "immutablelistmultidict",
            "location": 64,
            "return": [
                "List[Dict]",
                "str",
                "Tuple[int]",
                "List[List[Any]]",
                "Union[List[float], List[int]]",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "iterable": [
                    "Optional[int]",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "_freeze_set_multidict": {
            "name": "_freeze_set_multidict",
            "location": 381,
            "return": [
                "str",
                "Union[int, float, complex]",
                "Dict[str, str]",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "x": [
                    "dict",
                    "str",
                    "Dict[str, Set[str]]",
                    "Iterable"
                ]
            }
        },
        "_freeze_list_multidict": {
            "name": "_freeze_list_multidict",
            "location": 580,
            "return": [
                "int",
                "bool",
                "str",
                "Dict[str, Tuple[int, int]]",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Set[str]]",
                    "List[List[str]]",
                    "dict",
                    "Iterable[T]"
                ]
            }
        },
        "_check_isinstance": {
            "name": "_check_isinstance",
            "location": 628,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "List[dict]"
                ],
                "classinfo": [
                    "T",
                    "List[dict]"
                ]
            }
        },
        "ImmutableMultiDict.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.value_groups": {
            "name": "value_groups",
            "location": 99,
            "return": [
                "Dict[str, int]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [
                "typing.Collection[VT]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "ImmutableMultiDict.__contains__": {
            "name": "__contains__",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "ImmutableMultiDict.keys": {
            "name": "keys",
            "location": 122,
            "return": [
                "str",
                "Dict[str, Any]",
                "Exception",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.items": {
            "name": "items",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__eq__": {
            "name": "__eq__",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "ImmutableMultiDict.__hash__": {
            "name": "__hash__",
            "location": 144,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__len__": {
            "name": "__len__",
            "location": 153,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.as_dict": {
            "name": "as_dict",
            "location": 159,
            "return": [
                "typing.Mapping[KT, typing.Collection[VT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.__iter__": {
            "name": "__iter__",
            "location": 168,
            "return": [
                "List[int]",
                "int",
                "List[List[int]]",
                "str",
                "Union[Dict, List]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.invert_to_list_multidict": {
            "name": "invert_to_list_multidict",
            "location": 171,
            "return": [
                "List[str]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.invert_to_set_multidict": {
            "name": "invert_to_set_multidict",
            "location": 182,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict._invert_to": {
            "name": "_invert_to",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ImmutableSetMultiDict.of": {
            "name": "of",
            "location": 221,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "T",
                    "Dict[str, object]"
                ]
            }
        },
        "ImmutableSetMultiDict.empty": {
            "name": "empty",
            "location": 242,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {}
        },
        "ImmutableSetMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 249,
            "return": [
                "immutablecollections.ImmutableSet[VT]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "KT",
                    "int"
                ]
            }
        },
        "ImmutableSetMultiDict.value_groups": {
            "name": "value_groups",
            "location": 256,
            "return": [
                "Dict[str, int]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.as_dict": {
            "name": "as_dict",
            "location": 266,
            "return": [
                "typing.Mapping[KT, immutablecollections.ImmutableSet[VT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.builder": {
            "name": "builder",
            "location": 272,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "value_order_key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ImmutableSetMultiDict.modified_copy_builder": {
            "name": "modified_copy_builder",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.filter_keys": {
            "name": "filter_keys",
            "location": 280,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Mapping",
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "Set[int]",
                    "BaseException",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "ImmutableSetMultiDict.__repr__": {
            "name": "__repr__",
            "location": 303,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.__str__": {
            "name": "__str__",
            "location": 306,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.__reduce__": {
            "name": "__reduce__",
            "location": 311,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableDictBackedImmutableSetMultiDict.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_dict": [
                    "str"
                ],
                "init_len": [
                    "str",
                    "bool",
                    "float",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_ImmutableDictBackedImmutableSetMultiDict.as_dict": {
            "name": "as_dict",
            "location": 400,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableDictBackedImmutableSetMultiDict.value_groups": {
            "name": "value_groups",
            "location": 406,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableDictBackedImmutableSetMultiDict.__len__": {
            "name": "__len__",
            "location": 412,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableDictBackedImmutableSetMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 422,
            "return": [
                "bool",
                "str",
                "Dict[int, Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "list",
                    "bool",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "ImmutableListMultiDict.of": {
            "name": "of",
            "location": 436,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "T",
                    "Union[Mapping, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ImmutableListMultiDict.empty": {
            "name": "empty",
            "location": 449,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {}
        },
        "ImmutableListMultiDict.builder": {
            "name": "builder",
            "location": 453,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ImmutableListMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 460,
            "return": [
                "typing.Tuple[VT, ...]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "KT",
                    "int"
                ]
            }
        },
        "ImmutableListMultiDict.as_dict": {
            "name": "as_dict",
            "location": 468,
            "return": [
                "typing.Mapping[KT, typing.Tuple[VT, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.value_groups": {
            "name": "value_groups",
            "location": 473,
            "return": [
                "Dict[str, int]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.modified_copy_builder": {
            "name": "modified_copy_builder",
            "location": 482,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.filter_keys": {
            "name": "filter_keys",
            "location": 485,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Mapping",
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "Set[int]",
                    "BaseException",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "ImmutableListMultiDict.__repr__": {
            "name": "__repr__",
            "location": 508,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.__str__": {
            "name": "__str__",
            "location": 511,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.__reduce__": {
            "name": "__reduce__",
            "location": 516,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableDictBackedImmutableListMultiDict.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_dict": [
                    "str",
                    "list",
                    "dict",
                    "Mapping[str, Any]",
                    "Type[Tuple[str, str]]"
                ],
                "init_len": [
                    "str",
                    "bool",
                    "float",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_ImmutableDictBackedImmutableListMultiDict.as_dict": {
            "name": "as_dict",
            "location": 597,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImmutableDictBackedImmutableListMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 600,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "float",
                    "Optional[Any]"
                ]
            }
        },
        "_ImmutableDictBackedImmutableListMultiDict.__len__": {
            "name": "__len__",
            "location": 603,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableMultiDict.Builder.put": {
            "name": "put",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ImmutableMultiDict.Builder.build": {
            "name": "build",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.Builder.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSetMultiDict.Builder.put": {
            "name": "put",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ImmutableSetMultiDict.Builder.put_all": {
            "name": "put_all",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ImmutableSetMultiDict.Builder.put_all_items": {
            "name": "put_all_items",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ImmutableSetMultiDict.Builder.build": {
            "name": "build",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.Builder.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableListMultiDict.Builder.put": {
            "name": "put",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ImmutableListMultiDict.Builder.put_all": {
            "name": "put_all",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "dict_": []
            }
        },
        "ImmutableListMultiDict.Builder.put_all_items": {
            "name": "put_all_items",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ImmutableListMultiDict.Builder.build": {
            "name": "build",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "immutablecollections-master/immutablecollections/_immutableset.py": {
        "immutableset": {
            "name": "immutableset",
            "location": 38,
            "return": [
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "immutableset_from_unique_elements": {
            "name": "immutableset_from_unique_elements",
            "location": 134,
            "return": [
                "bool",
                "List[dict]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "bool",
                    "Optional[Iterable[T]]",
                    "str"
                ]
            }
        },
        "_check_issubclass": {
            "name": "_check_issubclass",
            "location": 713,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "type",
                    "Union[int, slice]",
                    "Callable"
                ],
                "classinfo": [
                    "type",
                    "Union[int, slice]",
                    "Callable"
                ]
            }
        },
        "_check_all_isinstance": {
            "name": "_check_all_isinstance",
            "location": 721,
            "return": [
                ""
            ],
            "arguments": {
                "items": [
                    "Iterable[Any]",
                    "str"
                ],
                "classinfo": [
                    "T",
                    "int",
                    "str"
                ]
            }
        },
        "_check_isinstance": {
            "name": "_check_isinstance",
            "location": 726,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "List[dict]"
                ],
                "classinfo": [
                    "T",
                    "List[dict]"
                ]
            }
        },
        "ImmutableSet.of": {
            "name": "of",
            "location": 180,
            "return": [
                "Optional[Any]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "seq": [
                    "Iterable[T]",
                    "int",
                    "Optional[Type[T]]"
                ],
                "check_top_type_matches": [
                    "Optional[Type[T]]",
                    "Iterable[T]"
                ],
                "require_ordered_input": [
                    "bool",
                    "Mapping"
                ]
            }
        },
        "ImmutableSet.empty": {
            "name": "empty",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ImmutableSet.issubset": {
            "name": "issubset",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "float"
                ]
            }
        },
        "ImmutableSet.issuperset": {
            "name": "issuperset",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "float"
                ]
            }
        },
        "ImmutableSet.union": {
            "name": "union",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Hashable",
                    "bool",
                    "Optional[int]"
                ],
                "check_top_type_matches": [
                    "List[Type]",
                    "Iterable[Tuple[Any, Any]]"
                ]
            }
        },
        "ImmutableSet.__or__": {
            "name": "__or__",
            "location": 274,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ImmutableSet.intersection": {
            "name": "intersection",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]"
                ]
            }
        },
        "ImmutableSet.__and__": {
            "name": "__and__",
            "location": 299,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ImmutableSet.difference": {
            "name": "difference",
            "location": 305,
            "return": [
                "str",
                "set",
                "int",
                "Iterable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImmutableSet.__sub__": {
            "name": "__sub__",
            "location": 314,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ImmutableSet.__rsub__": {
            "name": "__rsub__",
            "location": 320,
            "return": [
                "List[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "list",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet[Any]",
                    "Set[VT]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ImmutableSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 330,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsInt",
                    "float",
                    "Union[int, str]"
                ]
            }
        },
        "ImmutableSet.copy": {
            "name": "copy",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSet.count": {
            "name": "count",
            "location": 349,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImmutableSet.__repr__": {
            "name": "__repr__",
            "location": 355,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSet.__str__": {
            "name": "__str__",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSet.builder": {
            "name": "builder",
            "location": 364,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "check_top_type_matches": [
                    "Optional[Type[T]]",
                    "Optional[Type]",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "require_ordered_input": [
                    "bool",
                    "Callable[[T], Any]",
                    "Optional[Sequence[Any]]"
                ],
                "order_key": [
                    "bool",
                    "Callable[[T], Any]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "_TypeCheckingBuilder.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_level_type": [
                    "Optional[Type]",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "require_ordered_input": [
                    "bool",
                    "Optional[bool]",
                    "int"
                ],
                "order_key": [
                    "List[float]",
                    "bool",
                    "list",
                    "List[str]",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "_TypeCheckingBuilder.add": {
            "name": "add",
            "location": 443,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "_TypeCheckingBuilder.add_all": {
            "name": "add_all",
            "location": 457,
            "return": [
                "Tuple[bytes]",
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "T",
                    "dict",
                    "List[str]",
                    "List[T]"
                ]
            }
        },
        "_TypeCheckingBuilder.__contains__": {
            "name": "__contains__",
            "location": 493,
            "return": [
                "List[str]",
                "set",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "_TypeCheckingBuilder.build": {
            "name": "build",
            "location": 496,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NoTypeCheckingBuilder.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "require_ordered_input": [
                    "bool",
                    "int"
                ],
                "order_key": [
                    "List[str]",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "_NoTypeCheckingBuilder.add": {
            "name": "add",
            "location": 528,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "_NoTypeCheckingBuilder.add_all": {
            "name": "add_all",
            "location": 535,
            "return": [
                "Tuple[bytes]",
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "T",
                    "dict",
                    "List[str]",
                    "List[T]"
                ]
            }
        },
        "_NoTypeCheckingBuilder.__contains__": {
            "name": "__contains__",
            "location": 563,
            "return": [
                "List[str]",
                "set",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "_NoTypeCheckingBuilder.build": {
            "name": "build",
            "location": 566,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrozenSetBackedImmutableSet.__init__": {
            "name": "__init__",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_set": [
                    "bool",
                    "int",
                    "float"
                ],
                "iteration_order": [
                    "bool",
                    "str",
                    "Callable",
                    "Iterable[dict]"
                ],
                "top_level_type": [
                    "bool",
                    "int",
                    "tuple",
                    "str"
                ]
            }
        },
        "_FrozenSetBackedImmutableSet.__iter__": {
            "name": "__iter__",
            "location": 603,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrozenSetBackedImmutableSet.__len__": {
            "name": "__len__",
            "location": 606,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrozenSetBackedImmutableSet.__contains__": {
            "name": "__contains__",
            "location": 609,
            "return": [
                "List[str]",
                "set",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "_FrozenSetBackedImmutableSet.__getitem__": {
            "name": "__getitem__",
            "location": 622,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_FrozenSetBackedImmutableSet.__eq__": {
            "name": "__eq__",
            "location": 628,
            "return": [
                "List[str]",
                "Set[str]",
                "int",
                "Optional[AbstractSet[str]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_FrozenSetBackedImmutableSet.__hash__": {
            "name": "__hash__",
            "location": 635,
            "return": [
                "str",
                "Iterable[Sequence[str]]",
                "int",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrozenSetBackedImmutableSet.__reduce__": {
            "name": "__reduce__",
            "location": 638,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingletonImmutableSet.__init__": {
            "name": "__init__",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "single_value": [
                    "bool",
                    "int",
                    "Tuple[List[str], Optional[str]]"
                ],
                "top_level_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "_SingletonImmutableSet.__iter__": {
            "name": "__iter__",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SingletonImmutableSet.__len__": {
            "name": "__len__",
            "location": 653,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingletonImmutableSet.__contains__": {
            "name": "__contains__",
            "location": 656,
            "return": [
                "int",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_SingletonImmutableSet.__getitem__": {
            "name": "__getitem__",
            "location": 669,
            "return": [
                "int",
                "float",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[int, slice]",
                    "T",
                    "dict",
                    "List[T]"
                ]
            }
        },
        "_SingletonImmutableSet.__eq__": {
            "name": "__eq__",
            "location": 692,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "_SingletonImmutableSet.__hash__": {
            "name": "__hash__",
            "location": 699,
            "return": [
                "int",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingletonImmutableSet.__reduce__": {
            "name": "__reduce__",
            "location": 702,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableSet.Builder.add": {
            "name": "add",
            "location": 402,
            "return": [
                "SelfType"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "ImmutableSet.Builder.add_all": {
            "name": "add_all",
            "location": 406,
            "return": [
                "SelfType"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Iterable[T]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ImmutableSet.Builder.__contains__": {
            "name": "__contains__",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ImmutableSet.Builder.build": {
            "name": "build",
            "location": 414,
            "return": [
                "\"ImmutableSet[T2]\""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "immutablecollections-master/immutablecollections/_utils.py": {},
    "immutablecollections-master/immutablecollections/__init__.py": {},
    "immutablecollections-master/tests/test_immutabledict.py": {
        "TestImmutableDict.test_empty": {
            "name": "test_empty",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_empty_singleton": {
            "name": "test_empty_singleton",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_basic": {
            "name": "test_basic",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_return_identical_immutable": {
            "name": "test_return_identical_immutable",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_put_all_iterable": {
            "name": "test_put_all_iterable",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_put_all_mapping": {
            "name": "test_put_all_mapping",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_hash_eq": {
            "name": "test_hash_eq",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_immutable": {
            "name": "test_immutable",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_cannot_init": {
            "name": "test_cannot_init",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_bad_args": {
            "name": "test_bad_args",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_items_init": {
            "name": "test_items_init",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_unhashable_key": {
            "name": "test_unhashable_key",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_unhashable_value": {
            "name": "test_unhashable_value",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_isinstance": {
            "name": "test_isinstance",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_slots": {
            "name": "test_slots",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_repr": {
            "name": "test_repr",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_str": {
            "name": "test_str",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_index": {
            "name": "test_index",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.type_annotations": {
            "name": "type_annotations",
            "location": 133,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "list"
            ],
            "arguments": {}
        },
        "TestImmutableDict.test_pickling": {
            "name": "test_pickling",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_immutabledict_duplication_blocking": {
            "name": "test_immutabledict_duplication_blocking",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_inverse": {
            "name": "test_inverse",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_inverse_non_unique_keys": {
            "name": "test_inverse_non_unique_keys",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "immutablecollections-master/tests/test_immutablemultidict.py": {
        "TestImmutableSetMultiDict.test_empty": {
            "name": "test_empty",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_empty_singleton": {
            "name": "test_empty_singleton",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_set_repr": {
            "name": "test_set_repr",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_set_str": {
            "name": "test_set_str",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_of": {
            "name": "test_of",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_unmodified_copy_builder": {
            "name": "test_unmodified_copy_builder",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_modified_copy_builder": {
            "name": "test_modified_copy_builder",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_len": {
            "name": "test_len",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_hash": {
            "name": "test_hash",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_inversion": {
            "name": "test_inversion",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSetMultiDict.test_pickling": {
            "name": "test_pickling",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_empty": {
            "name": "test_empty",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_empty_singleton": {
            "name": "test_empty_singleton",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_of": {
            "name": "test_of",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_repr": {
            "name": "test_repr",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_str": {
            "name": "test_str",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_hash": {
            "name": "test_hash",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_immutable_keys": {
            "name": "test_immutable_keys",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_immutable_values": {
            "name": "test_immutable_values",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_cannot_init": {
            "name": "test_cannot_init",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_isinstance": {
            "name": "test_isinstance",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_slots": {
            "name": "test_slots",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_builder": {
            "name": "test_builder",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_unmodified_copy_builder": {
            "name": "test_unmodified_copy_builder",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_modified_copy_builder": {
            "name": "test_modified_copy_builder",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_filter_keys": {
            "name": "test_filter_keys",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_len": {
            "name": "test_len",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_inversion": {
            "name": "test_inversion",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableListMultiDict.test_pickling": {
            "name": "test_pickling",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "immutablecollections-master/tests/test_immutableset.py": {
        "TestImmutableSet.test_empty": {
            "name": "test_empty",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_empty_singleton": {
            "name": "test_empty_singleton",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_basic": {
            "name": "test_basic",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_return_identical_immutable": {
            "name": "test_return_identical_immutable",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_hash_eq": {
            "name": "test_hash_eq",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_immutable": {
            "name": "test_immutable",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_cannot_init": {
            "name": "test_cannot_init",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_bad_args": {
            "name": "test_bad_args",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_unhashable": {
            "name": "test_unhashable",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_isinstance": {
            "name": "test_isinstance",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_slots": {
            "name": "test_slots",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_repr": {
            "name": "test_repr",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_str": {
            "name": "test_str",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_type_testing": {
            "name": "test_type_testing",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_require_ordered_input": {
            "name": "test_require_ordered_input",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_order_irrelevant_for_equals_hash": {
            "name": "test_order_irrelevant_for_equals_hash",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_ordering": {
            "name": "test_ordering",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_comparisons": {
            "name": "test_comparisons",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_issubset": {
            "name": "test_issubset",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_issuperset": {
            "name": "test_issuperset",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_union": {
            "name": "test_union",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_difference": {
            "name": "test_difference",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_symmetric_difference": {
            "name": "test_symmetric_difference",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_copy": {
            "name": "test_copy",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_count": {
            "name": "test_count",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_reversed": {
            "name": "test_reversed",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_index": {
            "name": "test_index",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_singleton_index": {
            "name": "test_singleton_index",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_singleton_slice": {
            "name": "test_singleton_slice",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_slice": {
            "name": "test_slice",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.type_annotations": {
            "name": "type_annotations",
            "location": 309,
            "return": [
                "int",
                "Set[str]"
            ],
            "arguments": {}
        },
        "TestImmutableSet.test_dict_iteration_is_not_deterministic": {
            "name": "test_dict_iteration_is_not_deterministic",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_dict_iteration_is_deterministic": {
            "name": "test_dict_iteration_is_deterministic",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_pickling": {
            "name": "test_pickling",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_subtract_from_other_set_types": {
            "name": "test_subtract_from_other_set_types",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableSet.test_forbid_duplicate_elements": {
            "name": "test_forbid_duplicate_elements",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "immutablecollections-master/tests/__init__.py": {}
}
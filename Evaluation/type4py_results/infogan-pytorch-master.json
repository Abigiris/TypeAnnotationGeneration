{
    "infogan-pytorch-master/src/dataset.py": {
        "new_mnist_dataset": {
            "name": "new_mnist_dataset",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "root_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "new_fashion_mnist_dataset": {
            "name": "new_fashion_mnist_dataset",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "root_path": [
                    "pathlib.Path",
                    "str",
                    "norfs.fs.base.Path"
                ]
            }
        }
    },
    "infogan-pytorch-master/src/infer.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "infogan-pytorch-master/src/logger.py": {
        "new_logging_module": {
            "name": "new_logging_module",
            "location": 42,
            "return": [
                "int",
                "Tuple[int]",
                "Sequence"
            ],
            "arguments": {
                "name": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Optional[str]"
                ],
                "log_file": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Metric.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mtype": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ],
                "priority": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "out_path": [
                    "pathlib.Path",
                    "str",
                    "logging.Logger"
                ],
                "tb_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "Logger.define": {
            "name": "define",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "mtype": [
                    "str",
                    "Optional[str]"
                ],
                "priority": [
                    "int",
                    "Optional[Dict]",
                    "Sequence[str]",
                    "Dict[str, List[str]]",
                    "str",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "Logger.metric_keys": {
            "name": "metric_keys",
            "location": 99,
            "return": [
                "List[str]",
                "List[dict]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.clear": {
            "name": "clear",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.update": {
            "name": "update",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Logger.print_header": {
            "name": "print_header",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.log_tensorboard": {
            "name": "log_tensorboard",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x_axis_metric": [
                    "str",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "Logger.tf_log_histgram": {
            "name": "tf_log_histgram",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var": [
                    "bool",
                    "int"
                ],
                "tag": [
                    "dict",
                    "str"
                ],
                "step": [
                    "dict",
                    "str"
                ]
            }
        },
        "Logger.tf_log_image": {
            "name": "tf_log_image",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "torch.Tensor",
                    "int",
                    "Callable",
                    "Set[int]"
                ],
                "step": [
                    "str",
                    "torch.Tensor",
                    "int",
                    "Callable",
                    "Set[int]"
                ],
                "tag": [
                    "str",
                    "torch.Tensor",
                    "int",
                    "Callable",
                    "Set[int]"
                ]
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]",
                    "logging.Logger"
                ]
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "logging.Logger",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        }
    },
    "infogan-pytorch-master/src/loss.py": {
        "AdversarialLoss.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AdversarialLoss.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "Sequence['cirq.Qid']",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "y_hat": [
                    "bool",
                    "int"
                ],
                "label": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "InfoGANLoss.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "latent_vars": [
                    "int",
                    "str",
                    "Dict[str, variable.LatentVariable]",
                    "List['cirq.Qid']",
                    "torch.Tensor",
                    "bool"
                ]
            }
        },
        "InfoGANLoss.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "Tuple[float, float]",
                "float",
                "Tuple[Tuple[int, Any]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "cs_hat": [
                    "Dict[str, torch.Tensor]",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "cs_true": [
                    "Dict[str, torch.Tensor]",
                    "bool",
                    "int"
                ]
            }
        },
        "NormalNLLLoss.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "mean": [
                    "float",
                    "int",
                    "bytes"
                ],
                "ln_var": [
                    "Union[int, float]",
                    "str",
                    "int",
                    "Awaitable[T]",
                    "list"
                ]
            }
        }
    },
    "infogan-pytorch-master/src/model.py": {
        "Noise.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_noise": [
                    "bool",
                    "Optional[Dict]",
                    "str"
                ],
                "sigma": [
                    "int",
                    "bool"
                ]
            }
        },
        "Noise.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "latent_vars": [
                    "Hashable"
                ]
            }
        },
        "Generator.forward": {
            "name": "forward",
            "location": 63,
            "return": [
                "List[str]",
                "str",
                "List[float]",
                "Dict[str, Any]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "Generator.forward_dummy": {
            "name": "forward_dummy",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.sample_latent_vars": {
            "name": "sample_latent_vars",
            "location": 71,
            "return": [
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "batchsize": [
                    "int",
                    "str"
                ]
            }
        },
        "Generator.infer": {
            "name": "infer",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "zs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Generator.module": {
            "name": "module",
            "location": 88,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "float",
                    "Dict[str, Any]",
                    "List[torch.nn.utils.rnn.PackedSequence]",
                    "int"
                ]
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 127,
            "return": [
                "List[str]",
                "str",
                "List[float]",
                "Dict[str, Any]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "Discriminator.forward_dummy": {
            "name": "forward_dummy",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discriminator.module": {
            "name": "module",
            "location": 137,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DHead.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DHead.forward": {
            "name": "forward",
            "location": 152,
            "return": [
                "List[str]",
                "str",
                "List[float]",
                "Dict[str, Any]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "DHead.module": {
            "name": "module",
            "location": 156,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QHead.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "latent_vars": [
                    "Dict[str, variable.LatentVariable]",
                    "dict",
                    "Union[Dict, Tuple]",
                    "Union[Dict, List]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "QHead.forward": {
            "name": "forward",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "QHead.module": {
            "name": "module",
            "location": 193,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "infogan-pytorch-master/src/train.py": {
        "worker_init_fn": {
            "name": "worker_init_fn",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "worker_id": [
                    "int",
                    "str",
                    "Union[int,str]",
                    "Tuple[Optional[str], str]",
                    "Optional[int]"
                ]
            }
        },
        "create_optimizer": {
            "name": "create_optimizer",
            "location": 24,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "models": [
                    "List[torch.nn.Module]",
                    "pathlib.Path",
                    "VT",
                    "bool",
                    "T"
                ],
                "lr": [
                    "float",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "decay": [
                    "float",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "infogan-pytorch-master/src/trainer.py": {
        "weights_init": {
            "name": "weights_init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "m": [
                    "str",
                    "raiden.utils.signer.Signer",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataloader": [
                    "int",
                    "Union[float, Sequence[float]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "latent_vars": [
                    "Sequence[str]",
                    "bool"
                ],
                "models": [
                    "int",
                    "Union[float, Sequence[float]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "optimizers": [
                    "int",
                    "Union[float, Sequence[float]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "losses": [
                    "int",
                    "Union[float, Sequence[float]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "configs": [
                    "str",
                    "Optional[int]",
                    "Sequence[str]"
                ],
                "logger": [
                    "str",
                    "logger.Logger",
                    "int",
                    "Optional[logging.Logger]",
                    "bool"
                ]
            }
        },
        "Trainer.fix_seed": {
            "name": "fix_seed",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.snapshot_models": {
            "name": "snapshot_models",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.snapshot_params": {
            "name": "snapshot_params",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.log_random_images": {
            "name": "log_random_images",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "float",
                    "Dict[str, str]",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenAmount",
                    "str",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "Trainer.log_images_discrete": {
            "name": "log_images_discrete",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Trainer.log_images_continuous": {
            "name": "log_images_continuous",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var_name": [
                    "str",
                    "Callable"
                ],
                "n": [
                    "str",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "infogan-pytorch-master/src/util.py": {
        "load_yaml": {
            "name": "load_yaml",
            "location": 10,
            "return": [
                "str",
                "bool",
                "set",
                "Tuple[Any, Any, Any]",
                "List[str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "current_device": {
            "name": "current_device",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gen_random_images": {
            "name": "gen_random_images",
            "location": 25,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "gen": [
                    "bool",
                    "Pattern[str]",
                    "Tuple[Any, Any]",
                    "str",
                    "int"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "gen_images_discrete": {
            "name": "gen_images_discrete",
            "location": 39,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "gen": [
                    "torch.nn.Module",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "var_name": [
                    "str",
                    "torch.nn.Module",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "gen_images_continuous": {
            "name": "gen_images_continuous",
            "location": 62,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "gen": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "tuple"
                ],
                "var_name": [
                    "str"
                ],
                "n": [
                    "Hashable",
                    "bool"
                ]
            }
        }
    },
    "infogan-pytorch-master/src/variable.py": {
        "build_latent_variables": {
            "name": "build_latent_variables",
            "location": 36,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "lv_configs": [
                    "dict",
                    "Iterable[Sequence[str]]",
                    "list",
                    "Sequence[Tuple[Any, Any]]",
                    "List[Callable]"
                ]
            }
        },
        "LatentVariable.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "kind": [
                    "str",
                    "Sequence[str]"
                ],
                "prob": [
                    "str"
                ],
                "dim": [
                    "int",
                    "Dict[Tuple[Any, str], int]",
                    "Sequence[T]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "LatentVariable.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentVariable.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Categorical.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "list",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "Categorical.one_hot": {
            "name": "one_hot",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Categorical.sample": {
            "name": "sample",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "infogan-pytorch-master/src/__init__.py": {}
}
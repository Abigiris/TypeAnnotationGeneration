{
    "inspire-mitmproxy-master/entrypoint.py": {},
    "inspire-mitmproxy-master/setup.py": {},
    "inspire-mitmproxy-master/docs/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "generate_changelog": {
            "name": "generate_changelog",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/dispatcher.py": {
        "Dispatcher.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_list": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "Dispatcher.find_service_for_request": {
            "name": "find_service_for_request",
            "location": 66,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "http.MITMRequest",
                    "str"
                ]
            }
        },
        "Dispatcher.process_request": {
            "name": "process_request",
            "location": 72,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "django.http.HttpRequest",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Dispatcher.process_response": {
            "name": "process_response",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "http.MITMResponse",
                    "http.MITMRequest",
                    "django.http.HttpResponse"
                ],
                "response": [
                    "http.MITMResponse",
                    "django.http.HttpResponse"
                ]
            }
        },
        "Dispatcher.request": {
            "name": "request",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flow": []
            }
        },
        "Dispatcher.response": {
            "name": "response",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flow": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Dispatcher.is_flow_passed_through": {
            "name": "is_flow_passed_through",
            "location": 105,
            "return": [
                "int",
                "Union[int, float]"
            ],
            "arguments": {
                "flow": [
                    "mitmproxy.http.HTTPFlow",
                    "int",
                    "bool",
                    "type",
                    "str"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/errors.py": {
        "NoServicesForRequest.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "scrapy.http.Request"
                ]
            }
        },
        "ServiceNotFound.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Collection[str]"
                ]
            }
        },
        "RequestNotHandledInService.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ],
                "request": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ]
            }
        },
        "InvalidRequest.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ],
                "request": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ]
            }
        },
        "DoNotIntercept.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ],
                "request": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ]
            }
        },
        "NoMatchingRecording.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ],
                "request": [
                    "str",
                    "http.MITMRequest",
                    "int"
                ],
                "reason": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ScenarioNotInService.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "List[str]"
                ],
                "scenario": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "InvalidServiceType.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_type": [
                    "str",
                    "type",
                    "Union[str, List[str]]"
                ]
            }
        },
        "InvalidServiceParams.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_type": [
                    "str",
                    "dict",
                    "bool",
                    "list"
                ],
                "params": [
                    "str",
                    "dict",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/http.py": {
        "encoding_by_header": {
            "name": "encoding_by_header",
            "location": 37,
            "return": [
                "str",
                "bool",
                "bytes",
                "set"
            ],
            "arguments": {
                "headers": [
                    "Dict[str, Any]",
                    "requests.Response",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "response_to_string": {
            "name": "response_to_string",
            "location": 47,
            "return": [
                "str",
                "requests.models.Response",
                "dict",
                "Dict[str, object]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "res": [
                    "requests.Response",
                    "str",
                    "dict",
                    "Optional[int]",
                    "Union[Dict[str, Any], None]",
                    "Optional[Dict[str, str]]",
                    "Literal"
                ]
            }
        },
        "MITMHeaders.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str, List[str]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, float]]",
                    "django.http.HttpResponse"
                ]
            }
        },
        "MITMHeaders.from_dict": {
            "name": "from_dict",
            "location": 86,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "dict",
                "bytes",
                "str",
                "Dict[str, Union[int, str]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, List[str]]",
                    "str"
                ],
                "headers_dict": [
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "MITMHeaders.from_mitmproxy": {
            "name": "from_mitmproxy",
            "location": 90,
            "return": [
                "Dict[str, str]",
                "int",
                "Optional[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, List[str]]",
                    "bool",
                    "Callable",
                    "str"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, object]",
                    "Optional[str]"
                ]
            }
        },
        "MITMHeaders.to_dict": {
            "name": "to_dict",
            "location": 103,
            "return": [
                "int",
                "dict",
                "Optional[Dict[str, Any]]",
                "bytes",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMHeaders.to_mitmproxy": {
            "name": "to_mitmproxy",
            "location": 106,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMHeaders.keys": {
            "name": "keys",
            "location": 117,
            "return": [
                "str",
                "dict",
                "Optional[Dict[str, Any]]",
                "Literal",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMHeaders.__getitem__": {
            "name": "__getitem__",
            "location": 120,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "bytes",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MITMHeaders.__eq__": {
            "name": "__eq__",
            "location": 126,
            "return": [
                "dict",
                "bytes",
                "int",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "str"
                ]
            }
        },
        "MITMHeaders.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMRequest.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[Mapping]",
                    "int",
                    "Optional[str]"
                ],
                "method": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[Mapping]",
                    "int",
                    "Optional[str]"
                ],
                "body": [
                    "str",
                    "dict"
                ],
                "headers": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Callable"
                ],
                "original_encoding": [
                    "Dict[str, str]",
                    "Optional[Any]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "http_version": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[Mapping]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MITMRequest.from_mitmproxy": {
            "name": "from_mitmproxy",
            "location": 157,
            "return": [
                "Dict[str, str]",
                "int",
                "Callable[[], None]"
            ],
            "arguments": {
                "cls": [
                    "requests.Response",
                    "Optional[Dict[str, Any]]",
                    "django.http.HttpResponse",
                    "typedefs.HTTPResponse",
                    "http.MITMResponse"
                ],
                "request": [
                    "Dict[str, Any]",
                    "typedefs.HTTPResponse",
                    "scrapy.http.Response",
                    "dict",
                    "scrapy.http.TextResponse",
                    "django.http.HttpResponse"
                ]
            }
        },
        "MITMRequest.from_dict": {
            "name": "from_dict",
            "location": 170,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "django.http.HttpResponse",
                    "requests.Response",
                    "typedefs.HTTPRequest",
                    "typedefs.HTTPResponse",
                    "scrapy.http.Response"
                ],
                "request": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "requests.Response",
                    "typedefs.HTTPResponse",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "MITMRequest.to_mitmproxy": {
            "name": "to_mitmproxy",
            "location": 181,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMRequest.to_dict": {
            "name": "to_dict",
            "location": 196,
            "return": [
                "Optional[bytes]",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMRequest.__eq__": {
            "name": "__eq__",
            "location": 209,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ]
            }
        },
        "MITMRequest.__repr__": {
            "name": "__repr__",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMRequest.__getitem__": {
            "name": "__getitem__",
            "location": 221,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Tuple[str, str]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "MITMResponse.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "Union[int, float]"
                ],
                "status_message": [
                    "int",
                    "Optional[str]",
                    "Dict[str, str]",
                    "\"Position\"",
                    "Optional[int]",
                    "bytes"
                ],
                "body": [
                    "dict",
                    "str",
                    "Dict[Optional[str], str]"
                ],
                "headers": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "original_encoding": [
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "int",
                    "Dict[str, str]",
                    "bool"
                ],
                "http_version": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Sequence[str]]",
                    "Callable"
                ]
            }
        },
        "MITMResponse.from_mitmproxy": {
            "name": "from_mitmproxy",
            "location": 249,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "requests.Response",
                    "dict",
                    "int"
                ],
                "response": [
                    "requests.Response",
                    "requests.models.Response",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MITMResponse.from_dict": {
            "name": "from_dict",
            "location": 262,
            "return": [
                "bool",
                "Dict[str, str]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bytes",
                    "list",
                    "requests.Response",
                    "django.http.HttpResponse"
                ],
                "response": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bytes",
                    "list",
                    "requests.Response",
                    "django.http.HttpResponse"
                ]
            }
        },
        "MITMResponse.to_mitmproxy": {
            "name": "to_mitmproxy",
            "location": 270,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Iterator['Vertex']"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMResponse.to_dict": {
            "name": "to_dict",
            "location": 279,
            "return": [
                "int",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "MITMResponse.__eq__": {
            "name": "__eq__",
            "location": 294,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "tuple",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "MITMResponse.__repr__": {
            "name": "__repr__",
            "location": 301,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/interaction.py": {
        "try_to_stringify": {
            "name": "try_to_stringify",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "bytes_or_string": [
                    "Union[str, bytes]",
                    "str",
                    "bytes"
                ],
                "encoding": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "try_to_stringify_str": {
            "name": "try_to_stringify_str",
            "location": 64,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "byte_or_string": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "encoding": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "try_to_stringify_bytes": {
            "name": "try_to_stringify_bytes",
            "location": 69,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "byte_or_string": [
                    "bytes",
                    "str"
                ],
                "encoding": [
                    "Optional[str]",
                    "str",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "Interaction.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "request": [
                    "Mapping[str, Any]",
                    "str",
                    "Sequence",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[Mapping]"
                ],
                "response": [
                    "Mapping[str, Any]",
                    "str",
                    "Sequence",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[Mapping]"
                ],
                "match": [
                    "Mapping[str, Any]",
                    "str",
                    "Sequence",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[Mapping]"
                ],
                "callbacks": [
                    "Mapping[str, Any]",
                    "str",
                    "Sequence",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[Mapping]"
                ],
                "max_replays": [
                    "int",
                    "bool",
                    "Union[float, int]",
                    "float"
                ]
            }
        },
        "Interaction.from_file": {
            "name": "from_file",
            "location": 101,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "interaction_file": [
                    "str",
                    "bool",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "Interaction.to_dict": {
            "name": "to_dict",
            "location": 114,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.exact_match_fields": {
            "name": "exact_match_fields",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.regex_match_fields": {
            "name": "regex_match_fields",
            "location": 137,
            "return": [
                "Union[int, float]",
                "Tuple[int]",
                "Type[object]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction._matches_by_exact_rules": {
            "name": "_matches_by_exact_rules",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "Interaction._matches_by_regex_rules": {
            "name": "_matches_by_regex_rules",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "Interaction.matches_request": {
            "name": "matches_request",
            "location": 163,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "Interaction.execute_callback": {
            "name": "execute_callback",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "http.MITMRequest",
                    "Union[int, float]",
                    "str"
                ],
                "delay": [
                    "http.MITMRequest",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "Interaction.execute_callbacks": {
            "name": "execute_callbacks",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.get_next_sequence_number_in_dir": {
            "name": "get_next_sequence_number_in_dir",
            "location": 205,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "List[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "int"
                ],
                "directory": [
                    "pathlib.Path",
                    "str",
                    "Callable"
                ]
            }
        },
        "Interaction.next_in_dir": {
            "name": "next_in_dir",
            "location": 225,
            "return": [
                "IO",
                "int",
                "Dict[str, str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "directory": [
                    "str",
                    "Dict[str, Any]"
                ],
                "request": [
                    "http.MITMRequest",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Collection[Any]",
                    "Optional[str]"
                ],
                "response": [
                    "http.MITMRequest",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Collection[Any]",
                    "Optional[str]"
                ]
            }
        },
        "Interaction.save_in_dir": {
            "name": "save_in_dir",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "list",
                    "waterbutler.core.path.WaterButlerPath",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "Interaction.__repr__": {
            "name": "__repr__",
            "location": 273,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interaction.__eq__": {
            "name": "__eq__",
            "location": 277,
            "return": [
                "str",
                "Sequence",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Interaction.execute_callback.execute_request": {
            "name": "execute_request",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "_request": [
                    "dict",
                    "http.MITMRequest"
                ]
            }
        },
        "Interaction.get_next_sequence_number_in_dir._next_sequence_number_after_file": {
            "name": "_next_sequence_number_after_file",
            "location": 206,
            "return": [
                "bool",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "pathx.Path",
                    "list",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/service_list.py": {
        "ServiceList.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_list": [
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ServiceList.replace_from_descrition": {
            "name": "replace_from_descrition",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "service_list": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ServiceList.prepend": {
            "name": "prepend",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceList._instantiate_service_from_dict": {
            "name": "_instantiate_service_from_dict",
            "location": 51,
            "return": [
                "List[str]",
                "Optional[BaseException]",
                "Optional[Dict[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        },
        "ServiceList.to_list": {
            "name": "to_list",
            "location": 64,
            "return": [
                "str",
                "int",
                "List[int]",
                "Optional[T]",
                "Dict[str, str]",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceList.__iter__": {
            "name": "__iter__",
            "location": 67,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceList.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/__init__.py": {},
    "inspire-mitmproxy-master/inspire_mitmproxy/services/base_service.py": {
        "BaseService.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[str]"
                ],
                "hosts_list": [
                    "List[str]",
                    "float",
                    "int",
                    "Optional[List[str]]",
                    "Optional[float]"
                ]
            }
        },
        "BaseService.set_active_scenario": {
            "name": "set_active_scenario",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "active_scenario": [
                    "bool",
                    "float"
                ]
            }
        },
        "BaseService.handles_request": {
            "name": "handles_request",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "scrapy.http.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseService.should_replay": {
            "name": "should_replay",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "interaction": [
                    "int",
                    "bool"
                ]
            }
        },
        "BaseService._get_matching_interaction": {
            "name": "_get_matching_interaction",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BaseService._raise_do_not_intercept_if_recording": {
            "name": "_raise_do_not_intercept_if_recording",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseService.process_request": {
            "name": "process_request",
            "location": 72,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Tuple[int]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseService.process_response": {
            "name": "process_response",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "http.MITMResponse"
                ],
                "response": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "http.MITMResponse"
                ]
            }
        },
        "BaseService.increment_interaction_count": {
            "name": "increment_interaction_count",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interaction_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BaseService.get_interaction_replays_count": {
            "name": "get_interaction_replays_count",
            "location": 117,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "interaction_name": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "BaseService.get_path_for_active_scenario_dir": {
            "name": "get_path_for_active_scenario_dir",
            "location": 123,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "bool",
                    "str",
                    "List[pathlib.Path]"
                ]
            }
        },
        "BaseService.get_interactions_in_scenario": {
            "name": "get_interactions_in_scenario",
            "location": 132,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scenario_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "BaseService.get_interactions_for_active_scenario": {
            "name": "get_interactions_for_active_scenario",
            "location": 139,
            "return": [
                "bool",
                "type",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseService.__eq__": {
            "name": "__eq__",
            "location": 148,
            "return": [
                "asyncworker.http.wrapper.RequestWrapper",
                "Type[Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "dict",
                    "BaseException",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseService.__repr__": {
            "name": "__repr__",
            "location": 155,
            "return": [
                "str",
                "List[str]",
                "Type",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseService.to_dict": {
            "name": "to_dict",
            "location": 158,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/services/management_service.py": {
        "ManagementService.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ManagementService.get_active_scenario": {
            "name": "get_active_scenario",
            "location": 58,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementService.process_request": {
            "name": "process_request",
            "location": 61,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ManagementService.get_services": {
            "name": "get_services",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementService.set_services": {
            "name": "set_services",
            "location": 94,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "Dict[int, Dict]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "scrapy.http.Request"
                ]
            }
        },
        "ManagementService.get_scenarios": {
            "name": "get_scenarios",
            "location": 105,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementService.get_config": {
            "name": "get_config",
            "location": 122,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementService.put_config": {
            "name": "put_config",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "scrapy.http.Request",
                    "str"
                ]
            }
        },
        "ManagementService.post_config": {
            "name": "post_config",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "ManagementService.set_recording": {
            "name": "set_recording",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "scrapy.http.Request"
                ]
            }
        },
        "ManagementService.build_response": {
            "name": "build_response",
            "location": 151,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "Callable"
                ],
                "json_message": [
                    "str",
                    "list",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "ManagementService.get_service_interactions": {
            "name": "get_service_interactions",
            "location": 168,
            "return": [
                "int",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "ManagementService.propagate_option_changes": {
            "name": "propagate_option_changes",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/services/whitelist_service.py": {
        "WhitelistService.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WhitelistService.process_request": {
            "name": "process_request",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.requesHttpRequest",
                    "http.MITMRequest",
                    "Dict[str, str]"
                ]
            }
        },
        "WhitelistService.process_response": {
            "name": "process_response",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "http.clienHTTPResponse",
                    "django.http.HttpResponse",
                    "http.MITMResponse",
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ],
                "response": [
                    "http.clienHTTPResponse",
                    "django.http.HttpResponse",
                    "http.MITMResponse",
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/inspire_mitmproxy/services/__init__.py": {},
    "inspire-mitmproxy-master/scripts/vcr_convert.py": {
        "service_name_for_interaction": {
            "name": "service_name_for_interaction",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "interaction": [
                    "str"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/integration/test_base_service.py": {
        "dispatcher": {
            "name": "dispatcher",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "scenarios_dir": [
                    "bool",
                    "str"
                ]
            }
        },
        "scenarios_dir": {
            "name": "scenarios_dir",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "temporary_scenarios_dir": {
            "name": "temporary_scenarios_dir",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ],
                "tmpdir": [
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "test_base_service_process_request_test_scenario_replays_ok": {
            "name": "test_base_service_process_request_test_scenario_replays_ok",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher"
                ]
            }
        },
        "test_base_service_process_request_picks_next_interaction_after_reaches_max_replays": {
            "name": "test_base_service_process_request_picks_next_interaction_after_reaches_max_replays",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": []
            }
        },
        "test_base_service_process_request_scenario_raise_if_no_interaction": {
            "name": "test_base_service_process_request_scenario_raise_if_no_interaction",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher"
                ]
            }
        },
        "test_get_service_interactions": {
            "name": "test_get_service_interactions",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher"
                ]
            }
        },
        "test_get_service_interactions_raises": {
            "name": "test_get_service_interactions_raises",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher"
                ]
            }
        },
        "test_base_service_process_response_record_create_interaction_dir_if_does_not_exist": {
            "name": "test_base_service_process_response_record_create_interaction_dir_if_does_not_exist",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher"
                ],
                "temporary_scenarios_dir": [
                    "str"
                ]
            }
        },
        "test_base_service_process_response_record_when_empty_interactions_dir_exists_already": {
            "name": "test_base_service_process_response_record_when_empty_interactions_dir_exists_already",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher"
                ],
                "temporary_scenarios_dir": [
                    "str"
                ]
            }
        },
        "test_base_service_process_response_record_when_dir_exists_and_has_some_interactions_already": {
            "name": "test_base_service_process_response_record_when_dir_exists_and_has_some_interactions_already",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "inspire_mitmproxy.dispatcher.Dispatcher",
                    "inspire_mitmproxy.services.base_service.BaseService"
                ],
                "temporary_scenarios_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/integration/test_interaction.py": {
        "interaction_callback": {
            "name": "interaction_callback",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "test_interaction_execute_callbacks": {
            "name": "test_interaction_execute_callbacks",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_callback": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/integration/test_management_service.py": {
        "dispatcher": {
            "name": "dispatcher",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "fake_scenarios_dir": {
            "name": "fake_scenarios_dir",
            "location": 49,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_management_service_get_services": {
            "name": "test_management_service_get_services",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": []
            }
        },
        "test_management_service_set_services": {
            "name": "test_management_service_set_services",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "method": [
                    "apistar.http.RequestData",
                    "Dict[str, Any]"
                ],
                "dispatcher": [
                    "apistar.http.RequestData",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_management_service_get_scenarios": {
            "name": "test_management_service_get_scenarios",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "fake_scenarios_dir": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ],
                "dispatcher": []
            }
        },
        "test_management_service_get_config": {
            "name": "test_management_service_get_config",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": []
            }
        },
        "test_management_service_post_and_put_config": {
            "name": "test_management_service_post_and_put_config",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": []
            }
        }
    },
    "inspire-mitmproxy-master/tests/integration/test_whitelist_service.py": {
        "dispatcher": {
            "name": "dispatcher",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_whitelist_service_raises": {
            "name": "test_whitelist_service_raises",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "str"
                ]
            }
        },
        "test_whitelist_service_defaults": {
            "name": "test_whitelist_service_defaults",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "service_url": [
                    "str",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/integration/__init__.py": {},
    "inspire-mitmproxy-master/tests/unit/test_base_service.py": {
        "service": {
            "name": "service",
            "location": 38,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {}
        },
        "scenarios_dir": {
            "name": "scenarios_dir",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "in_tmpdir": {
            "name": "in_tmpdir",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable[[Mapping], T]",
                    "Dict[str, str]"
                ]
            }
        },
        "sample_request": {
            "name": "sample_request",
            "location": 64,
            "return": [
                "Tuple[int, str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "http.MITMRequest"
                ]
            }
        },
        "test_base_service_handles_request": {
            "name": "test_base_service_handles_request",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "bool",
                    "django.http.HttpRequest"
                ],
                "request_": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "bool",
                    "dict",
                    "django.http.HttpRequest",
                    "str"
                ],
                "handled": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "bool",
                    "django.http.HttpRequest"
                ]
            }
        },
        "test_base_service_get_interactions_for_active_scenario": {
            "name": "test_base_service_get_interactions_for_active_scenario",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "pathlib.Path"
                ],
                "scenarios_dir": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_process_request": {
            "name": "test_process_request",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse",
                    "str",
                    "bool"
                ],
                "request_": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse",
                    "str",
                    "bool"
                ],
                "response": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse",
                    "str",
                    "bool"
                ],
                "scenarios_dir": [
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_process_request_fails_on_unknown_request": {
            "name": "test_process_request_fails_on_unknown_request",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "str",
                    "int"
                ],
                "scenarios_dir": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "test_increment_interaction_count_first": {
            "name": "test_increment_interaction_count_first",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_increment_interaction_count_repeated": {
            "name": "test_increment_interaction_count_repeated",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "int",
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "str"
                ]
            }
        },
        "test_increment_interaction_count_repeated_on_multiple_scenarios": {
            "name": "test_increment_interaction_count_repeated_on_multiple_scenarios",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "int"
                ]
            }
        },
        "test_get_path_for_active_scenario_dir_from_envar_and_create": {
            "name": "test_get_path_for_active_scenario_dir_from_envar_and_create",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "service": [
                    "pathlib.Path",
                    "path.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Union[str, pathlib.Path]"
                ],
                "scenario_dir_exists": [
                    "bool",
                    "str",
                    "Callable[[float], None]",
                    "List[str]",
                    "pathlib.Path"
                ],
                "scenario_dir_envar": [
                    "Optional[str]",
                    "str"
                ],
                "expected_generated_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "test_get_path_for_active_scenario_dir_from_envar_do_not_create": {
            "name": "test_get_path_for_active_scenario_dir_from_envar_do_not_create",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ],
                "service": [
                    "pathlib.Path"
                ]
            }
        },
        "test_get_path_for_active_scenario_dir_from_default_do_not_create_already_exists": {
            "name": "test_get_path_for_active_scenario_dir_from_default_do_not_create_already_exists",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "in_tmpdir": [
                    "Optional[pathlib.Path]",
                    "Optional[path.Path]",
                    "dict",
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "service": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_interactions_in_scenario": {
            "name": "test_get_interactions_in_scenario",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "str",
                    "pathlib.Path"
                ],
                "request": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "bool"
                ]
            }
        },
        "test_get_interactions_for_active_scenario": {
            "name": "test_get_interactions_for_active_scenario",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "path.Path"
                ],
                "scenarios_dir": [
                    "str",
                    "int"
                ],
                "request": [
                    "str",
                    "inspire_mitmproxy.services.base_service.BaseService"
                ]
            }
        },
        "test_get_interactions_for_active_scenario_raises": {
            "name": "test_get_interactions_for_active_scenario_raises",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService"
                ],
                "scenarios_dir": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_set_scenario_resets_interaction_count": {
            "name": "test_set_scenario_resets_interaction_count",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "service": []
            }
        },
        "test_should_not_replay": {
            "name": "test_should_not_replay",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService"
                ],
                "scenarios_dir": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_should_replay_only_once": {
            "name": "test_should_replay_only_once",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "str",
                    "dict"
                ],
                "scenarios_dir": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_should_always_replay": {
            "name": "test_should_always_replay",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "service": [
                    "inspire_mitmproxy.services.base_service.BaseService",
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "scenarios_dir": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_dispatcher.py": {
        "dispatcher": {
            "name": "dispatcher",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_dispatcher_process_request": {
            "name": "test_dispatcher_process_request",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "str",
                    "bytes",
                    "dict",
                    "bool"
                ],
                "url": [
                    "str",
                    "bytes",
                    "dict",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_dispatcher_process_request_fail_if_none_match": {
            "name": "test_dispatcher_process_request_fail_if_none_match",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "dispatcher": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "test_dispatcher_default_services": {
            "name": "test_dispatcher_default_services",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestService.process_request": {
            "name": "process_request",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "http.MITMRequest"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_http_headers.py": {
        "test_headers_from_dict": {
            "name": "test_headers_from_dict",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_headers_from_mitmproxy": {
            "name": "test_headers_from_mitmproxy",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_headers_to_dict": {
            "name": "test_headers_to_dict",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_headers_to_mitmproxy": {
            "name": "test_headers_to_mitmproxy",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_headers_getitem": {
            "name": "test_headers_getitem",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_headers_keys": {
            "name": "test_headers_keys",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_http_request.py": {
        "test_request_from_mitmproxy": {
            "name": "test_request_from_mitmproxy",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "test_request_from_mitmproxy_gzip": {
            "name": "test_request_from_mitmproxy_gzip",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_request_from_dict": {
            "name": "test_request_from_dict",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_request_from_dict_gzip": {
            "name": "test_request_from_dict_gzip",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_request_to_mitmproxy": {
            "name": "test_request_to_mitmproxy",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "test_request_to_mitmproxy_gzip": {
            "name": "test_request_to_mitmproxy_gzip",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_request_to_dict": {
            "name": "test_request_to_dict",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_request_to_dict_gzip": {
            "name": "test_request_to_dict_gzip",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_request_with_bytes_body": {
            "name": "test_request_with_bytes_body",
            "location": 191,
            "return": [],
            "arguments": {}
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_http_response.py": {
        "test_response_from_mitmproxy": {
            "name": "test_response_from_mitmproxy",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_response_from_mitmproxy_gzip": {
            "name": "test_response_from_mitmproxy_gzip",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_response_from_dict": {
            "name": "test_response_from_dict",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_response_from_dict_gzip": {
            "name": "test_response_from_dict_gzip",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_response_to_mitmproxy": {
            "name": "test_response_to_mitmproxy",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_response_to_mitmproxy_gzip": {
            "name": "test_response_to_mitmproxy_gzip",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_response_to_dict": {
            "name": "test_response_to_dict",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_response_to_dict_gzip": {
            "name": "test_response_to_dict_gzip",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_dict_responses_from_bytes_and_str_equal": {
            "name": "test_dict_responses_from_bytes_and_str_equal",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "test_responses_from_bytes_and_str_equal": {
            "name": "test_responses_from_bytes_and_str_equal",
            "location": 203,
            "return": [],
            "arguments": {}
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_http_utils.py": {
        "test_encoding_by_header": {
            "name": "test_encoding_by_header",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_encoding_by_header_defaults_to_utf_8": {
            "name": "test_encoding_by_header_defaults_to_utf_8",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_interaction.py": {
        "_get_headers": {
            "name": "_get_headers",
            "location": 56,
            "return": [
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "good": [
                    "str",
                    "Sequence[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "_test_match_request_data_generate_requests": {
            "name": "_test_match_request_data_generate_requests",
            "location": 64,
            "return": [],
            "arguments": {
                "test_data": [
                    "str",
                    "int",
                    "dict",
                    "list",
                    "List[bytes]"
                ]
            }
        },
        "interaction_all_fields": {
            "name": "interaction_all_fields",
            "location": 119,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "interaction_all_fields_regex_in_body": {
            "name": "interaction_all_fields_regex_in_body",
            "location": 127,
            "return": [
                "Dict[str, str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "interaction_only_required_fields": {
            "name": "interaction_only_required_fields",
            "location": 135,
            "return": [
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "interaction_regex_but_no_exact": {
            "name": "interaction_regex_but_no_exact",
            "location": 142,
            "return": [
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_interaction_all_fields": {
            "name": "test_interaction_all_fields",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_all_fields": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "Optional[Dict]",
                    "int"
                ]
            }
        },
        "test_interaction_only_required_fields": {
            "name": "test_interaction_only_required_fields",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_only_required_fields": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "int"
                ]
            }
        },
        "test_interaction_partial": {
            "name": "test_interaction_partial",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_regex_but_no_exact": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "int",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "test_interaction_to_dict": {
            "name": "test_interaction_to_dict",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_all_fields": [
                    "Tuple[str, Any]"
                ]
            }
        },
        "test_interaction_matches_request_positive": {
            "name": "test_interaction_matches_request_positive",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_all_fields": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "inspire_mitmproxy.http.MITMRequest",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "_request": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "inspire_mitmproxy.http.MITMRequest",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "test_interaction_matches_request_negative": {
            "name": "test_interaction_matches_request_negative",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "interaction_all_fields": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "inspire_mitmproxy.http.MITMRequest",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "_request": [
                    "inspire_mitmproxy.interaction.Interaction",
                    "inspire_mitmproxy.http.MITMRequest",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "test_interaction_get_next_sequence_number_in_dir": {
            "name": "test_interaction_get_next_sequence_number_in_dir",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool",
                    "Callable",
                    "pathlib.Path"
                ],
                "interaction_dir_files": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "expected_next_sequence_number": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "pathlib.Path"
                ]
            }
        },
        "test_interaction_next_in_dir": {
            "name": "test_interaction_next_in_dir",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "Optional[str]",
                    "str",
                    "int",
                    "Set[str]",
                    "bool"
                ],
                "interaction_dir_files": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "expected_next_interaction_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_management_service.py": {
        "management_service": {
            "name": "management_service",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_scenarios_dir": {
            "name": "fake_scenarios_dir",
            "location": 55,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_management_service_get_services": {
            "name": "test_management_service_get_services",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_set_services": {
            "name": "test_management_service_set_services",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "str"
                ]
            }
        },
        "test_management_service_set_services_raises_invalid_service_type": {
            "name": "test_management_service_set_services_raises_invalid_service_type",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "str",
                    "abilian.services.indexing.service.WhooshIndexService"
                ]
            }
        },
        "test_management_service_set_services_raises_invalid_service_params": {
            "name": "test_management_service_set_services_raises_invalid_service_params",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "str",
                    "int"
                ]
            }
        },
        "test_management_service_set_services_raises_invalid_request": {
            "name": "test_management_service_set_services_raises_invalid_request",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "str"
                ]
            }
        },
        "test_management_service_get_scenarios": {
            "name": "test_management_service_get_scenarios",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "fake_scenarios_dir": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ],
                "management_service": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_management_service_get_config": {
            "name": "test_management_service_get_config",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_put_config": {
            "name": "test_management_service_put_config",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_put_config_malformed_raises": {
            "name": "test_management_service_put_config_malformed_raises",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [],
                "request_body": [
                    "str"
                ]
            }
        },
        "test_management_service_post_config": {
            "name": "test_management_service_post_config",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_post_config_malformed_raises": {
            "name": "test_management_service_post_config_malformed_raises",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_post_config_array_raises": {
            "name": "test_management_service_post_config_array_raises",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_set_recording": {
            "name": "test_management_service_set_recording",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "bytes"
                ],
                "request_body": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "mirakuru.http.HTTPConnection"
                ],
                "expected_state": [
                    "Dict[str, str]",
                    "Iterable",
                    "Dict[str, Union[Any, Any]]",
                    "int",
                    "List[dict]",
                    "dict",
                    "Dict[str, Optional[Any]]"
                ]
            }
        },
        "test_management_service_set_recording_changes": {
            "name": "test_management_service_set_recording_changes",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": []
            }
        },
        "test_management_service_set_recording_malformed_raises": {
            "name": "test_management_service_set_recording_malformed_raises",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "int",
                    "float",
                    "str",
                    "Callable"
                ],
                "request_body": [
                    "str"
                ]
            }
        },
        "test_management_service_build_response": {
            "name": "test_management_service_build_response",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_management_service_build_response_empty_object_body": {
            "name": "test_management_service_build_response_empty_object_body",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "management_service": [
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_service_list.py": {
        "test_service_list_replace_from_decription": {
            "name": "test_service_list_replace_from_decription",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_service_list_prepend": {
            "name": "test_service_list_prepend",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_service_list_instantiate_service_from_dict": {
            "name": "test_service_list_instantiate_service_from_dict",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "service_description": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Callable"
                ],
                "expected_service": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_service_list_to_dict": {
            "name": "test_service_list_to_dict",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "inspire-mitmproxy-master/tests/unit/test_whitelist_service.py": {
        "test_load_services_from_os": {
            "name": "test_load_services_from_os",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_env_services_have_priority": {
            "name": "test_env_services_have_priority",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "inspire-mitmproxy-master/tests/unit/__init__.py": {}
}
{
    "instadownload_pdf-master/instaloader.py": {},
    "instadownload_pdf-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "instadownload_pdf-master/build/lib/instaloader/exceptions.py": {},
    "instadownload_pdf-master/build/lib/instaloader/instaloader.py": {
        "get_default_session_filename": {
            "name": "get_default_session_filename",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool"
                ]
            }
        },
        "format_string_contains_key": {
            "name": "format_string_contains_key",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "Sequence[str]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "_requires_login": {
            "name": "_requires_login",
            "location": 43,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_retry_on_connection_error": {
            "name": "_retry_on_connection_error",
            "location": 55,
            "return": [
                "Union"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[], Any]"
                ]
            }
        },
        "_requires_login.call": {
            "name": "call",
            "location": 46,
            "return": [],
            "arguments": {
                "instaloader": []
            }
        },
        "_retry_on_connection_error.call": {
            "name": "call",
            "location": 65,
            "return": [
                "int",
                "AbstractSet[T]",
                "AbstractSet[T_co]",
                "datetime.datetime"
            ],
            "arguments": {
                "instaloader": [
                    "int",
                    "Dict[int, Any]",
                    "set"
                ]
            }
        },
        "_ArbitraryItemFormatter.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "_ArbitraryItemFormatter.get_value": {
            "name": "get_value",
            "location": 90,
            "return": [
                "Dict[str, Any]",
                "int",
                "bool",
                "Mapping[int, str]",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "Callable[[None], Any]",
                    "bytes",
                    "Optional[str]",
                    "set",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_ArbitraryItemFormatter.format_field": {
            "name": "format_field",
            "location": 96,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "Union[int, str, datetime.datetime]",
                    "Tuple[str, str]",
                    "Union[datetime.datetime, datetime.date]"
                ],
                "format_spec": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "Union[int, str, datetime.datetime]",
                    "Tuple[str, str]",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "_PostPathFormatter.vformat": {
            "name": "vformat",
            "location": 108,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "format_string": [
                    "str",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_PostPathFormatter.get_value": {
            "name": "get_value",
            "location": 116,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[str]",
                    "bytes",
                    "str",
                    "bool",
                    "list"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Instaloader.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "quiet": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "user_agent": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "dirname_pattern": [
                    "str",
                    "int",
                    "float"
                ],
                "filename_pattern": [
                    "str",
                    "int",
                    "float"
                ],
                "download_pictures": [
                    "str",
                    "int",
                    "float"
                ],
                "download_videos": [
                    "str",
                    "int",
                    "float"
                ],
                "download_video_thumbnails": [
                    "str",
                    "int",
                    "float"
                ],
                "download_geotags": [
                    "str",
                    "int",
                    "float"
                ],
                "download_comments": [
                    "Optional[Callable[[Dict], Any]]"
                ],
                "save_metadata": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Iterable[str]]",
                    "Dict[str, Union[Any, Any]]",
                    "List[int]",
                    "Optional[int]"
                ],
                "compress_json": [
                    "str",
                    "int",
                    "float"
                ],
                "post_metadata_txt_pattern": [
                    "Optional[float]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "storyitem_metadata_txt_pattern": [
                    "bool",
                    "Optional[str]"
                ],
                "max_connection_attempts": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "commit_mode": [
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "Instaloader.anonymous_copy": {
            "name": "anonymous_copy",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.close": {
            "name": "close",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.__enter__": {
            "name": "__enter__",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.__exit__": {
            "name": "__exit__",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.download_pic": {
            "name": "download_pic",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "bool",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "int",
                    "Optional[str]"
                ],
                "mtime": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "Union[None, int, str]"
                ],
                "filename_suffix": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Sequence[str]",
                    "str"
                ],
                "_attempt": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Iterator[int]"
                ]
            }
        },
        "Instaloader.save_metadata_json": {
            "name": "save_metadata_json",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ],
                "structure": [
                    "str",
                    "pathlib.Path",
                    "Union[str, bytes]"
                ]
            }
        },
        "Instaloader.update_comments": {
            "name": "update_comments",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes"
                ],
                "post": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Instaloader.save_caption": {
            "name": "save_caption",
            "location": 296,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "mtime": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "bool"
                ],
                "caption": [
                    "str",
                    "bool",
                    "IO"
                ]
            }
        },
        "Instaloader.save_location": {
            "name": "save_location",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "location": [
                    "str",
                    "dict"
                ],
                "mtime": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        },
        "Instaloader.download_profilepic": {
            "name": "download_profilepic",
            "location": 347,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str",
                    "requests.Response"
                ],
                "_attempt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Instaloader.save_session_to_file": {
            "name": "save_session_to_file",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "types.Path"
                ]
            }
        },
        "Instaloader.load_session_from_file": {
            "name": "load_session_from_file",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "filename": [
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "str",
                    "TextIO"
                ]
            }
        },
        "Instaloader.test_login": {
            "name": "test_login",
            "location": 413,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.login": {
            "name": "login",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ],
                "passwd": [
                    "str",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "Instaloader.two_factor_login": {
            "name": "two_factor_login",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_factor_code": [
                    "int",
                    "str",
                    "bytes",
                    "Union[Literal, Literal]"
                ]
            }
        },
        "Instaloader.format_filename": {
            "name": "format_filename",
            "location": 437,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "bool"
                ],
                "target": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Instaloader.download_post": {
            "name": "download_post",
            "location": 443,
            "return": [
                "Optional[Type]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "post": [],
                "target": [
                    "str"
                ]
            }
        },
        "Instaloader.get_stories": {
            "name": "get_stories",
            "location": 505,
            "return": [
                "typing.Iterator[structures.Story]"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Instaloader.download_stories": {
            "name": "download_stories",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "fast_update": [
                    "bool",
                    "float",
                    "List[str]",
                    "Union[float, Tuple[float, float]]",
                    "str"
                ],
                "filename_target": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Mapping[str, Mapping[str, Any]]"
                ],
                "storyitem_filter": [
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[str]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "Optional[Dict[str, int]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Instaloader.download_storyitem": {
            "name": "download_storyitem",
            "location": 570,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable",
                    "str",
                    "T"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.get_highlights": {
            "name": "get_highlights",
            "location": 599,
            "return": [
                "typing.Iterator[structures.Highlight]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "Instaloader.download_highlights": {
            "name": "download_highlights",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "fast_update": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "filename_target": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "storyitem_filter": [
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[str]",
                    "Optional[Callable[[structures.Post], bool]]",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "Instaloader.get_feed_posts": {
            "name": "get_feed_posts",
            "location": 656,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.download_feed_posts": {
            "name": "download_feed_posts",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "int",
                    "bool"
                ],
                "fast_update": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.download_saved_posts": {
            "name": "download_saved_posts",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "int",
                    "bool"
                ],
                "fast_update": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "Instaloader.get_location_posts": {
            "name": "get_location_posts",
            "location": 735,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Instaloader.download_location": {
            "name": "download_location",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "max_count": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "datetime.datetime",
                    "int"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]",
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[bool]",
                    "Optional[Union[int, str]]",
                    "str"
                ],
                "fast_update": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Mapping]"
                ]
            }
        },
        "Instaloader.get_explore_posts": {
            "name": "get_explore_posts",
            "location": 789,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.get_hashtag_posts": {
            "name": "get_hashtag_posts",
            "location": 801,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": [],
                "hashtag": [
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        },
        "Instaloader.download_hashtag": {
            "name": "download_hashtag",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtag": [
                    "str",
                    "Optional[str]",
                    "Type",
                    "int"
                ],
                "max_count": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Mapping",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "fast_update": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "Instaloader.download_tagged": {
            "name": "download_tagged",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "Union[str, int]",
                    "Optional[str]",
                    "int"
                ],
                "fast_update": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "target": [
                    "str"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "Instaloader._get_id_filename": {
            "name": "_get_id_filename",
            "location": 866,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "Instaloader.save_profile_id": {
            "name": "save_profile_id",
            "location": 874,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ]
            }
        },
        "Instaloader.check_profile_id": {
            "name": "check_profile_id",
            "location": 886,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "Instaloader.download_profiles": {
            "name": "download_profiles",
            "location": 931,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "profiles": [
                    "Iterable[Any]",
                    "Iterable[float]",
                    "Optional[bool]",
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[float]"
                ],
                "profile_pic": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]"
                ],
                "posts": [
                    "bool",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "tagged": [
                    "bool",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "highlights": [
                    "bool",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "stories": [
                    "bool",
                    "str",
                    "float"
                ],
                "fast_update": [
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "storyitem_filter": [
                    "int",
                    "str",
                    "Optional[Callable[[structures.Post], bool]]",
                    "bool",
                    "List[str]"
                ],
                "raise_errors": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.download_profile": {
            "name": "download_profile",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "profile_pic": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "str"
                ],
                "profile_pic_only": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "str"
                ],
                "fast_update": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "download_stories": [
                    "str",
                    "bool",
                    "float"
                ],
                "download_stories_only": [
                    "str",
                    "bool",
                    "range",
                    "Optional[float]",
                    "int"
                ],
                "download_tagged": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "T",
                    "Optional[List[str]]"
                ],
                "download_tagged_only": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "post_filter": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[Union[str, datetime.datetime]]",
                    "Optional[datetime.timedelta]",
                    "list",
                    "Union[str, List[str]]"
                ],
                "storyitem_filter": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.check_if_committed": {
            "name": "check_if_committed",
            "location": 1117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "Instaloader.interactive_login": {
            "name": "interactive_login",
            "location": 1136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Instaloader.update_comments._postcommentanswer_asdict": {
            "name": "_postcommentanswer_asdict",
            "location": 255,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "int",
                    "fimfarchive.stories.Story"
                ]
            }
        },
        "Instaloader.update_comments._postcomment_asdict": {
            "name": "_postcomment_asdict",
            "location": 261,
            "return": [
                "str",
                "Optional[str]",
                "float",
                "list"
            ],
            "arguments": {
                "comment": [
                    "dict",
                    "str",
                    "list",
                    "pathlib.Path",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Instaloader.update_comments.get_unique_comments": {
            "name": "get_unique_comments",
            "location": 267,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "comments": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "combine_answers": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "Instaloader.save_caption._elliptify": {
            "name": "_elliptify",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "caption": [
                    "str",
                    "float",
                    "Tuple[str, str]"
                ]
            }
        },
        "Instaloader.download_profilepic._epoch_to_string": {
            "name": "_epoch_to_string",
            "location": 350,
            "return": [
                "Dict[str, int]",
                "int",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "epoch": [
                    "datetime.datetime",
                    "int",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "Instaloader.get_stories._userid_chunks": {
            "name": "_userid_chunks",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Instaloader.download_profiles._error_raiser": {
            "name": "_error_raiser",
            "location": 956,
            "return": [
                ""
            ],
            "arguments": {
                "_str": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "Instaloader.save_caption.get_filename": {
            "name": "get_filename",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "index": [
                    "str"
                ]
            }
        }
    },
    "instadownload_pdf-master/build/lib/instaloader/instaloadercontext.py": {
        "copy_session": {
            "name": "copy_session",
            "location": 21,
            "return": [
                "Sequence[str]",
                "set",
                "int",
                "Iterable"
            ],
            "arguments": {
                "session": [
                    "int",
                    "Mapping"
                ]
            }
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": 29,
            "return": [
                "int",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "InstaloaderContext.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "bool"
                ],
                "quiet": [
                    "str",
                    "bool"
                ],
                "user_agent": [],
                "max_connection_attempts": [
                    "int",
                    "float"
                ]
            }
        },
        "InstaloaderContext.anonymous_copy": {
            "name": "anonymous_copy",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.is_logged_in": {
            "name": "is_logged_in",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.log": {
            "name": "log",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.error": {
            "name": "error",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "repeat_at_end": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "InstaloaderContext.close": {
            "name": "close",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.error_catcher": {
            "name": "error_catcher",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_info": [
                    "int",
                    "AnyStr",
                    "str",
                    "Sequence[Any]",
                    "Iterable[T]"
                ]
            }
        },
        "InstaloaderContext._default_http_header": {
            "name": "_default_http_header",
            "location": 131,
            "return": [
                "Exception",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "empty_session_only": [
                    "bool",
                    "Optional['SparkSession']"
                ]
            }
        },
        "InstaloaderContext.get_anonymous_session": {
            "name": "get_anonymous_session",
            "location": 151,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.save_session_to_file": {
            "name": "save_session_to_file",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sessionfile": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, bytes]]"
                ]
            }
        },
        "InstaloaderContext.load_session_from_file": {
            "name": "load_session_from_file",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "sessionfile": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "InstaloaderContext.test_login": {
            "name": "test_login",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.login": {
            "name": "login",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[List[Any]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "passwd": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.two_factor_login": {
            "name": "two_factor_login",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "two_factor_code": [
                    "str",
                    "int"
                ]
            }
        },
        "InstaloaderContext.do_sleep": {
            "name": "do_sleep",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext._dump_query_timestamps": {
            "name": "_dump_query_timestamps",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_time": [
                    "int",
                    "float"
                ]
            }
        },
        "InstaloaderContext._graphql_request_count_per_sliding_window": {
            "name": "_graphql_request_count_per_sliding_window",
            "location": 279,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "InstaloaderContext._graphql_query_waittime": {
            "name": "_graphql_query_waittime",
            "location": 287,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "current_time": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "List['PydanticModelField']",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "Optional[str]"
                ],
                "untracked_queries": [
                    "int",
                    "str",
                    "Optional[List[int]]",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "InstaloaderContext._ratecontrol_graphql_query": {
            "name": "_ratecontrol_graphql_query",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str",
                    "dict"
                ],
                "untracked_queries": [
                    "str",
                    "Tuple[int, int, int]",
                    "dict"
                ]
            }
        },
        "InstaloaderContext.get_json": {
            "name": "get_json",
            "location": 335,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "float",
                    "bytes"
                ],
                "host": [
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "str"
                ],
                "_attempt": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InstaloaderContext.graphql_query": {
            "name": "graphql_query",
            "location": 404,
            "return": [
                "bool",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str",
                    "Dict[str, Any]"
                ],
                "variables": [
                    "str",
                    "dict",
                    "list",
                    "tuple"
                ],
                "referer": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "rhx_gis": [
                    "str",
                    "bytes"
                ]
            }
        },
        "InstaloaderContext.graphql_node_list": {
            "name": "graphql_node_list",
            "location": 441,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "query_variables": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Set[str]"
                ],
                "query_referer": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "edge_extractor": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "rhx_gis": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "first_data": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "InstaloaderContext.get_iphone_json": {
            "name": "get_iphone_json",
            "location": 472,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.write_raw": {
            "name": "write_raw",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InstaloaderContext.get_raw": {
            "name": "get_raw",
            "location": 501,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "_attempt": [
                    "str",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "InstaloaderContext.get_and_write_raw": {
            "name": "get_and_write_raw",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.root_rhx_gis": {
            "name": "root_rhx_gis",
            "location": 532,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "list",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.graphql_node_list._query": {
            "name": "_query",
            "location": 448,
            "return": [
                "int",
                "Dict[str, int]",
                "float",
                "Generator",
                "bool"
            ],
            "arguments": {}
        }
    },
    "instadownload_pdf-master/build/lib/instaloader/structures.py": {
        "save_structure_to_file": {
            "name": "save_structure_to_file",
            "location": 1052,
            "return": [
                "None"
            ],
            "arguments": {
                "structure": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_structure_from_file": {
            "name": "load_structure_from_file",
            "location": 1073,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "context": [
                    "Callable",
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Post.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ],
                "node": [
                    "str",
                    "list",
                    "Mapping",
                    "Iterable[str]"
                ],
                "owner_profile": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "Post.from_shortcode": {
            "name": "from_shortcode",
            "location": 75,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict"
                ],
                "context": [
                    "bool",
                    "str",
                    "dict"
                ],
                "shortcode": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Post.from_mediaid": {
            "name": "from_mediaid",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "context": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "mediaid": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "Post.shortcode_to_mediaid": {
            "name": "shortcode_to_mediaid",
            "location": 88,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "bool",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "Post.mediaid_to_shortcode": {
            "name": "mediaid_to_shortcode",
            "location": 95,
            "return": [
                "bool",
                "int",
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "mediaid": [
                    "int",
                    "datetime.timedelta"
                ]
            }
        },
        "Post._asdict": {
            "name": "_asdict",
            "location": 100,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.shortcode": {
            "name": "shortcode",
            "location": 111,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.mediaid": {
            "name": "mediaid",
            "location": 116,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__eq__": {
            "name": "__eq__",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "slice"
                ]
            }
        },
        "Post.__hash__": {
            "name": "__hash__",
            "location": 128,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._full_metadata": {
            "name": "_full_metadata",
            "location": 141,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._rhx_gis": {
            "name": "_rhx_gis",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._field": {
            "name": "_field",
            "location": 151,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_profile": {
            "name": "owner_profile",
            "location": 165,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_username": {
            "name": "owner_username",
            "location": 180,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_id": {
            "name": "owner_id",
            "location": 185,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date_local": {
            "name": "date_local",
            "location": 190,
            "return": [
                "datetime.datetime",
                "bool",
                "List[int]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date_utc": {
            "name": "date_utc",
            "location": 197,
            "return": [
                "datetime.datetime",
                "bool",
                "List[int]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date": {
            "name": "date",
            "location": 204,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.profile": {
            "name": "profile",
            "location": 209,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.url": {
            "name": "url",
            "location": 214,
            "return": [
                "str",
                "bool",
                "Callable",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.typename": {
            "name": "typename",
            "location": 219,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_sidecar_nodes": {
            "name": "get_sidecar_nodes",
            "location": 223,
            "return": [
                "typing.Iterator[PostSidecarNode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption": {
            "name": "caption",
            "location": 233,
            "return": [
                "float",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption_hashtags": {
            "name": "caption_hashtags",
            "location": 242,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption_mentions": {
            "name": "caption_mentions",
            "location": 252,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.pcaption": {
            "name": "pcaption",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.tagged_users": {
            "name": "tagged_users",
            "location": 272,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.is_video": {
            "name": "is_video",
            "location": 281,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_url": {
            "name": "video_url",
            "location": 286,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_view_count": {
            "name": "video_view_count",
            "location": 293,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_duration": {
            "name": "video_duration",
            "location": 302,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.viewer_has_liked": {
            "name": "viewer_has_liked",
            "location": 311,
            "return": [
                "str",
                "Optional[Sequence]",
                "bool",
                "Optional[Callable[..., Any]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.likes": {
            "name": "likes",
            "location": 320,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.comments": {
            "name": "comments",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_comments": {
            "name": "get_comments",
            "location": 332,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_likes": {
            "name": "get_likes",
            "location": 393,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.location": {
            "name": "location",
            "location": 410,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "node": [
                    "Optional[Any]"
                ]
            }
        },
        "Profile.from_username": {
            "name": "from_username",
            "location": 464,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict"
                ],
                "context": [
                    "bool",
                    "str",
                    "dict"
                ],
                "username": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Profile.from_id": {
            "name": "from_id",
            "location": 479,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[int, dict]"
                ],
                "context": [
                    "int",
                    "Tuple[Any, str]",
                    "Dict[int, int]"
                ],
                "profile_id": [
                    "int",
                    "Tuple[Any, str]",
                    "Dict[int, int]"
                ]
            }
        },
        "Profile._asdict": {
            "name": "_asdict",
            "location": 505,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._metadata": {
            "name": "_metadata",
            "location": 525,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._iphone_struct": {
            "name": "_iphone_struct",
            "location": 539,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.userid": {
            "name": "userid",
            "location": 548,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.username": {
            "name": "username",
            "location": 553,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__repr__": {
            "name": "__repr__",
            "location": 557,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__eq__": {
            "name": "__eq__",
            "location": 560,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "float",
                    "str",
                    "int",
                    "tuple",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Profile.__hash__": {
            "name": "__hash__",
            "location": 565,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_private": {
            "name": "is_private",
            "location": 569,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followed_by_viewer": {
            "name": "followed_by_viewer",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.mediacount": {
            "name": "mediacount",
            "location": 577,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followers": {
            "name": "followers",
            "location": 581,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followees": {
            "name": "followees",
            "location": 585,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.external_url": {
            "name": "external_url",
            "location": 589,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.biography": {
            "name": "biography",
            "location": 593,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.blocked_by_viewer": {
            "name": "blocked_by_viewer",
            "location": 597,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.follows_viewer": {
            "name": "follows_viewer",
            "location": 601,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.full_name": {
            "name": "full_name",
            "location": 605,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_blocked_viewer": {
            "name": "has_blocked_viewer",
            "location": 609,
            "return": [
                "str",
                "BaseException",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_highlight_reels": {
            "name": "has_highlight_reels",
            "location": 613,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_public_story": {
            "name": "has_public_story",
            "location": 623,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_viewable_story": {
            "name": "has_viewable_story",
            "location": 640,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_requested_viewer": {
            "name": "has_requested_viewer",
            "location": 651,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_verified": {
            "name": "is_verified",
            "location": 655,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.requested_by_viewer": {
            "name": "requested_by_viewer",
            "location": 659,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.profile_pic_url": {
            "name": "profile_pic_url",
            "location": 663,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_profile_pic_url": {
            "name": "get_profile_pic_url",
            "location": 679,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_posts": {
            "name": "get_posts",
            "location": 685,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_saved_posts": {
            "name": "get_saved_posts",
            "location": 696,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_tagged_posts": {
            "name": "get_tagged_posts",
            "location": 711,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_followers": {
            "name": "get_followers",
            "location": 723,
            "return": [
                "typing.Iterator['Profile']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_followees": {
            "name": "get_followees",
            "location": 738,
            "return": [
                "typing.Iterator['Profile']"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__init__": {
            "name": "__init__",
            "location": 765,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ],
                "owner_profile": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "StoryItem._asdict": {
            "name": "_asdict",
            "location": 770,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.mediaid": {
            "name": "mediaid",
            "location": 777,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.shortcode": {
            "name": "shortcode",
            "location": 782,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__repr__": {
            "name": "__repr__",
            "location": 787,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__eq__": {
            "name": "__eq__",
            "location": 790,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Optional[Sequence[Any]]",
                    "Callable[[str], str]",
                    "str"
                ]
            }
        },
        "StoryItem.__hash__": {
            "name": "__hash__",
            "location": 795,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_profile": {
            "name": "owner_profile",
            "location": 799,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_username": {
            "name": "owner_username",
            "location": 807,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_id": {
            "name": "owner_id",
            "location": 812,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date_local": {
            "name": "date_local",
            "location": 817,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date_utc": {
            "name": "date_utc",
            "location": 822,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date": {
            "name": "date",
            "location": 827,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.profile": {
            "name": "profile",
            "location": 832,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.expiring_local": {
            "name": "expiring_local",
            "location": 837,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.expiring_utc": {
            "name": "expiring_utc",
            "location": 842,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.url": {
            "name": "url",
            "location": 847,
            "return": [
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.typename": {
            "name": "typename",
            "location": 852,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.is_video": {
            "name": "is_video",
            "location": 857,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.video_url": {
            "name": "video_url",
            "location": 862,
            "return": [
                "str",
                "Optional[List[str]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__init__": {
            "name": "__init__",
            "location": 890,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "node": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ]
            }
        },
        "Story.__repr__": {
            "name": "__repr__",
            "location": 896,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__eq__": {
            "name": "__eq__",
            "location": 899,
            "return": [
                "List[str]",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Story.__hash__": {
            "name": "__hash__",
            "location": 904,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.unique_id": {
            "name": "unique_id",
            "location": 908,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.last_seen_local": {
            "name": "last_seen_local",
            "location": 920,
            "return": [
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.last_seen_utc": {
            "name": "last_seen_utc",
            "location": 927,
            "return": [
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.latest_media_local": {
            "name": "latest_media_local",
            "location": 934,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.latest_media_utc": {
            "name": "latest_media_utc",
            "location": 939,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.itemcount": {
            "name": "itemcount",
            "location": 944,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_profile": {
            "name": "owner_profile",
            "location": 949,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_username": {
            "name": "owner_username",
            "location": 956,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_id": {
            "name": "owner_id",
            "location": 961,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.get_items": {
            "name": "get_items",
            "location": 965,
            "return": [
                "typing.Iterator[StoryItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.__init__": {
            "name": "__init__",
            "location": 993,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]"
                ],
                "node": [
                    "Dict[str, Any]"
                ],
                "owner": [
                    "float",
                    "str",
                    "Dict[str, float]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Highlight.__repr__": {
            "name": "__repr__",
            "location": 998,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.unique_id": {
            "name": "unique_id",
            "location": 1002,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.owner_profile": {
            "name": "owner_profile",
            "location": 1007,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.title": {
            "name": "title",
            "location": 1014,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.cover_url": {
            "name": "cover_url",
            "location": 1019,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.cover_cropped_url": {
            "name": "cover_cropped_url",
            "location": 1024,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight._fetch_items": {
            "name": "_fetch_items",
            "location": 1028,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.itemcount": {
            "name": "itemcount",
            "location": 1036,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.get_items": {
            "name": "get_items",
            "location": 1042,
            "return": [
                "typing.Iterator[StoryItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.pcaption._elliptify": {
            "name": "_elliptify",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "caption": [
                    "TextIO",
                    "str",
                    "List[T]",
                    "Union[List[str], str]"
                ]
            }
        },
        "Post.get_comments._postcommentanswer": {
            "name": "_postcommentanswer",
            "location": 339,
            "return": [
                "bool",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "node": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Post.get_comments._postcommentanswers": {
            "name": "_postcommentanswers",
            "location": 345,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Post.get_comments._postcomment": {
            "name": "_postcomment",
            "location": 363,
            "return": [
                "int",
                "float",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "instadownload_pdf-master/build/lib/instaloader/__init__.py": {},
    "instadownload_pdf-master/build/lib/instaloader/__main__.py": {
        "usage_string": {
            "name": "usage_string",
            "location": 17,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "filterstr_to_filterfunc": {
            "name": "filterstr_to_filterfunc",
            "location": 28,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "filter_str": [
                    "str",
                    "type",
                    "Optional[Any]",
                    "List[List[str]]"
                ],
                "item_type": [
                    "str",
                    "type",
                    "Optional[Any]",
                    "List[List[str]]"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "instaloader": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "targetlist": [
                    "List[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "username": [
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "password": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "sessionfile": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "download_profile_pic": [
                    "bool",
                    "int",
                    "str"
                ],
                "download_posts": [
                    "bool",
                    "int",
                    "str"
                ],
                "download_stories": [
                    "bool",
                    "float",
                    "List[str]"
                ],
                "download_highlights": [
                    "bool",
                    "int"
                ],
                "download_tagged": [
                    "bool",
                    "int",
                    "str"
                ],
                "fast_update": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "max_count": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "post_filter_str": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "storyitem_filter_str": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "filterstr_to_filterfunc.filterfunc": {
            "name": "filterfunc",
            "location": 53,
            "return": [
                "bool",
                "int",
                "list",
                "Optional[bool]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "filterstr_to_filterfunc.TransformFilterAst.visit_Name": {
            "name": "visit_Name",
            "location": 36,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "instadownload_pdf-master/instaloader/exceptions.py": {},
    "instadownload_pdf-master/instaloader/instaloader.py": {
        "get_default_session_filename": {
            "name": "get_default_session_filename",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool"
                ]
            }
        },
        "format_string_contains_key": {
            "name": "format_string_contains_key",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "Sequence[str]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "_requires_login": {
            "name": "_requires_login",
            "location": 46,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_retry_on_connection_error": {
            "name": "_retry_on_connection_error",
            "location": 58,
            "return": [
                "Union"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[], Any]"
                ]
            }
        },
        "_requires_login.call": {
            "name": "call",
            "location": 49,
            "return": [],
            "arguments": {
                "instaloader": []
            }
        },
        "_retry_on_connection_error.call": {
            "name": "call",
            "location": 68,
            "return": [
                "int",
                "AbstractSet[T]",
                "AbstractSet[T_co]",
                "datetime.datetime"
            ],
            "arguments": {
                "instaloader": [
                    "int",
                    "Dict[int, Any]",
                    "set"
                ]
            }
        },
        "_ArbitraryItemFormatter.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "_ArbitraryItemFormatter.get_value": {
            "name": "get_value",
            "location": 93,
            "return": [
                "Dict[str, Any]",
                "int",
                "bool",
                "Mapping[int, str]",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "Callable[[None], Any]",
                    "bytes",
                    "Optional[str]",
                    "set",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_ArbitraryItemFormatter.format_field": {
            "name": "format_field",
            "location": 99,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "Union[int, str, datetime.datetime]",
                    "Tuple[str, str]",
                    "Union[datetime.datetime, datetime.date]"
                ],
                "format_spec": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "Union[int, str, datetime.datetime]",
                    "Tuple[str, str]",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "_PostPathFormatter.vformat": {
            "name": "vformat",
            "location": 111,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "format_string": [
                    "str",
                    "bool"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_PostPathFormatter.get_value": {
            "name": "get_value",
            "location": 119,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[str]",
                    "bytes",
                    "str",
                    "bool",
                    "list"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Instaloader.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "quiet": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "user_agent": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "dirname_pattern": [
                    "str",
                    "int",
                    "float"
                ],
                "filename_pattern": [
                    "str",
                    "int",
                    "float"
                ],
                "download_pictures": [
                    "str",
                    "int",
                    "float"
                ],
                "download_videos": [
                    "str",
                    "int",
                    "float"
                ],
                "download_video_thumbnails": [
                    "str",
                    "int",
                    "float"
                ],
                "download_geotags": [
                    "str",
                    "int",
                    "float"
                ],
                "download_comments": [
                    "Optional[Callable[[Dict], Any]]"
                ],
                "save_metadata": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Iterable[str]]",
                    "Dict[str, Union[Any, Any]]",
                    "List[int]",
                    "Optional[int]"
                ],
                "compress_json": [
                    "str",
                    "int",
                    "float"
                ],
                "post_metadata_txt_pattern": [
                    "Optional[float]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "storyitem_metadata_txt_pattern": [
                    "bool",
                    "Optional[str]"
                ],
                "max_connection_attempts": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ],
                "commit_mode": [
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "Instaloader.anonymous_copy": {
            "name": "anonymous_copy",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.close": {
            "name": "close",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.__enter__": {
            "name": "__enter__",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.__exit__": {
            "name": "__exit__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.download_pic": {
            "name": "download_pic",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "bool",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "int",
                    "Optional[str]"
                ],
                "mtime": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "Union[None, int, str]"
                ],
                "filename_suffix": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Sequence[str]",
                    "str"
                ],
                "_attempt": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Iterator[int]"
                ]
            }
        },
        "Instaloader.save_metadata_json": {
            "name": "save_metadata_json",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ],
                "structure": [
                    "str",
                    "pathlib.Path",
                    "Union[str, bytes]"
                ]
            }
        },
        "Instaloader.update_comments": {
            "name": "update_comments",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes"
                ],
                "post": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Instaloader.save_caption": {
            "name": "save_caption",
            "location": 301,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "mtime": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "bool"
                ],
                "caption": [
                    "str",
                    "bool",
                    "IO"
                ]
            }
        },
        "Instaloader.save_location": {
            "name": "save_location",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "location": [
                    "str",
                    "dict"
                ],
                "mtime": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        },
        "Instaloader.download_profilepic": {
            "name": "download_profilepic",
            "location": 352,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str",
                    "requests.Response"
                ],
                "_attempt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Instaloader.save_session_to_file": {
            "name": "save_session_to_file",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "types.Path"
                ]
            }
        },
        "Instaloader.load_session_from_file": {
            "name": "load_session_from_file",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "filename": [
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "str",
                    "TextIO"
                ]
            }
        },
        "Instaloader.test_login": {
            "name": "test_login",
            "location": 418,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.login": {
            "name": "login",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ],
                "passwd": [
                    "str",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "Instaloader.two_factor_login": {
            "name": "two_factor_login",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_factor_code": [
                    "int",
                    "str",
                    "bytes",
                    "Union[Literal, Literal]"
                ]
            }
        },
        "Instaloader.format_filename": {
            "name": "format_filename",
            "location": 442,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "bool"
                ],
                "target": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Instaloader.download_post": {
            "name": "download_post",
            "location": 448,
            "return": [
                "Optional[Type]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "post": [
                    "Dict[str, Any]"
                ],
                "target": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Instaloader.create_pdf": {
            "name": "create_pdf",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Instaloader.get_stories": {
            "name": "get_stories",
            "location": 536,
            "return": [
                "typing.Iterator[structures.Story]"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Instaloader.download_stories": {
            "name": "download_stories",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "userids": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "fast_update": [
                    "bool",
                    "float",
                    "List[str]",
                    "Union[float, Tuple[float, float]]",
                    "str"
                ],
                "filename_target": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Mapping[str, Mapping[str, Any]]"
                ],
                "storyitem_filter": [
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[str]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "Optional[Dict[str, int]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Instaloader.download_storyitem": {
            "name": "download_storyitem",
            "location": 601,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable",
                    "str",
                    "T"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.get_highlights": {
            "name": "get_highlights",
            "location": 630,
            "return": [
                "typing.Iterator[structures.Highlight]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "Instaloader.download_highlights": {
            "name": "download_highlights",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "fast_update": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "filename_target": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "storyitem_filter": [
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[str]",
                    "Optional[Callable[[structures.Post], bool]]",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "Instaloader.get_feed_posts": {
            "name": "get_feed_posts",
            "location": 687,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.download_feed_posts": {
            "name": "download_feed_posts",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "int",
                    "bool"
                ],
                "fast_update": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.download_saved_posts": {
            "name": "download_saved_posts",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "int",
                    "bool"
                ],
                "fast_update": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "Instaloader.get_location_posts": {
            "name": "get_location_posts",
            "location": 766,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Instaloader.download_location": {
            "name": "download_location",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "max_count": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "datetime.datetime",
                    "int"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]",
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[bool]",
                    "Optional[Union[int, str]]",
                    "str"
                ],
                "fast_update": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Mapping]"
                ]
            }
        },
        "Instaloader.get_explore_posts": {
            "name": "get_explore_posts",
            "location": 820,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instaloader.get_hashtag_posts": {
            "name": "get_hashtag_posts",
            "location": 832,
            "return": [
                "typing.Iterator[structures.Post]"
            ],
            "arguments": {
                "self": [],
                "hashtag": [
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        },
        "Instaloader.download_hashtag": {
            "name": "download_hashtag",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtag": [
                    "str",
                    "Optional[str]",
                    "Type",
                    "int"
                ],
                "max_count": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Mapping",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "fast_update": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "Instaloader.download_tagged": {
            "name": "download_tagged",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "Union[str, int]",
                    "Optional[str]",
                    "int"
                ],
                "fast_update": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "target": [
                    "str"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Callable[[structures.Story.Item], bool]]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "Instaloader._get_id_filename": {
            "name": "_get_id_filename",
            "location": 897,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str"
                ]
            }
        },
        "Instaloader.save_profile_id": {
            "name": "save_profile_id",
            "location": 905,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ]
            }
        },
        "Instaloader.check_profile_id": {
            "name": "check_profile_id",
            "location": 917,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "Instaloader.download_profiles": {
            "name": "download_profiles",
            "location": 962,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "profiles": [
                    "Iterable[Any]",
                    "Iterable[float]",
                    "Optional[bool]",
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[float]"
                ],
                "profile_pic": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]"
                ],
                "posts": [
                    "bool",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "tagged": [
                    "bool",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "highlights": [
                    "bool",
                    "str",
                    "Iterable[pathlib.Path]"
                ],
                "stories": [
                    "bool",
                    "str",
                    "float"
                ],
                "fast_update": [
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "post_filter": [
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "storyitem_filter": [
                    "int",
                    "str",
                    "Optional[Callable[[structures.Post], bool]]",
                    "bool",
                    "List[str]"
                ],
                "raise_errors": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.download_profile": {
            "name": "download_profile",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": [],
                "profile_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "profile_pic": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "str"
                ],
                "profile_pic_only": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "str"
                ],
                "fast_update": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "download_stories": [
                    "str",
                    "bool",
                    "float"
                ],
                "download_stories_only": [
                    "str",
                    "bool",
                    "range",
                    "Optional[float]",
                    "int"
                ],
                "download_tagged": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "T",
                    "Optional[List[str]]"
                ],
                "download_tagged_only": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "post_filter": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[structures.Post], bool]]",
                    "Optional[Union[str, datetime.datetime]]",
                    "Optional[datetime.timedelta]",
                    "list",
                    "Union[str, List[str]]"
                ],
                "storyitem_filter": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Instaloader.check_if_committed": {
            "name": "check_if_committed",
            "location": 1149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "Instaloader.interactive_login": {
            "name": "interactive_login",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Instaloader.update_comments._postcommentanswer_asdict": {
            "name": "_postcommentanswer_asdict",
            "location": 260,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "int",
                    "fimfarchive.stories.Story"
                ]
            }
        },
        "Instaloader.update_comments._postcomment_asdict": {
            "name": "_postcomment_asdict",
            "location": 266,
            "return": [
                "str",
                "Optional[str]",
                "float",
                "list"
            ],
            "arguments": {
                "comment": [
                    "dict",
                    "str",
                    "list",
                    "pathlib.Path",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Instaloader.update_comments.get_unique_comments": {
            "name": "get_unique_comments",
            "location": 272,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "comments": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "combine_answers": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "Instaloader.save_caption._elliptify": {
            "name": "_elliptify",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "caption": [
                    "str",
                    "float",
                    "Tuple[str, str]"
                ]
            }
        },
        "Instaloader.download_profilepic._epoch_to_string": {
            "name": "_epoch_to_string",
            "location": 355,
            "return": [
                "Dict[str, int]",
                "int",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "epoch": [
                    "datetime.datetime",
                    "int",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "Instaloader.get_stories._userid_chunks": {
            "name": "_userid_chunks",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Instaloader.download_profiles._error_raiser": {
            "name": "_error_raiser",
            "location": 987,
            "return": [
                ""
            ],
            "arguments": {
                "_str": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "Instaloader.save_caption.get_filename": {
            "name": "get_filename",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "index": [
                    "str"
                ]
            }
        }
    },
    "instadownload_pdf-master/instaloader/instaloadercontext.py": {
        "copy_session": {
            "name": "copy_session",
            "location": 21,
            "return": [
                "Sequence[str]",
                "set",
                "int",
                "Iterable"
            ],
            "arguments": {
                "session": [
                    "int",
                    "Mapping"
                ]
            }
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": 29,
            "return": [
                "int",
                "float",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "InstaloaderContext.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "bool"
                ],
                "quiet": [
                    "str",
                    "bool"
                ],
                "user_agent": [],
                "max_connection_attempts": [
                    "int",
                    "float"
                ]
            }
        },
        "InstaloaderContext.anonymous_copy": {
            "name": "anonymous_copy",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.is_logged_in": {
            "name": "is_logged_in",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.log": {
            "name": "log",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.error": {
            "name": "error",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "repeat_at_end": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "InstaloaderContext.close": {
            "name": "close",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.error_catcher": {
            "name": "error_catcher",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_info": [
                    "int",
                    "AnyStr",
                    "str",
                    "Sequence[Any]",
                    "Iterable[T]"
                ]
            }
        },
        "InstaloaderContext._default_http_header": {
            "name": "_default_http_header",
            "location": 131,
            "return": [
                "Exception",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "empty_session_only": [
                    "bool",
                    "Optional['SparkSession']"
                ]
            }
        },
        "InstaloaderContext.get_anonymous_session": {
            "name": "get_anonymous_session",
            "location": 151,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.save_session_to_file": {
            "name": "save_session_to_file",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sessionfile": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, bytes]]"
                ]
            }
        },
        "InstaloaderContext.load_session_from_file": {
            "name": "load_session_from_file",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ],
                "sessionfile": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "InstaloaderContext.test_login": {
            "name": "test_login",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.login": {
            "name": "login",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[List[Any]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "passwd": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.two_factor_login": {
            "name": "two_factor_login",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "two_factor_code": [
                    "str",
                    "int"
                ]
            }
        },
        "InstaloaderContext.do_sleep": {
            "name": "do_sleep",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext._dump_query_timestamps": {
            "name": "_dump_query_timestamps",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_time": [
                    "int",
                    "float"
                ]
            }
        },
        "InstaloaderContext._graphql_request_count_per_sliding_window": {
            "name": "_graphql_request_count_per_sliding_window",
            "location": 279,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "InstaloaderContext._graphql_query_waittime": {
            "name": "_graphql_query_waittime",
            "location": 287,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "current_time": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "List['PydanticModelField']",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "Optional[str]"
                ],
                "untracked_queries": [
                    "int",
                    "str",
                    "Optional[List[int]]",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "InstaloaderContext._ratecontrol_graphql_query": {
            "name": "_ratecontrol_graphql_query",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str",
                    "dict"
                ],
                "untracked_queries": [
                    "str",
                    "Tuple[int, int, int]",
                    "dict"
                ]
            }
        },
        "InstaloaderContext.get_json": {
            "name": "get_json",
            "location": 335,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "float",
                    "bytes"
                ],
                "host": [
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "str"
                ],
                "_attempt": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InstaloaderContext.graphql_query": {
            "name": "graphql_query",
            "location": 404,
            "return": [
                "bool",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "str",
                    "Dict[str, Any]"
                ],
                "variables": [
                    "str",
                    "dict",
                    "list",
                    "tuple"
                ],
                "referer": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "rhx_gis": [
                    "str",
                    "bytes"
                ]
            }
        },
        "InstaloaderContext.graphql_node_list": {
            "name": "graphql_node_list",
            "location": 441,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "query_hash": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "query_variables": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Set[str]"
                ],
                "query_referer": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "edge_extractor": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "rhx_gis": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "list"
                ],
                "first_data": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "InstaloaderContext.get_iphone_json": {
            "name": "get_iphone_json",
            "location": 472,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.write_raw": {
            "name": "write_raw",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InstaloaderContext.get_raw": {
            "name": "get_raw",
            "location": 501,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "_attempt": [
                    "str",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "InstaloaderContext.get_and_write_raw": {
            "name": "get_and_write_raw",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "InstaloaderContext.root_rhx_gis": {
            "name": "root_rhx_gis",
            "location": 532,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "list",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstaloaderContext.graphql_node_list._query": {
            "name": "_query",
            "location": 448,
            "return": [
                "int",
                "Dict[str, int]",
                "float",
                "Generator",
                "bool"
            ],
            "arguments": {}
        }
    },
    "instadownload_pdf-master/instaloader/structures.py": {
        "save_structure_to_file": {
            "name": "save_structure_to_file",
            "location": 1052,
            "return": [
                "None"
            ],
            "arguments": {
                "structure": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_structure_from_file": {
            "name": "load_structure_from_file",
            "location": 1073,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "context": [
                    "Callable",
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Post.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ],
                "node": [
                    "str",
                    "list",
                    "Mapping",
                    "Iterable[str]"
                ],
                "owner_profile": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "Post.from_shortcode": {
            "name": "from_shortcode",
            "location": 75,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict"
                ],
                "context": [
                    "bool",
                    "str",
                    "dict"
                ],
                "shortcode": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Post.from_mediaid": {
            "name": "from_mediaid",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "context": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "mediaid": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "Post.shortcode_to_mediaid": {
            "name": "shortcode_to_mediaid",
            "location": 88,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "bool",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "Post.mediaid_to_shortcode": {
            "name": "mediaid_to_shortcode",
            "location": 95,
            "return": [
                "bool",
                "int",
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "mediaid": [
                    "int",
                    "datetime.timedelta"
                ]
            }
        },
        "Post._asdict": {
            "name": "_asdict",
            "location": 100,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.shortcode": {
            "name": "shortcode",
            "location": 111,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.mediaid": {
            "name": "mediaid",
            "location": 116,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__eq__": {
            "name": "__eq__",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "slice"
                ]
            }
        },
        "Post.__hash__": {
            "name": "__hash__",
            "location": 128,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._full_metadata": {
            "name": "_full_metadata",
            "location": 141,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._rhx_gis": {
            "name": "_rhx_gis",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post._field": {
            "name": "_field",
            "location": 151,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_profile": {
            "name": "owner_profile",
            "location": 165,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_username": {
            "name": "owner_username",
            "location": 180,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.owner_id": {
            "name": "owner_id",
            "location": 185,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date_local": {
            "name": "date_local",
            "location": 190,
            "return": [
                "datetime.datetime",
                "bool",
                "List[int]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date_utc": {
            "name": "date_utc",
            "location": 197,
            "return": [
                "datetime.datetime",
                "bool",
                "List[int]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.date": {
            "name": "date",
            "location": 204,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.profile": {
            "name": "profile",
            "location": 209,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.url": {
            "name": "url",
            "location": 214,
            "return": [
                "str",
                "bool",
                "Callable",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.typename": {
            "name": "typename",
            "location": 219,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_sidecar_nodes": {
            "name": "get_sidecar_nodes",
            "location": 223,
            "return": [
                "typing.Iterator[PostSidecarNode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption": {
            "name": "caption",
            "location": 233,
            "return": [
                "float",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption_hashtags": {
            "name": "caption_hashtags",
            "location": 242,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.caption_mentions": {
            "name": "caption_mentions",
            "location": 252,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.pcaption": {
            "name": "pcaption",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.tagged_users": {
            "name": "tagged_users",
            "location": 272,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.is_video": {
            "name": "is_video",
            "location": 281,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_url": {
            "name": "video_url",
            "location": 286,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_view_count": {
            "name": "video_view_count",
            "location": 293,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.video_duration": {
            "name": "video_duration",
            "location": 302,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.viewer_has_liked": {
            "name": "viewer_has_liked",
            "location": 311,
            "return": [
                "str",
                "Optional[Sequence]",
                "bool",
                "Optional[Callable[..., Any]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.likes": {
            "name": "likes",
            "location": 320,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.comments": {
            "name": "comments",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_comments": {
            "name": "get_comments",
            "location": 332,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_likes": {
            "name": "get_likes",
            "location": 393,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.location": {
            "name": "location",
            "location": 410,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "node": [
                    "Optional[Any]"
                ]
            }
        },
        "Profile.from_username": {
            "name": "from_username",
            "location": 464,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict"
                ],
                "context": [
                    "bool",
                    "str",
                    "dict"
                ],
                "username": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Profile.from_id": {
            "name": "from_id",
            "location": 479,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[int, dict]"
                ],
                "context": [
                    "int",
                    "Tuple[Any, str]",
                    "Dict[int, int]"
                ],
                "profile_id": [
                    "int",
                    "Tuple[Any, str]",
                    "Dict[int, int]"
                ]
            }
        },
        "Profile._asdict": {
            "name": "_asdict",
            "location": 505,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._obtain_metadata": {
            "name": "_obtain_metadata",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._metadata": {
            "name": "_metadata",
            "location": 525,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._iphone_struct": {
            "name": "_iphone_struct",
            "location": 539,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.userid": {
            "name": "userid",
            "location": 548,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.username": {
            "name": "username",
            "location": 553,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__repr__": {
            "name": "__repr__",
            "location": 557,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__eq__": {
            "name": "__eq__",
            "location": 560,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "float",
                    "str",
                    "int",
                    "tuple",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Profile.__hash__": {
            "name": "__hash__",
            "location": 565,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_private": {
            "name": "is_private",
            "location": 569,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followed_by_viewer": {
            "name": "followed_by_viewer",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.mediacount": {
            "name": "mediacount",
            "location": 577,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followers": {
            "name": "followers",
            "location": 581,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.followees": {
            "name": "followees",
            "location": 585,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.external_url": {
            "name": "external_url",
            "location": 589,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.biography": {
            "name": "biography",
            "location": 593,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.blocked_by_viewer": {
            "name": "blocked_by_viewer",
            "location": 597,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.follows_viewer": {
            "name": "follows_viewer",
            "location": 601,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.full_name": {
            "name": "full_name",
            "location": 605,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_blocked_viewer": {
            "name": "has_blocked_viewer",
            "location": 609,
            "return": [
                "str",
                "BaseException",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_highlight_reels": {
            "name": "has_highlight_reels",
            "location": 613,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_public_story": {
            "name": "has_public_story",
            "location": 623,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_viewable_story": {
            "name": "has_viewable_story",
            "location": 640,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.has_requested_viewer": {
            "name": "has_requested_viewer",
            "location": 651,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_verified": {
            "name": "is_verified",
            "location": 655,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.requested_by_viewer": {
            "name": "requested_by_viewer",
            "location": 659,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.profile_pic_url": {
            "name": "profile_pic_url",
            "location": 663,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_profile_pic_url": {
            "name": "get_profile_pic_url",
            "location": 679,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_posts": {
            "name": "get_posts",
            "location": 685,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_saved_posts": {
            "name": "get_saved_posts",
            "location": 696,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_tagged_posts": {
            "name": "get_tagged_posts",
            "location": 711,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_followers": {
            "name": "get_followers",
            "location": 723,
            "return": [
                "typing.Iterator['Profile']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_followees": {
            "name": "get_followees",
            "location": 738,
            "return": [
                "typing.Iterator['Profile']"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__init__": {
            "name": "__init__",
            "location": 765,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ],
                "owner_profile": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "StoryItem._asdict": {
            "name": "_asdict",
            "location": 770,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.mediaid": {
            "name": "mediaid",
            "location": 777,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.shortcode": {
            "name": "shortcode",
            "location": 782,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__repr__": {
            "name": "__repr__",
            "location": 787,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.__eq__": {
            "name": "__eq__",
            "location": 790,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Optional[Sequence[Any]]",
                    "Callable[[str], str]",
                    "str"
                ]
            }
        },
        "StoryItem.__hash__": {
            "name": "__hash__",
            "location": 795,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_profile": {
            "name": "owner_profile",
            "location": 799,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_username": {
            "name": "owner_username",
            "location": 807,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.owner_id": {
            "name": "owner_id",
            "location": 812,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date_local": {
            "name": "date_local",
            "location": 817,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date_utc": {
            "name": "date_utc",
            "location": 822,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.date": {
            "name": "date",
            "location": 827,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date",
                "datetime.datetime",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.profile": {
            "name": "profile",
            "location": 832,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.expiring_local": {
            "name": "expiring_local",
            "location": 837,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.expiring_utc": {
            "name": "expiring_utc",
            "location": 842,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.url": {
            "name": "url",
            "location": 847,
            "return": [
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.typename": {
            "name": "typename",
            "location": 852,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.is_video": {
            "name": "is_video",
            "location": 857,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryItem.video_url": {
            "name": "video_url",
            "location": 862,
            "return": [
                "str",
                "Optional[List[str]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__init__": {
            "name": "__init__",
            "location": 890,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "node": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ]
            }
        },
        "Story.__repr__": {
            "name": "__repr__",
            "location": 896,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__eq__": {
            "name": "__eq__",
            "location": 899,
            "return": [
                "List[str]",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Story.__hash__": {
            "name": "__hash__",
            "location": 904,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.unique_id": {
            "name": "unique_id",
            "location": 908,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.last_seen_local": {
            "name": "last_seen_local",
            "location": 920,
            "return": [
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.last_seen_utc": {
            "name": "last_seen_utc",
            "location": 927,
            "return": [
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.latest_media_local": {
            "name": "latest_media_local",
            "location": 934,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.latest_media_utc": {
            "name": "latest_media_utc",
            "location": 939,
            "return": [
                "float",
                "datetime.datetime",
                "datetime.timezone",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.itemcount": {
            "name": "itemcount",
            "location": 944,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_profile": {
            "name": "owner_profile",
            "location": 949,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_username": {
            "name": "owner_username",
            "location": 956,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.owner_id": {
            "name": "owner_id",
            "location": 961,
            "return": [
                "IO",
                "int",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.get_items": {
            "name": "get_items",
            "location": 965,
            "return": [
                "typing.Iterator[StoryItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.__init__": {
            "name": "__init__",
            "location": 993,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]"
                ],
                "node": [
                    "Dict[str, Any]"
                ],
                "owner": [
                    "float",
                    "str",
                    "Dict[str, float]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Highlight.__repr__": {
            "name": "__repr__",
            "location": 998,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.unique_id": {
            "name": "unique_id",
            "location": 1002,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.owner_profile": {
            "name": "owner_profile",
            "location": 1007,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.title": {
            "name": "title",
            "location": 1014,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.cover_url": {
            "name": "cover_url",
            "location": 1019,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.cover_cropped_url": {
            "name": "cover_cropped_url",
            "location": 1024,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight._fetch_items": {
            "name": "_fetch_items",
            "location": 1028,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.itemcount": {
            "name": "itemcount",
            "location": 1036,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.get_items": {
            "name": "get_items",
            "location": 1042,
            "return": [
                "typing.Iterator[StoryItem]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.pcaption._elliptify": {
            "name": "_elliptify",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "caption": [
                    "TextIO",
                    "str",
                    "List[T]",
                    "Union[List[str], str]"
                ]
            }
        },
        "Post.get_comments._postcommentanswer": {
            "name": "_postcommentanswer",
            "location": 339,
            "return": [
                "bool",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "node": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Post.get_comments._postcommentanswers": {
            "name": "_postcommentanswers",
            "location": 345,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Post.get_comments._postcomment": {
            "name": "_postcomment",
            "location": 363,
            "return": [
                "int",
                "float",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "instadownload_pdf-master/instaloader/__init__.py": {},
    "instadownload_pdf-master/instaloader/__main__.py": {
        "usage_string": {
            "name": "usage_string",
            "location": 17,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "filterstr_to_filterfunc": {
            "name": "filterstr_to_filterfunc",
            "location": 28,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "filter_str": [
                    "str",
                    "type",
                    "Optional[Any]",
                    "List[List[str]]"
                ],
                "item_type": [
                    "str",
                    "type",
                    "Optional[Any]",
                    "List[List[str]]"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "instaloader": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "targetlist": [
                    "List[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "username": [
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "password": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "sessionfile": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "download_profile_pic": [
                    "bool",
                    "int",
                    "str"
                ],
                "download_posts": [
                    "bool",
                    "int",
                    "str"
                ],
                "download_stories": [
                    "bool",
                    "float",
                    "List[str]"
                ],
                "download_highlights": [
                    "bool",
                    "int"
                ],
                "download_tagged": [
                    "bool",
                    "int",
                    "str"
                ],
                "fast_update": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "max_count": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "post_filter_str": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "storyitem_filter_str": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "filterstr_to_filterfunc.filterfunc": {
            "name": "filterfunc",
            "location": 53,
            "return": [
                "bool",
                "int",
                "list",
                "Optional[bool]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "filterstr_to_filterfunc.TransformFilterAst.visit_Name": {
            "name": "visit_Name",
            "location": 36,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "instadownload_pdf-master/test/instaloader_unittests.py": {
        "TestInstaloaderAnonymously.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.post_paging_test": {
            "name": "post_paging_test",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "Optional[Type]",
                    "dict",
                    "float"
                ]
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_download": {
            "name": "test_public_profile_download",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_paging": {
            "name": "test_public_profile_paging",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_profile_pic_download": {
            "name": "test_profile_pic_download",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_hashtag_download": {
            "name": "test_hashtag_download",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_hashtag_paging": {
            "name": "test_hashtag_paging",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_location_download": {
            "name": "test_location_download",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_location_paging": {
            "name": "test_location_paging",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_id_by_username": {
            "name": "test_get_id_by_username",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_id_private": {
            "name": "test_get_username_by_id_private",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_id_public": {
            "name": "test_get_username_by_id_public",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_get_username_by_id_empty": {
            "name": "test_get_username_by_id_empty",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_post_from_mediaid": {
            "name": "test_post_from_mediaid",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderAnonymously.test_public_profile_tagged_paging": {
            "name": "test_public_profile_tagged_paging",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_stories_download": {
            "name": "test_stories_download",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_private_profile_download": {
            "name": "test_private_profile_download",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_stories_paging": {
            "name": "test_stories_paging",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_highlights_paging": {
            "name": "test_highlights_paging",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_private_profile_paging": {
            "name": "test_private_profile_paging",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_feed_download": {
            "name": "test_feed_download",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_feed_paging": {
            "name": "test_feed_paging",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_saved_download": {
            "name": "test_saved_download",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_saved_paging": {
            "name": "test_saved_paging",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_test_login": {
            "name": "test_test_login",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_followees_and_stories": {
            "name": "test_followees_and_stories",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_followees": {
            "name": "test_get_followees",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_followers": {
            "name": "test_get_followers",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_get_likes": {
            "name": "test_get_likes",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstaloaderLoggedIn.test_explore_paging": {
            "name": "test_explore_paging",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
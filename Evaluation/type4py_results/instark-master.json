{
    "instark-master/docs/conf.py": {},
    "instark-master/instark/__init__.py": {},
    "instark-master/instark/__main__.py": {},
    "instark-master/instark/application/__init__.py": {},
    "instark-master/instark/application/domain/__init__.py": {},
    "instark-master/instark/application/domain/common/exceptions.py": {},
    "instark-master/instark/application/domain/common/query_parser.py": {
        "QueryParser.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "List[str]",
                    "str",
                    "float",
                    "int",
                    "Container"
                ]
            }
        },
        "QueryParser._default_join": {
            "name": "_default_join",
            "location": 70,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "QueryParser._parse_term": {
            "name": "_parse_term",
            "location": 80,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "term_tuple": [
                    "str",
                    "Callable[[str], T]",
                    "Optional[Union[Any, str]]",
                    "Optional[str]"
                ]
            }
        },
        "QueryParser._parse_like": {
            "name": "_parse_like",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "Union[str, bytes]"
                ],
                "insensitive": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/transaction.py": {
        "TransactionManager.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Iterable[str]"
                ]
            }
        },
        "MemoryTransactionManager.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "mypy.types.Instance"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Iterable[str]"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/types.py": {},
    "instark-master/instark/application/domain/common/__init__.py": {},
    "instark-master/instark/application/domain/common/auth/auth_provider.py": {
        "AuthProvider.setup": {
            "name": "setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "multinedb.models.user.User"
                ]
            }
        },
        "AuthProvider.user": {
            "name": "user",
            "location": 20,
            "return": [
                "user.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.roles": {
            "name": "roles",
            "location": 25,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.validate_roles": {
            "name": "validate_roles",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "required_roles": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AuthProvider.reference": {
            "name": "reference",
            "location": 33,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.setup": {
            "name": "setup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ]
            }
        },
        "StandardAuthProvider.user": {
            "name": "user",
            "location": 46,
            "return": [
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.roles": {
            "name": "roles",
            "location": 53,
            "return": [
                "bool",
                "set",
                "discord.abc.GuildChannel",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.validate_roles": {
            "name": "validate_roles",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required_roles": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/auth/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/common/auth/__init__.py": {},
    "instark-master/instark/application/domain/common/tenancy/tenant.py": {
        "Tenant.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tenant._normalize_slug": {
            "name": "_normalize_slug",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "slug": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/tenancy/tenant_provider.py": {
        "TenantProvider.setup": {
            "name": "setup",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "bool",
                    "List[Dict[str, int]]",
                    "dict",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TenantProvider.tenant": {
            "name": "tenant",
            "location": 16,
            "return": [
                "tenant.Tenant"
            ],
            "arguments": {
                "self": []
            }
        },
        "TenantProvider.location": {
            "name": "location",
            "location": 20,
            "return": [
                "Iterable[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TenantProvider.zone": {
            "name": "zone",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardTenantProvider.setup": {
            "name": "setup",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "StandardTenantProvider.tenant": {
            "name": "tenant",
            "location": 37,
            "return": [
                "Iterable[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/common/tenancy/__init__.py": {},
    "instark-master/instark/application/domain/models/channel.py": {
        "Channel.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/device.py": {
        "Device.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/subscription.py": {
        "Subscription.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/__init__.py": {},
    "instark-master/instark/application/domain/repositories/memory_model_repositories.py": {},
    "instark-master/instark/application/domain/repositories/__init__.py": {},
    "instark-master/instark/application/domain/services/delivery_service.py": {
        "DeliveryService.send": {
            "name": "send",
            "location": 6,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "locator": [
                    "Callable"
                ],
                "title": [
                    "Callable"
                ],
                "content": [
                    "Callable"
                ]
            }
        },
        "DeliveryService.broadcast": {
            "name": "broadcast",
            "location": 10,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "DeliveryService.subscribe": {
            "name": "subscribe",
            "location": 14,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "locator": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/services/memory_delivery_service.py": {
        "MemoryDeliveryService.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MemoryDeliveryService.send": {
            "name": "send",
            "location": 13,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "locator": [
                    "bytes",
                    "int",
                    "str"
                ],
                "title": [
                    "Callable"
                ],
                "content": [
                    "Callable"
                ]
            }
        },
        "MemoryDeliveryService.broadcast": {
            "name": "broadcast",
            "location": 17,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "MemoryDeliveryService.subscribe": {
            "name": "subscribe",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ],
                "locator": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/services/__init__.py": {},
    "instark-master/instark/application/informers/instark_informer.py": {
        "StandardInstarkInformer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "int",
                    "str"
                ],
                "channel_repository": [
                    "int"
                ],
                "message_repository": [
                    "int",
                    "str"
                ],
                "subscription_repository": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/application/informers/__init__.py": {},
    "instark-master/instark/application/managers/notification_manager.py": {
        "NotificationManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "int",
                    "ebl.corpus.domain.texChapter",
                    "Dict[str, str]"
                ],
                "device_repository": [
                    "float",
                    "bool",
                    "int"
                ],
                "message_repository": [
                    "float",
                    "bool",
                    "int"
                ],
                "delivery_service": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/registration_manager.py": {
        "RegistrationManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "int",
                    "bool",
                    "float"
                ],
                "message_repository": [
                    "int",
                    "bool",
                    "float"
                ],
                "subscription_repository": [
                    "int",
                    "bool",
                    "float"
                ],
                "delivery_service": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/session_manager.py": {
        "SessionManager.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "Callable",
                    "str",
                    "List[Dict]",
                    "bool"
                ],
                "auth_provider": [
                    "Callable",
                    "str",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "SessionManager.set_tenant": {
            "name": "set_tenant",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Iterable[Hashable]"
                ]
            }
        },
        "SessionManager.get_tenant": {
            "name": "get_tenant",
            "location": 17,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionManager.set_user": {
            "name": "set_user",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_dict": [
                    "bool",
                    "Optional[int]",
                    "User",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "src.domain.entity.user_persistence.UserPersistence"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/subscription_manager.py": {
        "SubscriptionManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "int",
                    "ebl.corpus.domain.texChapter",
                    "Dict[str, str]"
                ],
                "device_repository": [
                    "float",
                    "bool",
                    "int"
                ],
                "message_repository": [
                    "float",
                    "bool",
                    "int"
                ],
                "subscription_repository": [
                    "float",
                    "bool",
                    "int"
                ],
                "delivery_service": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/__init__.py": {},
    "instark-master/instark/core/__init__.py": {},
    "instark-master/instark/core/common/config.py": {},
    "instark-master/instark/core/common/__init__.py": {},
    "instark-master/instark/core/data/__init__.py": {},
    "instark-master/instark/core/data/sql/sql_model_repositories.py": {
        "SqlChannelRepository.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "auth_provider": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "connection_manager": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "parser": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "SqlChannelRepository._order_by": {
            "name": "_order_by",
            "location": 23,
            "return": [
                "str",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlDeviceRepository.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "auth_provider": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "connection_manager": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "parser": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "SqlDeviceRepository._order_by": {
            "name": "_order_by",
            "location": 37,
            "return": [
                "str",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlMessageRepository.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "auth_provider": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "connection_manager": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "parser": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "SqlSubscriptionRepository.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "auth_provider": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "connection_manager": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "parser": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        }
    },
    "instark-master/instark/core/data/sql/__init__.py": {},
    "instark-master/instark/core/data/sql/connection/connection_manager.py": {
        "DefaultConnectionManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Optional[bool]",
                    "bool",
                    "Optional[Any]",
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "instark-master/instark/core/data/sql/connection/sql_transaction_manager.py": {
        "SqlTransactionManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_manager": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "tenant_provider": [
                    "List[float]",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "SqlTransactionManager.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "List[int]",
                "set",
                "List[type]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Iterable[str]"
                ]
            }
        },
        "SqlTransactionManager._decorate_method": {
            "name": "_decorate_method",
            "location": 29,
            "return": [
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "SqlTransactionManager.__call__.TransactionClass.__getattribute__": {
            "name": "__getattribute__",
            "location": 19,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/core/data/sql/connection/__init__.py": {},
    "instark-master/instark/core/data/sql/migrations/001_initial_setup.py": {
        "Migration.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str, str]",
                    "Callable[[str], None]"
                ]
            }
        },
        "Migration._create_table": {
            "name": "_create_table",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Migration.schema_up": {
            "name": "schema_up",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.schema_down": {
            "name": "schema_down",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/core/data/sql/migrations/002_index_over_id.py": {
        "Migration.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str, str]",
                    "Callable[[str], None]"
                ]
            }
        },
        "Migration._create_table": {
            "name": "_create_table",
            "location": 12,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "List[List[str]]",
                    "Callable"
                ]
            }
        },
        "Migration.schema_up": {
            "name": "schema_up",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.schema_down": {
            "name": "schema_down",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/core/suppliers/__init__.py": {},
    "instark-master/instark/core/suppliers/common/__init__.py": {},
    "instark-master/instark/core/suppliers/common/connection/schema_connection.py": {
        "SchemaConnection.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dsn": [
                    "str",
                    "int"
                ]
            }
        },
        "SchemaConnection.open": {
            "name": "open",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaConnection.close": {
            "name": "close",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaConnection.execute": {
            "name": "execute",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str",
                    "Sequence[Any]",
                    "Dict[str, int]",
                    "type",
                    "Optional[Iterable[Any]]"
                ],
                "parameters": [
                    "str",
                    "Sequence[Any]",
                    "Dict[str, int]",
                    "type",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "SchemaConnection.select": {
            "name": "select",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str",
                    "Sequence[Any]",
                    "Dict[str, int]",
                    "type",
                    "Optional[Iterable[Any]]"
                ],
                "parameters": [
                    "str",
                    "Sequence[Any]",
                    "Dict[str, int]",
                    "type",
                    "Optional[Iterable[Any]]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/connection/__init__.py": {},
    "instark-master/instark/core/suppliers/common/tenancy/memory_tenant_supplier.py": {
        "MemoryTenantSupplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryTenantSupplier.get_tenant": {
            "name": "get_tenant",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "tenant_id": [
                    "str",
                    "int",
                    "transfer.models.TopicID"
                ]
            }
        },
        "MemoryTenantSupplier.search_tenants": {
            "name": "search_tenants",
            "location": 14,
            "return": [
                "dict",
                "zam_repondeur.models.Lecture",
                "str"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "Union[List[str], Tuple[str], None]",
                    "List[str]",
                    "Match"
                ]
            }
        },
        "MemoryTenantSupplier.ensure_tenant": {
            "name": "ensure_tenant",
            "location": 17,
            "return": [
                "str",
                "Callable",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[[], Any]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/tenancy/schema_tenant_supplier.py": {
        "SchemaTenantSupplier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Callable",
                    "dict",
                    "Callable[[str], None]"
                ],
                "zones": [
                    "str",
                    "Callable",
                    "dict",
                    "Callable[[str], None]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/tenancy/tenant_supplier.py": {
        "TenantSupplier.get_tenant": {
            "name": "get_tenant",
            "location": 7,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "tenant_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TenantSupplier.search_tenants": {
            "name": "search_tenants",
            "location": 11,
            "return": [
                "typing.List[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "list",
                    "int",
                    "bool",
                    "T",
                    "str"
                ]
            }
        },
        "TenantSupplier.ensure_tenant": {
            "name": "ensure_tenant",
            "location": 15,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Dict[str, Any]",
                    "Exception",
                    "int"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/tenancy/__init__.py": {},
    "instark-master/instark/core/suppliers/migration/migration_supplier.py": {
        "MigrationSupplier.migrate": {
            "name": "migrate",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "version": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MemoryMigrationSupplier.migrate": {
            "name": "migrate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "version": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/migration/schema_migration_supplier.py": {
        "SchemaMigrationSupplier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zones": [
                    "int",
                    "float",
                    "str"
                ],
                "tenant_supplier": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SchemaMigrationSupplier.migrate": {
            "name": "migrate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str",
                    "dict"
                ],
                "version": [
                    "str",
                    "bool",
                    "Optional[Callable[[None], None]]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/migration/__init__.py": {},
    "instark-master/instark/factories/base_factory.py": {
        "BaseFactory.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ]
            }
        },
        "BaseFactory.query_parser": {
            "name": "query_parser",
            "location": 27,
            "return": [
                "core_lib.core.parser.ParsingContext",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.standard_tenant_provider": {
            "name": "standard_tenant_provider",
            "location": 30,
            "return": [
                "str",
                "bytes",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.standard_auth_provider": {
            "name": "standard_auth_provider",
            "location": 33,
            "return": [
                "dict",
                "Sequence",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.memory_transaction_manager": {
            "name": "memory_transaction_manager",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.memory_device_repository": {
            "name": "memory_device_repository",
            "location": 41,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "BaseFactory.memory_channel_repository": {
            "name": "memory_channel_repository",
            "location": 49,
            "return": [
                "str",
                "int",
                "float",
                "jgikbase.idmapping.core.user.User.name"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "BaseFactory.memory_subscription_repository": {
            "name": "memory_subscription_repository",
            "location": 57,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "BaseFactory.memory_message_repository": {
            "name": "memory_message_repository",
            "location": 65,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "BaseFactory.memory_delivery_service": {
            "name": "memory_delivery_service",
            "location": 75,
            "return": [
                "bool",
                "int",
                "Union[str, Dict[str, str]]",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "Dict[str, Any]",
                "search.domain.DocMeta"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.registration_manager": {
            "name": "registration_manager",
            "location": 80,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "bool"
                ],
                "message_repository": [
                    "bool"
                ],
                "subscription_manager": [
                    "bool"
                ],
                "transaction_manager": [
                    "bool"
                ],
                "delivery_service": [
                    "bool"
                ]
            }
        },
        "BaseFactory.subscription_manager": {
            "name": "subscription_manager",
            "location": 91,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "device_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "message_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "subscription_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "delivery_service": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "transaction_manager": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "BaseFactory.notification_manager": {
            "name": "notification_manager",
            "location": 104,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository"
                ],
                "device_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository"
                ],
                "message_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository"
                ],
                "delivery_service": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository"
                ],
                "transaction_manager": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository"
                ]
            }
        },
        "BaseFactory.session_manager": {
            "name": "session_manager",
            "location": 115,
            "return": [
                "str",
                "Optional[int]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "application.domain.common.AuthProvider",
                    "application.domain.common.TenantProvider",
                    "bool",
                    "str"
                ],
                "auth_provider": [
                    "application.domain.common.AuthProvider",
                    "application.domain.common.TenantProvider",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseFactory.standard_instark_informer": {
            "name": "standard_instark_informer",
            "location": 123,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "int",
                    "bool"
                ],
                "channel_repository": [
                    "int",
                    "bool"
                ],
                "message_repository": [
                    "int",
                    "bool"
                ],
                "subscription_repository": [
                    "int",
                    "bool"
                ],
                "transaction_manager": [
                    "int",
                    "bool"
                ]
            }
        },
        "BaseFactory.memory_tenant_supplier": {
            "name": "memory_tenant_supplier",
            "location": 136,
            "return": [
                "str",
                "bytes",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.memory_migration_supplier": {
            "name": "memory_migration_supplier",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/factories/check_factory.py": {
        "CheckFactory.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "pricemonitor.config.Config",
                    "core.Config",
                    "core.common.Config",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CheckFactory.check_tenant_provider": {
            "name": "check_tenant_provider",
            "location": 20,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.check_auth_provider": {
            "name": "check_auth_provider",
            "location": 25,
            "return": [
                "bool",
                "Optional[zerver.models.Realm]",
                "Dict[str, Any]",
                "Union[int, float, complex]",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.memory_channel_repository": {
            "name": "memory_channel_repository",
            "location": 30,
            "return": [
                "bool",
                "salon.models.Stylist",
                "str",
                "allennlp.models.model.Model",
                "django.db.models.query.QuerySet",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "CheckFactory.memory_device_repository": {
            "name": "memory_device_repository",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "CheckFactory.memory_message_repository": {
            "name": "memory_message_repository",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "CheckFactory.memory_subscription_repository": {
            "name": "memory_subscription_repository",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "CheckFactory.check_tenant_supplier": {
            "name": "check_tenant_supplier",
            "location": 96,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/factories/sql_factory.py": {
        "SqlFactory.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "ezscrape.scraping.core.ScrapeConfig",
                    "core.common.Config",
                    "pricemonitor.config.Config"
                ]
            }
        },
        "SqlFactory.sql_query_parser": {
            "name": "sql_query_parser",
            "location": 22,
            "return": [
                "Optional[int]",
                "Dict[int, dict]",
                "Optional[Iterable[int]]",
                "Optional[static_frame.core.util.PathSpecifierOrFileLike]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlFactory.sql_connection_manager": {
            "name": "sql_connection_manager",
            "location": 25,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlFactory.sql_transaction_manager": {
            "name": "sql_transaction_manager",
            "location": 33,
            "return": [
                "bytes",
                "IO",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "connection_manager": [
                    "bool",
                    "TextIO",
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ],
                "tenant_provider": [
                    "bool",
                    "TextIO",
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SqlFactory.sql_channel_repository": {
            "name": "sql_channel_repository",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "src.main.core.repositories.window_repository.WindowRepository"
                ],
                "auth_provider": [
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "src.main.core.repositories.window_repository.WindowRepository"
                ],
                "connection_manager": [
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "src.main.core.repositories.window_repository.WindowRepository"
                ],
                "sql_parser": [
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "src.main.core.repositories.window_repository.WindowRepository"
                ]
            }
        },
        "SqlFactory.sql_device_repository": {
            "name": "sql_device_repository",
            "location": 47,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "bool"
                ],
                "auth_provider": [
                    "bool"
                ],
                "connection_manager": [
                    "bool"
                ],
                "sql_parser": [
                    "bool"
                ]
            }
        },
        "SqlFactory.sql_message_repository": {
            "name": "sql_message_repository",
            "location": 55,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "bool"
                ],
                "auth_provider": [
                    "bool"
                ],
                "connection_manager": [
                    "bool"
                ],
                "sql_parser": [
                    "bool"
                ]
            }
        },
        "SqlFactory.sql_subscription_repository": {
            "name": "sql_subscription_repository",
            "location": 63,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "bool"
                ],
                "auth_provider": [
                    "bool"
                ],
                "connection_manager": [
                    "bool"
                ],
                "sql_parser": [
                    "bool"
                ]
            }
        },
        "SqlFactory.schema_tenant_supplier": {
            "name": "schema_tenant_supplier",
            "location": 71,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlFactory.schema_migration_supplier": {
            "name": "schema_migration_supplier",
            "location": 77,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "tenant_supplier": [
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "jgikbase.idmapping.core.user.User.name"
                ]
            }
        },
        "SqlFactory.firebase_delivery_service": {
            "name": "firebase_delivery_service",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/factories/__init__.py": {},
    "instark-master/instark/factories/strategies/base.py": {},
    "instark-master/instark/factories/strategies/check.py": {},
    "instark-master/instark/factories/strategies/sql.py": {},
    "instark-master/instark/factories/strategies/__init__.py": {},
    "instark-master/instark/presenters/__init__.py": {},
    "instark-master/instark/presenters/delivery/__init__.py": {},
    "instark-master/instark/presenters/delivery/firebase/delivery_service.py": {
        "FirebaseDeliveryService.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_path": [
                    "List[int]",
                    "str"
                ]
            }
        },
        "FirebaseDeliveryService.send": {
            "name": "send",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "locator": [],
                "title": [],
                "content": [
                    "List[str]"
                ]
            }
        },
        "FirebaseDeliveryService.broadcast": {
            "name": "broadcast",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Callable"
                ],
                "title": [
                    "str",
                    "Callable"
                ],
                "content": [
                    "str",
                    "TextIO",
                    "bytes"
                ]
            }
        },
        "FirebaseDeliveryService.subscribe": {
            "name": "subscribe",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Optional[str]"
                ],
                "locator": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "instark-master/instark/presenters/delivery/firebase/__init__.py": {},
    "instark-master/instark/presenters/rest/doc.py": {
        "create_spec": {
            "name": "create_spec",
            "location": 8,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "_register_schemas": {
            "name": "_register_schemas",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Sequence[str]"
                ]
            }
        },
        "_register_paths": {
            "name": "_register_paths",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[str]",
                    "TextIO"
                ]
            }
        },
        "_append_path": {
            "name": "_append_path",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[str]"
                ],
                "endpoint": [
                    "str",
                    "List[str]"
                ],
                "schema": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_respond": {
            "name": "_respond",
            "location": 66,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "description": [
                    "str",
                    "Exception",
                    "bool"
                ],
                "schema": [
                    "str",
                    "Exception",
                    "bool"
                ],
                "status": [
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/rest.py": {
        "RestApplication.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ],
                "injector": [
                    "dict",
                    "ezscrape.scraping.core.ScrapeConfig",
                    "core.common.Config",
                    "pricemonitor.config.Config"
                ]
            }
        },
        "RestApplication._setup": {
            "name": "_setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApplication._bind": {
            "name": "_bind",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "resource": [
                    "str",
                    "Set[str]",
                    "dict",
                    "waterbutler.core.path.WaterButlerPath",
                    "bool",
                    "boto3.resources.factory.ec2.Instance",
                    "bytes"
                ]
            }
        },
        "RestApplication._create_api": {
            "name": "_create_api",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/presenters/rest/__init__.py": {},
    "instark-master/instark/presenters/rest/helpers/format.py": {
        "parse_domain": {
            "name": "parse_domain",
            "location": 6,
            "return": [
                "int",
                "str",
                "Mapping[str, Sequence[str]]",
                "bool"
            ],
            "arguments": {
                "filter": [
                    "Mapping",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/helpers/request.py": {},
    "instark-master/instark/presenters/rest/helpers/__init__.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/channel.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/device.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/entity.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/message.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/subscription.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/user.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/__init__.py": {},
    "instark-master/instark/presenters/rest/middleware/authenticate.py": {
        "authenticate_middleware_factory": {
            "name": "authenticate_middleware_factory",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "injector": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "extract_user": {
            "name": "extract_user",
            "location": 37,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]"
            ],
            "arguments": {
                "headers": [
                    "Dict[str, Any]",
                    "dict",
                    "aiohttp.web.Request",
                    "bool"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/middleware/errors.py": {
        "errors_middleware_factory": {
            "name": "errors_middleware_factory",
            "location": 9,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "injector": [
                    "str",
                    "injectark.Injectark",
                    "bool",
                    "List[object]"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/middleware/__init__.py": {
        "middlewares": {
            "name": "middlewares",
            "location": 7,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "injector": [
                    "injectark.Injectark",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/channel.py": {
        "ChannelResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/device.py": {
        "DeviceResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/message.py": {
        "MessageResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/resource.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[List[Any]]"
                ],
                "count_handler": [
                    "Callable",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "bytes"
                ],
                "search_handler": [
                    "Callable",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "bytes"
                ],
                "add_handler": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "List[str]"
                ],
                "delete_handler": [
                    "Callable",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "bytes"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/root.py": {
        "RootResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/subscription.py": {
        "SubscriptionResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/__init__.py": {},
    "instark-master/instark/presenters/shell/shell.py": {
        "Shell.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ],
                "injector": [
                    "Dict[str, Any]",
                    "config.Config",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "instark-master/instark/presenters/shell/__init__.py": {},
    "instark-master/tests/test_main.py": {},
    "instark-master/tests/__init__.py": {},
    "instark-master/tests/application/__init__.py": {},
    "instark-master/tests/application/domain/common/test_query_parser.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "test_query_parser_object_creation": {
            "name": "test_query_parser_object_creation",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_tuple": {
            "name": "test_query_parser_parse_tuple",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_query_parser_parse_single_term": {
            "name": "test_query_parser_parse_single_term",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_query_parser_default_join": {
            "name": "test_query_parser_default_join",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_multiple_terms": {
            "name": "test_query_parser_parse_multiple_terms",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_with_empty_list": {
            "name": "test_query_parser_with_empty_list",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_string_parser_with_lists_of_lists": {
            "name": "test_string_parser_with_lists_of_lists",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_query_parser_parse_like": {
            "name": "test_query_parser_parse_like",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_query_parser_parse_contains": {
            "name": "test_query_parser_parse_contains",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_query_parser_parse_single_term.expected": {
            "name": "expected",
            "location": 44,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_query_parser_default_join.expected": {
            "name": "expected",
            "location": 63,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_string_parser_with_lists_of_lists.expected": {
            "name": "expected",
            "location": 121,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Dict[str, Set[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "instark-master/tests/application/domain/common/test_transaction.py": {
        "transation_manager": {
            "name": "transation_manager",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern",
                "search.domain.Phrase"
            ],
            "arguments": {}
        },
        "test_transaction_manager_creation": {
            "name": "test_transaction_manager_creation",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "transation_manager": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_transaction_manager_methods": {
            "name": "test_transaction_manager_methods",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transaction_manager_call": {
            "name": "test_transaction_manager_call",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "transation_manager": []
            }
        }
    },
    "instark-master/tests/application/domain/common/__init__.py": {},
    "instark-master/tests/application/domain/common/auth/test_auth_provider.py": {
        "test_auth_provider_repository_methods": {
            "name": "test_auth_provider_repository_methods",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "loaded_auth_provider": {
            "name": "loaded_auth_provider",
            "location": 25,
            "return": [
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "auth_provider": [
                    "\"Step\"",
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "test_standard_auth_provider": {
            "name": "test_standard_auth_provider",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_provider_verify": {
            "name": "test_standard_auth_provider_verify",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ]
            }
        },
        "test_standard_auth_get_user": {
            "name": "test_standard_auth_get_user",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_roles_authenticated": {
            "name": "test_standard_auth_roles_authenticated",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": [
                    "authark.application.informers.authark_informer.AutharkInformer",
                    "str"
                ]
            }
        },
        "test_standard_auth_get_roles_no_authenticated": {
            "name": "test_standard_auth_get_roles_no_authenticated",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": [
                    "bool",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_standard_auth_validate_roles_correct_roles": {
            "name": "test_standard_auth_validate_roles_correct_roles",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": [
                    "str"
                ]
            }
        },
        "test_standard_auth_validate_roles_incorrect_roles": {
            "name": "test_standard_auth_validate_roles_incorrect_roles",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": [
                    "str"
                ]
            }
        },
        "test_standard_auth_raises_if_user_not_set": {
            "name": "test_standard_auth_raises_if_user_not_set",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        }
    },
    "instark-master/tests/application/domain/common/auth/test_user.py": {
        "user": {
            "name": "user",
            "location": 6,
            "return": [
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {}
        },
        "test_user_creation": {
            "name": "test_user_creation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "authark.application.domain.common.User",
                    "User"
                ]
            }
        },
        "test_user_default_attributes": {
            "name": "test_user_default_attributes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "authark.application.domain.common.User",
                    "Optional[str]"
                ]
            }
        },
        "test_user_attributes_from_dict": {
            "name": "test_user_attributes_from_dict",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/common/auth/__init__.py": {},
    "instark-master/tests/application/domain/common/tenancy/conftest.py": {
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 7,
            "return": [
                "int",
                "bytes",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/common/tenancy/test_tenant.py": {
        "tenant": {
            "name": "tenant",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_tenant_creation": {
            "name": "test_tenant_creation",
            "location": 10,
            "return": [],
            "arguments": {
                "tenant": []
            }
        },
        "test_tenant_default_attributes": {
            "name": "test_tenant_default_attributes",
            "location": 14,
            "return": [],
            "arguments": {
                "tenant": []
            }
        },
        "test_tenant_attributes_from_dict": {
            "name": "test_tenant_attributes_from_dict",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_tenant_normalize_slug": {
            "name": "test_tenant_normalize_slug",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_tenant_normalize_slug_invalid": {
            "name": "test_tenant_normalize_slug_invalid",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/common/tenancy/test_tenant_service.py": {
        "test_tenant_provider_methods": {
            "name": "test_tenant_provider_methods",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_standard_tenant_provider_instantiation": {
            "name": "test_standard_tenant_provider_instantiation",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "tenant_provider": []
            }
        },
        "test_standard_tenant_provider_setup": {
            "name": "test_standard_tenant_provider_setup",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "tenant_provider": [
                    "str"
                ]
            }
        },
        "test_standard_tenant_provider_get_tenant_not_set": {
            "name": "test_standard_tenant_provider_get_tenant_not_set",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "tenant_provider": [
                    "bool"
                ]
            }
        }
    },
    "instark-master/tests/application/domain/common/tenancy/__init__.py": {},
    "instark-master/tests/application/domain/models/test_channel.py": {
        "channel": {
            "name": "channel",
            "location": 6,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "test_channel_instantiation": {
            "name": "test_channel_instantiation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "Optional[Iterable[Any]]",
                    "str",
                    "estimark.application.domain.models.Entity",
                    "app.models.Game"
                ]
            }
        },
        "test_channel_attributes": {
            "name": "test_channel_attributes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "List[str]"
                ]
            }
        }
    },
    "instark-master/tests/application/domain/models/test_device.py": {
        "device": {
            "name": "device",
            "location": 6,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        },
        "test_device_instantiation": {
            "name": "test_device_instantiation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "device": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_device_attributes": {
            "name": "test_device_attributes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "device": []
            }
        }
    },
    "instark-master/tests/application/domain/models/test_device_channel.py": {
        "device_channel": {
            "name": "device_channel",
            "location": 6,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "viewer.models.Gallery",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "test_device_channel_instantiation": {
            "name": "test_device_channel_instantiation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "device_channel": [
                    "Optional[Iterable[Any]]",
                    "Callable",
                    "core.models.Recipe",
                    "str"
                ]
            }
        },
        "test_device_channel_attributes": {
            "name": "test_device_channel_attributes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "device_channel": []
            }
        }
    },
    "instark-master/tests/application/domain/models/test_message.py": {
        "message": {
            "name": "message",
            "location": 6,
            "return": [
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle"
            ],
            "arguments": {}
        },
        "test_message_instantiation": {
            "name": "test_message_instantiation",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_message_attributes": {
            "name": "test_message_attributes",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "lms.lmsdb.models.Comment"
                ]
            }
        }
    },
    "instark-master/tests/application/domain/models/__init__.py": {},
    "instark-master/tests/application/domain/services/test_delivery_service.py": {
        "test_delivery_service": {
            "name": "test_delivery_service",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_delivery_service_implementation": {
            "name": "test_memory_delivery_service_implementation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_delivery_service_send": {
            "name": "test_memory_delivery_service_send",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_delivery_service_broadcast": {
            "name": "test_memory_delivery_service_broadcast",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_delivery_service_subscribe": {
            "name": "test_memory_delivery_service_subscribe",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/services/__init__.py": {},
    "instark-master/tests/application/informers/test_instark_informer.py": {
        "parser": {
            "name": "parser",
            "location": 16,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {}
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 28,
            "return": [
                "Iterable[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "device_repository": {
            "name": "device_repository",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ],
                "parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ]
            }
        },
        "channel_repository": {
            "name": "channel_repository",
            "location": 49,
            "return": [
                "str",
                "search.domain.DocMeta",
                "models.Station",
                "allennlp.models.model.Model",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "message_repository": {
            "name": "message_repository",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ],
                "parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ]
            }
        },
        "subscription_repository": {
            "name": "subscription_repository",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ],
                "parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.AuthProvider",
                    "type"
                ]
            }
        },
        "instark_informer": {
            "name": "instark_informer",
            "location": 95,
            "return": [
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "device_repository": [
                    "int",
                    "List[Tuple[int, bytes]]",
                    "Message",
                    "str"
                ],
                "channel_repository": [
                    "int",
                    "List[Tuple[int, bytes]]",
                    "Message",
                    "str"
                ],
                "message_repository": [
                    "int",
                    "List[Tuple[int, bytes]]",
                    "Message",
                    "str"
                ],
                "subscription_repository": [
                    "int",
                    "List[Tuple[int, bytes]]",
                    "Message",
                    "str"
                ]
            }
        }
    },
    "instark-master/tests/application/informers/__init__.py": {},
    "instark-master/tests/application/managers/conftest.py": {
        "parser": {
            "name": "parser",
            "location": 13,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 25,
            "return": [
                "Iterable[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "device_repository": {
            "name": "device_repository",
            "location": 32,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "channel_repository": {
            "name": "channel_repository",
            "location": 38,
            "return": [
                "str",
                "int",
                "float",
                "jgikbase.idmapping.core.user.User.name"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "subscription_repository": {
            "name": "subscription_repository",
            "location": 44,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "message_repository": {
            "name": "message_repository",
            "location": 50,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "delivery_service": {
            "name": "delivery_service",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/application/managers/test_notification_coordinator.py": {
        "notification_manager": {
            "name": "notification_manager",
            "location": 13,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "channel_repository": [
                    "AsyncIterator",
                    "bool"
                ],
                "device_repository": [
                    "AsyncIterator",
                    "bool"
                ],
                "message_repository": [
                    "AsyncIterator",
                    "bool"
                ],
                "delivery_service": [
                    "AsyncIterator",
                    "bool"
                ]
            }
        },
        "test_notification_manager_instantiation": {
            "name": "test_notification_manager_instantiation",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "notification_manager": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager",
                    "pyats.topology.Device",
                    "common.ComponentFactory"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/test_registration_coordinator.py": {
        "registration_manager": {
            "name": "registration_manager",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "device_repository": [
                    "dict"
                ],
                "message_repository": [
                    "dict"
                ],
                "subscription_repository": [
                    "dict"
                ],
                "delivery_service": [
                    "dict"
                ]
            }
        },
        "test_registation_manager_instantiation": {
            "name": "test_registation_manager_instantiation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "registration_manager": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager",
                    "pyats.topology.Device",
                    "common.ComponentFactory"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/test_session_coordinator.py": {
        "auth_provider": {
            "name": "auth_provider",
            "location": 11,
            "return": [
                "str",
                "bytes",
                "Callable"
            ],
            "arguments": {}
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 16,
            "return": [
                "int",
                "bytes",
                "tuple"
            ],
            "arguments": {}
        },
        "session_manager": {
            "name": "session_manager",
            "location": 21,
            "return": [
                "str",
                "Optional[int]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "tenant_provider": [
                    "application.domain.common.AuthProvider",
                    "application.domain.common.TenantProvider",
                    "bool",
                    "str"
                ],
                "auth_provider": [
                    "application.domain.common.AuthProvider",
                    "application.domain.common.TenantProvider",
                    "bool",
                    "str"
                ]
            }
        },
        "test_session_manager_creation": {
            "name": "test_session_manager_creation",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.SessionManager",
                    "Callable"
                ]
            }
        },
        "test_session_manager_set_tenant": {
            "name": "test_session_manager_set_tenant",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.SessionManager",
                    "bool"
                ]
            }
        },
        "test_session_manager_get_tenant": {
            "name": "test_session_manager_get_tenant",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.SessionManager"
                ]
            }
        },
        "test_session_manager_set_user": {
            "name": "test_session_manager_set_user",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.SessionManager",
                    "str"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/test_subscription_coordinator.py": {
        "subscription_manager": {
            "name": "subscription_manager",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "channel_repository": [
                    "models.Station",
                    "Mapping[str, Any]",
                    "core.models.MyUser"
                ],
                "device_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "accounts.models.User",
                    "models.Station",
                    "core.models.MyUser"
                ],
                "message_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "subscription_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ],
                "delivery_service": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_subscription_manager_instantiation": {
            "name": "test_subscription_manager_instantiation",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "subscription_manager": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager",
                    "pyats.topology.Device",
                    "common.ComponentFactory"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/__init__.py": {},
    "instark-master/tests/core/__init__.py": {},
    "instark-master/tests/core/data/__init__.py": {},
    "instark-master/tests/core/data/sql/__init__.py": {},
    "instark-master/tests/core/data/sql/connection/conftest.py": {
        "connection_database": {
            "name": "connection_database",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "mock_pool": {
            "name": "mock_pool",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "connection_database": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ],
                "monkeypatch": [
                    "Callable",
                    "Optional[Exception]",
                    "bool",
                    "Optional[int]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "default_connection_manager": {
            "name": "default_connection_manager",
            "location": 60,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "connection_database": [
                    "str",
                    "float",
                    "Callable",
                    "List[str]"
                ],
                "mock_pool": [
                    "str",
                    "Callable"
                ]
            }
        },
        "mock_pool.MockTransaction.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_pool.MockConnection.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_pool.MockConnection.transaction": {
            "name": "transaction",
            "location": 36,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/tests/core/data/sql/connection/test_connection_manager.py": {
        "test_connection_manager_methods": {
            "name": "test_connection_manager_methods",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_connection_manager_instantiation": {
            "name": "test_default_connection_manager_instantiation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "default_connection_manager": [
                    "bool"
                ]
            }
        }
    },
    "instark-master/tests/core/data/sql/connection/test_sql_transaction_manager.py": {
        "connection_manager": {
            "name": "connection_manager",
            "location": 22,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "default_connection_manager": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 27,
            "return": [
                "Iterable[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "transaction_manager": {
            "name": "transaction_manager",
            "location": 34,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "connection_manager": [
                    "Dict[str, Any]"
                ],
                "tenant_provider": [
                    "Dict[str, Any]"
                ]
            }
        },
        "sample_repository": {
            "name": "sample_repository",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connection_manager": [
                    "str",
                    "blurr.core.record.Record",
                    "bool",
                    "ebl.fragmentarium.domain.annotation.Annotations",
                    "Callable"
                ],
                "tenant_provider": [
                    "str",
                    "blurr.core.record.Record",
                    "bool",
                    "ebl.fragmentarium.domain.annotation.Annotations",
                    "Callable"
                ]
            }
        },
        "dummy_manager": {
            "name": "dummy_manager",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_transaction_manager_instantiation": {
            "name": "test_transaction_manager_instantiation",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "transaction_manager": [
                    "Optional[Exception]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_order_by_channel": {
            "name": "test_order_by_channel",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "tracki.src.domain.entities.Shift",
                    "common.ScanLoadFn"
                ]
            }
        },
        "test_order_by_device": {
            "name": "test_order_by_device",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "SampleEntity.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dummy_manager.DummyManager.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_repository": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "instark-master/tests/core/data/sql/connection/__init__.py": {},
    "instark-master/tests/core/suppliers/__init__.py": {},
    "instark-master/tests/core/suppliers/common/__init__.py": {},
    "instark-master/tests/core/suppliers/common/connection/test_schema_connection.py": {
        "driver_connection": {
            "name": "driver_connection",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ]
            }
        },
        "schema_connection": {
            "name": "schema_connection",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "driver_connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_schema_connection_instantiation": {
            "name": "test_schema_connection_instantiation",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "schema_connection": [
                    "core.models.Recipe"
                ]
            }
        },
        "test_schema_connection_open": {
            "name": "test_schema_connection_open",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "schema_connection": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_schema_connection_close": {
            "name": "test_schema_connection_close",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "schema_connection": [
                    "bool"
                ]
            }
        },
        "test_schema_connection_execute": {
            "name": "test_schema_connection_execute",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "schema_connection": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_schema_connection_select": {
            "name": "test_schema_connection_select",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "schema_connection": [
                    "str",
                    "int"
                ]
            }
        },
        "driver_connection.mock_connect": {
            "name": "mock_connect",
            "location": 43,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "dsn": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "driver_connection.MockDriverCursor.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dsn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "driver_connection.MockDriverCursor.execute": {
            "name": "execute",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "List[dict]",
                    "Type[object]",
                    "int",
                    "bytes"
                ],
                "params": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "driver_connection.MockDriverCursor.fetchall": {
            "name": "fetchall",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverCursor.close": {
            "name": "close",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverConnection.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dsn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "driver_connection.MockDriverConnection.cursor": {
            "name": "cursor",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverConnection.commit": {
            "name": "commit",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverConnection.close": {
            "name": "close",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/tests/core/suppliers/common/connection/__init__.py": {},
    "instark-master/tests/core/suppliers/common/tenancy/test_tenant_supplier.py": {
        "test_tenant_supplier_methods": {
            "name": "test_tenant_supplier_methods",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_search": {
            "name": "test_memory_tenant_supplier_search",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_ensure_tenant": {
            "name": "test_memory_tenant_supplier_ensure_tenant",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/core/suppliers/common/tenancy/__init__.py": {},
    "instark-master/tests/core/suppliers/migration/test_migration_supplier.py": {
        "test_migration_supplier_methods": {
            "name": "test_migration_supplier_methods",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_migration_supplier_migrate": {
            "name": "test_memory_migration_supplier_migrate",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/core/suppliers/migration/test_schema_migration_supplier.py": {
        "mock_tenant_supplier": {
            "name": "mock_tenant_supplier",
            "location": 9,
            "return": [
                "str",
                "list",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "schema_migration_supplier": {
            "name": "schema_migration_supplier",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "mock_tenant_supplier": [
                    "int",
                    "django.core.files.uploadedfile.UploadedFile",
                    "static_frame.core.index_base.IndexBase",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_schema_migration_supplier_instantiation": {
            "name": "test_schema_migration_supplier_instantiation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_migration_supplier": [
                    "core.models.Recipe"
                ]
            }
        },
        "test_schema_migration_supplier_migrate": {
            "name": "test_schema_migration_supplier_migrate",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_migration_supplier": [
                    "str",
                    "float"
                ],
                "monkeypatch": []
            }
        },
        "test_schema_migration_supplier_migrate_missing": {
            "name": "test_schema_migration_supplier_migrate_missing",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_migration_supplier": [
                    "str",
                    "float"
                ]
            }
        },
        "test_schema_migration_supplier_migrate.mock_sql_migrate": {
            "name": "mock_sql_migrate",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "Optional[float]",
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "path": [
                    "Optional[float]",
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "schema": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "float"
                ],
                "context": [
                    "Optional[float]",
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "target_version": [
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "instark-master/tests/core/suppliers/migration/__init__.py": {},
    "instark-master/tests/factories/test_factories.py": {
        "test_factories": {
            "name": "test_factories",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/factories/__init__.py": {},
    "instark-master/tests/presenters/__init__.py": {},
    "instark-master/tests/presenters/delivery/__init__.py": {},
    "instark-master/tests/presenters/delivery/firebase/test_delivery_service.py": {
        "test_firebase_delivery_service": {
            "name": "test_firebase_delivery_service",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_firebase_delivery_service.mock_initialize_app": {
            "name": "mock_initialize_app",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "credentials": [
                    "bool",
                    "str",
                    "Dict[str, BinaryIO]"
                ]
            }
        },
        "test_firebase_delivery_service.MockCredentials.Certificate": {
            "name": "Certificate",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "certificate_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "test_firebase_delivery_service.MockMessaging.Notification": {
            "name": "Notification",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "body": [
                    "str",
                    "bool",
                    "bytes",
                    "Mapping[str, str]",
                    "int"
                ]
            }
        },
        "test_firebase_delivery_service.MockMessaging.Message": {
            "name": "Message",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bool"
                ],
                "token": [
                    "bool"
                ],
                "topic": [
                    "bool"
                ]
            }
        },
        "test_firebase_delivery_service.MockMessaging.send": {
            "name": "send",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_firebase_delivery_service.MockMessaging.subscribe_to_topic": {
            "name": "subscribe_to_topic",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "Iterator[str]",
                    "str",
                    "List[str]"
                ],
                "topic": [
                    "Iterator[str]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "instark-master/tests/presenters/delivery/firebase/__init__.py": {},
    "instark-master/tests/presenters/rest/conftest.py": {
        "app": {
            "name": "app",
            "location": 9,
            "return": [
                "bool",
                "str",
                "Optional[\"Frame\"]"
            ],
            "arguments": {
                "loop": [],
                "aiohttp_client": []
            }
        },
        "headers": {
            "name": "headers",
            "location": 25,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/presenters/rest/test_rest.py": {},
    "instark-master/tests/presenters/rest/xtest_base.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/presenters/rest/xtest_spec.py": {
        "spec": {
            "name": "spec",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "resource": {
            "name": "resource",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_spec": {
            "name": "test_spec",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "bool"
                ]
            }
        },
        "test_spec_resource_plugin_path_helper": {
            "name": "test_spec_resource_plugin_path_helper",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable"
                ],
                "resource": [
                    "str"
                ]
            }
        },
        "test_spec_resource_plugin_no_resource": {
            "name": "test_spec_resource_plugin_no_resource",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [],
                "resource": []
            }
        },
        "resource.MockResource.get": {
            "name": "get",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "resource.MockResource.post": {
            "name": "post",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/tests/presenters/rest/__init__.py": {},
    "instark-master/tests/presenters/rest/api/xtest_api.py": {},
    "instark-master/tests/presenters/rest/api/__init__.py": {},
    "instark-master/tests/presenters/shell/conftest.py": {
        "shell": {
            "name": "shell",
            "location": 9,
            "return": [
                "bool",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/presenters/shell/test_shell.py": {
        "test_shell_instantiation": {
            "name": "test_shell_instantiation",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "shell": [
                    "Optional[str]",
                    "bytes",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_shell_serve.MockRestApplication.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "injector": [
                    "dict"
                ]
            }
        }
    },
    "instark-master/tests/presenters/shell/__init__.py": {}
}
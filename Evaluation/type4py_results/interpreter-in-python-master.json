{
    "interpreter-in-python-master/monkey.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "interpreter-in-python-master/monkey/ast.py": {
        "Node.token_literal": {
            "name": "token_literal",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.token_literal": {
            "name": "token_literal",
            "location": 26,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifier.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetStatement.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullExpression.token_literal": {
            "name": "token_literal",
            "location": 101,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullExpression.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerLiteral.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixExpression.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfixExpression.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfExpression.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLiteral.__str__": {
            "name": "__str__",
            "location": 172,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.__str__": {
            "name": "__str__",
            "location": 191,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/monkey/evaluator.py": {
        "eval": {
            "name": "eval",
            "location": 7,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "node": [
                    "obj.Environment"
                ],
                "env": [
                    "obj.Environment",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "_eval_program": {
            "name": "_eval_program",
            "location": 72,
            "return": [
                "int",
                "Optional[float]",
                "str",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "program": [],
                "env": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_eval_block_statements": {
            "name": "_eval_block_statements",
            "location": 86,
            "return": [
                "bool",
                "Optional[Any]",
                "int",
                "obj.Object",
                "float"
            ],
            "arguments": {
                "block": [
                    "dict",
                    "\"LineageBuilder\"",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "env": [
                    "Sequence[Any]",
                    "float",
                    "Dict[str, Any]",
                    "Iterable[Any]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_is_error": {
            "name": "_is_error",
            "location": 99,
            "return": [
                "Type"
            ],
            "arguments": {
                "obj": [
                    "obj.Object",
                    "Union[str, bytes]"
                ]
            }
        },
        "_eval_prefix_expression": {
            "name": "_eval_prefix_expression",
            "location": 103,
            "return": [
                "tuple"
            ],
            "arguments": {
                "op": [
                    "str",
                    "dict"
                ],
                "right": [
                    "obj.Object",
                    "Callable",
                    "T"
                ]
            }
        },
        "_eval_bang_operator_expression": {
            "name": "_eval_bang_operator_expression",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "right": [
                    "obj.Obj",
                    "obj.Object",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "_eval_minux_prefix_operator_expression": {
            "name": "_eval_minux_prefix_operator_expression",
            "location": 123,
            "return": [
                "int",
                "tuple",
                "str",
                "obj.Obj",
                "Type"
            ],
            "arguments": {
                "right": [
                    "obj.Object"
                ]
            }
        },
        "_native_to_boolean_object": {
            "name": "_native_to_boolean_object",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "int"
                ]
            }
        },
        "_eval_infix_expression": {
            "name": "_eval_infix_expression",
            "location": 135,
            "return": [],
            "arguments": {
                "left": [
                    "obj.Object",
                    "obj.Obj"
                ],
                "op": [
                    "str",
                    "dict"
                ],
                "right": [
                    "obj.Object",
                    "obj.Obj"
                ]
            }
        },
        "_eval_integer_infix_expression": {
            "name": "_eval_integer_infix_expression",
            "location": 150,
            "return": [
                "int",
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "left": [
                    "float",
                    "str"
                ],
                "op": [
                    "str",
                    "Exception"
                ],
                "right": [
                    "float",
                    "str"
                ]
            }
        },
        "_eval_if_expression": {
            "name": "_eval_if_expression",
            "location": 175,
            "return": [
                "int",
                "float",
                "bytes"
            ],
            "arguments": {
                "ifexp": [],
                "env": []
            }
        },
        "_eval_expression": {
            "name": "_eval_expression",
            "location": 189,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "exps": [
                    "Dict[str, str]",
                    "Iterable[str]",
                    "bool"
                ],
                "env": []
            }
        },
        "_apply_function": {
            "name": "_apply_function",
            "location": 202,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ],
                "args": []
            }
        },
        "_extend_function_env": {
            "name": "_extend_function_env",
            "location": 210,
            "return": [],
            "arguments": {
                "fn": [
                    "Callable"
                ],
                "args": []
            }
        },
        "_unwrap_return_value": {
            "name": "_unwrap_return_value",
            "location": 220,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], List[Any]]",
                "dict",
                "List[int]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "obj": [
                    "obj.Object",
                    "int",
                    "Optional[str]",
                    "str",
                    "Dict[int, dict]"
                ]
            }
        },
        "_is_truthy": {
            "name": "_is_truthy",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "obj.Object",
                    "obj.Obj",
                    "Callable[..., None]",
                    "bool",
                    "str",
                    "Type"
                ]
            }
        }
    },
    "interpreter-in-python-master/monkey/lexer.py": {
        "is_letter": {
            "name": "is_letter",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "ch": [
                    "str"
                ]
            }
        },
        "is_digit": {
            "name": "is_digit",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "ch": [
                    "Optional[Iterable[Any]]",
                    "Optional[int]",
                    "List[str]",
                    "Callable",
                    "str",
                    "bool",
                    "T",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Lexer.next_token": {
            "name": "next_token",
            "location": 19,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_char": {
            "name": "_read_char",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._peek_char": {
            "name": "_peek_char",
            "location": 82,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_identifier": {
            "name": "_read_identifier",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_number": {
            "name": "_read_number",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._skip_whitespace": {
            "name": "_skip_whitespace",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/monkey/obj.py": {
        "Object.type": {
            "name": "type",
            "location": 15,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.type": {
            "name": "type",
            "location": 26,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.type": {
            "name": "type",
            "location": 37,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Null.type": {
            "name": "type",
            "location": 45,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Null.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnValue.type": {
            "name": "type",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnValue.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.type": {
            "name": "type",
            "location": 67,
            "return": [
                "str",
                "Sequence[str]",
                "List[Tuple[str, str]]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.get": {
            "name": "get",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, List[bytes]]"
                ]
            }
        },
        "Environment.set": {
            "name": "set",
            "location": 95,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "val": [
                    "str"
                ]
            }
        },
        "Environment.new_enclosed_environment": {
            "name": "new_enclosed_environment",
            "location": 99,
            "return": [
                "bool",
                "int",
                "Callable[[], bool]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.type": {
            "name": "type",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/monkey/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.errors": {
            "name": "errors",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._peek_error": {
            "name": "_peek_error",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "tok": []
            }
        },
        "Parser._next_token": {
            "name": "_next_token",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_statement": {
            "name": "_parse_statement",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_let_statement": {
            "name": "_parse_let_statement",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_return_statement": {
            "name": "_parse_return_statement",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._cur_token_is": {
            "name": "_cur_token_is",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Parser._peek_token_is": {
            "name": "_peek_token_is",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Parser._expect_peek": {
            "name": "_expect_peek",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Parser._peek_precedence": {
            "name": "_peek_precedence",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._cur_precedence": {
            "name": "_cur_precedence",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._register_prefix": {
            "name": "_register_prefix",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "token_type": [],
                "fn": []
            }
        },
        "Parser._register_infix": {
            "name": "_register_infix",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "token_type": [],
                "fn": []
            }
        },
        "Parser._parse_expression_statement": {
            "name": "_parse_expression_statement",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_expression": {
            "name": "_parse_expression",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "precedence": []
            }
        },
        "Parser._parse_identifier": {
            "name": "_parse_identifier",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_integer_literal": {
            "name": "_parse_integer_literal",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._no_prefix_parser_fn_error": {
            "name": "_no_prefix_parser_fn_error",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Parser._parse_prefix_expression": {
            "name": "_parse_prefix_expression",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_infix_expression": {
            "name": "_parse_infix_expression",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "left": []
            }
        },
        "Parser._parse_grouped_expression": {
            "name": "_parse_grouped_expression",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_boolean": {
            "name": "_parse_boolean",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_if_expression": {
            "name": "_parse_if_expression",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_block_statement": {
            "name": "_parse_block_statement",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_function_literal": {
            "name": "_parse_function_literal",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_function_parameters": {
            "name": "_parse_function_parameters",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser._parse_call_expression": {
            "name": "_parse_call_expression",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Parser._parse_call_arguments": {
            "name": "_parse_call_arguments",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/monkey/repl.py": {
        "start": {
            "name": "start",
            "location": 10,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "input": [
                    "IO",
                    "str",
                    "bool"
                ],
                "output": [
                    "IO",
                    "str",
                    "Iterable[TextIO]"
                ]
            }
        },
        "print_parser_errors": {
            "name": "print_parser_errors",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "output": [
                    "IO",
                    "Exception",
                    "bool",
                    "dict",
                    "List[Tuple[str, str]]"
                ],
                "errors": [
                    "List[str]",
                    "str",
                    "Optional[Callable]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "interpreter-in-python-master/monkey/token.py": {
        "lookup_ident": {
            "name": "lookup_ident",
            "location": 61,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "ident": [
                    "str",
                    "dict"
                ]
            }
        },
        "null": {
            "name": "null",
            "location": 65,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        }
    },
    "interpreter-in-python-master/monkey/__init__.py": {},
    "interpreter-in-python-master/test/test_ast.py": {
        "TestString.test_string": {
            "name": "test_string",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/test/test_evaluator.py": {
        "TestEvaluator.test_eval_integer_expression": {
            "name": "test_eval_integer_expression",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator._eval": {
            "name": "_eval",
            "location": 33,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "List[str]",
                    "bool",
                    "monkey.lexer.Lexer"
                ]
            }
        },
        "TestEvaluator.assert_integer_object": {
            "name": "assert_integer_object",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "expected": []
            }
        },
        "TestEvaluator.test_eval_boolean_expression": {
            "name": "test_eval_boolean_expression",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.assert_boolean_object": {
            "name": "assert_boolean_object",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "expected": []
            }
        },
        "TestEvaluator.test_bang_operator": {
            "name": "test_bang_operator",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_if_else_expression": {
            "name": "test_if_else_expression",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_return_statements": {
            "name": "test_return_statements",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_error_handling": {
            "name": "test_error_handling",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_let_statements": {
            "name": "test_let_statements",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_function_object": {
            "name": "test_function_object",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluator.test_function_application": {
            "name": "test_function_application",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/test/test_lexer.py": {
        "TestTokenizer.test_next_token": {
            "name": "test_next_token",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/test/test_parser.py": {
        "TestParser.check_parser_errors": {
            "name": "check_parser_errors",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "TestParser.test_let_statements": {
            "name": "test_let_statements",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_return_statements": {
            "name": "test_return_statements",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_identifier_expression": {
            "name": "test_identifier_expression",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_integer_literal": {
            "name": "test_integer_literal",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_prefix_expression": {
            "name": "test_parse_prefix_expression",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_infix_expression": {
            "name": "test_parse_infix_expression",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.assert_infix_expression": {
            "name": "assert_infix_expression",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [],
                "left": [],
                "operator": [],
                "right": []
            }
        },
        "TestParser.test_operator_precedence_parsing": {
            "name": "test_operator_precedence_parsing",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser._test_integer_lileral": {
            "name": "_test_integer_lileral",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [],
                "value": []
            }
        },
        "TestParser.assert_identifier": {
            "name": "assert_identifier",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [],
                "value": []
            }
        },
        "TestParser._test_boolean_lileral": {
            "name": "_test_boolean_lileral",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [],
                "value": []
            }
        },
        "TestParser.assert_literal_expression": {
            "name": "assert_literal_expression",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "exp": [],
                "expected": []
            }
        },
        "TestParser.test_boolean_expression": {
            "name": "test_boolean_expression",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_if_expression": {
            "name": "test_if_expression",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_function_literal_parsing": {
            "name": "test_function_literal_parsing",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_function_parameter_parsing": {
            "name": "test_function_parameter_parsing",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_call_expression_parsing": {
            "name": "test_call_expression_parsing",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "interpreter-in-python-master/test/__init__.py": {}
}
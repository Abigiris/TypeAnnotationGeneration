{
    "intro-python-master/code-challenges/seattle_greeting_challenge.py": {},
    "intro-python-master/code-challenges/seattle_greeting_solution.py": {
        "seattle_greeting": {
            "name": "seattle_greeting",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "intro-python-master/code-challenges/stores_list_code_challenge.py": {},
    "intro-python-master/code-challenges/stores_list_solution.py": {
        "store_has_music_experience": {
            "name": "store_has_music_experience",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "store": [
                    "str",
                    "int",
                    "Literal[True]",
                    "Literal[False]"
                ]
            }
        }
    },
    "intro-python-master/code-challenges/store_class_challenge.py": {},
    "intro-python-master/code-challenges/store_class_solution.py": {
        "StarbucksStore.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "address": [
                    "bool",
                    "int",
                    "Sequence",
                    "str"
                ],
                "is_open": [
                    "bool",
                    "int",
                    "Sequence",
                    "str"
                ]
            }
        },
        "StarbucksStore.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str",
                "Generator",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarbucksStore.description": {
            "name": "description",
            "location": 25,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarbucksStore.name": {
            "name": "name",
            "location": 33,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarbucksStore.address": {
            "name": "address",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarbucksStore.is_open": {
            "name": "is_open",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "intro-python-master/code-challenges/weather_challenge.py": {},
    "intro-python-master/code-challenges/weather_solution.py": {
        "get_weather_forecast": {
            "name": "get_weather_forecast",
            "location": 30,
            "return": [],
            "arguments": {
                "city": [],
                "country": [],
                "unit": []
            }
        },
        "TemperatureUnit.units": {
            "name": "units",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "intro-python-master/code-challenges/weather_solution_test.py": {},
    "intro-python-master/code-samples/booleans.py": {},
    "intro-python-master/code-samples/csv_tablib.py": {},
    "intro-python-master/code-samples/db.py": {},
    "intro-python-master/code-samples/docstrings.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "intro-python-master/code-samples/integers.py": {},
    "intro-python-master/code-samples/lambda.py": {
        "square": {
            "name": "square",
            "location": 5,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "intro-python-master/code-samples/models.py": {
        "Coffee.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[..., T]"
                ],
                "aroma": [
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]",
                    "List[str]"
                ],
                "body": [
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]",
                    "List[str]"
                ],
                "roast_profile": [
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]",
                    "List[str]"
                ],
                "is_starbucks": [
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Coffee.from_json": {
            "name": "from_json",
            "location": 32,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Coffee.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "intro-python-master/code-samples/mutability.py": {
        "change_names": {
            "name": "change_names",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "names_to_change": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence"
                ]
            }
        }
    },
    "intro-python-master/code-samples/scope.py": {
        "print_fav_song": {
            "name": "print_fav_song",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "intro-python-master/code-samples/strings.py": {},
    "intro-python-master/code-samples/code-samples/fahrenheit_to_celsius.py": {
        "fahrenheit_to_celsius": {
            "name": "fahrenheit_to_celsius",
            "location": 4,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "fahrenheit": [
                    "str",
                    "bool"
                ],
                "float_precision": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "intro-python-master/code-samples/code-samples/functions.py": {
        "get_env": {
            "name": "get_env",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "bool"
                ],
                "default_val": [
                    "str",
                    "List[str]",
                    "Iterable",
                    "Sequence[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "hello_world": {
            "name": "hello_world",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "greeting": [
                    "str",
                    "bool"
                ]
            }
        },
        "print_value": {
            "name": "print_value",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "fahrenheit_to_celsius": {
            "name": "fahrenheit_to_celsius",
            "location": 53,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "fahrenheit": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "intro-python-master/code-samples/code-samples/hell.py": {
        "greet_visitor": {
            "name": "greet_visitor",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "intro-python-master/code-samples/code-samples/hello_world.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "greeting": [
                    "str"
                ]
            }
        }
    },
    "intro-python-master/code-samples/code-samples/indentation.py": {
        "my_function": {
            "name": "my_function",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "my_function_2": {
            "name": "my_function_2",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "my_function_3": {
            "name": "my_function_3",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "intro-python-master/code-samples/code-samples/nihar.py": {},
    "intro-python-master/code-samples/code-samples/person.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "Optional[str]"
                ],
                "last_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Person.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.full_name": {
            "name": "full_name",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "intro-python-master/code-samples/code-samples/person_references.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "Optional[str]"
                ],
                "last_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Person.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.full_name": {
            "name": "full_name",
            "location": 26,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "intro-python-master/code-samples/code-samples/return_outside.py": {},
    "intro-python-master/code-samples/code-samples/rohit.py": {
        "fn_printhello_world": {
            "name": "fn_printhello_world",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "null_funtion": {
            "name": "null_funtion",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "intro-python-master/code-samples/code-samples/sunny.py": {
        "text_to_boolean": {
            "name": "text_to_boolean",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "intro-python-master/code-samples/code-samples/syntax.py": {},
    "intro-python-master/code-samples/code-samples/usernames.py": {},
    "intro-python-master/code-samples/code-samples/vars.py": {},
    "intro-python-master/code-samples/code-samples/db/mysql.py": {
        "connect": {
            "name": "connect",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "port": [
                    "str"
                ]
            }
        },
        "disconnect": {
            "name": "disconnect",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "query": {
            "name": "query",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "intro-python-master/code-samples/code-samples/db/oracle.py": {
        "connect": {
            "name": "connect",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "port": [
                    "str"
                ]
            }
        },
        "disconnect": {
            "name": "disconnect",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "query": {
            "name": "query",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "intro-python-master/seattle_mood/seattle_mood.py": {},
    "intro-python-master/seattle_mood/utils/strings.py": {
        "text_to_boolean": {
            "name": "text_to_boolean",
            "location": 1,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "intro-python-master/seattle_mood/utils/__init__.py": {},
    "intro-python-master/sunrise-sunset/api.py": {
        "get_location_from_city": {
            "name": "get_location_from_city",
            "location": 7,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "search_city": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "accounts.models.Account"
                ],
                "state": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_sunrise_sunset": {
            "name": "get_sunrise_sunset",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "lat": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "lng": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "sys": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "models.Slice"
                ]
            }
        }
    },
    "intro-python-master/sunrise-sunset/cities_import.py": {},
    "intro-python-master/sunrise-sunset/models.py": {
        "Location.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "city": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "Tuple[int, int]"
                ],
                "lat": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "Tuple[int, int]"
                ],
                "lng": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "Tuple[int, int]"
                ],
                "state": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "Tuple[int, int]"
                ],
                "timezone": [
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "Tuple[int, int]"
                ]
            }
        },
        "Location.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "intro-python-master/sunrise-sunset/sunrise-sunset.py": {}
}
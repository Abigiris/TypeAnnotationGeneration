{
    "iot-dashboard-master/backend/app/alembic/env.py": {
        "get_url": {
            "name": "get_url",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/alembic/versions/d4867f3a4c0a_first_revision.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/backend_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/celeryworker_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/initial_data.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/main.py": {},
    "iot-dashboard-master/backend/app/app/tests_pre_start.py": {
        "init": {
            "name": "init",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/utils.py": {
        "send_email": {
            "name": "send_email",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "dict",
                    "Union[int, str, bool]",
                    "Type[object]",
                    "List[str]"
                ],
                "subject_template": [
                    "str",
                    "BinaryIO",
                    "tensorhive.core.ssh.Username"
                ],
                "html_template": [
                    "str",
                    "BinaryIO",
                    "tensorhive.core.ssh.Username"
                ],
                "environment": [
                    "str",
                    "dict",
                    "Union[int, str, bool]",
                    "Type[object]",
                    "List[str]"
                ]
            }
        },
        "send_test_email": {
            "name": "send_test_email",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str"
                ]
            }
        },
        "send_reset_password_email": {
            "name": "send_reset_password_email",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "email": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "send_new_account_email": {
            "name": "send_new_account_email",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "username": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "generate_password_reset_token": {
            "name": "generate_password_reset_token",
            "location": 92,
            "return": [
                "float",
                "logging.LogRecord",
                "bool",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "verify_password_reset_token": {
            "name": "verify_password_reset_token",
            "location": 105,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/worker.py": {
        "test_celery": {
            "name": "test_celery",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/__init__.py": {},
    "iot-dashboard-master/backend/app/app/api/__init__.py": {},
    "iot-dashboard-master/backend/app/app/api/api_v1/api.py": {},
    "iot-dashboard-master/backend/app/app/api/api_v1/__init__.py": {},
    "iot-dashboard-master/backend/app/app/api/api_v1/endpoints/items.py": {
        "read_items": {
            "name": "read_items",
            "location": 16,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Mapping[str, str]"
                ],
                "skip": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Mapping[str, str]"
                ],
                "limit": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Mapping[str, str]"
                ],
                "current_user": [
                    "sqlalchemy.orm.Session",
                    "arxiv.users.domain.Session",
                    "abilian.core.models.subjects.User",
                    "labm8.py.sqlutil.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy"
                ]
            }
        },
        "create_item": {
            "name": "create_item",
            "location": 35,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {}
        },
        "update_item": {
            "name": "update_item",
            "location": 49,
            "return": [
                "List[Dict]",
                "int",
                "list",
                "List[object]",
                "models.Dominion"
            ],
            "arguments": {}
        },
        "read_user_me": {
            "name": "read_user_me",
            "location": 69,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]",
                "int",
                "zerver.models.Realm",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {}
        },
        "delete_item": {
            "name": "delete_item",
            "location": 87,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/api/api_v1/endpoints/login.py": {
        "login_access_token": {
            "name": "login_access_token",
            "location": 27,
            "return": [
                "str",
                "Optional[dict]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "db": [
                    "salon.models.Stylist",
                    "bytes",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "form_data": [
                    "salon.models.Stylist",
                    "bytes",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_token": {
            "name": "test_token",
            "location": 50,
            "return": [
                "Callable"
            ],
            "arguments": {
                "current_user": [
                    "app.db_models.user.User",
                    "ultron8.api.db_models.user.User",
                    "core.models.Recipe",
                    "User",
                    "str",
                    "arxiv.submission.User"
                ]
            }
        },
        "recover_password": {
            "name": "recover_password",
            "location": 58,
            "return": [
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "type"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "dict"
                ],
                "db": [
                    "str",
                    "int",
                    "django.db.models.Model",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "bool",
                    "limbic.emotion.models.LexiconLimbicModel"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 77,
            "return": [
                "str",
                "List[zerver.models.Stream]",
                "dict",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bool"
                ],
                "new_password": [
                    "str"
                ],
                "db": [
                    "str",
                    "dict",
                    "Optional[float]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/api/api_v1/endpoints/users.py": {
        "read_users": {
            "name": "read_users",
            "location": 20,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "db": [
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "skip": [
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "limit": [
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "current_user": [
                    "mediaarchiver.models.TypeVarAccount",
                    "app.db_models.user.User",
                    "Callable",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "id3c.db.session.DatabaseSession",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "bool"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 34,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "update_user_me": {
            "name": "update_user_me",
            "location": 58,
            "return": [
                "zam_repondeur.models.Lecture",
                "int",
                "set",
                "bool",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        },
        "read_user_me": {
            "name": "read_user_me",
            "location": 82,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "db": [
                    "app.db_models.user.User",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "zerver.models.Client"
                ],
                "current_user": [
                    "app.db_models.user.User",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "zerver.models.Client"
                ]
            }
        },
        "create_user_open": {
            "name": "create_user_open",
            "location": 93,
            "return": [
                "zam_repondeur.models.Lecture",
                "set",
                "bool",
                "user_models.User",
                "django.db.models.QuerySet",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent",
                "int"
            ],
            "arguments": {}
        },
        "read_user_by_id": {
            "name": "read_user_by_id",
            "location": 120,
            "return": [
                "zerver.models.Realm",
                "str",
                "abilian.core.models.subjects.User",
                "models.User",
                "zerver.models.UserProfile",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Optional[str]"
                ],
                "current_user": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "readicomponents.User"
                ],
                "db": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 139,
            "return": [
                "zam_repondeur.models.Lecture",
                "int",
                "set",
                "bool",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/api/api_v1/endpoints/utils.py": {
        "test_celery": {
            "name": "test_celery",
            "location": 14,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "msg": [
                    "routemaster.app.App"
                ],
                "current_user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_email": {
            "name": "test_email",
            "location": 25,
            "return": [
                "Mapping[str, Any]",
                "core.models.Recipe"
            ],
            "arguments": {
                "email_to": [
                    "pydantic.EmailStr",
                    "str",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ],
                "current_user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB",
                    "str",
                    "pathfinding_service.api.PFSApi",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/api/api_v1/endpoints/__init__.py": {},
    "iot-dashboard-master/backend/app/app/api/utils/db.py": {
        "get_db": {
            "name": "get_db",
            "location": 4,
            "return": [
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request",
                    "fastapi.Request",
                    "Set[str]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/api/utils/security.py": {
        "get_current_user": {
            "name": "get_current_user",
            "location": 18,
            "return": [
                "tracim.models.auth.User",
                "zam_repondeur.models.Lecture",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "metaswitch_tinder.database.models.User",
                "set"
            ],
            "arguments": {
                "db": [
                    "str",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "int",
                    "sqlalchemy.orm.Session",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "models.characters.character_base.Character"
                ],
                "token": [
                    "bool",
                    "zerver.models.Client",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "zerver.models.UserProfile",
                    "django.core.files.File"
                ]
            }
        },
        "get_current_active_user": {
            "name": "get_current_active_user",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "current_user": [
                    "app.models.User",
                    "app.models.user.User",
                    "str",
                    "arxiv.users.domain.User",
                    "app.contexts.AuthContext",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_current_active_superuser": {
            "name": "get_current_active_superuser",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "current_user": [
                    "app.models.user.User",
                    "app.models.User",
                    "app.contexts.AuthContext",
                    "arxiv.users.domain.User",
                    "str"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/api/utils/__init__.py": {},
    "iot-dashboard-master/backend/app/app/core/celery_app.py": {},
    "iot-dashboard-master/backend/app/app/core/config.py": {
        "getenv_boolean": {
            "name": "getenv_boolean",
            "location": 4,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "var_name": [
                    "str",
                    "bool"
                ],
                "default_value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "List[Dict[str, str]]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/core/jwt.py": {
        "create_access_token": {
            "name": "create_access_token",
            "location": 11,
            "return": [
                "str",
                "bool",
                "dict",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/core/security.py": {
        "verify_password": {
            "name": "verify_password",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "plain_password": [
                    "str",
                    "Callable"
                ],
                "hashed_password": [
                    "str",
                    "Callable"
                ]
            }
        },
        "get_password_hash": {
            "name": "get_password_hash",
            "location": 10,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/core/__init__.py": {},
    "iot-dashboard-master/backend/app/app/crud/item.py": {
        "get": {
            "name": "get",
            "location": 10,
            "return": [
                "bool",
                "Callable[[Dict], None]",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 14,
            "return": [
                "bool",
                "Callable[[Dict], None]",
                "int",
                "str",
                "zerver.models.UserProfile",
                "sqlalchemy.orm.session.Session"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "app.db_models.survey.Survey",
                    "tensorflow.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "get_multi_by_owner": {
            "name": "get_multi_by_owner",
            "location": 18,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[str, str, str]",
                "List[str]"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 30,
            "return": [
                "float",
                "bool",
                "Union[Sequence, 'SweepFixedValues']",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "dict",
                    "Callable[[Type, str], bool]",
                    "Optional[Dict[object, Any]]",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 39,
            "return": [
                "Callable",
                "zerver.models.Realm",
                "Union[Sequence, 'SweepFixedValues']",
                "bool",
                "list"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "users.models.JustfixUser",
                    "libkol.Session.Session",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "app.models.Article",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/crud/user.py": {
        "get": {
            "name": "get",
            "location": 11,
            "return": [
                "Callable[[Dict], None]",
                "Optional[str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "db_session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "storage.istorage.IStorage[storage.user.User]"
                ]
            }
        },
        "get_by_email": {
            "name": "get_by_email",
            "location": 15,
            "return": [
                "bool",
                "Callable[[Dict], None]",
                "str",
                "Callable[[], str]",
                "sqlalchemy.orm.session.Session",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "authenticate": {
            "name": "authenticate",
            "location": 19,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "db_session": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "is_active": {
            "name": "is_active",
            "location": 28,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "reader_server.types.User"
            ],
            "arguments": {
                "user": [
                    "app.models.user.User",
                    "app.models.user.UserInDB",
                    "str",
                    "users.models.JustfixUser",
                    "User",
                    "models.User",
                    "Optional[str]"
                ]
            }
        },
        "is_superuser": {
            "name": "is_superuser",
            "location": 32,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "reader_server.types.User"
            ],
            "arguments": {
                "user": [
                    "app.models.user.User",
                    "app.models.user.UserInDB",
                    "str",
                    "users.models.JustfixUser",
                    "User",
                    "models.User",
                    "Optional[str]"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 36,
            "return": [
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "str",
                "Callable[[], str]"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 40,
            "return": [
                "core.models.User",
                "user_models.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "aiolambda.Maybe[auth.user.User]",
                "database.User"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "app.db.session.Session",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 53,
            "return": [
                "core.models.User",
                "zam_repondeur.models.Lecture",
                "user_models.User",
                "aiolambda.Maybe[auth.user.User]",
                "database.User",
                "str",
                "lms.lmsdb.models.User"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "app.db.session.Session",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/crud/__init__.py": {},
    "iot-dashboard-master/backend/app/app/db/base.py": {},
    "iot-dashboard-master/backend/app/app/db/base_class.py": {
        "CustomBase.__tablename__": {
            "name": "__tablename__",
            "location": 7,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/db/init_db.py": {
        "init_db": {
            "name": "init_db",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "db_session": [
                    "bool",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/db/session.py": {},
    "iot-dashboard-master/backend/app/app/db/__init__.py": {},
    "iot-dashboard-master/backend/app/app/db_models/item.py": {},
    "iot-dashboard-master/backend/app/app/db_models/user.py": {},
    "iot-dashboard-master/backend/app/app/db_models/__init__.py": {},
    "iot-dashboard-master/backend/app/app/models/item.py": {},
    "iot-dashboard-master/backend/app/app/models/msg.py": {},
    "iot-dashboard-master/backend/app/app/models/token.py": {},
    "iot-dashboard-master/backend/app/app/models/user.py": {},
    "iot-dashboard-master/backend/app/app/models/__init__.py": {},
    "iot-dashboard-master/backend/app/app/tests/conftest.py": {
        "server_api": {
            "name": "server_api",
            "location": 7,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {}
        },
        "superuser_token_headers": {
            "name": "superuser_token_headers",
            "location": 12,
            "return": [
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/tests/__init__.py": {},
    "iot-dashboard-master/backend/app/app/tests/api/__init__.py": {},
    "iot-dashboard-master/backend/app/app/tests/api/api_v1/test_celery.py": {
        "test_celery_worker_test": {
            "name": "test_celery_worker_test",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "Dict[str, str]",
                    "str",
                    "List[List[int]]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/tests/api/api_v1/test_items.py": {
        "test_create_item": {
            "name": "test_create_item",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "bool"
                ]
            }
        },
        "test_read_item": {
            "name": "test_read_item",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/tests/api/api_v1/test_login.py": {
        "test_get_access_token": {
            "name": "test_get_access_token",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_access_token": {
            "name": "test_use_access_token",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "Dict[str, str]",
                    "tests.clienMDMClient",
                    "List[List[int]]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/tests/api/api_v1/test_users.py": {
        "test_get_users_superuser_me": {
            "name": "test_get_users_superuser_me",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_user_new_email": {
            "name": "test_create_user_new_email",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "List[List[int]]"
                ]
            }
        },
        "test_get_existing_user": {
            "name": "test_get_existing_user",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "test_create_user_existing_username": {
            "name": "test_create_user_existing_username",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": []
            }
        },
        "test_create_user_by_normal_user": {
            "name": "test_create_user_by_normal_user",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_retrieve_users": {
            "name": "test_retrieve_users",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "superuser_token_headers": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/tests/api/api_v1/__init__.py": {},
    "iot-dashboard-master/backend/app/app/tests/crud/test_item.py": {
        "test_create_item": {
            "name": "test_create_item",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_item": {
            "name": "test_update_item",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_delete_item": {
            "name": "test_delete_item",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/tests/crud/test_user.py": {
        "test_create_user": {
            "name": "test_create_user",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_authenticate_user": {
            "name": "test_authenticate_user",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_authenticate_user": {
            "name": "test_not_authenticate_user",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_active": {
            "name": "test_check_if_user_is_active",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_active_inactive": {
            "name": "test_check_if_user_is_active_inactive",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_superuser": {
            "name": "test_check_if_user_is_superuser",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_if_user_is_superuser_normal_user": {
            "name": "test_check_if_user_is_superuser_normal_user",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/tests/crud/__init__.py": {},
    "iot-dashboard-master/backend/app/app/tests/utils/item.py": {
        "create_random_item": {
            "name": "create_random_item",
            "location": 8,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "cmk.utils.type_defs.HostName",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "int",
                "models.User"
            ],
            "arguments": {
                "owner_id": [
                    "app.db_models.survey.Survey",
                    "str",
                    "Union[str, None]"
                ]
            }
        }
    },
    "iot-dashboard-master/backend/app/app/tests/utils/user.py": {
        "user_authentication_headers": {
            "name": "user_authentication_headers",
            "location": 10,
            "return": [
                "tests.mock_vws.utils.Endpoint",
                "dict"
            ],
            "arguments": {
                "server_api": [
                    "str",
                    "IO[bytes]"
                ],
                "email": [
                    "str",
                    "dict"
                ],
                "password": [
                    "str",
                    "dict"
                ]
            }
        },
        "create_random_user": {
            "name": "create_random_user",
            "location": 20,
            "return": [
                "zam_repondeur.models.Lecture",
                "app.models.user.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "core.models.UserPreferences"
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/tests/utils/utils.py": {
        "random_lower_string": {
            "name": "random_lower_string",
            "location": 9,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {}
        },
        "get_server_api": {
            "name": "get_server_api",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_superuser_token_headers": {
            "name": "get_superuser_token_headers",
            "location": 18,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {}
        }
    },
    "iot-dashboard-master/backend/app/app/tests/utils/__init__.py": {}
}
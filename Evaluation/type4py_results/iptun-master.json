{
    "iptun-master/iptun/client.py": {
        "src_addr": {
            "name": "src_addr",
            "location": 7,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "packet": [
                    "bytes",
                    "IO[bytes]",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "on_response": {
            "name": "on_response",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tun_dev": [
                    "str",
                    "TextIO"
                ],
                "server_sock": [
                    "dict",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        }
    },
    "iptun-master/iptun/dns.py": {
        "_data_to_dns_name": {
            "name": "_data_to_dns_name",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "Iterable[bytes]"
                ]
            }
        },
        "_max_data_len": {
            "name": "_max_data_len",
            "location": 44,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "dns_suffix": [
                    "list",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "decode_data_from_request": {
            "name": "decode_data_from_request",
            "location": 50,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "dns_rec": [
                    "dnslib.DNSRecord",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "bytes"
                ],
                "dns_suffix": [
                    "Dict[int, str]",
                    "List[str]",
                    "Optional[List[Any]]",
                    "Tuple[float, float, float, float]",
                    "Type[T]",
                    "bytes"
                ]
            }
        },
        "encode_data_to_response": {
            "name": "encode_data_to_response",
            "location": 58,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "record": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes",
                    "Mapping[str, Any]"
                ]
            }
        },
        "EncodeDataToRequest.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns_suffix": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "EncodeDataToRequest.to_dns_query": {
            "name": "to_dns_query",
            "location": 22,
            "return": [
                "bytes",
                "Tuple[str, int, Dict[str, str]]",
                "List[Callable]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Optional[Any]"
                ]
            }
        },
        "EncodeDataToRequest.to_str": {
            "name": "to_str",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Callable[[Any], None]",
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "EncodeDataToRequest._ensure_data_fits": {
            "name": "_ensure_data_fits",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "iptun-master/iptun/ip.py": {
        "packet_version": {
            "name": "packet_version",
            "location": 26,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "packet": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "parse_packet": {
            "name": "parse_packet",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "src_addr": {
            "name": "src_addr",
            "location": 41,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "packet": [
                    "bytes",
                    "IO[bytes]",
                    "dict"
                ]
            }
        },
        "set_src_addr": {
            "name": "set_src_addr",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "str",
                    "List[str]",
                    "Callable"
                ],
                "src_addr": [
                    "str"
                ]
            }
        },
        "dst_addr": {
            "name": "dst_addr",
            "location": 54,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "packet": [
                    "bytes",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "set_dst_addr": {
            "name": "set_dst_addr",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "packet": [
                    "bytearray",
                    "float",
                    "int",
                    "Callable"
                ],
                "dst_addr": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "iptun-master/iptun/logs.py": {
        "setup": {
            "name": "setup",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "logging.Logger",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "iptun-master/iptun/net.py": {
        "make_ip_range": {
            "name": "make_ip_range",
            "location": 46,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "cidr_addrs": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "AddrAllocator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_range": [
                    "int",
                    "float",
                    "Iterable[T]",
                    "AsyncIterator[T]"
                ]
            }
        },
        "AddrAllocator.has_available_addrs": {
            "name": "has_available_addrs",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddrAllocator.new": {
            "name": "new",
            "location": 30,
            "return": [
                "str",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "dict",
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "AddrAllocator.release": {
            "name": "release",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "NatRecord.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_tun_ip": [
                    "str",
                    "float"
                ],
                "server_tun_ip": [
                    "str",
                    "float"
                ],
                "client_addr": [
                    "str",
                    "float"
                ]
            }
        },
        "NAT.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NAT.out": {
            "name": "out",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "str",
                    "bool",
                    "list",
                    "Dict[str, Any]"
                ],
                "server_tun_ip": [
                    "str",
                    "bool",
                    "list",
                    "Dict[str, Any]"
                ],
                "client_addr": [
                    "str",
                    "bool"
                ]
            }
        },
        "NAT.in_": {
            "name": "in_",
            "location": 80,
            "return": [
                "Callable",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "NAT.record_by_server_tun_ip": {
            "name": "record_by_server_tun_ip",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "server_tun_ip": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "iptun-master/iptun/server.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "iptun-master/iptun/tcp.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bind_port": [
                    "int",
                    "bool",
                    "float"
                ],
                "bind_addr": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Server.route_traffic_to": {
            "name": "route_traffic_to",
            "location": 23,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tun_dev": [
                    "str"
                ]
            }
        },
        "Server.start": {
            "name": "start",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.on_tun_recv": {
            "name": "on_tun_recv",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.on_packet": {
            "name": "on_packet",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "str"
                ],
                "client_addr": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "iptun-master/iptun/tun.py": {
        "create_vnet_device": {
            "name": "create_vnet_device",
            "location": 36,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "set_addr": {
            "name": "set_addr",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "dev": [
                    "bool",
                    "float"
                ],
                "addr": [
                    "str",
                    "int"
                ]
            }
        },
        "Device.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "addr": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Device.up": {
            "name": "up",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.read": {
            "name": "read",
            "location": 25,
            "return": [
                "str",
                "bool",
                "List[float]",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Device.write": {
            "name": "write",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "iptun-master/iptun/__init__.py": {},
    "iptun-master/tests/unit/test_address_allocator.py": {
        "describe_AddrAllocator": {
            "name": "describe_AddrAllocator",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new": {
            "name": "describe_new",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_has_available_addrs": {
            "name": "describe_has_available_addrs",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_available_addresses": {
            "name": "describe_when_ip_range_has_available_addresses",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_no_available_addresses": {
            "name": "describe_when_ip_range_has_no_available_addresses",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_has_available_addrs.describe_when_ip_range_has_no_available_addresses": {
            "name": "describe_when_ip_range_has_no_available_addresses",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_available_addresses.it_returns_first_available_ip_address": {
            "name": "it_returns_first_available_ip_address",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_available_addresses.describe_when_client_ids_match": {
            "name": "describe_when_client_ids_match",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_available_addresses.describe_when_client_ids_differ": {
            "name": "describe_when_client_ids_differ",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_no_available_addresses.it_raises_exception": {
            "name": "it_raises_exception",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_has_available_addrs.describe_when_ip_range_has_no_available_addresses.it_returns_false": {
            "name": "it_returns_false",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_available_addresses.describe_when_client_ids_match.it_returns_same_ips": {
            "name": "it_returns_same_ips",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_AddrAllocator.describe_new.describe_when_ip_range_has_available_addresses.describe_when_client_ids_differ.it_returns_different_ips": {
            "name": "it_returns_different_ips",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iptun-master/tests/unit/test_data_encoding_to_dns.py": {
        "describe_max_data_len": {
            "name": "describe_max_data_len",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_data_to_dns_name": {
            "name": "describe_data_to_dns_name",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_decode_data_from_request": {
            "name": "describe_decode_data_from_request",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_max_data_len.it_exludes_dns_name_suffix_and_dots_from_max_dns_name_length": {
            "name": "it_exludes_dns_name_suffix_and_dots_from_max_dns_name_length",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_data_to_dns_name.it_returns_base32_encoded_data_and_split_into_chunks_with_max_63_symbols": {
            "name": "it_returns_base32_encoded_data_and_split_into_chunks_with_max_63_symbols",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_decode_data_from_request.describe_when_valid_dns_query_is_provided": {
            "name": "describe_when_valid_dns_query_is_provided",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_decode_data_from_request.describe_when_valid_dns_query_is_provided.it_decodes_data_from_query_name": {
            "name": "it_decodes_data_from_query_name",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iptun-master/tests/unit/test_ip_utils.py": {
        "describe_src_addr": {
            "name": "describe_src_addr",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_set_src_addr": {
            "name": "describe_set_src_addr",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_set_dst_addr": {
            "name": "describe_set_dst_addr",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_src_addr.it_extracts_source_address_from_ip_packet": {
            "name": "it_extracts_source_address_from_ip_packet",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_set_src_addr.it_changes_ip_packet_source_address": {
            "name": "it_changes_ip_packet_source_address",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_set_dst_addr.it_changes_ip_packet_destination_address": {
            "name": "it_changes_ip_packet_destination_address",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iptun-master/tests/unit/test_nat.py": {
        "describe_NAT": {
            "name": "describe_NAT",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_NAT.describe_out": {
            "name": "describe_out",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_NAT.describe_record_by_server_tun_ip": {
            "name": "describe_record_by_server_tun_ip",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_NAT.describe_out.it_changes_packet_source_address_to_server_tun_ip": {
            "name": "it_changes_packet_source_address_to_server_tun_ip",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_NAT.describe_record_by_server_tun_ip.describe_when_record_by_such_ip_exists": {
            "name": "describe_when_record_by_such_ip_exists",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_NAT.describe_record_by_server_tun_ip.describe_when_record_by_such_ip_exists.it_returns_that_record": {
            "name": "it_returns_that_record",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "iptun-master/tests/unit/test_net_utils.py": {
        "describe_make_ip_range": {
            "name": "describe_make_ip_range",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_make_ip_range.it_returns_list_of_ips_in_the_specified_subnet_without_first_two_addresses": {
            "name": "it_returns_list_of_ips_in_the_specified_subnet_without_first_two_addresses",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
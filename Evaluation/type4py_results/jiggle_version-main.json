{
    "jiggle_version-main/build.py": {
        "check_python_version": {
            "name": "check_python_version",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "compile_py": {
            "name": "compile_py",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_project_name": {
            "name": "validate_project_name",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pipenv_installs": {
            "name": "pipenv_installs",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gitchangelog": {
            "name": "gitchangelog",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "git_leaks": {
            "name": "git_leaks",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "git_secrets": {
            "name": "git_secrets",
            "location": 214,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pyupgrade": {
            "name": "pyupgrade",
            "location": 235,
            "return": [
                "Type",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "isort": {
            "name": "isort",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "format_tests": {
            "name": "format_tests",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "formatting_check": {
            "name": "formatting_check",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pyroma": {
            "name": "pyroma",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "docker_lint": {
            "name": "docker_lint",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "spell_check": {
            "name": "spell_check",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "yaml_lint": {
            "name": "yaml_lint",
            "location": 326,
            "return": [
                "str",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "count_lines_of_code": {
            "name": "count_lines_of_code",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "liccheck": {
            "name": "liccheck",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pyright": {
            "name": "pyright",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "flake8": {
            "name": "flake8",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bandit": {
            "name": "bandit",
            "location": 376,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "mccabe": {
            "name": "mccabe",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dodgy_check": {
            "name": "dodgy_check",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "precommit": {
            "name": "precommit",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "openapi_check": {
            "name": "openapi_check",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint_tests": {
            "name": "lint_tests",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tox": {
            "name": "tox",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pytest": {
            "name": "pytest",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "coverage_report": {
            "name": "coverage_report",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "safety": {
            "name": "safety",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sonar": {
            "name": "sonar",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vulture": {
            "name": "vulture",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_manifest": {
            "name": "check_manifest",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "jiggle_version": {
            "name": "jiggle_version",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parallel_checks": {
            "name": "parallel_checks",
            "location": 658,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "slow": {
            "name": "slow",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fast_package": {
            "name": "fast_package",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "just_package": {
            "name": "just_package",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_package": {
            "name": "check_package",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_package": {
            "name": "upload_package",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pre_commit_hook": {
            "name": "pre_commit_hook",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pre_push_hook": {
            "name": "pre_push_hook",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register_scripts": {
            "name": "register_scripts",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reports": {
            "name": "reports",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/jiggle_version_self.py": {},
    "jiggle_version-main/dead_code/build.py": {
        "load_config": {
            "name": "load_config",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "initialize_folders": {
            "name": "initialize_folders",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "is_windows": {
            "name": "is_windows",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "is_powershell": {
            "name": "is_powershell",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "is_cmd_exe": {
            "name": "is_cmd_exe",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "check_command_exists": {
            "name": "check_command_exists",
            "location": 209,
            "return": [],
            "arguments": {
                "command": [],
                "throw_on_missing": [],
                "exit_on_missing": []
            }
        },
        "check_is_aws": {
            "name": "check_is_aws",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 348,
            "return": [],
            "arguments": {
                "what": []
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 357,
            "return": [],
            "arguments": {
                "task_name": [],
                "expect_file": []
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 377,
            "return": [],
            "arguments": {
                "name": [],
                "expect_files": []
            }
        },
        "hash_it": {
            "name": "hash_it",
            "location": 403,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "skip_if_this_file_does_not_change": {
            "name": "skip_if_this_file_does_not_change",
            "location": 413,
            "return": [],
            "arguments": {
                "name": [],
                "file": []
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 452,
            "return": [],
            "arguments": {
                "command": [],
                "env": []
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 467,
            "return": [],
            "arguments": {
                "command": [],
                "ignore_error": [],
                "env": []
            }
        },
        "say_and_exit": {
            "name": "say_and_exit",
            "location": 497,
            "return": [],
            "arguments": {
                "message": [],
                "source": []
            }
        },
        "secrets_ini_or_env": {
            "name": "secrets_ini_or_env",
            "location": 510,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "timed": {
            "name": "timed",
            "location": 532,
            "return": [],
            "arguments": {}
        },
        "is_it_worse": {
            "name": "is_it_worse",
            "location": 552,
            "return": [],
            "arguments": {
                "task_name": [],
                "current_rows": [],
                "margin": []
            }
        },
        "clean_old_files": {
            "name": "clean_old_files",
            "location": 580,
            "return": [],
            "arguments": {}
        },
        "prep_print_simple": {
            "name": "prep_print_simple",
            "location": 600,
            "return": [],
            "arguments": {
                "command": [],
                "no_project": []
            }
        },
        "check_python_version": {
            "name": "check_python_version",
            "location": 614,
            "return": [],
            "arguments": {}
        },
        "compile_py": {
            "name": "compile_py",
            "location": 630,
            "return": [],
            "arguments": {}
        },
        "do_compile_py": {
            "name": "do_compile_py",
            "location": 637,
            "return": [],
            "arguments": {}
        },
        "validate_project_name": {
            "name": "validate_project_name",
            "location": 653,
            "return": [],
            "arguments": {}
        },
        "pipenv_installs": {
            "name": "pipenv_installs",
            "location": 678,
            "return": [],
            "arguments": {}
        },
        "gitchangelog": {
            "name": "gitchangelog",
            "location": 708,
            "return": [],
            "arguments": {}
        },
        "spell_check": {
            "name": "spell_check",
            "location": 727,
            "return": [],
            "arguments": {}
        },
        "dist_is_editable": {
            "name": "dist_is_editable",
            "location": 777,
            "return": [],
            "arguments": {}
        },
        "register_scripts": {
            "name": "register_scripts",
            "location": 789,
            "return": [],
            "arguments": {}
        },
        "openapi_check": {
            "name": "openapi_check",
            "location": 813,
            "return": [],
            "arguments": {}
        },
        "count_lines_of_code": {
            "name": "count_lines_of_code",
            "location": 853,
            "return": [],
            "arguments": {}
        },
        "total_loc": {
            "name": "total_loc",
            "location": 860,
            "return": [],
            "arguments": {}
        },
        "do_count_lines_of_code": {
            "name": "do_count_lines_of_code",
            "location": 876,
            "return": [],
            "arguments": {}
        },
        "git_leaks": {
            "name": "git_leaks",
            "location": 913,
            "return": [],
            "arguments": {}
        },
        "git_secrets": {
            "name": "git_secrets",
            "location": 923,
            "return": [],
            "arguments": {}
        },
        "do_git_secrets": {
            "name": "do_git_secrets",
            "location": 930,
            "return": [],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 985,
            "return": [],
            "arguments": {}
        },
        "pyupgrade": {
            "name": "pyupgrade",
            "location": 998,
            "return": [],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 1022,
            "return": [],
            "arguments": {}
        },
        "formatting_check": {
            "name": "formatting_check",
            "location": 1031,
            "return": [],
            "arguments": {}
        },
        "do_formatting": {
            "name": "do_formatting",
            "location": 1038,
            "return": [],
            "arguments": {
                "check": []
            }
        },
        "pyroma": {
            "name": "pyroma",
            "location": 1081,
            "return": [],
            "arguments": {}
        },
        "do_pyroma": {
            "name": "do_pyroma",
            "location": 1089,
            "return": [],
            "arguments": {}
        },
        "docker_lint": {
            "name": "docker_lint",
            "location": 1105,
            "return": [],
            "arguments": {}
        },
        "yaml_lint": {
            "name": "yaml_lint",
            "location": 1120,
            "return": [],
            "arguments": {}
        },
        "liccheck": {
            "name": "liccheck",
            "location": 1136,
            "return": [],
            "arguments": {}
        },
        "do_liccheck": {
            "name": "do_liccheck",
            "location": 1143,
            "return": [],
            "arguments": {}
        },
        "pyright": {
            "name": "pyright",
            "location": 1162,
            "return": [],
            "arguments": {}
        },
        "do_pyright": {
            "name": "do_pyright",
            "location": 1169,
            "return": [],
            "arguments": {}
        },
        "flake8": {
            "name": "flake8",
            "location": 1190,
            "return": [],
            "arguments": {}
        },
        "do_flake8": {
            "name": "do_flake8",
            "location": 1197,
            "return": [],
            "arguments": {}
        },
        "bandit": {
            "name": "bandit",
            "location": 1212,
            "return": [],
            "arguments": {}
        },
        "do_bandit": {
            "name": "do_bandit",
            "location": 1219,
            "return": [],
            "arguments": {}
        },
        "mccabe": {
            "name": "mccabe",
            "location": 1244,
            "return": [],
            "arguments": {}
        },
        "do_mccabe": {
            "name": "do_mccabe",
            "location": 1251,
            "return": [],
            "arguments": {}
        },
        "dodgy_check": {
            "name": "dodgy_check",
            "location": 1268,
            "return": [],
            "arguments": {}
        },
        "do_dodgy": {
            "name": "do_dodgy",
            "location": 1275,
            "return": [],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 1298,
            "return": [],
            "arguments": {}
        },
        "do_detect_secrets": {
            "name": "do_detect_secrets",
            "location": 1307,
            "return": [],
            "arguments": {}
        },
        "precommit": {
            "name": "precommit",
            "location": 1365,
            "return": [],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 1407,
            "return": [],
            "arguments": {}
        },
        "do_lint": {
            "name": "do_lint",
            "location": 1414,
            "return": [],
            "arguments": {}
        },
        "tox": {
            "name": "tox",
            "location": 1516,
            "return": [],
            "arguments": {}
        },
        "tests": {
            "name": "tests",
            "location": 1538,
            "return": [],
            "arguments": {}
        },
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 1543,
            "return": [],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 1561,
            "return": [],
            "arguments": {}
        },
        "coverage_report": {
            "name": "coverage_report",
            "location": 1591,
            "return": [],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 1620,
            "return": [],
            "arguments": {}
        },
        "do_docs": {
            "name": "do_docs",
            "location": 1627,
            "return": [],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 1645,
            "return": [],
            "arguments": {}
        },
        "do_pip_check": {
            "name": "do_pip_check",
            "location": 1652,
            "return": [],
            "arguments": {}
        },
        "safety": {
            "name": "safety",
            "location": 1666,
            "return": [],
            "arguments": {}
        },
        "do_safety": {
            "name": "do_safety",
            "location": 1673,
            "return": [],
            "arguments": {}
        },
        "sonar": {
            "name": "sonar",
            "location": 1688,
            "return": [],
            "arguments": {}
        },
        "do_sonar": {
            "name": "do_sonar",
            "location": 1695,
            "return": [],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 1751,
            "return": [],
            "arguments": {}
        },
        "do_mypy": {
            "name": "do_mypy",
            "location": 1758,
            "return": [],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 1841,
            "return": [],
            "arguments": {}
        },
        "do_pin_dependencies": {
            "name": "do_pin_dependencies",
            "location": 1848,
            "return": [],
            "arguments": {}
        },
        "dead_code": {
            "name": "dead_code",
            "location": 1882,
            "return": [],
            "arguments": {}
        },
        "do_dead_code": {
            "name": "do_dead_code",
            "location": 1889,
            "return": [],
            "arguments": {}
        },
        "call_check_manifest_command": {
            "name": "call_check_manifest_command",
            "location": 1917,
            "return": [],
            "arguments": {
                "output_file_name": [],
                "env": []
            }
        },
        "check_manifest": {
            "name": "check_manifest",
            "location": 1934,
            "return": [],
            "arguments": {}
        },
        "do_check_manifest": {
            "name": "do_check_manifest",
            "location": 1941,
            "return": [],
            "arguments": {}
        },
        "jiggle_version": {
            "name": "jiggle_version",
            "location": 1980,
            "return": [],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 2028,
            "return": [],
            "arguments": {}
        },
        "parallel_checks": {
            "name": "parallel_checks",
            "location": 2038,
            "return": [],
            "arguments": {}
        },
        "slow": {
            "name": "slow",
            "location": 2108,
            "return": [],
            "arguments": {}
        },
        "fast_package": {
            "name": "fast_package",
            "location": 2124,
            "return": [],
            "arguments": {}
        },
        "do_package": {
            "name": "do_package",
            "location": 2131,
            "return": [],
            "arguments": {}
        },
        "check_package": {
            "name": "check_package",
            "location": 2213,
            "return": [],
            "arguments": {}
        },
        "upload_package": {
            "name": "upload_package",
            "location": 2224,
            "return": [],
            "arguments": {}
        },
        "run_gitleaks": {
            "name": "run_gitleaks",
            "location": 2262,
            "return": [],
            "arguments": {}
        },
        "run_truffle_hog": {
            "name": "run_truffle_hog",
            "location": 2290,
            "return": [],
            "arguments": {}
        },
        "pre_commit_hook": {
            "name": "pre_commit_hook",
            "location": 2303,
            "return": [],
            "arguments": {}
        },
        "pre_push_hook": {
            "name": "pre_push_hook",
            "location": 2327,
            "return": [],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 2338,
            "return": [],
            "arguments": {}
        },
        "reports": {
            "name": "reports",
            "location": 2348,
            "return": [],
            "arguments": {}
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "what": [],
                "where": []
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 383,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "skip_if_this_file_does_not_change.real_decorator": {
            "name": "real_decorator",
            "location": 419,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "timed.real_decorator": {
            "name": "real_decorator",
            "location": 535,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "spell_check.read_file": {
            "name": "read_file",
            "location": 765,
            "return": [],
            "arguments": {}
        },
        "do_mypy.contains_a_skip": {
            "name": "contains_a_skip",
            "location": 1796,
            "return": [],
            "arguments": {
                "line_value": []
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "skip_if_this_file_does_not_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "timed.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "do_package.list_files": {
            "name": "list_files",
            "location": 2195,
            "return": [],
            "arguments": {
                "startpath": []
            }
        }
    },
    "jiggle_version-main/dead_code/build_old.py": {
        "git_leaks": {
            "name": "git_leaks",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "git_secrets": {
            "name": "git_secrets",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 95,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 104,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "compile_py": {
            "name": "compile_py",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "prospector": {
            "name": "prospector",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "nose_tests": {
            "name": "nose_tests",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "compile_mark_down": {
            "name": "compile_mark_down",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 367,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "jiggle_version": {
            "name": "jiggle_version",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_setup_py": {
            "name": "check_setup_py",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dead_code": {
            "name": "dead_code",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gemfury": {
            "name": "gemfury",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pre_commit_hook": {
            "name": "pre_commit_hook",
            "location": 566,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pre_push_hook": {
            "name": "pre_push_hook",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "do_check_manifest": {
            "name": "do_check_manifest",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "output_file_name": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "env": [
                    "str"
                ]
            }
        },
        "check_manifest": {
            "name": "check_manifest",
            "location": 605,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 634,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/build_utils.py": {
        "check_is_aws": {
            "name": "check_is_aws",
            "location": 29,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        },
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "what": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "expect_file": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 115,
            "return": [
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "expect_files": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 134,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "env": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 149,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "get_packages": {
            "name": "get_packages",
            "location": 179,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_versions": {
            "name": "get_versions",
            "location": 198,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "run_gitleaks": {
            "name": "run_gitleaks",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_truffle_hog": {
            "name": "run_truffle_hog",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ],
                "where": [
                    "float",
                    "int"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 119,
            "return": [
                "Optional[Dict[str, str]]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/setup.py": {},
    "jiggle_version-main/dead_code/__init__.py": {},
    "jiggle_version-main/dead_code/extra/__init__.py": {},
    "jiggle_version-main/dead_code/extra/vendorized/pep440.py": {
        "is_canonical": {
            "name": "is_canonical",
            "location": 50,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Union[Set[int], List[int], Dict[int, Any]]",
                    "re.Match[str]"
                ],
                "loosedev": [
                    "bool",
                    "Iterable[Tuple[int, Any]]"
                ]
            }
        },
        "assert_valid": {
            "name": "assert_valid",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/dead_code/navio/meta_builder.py": {},
    "jiggle_version-main/dead_code/navio/__init__.py": {},
    "jiggle_version-main/dead_code/navio/__main__.py": {},
    "jiggle_version-main/dead_code/navio/builder/_nb.py": {
        "build": {
            "name": "build",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "print_tasks": {
            "name": "print_tasks",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "file": [
                    "Callable",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "_get_default_task": {
            "name": "_get_default_task",
            "location": 99,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "module": [
                    "Optional[Any]",
                    "MutableMapping",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "_run_default_task": {
            "name": "_run_default_task",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_run_from_task_names": {
            "name": "_run_from_task_names",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "Callable[[str], str]",
                    "List[str]",
                    "dict"
                ],
                "task_names": [
                    "Type",
                    "Iterable[str]",
                    "Type['Signature']",
                    "str"
                ]
            }
        },
        "_get_task": {
            "name": "_get_task",
            "location": 132,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "tasks": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 157,
            "return": [
                "int",
                "bool",
                "List[Tuple[str, str]]",
                "List[Dict]"
            ],
            "arguments": {
                "args_str": [
                    "str"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 180,
            "return": [
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "module": [
                    "dict",
                    "Optional[int]",
                    "Exception",
                    "str",
                    "MutableSequence[str]",
                    "float",
                    "int",
                    "Dict[str, Any]"
                ],
                "logger": [
                    "bool",
                    "nucypher.utilities.logging.Logger",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "task": [
                    "str",
                    "Dict[str, Any]"
                ],
                "completed_tasks": [
                    "Optional[str]"
                ],
                "from_command_line": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "\"PRecord\""
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_create_parser": {
            "name": "_create_parser",
            "location": 239,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "task": {
            "name": "task",
            "location": 278,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "_get_tasks": {
            "name": "_get_tasks",
            "location": 322,
            "return": [
                "Set[str]",
                "set",
                "str",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_get_max_name_length": {
            "name": "_get_max_name_length",
            "location": 333,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "module": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_logger": {
            "name": "_get_logger",
            "location": 342,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "json_serial": {
            "name": "json_serial",
            "location": 372,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime",
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 384,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "print_out": {
            "name": "print_out",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "print_err": {
            "name": "print_err",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[str, bytes]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "zipdir": {
            "name": "zipdir",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "zip_file": [
                    "str",
                    "zipfile.ZipFile",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "pushd": {
            "name": "pushd",
            "location": 432,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dirname": [
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "add_env": {
            "name": "add_env",
            "location": 436,
            "return": [
                "str",
                "Dict[str, str]",
                "Tuple[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "task.decorator": {
            "name": "decorator",
            "location": 293,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Tuple[List[Any], Tuple[str, str], Optional[Any]]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Optional[Sequence[Any]]"
                ],
                "dependencies": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Optional[int]",
                    "Type[T]"
                ],
                "options": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        },
        "Task.__call__": {
            "name": "__call__",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_task": {
            "name": "is_task",
            "location": 315,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "int"
                ],
                "obj": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "PushdContext.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PushdContext.__enter__": {
            "name": "__enter__",
            "location": 423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushdContext.__exit__": {
            "name": "__exit__",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "jiggle_version-main/dead_code/navio/builder/__init__.py": {},
    "jiggle_version-main/dead_code/navio/builder/tests/test_nb.py": {
        "fpath": {
            "name": "fpath",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "mod": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "simulate_dynamic_module_load": {
            "name": "simulate_dynamic_module_load",
            "location": 19,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "Optional[float]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "mod": [
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "reset_build_file": {
            "name": "reset_build_file",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "mod": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 31,
            "return": [
                "Callable[[Any], bool]",
                "Dict[str, List[int]]",
                "dict",
                "Optional[float]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "mod": [
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ],
                "params": [
                    "str",
                    "list",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "List[Tuple[float, str]]",
                    "bool"
                ],
                "init_mod": [
                    "bool",
                    "str",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "mock_stdout": {
            "name": "mock_stdout",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestParseArgs.test_parsing_commandline": {
            "name": "test_parsing_commandline",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_parsing_commandline_help": {
            "name": "test_parsing_commandline_help",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_parsing_commandline_build_file": {
            "name": "test_parsing_commandline_build_file",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImport.test_import": {
            "name": "test_import",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildSimple.test_get_tasks": {
            "name": "test_get_tasks",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_get_tasks": {
            "name": "test_get_tasks",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_dependencies_for_imported": {
            "name": "test_dependencies_for_imported",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_dependencies_that_are_imported_e2e": {
            "name": "test_dependencies_that_are_imported_e2e",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorationValidation.test_task_without_braces": {
            "name": "test_task_without_braces",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorationValidation.test_dependency_not_a_task": {
            "name": "test_dependency_not_a_task",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorationValidation.test_dependency_not_a_function": {
            "name": "test_dependency_not_a_function",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptions.module": {
            "name": "module",
            "location": 149,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptions.test_ignore_tasks": {
            "name": "test_ignore_tasks",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "TestOptions.test_docs": {
            "name": "test_docs",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ]
            }
        },
        "TestOptions.test_list_docs": {
            "name": "test_list_docs",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "Callable[[Dict], None]",
                    "dict",
                    "Optional[List[str]]"
                ],
                "args": []
            }
        },
        "TestRuntimeError.test_stop_on_exception": {
            "name": "test_stop_on_exception",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeError.test_exception_on_invalid_task_name": {
            "name": "test_exception_on_invalid_task_name",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartialTaskNames.setup_method": {
            "name": "setup_method",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestPartialTaskNames.test_with_partial_name": {
            "name": "test_with_partial_name",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartialTaskNames.test_with_partial_name_and_dependencies": {
            "name": "test_with_partial_name_and_dependencies",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartialTaskNames.test_exception_on_conflicting_partial_names": {
            "name": "test_exception_on_conflicting_partial_names",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTask.test_simple_default_task": {
            "name": "test_simple_default_task",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultTask.test_mod_with_defaults_which_imports_other_files_with_defaults": {
            "name": "test_mod_with_defaults_which_imports_other_files_with_defaults",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleTasks.setup_method": {
            "name": "setup_method",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestMultipleTasks.test_dependency_is_run_only_once_unless_explicitly_invoked_again": {
            "name": "test_dependency_is_run_only_once_unless_explicitly_invoked_again",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleTasks.test_multiple_partial_names": {
            "name": "test_multiple_partial_names",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.setup_method": {
            "name": "setup_method",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TesttaskArguments.test_passing_optional_params_with_dependencies": {
            "name": "test_passing_optional_params_with_dependencies",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_invoking_varargs_task": {
            "name": "test_invoking_varargs_task",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_partial_name_with_args": {
            "name": "test_partial_name_with_args",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_passing_keyword_args": {
            "name": "test_passing_keyword_args",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_passing_varargs_and_keyword_args": {
            "name": "test_passing_varargs_and_keyword_args",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_validate_keyword_arguments_always_after_args": {
            "name": "test_validate_keyword_arguments_always_after_args",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_invalid_number_of_args": {
            "name": "test_invalid_number_of_args",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesttaskArguments.test_invalid_names_for_kwargs": {
            "name": "test_invalid_names_for_kwargs",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushd.test_pushd": {
            "name": "test_pushd",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildWithDependencies.test_dependencies_that_are_imported_e2e.mod_init": {
            "name": "mod_init",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "mod": [
                    "Callable",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/__init__.py": {},
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/annotation_misuse_1.py": {
        "clean": {
            "name": "clean",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/annotation_misuse_2.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/annotation_misuse_3.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/build_with_params.py": {
        "clean": {
            "name": "clean",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "html": {
            "name": "html",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "tests": {
            "name": "tests",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "copy_file": {
            "name": "copy_file",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "from_": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "to": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "fail_on_error": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "port": [
                    "Dict[str, Any]",
                    "str"
                ],
                "debug": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ignored": {
            "name": "ignored",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "Union[str, List[str]]",
                    "str"
                ],
                "contents": [
                    "Union[str, List[str]]",
                    "str"
                ]
            }
        },
        "append_to_file": {
            "name": "append_to_file",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "Union[str, List[str]]"
                ],
                "contents": [
                    "Union[str, List[str]]"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/default_task_and_import_dependencies.py": {
        "local_task": {
            "name": "local_task",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "task_with_imported_dependencies": {
            "name": "task_with_imported_dependencies",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/dependencies.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "ios": {
            "name": "ios",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "some_utility_method": {
            "name": "some_utility_method",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/options.py": {
        "clean": {
            "name": "clean",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/runtime_error.py": {
        "images": {
            "name": "images",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/simple.py": {
        "clean": {
            "name": "clean",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "images": {
            "name": "images",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "android": {
            "name": "android",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ios": {
            "name": "ios",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "some_utility_method": {
            "name": "some_utility_method",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/dead_code/navio/builder/tests/build_scripts/__init__.py": {},
    "jiggle_version-main/docs/sphinx/source/conf.py": {},
    "jiggle_version-main/docs/usage_example/usage.py": {},
    "jiggle_version-main/docs/usage_example/single_module_example/__init__.py": {},
    "jiggle_version-main/fetch_raw_data/bump_all.py": {
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 9,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ],
                "dir": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "jiggle_version-main/fetch_raw_data/bump_all_directly.py": {},
    "jiggle_version-main/fetch_raw_data/pypi_versions.py": {
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 18,
            "return": [
                "str",
                "dict",
                "set",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "download_package": {
            "name": "download_package",
            "location": 27,
            "return": [
                "Union[tuple, list]",
                "set",
                "Union[str, bytes]"
            ],
            "arguments": {
                "rows": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ]
            }
        },
        "package_info": {
            "name": "package_info",
            "location": 42,
            "return": [
                "bool",
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "rows": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "Iterable[Dict]"
                ]
            }
        },
        "done_packages": {
            "name": "done_packages",
            "location": 55,
            "return": [
                "str",
                "Union[str, List[str]]",
                "List[str]",
                "IO"
            ],
            "arguments": {}
        },
        "read_packages": {
            "name": "read_packages",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/jiggle_version/central_module_finder.py": {
        "CentralModuleFinder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_opener": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "CentralModuleFinder.find_setup_file_name": {
            "name": "find_setup_file_name",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralModuleFinder._read_file": {
            "name": "_read_file",
            "location": 49,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[Any]"
                ]
            }
        },
        "CentralModuleFinder.read_setup_py_source": {
            "name": "read_setup_py_source",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralModuleFinder.parse_package_name": {
            "name": "parse_package_name",
            "location": 73,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralModuleFinder.find_central_module": {
            "name": "find_central_module",
            "location": 110,
            "return": [
                "str",
                "int",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralModuleFinder.remove_likely_non_central": {
            "name": "remove_likely_non_central",
            "location": 159,
            "return": [
                "str",
                "Optional[str]",
                "Callable",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/commands.py": {
        "bump_version": {
            "name": "bump_version",
            "location": 18,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "project": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "force_init": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "signature": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "find_version": {
            "name": "find_version",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "List[str]"
                ],
                "force_init": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/file_inventory.py": {
        "FileInventory.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "bool"
                ],
                "src": [
                    "str",
                    "TextIO"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/file_makers.py": {
        "FileMaker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "FileMaker.create_init": {
            "name": "create_init",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileMaker.create_version": {
            "name": "create_version",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileMaker.create_setup_cfg": {
            "name": "create_setup_cfg",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/file_opener.py": {
        "FileOpener.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileOpener.is_python_inside": {
            "name": "is_python_inside",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "FileOpener.read_this": {
            "name": "read_this",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "FileOpener.open_this": {
            "name": "open_this",
            "location": 60,
            "return": [
                "AbstractSet[str]",
                "List[str]",
                "str",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "BinaryIO",
                    "List[str]",
                    "str"
                ],
                "how": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "FileOpener.read_metadata": {
            "name": "read_metadata",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/find_version_class.py": {
        "FindVersion.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "dict"
                ],
                "source": [
                    "Optional[str]",
                    "str"
                ],
                "file_opener": [
                    "str",
                    "IO[Any]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "force_init": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "FindVersion.find_any_valid_version": {
            "name": "find_any_valid_version",
            "location": 111,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindVersion.almost_the_same_version": {
            "name": "almost_the_same_version",
            "location": 145,
            "return": [
                "str",
                "List[Union[str, dataworkspaces.utils.lineage_utils.ResourceRef]]",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "version_list": [
                    "List[str]",
                    "Optional[T]",
                    "T",
                    "commands.utils.types.FileList"
                ]
            }
        },
        "FindVersion.validate_current_versions": {
            "name": "validate_current_versions",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindVersion.version_by_eval": {
            "name": "version_by_eval",
            "location": 200,
            "return": [
                "str",
                "bytes",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FindVersion.version_by_import": {
            "name": "version_by_import",
            "location": 225,
            "return": [
                "Optional[cmk.utils.type_defs.HostName]",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str",
                    "cmk.gui.plugins.views.utils.Command"
                ]
            }
        },
        "FindVersion.all_current_versions": {
            "name": "all_current_versions",
            "location": 248,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindVersion.kick_out_bad_versions": {
            "name": "kick_out_bad_versions",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "versions": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Mapping[str, Any]]",
                    "Optional[str]",
                    "utils.diskstaDisk"
                ]
            }
        },
        "FindVersion.all_versions_equal": {
            "name": "all_versions_equal",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "versions": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, str]]",
                    "Mapping[int, str]",
                    "Iterable[str]",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "FindVersion.read_setup_py": {
            "name": "read_setup_py",
            "location": 375,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindVersion.read_text": {
            "name": "read_text",
            "location": 422,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindVersion.read_metadata": {
            "name": "read_metadata",
            "location": 436,
            "return": [
                "int",
                "dict",
                "bool",
                "Dict[str, Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindVersion.find_dunder_version_in_file": {
            "name": "find_dunder_version_in_file",
            "location": 448,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "full_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "FindVersion.version_to_write": {
            "name": "version_to_write",
            "location": 462,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "found": [
                    "bytes",
                    "Optional[Any]",
                    "dict"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/jiggle_class.py": {
        "JiggleVersion.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Iterator[Tuple[str, str]]"
                ],
                "source": [
                    "Optional[str]",
                    "Optional[Dict[str, Dict]]",
                    "Optional[List]",
                    "bool"
                ],
                "file_opener": [
                    "str"
                ],
                "force_init": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "signature": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "JiggleVersion.leading_whitespace": {
            "name": "leading_whitespace",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "JiggleVersion.jiggle_source_code": {
            "name": "jiggle_source_code",
            "location": 163,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiggleVersion.jiggle_setup_py": {
            "name": "jiggle_setup_py",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiggleVersion.version_to_write": {
            "name": "version_to_write",
            "location": 306,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiggleVersion.jiggle_all": {
            "name": "jiggle_all",
            "location": 312,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiggleVersion.jiggle_config_file": {
            "name": "jiggle_config_file",
            "location": 325,
            "return": [
                "str",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiggleVersion.jiggle_text_file": {
            "name": "jiggle_text_file",
            "location": 360,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jiggle_version-main/jiggle_version/main.py": {
        "console_trace": {
            "name": "console_trace",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "process_docopts": {
            "name": "process_docopts",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "extract_bool": {
            "name": "extract_bool",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "arg_name": [
                    "str",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "arguments": [
                    "str",
                    "dict",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/module_finder.py": {
        "ModuleFinder.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_opener": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "ModuleFinder._read_file": {
            "name": "_read_file",
            "location": 66,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[Any]"
                ]
            }
        },
        "ModuleFinder.setup_py_source": {
            "name": "setup_py_source",
            "location": 78,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleFinder.extract_package_dir": {
            "name": "extract_package_dir",
            "location": 88,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleFinder.find_by_any_method": {
            "name": "find_by_any_method",
            "location": 129,
            "return": [
                "str",
                "os.PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleFinder.via_find_packages": {
            "name": "via_find_packages",
            "location": 146,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleFinder.find_top_level_modules_by_dunder_init": {
            "name": "find_top_level_modules_by_dunder_init",
            "location": 183,
            "return": [
                "List[str]",
                "List[T]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleFinder.find_single_file_project": {
            "name": "find_single_file_project",
            "location": 224,
            "return": [
                "str",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jiggle_version-main/jiggle_version/utils.py": {
        "die": {
            "name": "die",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ],
                "why": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "first_value_in_dict": {
            "name": "first_value_in_dict",
            "location": 30,
            "return": [
                "dict",
                "MutableMapping[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "merge_two_dicts": {
            "name": "merge_two_dicts",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "y": [
                    "dict",
                    "Union[Dict, None]",
                    "Callable"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 53,
            "return": [
                "str",
                "dict",
                "set",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "command": [
                    "str",
                    "int",
                    "bool"
                ],
                "raise_errors": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "ifnull": {
            "name": "ifnull",
            "location": 71,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "var": [
                    "T",
                    "Optional[T]",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "val": [
                    "bool",
                    "int"
                ]
            }
        },
        "parse_source_to_dict": {
            "name": "parse_source_to_dict",
            "location": 80,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/version_lint.py": {},
    "jiggle_version-main/jiggle_version/_version.py": {},
    "jiggle_version-main/jiggle_version/__init__.py": {},
    "jiggle_version-main/jiggle_version/__main__.py": {},
    "jiggle_version-main/jiggle_version/parse_package/find_version_by_package.py": {
        "pkg_resources_version": {
            "name": "pkg_resources_version",
            "location": 23,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "set",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "guess_version_by_running_live_package": {
            "name": "guess_version_by_running_live_package",
            "location": 58,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "pkg_key": [
                    "Callable[[str], Any]",
                    "bytes",
                    "int",
                    "Union[int, str]"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/parse_package/package_info_finder.py": {
        "PackageInfoFinder.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_opener": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "PackageInfoFinder._read_file": {
            "name": "_read_file",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[Any]"
                ]
            }
        },
        "PackageInfoFinder.setup_py_source": {
            "name": "setup_py_source",
            "location": 46,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.name_from_setup_py": {
            "name": "name_from_setup_py",
            "location": 58,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "Optional[int]",
                "Union[int, float, complex]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.extract_package_dir": {
            "name": "extract_package_dir",
            "location": 79,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.via_find_packages": {
            "name": "via_find_packages",
            "location": 123,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.find_project": {
            "name": "find_project",
            "location": 149,
            "return": [
                "Set[str]",
                "List[Tuple[int, int]]",
                "Dict[str, Any]",
                "List[str]",
                "Tuple[Any, Any, Any]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.find_malformed_single_file_project": {
            "name": "find_malformed_single_file_project",
            "location": 217,
            "return": [
                "str",
                "dict",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.find_single_file_project": {
            "name": "find_single_file_project",
            "location": 260,
            "return": [
                "str",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageInfoFinder.validate_found_project": {
            "name": "validate_found_project",
            "location": 282,
            "return": [
                "List[list]",
                "Iterator[Dict[str, str]]",
                "Union[tuple, list]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/parse_package/__init__.py": {},
    "jiggle_version-main/jiggle_version/parse_python/is_this_okay.py": {
        "check": {
            "name": "check",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "dst": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/parse_python/__init__.py": {},
    "jiggle_version-main/jiggle_version/parse_version/parse_dunder_version.py": {
        "find_by_ast": {
            "name": "find_by_ast",
            "location": 30,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Dict[str, Any]"
                ],
                "version_token": [
                    "str"
                ]
            }
        },
        "simplify_line": {
            "name": "simplify_line",
            "location": 66,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "keep_comma": [
                    "Iterable[str]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "find_version_by_regex": {
            "name": "find_version_by_regex",
            "location": 92,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "file_source": [
                    "str",
                    "Dict[Tuple[str, str], str]"
                ],
                "version_token": [
                    "str",
                    "Dict[Tuple[str, str], str]"
                ]
            }
        },
        "find_version_by_string_lib": {
            "name": "find_version_by_string_lib",
            "location": 111,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[Any]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Dict[str, Any]"
                ],
                "version_token": [
                    "str"
                ]
            }
        },
        "validate_string": {
            "name": "validate_string",
            "location": 137,
            "return": [
                "str",
                "Optional[float]",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "version": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "find_in_line": {
            "name": "find_in_line",
            "location": 152,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterator[str]"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/parse_version/parse_kwarg_version.py": {
        "find_by_ast": {
            "name": "find_by_ast",
            "location": 21,
            "return": [
                "str",
                "bytes",
                "int",
                "dict"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "find_version_by_regex": {
            "name": "find_version_by_regex",
            "location": 56,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "file_source": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "find_version_by_string_lib": {
            "name": "find_version_by_string_lib",
            "location": 68,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[Any]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "find_in_line": {
            "name": "find_in_line",
            "location": 93,
            "return": [
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[Dict[str, Any]]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/parse_version/schema_guesser.py": {
        "version_object_and_next": {
            "name": "version_object_and_next",
            "location": 42,
            "return": [
                "str",
                "Callable",
                "Tuple[str]",
                "bool",
                "Exception"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Optional[str]"
                ],
                "retries": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/jiggle_version/parse_version/__init__.py": {},
    "jiggle_version-main/navio_tasks/build_state.py": {
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "expect_file": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "expect_files": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "hash_it": {
            "name": "hash_it",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "skip_if_this_file_does_not_change": {
            "name": "skip_if_this_file_does_not_change",
            "location": 170,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "int"
                ],
                "file": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "reset_build_state": {
            "name": "reset_build_state",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "timed": {
            "name": "timed",
            "location": 221,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "is_it_worse": {
            "name": "is_it_worse",
            "location": 241,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]"
                ],
                "current_rows": [
                    "List[str]",
                    "str",
                    "dict",
                    "List[List[str]]",
                    "Sequence[T]",
                    "bool"
                ],
                "margin": [
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "Optional[int]",
                    "Union[str, List[str], None]",
                    "bytes",
                    "Optional[List[\"DeliveryItem\"]]",
                    "str",
                    "Optional[bool]",
                    "Tuple[str, List[str]]"
                ]
            }
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str",
                    "List[str]"
                ],
                "directory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 140,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "skip_if_this_file_does_not_change.real_decorator": {
            "name": "real_decorator",
            "location": 176,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "timed.real_decorator": {
            "name": "real_decorator",
            "location": 224,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "skip_if_this_file_does_not_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "timed.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 228,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/clean.py": {
        "clean_old_files": {
            "name": "clean_old_files",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/cli_commands.py": {
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "is_cmd_exe": {
            "name": "is_cmd_exe",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "check_command_exists": {
            "name": "check_command_exists",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "command": [
                    "bool",
                    "int",
                    "float"
                ],
                "throw_on_missing": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict",
                    "int"
                ],
                "exit_on_missing": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "already_found": {
            "name": "already_found",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "prepinform_simple": {
            "name": "prepinform_simple",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, str]"
                ],
                "no_project": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 160,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "ignore_error": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "env": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 191,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "script": [
                    "List[str]",
                    "str",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 209,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool",
                    "Callable",
                    "BaseException",
                    "cmk.gui.plugins.views.utils.ABCDataSource"
                ],
                "env": [
                    "str",
                    "Type[BaseException]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/file_system.py": {
        "initialize_folders": {
            "name": "initialize_folders",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/network.py": {
        "check_public_ip": {
            "name": "check_public_ip",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ipify": [
                    "str",
                    "dict"
                ]
            }
        },
        "is_known_network": {
            "name": "is_known_network",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/output.py": {
        "say_and_exit": {
            "name": "say_and_exit",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/settings.py": {
        "load_config": {
            "name": "load_config",
            "location": 15,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/system_info.py": {
        "is_windows": {
            "name": "is_windows",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "is_powershell": {
            "name": "is_powershell",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "check_is_aws": {
            "name": "check_is_aws",
            "location": 43,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/utils.py": {
        "safe_cd": {
            "name": "safe_cd",
            "location": 21,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 39,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "script": [
                    "List[str]",
                    "str",
                    "tuple",
                    "Callable"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/__init__.py": {},
    "jiggle_version-main/navio_tasks/commands/cli_bandit.py": {
        "do_bandit": {
            "name": "do_bandit",
            "location": 13,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "is_shell_script_like": [
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_compile_py.py": {
        "do_compile_py": {
            "name": "do_compile_py",
            "location": 17,
            "return": [
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "python": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_detect_secrets.py": {
        "do_detect_secrets": {
            "name": "do_detect_secrets",
            "location": 22,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_django_tests.py": {
        "do_django_tests": {
            "name": "do_django_tests",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_django_tests_regardless": {
            "name": "do_django_tests_regardless",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_flake8.py": {
        "do_flake8": {
            "name": "do_flake8",
            "location": 15,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_get_secrets.py": {
        "do_git_secrets": {
            "name": "do_git_secrets",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_go_gitleaks.py": {
        "run_gitleaks": {
            "name": "run_gitleaks",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_mypy.py": {
        "do_mypy": {
            "name": "do_mypy",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Iterable",
                "List[str]"
            ],
            "arguments": {}
        },
        "evaluated_mypy_results": {
            "name": "evaluated_mypy_results",
            "location": 41,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "mypy_file": [
                    "str",
                    "Optional[str]"
                ],
                "small_code_base_cutoff": [
                    "\"ks.Series[bool]\"",
                    "\"ks.Series[str]\""
                ],
                "maximum_mypy": [
                    "str",
                    "bool",
                    "int"
                ],
                "skips": [
                    "str",
                    "int",
                    "Iterable[List[Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "evaluated_mypy_results.contains_a_skip": {
            "name": "contains_a_skip",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "line_value": [
                    "str",
                    "int",
                    "float",
                    "Tuple[Union[int, str]]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_npm_pyright.py": {
        "do_pyright": {
            "name": "do_pyright",
            "location": 8,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_pylint.py": {
        "do_lint": {
            "name": "do_lint",
            "location": 24,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "folder_type": [
                    "str",
                    "Callable",
                    "Union[object, type]",
                    "Callable[[str], str]"
                ]
            }
        },
        "evaluated_lint_results": {
            "name": "evaluated_lint_results",
            "location": 63,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "lint_output_file_name": [
                    "str"
                ],
                "small_code_base_cut_off": [
                    "\"ks.Series[bool]\"",
                    "\"ks.Series[str]\"",
                    "str"
                ],
                "maximum_lint": [
                    "str",
                    "bool",
                    "int"
                ],
                "fatals": [
                    "str",
                    "Literal",
                    "List[str]",
                    "List[int]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_pytest.py": {
        "do_pytest": {
            "name": "do_pytest",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_pytest_coverage": {
            "name": "do_pytest_coverage",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "fast_only": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/commands/cli_tox.py": {
        "do_tox": {
            "name": "do_tox",
            "location": 12,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/lib_dodgy.py": {
        "do_dodgy": {
            "name": "do_dodgy",
            "location": 13,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/dependency_commands/cli_installs.py": {
        "do_dependency_installs": {
            "name": "do_dependency_installs",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "pipenv": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ],
                "poetry": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ],
                "pip": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/dependency_commands/cli_liccheck.py": {
        "do_liccheck": {
            "name": "do_liccheck",
            "location": 13,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/dependency_commands/cli_pin_dependencies.py": {
        "convert_pipenv_to_requirements": {
            "name": "convert_pipenv_to_requirements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "pipenv": [
                    "bool"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/dependency_commands/cli_pip.py": {
        "do_register_scripts": {
            "name": "do_register_scripts",
            "location": 18,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "dist_is_editable": {
            "name": "dist_is_editable",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "do_pip_check": {
            "name": "do_pip_check",
            "location": 47,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/dependency_commands/cli_safety.py": {
        "do_safety": {
            "name": "do_safety",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/dependency_commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/deprecated_commands/cli_check_manifest.py": {
        "call_check_manifest_command": {
            "name": "call_check_manifest_command",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_name": [
                    "str",
                    "Optional[str]",
                    "Union[str, List[str]]",
                    "int"
                ],
                "env": [
                    "str"
                ]
            }
        },
        "do_check_manifest": {
            "name": "do_check_manifest",
            "location": 46,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/deprecated_commands/cli_pyroma.py": {
        "do_pyroma": {
            "name": "do_pyroma",
            "location": 11,
            "return": [
                "str",
                "Callable",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "do_pyroma_regardless": {
            "name": "do_pyroma_regardless",
            "location": 20,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/deprecated_commands/cli_setup_py.py": {
        "do_package": {
            "name": "do_package",
            "location": 25,
            "return": [
                "bool",
                "str",
                "deque",
                "int"
            ],
            "arguments": {}
        },
        "do_project_validation_for_setup_py": {
            "name": "do_project_validation_for_setup_py",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_package.list_files": {
            "name": "list_files",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "startpath": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/deprecated_commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/mutating_commands/cli_black.py": {
        "do_formatting": {
            "name": "do_formatting",
            "location": 23,
            "return": [
                "set",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "check": [
                    "str",
                    "Dict[str, int]",
                    "List[str]"
                ],
                "state": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/mutating_commands/cli_isort.py": {
        "do_isort": {
            "name": "do_isort",
            "location": 7,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/mutating_commands/cli_jiggle_version.py": {
        "do_jiggle_version": {
            "name": "do_jiggle_version",
            "location": 13,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "is_interactive": [
                    "bool",
                    "str"
                ],
                "target_branch": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "increase_version_on_all_branches": [
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/mutating_commands/cli_npm_prettier.py": {},
    "jiggle_version-main/navio_tasks/mutating_commands/cli_precommit.py": {
        "do_precommit": {
            "name": "do_precommit",
            "location": 19,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "is_interactive": [
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/mutating_commands/cli_pyupgrade.py": {
        "do_pyupgrade": {
            "name": "do_pyupgrade",
            "location": 12,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "is_interactive": [
                    "bool",
                    "List[int]"
                ],
                "minimum_python": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "jiggle_version-main/navio_tasks/mutating_commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/non_breaking_commands/cli_mccabe.py": {
        "do_mccabe": {
            "name": "do_mccabe",
            "location": 12,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/non_breaking_commands/cli_scspell.py": {
        "do_spell_check": {
            "name": "do_spell_check",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_spell_check.read_file": {
            "name": "read_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/non_breaking_commands/cli_sonar.py": {
        "do_sonar": {
            "name": "do_sonar",
            "location": 25,
            "return": [
                "str",
                "List[List[str]]",
                "int",
                "float"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/non_breaking_commands/cli_vulture.py": {
        "do_vulture": {
            "name": "do_vulture",
            "location": 21,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/non_breaking_commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/non_py_commands/cli_openapi.py": {
        "do_openapi_check": {
            "name": "do_openapi_check",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/non_py_commands/cli_yamllint.py": {
        "do_yamllint": {
            "name": "do_yamllint",
            "location": 9,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/non_py_commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/packaging_commands/cli_poetry_package.py": {},
    "jiggle_version-main/navio_tasks/packaging_commands/cli_twine.py": {
        "do_upload_package": {
            "name": "do_upload_package",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/packaging_commands/__init__.py": {},
    "jiggle_version-main/navio_tasks/pure_reports/cli_gitchangelog.py": {
        "do_gitchangelog": {
            "name": "do_gitchangelog",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/pure_reports/cli_pygount.py": {
        "total_loc": {
            "name": "total_loc",
            "location": 15,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {}
        },
        "do_count_lines_of_code": {
            "name": "do_count_lines_of_code",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/pure_reports/cli_sphinx.py": {
        "do_docs": {
            "name": "do_docs",
            "location": 13,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/navio_tasks/pure_reports/__init__.py": {},
    "jiggle_version-main/sample_projects/double_module/execise_foo.py": {},
    "jiggle_version-main/sample_projects/double_module/setup.py": {},
    "jiggle_version-main/sample_projects/double_module/bar/__init__.py": {},
    "jiggle_version-main/sample_projects/double_module/foo/__init__.py": {},
    "jiggle_version-main/sample_projects/dupes_in_dunders/dupes/__init__.py": {},
    "jiggle_version-main/sample_projects/dupes_in_dunders/dupes/__version__.py": {},
    "jiggle_version-main/sample_projects/file_module_src/exercise_me.py": {},
    "jiggle_version-main/sample_projects/file_module_src/file_module.py": {},
    "jiggle_version-main/sample_projects/file_module_src/setup.py": {},
    "jiggle_version-main/sample_projects/file_module_ver_in_file/exercise_me.py": {},
    "jiggle_version-main/sample_projects/file_module_ver_in_file/file_module.py": {},
    "jiggle_version-main/sample_projects/file_module_ver_in_file/setup.py": {},
    "jiggle_version-main/sample_projects/init_project/some_thing/__init__.py": {},
    "jiggle_version-main/sample_projects/sample_src/a.py": {},
    "jiggle_version-main/sample_projects/sample_src/setup.py": {},
    "jiggle_version-main/sample_projects/sample_src/__init__.py": {},
    "jiggle_version-main/sample_projects/setup_only/setup.py": {},
    "jiggle_version-main/sample_projects/ver_in_weird_file/conf.py": {
        "index_html": {
            "name": "index_html",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/sample_projects/ver_in_weird_file/setup.py": {},
    "jiggle_version-main/sample_projects/ver_in_weird_file/setup_helpers.py": {
        "require_python": {
            "name": "require_python",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "minimum": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 73,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "find_doctests": {
            "name": "find_doctests",
            "location": 106,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ],
                "extension": [
                    "str"
                ]
            }
        },
        "long_description": {
            "name": "long_description",
            "location": 130,
            "return": [
                "Optional[List[Any]]",
                "Optional[bool]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "description": {
            "name": "description",
            "location": 142,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/sample_projects/ver_in_weird_file/ver_in_weird_file/smtp.py": {},
    "jiggle_version-main/sample_projects/ver_in_weird_file/ver_in_weird_file/__init__.py": {},
    "jiggle_version-main/sample_projects/with_unlikely_modules/setup.py": {},
    "jiggle_version-main/sample_projects/with_unlikely_modules/test/__init__.py": {},
    "jiggle_version-main/sample_projects/with_unlikely_modules/thing/__init__.py": {},
    "jiggle_version-main/test/test_command_line.py": {
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 17,
            "return": [
                "str",
                "dict",
                "set",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_where_am_i": {
            "name": "test_where_am_i",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_self_version": {
            "name": "test_self_version",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_self_help": {
            "name": "test_self_help",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_damanged_versions.py": {
        "test_various": {
            "name": "test_various",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_find_version.py": {
        "test_find_version": {
            "name": "test_find_version",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_version_by_package": {
            "name": "test_find_version_by_package",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_jiggle_class.py": {
        "test_empty_projects": {
            "name": "test_empty_projects",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_new_probs": {
            "name": "test_new_probs",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_old_probs": {
            "name": "test_old_probs",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_files": {
            "name": "test_no_files",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_main.py": {
        "test_print_versions": {
            "name": "test_print_versions",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_process_docopts_fake_it": {
            "name": "test_process_docopts_fake_it",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_entry_point": {
            "name": "test_entry_point",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_parse_dunder_version.py": {
        "test_comments": {
            "name": "test_comments",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_post_comma": {
            "name": "test_post_comma",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simplify_pre_comma": {
            "name": "test_simplify_pre_comma",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simplify_both_comma": {
            "name": "test_simplify_both_comma",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_regression_scenarios_current": {
            "name": "test_regression_scenarios_current",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_regression_scenarios_old": {
            "name": "test_regression_scenarios_old",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_common_scenarios": {
            "name": "test_common_scenarios",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_is_a_tuple": {
            "name": "test_that_is_a_tuple",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_is_a_int_or_float_b": {
            "name": "test_that_is_a_int_or_float_b",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_parse_kwarg_version.py": {
        "test_regression_scenarios": {
            "name": "test_regression_scenarios",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_common_scenarios": {
            "name": "test_common_scenarios",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_is_a_tuple": {
            "name": "test_that_is_a_tuple",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_is_a_int_or_float_a": {
            "name": "test_that_is_a_int_or_float_a",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_pep440.py": {
        "test_pep440": {
            "name": "test_pep440",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_taggint.py": {},
    "jiggle_version-main/test/test_version_schemes.py": {
        "test_four_part": {
            "name": "test_four_part",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_four_part_again": {
            "name": "test_four_part_again",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_x_package_finder.py": {
        "test_find_package_dir": {
            "name": "test_find_package_dir",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "jiggle_version-main/test/test_zcentral_module_finder.py": {},
    "jiggle_version-main/test/sample_lib/__init__.py": {},
    "jiggle_version-main/test/sample_lib/__version__.py": {},
    "jiggle_version-main/test/test_strings/__init__.py": {},
    "jiggle_version-main/versio/comparable_mixin.py": {
        "_cmp": {
            "name": "_cmp",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "T",
                    "Optional[Union[int, float]]"
                ],
                "b": [
                    "T",
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "ComparableMixin._compare": {
            "name": "_compare",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Mapping",
                    "MutableMapping",
                    "Type[Any]",
                    "int",
                    "bool"
                ],
                "method": [
                    "Mapping",
                    "MutableMapping",
                    "Type[Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "ComparableMixin._cmpkey": {
            "name": "_cmpkey",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ComparableMixin.__lt__": {
            "name": "__lt__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "ComparableMixin.__le__": {
            "name": "__le__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "ComparableMixin.__eq__": {
            "name": "__eq__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "ComparableMixin.__ge__": {
            "name": "__ge__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "ComparableMixin.__gt__": {
            "name": "__gt__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "ComparableMixin.__ne__": {
            "name": "__ne__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        }
    },
    "jiggle_version-main/versio/version.py": {
        "Version._cmpkey": {
            "name": "_cmpkey",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[bool]",
                    "Optional[str]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "Version._compare": {
            "name": "_compare",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[bytes, str, None]",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "T",
                    "int"
                ],
                "method": [
                    "str",
                    "int",
                    "float",
                    "Match",
                    "Sequence[\"Expr\"]",
                    "List[str]"
                ]
            }
        },
        "Version.set_supported_version_schemes": {
            "name": "set_supported_version_schemes",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "list",
                    "List[int]",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]",
                    "List[Dict[str, str]]"
                ],
                "schemes": [
                    "list",
                    "List[int]",
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "Version.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str",
                    "int"
                ],
                "scheme": [
                    "str"
                ]
            }
        },
        "Version._parse": {
            "name": "_parse",
            "location": 177,
            "return": [
                "str",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "scheme": [
                    "str",
                    "Optional[str]",
                    "Union[int, float]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "Version._parse_with_scheme": {
            "name": "_parse_with_scheme",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str",
                    "List[str]",
                    "Optional[int]"
                ],
                "scheme": [
                    "str"
                ]
            }
        },
        "Version.__str__": {
            "name": "__str__",
            "location": 215,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Version.bump": {
            "name": "bump",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Optional[str]"
                ],
                "sub_index": [
                    "str",
                    "float"
                ],
                "sequence": [
                    "str",
                    "List[str]",
                    "list"
                ],
                "promote": [
                    "str",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "Version._increment": {
            "name": "_increment",
            "location": 307,
            "return": [
                "str",
                "Sequence[str]",
                "List[int]",
                "Tuple[int]",
                "Union[List[float], List[int]]",
                "list",
                "Sequence['cirq.Qid']",
                "float",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "Version._part_increment": {
            "name": "_part_increment",
            "location": 337,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[str]",
                "Tuple[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]"
                ],
                "sub_index": [
                    "str",
                    "bool",
                    "Tuple[int]",
                    "Union[int, str]",
                    "bytes",
                    "int"
                ],
                "separator": [
                    "str",
                    "Dict[str, List[str]]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "sub_parts": [
                    "str",
                    "List[int]",
                    "float",
                    "int",
                    "Tuple[int]",
                    "Union[int, str]"
                ],
                "clear_value": [
                    "bool"
                ]
            }
        },
        "Version._bump_parse": {
            "name": "_bump_parse",
            "location": 360,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "type",
                    "List[str]"
                ],
                "part": [
                    "str",
                    "List[str]"
                ],
                "sub_index": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "Version.__str__._type_cast": {
            "name": "_type_cast",
            "location": 234,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "bool",
                "str",
                "list"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]"
                ],
                "cast": [
                    "Optional[str]",
                    "type"
                ]
            }
        }
    },
    "jiggle_version-main/versio/version_scheme.py": {
        "AVersionScheme.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Callable[[float], bool]"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "AVersionScheme.parse": {
            "name": "parse",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VersionScheme.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Set[str]"
                ],
                "parse_regex": [
                    "str",
                    "Optional[str]"
                ],
                "clear_value": [
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "format_str": [
                    "str"
                ],
                "format_types": [
                    "str"
                ],
                "fields": [
                    "Optional[\"FieldContainer\"]",
                    "Optional[object]"
                ],
                "subfields": [
                    "str",
                    "bytes",
                    "T",
                    "dict",
                    "MutableMapping[str, str]",
                    "Set[str]"
                ],
                "parse_flags": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Callable"
                ],
                "compare_order": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "compare_fill": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "sequences": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[Hashable, Any]"
                ],
                "description": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "VersionScheme.parse": {
            "name": "parse",
            "location": 117,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionScheme._is_match": {
            "name": "_is_match",
            "location": 138,
            "return": [
                "dict",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionScheme._release": {
            "name": "_release",
            "location": 150,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionScheme._pre": {
            "name": "_pre",
            "location": 165,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionScheme._post": {
            "name": "_post",
            "location": 179,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionScheme._dev": {
            "name": "_dev",
            "location": 193,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionScheme._local": {
            "name": "_local",
            "location": 207,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionSplitScheme.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Iterable[str]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "split_regex": [
                    "bool",
                    "List[str]"
                ],
                "clear_value": [
                    "str",
                    "bool",
                    "list",
                    "Optional[Callable[[], bool]]"
                ],
                "join_str": [
                    "str",
                    "Dict[str, str]"
                ],
                "description": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Iterable[str]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "VersionSplitScheme.parse": {
            "name": "parse",
            "location": 249,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        },
        "VersionSplitScheme._is_match": {
            "name": "_is_match",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "VersionSplitScheme._release": {
            "name": "_release",
            "location": 281,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "version_str": [
                    "str"
                ]
            }
        }
    },
    "jiggle_version-main/versio/__init__.py": {}
}
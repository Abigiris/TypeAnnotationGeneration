{
    "jsonschema-typed-master/setup.py": {},
    "jsonschema-typed-master/jsonschema_typed/plugin.py": {
        "formatwarning": {
            "name": "formatwarning",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "float",
                    "Sequence",
                    "mypy.nodes.TypeInfo"
                ],
                "category": [
                    "str",
                    "float",
                    "Sequence",
                    "mypy.nodes.TypeInfo"
                ],
                "filepath": [
                    "str",
                    "int",
                    "Optional[float]",
                    "list"
                ],
                "lineno": [
                    "str",
                    "float",
                    "Sequence",
                    "mypy.nodes.TypeInfo"
                ],
                "line": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 417,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "named_builtin_type": {
            "name": "named_builtin_type",
            "location": 425,
            "return": [
                "mypy.nodes.ClassDef",
                "mypy.types.Type",
                "mypy.types.CallableType"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.FunctionContext",
                    "mypy.nodes.CallExpr"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "int",
                    "str",
                    "bool"
                ],
                "outer_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "API.get_type_handler": {
            "name": "get_type_handler",
            "location": 46,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema_type": [
                    "str",
                    "int"
                ]
            }
        },
        "API.get_type": {
            "name": "get_type",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.AnalyzeTypeContext",
                    "Dict[str, Any]"
                ],
                "schema": [
                    "mypy.plugin.ClassDefContext",
                    "Dict[str, Any]",
                    "mypy.plugin.AnalyzeTypeContext",
                    "str"
                ],
                "outer": [
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.AnalyzeTypeContext",
                    "Dict[str, Any]"
                ]
            }
        },
        "API._get_type": {
            "name": "_get_type",
            "location": 117,
            "return": [
                "Type[BaseException]",
                "str",
                "Type",
                "schema.UnionType"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "Dict[str, Any]",
                    "bool"
                ],
                "schema": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "Dict[str, Any]",
                    "bool"
                ],
                "schema_type": [
                    "str",
                    "mypy.nodes.CallExpr"
                ],
                "outer": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "APIv4.const": {
            "name": "const",
            "location": 131,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.ClassDefContext",
                    "Optional[str]"
                ],
                "const": [
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.AnalyzeTypeContext"
                ]
            }
        },
        "APIv4.enum": {
            "name": "enum",
            "location": 137,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.ClassDef"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "List[Union[str, int]]",
                    "mypy.plugin.AnalyzeTypeContext",
                    "bool"
                ],
                "values": [
                    "str",
                    "List[Union[str, int]]",
                    "mypy.plugin.AnalyzeTypeContext",
                    "bool"
                ]
            }
        },
        "APIv4.boolean": {
            "name": "boolean",
            "location": 142,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.ClassDef"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "APIv4.object": {
            "name": "object",
            "location": 154,
            "return": [
                "mypy.types.Type",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.ClassDefContext"
                ],
                "schema": [
                    "str",
                    "bool"
                ],
                "outer": []
            }
        },
        "APIv4.array": {
            "name": "array",
            "location": 195,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext"
                ],
                "schema": [
                    "str",
                    "bool",
                    "basilisp.lang.compiler.nodes.Do"
                ]
            }
        },
        "APIv4.allOf": {
            "name": "allOf",
            "location": 209,
            "return": [
                "mypy.types.Type",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "List[dict]",
                    "list",
                    "mypy.plugin.MethodContext",
                    "List[Dict[str, Any]]",
                    "mypy.plugin.ClassDefContext"
                ],
                "subschema": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "List[dict]",
                    "list",
                    "mypy.plugin.MethodContext",
                    "List[Dict[str, Any]]",
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "APIv4.anyOf": {
            "name": "anyOf",
            "location": 224,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.ClassDef"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "list",
                    "List[dict]",
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.MethodContext",
                    "List[Dict[str, Any]]"
                ],
                "subschema": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "list",
                    "List[dict]",
                    "mypy.plugin.ClassDefContext",
                    "mypy.plugin.MethodContext",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "APIv4.any": {
            "name": "any",
            "location": 230,
            "return": [
                "Optional[mypy.types.Type]",
                "mypy.types.Type",
                "Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "subschema": []
            }
        },
        "APIv4.ref": {
            "name": "ref",
            "location": 234,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext"
                ],
                "ref": []
            }
        },
        "APIv4.string": {
            "name": "string",
            "location": 262,
            "return": [
                "types.TracebackType",
                "str",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "bool",
                    "str"
                ]
            }
        },
        "APIv4.number": {
            "name": "number",
            "location": 266,
            "return": [
                "Optional[mypy.types.Type]",
                "mypy.types.Type",
                "mypy.nodes.ClassDef",
                "type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "Optional[str]"
                ]
            }
        },
        "APIv4.integer": {
            "name": "integer",
            "location": 271,
            "return": [
                "mypy.nodes.TypeInfo"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "bool",
                    "str"
                ]
            }
        },
        "APIv4.default": {
            "name": "default",
            "location": 275,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "APIv4._basic_new_typeinfo": {
            "name": "_basic_new_typeinfo",
            "location": 285,
            "return": [
                "str",
                "bytes",
                "OrderedDict",
                "Dict[str, Any]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.ClassDefContext",
                    "str",
                    "List[mypy.nodes.Argument]"
                ],
                "name": [
                    "str",
                    "mypy.nodes.Context",
                    "Optional[basilisp.lang.compiler.nodes.KeywordArgSupport]",
                    "bool"
                ],
                "basetype_or_fallback": [
                    "mypy.types.Instance",
                    "mypy.nodes.Context",
                    "mypy.nodes.ClassDef"
                ]
            }
        },
        "APIv4._build_typeddict_typeinfo": {
            "name": "_build_typeddict_typeinfo",
            "location": 305,
            "return": [
                "str",
                "BaseException",
                "dict",
                "List['PydanticModelField']",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "str",
                    "List[int]",
                    "int"
                ],
                "name": [
                    "str",
                    "Set[str]"
                ],
                "items": [
                    "List[str]",
                    "Set[str]",
                    "List[mypy.types.Type]",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "mypy.types.Type"
                ],
                "types": [
                    "List[str]",
                    "Set[str]",
                    "List[mypy.types.Type]",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "mypy.types.Type"
                ],
                "required_keys": [
                    "List[str]",
                    "Set[str]",
                    "List[mypy.types.Type]",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "mypy.types.Type"
                ]
            }
        },
        "APIv6.integer": {
            "name": "integer",
            "location": 326,
            "return": [
                "Optional[mypy.types.Type]",
                "mypy.types.Type",
                "mypy.nodes.ClassDef",
                "type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "Optional[str]"
                ]
            }
        },
        "JSONSchemaPlugin.get_type_analyze_hook": {
            "name": "get_type_analyze_hook",
            "location": 342,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "JSONSchemaPlugin.get_dynamic_class_hook": {
            "name": "get_dynamic_class_hook",
            "location": 357,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "apistar.types.WSGIEnviron",
                    "apistar.types.UMIMessage"
                ]
            }
        },
        "JSONSchemaPlugin._load_schema": {
            "name": "_load_schema",
            "location": 363,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "JSONSchemaPlugin.get_additional_deps": {
            "name": "get_additional_deps",
            "location": 367,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "mypy.nodes.MypyFile",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "JSONSchemaPlugin.dyn_class_hook": {
            "name": "dyn_class_hook",
            "location": 371,
            "return": [
                "mypy.types.Type.dDictType"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.MethodSigContext",
                    "mypy.plugin.MethodContext",
                    "mypy.checkmember.AttributeContext",
                    "mypy.plugin.DynamicClassDefContext"
                ]
            }
        },
        "TypeMaker.__init__": {
            "name": "__init__",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_path": [
                    "str",
                    "bool"
                ],
                "schema": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bool",
                    "str"
                ],
                "api_version": [
                    "str",
                    "int",
                    "Callable[[float], None]"
                ]
            }
        },
        "TypeMaker._sanitize_name": {
            "name": "_sanitize_name",
            "location": 409,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "TypeMaker.__call__": {
            "name": "__call__",
            "location": 412,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "int",
                    "mypy.plugin.AnalyzeTypeContext"
                ]
            }
        },
        "JSONSchemaPlugin.get_type_analyze_hook.callback": {
            "name": "callback",
            "location": 345,
            "return": [
                "Type",
                "mypy.nodes.ClassDef",
                "type",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.ClassDefContext"
                ]
            }
        }
    },
    "jsonschema-typed-master/jsonschema_typed/types.py": {
        "JSONSchemaBase": {
            "name": "JSONSchemaBase",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "schema_path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "jsonschema-typed-master/jsonschema_typed/__init__.py": {}
}
{
    "kafthon-master/setup.py": {},
    "kafthon-master/kafthon/events.py": {
        "MetaEvent.__new__": {
            "name": "__new__",
            "location": 16,
            "return": [
                "cmk.utils.type_defs.HostName",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]"
                ],
                "cls_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "base_cls": [
                    "str",
                    "Dict[str, Any]"
                ],
                "attributes": [
                    "str"
                ]
            }
        },
        "BaseEvent.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.__set_defaults": {
            "name": "__set_defaults",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.subscribe": {
            "name": "subscribe",
            "location": 50,
            "return": [
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "recidiviz.calculator.pipeline.utils.time_range_utils.TimeRange",
                    "Callable"
                ],
                "handler": [
                    "Optional[Callable]",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[Union[str, int]]",
                    "Optional[Tuple[int, int]]"
                ],
                "unwrap": [
                    "bool",
                    "recidiviz.calculator.pipeline.utils.time_range_utils.TimeRange",
                    "Callable"
                ]
            }
        },
        "BaseEvent._subscribe": {
            "name": "_subscribe",
            "location": 65,
            "return": [
                "str",
                "bool",
                "int",
                "Iterable[int]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Exception",
                    "Callable"
                ],
                "handler": [
                    "str",
                    "int",
                    "Exception",
                    "Callable"
                ],
                "unwrap": [
                    "str",
                    "int",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "BaseEvent.send": {
            "name": "send",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.validate": {
            "name": "validate",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/kafthon/event_subscription.py": {
        "EventSubscription.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "Dict[str, Dict[str, str]]",
                    "Type[BaseException]",
                    "Optional[str]",
                    "bool"
                ],
                "unwrap": [
                    "str",
                    "int",
                    "Dict[str, Tuple[str, str]]",
                    "Optional[List]",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "handler": [
                    "str",
                    "int",
                    "Dict[str, Tuple[str, str]]",
                    "Optional[List]",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "EventSubscription.event_type": {
            "name": "event_type",
            "location": 13,
            "return": [
                "str",
                "Callable[..., T]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSubscription.unwrap": {
            "name": "unwrap",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSubscription.handler": {
            "name": "handler",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSubscription.__hash__": {
            "name": "__hash__",
            "location": 24,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventSubscription.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/kafthon/exceptions.py": {},
    "kafthon-master/kafthon/field.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field_type": [
                    "bool",
                    "int",
                    "type"
                ],
                "default": [
                    "type",
                    "bool"
                ],
                "is_required": [
                    "bool",
                    "Union[bool, Iterable[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "Field.field_type": {
            "name": "field_type",
            "location": 24,
            "return": [
                "Tuple[Type]",
                "List[str]",
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.is_required": {
            "name": "is_required",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.get_default": {
            "name": "get_default",
            "location": 31,
            "return": [
                "type",
                "Callable[[KT], VT]",
                "Tuple[float, float, float, float]",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/kafthon/field_mapping.py": {
        "FieldMapping.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "int",
                    "List[int]",
                    "dict",
                    "str",
                    "frozenset",
                    "AbstractSet[str]"
                ]
            }
        },
        "FieldMapping.fields": {
            "name": "fields",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMapping.all_field_names": {
            "name": "all_field_names",
            "location": 19,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMapping.required_field_names": {
            "name": "required_field_names",
            "location": 25,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMapping.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "str",
                "BaseException",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FieldMapping.validate_event": {
            "name": "validate_event",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[int, str]"
                ]
            }
        }
    },
    "kafthon-master/kafthon/kafthon.py": {
        "Kafthon.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_hub": [
                    "bool",
                    "str",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "Optional[int]"
                ],
                "runner": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "validate_events": []
            }
        },
        "Kafthon.event_hub": {
            "name": "event_hub",
            "location": 35,
            "return": [
                "Mapping[str, Any]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kafthon.BaseEvent": {
            "name": "BaseEvent",
            "location": 39,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kafthon.BaseRunnable": {
            "name": "BaseRunnable",
            "location": 45,
            "return": [
                "str",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kafthon.register": {
            "name": "register",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool"
                ]
            }
        },
        "Kafthon._register_method_subscription": {
            "name": "_register_method_subscription",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "unwrap": [
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "method": [
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Kafthon.get_event_type_by_cls_path": {
            "name": "get_event_type_by_cls_path",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "Dict[str, dict]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Kafthon.bind_signal": {
            "name": "bind_signal",
            "location": 81,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Optional[Callable]",
                    "str",
                    "Optional[Pattern]",
                    "Optional[str]"
                ],
                "signal_type": [
                    "str",
                    "Optional[int]",
                    "Sequence[Dict[str, Any]]"
                ]
            }
        },
        "Kafthon.fire_signal": {
            "name": "fire_signal",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "signal_type": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kafthon-master/kafthon/registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.register_runnable": {
            "name": "register_runnable",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runnable_cls": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Registry.get_runnable": {
            "name": "get_runnable",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "runnable_path": [
                    "str"
                ]
            }
        }
    },
    "kafthon-master/kafthon/runnables.py": {
        "MetaRunnable.__new__": {
            "name": "__new__",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "type"
                ]
            }
        },
        "BaseRunnable.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRunnable.deploy": {
            "name": "deploy",
            "location": 33,
            "return": [
                "str",
                "Iterable[Sequence[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Collection[str]",
                    "Dict[str, Any]",
                    "type"
                ],
                "init_kwargs": [
                    "str",
                    "dict",
                    "Collection[str]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        }
    },
    "kafthon-master/kafthon/runners.py": {
        "BaseRunner.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "Callable",
                    "List[List[str]]",
                    "type"
                ]
            }
        },
        "BaseRunner.run": {
            "name": "run",
            "location": 15,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "runnable_cls": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ],
                "instance_i": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ],
                "init_kwargs": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "LocalRunner.run": {
            "name": "run",
            "location": 25,
            "return": [
                "List[str]",
                "bool",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "runnable_cls": [
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "instance_i": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ],
                "init_kwargs": [
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        },
        "DockerContainerRunner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerContainerRunner.merge_docker_kwargs": {
            "name": "merge_docker_kwargs",
            "location": 47,
            "return": [
                "bool",
                "str",
                "int",
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "DockerContainerRunner.run": {
            "name": "run",
            "location": 61,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "runnable_cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "instance_i": [
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "init_kwargs": [
                    "int",
                    "Union[bytes, str]",
                    "dict"
                ],
                "docker_kwargs": [
                    "int",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        }
    },
    "kafthon-master/kafthon/serializers.py": {
        "BaseSerializer.serialize": {
            "name": "serialize",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "BaseSerializer.deserialize": {
            "name": "deserialize",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "MsgpackSerializer.serialize": {
            "name": "serialize",
            "location": 23,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "BinaryIO",
                    "str",
                    "Callable",
                    "T",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "data": [
                    "BinaryIO",
                    "str",
                    "Callable",
                    "T",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "as_base64": [
                    "bool"
                ]
            }
        },
        "MsgpackSerializer.deserialize": {
            "name": "deserialize",
            "location": 34,
            "return": [
                "Callable",
                "bool",
                "Dict[str, Any]",
                "float",
                "List[Dict[str, Any]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[float]",
                    "Union[object, type]",
                    "eth.abc.SignedTransactionAPI",
                    "memoryview",
                    "int"
                ],
                "data": [
                    "int",
                    "T",
                    "Exception",
                    "Iterator[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "MsgpackSerializer.obj_encoder": {
            "name": "obj_encoder",
            "location": 45,
            "return": [
                "Mapping",
                "Dict[str, float]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "obj": [
                    "Callable[..., None]",
                    "Set[int]"
                ]
            }
        },
        "MsgpackSerializer.obj_decoder": {
            "name": "obj_decoder",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "list",
                    "float",
                    "pandas.Series"
                ]
            }
        }
    },
    "kafthon-master/kafthon/signals.py": {},
    "kafthon-master/kafthon/start_runnable.py": {
        "start_runnable": {
            "name": "start_runnable",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "runnable_path": [
                    "List[str]",
                    "Callable",
                    "int"
                ],
                "init_kwargs": [
                    "bool",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "kafthon-master/kafthon/utils.py": {
        "get_cls_path": {
            "name": "get_cls_path",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "check_type_is_optional": {
            "name": "check_type_is_optional",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "target_type": [
                    "Type[T]",
                    "str"
                ]
            }
        },
        "check_is_method": {
            "name": "check_is_method",
            "location": 22,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[Any]",
                    "float"
                ]
            }
        }
    },
    "kafthon-master/kafthon/__init__.py": {},
    "kafthon-master/kafthon/hubs/base_hub.py": {
        "BaseHub.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reraise_errors": [
                    "str"
                ]
            }
        },
        "BaseHub.subscribe": {
            "name": "subscribe",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "type",
                    "int",
                    "Exception"
                ],
                "handler": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "unwrap": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "BaseHub._invoke_handlers": {
            "name": "_invoke_handlers",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "BaseHub.send": {
            "name": "send",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "BaseHub.start_receiving": {
            "name": "start_receiving",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "nose2.events.Event"
                ]
            }
        },
        "BaseHub.perform_reset": {
            "name": "perform_reset",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHub.has_subscriptions": {
            "name": "has_subscriptions",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/kafthon/hubs/kafka_hub.py": {
        "KafkaHub.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bootstrap_servers": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "KafkaHub.consumer": {
            "name": "consumer",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaHub.producer": {
            "name": "producer",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaHub.subscribe": {
            "name": "subscribe",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Dict[str, List[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "func": [
                    "str",
                    "Dict[str, List[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "unwrap": [
                    "str",
                    "Dict[str, List[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "KafkaHub.get_topics": {
            "name": "get_topics",
            "location": 50,
            "return": [
                "Dict[str, str]",
                "Type",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaHub.send": {
            "name": "send",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "KafkaHub.start_receiving": {
            "name": "start_receiving",
            "location": 71,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout_ms": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ],
                "max_records": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ]
            }
        },
        "KafkaHub.__del__": {
            "name": "__del__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaHub.perform_reset": {
            "name": "perform_reset",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaHub.close": {
            "name": "close",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/kafthon/hubs/local_hub.py": {
        "LocalHub.send": {
            "name": "send",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "leabra7.events.Event",
                    "dict",
                    "events.Event",
                    "Mapping[str, Any]",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        },
        "LocalHub.start_receiving": {
            "name": "start_receiving",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/kafthon/hubs/__init__.py": {},
    "kafthon-master/tests/conftest.py": {
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "list",
                    "Iterable"
                ],
                "exitstatus": [
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        }
    },
    "kafthon-master/tests/__init__.py": {},
    "kafthon-master/tests/distributed/kafka_runner.py": {
        "KafkaRunner.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaRunner.run": {
            "name": "run",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaRunner.check_connection": {
            "name": "check_connection",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaRunner.remove_container": {
            "name": "remove_container",
            "location": 45,
            "return": [
                "Iterator[Dict[str, str]]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        }
    },
    "kafthon-master/tests/distributed/kafthon_config.py": {
        "get_subscribed_mock": {
            "name": "get_subscribed_mock",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "event_type": [
                    "Callable",
                    "str",
                    "int"
                ],
                "unwrap": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "MyDockerRunnable.process_event": {
            "name": "process_event",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "kafthon-master/tests/distributed/__init__.py": {},
    "kafthon-master/tests/distributed/tests/test_kafka_hub.py": {
        "test_kafka_hub": {
            "name": "test_kafka_hub",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kafthon-master/tests/distributed/tests/test_runnable.py": {
        "test_docker_runnable": {
            "name": "test_docker_runnable",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kafthon-master/tests/distributed/tests/__init__.py": {},
    "kafthon-master/tests/local/kafthon_config.py": {
        "MyEvent.get_subscribed_mock": {
            "name": "get_subscribed_mock",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "unwrap": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "MyLocalRunnable.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyLocalRunnable.process_event": {
            "name": "process_event",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafthon-master/tests/local/__init__.py": {},
    "kafthon-master/tests/local/tests/test_event_validation.py": {
        "test_validation_success": {
            "name": "test_validation_success",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_fail_type": {
            "name": "test_validation_fail_type",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_fail_missing_key": {
            "name": "test_validation_fail_missing_key",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_fail_invalid_key": {
            "name": "test_validation_fail_invalid_key",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_skip_when_sent": {
            "name": "test_validation_skip_when_sent",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "kafthon-master/tests/local/tests/test_local_hub.py": {
        "test_event_receive_wrapped": {
            "name": "test_event_receive_wrapped",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_event_receive_unwrapped": {
            "name": "test_event_receive_unwrapped",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kafthon-master/tests/local/tests/test_runnable.py": {
        "test_local_runnable": {
            "name": "test_local_runnable",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kafthon-master/tests/local/tests/__init__.py": {}
}
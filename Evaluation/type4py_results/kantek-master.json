{
    "kantek-master/kantek/bot.py": {
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kantek-master/kantek/config.py": {
        "Config.__new__": {
            "name": "__new__",
            "location": 52,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[int]",
                    "Type[T]",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "kantek-master/kantek/__init__.py": {},
    "kantek-master/kantek/__main__.py": {},
    "kantek-master/kantek/database/database_wrapper.py": {},
    "kantek-master/kantek/database/errors.py": {},
    "kantek-master/kantek/database/types.py": {},
    "kantek-master/kantek/database/__init__.py": {},
    "kantek-master/kantek/database/tables/abstract_table.py": {
        "AbstractTable.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Tuple[type]",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "kantek-master/kantek/database/tables/banlist.py": {},
    "kantek-master/kantek/database/tables/blacklists.py": {
        "Blacklist.bl": {
            "name": "bl",
            "location": 11,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blacklists.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ]
            }
        }
    },
    "kantek-master/kantek/database/tables/bundesnachrichtendienst.py": {},
    "kantek-master/kantek/database/tables/chats.py": {},
    "kantek-master/kantek/database/tables/strafanzeigen.py": {},
    "kantek-master/kantek/database/tables/templates.py": {},
    "kantek-master/kantek/database/tables/__init__.py": {},
    "kantek-master/kantek/database/tables/postgres/abstract_table_wrapper.py": {
        "AbstractTableWrapper.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "kantek-master/kantek/database/tables/postgres/banlist.py": {},
    "kantek-master/kantek/database/tables/postgres/blacklists.py": {
        "Blacklists.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "types.Ty",
                    "bool",
                    "int"
                ]
            }
        },
        "Blacklists.get": {
            "name": "get",
            "location": 124,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "hex_type": [
                    "str"
                ]
            }
        }
    },
    "kantek-master/kantek/database/tables/postgres/bundesnachrichtendienst.py": {},
    "kantek-master/kantek/database/tables/postgres/chats.py": {},
    "kantek-master/kantek/database/tables/postgres/postgres_wrapper.py": {
        "PostgresWrapper.convert_wildcard": {
            "name": "convert_wildcard",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "kantek-master/kantek/database/tables/postgres/strafanzeigen.py": {},
    "kantek-master/kantek/database/tables/postgres/templates.py": {},
    "kantek-master/kantek/database/tables/postgres/__init__.py": {},
    "kantek-master/kantek/plugins/admins/ban.py": {},
    "kantek-master/kantek/plugins/admins/cleanup.py": {},
    "kantek-master/kantek/plugins/admins/kick.py": {},
    "kantek-master/kantek/plugins/admins/lock.py": {},
    "kantek-master/kantek/plugins/admins/unlock.py": {},
    "kantek-master/kantek/plugins/autobahn/autobahn_mgr.py": {
        "_sync_file_callback": {
            "name": "_sync_file_callback",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "received": [
                    "int",
                    "telethon.tl.custom.Message",
                    "bool",
                    "str"
                ],
                "total": [
                    "int",
                    "telethon.tl.custom.Message",
                    "bool",
                    "str"
                ],
                "msg": [
                    "int",
                    "telethon.tl.custom.Message",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "kantek-master/kantek/plugins/autobahn/banlist.py": {},
    "kantek-master/kantek/plugins/autobahn/gban.py": {
        "_build_message": {
            "name": "_build_message",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "bans": [
                    "Dict[str, List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, float]"
                ],
                "message": [
                    "bool",
                    "List[trezor.messages.CardanoTxCertificateType.CardanoTxCertificateType]",
                    "list",
                    "Iterable[str]"
                ]
            }
        }
    },
    "kantek-master/kantek/plugins/autobahn/raid.py": {},
    "kantek-master/kantek/plugins/autobahn/ungban.py": {},
    "kantek-master/kantek/plugins/autobahn/automatic/grenzschutz.py": {},
    "kantek-master/kantek/plugins/autobahn/automatic/kriminalamt.py": {},
    "kantek-master/kantek/plugins/autobahn/automatic/polizei.py": {},
    "kantek-master/kantek/plugins/automatic/update_groups.py": {},
    "kantek-master/kantek/plugins/builtins/dev.py": {},
    "kantek-master/kantek/plugins/builtins/help.py": {
        "get_event_info": {
            "name": "get_event_info",
            "location": 70,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "event": [
                    "Optional[int]",
                    "str"
                ],
                "subcommands": [
                    "dict",
                    "Config"
                ],
                "config": [
                    "dict",
                    "Config"
                ]
            }
        },
        "get_command_info": {
            "name": "get_command_info",
            "location": 76,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "cmd": [
                    "_pytesconfig.Config",
                    "config.Config",
                    "Optional[str]"
                ],
                "subcommands": [
                    "Optional[str]"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Sequence"
                ]
            }
        },
        "get_description": {
            "name": "get_description",
            "location": 114,
            "return": [
                "str",
                "bytes",
                "Iterable[str]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "callback": [
                    "Callable",
                    "str",
                    "List[List[int]]"
                ],
                "help_cmd": [
                    "str"
                ]
            }
        },
        "get_misc_topics": {
            "name": "get_misc_topics",
            "location": 124,
            "return": [
                "int",
                "List[int]",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "topic": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "subtopics": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kantek-master/kantek/plugins/builtins/kantek.py": {},
    "kantek-master/kantek/plugins/builtins/kill.py": {},
    "kantek-master/kantek/plugins/builtins/tag.py": {},
    "kantek-master/kantek/plugins/private/bundesnachrichtendienst.py": {},
    "kantek-master/kantek/plugins/private/delete.py": {},
    "kantek-master/kantek/plugins/private/follow.py": {
        "format_responses": {
            "name": "format_responses",
            "location": 45,
            "return": [
                "str",
                "dict",
                "set",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "responses": [
                    "dict",
                    "list"
                ]
            }
        }
    },
    "kantek-master/kantek/plugins/private/info.py": {},
    "kantek-master/kantek/plugins/private/invitelink.py": {},
    "kantek-master/kantek/plugins/private/purge.py": {},
    "kantek-master/kantek/plugins/private/schedule.py": {},
    "kantek-master/kantek/plugins/private/spamwatch.py": {},
    "kantek-master/kantek/plugins/private/stats.py": {},
    "kantek-master/kantek/plugins/private/template.py": {},
    "kantek-master/kantek/plugins/private/update.py": {},
    "kantek-master/kantek/plugins/private/user.py": {},
    "kantek-master/kantek/utils/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.disconnect": {
            "name": "disconnect",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kantek-master/kantek/utils/constants.py": {},
    "kantek-master/kantek/utils/errors.py": {},
    "kantek-master/kantek/utils/helpers.py": {
        "hash_file": {
            "name": "hash_file",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "bytes",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "get_commit": {
            "name": "get_commit",
            "location": 156,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "link_commit": {
            "name": "link_commit",
            "location": 161,
            "return": [
                "bool",
                "Optional[Callable[[str], bool]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "type",
                    "dict"
                ]
            }
        }
    },
    "kantek-master/kantek/utils/loghandler.py": {
        "TGChannelLogHandler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "api_id": [],
                "api_hash": [],
                "bot_token": [],
                "channel_id": []
            }
        },
        "TGChannelLogHandler.format": {
            "name": "format",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "TGChannelLogHandler.emit": {
            "name": "emit",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "kantek-master/kantek/utils/parsers.py": {
        "_parse_types": {
            "name": "_parse_types",
            "location": 29,
            "return": [
                "str",
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "arguments": {
            "name": "arguments",
            "location": 54,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "time": {
            "name": "time",
            "location": 168,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "kantek-master/kantek/utils/pluginmgr.py": {
        "_Command.subcommand": {
            "name": "subcommand",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "float"
                ],
                "delete": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "PluginManager.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "utils.clienClient"
                ]
            }
        },
        "PluginManager.command": {
            "name": "command",
            "location": 105,
            "return": [
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str",
                "types.ServiceT"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "fklearn.types.LogType"
                ]
            }
        },
        "PluginManager.event": {
            "name": "event",
            "location": 133,
            "return": [
                "str",
                "int",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "event": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "PluginManager.register_all": {
            "name": "register_all",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager._import_plugins": {
            "name": "_import_plugins",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Command.subcommand.decorator": {
            "name": "decorator",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "callback": [
                    "int"
                ]
            }
        },
        "PluginManager.command.decorator": {
            "name": "decorator",
            "location": 121,
            "return": [],
            "arguments": {
                "callback": []
            }
        },
        "PluginManager.event.decorator": {
            "name": "decorator",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "callback": [
                    "List[str]",
                    "list",
                    "str",
                    "Optional[List[Dict]]"
                ]
            }
        }
    },
    "kantek-master/kantek/utils/tags.py": {
        "Tags.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "Optional[str]"
                ],
                "chat_id": [
                    "int",
                    "str"
                ],
                "private": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "Tags.get": {
            "name": "get",
            "location": 43,
            "return": [
                "str",
                "type",
                "Database"
            ],
            "arguments": {
                "self": [],
                "tag_name": [
                    "str",
                    "Set[str]"
                ],
                "default": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "kantek-master/kantek/utils/__init__.py": {},
    "kantek-master/kantek/vendor/__init__.py": {}
}